# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.datatransfer
import winrt.windows.applicationmodel.datatransfer.dragdrop.core
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.security.cryptography.certificates
import winrt.windows.storage.streams
import winrt.windows.ui
import winrt.windows.ui.core

from winrt.microsoft.web.webview2.core import CoreWebView2BoundsMode, CoreWebView2BrowserProcessExitKind, CoreWebView2BrowsingDataKinds, CoreWebView2CapturePreviewImageFormat, CoreWebView2ClientCertificateKind, CoreWebView2ContextMenuItemKind, CoreWebView2ContextMenuTargetKind, CoreWebView2CookieSameSiteKind, CoreWebView2DefaultDownloadDialogCornerAlignment, CoreWebView2DownloadInterruptReason, CoreWebView2DownloadState, CoreWebView2FaviconImageFormat, CoreWebView2HostResourceAccessKind, CoreWebView2KeyEventKind, CoreWebView2MemoryUsageTargetLevel, CoreWebView2MouseEventKind, CoreWebView2MouseEventVirtualKeys, CoreWebView2MoveFocusReason, CoreWebView2PdfToolbarItems, CoreWebView2PermissionKind, CoreWebView2PermissionState, CoreWebView2PointerEventKind, CoreWebView2PreferredColorScheme, CoreWebView2PrintCollation, CoreWebView2PrintColorMode, CoreWebView2PrintDialogKind, CoreWebView2PrintDuplex, CoreWebView2PrintMediaSize, CoreWebView2PrintOrientation, CoreWebView2PrintStatus, CoreWebView2ProcessFailedKind, CoreWebView2ProcessFailedReason, CoreWebView2ProcessKind, CoreWebView2ScriptDialogKind, CoreWebView2ServerCertificateErrorAction, CoreWebView2SharedBufferAccess, CoreWebView2TrackingPreventionLevel, CoreWebView2WebErrorStatus, CoreWebView2WebResourceContext

Self = typing.TypeVar('Self')

@typing.final
class CoreWebView2PhysicalKeyStatus:
    repeat_count: winrt.system.UInt32
    scan_code: winrt.system.UInt32
    is_extended_key: winrt.system.Int32
    is_menu_key_down: winrt.system.Int32
    was_key_down: winrt.system.Int32
    is_key_released: winrt.system.Int32
    def __init__(self, repeat_count: winrt.system.UInt32, scan_code: winrt.system.UInt32, is_extended_key: winrt.system.Int32, is_menu_key_down: winrt.system.Int32, was_key_down: winrt.system.Int32, is_key_released: winrt.system.Int32) -> None: ...

@typing.final
class CoreWebView2(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2: ...
    def add_host_object_to_script(self, name: str, raw_object: typing.Optional[winrt.system.Object], /) -> None: ...
    def add_script_to_execute_on_document_created_async(self, java_script: str, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def add_web_resource_requested_filter(self, uri: str, resource_context: CoreWebView2WebResourceContext, /) -> None: ...
    def call_dev_tools_protocol_method_async(self, method_name: str, parameters_as_json: str, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def call_dev_tools_protocol_method_for_session_async(self, session_id: str, method_name: str, parameters_as_json: str, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def capture_preview_async(self, image_format: CoreWebView2CapturePreviewImageFormat, image_stream: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> winrt.windows.foundation.IAsyncAction: ...
    def clear_server_certificate_error_actions_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def clear_virtual_host_name_to_folder_mapping(self, host_name: str, /) -> None: ...
    def close_default_download_dialog(self) -> None: ...
    def execute_script_async(self, java_script: str, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def get_dev_tools_protocol_event_receiver(self, event_name: str, /) -> typing.Optional[CoreWebView2DevToolsProtocolEventReceiver]: ...
    def get_favicon_async(self, format: CoreWebView2FaviconImageFormat, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IRandomAccessStream]: ...
    def go_back(self) -> None: ...
    def go_forward(self) -> None: ...
    def navigate(self, uri: str, /) -> None: ...
    def navigate_to_string(self, html_content: str, /) -> None: ...
    def navigate_with_web_resource_request(self, request: typing.Optional[CoreWebView2WebResourceRequest], /) -> None: ...
    def open_default_download_dialog(self) -> None: ...
    def open_dev_tools_window(self) -> None: ...
    def open_task_manager_window(self) -> None: ...
    def post_shared_buffer_to_script(self, shared_buffer: typing.Optional[CoreWebView2SharedBuffer], access: CoreWebView2SharedBufferAccess, additional_data_as_json: str, /) -> None: ...
    def post_web_message_as_json(self, web_message_as_json: str, /) -> None: ...
    def post_web_message_as_string(self, web_message_as_string: str, /) -> None: ...
    def print_async(self, print_settings: typing.Optional[CoreWebView2PrintSettings], /) -> winrt.windows.foundation.IAsyncOperation[CoreWebView2PrintStatus]: ...
    def print_to_pdf_async(self, result_file_path: str, print_settings: typing.Optional[CoreWebView2PrintSettings], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def print_to_pdf_stream_async(self, print_settings: typing.Optional[CoreWebView2PrintSettings], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IRandomAccessStream]: ...
    def reload(self) -> None: ...
    def remove_host_object_from_script(self, name: str, /) -> None: ...
    def remove_script_to_execute_on_document_created(self, id: str, /) -> None: ...
    def remove_web_resource_requested_filter(self, uri: str, resource_context: CoreWebView2WebResourceContext, /) -> None: ...
    def resume(self) -> None: ...
    def set_virtual_host_name_to_folder_mapping(self, host_name: str, folder_path: str, access_kind: CoreWebView2HostResourceAccessKind, /) -> None: ...
    def show_print_u_i(self, print_dialog_kind: CoreWebView2PrintDialogKind, /) -> None: ...
    def stop(self) -> None: ...
    def try_suspend_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def add_basic_authentication_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2BasicAuthenticationRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_basic_authentication_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_context_menu_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2ContextMenuRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_context_menu_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_status_bar_text_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_status_bar_text_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_server_certificate_error_detected(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2ServerCertificateErrorDetectedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_server_certificate_error_detected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_favicon_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_favicon_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_launching_external_uri_scheme(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2LaunchingExternalUriSchemeEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_launching_external_uri_scheme(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_d_o_m_content_loaded(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2DOMContentLoadedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_d_o_m_content_loaded(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_web_resource_response_received(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2WebResourceResponseReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_web_resource_response_received(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_download_starting(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2DownloadStartingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_download_starting(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_created(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2FrameCreatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_frame_created(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_client_certificate_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2ClientCertificateRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_client_certificate_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_is_document_playing_audio_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_is_document_playing_audio_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_is_muted_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_is_muted_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_is_default_download_dialog_open_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_is_default_download_dialog_open_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_contains_full_screen_element_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_contains_full_screen_element_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_content_loading(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2ContentLoadingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_content_loading(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_document_title_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_document_title_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_navigation_completed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2NavigationCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_frame_navigation_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_navigation_starting(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2NavigationStartingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_frame_navigation_starting(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_history_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_history_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_navigation_completed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2NavigationCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_navigation_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_navigation_starting(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2NavigationStartingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_navigation_starting(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_new_window_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2NewWindowRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_new_window_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_permission_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2PermissionRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_permission_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_process_failed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2ProcessFailedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_process_failed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_script_dialog_opening(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2ScriptDialogOpeningEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_script_dialog_opening(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_source_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2SourceChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_source_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_web_message_received(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2WebMessageReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_web_message_received(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_web_resource_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2WebResourceRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_web_resource_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_window_close_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_window_close_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def browser_process_id(self) -> winrt.system.UInt32: ...
    @_property
    def can_go_back(self) -> bool: ...
    @_property
    def can_go_forward(self) -> bool: ...
    @_property
    def contains_full_screen_element(self) -> bool: ...
    @_property
    def document_title(self) -> str: ...
    @_property
    def settings(self) -> typing.Optional[CoreWebView2Settings]: ...
    @_property
    def source(self) -> str: ...
    @_property
    def status_bar_text(self) -> str: ...
    @_property
    def profile(self) -> typing.Optional[CoreWebView2Profile]: ...
    @_property
    def favicon_uri(self) -> str: ...
    @_property
    def memory_usage_target_level(self) -> CoreWebView2MemoryUsageTargetLevel: ...
    @memory_usage_target_level.setter
    def memory_usage_target_level(self, value: CoreWebView2MemoryUsageTargetLevel) -> None: ...
    @_property
    def cookie_manager(self) -> typing.Optional[CoreWebView2CookieManager]: ...
    @_property
    def environment(self) -> typing.Optional[CoreWebView2Environment]: ...
    @_property
    def is_suspended(self) -> bool: ...
    @_property
    def is_muted(self) -> bool: ...
    @is_muted.setter
    def is_muted(self, value: bool) -> None: ...
    @_property
    def is_document_playing_audio(self) -> bool: ...
    @_property
    def default_download_dialog_margin(self) -> winrt.windows.foundation.Point: ...
    @default_download_dialog_margin.setter
    def default_download_dialog_margin(self, value: winrt.windows.foundation.Point) -> None: ...
    @_property
    def default_download_dialog_corner_alignment(self) -> CoreWebView2DefaultDownloadDialogCornerAlignment: ...
    @default_download_dialog_corner_alignment.setter
    def default_download_dialog_corner_alignment(self, value: CoreWebView2DefaultDownloadDialogCornerAlignment) -> None: ...
    @_property
    def is_default_download_dialog_open(self) -> bool: ...

@typing.final
class CoreWebView2AcceleratorKeyPressedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2AcceleratorKeyPressedEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def key_event_kind(self) -> CoreWebView2KeyEventKind: ...
    @_property
    def key_event_l_param(self) -> winrt.system.Int32: ...
    @_property
    def physical_key_status(self) -> CoreWebView2PhysicalKeyStatus: ...
    @_property
    def virtual_key(self) -> winrt.system.UInt32: ...

@typing.final
class CoreWebView2BasicAuthenticationRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2BasicAuthenticationRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def challenge(self) -> str: ...
    @_property
    def response(self) -> typing.Optional[CoreWebView2BasicAuthenticationResponse]: ...
    @_property
    def uri(self) -> str: ...

@typing.final
class CoreWebView2BasicAuthenticationResponse(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2BasicAuthenticationResponse: ...
    @_property
    def user_name(self) -> str: ...
    @user_name.setter
    def user_name(self, value: str) -> None: ...
    @_property
    def password(self) -> str: ...
    @password.setter
    def password(self, value: str) -> None: ...

@typing.final
class CoreWebView2BrowserProcessExitedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2BrowserProcessExitedEventArgs: ...
    @_property
    def browser_process_exit_kind(self) -> CoreWebView2BrowserProcessExitKind: ...
    @_property
    def browser_process_id(self) -> winrt.system.UInt32: ...

@typing.final
class CoreWebView2Certificate(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2Certificate: ...
    def to_certificate(self) -> typing.Optional[winrt.windows.security.cryptography.certificates.Certificate]: ...
    def to_pem_encoding(self) -> str: ...
    @_property
    def der_encoded_serial_number(self) -> str: ...
    @_property
    def display_name(self) -> str: ...
    @_property
    def issuer(self) -> str: ...
    @_property
    def pem_encoded_issuer_certificate_chain(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @_property
    def subject(self) -> str: ...
    @_property
    def valid_from(self) -> winrt.system.Double: ...
    @_property
    def valid_to(self) -> winrt.system.Double: ...

@typing.final
class CoreWebView2ClientCertificate(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2ClientCertificate: ...
    def to_certificate(self) -> typing.Optional[winrt.windows.security.cryptography.certificates.Certificate]: ...
    def to_pem_encoding(self) -> str: ...
    @_property
    def der_encoded_serial_number(self) -> str: ...
    @_property
    def display_name(self) -> str: ...
    @_property
    def issuer(self) -> str: ...
    @_property
    def kind(self) -> CoreWebView2ClientCertificateKind: ...
    @_property
    def pem_encoded_issuer_certificate_chain(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @_property
    def subject(self) -> str: ...
    @_property
    def valid_from(self) -> winrt.system.Double: ...
    @_property
    def valid_to(self) -> winrt.system.Double: ...

@typing.final
class CoreWebView2ClientCertificateRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2ClientCertificateRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    @_property
    def selected_certificate(self) -> typing.Optional[CoreWebView2ClientCertificate]: ...
    @selected_certificate.setter
    def selected_certificate(self, value: typing.Optional[CoreWebView2ClientCertificate]) -> None: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def allowed_certificate_authorities(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @_property
    def host(self) -> str: ...
    @_property
    def is_proxy(self) -> bool: ...
    @_property
    def mutually_trusted_certificates(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[CoreWebView2ClientCertificate]]: ...
    @_property
    def port(self) -> winrt.system.Int32: ...

@typing.final
class CoreWebView2CompositionController(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2CompositionController: ...
    def drag_enter(self, drag_info: typing.Optional[winrt.windows.applicationmodel.datatransfer.dragdrop.core.CoreDragInfo], drag_u_i_override: typing.Optional[winrt.windows.applicationmodel.datatransfer.dragdrop.core.CoreDragUIOverride], /) -> winrt.windows.applicationmodel.datatransfer.DataPackageOperation: ...
    def drag_leave(self) -> None: ...
    def drag_over(self, drag_info: typing.Optional[winrt.windows.applicationmodel.datatransfer.dragdrop.core.CoreDragInfo], drag_u_i_override: typing.Optional[winrt.windows.applicationmodel.datatransfer.dragdrop.core.CoreDragUIOverride], /) -> winrt.windows.applicationmodel.datatransfer.DataPackageOperation: ...
    def drop(self, drag_info: typing.Optional[winrt.windows.applicationmodel.datatransfer.dragdrop.core.CoreDragInfo], /) -> winrt.windows.applicationmodel.datatransfer.DataPackageOperation: ...
    def send_mouse_input(self, event_kind: CoreWebView2MouseEventKind, virtual_keys: CoreWebView2MouseEventVirtualKeys, mouse_data: winrt.system.UInt32, point: winrt.windows.foundation.Point, /) -> None: ...
    def send_pointer_input(self, event_kind: CoreWebView2PointerEventKind, pointer_info: typing.Optional[CoreWebView2PointerInfo], /) -> None: ...
    def add_cursor_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2CompositionController, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_cursor_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def root_visual_target(self) -> typing.Optional[winrt.system.Object]: ...
    @root_visual_target.setter
    def root_visual_target(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def cursor(self) -> typing.Optional[winrt.windows.ui.core.CoreCursor]: ...

@typing.final
class CoreWebView2ContentLoadingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2ContentLoadingEventArgs: ...
    @_property
    def is_error_page(self) -> bool: ...
    @_property
    def navigation_id(self) -> winrt.system.UInt64: ...

@typing.final
class CoreWebView2ContextMenuItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2ContextMenuItem: ...
    def add_custom_item_selected(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2ContextMenuItem, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_custom_item_selected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_enabled(self) -> bool: ...
    @is_enabled.setter
    def is_enabled(self, value: bool) -> None: ...
    @_property
    def is_checked(self) -> bool: ...
    @is_checked.setter
    def is_checked(self, value: bool) -> None: ...
    @_property
    def children(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[CoreWebView2ContextMenuItem]]: ...
    @_property
    def command_id(self) -> winrt.system.Int32: ...
    @_property
    def icon(self) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStream]: ...
    @_property
    def kind(self) -> CoreWebView2ContextMenuItemKind: ...
    @_property
    def label(self) -> str: ...
    @_property
    def name(self) -> str: ...
    @_property
    def shortcut_key_description(self) -> str: ...

@typing.final
class CoreWebView2ContextMenuRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2ContextMenuRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    @_property
    def selected_command_id(self) -> winrt.system.Int32: ...
    @selected_command_id.setter
    def selected_command_id(self, value: winrt.system.Int32) -> None: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def context_menu_target(self) -> typing.Optional[CoreWebView2ContextMenuTarget]: ...
    @_property
    def location(self) -> winrt.windows.foundation.Point: ...
    @_property
    def menu_items(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[CoreWebView2ContextMenuItem]]: ...

@typing.final
class CoreWebView2ContextMenuTarget(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2ContextMenuTarget: ...
    @_property
    def frame_uri(self) -> str: ...
    @_property
    def has_link_text(self) -> bool: ...
    @_property
    def has_link_uri(self) -> bool: ...
    @_property
    def has_selection(self) -> bool: ...
    @_property
    def has_source_uri(self) -> bool: ...
    @_property
    def is_editable(self) -> bool: ...
    @_property
    def is_requested_for_main_frame(self) -> bool: ...
    @_property
    def kind(self) -> CoreWebView2ContextMenuTargetKind: ...
    @_property
    def link_text(self) -> str: ...
    @_property
    def link_uri(self) -> str: ...
    @_property
    def page_uri(self) -> str: ...
    @_property
    def selection_text(self) -> str: ...
    @_property
    def source_uri(self) -> str: ...

@typing.final
class CoreWebView2Controller(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2Controller: ...
    def close(self) -> None: ...
    def move_focus(self, reason: CoreWebView2MoveFocusReason, /) -> None: ...
    def notify_parent_window_position_changed(self) -> None: ...
    def set_bounds_and_zoom_factor(self, bounds: winrt.windows.foundation.Rect, zoom_factor: winrt.system.Double, /) -> None: ...
    def add_rasterization_scale_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2Controller, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_rasterization_scale_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_accelerator_key_pressed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2Controller, CoreWebView2AcceleratorKeyPressedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_accelerator_key_pressed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_got_focus(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2Controller, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_got_focus(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_lost_focus(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2Controller, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_lost_focus(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_move_focus_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2Controller, CoreWebView2MoveFocusRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_move_focus_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_zoom_factor_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2Controller, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_zoom_factor_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def zoom_factor(self) -> winrt.system.Double: ...
    @zoom_factor.setter
    def zoom_factor(self, value: winrt.system.Double) -> None: ...
    @_property
    def parent_window(self) -> typing.Optional[CoreWebView2ControllerWindowReference]: ...
    @parent_window.setter
    def parent_window(self, value: typing.Optional[CoreWebView2ControllerWindowReference]) -> None: ...
    @_property
    def is_visible(self) -> bool: ...
    @is_visible.setter
    def is_visible(self, value: bool) -> None: ...
    @_property
    def bounds(self) -> winrt.windows.foundation.Rect: ...
    @bounds.setter
    def bounds(self, value: winrt.windows.foundation.Rect) -> None: ...
    @_property
    def core_web_view2(self) -> typing.Optional[CoreWebView2]: ...
    @_property
    def default_background_color(self) -> winrt.windows.ui.Color: ...
    @default_background_color.setter
    def default_background_color(self, value: winrt.windows.ui.Color) -> None: ...
    @_property
    def should_detect_monitor_scale_changes(self) -> bool: ...
    @should_detect_monitor_scale_changes.setter
    def should_detect_monitor_scale_changes(self, value: bool) -> None: ...
    @_property
    def rasterization_scale(self) -> winrt.system.Double: ...
    @rasterization_scale.setter
    def rasterization_scale(self, value: winrt.system.Double) -> None: ...
    @_property
    def bounds_mode(self) -> CoreWebView2BoundsMode: ...
    @bounds_mode.setter
    def bounds_mode(self, value: CoreWebView2BoundsMode) -> None: ...
    @_property
    def allow_external_drop(self) -> bool: ...
    @allow_external_drop.setter
    def allow_external_drop(self, value: bool) -> None: ...
    @_property
    def is_browser_hit_transparent(self) -> bool: ...

@typing.final
class CoreWebView2ControllerOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2ControllerOptions: ...
    @_property
    def profile_name(self) -> str: ...
    @profile_name.setter
    def profile_name(self, value: str) -> None: ...
    @_property
    def is_in_private_mode_enabled(self) -> bool: ...
    @is_in_private_mode_enabled.setter
    def is_in_private_mode_enabled(self, value: bool) -> None: ...
    @_property
    def script_locale(self) -> str: ...
    @script_locale.setter
    def script_locale(self, value: str) -> None: ...

@typing.final
class CoreWebView2ControllerWindowReference_Static(type):
    def create_from_core_window(cls, core_window: typing.Optional[winrt.windows.ui.core.CoreWindow], /) -> typing.Optional[CoreWebView2ControllerWindowReference]: ...
    def create_from_window_handle(cls, window_handle: winrt.system.UInt64, /) -> typing.Optional[CoreWebView2ControllerWindowReference]: ...

@typing.final
class CoreWebView2ControllerWindowReference(winrt.system.Object, metaclass=CoreWebView2ControllerWindowReference_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2ControllerWindowReference: ...
    @_property
    def core_window(self) -> typing.Optional[winrt.windows.ui.core.CoreWindow]: ...
    @_property
    def window_handle(self) -> winrt.system.UInt64: ...

@typing.final
class CoreWebView2Cookie(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2Cookie: ...
    @_property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: str) -> None: ...
    @_property
    def same_site(self) -> CoreWebView2CookieSameSiteKind: ...
    @same_site.setter
    def same_site(self, value: CoreWebView2CookieSameSiteKind) -> None: ...
    @_property
    def is_secure(self) -> bool: ...
    @is_secure.setter
    def is_secure(self, value: bool) -> None: ...
    @_property
    def is_http_only(self) -> bool: ...
    @is_http_only.setter
    def is_http_only(self, value: bool) -> None: ...
    @_property
    def expires(self) -> winrt.system.Double: ...
    @expires.setter
    def expires(self, value: winrt.system.Double) -> None: ...
    @_property
    def domain(self) -> str: ...
    @_property
    def is_session(self) -> bool: ...
    @_property
    def name(self) -> str: ...
    @_property
    def path(self) -> str: ...

@typing.final
class CoreWebView2CookieManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2CookieManager: ...
    def add_or_update_cookie(self, cookie: typing.Optional[CoreWebView2Cookie], /) -> None: ...
    def copy_cookie(self, cookie_param: typing.Optional[CoreWebView2Cookie], /) -> typing.Optional[CoreWebView2Cookie]: ...
    def create_cookie(self, name: str, value: str, domain: str, path: str, /) -> typing.Optional[CoreWebView2Cookie]: ...
    def delete_all_cookies(self) -> None: ...
    def delete_cookie(self, cookie: typing.Optional[CoreWebView2Cookie], /) -> None: ...
    def delete_cookies(self, name: str, uri: str, /) -> None: ...
    def delete_cookies_with_domain_and_path(self, name: str, domain: str, path: str, /) -> None: ...
    def get_cookies_async(self, uri: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[CoreWebView2Cookie]]: ...

@typing.final
class CoreWebView2CustomSchemeRegistration(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2CustomSchemeRegistration: ...
    @_property
    def treat_as_secure(self) -> winrt.system.Int32: ...
    @treat_as_secure.setter
    def treat_as_secure(self, value: winrt.system.Int32) -> None: ...
    @_property
    def has_authority_component(self) -> bool: ...
    @has_authority_component.setter
    def has_authority_component(self, value: bool) -> None: ...

@typing.final
class CoreWebView2DOMContentLoadedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2DOMContentLoadedEventArgs: ...
    @_property
    def navigation_id(self) -> winrt.system.UInt64: ...

@typing.final
class CoreWebView2DevToolsProtocolEventReceivedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2DevToolsProtocolEventReceivedEventArgs: ...
    @_property
    def parameter_object_as_json(self) -> str: ...
    @_property
    def session_id(self) -> str: ...

@typing.final
class CoreWebView2DevToolsProtocolEventReceiver(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2DevToolsProtocolEventReceiver: ...
    def add_dev_tools_protocol_event_received(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2, CoreWebView2DevToolsProtocolEventReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_dev_tools_protocol_event_received(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class CoreWebView2DownloadOperation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2DownloadOperation: ...
    def cancel(self) -> None: ...
    def pause(self) -> None: ...
    def resume(self) -> None: ...
    def add_bytes_received_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2DownloadOperation, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_bytes_received_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_estimated_end_time_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2DownloadOperation, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_estimated_end_time_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_state_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2DownloadOperation, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_state_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def bytes_received(self) -> winrt.system.Int64: ...
    @_property
    def can_resume(self) -> bool: ...
    @_property
    def content_disposition(self) -> str: ...
    @_property
    def estimated_end_time(self) -> str: ...
    @_property
    def interrupt_reason(self) -> CoreWebView2DownloadInterruptReason: ...
    @_property
    def mime_type(self) -> str: ...
    @_property
    def result_file_path(self) -> str: ...
    @_property
    def state(self) -> CoreWebView2DownloadState: ...
    @_property
    def total_bytes_to_receive(self) -> winrt.system.Int64: ...
    @_property
    def uri(self) -> str: ...

@typing.final
class CoreWebView2DownloadStartingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2DownloadStartingEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    @_property
    def result_file_path(self) -> str: ...
    @result_file_path.setter
    def result_file_path(self, value: str) -> None: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def download_operation(self) -> typing.Optional[CoreWebView2DownloadOperation]: ...

@typing.final
class CoreWebView2Environment_Static(type):
    def compare_browser_version_string(cls, browser_version_string1: str, browser_version_string2: str, /) -> winrt.system.Int32: ...
    def create_async(cls) -> winrt.windows.foundation.IAsyncOperation[CoreWebView2Environment]: ...
    def create_with_options_async(cls, browser_executable_folder: str, user_data_folder: str, options: typing.Optional[CoreWebView2EnvironmentOptions], /) -> winrt.windows.foundation.IAsyncOperation[CoreWebView2Environment]: ...
    @typing.overload
    def get_available_browser_version_string(cls) -> str: ...
    @typing.overload
    def get_available_browser_version_string(cls, browser_executable_folder: str, /) -> str: ...

@typing.final
class CoreWebView2Environment(winrt.system.Object, metaclass=CoreWebView2Environment_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2Environment: ...
    def create_context_menu_item(self, label: str, icon_stream: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], kind: CoreWebView2ContextMenuItemKind, /) -> typing.Optional[CoreWebView2ContextMenuItem]: ...
    @typing.overload
    def create_core_web_view2_composition_controller_async(self, parent_window: typing.Optional[CoreWebView2ControllerWindowReference], /) -> winrt.windows.foundation.IAsyncOperation[CoreWebView2CompositionController]: ...
    @typing.overload
    def create_core_web_view2_composition_controller_async(self, parent_window: typing.Optional[CoreWebView2ControllerWindowReference], options: typing.Optional[CoreWebView2ControllerOptions], /) -> winrt.windows.foundation.IAsyncOperation[CoreWebView2CompositionController]: ...
    @typing.overload
    def create_core_web_view2_controller_async(self, parent_window: typing.Optional[CoreWebView2ControllerWindowReference], /) -> winrt.windows.foundation.IAsyncOperation[CoreWebView2Controller]: ...
    @typing.overload
    def create_core_web_view2_controller_async(self, parent_window: typing.Optional[CoreWebView2ControllerWindowReference], options: typing.Optional[CoreWebView2ControllerOptions], /) -> winrt.windows.foundation.IAsyncOperation[CoreWebView2Controller]: ...
    def create_core_web_view2_controller_options(self) -> typing.Optional[CoreWebView2ControllerOptions]: ...
    def create_core_web_view2_pointer_info(self) -> typing.Optional[CoreWebView2PointerInfo]: ...
    def create_print_settings(self) -> typing.Optional[CoreWebView2PrintSettings]: ...
    def create_shared_buffer(self, size: winrt.system.UInt64, /) -> typing.Optional[CoreWebView2SharedBuffer]: ...
    def create_web_resource_request(self, uri: str, method: str, post_data: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], headers: str, /) -> typing.Optional[CoreWebView2WebResourceRequest]: ...
    def create_web_resource_response(self, content: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], status_code: winrt.system.Int32, reason_phrase: str, headers: str, /) -> typing.Optional[CoreWebView2WebResourceResponse]: ...
    def get_process_infos(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[CoreWebView2ProcessInfo]]: ...
    def add_browser_process_exited(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2Environment, CoreWebView2BrowserProcessExitedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_browser_process_exited(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_process_infos_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2Environment, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_process_infos_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_new_browser_version_available(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2Environment, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_new_browser_version_available(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def browser_version_string(self) -> str: ...
    @_property
    def failure_report_folder_path(self) -> str: ...
    @_property
    def user_data_folder(self) -> str: ...

@typing.final
class CoreWebView2EnvironmentOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2EnvironmentOptions: ...
    def __new__(cls: typing.Type[CoreWebView2EnvironmentOptions]) -> CoreWebView2EnvironmentOptions:...
    @_property
    def target_compatible_browser_version(self) -> str: ...
    @target_compatible_browser_version.setter
    def target_compatible_browser_version(self, value: str) -> None: ...
    @_property
    def language(self) -> str: ...
    @language.setter
    def language(self, value: str) -> None: ...
    @_property
    def allow_single_sign_on_using_o_s_primary_account(self) -> bool: ...
    @allow_single_sign_on_using_o_s_primary_account.setter
    def allow_single_sign_on_using_o_s_primary_account(self, value: bool) -> None: ...
    @_property
    def additional_browser_arguments(self) -> str: ...
    @additional_browser_arguments.setter
    def additional_browser_arguments(self, value: str) -> None: ...
    @_property
    def exclusive_user_data_folder_access(self) -> bool: ...
    @exclusive_user_data_folder_access.setter
    def exclusive_user_data_folder_access(self, value: bool) -> None: ...
    @_property
    def is_custom_crash_reporting_enabled(self) -> bool: ...
    @is_custom_crash_reporting_enabled.setter
    def is_custom_crash_reporting_enabled(self, value: bool) -> None: ...
    @_property
    def enable_tracking_prevention(self) -> bool: ...
    @enable_tracking_prevention.setter
    def enable_tracking_prevention(self, value: bool) -> None: ...

@typing.final
class CoreWebView2File(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2File: ...
    @_property
    def path(self) -> str: ...

@typing.final
class CoreWebView2Frame(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2Frame: ...
    def execute_script_async(self, java_script: str, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def is_destroyed(self) -> winrt.system.Int32: ...
    def post_shared_buffer_to_script(self, shared_buffer: typing.Optional[CoreWebView2SharedBuffer], access: CoreWebView2SharedBufferAccess, additional_data_as_json: str, /) -> None: ...
    def post_web_message_as_json(self, web_message_as_json: str, /) -> None: ...
    def post_web_message_as_string(self, web_message_as_string: str, /) -> None: ...
    def remove_host_object_from_script(self, name: str, /) -> None: ...
    def add_content_loading(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2Frame, CoreWebView2ContentLoadingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_content_loading(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_d_o_m_content_loaded(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2Frame, CoreWebView2DOMContentLoadedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_d_o_m_content_loaded(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_navigation_completed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2Frame, CoreWebView2NavigationCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_navigation_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_navigation_starting(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2Frame, CoreWebView2NavigationStartingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_navigation_starting(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_web_message_received(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2Frame, CoreWebView2WebMessageReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_web_message_received(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_permission_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2Frame, CoreWebView2PermissionRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_permission_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_destroyed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2Frame, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_destroyed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_name_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWebView2Frame, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_name_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def name(self) -> str: ...

@typing.final
class CoreWebView2FrameCreatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2FrameCreatedEventArgs: ...
    @_property
    def frame(self) -> typing.Optional[CoreWebView2Frame]: ...

@typing.final
class CoreWebView2FrameInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2FrameInfo: ...
    @_property
    def name(self) -> str: ...
    @_property
    def source(self) -> str: ...

@typing.final
class CoreWebView2HttpHeadersCollectionIterator(winrt.system.Object):
    def __iter__(self: Self) -> Self: ...
    def __next__(self) -> winrt.windows.foundation.collections.IKeyValuePair[str, str]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2HttpHeadersCollectionIterator: ...
    def get_many(self, items: winrt.system.Array[winrt.windows.foundation.collections.IKeyValuePair[str, str]], /) -> winrt.system.UInt32: ...
    def move_next(self) -> bool: ...
    @_property
    def current(self) -> typing.Optional[winrt.windows.foundation.collections.IKeyValuePair[str, str]]: ...
    @_property
    def has_current(self) -> bool: ...

@typing.final
class CoreWebView2HttpRequestHeaders(winrt.system.Object):
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, str]]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2HttpRequestHeaders: ...
    def contains(self, name: str, /) -> bool: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, str]]]: ...
    def get_header(self, name: str, /) -> str: ...
    def get_headers(self, name: str, /) -> typing.Optional[CoreWebView2HttpHeadersCollectionIterator]: ...
    def remove_header(self, name: str, /) -> None: ...
    def set_header(self, name: str, value: str, /) -> None: ...

@typing.final
class CoreWebView2HttpResponseHeaders(winrt.system.Object):
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, str]]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2HttpResponseHeaders: ...
    def append_header(self, name: str, value: str, /) -> None: ...
    def contains(self, name: str, /) -> bool: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, str]]]: ...
    def get_header(self, name: str, /) -> str: ...
    def get_headers(self, name: str, /) -> typing.Optional[CoreWebView2HttpHeadersCollectionIterator]: ...

@typing.final
class CoreWebView2LaunchingExternalUriSchemeEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2LaunchingExternalUriSchemeEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def initiating_origin(self) -> str: ...
    @_property
    def is_user_initiated(self) -> bool: ...
    @_property
    def uri(self) -> str: ...

@typing.final
class CoreWebView2MoveFocusRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2MoveFocusRequestedEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def reason(self) -> CoreWebView2MoveFocusReason: ...

@typing.final
class CoreWebView2NavigationCompletedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2NavigationCompletedEventArgs: ...
    @_property
    def is_success(self) -> bool: ...
    @_property
    def navigation_id(self) -> winrt.system.UInt64: ...
    @_property
    def web_error_status(self) -> CoreWebView2WebErrorStatus: ...
    @_property
    def http_status_code(self) -> winrt.system.Int32: ...

@typing.final
class CoreWebView2NavigationStartingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2NavigationStartingEventArgs: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def is_redirected(self) -> bool: ...
    @_property
    def is_user_initiated(self) -> bool: ...
    @_property
    def navigation_id(self) -> winrt.system.UInt64: ...
    @_property
    def request_headers(self) -> typing.Optional[CoreWebView2HttpRequestHeaders]: ...
    @_property
    def uri(self) -> str: ...
    @_property
    def additional_allowed_frame_ancestors(self) -> str: ...
    @additional_allowed_frame_ancestors.setter
    def additional_allowed_frame_ancestors(self, value: str) -> None: ...

@typing.final
class CoreWebView2NewWindowRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2NewWindowRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    @_property
    def new_window(self) -> typing.Optional[CoreWebView2]: ...
    @new_window.setter
    def new_window(self, value: typing.Optional[CoreWebView2]) -> None: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def is_user_initiated(self) -> bool: ...
    @_property
    def uri(self) -> str: ...
    @_property
    def window_features(self) -> typing.Optional[CoreWebView2WindowFeatures]: ...
    @_property
    def name(self) -> str: ...

@typing.final
class CoreWebView2PermissionRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2PermissionRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    @_property
    def state(self) -> CoreWebView2PermissionState: ...
    @state.setter
    def state(self, value: CoreWebView2PermissionState) -> None: ...
    @_property
    def is_user_initiated(self) -> bool: ...
    @_property
    def permission_kind(self) -> CoreWebView2PermissionKind: ...
    @_property
    def uri(self) -> str: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def saves_in_profile(self) -> bool: ...
    @saves_in_profile.setter
    def saves_in_profile(self, value: bool) -> None: ...

@typing.final
class CoreWebView2PermissionSetting(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2PermissionSetting: ...
    @_property
    def permission_kind(self) -> CoreWebView2PermissionKind: ...
    @_property
    def permission_origin(self) -> str: ...
    @_property
    def permission_state(self) -> CoreWebView2PermissionState: ...

@typing.final
class CoreWebView2PointerInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2PointerInfo: ...
    @_property
    def touch_pressure(self) -> winrt.system.UInt32: ...
    @touch_pressure.setter
    def touch_pressure(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def touch_orientation(self) -> winrt.system.UInt32: ...
    @touch_orientation.setter
    def touch_orientation(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def touch_mask(self) -> winrt.system.UInt32: ...
    @touch_mask.setter
    def touch_mask(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def touch_flags(self) -> winrt.system.UInt32: ...
    @touch_flags.setter
    def touch_flags(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def touch_contact_raw(self) -> winrt.windows.foundation.Rect: ...
    @touch_contact_raw.setter
    def touch_contact_raw(self, value: winrt.windows.foundation.Rect) -> None: ...
    @_property
    def touch_contact(self) -> winrt.windows.foundation.Rect: ...
    @touch_contact.setter
    def touch_contact(self, value: winrt.windows.foundation.Rect) -> None: ...
    @_property
    def time(self) -> winrt.system.UInt32: ...
    @time.setter
    def time(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def pointer_kind(self) -> winrt.system.UInt32: ...
    @pointer_kind.setter
    def pointer_kind(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def pointer_id(self) -> winrt.system.UInt32: ...
    @pointer_id.setter
    def pointer_id(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def pointer_flags(self) -> winrt.system.UInt32: ...
    @pointer_flags.setter
    def pointer_flags(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def pointer_device_rect(self) -> winrt.windows.foundation.Rect: ...
    @pointer_device_rect.setter
    def pointer_device_rect(self, value: winrt.windows.foundation.Rect) -> None: ...
    @_property
    def pixel_location_raw(self) -> winrt.windows.foundation.Point: ...
    @pixel_location_raw.setter
    def pixel_location_raw(self, value: winrt.windows.foundation.Point) -> None: ...
    @_property
    def pixel_location(self) -> winrt.windows.foundation.Point: ...
    @pixel_location.setter
    def pixel_location(self, value: winrt.windows.foundation.Point) -> None: ...
    @_property
    def performance_count(self) -> winrt.system.UInt64: ...
    @performance_count.setter
    def performance_count(self, value: winrt.system.UInt64) -> None: ...
    @_property
    def pen_tilt_y(self) -> winrt.system.Int32: ...
    @pen_tilt_y.setter
    def pen_tilt_y(self, value: winrt.system.Int32) -> None: ...
    @_property
    def pen_tilt_x(self) -> winrt.system.Int32: ...
    @pen_tilt_x.setter
    def pen_tilt_x(self, value: winrt.system.Int32) -> None: ...
    @_property
    def pen_rotation(self) -> winrt.system.UInt32: ...
    @pen_rotation.setter
    def pen_rotation(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def pen_pressure(self) -> winrt.system.UInt32: ...
    @pen_pressure.setter
    def pen_pressure(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def pen_mask(self) -> winrt.system.UInt32: ...
    @pen_mask.setter
    def pen_mask(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def pen_flags(self) -> winrt.system.UInt32: ...
    @pen_flags.setter
    def pen_flags(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def key_states(self) -> winrt.system.UInt32: ...
    @key_states.setter
    def key_states(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def input_data(self) -> winrt.system.Int32: ...
    @input_data.setter
    def input_data(self, value: winrt.system.Int32) -> None: ...
    @_property
    def history_count(self) -> winrt.system.UInt32: ...
    @history_count.setter
    def history_count(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def himetric_location_raw(self) -> winrt.windows.foundation.Point: ...
    @himetric_location_raw.setter
    def himetric_location_raw(self, value: winrt.windows.foundation.Point) -> None: ...
    @_property
    def himetric_location(self) -> winrt.windows.foundation.Point: ...
    @himetric_location.setter
    def himetric_location(self, value: winrt.windows.foundation.Point) -> None: ...
    @_property
    def frame_id(self) -> winrt.system.UInt32: ...
    @frame_id.setter
    def frame_id(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def display_rect(self) -> winrt.windows.foundation.Rect: ...
    @display_rect.setter
    def display_rect(self, value: winrt.windows.foundation.Rect) -> None: ...
    @_property
    def button_change_kind(self) -> winrt.system.Int32: ...
    @button_change_kind.setter
    def button_change_kind(self, value: winrt.system.Int32) -> None: ...

@typing.final
class CoreWebView2PrintSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2PrintSettings: ...
    @_property
    def should_print_selection_only(self) -> bool: ...
    @should_print_selection_only.setter
    def should_print_selection_only(self, value: bool) -> None: ...
    @_property
    def should_print_header_and_footer(self) -> bool: ...
    @should_print_header_and_footer.setter
    def should_print_header_and_footer(self, value: bool) -> None: ...
    @_property
    def should_print_backgrounds(self) -> bool: ...
    @should_print_backgrounds.setter
    def should_print_backgrounds(self, value: bool) -> None: ...
    @_property
    def scale_factor(self) -> winrt.system.Double: ...
    @scale_factor.setter
    def scale_factor(self, value: winrt.system.Double) -> None: ...
    @_property
    def page_width(self) -> winrt.system.Double: ...
    @page_width.setter
    def page_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def page_height(self) -> winrt.system.Double: ...
    @page_height.setter
    def page_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def orientation(self) -> CoreWebView2PrintOrientation: ...
    @orientation.setter
    def orientation(self, value: CoreWebView2PrintOrientation) -> None: ...
    @_property
    def margin_top(self) -> winrt.system.Double: ...
    @margin_top.setter
    def margin_top(self, value: winrt.system.Double) -> None: ...
    @_property
    def margin_right(self) -> winrt.system.Double: ...
    @margin_right.setter
    def margin_right(self, value: winrt.system.Double) -> None: ...
    @_property
    def margin_left(self) -> winrt.system.Double: ...
    @margin_left.setter
    def margin_left(self, value: winrt.system.Double) -> None: ...
    @_property
    def margin_bottom(self) -> winrt.system.Double: ...
    @margin_bottom.setter
    def margin_bottom(self, value: winrt.system.Double) -> None: ...
    @_property
    def header_title(self) -> str: ...
    @header_title.setter
    def header_title(self, value: str) -> None: ...
    @_property
    def footer_uri(self) -> str: ...
    @footer_uri.setter
    def footer_uri(self, value: str) -> None: ...
    @_property
    def printer_name(self) -> str: ...
    @printer_name.setter
    def printer_name(self, value: str) -> None: ...
    @_property
    def pages_per_side(self) -> winrt.system.Int32: ...
    @pages_per_side.setter
    def pages_per_side(self, value: winrt.system.Int32) -> None: ...
    @_property
    def page_ranges(self) -> str: ...
    @page_ranges.setter
    def page_ranges(self, value: str) -> None: ...
    @_property
    def media_size(self) -> CoreWebView2PrintMediaSize: ...
    @media_size.setter
    def media_size(self, value: CoreWebView2PrintMediaSize) -> None: ...
    @_property
    def duplex(self) -> CoreWebView2PrintDuplex: ...
    @duplex.setter
    def duplex(self, value: CoreWebView2PrintDuplex) -> None: ...
    @_property
    def copies(self) -> winrt.system.Int32: ...
    @copies.setter
    def copies(self, value: winrt.system.Int32) -> None: ...
    @_property
    def color_mode(self) -> CoreWebView2PrintColorMode: ...
    @color_mode.setter
    def color_mode(self, value: CoreWebView2PrintColorMode) -> None: ...
    @_property
    def collation(self) -> CoreWebView2PrintCollation: ...
    @collation.setter
    def collation(self, value: CoreWebView2PrintCollation) -> None: ...

@typing.final
class CoreWebView2ProcessFailedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2ProcessFailedEventArgs: ...
    @_property
    def process_failed_kind(self) -> CoreWebView2ProcessFailedKind: ...
    @_property
    def exit_code(self) -> winrt.system.Int32: ...
    @_property
    def frame_infos_for_failed_process(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[CoreWebView2FrameInfo]]: ...
    @_property
    def process_description(self) -> str: ...
    @_property
    def reason(self) -> CoreWebView2ProcessFailedReason: ...

@typing.final
class CoreWebView2ProcessInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2ProcessInfo: ...
    @_property
    def kind(self) -> CoreWebView2ProcessKind: ...
    @_property
    def process_id(self) -> winrt.system.Int32: ...

@typing.final
class CoreWebView2Profile(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2Profile: ...
    @typing.overload
    def clear_browsing_data_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def clear_browsing_data_async(self, data_kinds: CoreWebView2BrowsingDataKinds, /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def clear_browsing_data_async(self, data_kinds: CoreWebView2BrowsingDataKinds, start_time: datetime.datetime, end_time: datetime.datetime, /) -> winrt.windows.foundation.IAsyncAction: ...
    def get_non_default_permission_settings_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[CoreWebView2PermissionSetting]]: ...
    def set_permission_state_async(self, permission_kind: CoreWebView2PermissionKind, origin: str, state: CoreWebView2PermissionState, /) -> winrt.windows.foundation.IAsyncAction: ...
    @_property
    def preferred_color_scheme(self) -> CoreWebView2PreferredColorScheme: ...
    @preferred_color_scheme.setter
    def preferred_color_scheme(self, value: CoreWebView2PreferredColorScheme) -> None: ...
    @_property
    def default_download_folder_path(self) -> str: ...
    @default_download_folder_path.setter
    def default_download_folder_path(self, value: str) -> None: ...
    @_property
    def is_in_private_mode_enabled(self) -> bool: ...
    @_property
    def profile_name(self) -> str: ...
    @_property
    def profile_path(self) -> str: ...
    @_property
    def preferred_tracking_prevention_level(self) -> CoreWebView2TrackingPreventionLevel: ...
    @preferred_tracking_prevention_level.setter
    def preferred_tracking_prevention_level(self, value: CoreWebView2TrackingPreventionLevel) -> None: ...
    @_property
    def cookie_manager(self) -> typing.Optional[CoreWebView2CookieManager]: ...
    @_property
    def is_password_autosave_enabled(self) -> bool: ...
    @is_password_autosave_enabled.setter
    def is_password_autosave_enabled(self, value: bool) -> None: ...
    @_property
    def is_general_autofill_enabled(self) -> bool: ...
    @is_general_autofill_enabled.setter
    def is_general_autofill_enabled(self, value: bool) -> None: ...

@typing.final
class CoreWebView2ScriptDialogOpeningEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2ScriptDialogOpeningEventArgs: ...
    def accept(self) -> None: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    @_property
    def result_text(self) -> str: ...
    @result_text.setter
    def result_text(self, value: str) -> None: ...
    @_property
    def default_text(self) -> str: ...
    @_property
    def kind(self) -> CoreWebView2ScriptDialogKind: ...
    @_property
    def message(self) -> str: ...
    @_property
    def uri(self) -> str: ...

@typing.final
class CoreWebView2ServerCertificateErrorDetectedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2ServerCertificateErrorDetectedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    @_property
    def action(self) -> CoreWebView2ServerCertificateErrorAction: ...
    @action.setter
    def action(self, value: CoreWebView2ServerCertificateErrorAction) -> None: ...
    @_property
    def error_status(self) -> CoreWebView2WebErrorStatus: ...
    @_property
    def request_uri(self) -> str: ...
    @_property
    def server_certificate(self) -> typing.Optional[CoreWebView2Certificate]: ...

@typing.final
class CoreWebView2Settings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2Settings: ...
    @_property
    def is_zoom_control_enabled(self) -> bool: ...
    @is_zoom_control_enabled.setter
    def is_zoom_control_enabled(self, value: bool) -> None: ...
    @_property
    def is_web_message_enabled(self) -> bool: ...
    @is_web_message_enabled.setter
    def is_web_message_enabled(self, value: bool) -> None: ...
    @_property
    def is_status_bar_enabled(self) -> bool: ...
    @is_status_bar_enabled.setter
    def is_status_bar_enabled(self, value: bool) -> None: ...
    @_property
    def is_script_enabled(self) -> bool: ...
    @is_script_enabled.setter
    def is_script_enabled(self, value: bool) -> None: ...
    @_property
    def is_built_in_error_page_enabled(self) -> bool: ...
    @is_built_in_error_page_enabled.setter
    def is_built_in_error_page_enabled(self, value: bool) -> None: ...
    @_property
    def are_host_objects_allowed(self) -> bool: ...
    @are_host_objects_allowed.setter
    def are_host_objects_allowed(self, value: bool) -> None: ...
    @_property
    def are_dev_tools_enabled(self) -> bool: ...
    @are_dev_tools_enabled.setter
    def are_dev_tools_enabled(self, value: bool) -> None: ...
    @_property
    def are_default_script_dialogs_enabled(self) -> bool: ...
    @are_default_script_dialogs_enabled.setter
    def are_default_script_dialogs_enabled(self, value: bool) -> None: ...
    @_property
    def are_default_context_menus_enabled(self) -> bool: ...
    @are_default_context_menus_enabled.setter
    def are_default_context_menus_enabled(self, value: bool) -> None: ...
    @_property
    def host_object_dispatch_adapter(self) -> typing.Optional[ICoreWebView2DispatchAdapter]: ...
    @host_object_dispatch_adapter.setter
    def host_object_dispatch_adapter(self, value: typing.Optional[ICoreWebView2DispatchAdapter]) -> None: ...
    @_property
    def user_agent(self) -> str: ...
    @user_agent.setter
    def user_agent(self, value: str) -> None: ...
    @_property
    def are_browser_accelerator_keys_enabled(self) -> bool: ...
    @are_browser_accelerator_keys_enabled.setter
    def are_browser_accelerator_keys_enabled(self, value: bool) -> None: ...
    @_property
    def is_password_autosave_enabled(self) -> bool: ...
    @is_password_autosave_enabled.setter
    def is_password_autosave_enabled(self, value: bool) -> None: ...
    @_property
    def is_general_autofill_enabled(self) -> bool: ...
    @is_general_autofill_enabled.setter
    def is_general_autofill_enabled(self, value: bool) -> None: ...
    @_property
    def is_pinch_zoom_enabled(self) -> bool: ...
    @is_pinch_zoom_enabled.setter
    def is_pinch_zoom_enabled(self, value: bool) -> None: ...
    @_property
    def is_swipe_navigation_enabled(self) -> bool: ...
    @is_swipe_navigation_enabled.setter
    def is_swipe_navigation_enabled(self, value: bool) -> None: ...
    @_property
    def hidden_pdf_toolbar_items(self) -> CoreWebView2PdfToolbarItems: ...
    @hidden_pdf_toolbar_items.setter
    def hidden_pdf_toolbar_items(self, value: CoreWebView2PdfToolbarItems) -> None: ...
    @_property
    def is_reputation_checking_required(self) -> bool: ...
    @is_reputation_checking_required.setter
    def is_reputation_checking_required(self, value: bool) -> None: ...

@typing.final
class CoreWebView2SharedBuffer(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2SharedBuffer: ...
    def close(self) -> None: ...
    def open_stream(self) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStream]: ...
    @_property
    def size(self) -> winrt.system.UInt64: ...
    @_property
    def buffer(self) -> typing.Optional[winrt.windows.foundation.IMemoryBufferReference]: ...

@typing.final
class CoreWebView2SourceChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2SourceChangedEventArgs: ...
    @_property
    def is_new_document(self) -> bool: ...

@typing.final
class CoreWebView2WebMessageReceivedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2WebMessageReceivedEventArgs: ...
    def try_get_web_message_as_string(self) -> str: ...
    @_property
    def source(self) -> str: ...
    @_property
    def web_message_as_json(self) -> str: ...
    @_property
    def additional_objects(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.system.Object]]: ...

@typing.final
class CoreWebView2WebResourceRequest(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2WebResourceRequest: ...
    @_property
    def uri(self) -> str: ...
    @uri.setter
    def uri(self, value: str) -> None: ...
    @_property
    def method(self) -> str: ...
    @method.setter
    def method(self, value: str) -> None: ...
    @_property
    def content(self) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStream]: ...
    @content.setter
    def content(self, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream]) -> None: ...
    @_property
    def headers(self) -> typing.Optional[CoreWebView2HttpRequestHeaders]: ...

@typing.final
class CoreWebView2WebResourceRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2WebResourceRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    @_property
    def response(self) -> typing.Optional[CoreWebView2WebResourceResponse]: ...
    @response.setter
    def response(self, value: typing.Optional[CoreWebView2WebResourceResponse]) -> None: ...
    @_property
    def request(self) -> typing.Optional[CoreWebView2WebResourceRequest]: ...
    @_property
    def resource_context(self) -> CoreWebView2WebResourceContext: ...

@typing.final
class CoreWebView2WebResourceResponse(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2WebResourceResponse: ...
    @_property
    def status_code(self) -> winrt.system.Int32: ...
    @status_code.setter
    def status_code(self, value: winrt.system.Int32) -> None: ...
    @_property
    def reason_phrase(self) -> str: ...
    @reason_phrase.setter
    def reason_phrase(self, value: str) -> None: ...
    @_property
    def content(self) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStream]: ...
    @content.setter
    def content(self, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream]) -> None: ...
    @_property
    def headers(self) -> typing.Optional[CoreWebView2HttpResponseHeaders]: ...

@typing.final
class CoreWebView2WebResourceResponseReceivedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2WebResourceResponseReceivedEventArgs: ...
    @_property
    def request(self) -> typing.Optional[CoreWebView2WebResourceRequest]: ...
    @_property
    def response(self) -> typing.Optional[CoreWebView2WebResourceResponseView]: ...

@typing.final
class CoreWebView2WebResourceResponseView(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2WebResourceResponseView: ...
    def get_content_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IRandomAccessStream]: ...
    @_property
    def headers(self) -> typing.Optional[CoreWebView2HttpResponseHeaders]: ...
    @_property
    def reason_phrase(self) -> str: ...
    @_property
    def status_code(self) -> winrt.system.Int32: ...

@typing.final
class CoreWebView2WindowFeatures(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2WindowFeatures: ...
    @_property
    def has_position(self) -> bool: ...
    @_property
    def has_size(self) -> bool: ...
    @_property
    def height(self) -> winrt.system.UInt32: ...
    @_property
    def left(self) -> winrt.system.UInt32: ...
    @_property
    def should_display_menu_bar(self) -> bool: ...
    @_property
    def should_display_scroll_bars(self) -> bool: ...
    @_property
    def should_display_status(self) -> bool: ...
    @_property
    def should_display_toolbar(self) -> bool: ...
    @_property
    def top(self) -> winrt.system.UInt32: ...
    @_property
    def width(self) -> winrt.system.UInt32: ...

@typing.final
class ICoreWebView2DispatchAdapter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICoreWebView2DispatchAdapter: ...
    def clean(self) -> None: ...
    def unwrap_object(self, wrapped: typing.Optional[winrt.system.Object], /) -> typing.Optional[winrt.system.Object]: ...
    def wrap_named_object(self, name: str, adapter: typing.Optional[ICoreWebView2DispatchAdapter], /) -> typing.Optional[winrt.system.Object]: ...
    def wrap_object(self, unwrapped: typing.Optional[winrt.system.Object], adapter: typing.Optional[ICoreWebView2DispatchAdapter], /) -> typing.Optional[winrt.system.Object]: ...

