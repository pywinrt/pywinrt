# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.datatransfer as windows_applicationmodel_datatransfer
import winrt.windows.applicationmodel.datatransfer.dragdrop.core as windows_applicationmodel_datatransfer_dragdrop_core
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.security.cryptography.certificates as windows_security_cryptography_certificates
import winrt.windows.storage.streams as windows_storage_streams
import winrt.windows.ui as windows_ui
import winrt.windows.ui.core as windows_ui_core

from winrt.microsoft.web.webview2.core import CoreWebView2BoundsMode, CoreWebView2BrowserProcessExitKind, CoreWebView2BrowsingDataKinds, CoreWebView2CapturePreviewImageFormat, CoreWebView2ChannelSearchKind, CoreWebView2ClientCertificateKind, CoreWebView2ContextMenuItemKind, CoreWebView2ContextMenuTargetKind, CoreWebView2CookieSameSiteKind, CoreWebView2DefaultDownloadDialogCornerAlignment, CoreWebView2DownloadInterruptReason, CoreWebView2DownloadState, CoreWebView2FaviconImageFormat, CoreWebView2FileSystemHandleKind, CoreWebView2FileSystemHandlePermission, CoreWebView2FrameKind, CoreWebView2HostResourceAccessKind, CoreWebView2KeyEventKind, CoreWebView2MemoryUsageTargetLevel, CoreWebView2MouseEventKind, CoreWebView2MouseEventVirtualKeys, CoreWebView2MoveFocusReason, CoreWebView2NavigationKind, CoreWebView2NonClientRegionKind, CoreWebView2PdfToolbarItems, CoreWebView2PermissionKind, CoreWebView2PermissionState, CoreWebView2PointerEventKind, CoreWebView2PreferredColorScheme, CoreWebView2PrintCollation, CoreWebView2PrintColorMode, CoreWebView2PrintDialogKind, CoreWebView2PrintDuplex, CoreWebView2PrintMediaSize, CoreWebView2PrintOrientation, CoreWebView2PrintStatus, CoreWebView2ProcessFailedKind, CoreWebView2ProcessFailedReason, CoreWebView2ProcessKind, CoreWebView2ReleaseChannels, CoreWebView2SaveAsKind, CoreWebView2SaveAsUIResult, CoreWebView2ScriptDialogKind, CoreWebView2ScrollbarStyle, CoreWebView2ServerCertificateErrorAction, CoreWebView2SharedBufferAccess, CoreWebView2TextDirectionKind, CoreWebView2TrackingPreventionLevel, CoreWebView2WebErrorStatus, CoreWebView2WebResourceContext, CoreWebView2WebResourceRequestSourceKinds

Self = typing.TypeVar('Self')

@typing.final
class CoreWebView2PhysicalKeyStatus:
    repeat_count: winrt.system.UInt32
    scan_code: winrt.system.UInt32
    is_extended_key: winrt.system.Int32
    is_menu_key_down: winrt.system.Int32
    was_key_down: winrt.system.Int32
    is_key_released: winrt.system.Int32
    def __init__(self, repeat_count: winrt.system.UInt32 = 0, scan_code: winrt.system.UInt32 = 0, is_extended_key: winrt.system.Int32 = 0, is_menu_key_down: winrt.system.Int32 = 0, was_key_down: winrt.system.Int32 = 0, is_key_released: winrt.system.Int32 = 0) -> None: ...

@typing.final
class CoreWebView2(winrt.system.Object):
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::AddHostObjectToScript(System.String,System.Object)
    def add_host_object_to_script(self, name: str, raw_object: winrt.system.Object, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Microsoft.Web.WebView2.Core.CoreWebView2::AddScriptToExecuteOnDocumentCreatedAsync(System.String)
    def add_script_to_execute_on_document_created_async(self, java_script: str, /) -> windows_foundation.IAsyncOperation[str]: ...
    @typing.overload
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::AddWebResourceRequestedFilter(System.String,Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext)
    def add_web_resource_requested_filter(self, uri: str, resource_context: CoreWebView2WebResourceContext, /) -> None: ...
    @typing.overload
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::AddWebResourceRequestedFilter(System.String,Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext,Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestSourceKinds)
    def add_web_resource_requested_filter(self, uri: str, resource_context: CoreWebView2WebResourceContext, request_source_kinds: CoreWebView2WebResourceRequestSourceKinds, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Microsoft.Web.WebView2.Core.CoreWebView2::CallDevToolsProtocolMethodAsync(System.String,System.String)
    def call_dev_tools_protocol_method_async(self, method_name: str, parameters_as_json: str, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Microsoft.Web.WebView2.Core.CoreWebView2::CallDevToolsProtocolMethodForSessionAsync(System.String,System.String,System.String)
    def call_dev_tools_protocol_method_for_session_async(self, session_id: str, method_name: str, parameters_as_json: str, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncAction Microsoft.Web.WebView2.Core.CoreWebView2::CapturePreviewAsync(Microsoft.Web.WebView2.Core.CoreWebView2CapturePreviewImageFormat,Windows.Storage.Streams.IRandomAccessStream)
    def capture_preview_async(self, image_format: CoreWebView2CapturePreviewImageFormat, image_stream: windows_storage_streams.IRandomAccessStream, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Microsoft.Web.WebView2.Core.CoreWebView2::ClearServerCertificateErrorActionsAsync()
    def clear_server_certificate_error_actions_async(self) -> windows_foundation.IAsyncAction: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::ClearVirtualHostNameToFolderMapping(System.String)
    def clear_virtual_host_name_to_folder_mapping(self, host_name: str, /) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::CloseDefaultDownloadDialog()
    def close_default_download_dialog(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Microsoft.Web.WebView2.Core.CoreWebView2::ExecuteScriptAsync(System.String)
    def execute_script_async(self, java_script: str, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult> Microsoft.Web.WebView2.Core.CoreWebView2::ExecuteScriptWithResultAsync(System.String)
    def execute_script_with_result_async(self, java_script: str, /) -> windows_foundation.IAsyncOperation[CoreWebView2ExecuteScriptResult]: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver Microsoft.Web.WebView2.Core.CoreWebView2::GetDevToolsProtocolEventReceiver(System.String)
    def get_dev_tools_protocol_event_receiver(self, event_name: str, /) -> CoreWebView2DevToolsProtocolEventReceiver: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStream> Microsoft.Web.WebView2.Core.CoreWebView2::GetFaviconAsync(Microsoft.Web.WebView2.Core.CoreWebView2FaviconImageFormat)
    def get_favicon_async(self, format: CoreWebView2FaviconImageFormat, /) -> windows_foundation.IAsyncOperation[windows_storage_streams.IRandomAccessStream]: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::GoBack()
    def go_back(self) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::GoForward()
    def go_forward(self) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::Navigate(System.String)
    def navigate(self, uri: str, /) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::NavigateToString(System.String)
    def navigate_to_string(self, html_content: str, /) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::NavigateWithWebResourceRequest(Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest)
    def navigate_with_web_resource_request(self, request: CoreWebView2WebResourceRequest, /) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::OpenDefaultDownloadDialog()
    def open_default_download_dialog(self) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::OpenDevToolsWindow()
    def open_dev_tools_window(self) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::OpenTaskManagerWindow()
    def open_task_manager_window(self) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::PostSharedBufferToScript(Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer,Microsoft.Web.WebView2.Core.CoreWebView2SharedBufferAccess,System.String)
    def post_shared_buffer_to_script(self, shared_buffer: CoreWebView2SharedBuffer, access: CoreWebView2SharedBufferAccess, additional_data_as_json: str, /) -> None: ...
    @typing.overload
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::PostWebMessageAsJson(System.String)
    def post_web_message_as_json(self, web_message_as_json: str, /) -> None: ...
    @typing.overload
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::PostWebMessageAsJson(System.String,Windows.Foundation.Collections.IVectorView`1<System.Object>)
    def post_web_message_as_json(self, web_message_as_json: str, additional_objects: typing.Sequence[winrt.system.Object], /) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::PostWebMessageAsString(System.String)
    def post_web_message_as_string(self, web_message_as_string: str, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Microsoft.Web.WebView2.Core.CoreWebView2PrintStatus> Microsoft.Web.WebView2.Core.CoreWebView2::PrintAsync(Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings)
    def print_async(self, print_settings: CoreWebView2PrintSettings, /) -> windows_foundation.IAsyncOperation[CoreWebView2PrintStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Microsoft.Web.WebView2.Core.CoreWebView2::PrintToPdfAsync(System.String,Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings)
    def print_to_pdf_async(self, result_file_path: str, print_settings: CoreWebView2PrintSettings, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStream> Microsoft.Web.WebView2.Core.CoreWebView2::PrintToPdfStreamAsync(Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings)
    def print_to_pdf_stream_async(self, print_settings: CoreWebView2PrintSettings, /) -> windows_foundation.IAsyncOperation[windows_storage_streams.IRandomAccessStream]: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::Reload()
    def reload(self) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::RemoveHostObjectFromScript(System.String)
    def remove_host_object_from_script(self, name: str, /) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::RemoveScriptToExecuteOnDocumentCreated(System.String)
    def remove_script_to_execute_on_document_created(self, id: str, /) -> None: ...
    @typing.overload
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::RemoveWebResourceRequestedFilter(System.String,Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext)
    def remove_web_resource_requested_filter(self, uri: str, resource_context: CoreWebView2WebResourceContext, /) -> None: ...
    @typing.overload
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::RemoveWebResourceRequestedFilter(System.String,Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext,Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestSourceKinds)
    def remove_web_resource_requested_filter(self, uri: str, resource_context: CoreWebView2WebResourceContext, request_source_kinds: CoreWebView2WebResourceRequestSourceKinds, /) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::Resume()
    def resume(self) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::SetVirtualHostNameToFolderMapping(System.String,System.String,Microsoft.Web.WebView2.Core.CoreWebView2HostResourceAccessKind)
    def set_virtual_host_name_to_folder_mapping(self, host_name: str, folder_path: str, access_kind: CoreWebView2HostResourceAccessKind, /) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::ShowPrintUI(Microsoft.Web.WebView2.Core.CoreWebView2PrintDialogKind)
    def show_print_ui(self, print_dialog_kind: CoreWebView2PrintDialogKind, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIResult> Microsoft.Web.WebView2.Core.CoreWebView2::ShowSaveAsUIAsync()
    def show_save_as_ui_async(self) -> windows_foundation.IAsyncOperation[CoreWebView2SaveAsUIResult]: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::Stop()
    def stop(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Microsoft.Web.WebView2.Core.CoreWebView2::TrySuspendAsync()
    def try_suspend_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_BasicAuthenticationRequested(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs>)
    def add_basic_authentication_requested(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2BasicAuthenticationRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_BasicAuthenticationRequested(Windows.Foundation.EventRegistrationToken)
    def remove_basic_authentication_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_ContextMenuRequested(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs>)
    def add_context_menu_requested(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2ContextMenuRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_ContextMenuRequested(Windows.Foundation.EventRegistrationToken)
    def remove_context_menu_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_StatusBarTextChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,System.Object>)
    def add_status_bar_text_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_StatusBarTextChanged(Windows.Foundation.EventRegistrationToken)
    def remove_status_bar_text_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_ServerCertificateErrorDetected(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs>)
    def add_server_certificate_error_detected(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2ServerCertificateErrorDetectedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_ServerCertificateErrorDetected(Windows.Foundation.EventRegistrationToken)
    def remove_server_certificate_error_detected(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_FaviconChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,System.Object>)
    def add_favicon_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_FaviconChanged(Windows.Foundation.EventRegistrationToken)
    def remove_favicon_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_LaunchingExternalUriScheme(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs>)
    def add_launching_external_uri_scheme(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2LaunchingExternalUriSchemeEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_LaunchingExternalUriScheme(Windows.Foundation.EventRegistrationToken)
    def remove_launching_external_uri_scheme(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_DOMContentLoaded(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>)
    def add_dom_content_loaded(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2DOMContentLoadedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_DOMContentLoaded(Windows.Foundation.EventRegistrationToken)
    def remove_dom_content_loaded(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_WebResourceResponseReceived(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs>)
    def add_web_resource_response_received(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2WebResourceResponseReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_WebResourceResponseReceived(Windows.Foundation.EventRegistrationToken)
    def remove_web_resource_response_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_NotificationReceived(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs>)
    def add_notification_received(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2NotificationReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_NotificationReceived(Windows.Foundation.EventRegistrationToken)
    def remove_notification_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_SaveAsUIShowing(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs>)
    def add_save_as_ui_showing(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2SaveAsUIShowingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_SaveAsUIShowing(Windows.Foundation.EventRegistrationToken)
    def remove_save_as_ui_showing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_DownloadStarting(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs>)
    def add_download_starting(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2DownloadStartingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_DownloadStarting(Windows.Foundation.EventRegistrationToken)
    def remove_download_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_FrameCreated(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs>)
    def add_frame_created(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2FrameCreatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_FrameCreated(Windows.Foundation.EventRegistrationToken)
    def remove_frame_created(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_ClientCertificateRequested(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs>)
    def add_client_certificate_requested(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2ClientCertificateRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_ClientCertificateRequested(Windows.Foundation.EventRegistrationToken)
    def remove_client_certificate_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_IsDocumentPlayingAudioChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,System.Object>)
    def add_is_document_playing_audio_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_IsDocumentPlayingAudioChanged(Windows.Foundation.EventRegistrationToken)
    def remove_is_document_playing_audio_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_IsMutedChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,System.Object>)
    def add_is_muted_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_IsMutedChanged(Windows.Foundation.EventRegistrationToken)
    def remove_is_muted_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_IsDefaultDownloadDialogOpenChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,System.Object>)
    def add_is_default_download_dialog_open_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_IsDefaultDownloadDialogOpenChanged(Windows.Foundation.EventRegistrationToken)
    def remove_is_default_download_dialog_open_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_ContainsFullScreenElementChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,System.Object>)
    def add_contains_full_screen_element_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_ContainsFullScreenElementChanged(Windows.Foundation.EventRegistrationToken)
    def remove_contains_full_screen_element_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_ContentLoading(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>)
    def add_content_loading(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2ContentLoadingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_ContentLoading(Windows.Foundation.EventRegistrationToken)
    def remove_content_loading(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_DocumentTitleChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,System.Object>)
    def add_document_title_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_DocumentTitleChanged(Windows.Foundation.EventRegistrationToken)
    def remove_document_title_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_FrameNavigationCompleted(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>)
    def add_frame_navigation_completed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2NavigationCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_FrameNavigationCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_frame_navigation_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_FrameNavigationStarting(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>)
    def add_frame_navigation_starting(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2NavigationStartingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_FrameNavigationStarting(Windows.Foundation.EventRegistrationToken)
    def remove_frame_navigation_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_HistoryChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,System.Object>)
    def add_history_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_HistoryChanged(Windows.Foundation.EventRegistrationToken)
    def remove_history_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_NavigationCompleted(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>)
    def add_navigation_completed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2NavigationCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_NavigationCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_navigation_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_NavigationStarting(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>)
    def add_navigation_starting(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2NavigationStartingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_NavigationStarting(Windows.Foundation.EventRegistrationToken)
    def remove_navigation_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_NewWindowRequested(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs>)
    def add_new_window_requested(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2NewWindowRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_NewWindowRequested(Windows.Foundation.EventRegistrationToken)
    def remove_new_window_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_PermissionRequested(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>)
    def add_permission_requested(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2PermissionRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_PermissionRequested(Windows.Foundation.EventRegistrationToken)
    def remove_permission_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_ProcessFailed(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs>)
    def add_process_failed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2ProcessFailedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_ProcessFailed(Windows.Foundation.EventRegistrationToken)
    def remove_process_failed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_ScriptDialogOpening(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs>)
    def add_script_dialog_opening(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2ScriptDialogOpeningEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_ScriptDialogOpening(Windows.Foundation.EventRegistrationToken)
    def remove_script_dialog_opening(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_SourceChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs>)
    def add_source_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2SourceChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_SourceChanged(Windows.Foundation.EventRegistrationToken)
    def remove_source_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_WebMessageReceived(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>)
    def add_web_message_received(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2WebMessageReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_WebMessageReceived(Windows.Foundation.EventRegistrationToken)
    def remove_web_message_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_WebResourceRequested(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs>)
    def add_web_resource_requested(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2WebResourceRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_WebResourceRequested(Windows.Foundation.EventRegistrationToken)
    def remove_web_resource_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2::add_WindowCloseRequested(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,System.Object>)
    def add_window_close_requested(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::remove_WindowCloseRequested(Windows.Foundation.EventRegistrationToken)
    def remove_window_close_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2::get_BrowserProcessId()
    @_property
    def browser_process_id(self) -> winrt.system.UInt32: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2::get_CanGoBack()
    @_property
    def can_go_back(self) -> bool: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2::get_CanGoForward()
    @_property
    def can_go_forward(self) -> bool: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2::get_ContainsFullScreenElement()
    @_property
    def contains_full_screen_element(self) -> bool: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2::get_DocumentTitle()
    @_property
    def document_title(self) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2Settings Microsoft.Web.WebView2.Core.CoreWebView2::get_Settings()
    @_property
    def settings(self) -> CoreWebView2Settings: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2::get_Source()
    @_property
    def source(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2::get_StatusBarText()
    @_property
    def status_bar_text(self) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2Profile Microsoft.Web.WebView2.Core.CoreWebView2::get_Profile()
    @_property
    def profile(self) -> CoreWebView2Profile: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2::get_FaviconUri()
    @_property
    def favicon_uri(self) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2MemoryUsageTargetLevel Microsoft.Web.WebView2.Core.CoreWebView2::get_MemoryUsageTargetLevel()
    @_property
    def memory_usage_target_level(self) -> CoreWebView2MemoryUsageTargetLevel: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::put_MemoryUsageTargetLevel(Microsoft.Web.WebView2.Core.CoreWebView2MemoryUsageTargetLevel)
    @memory_usage_target_level.setter
    def memory_usage_target_level(self, value: CoreWebView2MemoryUsageTargetLevel) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2CookieManager Microsoft.Web.WebView2.Core.CoreWebView2::get_CookieManager()
    @_property
    def cookie_manager(self) -> CoreWebView2CookieManager: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2Environment Microsoft.Web.WebView2.Core.CoreWebView2::get_Environment()
    @_property
    def environment(self) -> CoreWebView2Environment: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2::get_FrameId()
    @_property
    def frame_id(self) -> winrt.system.UInt32: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2::get_IsSuspended()
    @_property
    def is_suspended(self) -> bool: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2::get_IsMuted()
    @_property
    def is_muted(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::put_IsMuted(System.Boolean)
    @is_muted.setter
    def is_muted(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2::get_IsDocumentPlayingAudio()
    @_property
    def is_document_playing_audio(self) -> bool: ...
    # Windows.Foundation.Point Microsoft.Web.WebView2.Core.CoreWebView2::get_DefaultDownloadDialogMargin()
    @_property
    def default_download_dialog_margin(self) -> windows_foundation.Point: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::put_DefaultDownloadDialogMargin(Windows.Foundation.Point)
    @default_download_dialog_margin.setter
    def default_download_dialog_margin(self, value: windows_foundation.Point) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2DefaultDownloadDialogCornerAlignment Microsoft.Web.WebView2.Core.CoreWebView2::get_DefaultDownloadDialogCornerAlignment()
    @_property
    def default_download_dialog_corner_alignment(self) -> CoreWebView2DefaultDownloadDialogCornerAlignment: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2::put_DefaultDownloadDialogCornerAlignment(Microsoft.Web.WebView2.Core.CoreWebView2DefaultDownloadDialogCornerAlignment)
    @default_download_dialog_corner_alignment.setter
    def default_download_dialog_corner_alignment(self, value: CoreWebView2DefaultDownloadDialogCornerAlignment) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2::get_IsDefaultDownloadDialogOpen()
    @_property
    def is_default_download_dialog_open(self) -> bool: ...

@typing.final
class CoreWebView2AcceleratorKeyPressedEventArgs(winrt.system.Object):
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2KeyEventKind Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs::get_KeyEventKind()
    @_property
    def key_event_kind(self) -> CoreWebView2KeyEventKind: ...
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs::get_KeyEventLParam()
    @_property
    def key_event_l_param(self) -> winrt.system.Int32: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2PhysicalKeyStatus Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs::get_PhysicalKeyStatus()
    @_property
    def physical_key_status(self) -> CoreWebView2PhysicalKeyStatus: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs::get_VirtualKey()
    @_property
    def virtual_key(self) -> winrt.system.UInt32: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs::get_IsBrowserAcceleratorKeyEnabled()
    @_property
    def is_browser_accelerator_key_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs::put_IsBrowserAcceleratorKeyEnabled(System.Boolean)
    @is_browser_accelerator_key_enabled.setter
    def is_browser_accelerator_key_enabled(self, value: bool) -> None: ...

@typing.final
class CoreWebView2BasicAuthenticationRequestedEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs::get_Cancel()
    @_property
    def cancel(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs::put_Cancel(System.Boolean)
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs::get_Challenge()
    @_property
    def challenge(self) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs::get_Response()
    @_property
    def response(self) -> CoreWebView2BasicAuthenticationResponse: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationRequestedEventArgs::get_Uri()
    @_property
    def uri(self) -> str: ...

@typing.final
class CoreWebView2BasicAuthenticationResponse(winrt.system.Object):
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse::get_UserName()
    @_property
    def user_name(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse::put_UserName(System.String)
    @user_name.setter
    def user_name(self, value: str) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse::get_Password()
    @_property
    def password(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2BasicAuthenticationResponse::put_Password(System.String)
    @password.setter
    def password(self, value: str) -> None: ...

@typing.final
class CoreWebView2BrowserExtension(winrt.system.Object):
    # Windows.Foundation.IAsyncAction Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension::EnableAsync(System.Boolean)
    def enable_async(self, is_enabled: bool, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension::RemoveAsync()
    def remove_async(self) -> windows_foundation.IAsyncAction: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension::get_Id()
    @_property
    def id(self) -> str: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension::get_IsEnabled()
    @_property
    def is_enabled(self) -> bool: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension::get_Name()
    @_property
    def name(self) -> str: ...

@typing.final
class CoreWebView2BrowserProcessExitedEventArgs(winrt.system.Object):
    # Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitKind Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs::get_BrowserProcessExitKind()
    @_property
    def browser_process_exit_kind(self) -> CoreWebView2BrowserProcessExitKind: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs::get_BrowserProcessId()
    @_property
    def browser_process_id(self) -> winrt.system.UInt32: ...

@typing.final
class CoreWebView2Certificate(winrt.system.Object):
    # Windows.Security.Cryptography.Certificates.Certificate Microsoft.Web.WebView2.Core.CoreWebView2Certificate::ToCertificate()
    def to_certificate(self) -> windows_security_cryptography_certificates.Certificate: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Certificate::ToPemEncoding()
    def to_pem_encoding(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Certificate::get_DerEncodedSerialNumber()
    @_property
    def der_encoded_serial_number(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Certificate::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Certificate::get_Issuer()
    @_property
    def issuer(self) -> str: ...
    # Windows.Foundation.Collections.IVectorView`1<System.String> Microsoft.Web.WebView2.Core.CoreWebView2Certificate::get_PemEncodedIssuerCertificateChain()
    @_property
    def pem_encoded_issuer_certificate_chain(self) -> typing.Sequence[str]: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Certificate::get_Subject()
    @_property
    def subject(self) -> str: ...
    # System.Double Microsoft.Web.WebView2.Core.CoreWebView2Certificate::get_ValidFrom()
    @_property
    def valid_from(self) -> winrt.system.Double: ...
    # System.Double Microsoft.Web.WebView2.Core.CoreWebView2Certificate::get_ValidTo()
    @_property
    def valid_to(self) -> winrt.system.Double: ...

@typing.final
class CoreWebView2ClientCertificate(winrt.system.Object):
    # Windows.Security.Cryptography.Certificates.Certificate Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate::ToCertificate()
    def to_certificate(self) -> windows_security_cryptography_certificates.Certificate: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate::ToPemEncoding()
    def to_pem_encoding(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate::get_DerEncodedSerialNumber()
    @_property
    def der_encoded_serial_number(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate::get_Issuer()
    @_property
    def issuer(self) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateKind Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate::get_Kind()
    @_property
    def kind(self) -> CoreWebView2ClientCertificateKind: ...
    # Windows.Foundation.Collections.IVectorView`1<System.String> Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate::get_PemEncodedIssuerCertificateChain()
    @_property
    def pem_encoded_issuer_certificate_chain(self) -> typing.Sequence[str]: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate::get_Subject()
    @_property
    def subject(self) -> str: ...
    # System.Double Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate::get_ValidFrom()
    @_property
    def valid_from(self) -> winrt.system.Double: ...
    # System.Double Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate::get_ValidTo()
    @_property
    def valid_to(self) -> winrt.system.Double: ...

@typing.final
class CoreWebView2ClientCertificateRequestedEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs::get_SelectedCertificate()
    @_property
    def selected_certificate(self) -> CoreWebView2ClientCertificate: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs::put_SelectedCertificate(Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate)
    @selected_certificate.setter
    def selected_certificate(self, value: CoreWebView2ClientCertificate) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs::get_Cancel()
    @_property
    def cancel(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs::put_Cancel(System.Boolean)
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    # Windows.Foundation.Collections.IVectorView`1<System.String> Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs::get_AllowedCertificateAuthorities()
    @_property
    def allowed_certificate_authorities(self) -> typing.Sequence[str]: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs::get_Host()
    @_property
    def host(self) -> str: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs::get_IsProxy()
    @_property
    def is_proxy(self) -> bool: ...
    # Windows.Foundation.Collections.IVectorView`1<Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificate> Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs::get_MutuallyTrustedCertificates()
    @_property
    def mutually_trusted_certificates(self) -> typing.Sequence[CoreWebView2ClientCertificate]: ...
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2ClientCertificateRequestedEventArgs::get_Port()
    @_property
    def port(self) -> winrt.system.Int32: ...

@typing.final
class CoreWebView2CompositionController(CoreWebView2Controller):
    # Windows.ApplicationModel.DataTransfer.DataPackageOperation Microsoft.Web.WebView2.Core.CoreWebView2CompositionController::DragEnter(Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo,Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragUIOverride)
    def drag_enter(self, drag_info: windows_applicationmodel_datatransfer_dragdrop_core.CoreDragInfo, drag_ui_override: windows_applicationmodel_datatransfer_dragdrop_core.CoreDragUIOverride, /) -> windows_applicationmodel_datatransfer.DataPackageOperation: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2CompositionController::DragLeave()
    def drag_leave(self) -> None: ...
    # Windows.ApplicationModel.DataTransfer.DataPackageOperation Microsoft.Web.WebView2.Core.CoreWebView2CompositionController::DragOver(Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo,Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragUIOverride)
    def drag_over(self, drag_info: windows_applicationmodel_datatransfer_dragdrop_core.CoreDragInfo, drag_ui_override: windows_applicationmodel_datatransfer_dragdrop_core.CoreDragUIOverride, /) -> windows_applicationmodel_datatransfer.DataPackageOperation: ...
    # Windows.ApplicationModel.DataTransfer.DataPackageOperation Microsoft.Web.WebView2.Core.CoreWebView2CompositionController::Drop(Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo)
    def drop(self, drag_info: windows_applicationmodel_datatransfer_dragdrop_core.CoreDragInfo, /) -> windows_applicationmodel_datatransfer.DataPackageOperation: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionKind Microsoft.Web.WebView2.Core.CoreWebView2CompositionController::GetNonClientRegionAtPoint(Windows.Foundation.Point)
    def get_non_client_region_at_point(self, point: windows_foundation.Point, /) -> CoreWebView2NonClientRegionKind: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Rect> Microsoft.Web.WebView2.Core.CoreWebView2CompositionController::QueryNonClientRegion(Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionKind)
    def query_non_client_region(self, kind: CoreWebView2NonClientRegionKind, /) -> typing.Sequence[windows_foundation.Rect]: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2CompositionController::SendMouseInput(Microsoft.Web.WebView2.Core.CoreWebView2MouseEventKind,Microsoft.Web.WebView2.Core.CoreWebView2MouseEventVirtualKeys,System.UInt32,Windows.Foundation.Point)
    def send_mouse_input(self, event_kind: CoreWebView2MouseEventKind, virtual_keys: CoreWebView2MouseEventVirtualKeys, mouse_data: winrt.system.UInt32, point: windows_foundation.Point, /) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2CompositionController::SendPointerInput(Microsoft.Web.WebView2.Core.CoreWebView2PointerEventKind,Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo)
    def send_pointer_input(self, event_kind: CoreWebView2PointerEventKind, pointer_info: CoreWebView2PointerInfo, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2CompositionController::add_NonClientRegionChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2CompositionController,Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs>)
    def add_non_client_region_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2CompositionController, CoreWebView2NonClientRegionChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2CompositionController::remove_NonClientRegionChanged(Windows.Foundation.EventRegistrationToken)
    def remove_non_client_region_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2CompositionController::add_CursorChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2CompositionController,System.Object>)
    def add_cursor_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2CompositionController, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2CompositionController::remove_CursorChanged(Windows.Foundation.EventRegistrationToken)
    def remove_cursor_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Object Microsoft.Web.WebView2.Core.CoreWebView2CompositionController::get_RootVisualTarget()
    @_property
    def root_visual_target(self) -> winrt.system.Object: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2CompositionController::put_RootVisualTarget(System.Object)
    @root_visual_target.setter
    def root_visual_target(self, value: winrt.system.Object) -> None: ...
    # Windows.UI.Core.CoreCursor Microsoft.Web.WebView2.Core.CoreWebView2CompositionController::get_Cursor()
    @_property
    def cursor(self) -> windows_ui_core.CoreCursor: ...

@typing.final
class CoreWebView2ContentLoadingEventArgs(winrt.system.Object):
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs::get_IsErrorPage()
    @_property
    def is_error_page(self) -> bool: ...
    # System.UInt64 Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs::get_NavigationId()
    @_property
    def navigation_id(self) -> winrt.system.UInt64: ...

@typing.final
class CoreWebView2ContextMenuItem(winrt.system.Object):
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem::add_CustomItemSelected(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem,System.Object>)
    def add_custom_item_selected(self, handler: windows_foundation.TypedEventHandler[CoreWebView2ContextMenuItem, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem::remove_CustomItemSelected(Windows.Foundation.EventRegistrationToken)
    def remove_custom_item_selected(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem::get_IsEnabled()
    @_property
    def is_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem::put_IsEnabled(System.Boolean)
    @is_enabled.setter
    def is_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem::get_IsChecked()
    @_property
    def is_checked(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem::put_IsChecked(System.Boolean)
    @is_checked.setter
    def is_checked(self, value: bool) -> None: ...
    # Windows.Foundation.Collections.IVector`1<Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem> Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem::get_Children()
    @_property
    def children(self) -> typing.MutableSequence[CoreWebView2ContextMenuItem]: ...
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem::get_CommandId()
    @_property
    def command_id(self) -> winrt.system.Int32: ...
    # Windows.Storage.Streams.IRandomAccessStream Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem::get_Icon()
    @_property
    def icon(self) -> windows_storage_streams.IRandomAccessStream: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItemKind Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem::get_Kind()
    @_property
    def kind(self) -> CoreWebView2ContextMenuItemKind: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem::get_Label()
    @_property
    def label(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem::get_Name()
    @_property
    def name(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem::get_ShortcutKeyDescription()
    @_property
    def shortcut_key_description(self) -> str: ...

@typing.final
class CoreWebView2ContextMenuRequestedEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs::get_SelectedCommandId()
    @_property
    def selected_command_id(self) -> winrt.system.Int32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs::put_SelectedCommandId(System.Int32)
    @selected_command_id.setter
    def selected_command_id(self, value: winrt.system.Int32) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs::get_ContextMenuTarget()
    @_property
    def context_menu_target(self) -> CoreWebView2ContextMenuTarget: ...
    # Windows.Foundation.Point Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs::get_Location()
    @_property
    def location(self) -> windows_foundation.Point: ...
    # Windows.Foundation.Collections.IVector`1<Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem> Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuRequestedEventArgs::get_MenuItems()
    @_property
    def menu_items(self) -> typing.MutableSequence[CoreWebView2ContextMenuItem]: ...

@typing.final
class CoreWebView2ContextMenuTarget(winrt.system.Object):
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget::get_FrameUri()
    @_property
    def frame_uri(self) -> str: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget::get_HasLinkText()
    @_property
    def has_link_text(self) -> bool: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget::get_HasLinkUri()
    @_property
    def has_link_uri(self) -> bool: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget::get_HasSelection()
    @_property
    def has_selection(self) -> bool: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget::get_HasSourceUri()
    @_property
    def has_source_uri(self) -> bool: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget::get_IsEditable()
    @_property
    def is_editable(self) -> bool: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget::get_IsRequestedForMainFrame()
    @_property
    def is_requested_for_main_frame(self) -> bool: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTargetKind Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget::get_Kind()
    @_property
    def kind(self) -> CoreWebView2ContextMenuTargetKind: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget::get_LinkText()
    @_property
    def link_text(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget::get_LinkUri()
    @_property
    def link_uri(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget::get_PageUri()
    @_property
    def page_uri(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget::get_SelectionText()
    @_property
    def selection_text(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuTarget::get_SourceUri()
    @_property
    def source_uri(self) -> str: ...

class CoreWebView2Controller_Static(type):
    pass

class CoreWebView2Controller(winrt.system.Object, metaclass=CoreWebView2Controller_Static):
    @typing.final
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::Close()
    def close(self) -> None: ...
    @typing.final
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::MoveFocus(Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusReason)
    def move_focus(self, reason: CoreWebView2MoveFocusReason, /) -> None: ...
    @typing.final
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::NotifyParentWindowPositionChanged()
    def notify_parent_window_position_changed(self) -> None: ...
    @typing.final
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::SetBoundsAndZoomFactor(Windows.Foundation.Rect,System.Double)
    def set_bounds_and_zoom_factor(self, bounds: windows_foundation.Rect, zoom_factor: winrt.system.Double, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Controller::add_RasterizationScaleChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Controller,System.Object>)
    def add_rasterization_scale_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Controller, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::remove_RasterizationScaleChanged(Windows.Foundation.EventRegistrationToken)
    def remove_rasterization_scale_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Controller::add_AcceleratorKeyPressed(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Controller,Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs>)
    def add_accelerator_key_pressed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Controller, CoreWebView2AcceleratorKeyPressedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::remove_AcceleratorKeyPressed(Windows.Foundation.EventRegistrationToken)
    def remove_accelerator_key_pressed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Controller::add_GotFocus(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Controller,System.Object>)
    def add_got_focus(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Controller, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::remove_GotFocus(Windows.Foundation.EventRegistrationToken)
    def remove_got_focus(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Controller::add_LostFocus(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Controller,System.Object>)
    def add_lost_focus(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Controller, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::remove_LostFocus(Windows.Foundation.EventRegistrationToken)
    def remove_lost_focus(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Controller::add_MoveFocusRequested(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Controller,Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs>)
    def add_move_focus_requested(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Controller, CoreWebView2MoveFocusRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::remove_MoveFocusRequested(Windows.Foundation.EventRegistrationToken)
    def remove_move_focus_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Controller::add_ZoomFactorChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Controller,System.Object>)
    def add_zoom_factor_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Controller, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::remove_ZoomFactorChanged(Windows.Foundation.EventRegistrationToken)
    def remove_zoom_factor_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Double Microsoft.Web.WebView2.Core.CoreWebView2Controller::get_ZoomFactor()
    @_property
    def zoom_factor(self) -> winrt.system.Double: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::put_ZoomFactor(System.Double)
    @zoom_factor.setter
    @typing.final
    def zoom_factor(self, value: winrt.system.Double) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference Microsoft.Web.WebView2.Core.CoreWebView2Controller::get_ParentWindow()
    @_property
    def parent_window(self) -> CoreWebView2ControllerWindowReference: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::put_ParentWindow(Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference)
    @parent_window.setter
    @typing.final
    def parent_window(self, value: CoreWebView2ControllerWindowReference) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Controller::get_IsVisible()
    @_property
    def is_visible(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::put_IsVisible(System.Boolean)
    @is_visible.setter
    @typing.final
    def is_visible(self, value: bool) -> None: ...
    # Windows.Foundation.Rect Microsoft.Web.WebView2.Core.CoreWebView2Controller::get_Bounds()
    @_property
    def bounds(self) -> windows_foundation.Rect: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::put_Bounds(Windows.Foundation.Rect)
    @bounds.setter
    @typing.final
    def bounds(self, value: windows_foundation.Rect) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2 Microsoft.Web.WebView2.Core.CoreWebView2Controller::get_CoreWebView2()
    @_property
    @typing.final
    def core_webview2(self) -> CoreWebView2: ...
    # Windows.UI.Color Microsoft.Web.WebView2.Core.CoreWebView2Controller::get_DefaultBackgroundColor()
    @_property
    def default_background_color(self) -> windows_ui.Color: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::put_DefaultBackgroundColor(Windows.UI.Color)
    @default_background_color.setter
    @typing.final
    def default_background_color(self, value: windows_ui.Color) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Controller::get_ShouldDetectMonitorScaleChanges()
    @_property
    def should_detect_monitor_scale_changes(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::put_ShouldDetectMonitorScaleChanges(System.Boolean)
    @should_detect_monitor_scale_changes.setter
    @typing.final
    def should_detect_monitor_scale_changes(self, value: bool) -> None: ...
    # System.Double Microsoft.Web.WebView2.Core.CoreWebView2Controller::get_RasterizationScale()
    @_property
    def rasterization_scale(self) -> winrt.system.Double: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::put_RasterizationScale(System.Double)
    @rasterization_scale.setter
    @typing.final
    def rasterization_scale(self, value: winrt.system.Double) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2BoundsMode Microsoft.Web.WebView2.Core.CoreWebView2Controller::get_BoundsMode()
    @_property
    def bounds_mode(self) -> CoreWebView2BoundsMode: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::put_BoundsMode(Microsoft.Web.WebView2.Core.CoreWebView2BoundsMode)
    @bounds_mode.setter
    @typing.final
    def bounds_mode(self, value: CoreWebView2BoundsMode) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Controller::get_AllowExternalDrop()
    @_property
    def allow_external_drop(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Controller::put_AllowExternalDrop(System.Boolean)
    @allow_external_drop.setter
    @typing.final
    def allow_external_drop(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Controller::get_IsBrowserHitTransparent()
    @_property
    @typing.final
    def is_browser_hit_transparent(self) -> bool: ...

@typing.final
class CoreWebView2ControllerOptions(winrt.system.Object):
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions::get_ProfileName()
    @_property
    def profile_name(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions::put_ProfileName(System.String)
    @profile_name.setter
    def profile_name(self, value: str) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions::get_IsInPrivateModeEnabled()
    @_property
    def is_in_private_mode_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions::put_IsInPrivateModeEnabled(System.Boolean)
    @is_in_private_mode_enabled.setter
    def is_in_private_mode_enabled(self, value: bool) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions::get_ScriptLocale()
    @_property
    def script_locale(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions::put_ScriptLocale(System.String)
    @script_locale.setter
    def script_locale(self, value: str) -> None: ...

@typing.final
class CoreWebView2ControllerWindowReference_Static(type):
    # Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference::CreateFromCoreWindow(Windows.UI.Core.CoreWindow)
    def create_from_core_window(cls, core_window: windows_ui_core.CoreWindow, /) -> CoreWebView2ControllerWindowReference: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference::CreateFromWindowHandle(System.UInt64)
    def create_from_window_handle(cls, window_handle: winrt.system.UInt64, /) -> CoreWebView2ControllerWindowReference: ...

@typing.final
class CoreWebView2ControllerWindowReference(winrt.system.Object, metaclass=CoreWebView2ControllerWindowReference_Static):
    # Windows.UI.Core.CoreWindow Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference::get_CoreWindow()
    @_property
    def core_window(self) -> windows_ui_core.CoreWindow: ...
    # System.UInt64 Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference::get_WindowHandle()
    @_property
    def window_handle(self) -> winrt.system.UInt64: ...

@typing.final
class CoreWebView2Cookie(winrt.system.Object):
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Cookie::get_Value()
    @_property
    def value(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Cookie::put_Value(System.String)
    @value.setter
    def value(self, value: str) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2CookieSameSiteKind Microsoft.Web.WebView2.Core.CoreWebView2Cookie::get_SameSite()
    @_property
    def same_site(self) -> CoreWebView2CookieSameSiteKind: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Cookie::put_SameSite(Microsoft.Web.WebView2.Core.CoreWebView2CookieSameSiteKind)
    @same_site.setter
    def same_site(self, value: CoreWebView2CookieSameSiteKind) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Cookie::get_IsSecure()
    @_property
    def is_secure(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Cookie::put_IsSecure(System.Boolean)
    @is_secure.setter
    def is_secure(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Cookie::get_IsHttpOnly()
    @_property
    def is_http_only(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Cookie::put_IsHttpOnly(System.Boolean)
    @is_http_only.setter
    def is_http_only(self, value: bool) -> None: ...
    # System.Double Microsoft.Web.WebView2.Core.CoreWebView2Cookie::get_Expires()
    @_property
    def expires(self) -> winrt.system.Double: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Cookie::put_Expires(System.Double)
    @expires.setter
    def expires(self, value: winrt.system.Double) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Cookie::get_Domain()
    @_property
    def domain(self) -> str: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Cookie::get_IsSession()
    @_property
    def is_session(self) -> bool: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Cookie::get_Name()
    @_property
    def name(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Cookie::get_Path()
    @_property
    def path(self) -> str: ...

@typing.final
class CoreWebView2CookieManager(winrt.system.Object):
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2CookieManager::AddOrUpdateCookie(Microsoft.Web.WebView2.Core.CoreWebView2Cookie)
    def add_or_update_cookie(self, cookie: CoreWebView2Cookie, /) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2Cookie Microsoft.Web.WebView2.Core.CoreWebView2CookieManager::CopyCookie(Microsoft.Web.WebView2.Core.CoreWebView2Cookie)
    def copy_cookie(self, cookie_param: CoreWebView2Cookie, /) -> CoreWebView2Cookie: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2Cookie Microsoft.Web.WebView2.Core.CoreWebView2CookieManager::CreateCookie(System.String,System.String,System.String,System.String)
    def create_cookie(self, name: str, value: str, domain: str, path: str, /) -> CoreWebView2Cookie: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2CookieManager::DeleteAllCookies()
    def delete_all_cookies(self) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2CookieManager::DeleteCookie(Microsoft.Web.WebView2.Core.CoreWebView2Cookie)
    def delete_cookie(self, cookie: CoreWebView2Cookie, /) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2CookieManager::DeleteCookies(System.String,System.String)
    def delete_cookies(self, name: str, uri: str, /) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2CookieManager::DeleteCookiesWithDomainAndPath(System.String,System.String,System.String)
    def delete_cookies_with_domain_and_path(self, name: str, domain: str, path: str, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Microsoft.Web.WebView2.Core.CoreWebView2Cookie>> Microsoft.Web.WebView2.Core.CoreWebView2CookieManager::GetCookiesAsync(System.String)
    def get_cookies_async(self, uri: str, /) -> windows_foundation.IAsyncOperation[typing.Sequence[CoreWebView2Cookie]]: ...

@typing.final
class CoreWebView2CustomSchemeRegistration(winrt.system.Object):
    def __new__(cls: typing.Type[Self], scheme_name: str) -> Self: ...
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration::get_TreatAsSecure()
    @_property
    def treat_as_secure(self) -> winrt.system.Int32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration::put_TreatAsSecure(System.Int32)
    @treat_as_secure.setter
    def treat_as_secure(self, value: winrt.system.Int32) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration::get_HasAuthorityComponent()
    @_property
    def has_authority_component(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration::put_HasAuthorityComponent(System.Boolean)
    @has_authority_component.setter
    def has_authority_component(self, value: bool) -> None: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration::get_AllowedOrigins()
    @_property
    def allowed_origins(self) -> typing.MutableSequence[str]: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration::get_SchemeName()
    @_property
    def scheme_name(self) -> str: ...

@typing.final
class CoreWebView2DOMContentLoadedEventArgs(winrt.system.Object):
    # System.UInt64 Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs::get_NavigationId()
    @_property
    def navigation_id(self) -> winrt.system.UInt64: ...

@typing.final
class CoreWebView2DevToolsProtocolEventReceivedEventArgs(winrt.system.Object):
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs::get_ParameterObjectAsJson()
    @_property
    def parameter_object_as_json(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs::get_SessionId()
    @_property
    def session_id(self) -> str: ...

@typing.final
class CoreWebView2DevToolsProtocolEventReceiver(winrt.system.Object):
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver::add_DevToolsProtocolEventReceived(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs>)
    def add_dev_tools_protocol_event_received(self, handler: windows_foundation.TypedEventHandler[CoreWebView2, CoreWebView2DevToolsProtocolEventReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver::remove_DevToolsProtocolEventReceived(Windows.Foundation.EventRegistrationToken)
    def remove_dev_tools_protocol_event_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class CoreWebView2DownloadOperation(winrt.system.Object):
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::Cancel()
    def cancel(self) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::Pause()
    def pause(self) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::Resume()
    def resume(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::add_BytesReceivedChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation,System.Object>)
    def add_bytes_received_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2DownloadOperation, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::remove_BytesReceivedChanged(Windows.Foundation.EventRegistrationToken)
    def remove_bytes_received_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::add_EstimatedEndTimeChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation,System.Object>)
    def add_estimated_end_time_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2DownloadOperation, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::remove_EstimatedEndTimeChanged(Windows.Foundation.EventRegistrationToken)
    def remove_estimated_end_time_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::add_StateChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation,System.Object>)
    def add_state_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2DownloadOperation, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::remove_StateChanged(Windows.Foundation.EventRegistrationToken)
    def remove_state_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Int64 Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::get_BytesReceived()
    @_property
    def bytes_received(self) -> winrt.system.Int64: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::get_CanResume()
    @_property
    def can_resume(self) -> bool: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::get_ContentDisposition()
    @_property
    def content_disposition(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::get_EstimatedEndTime()
    @_property
    def estimated_end_time(self) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2DownloadInterruptReason Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::get_InterruptReason()
    @_property
    def interrupt_reason(self) -> CoreWebView2DownloadInterruptReason: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::get_MimeType()
    @_property
    def mime_type(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::get_ResultFilePath()
    @_property
    def result_file_path(self) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2DownloadState Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::get_State()
    @_property
    def state(self) -> CoreWebView2DownloadState: ...
    # System.Int64 Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::get_TotalBytesToReceive()
    @_property
    def total_bytes_to_receive(self) -> winrt.system.Int64: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation::get_Uri()
    @_property
    def uri(self) -> str: ...

@typing.final
class CoreWebView2DownloadStartingEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs::get_ResultFilePath()
    @_property
    def result_file_path(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs::put_ResultFilePath(System.String)
    @result_file_path.setter
    def result_file_path(self, value: str) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs::get_Cancel()
    @_property
    def cancel(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs::put_Cancel(System.Boolean)
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2DownloadOperation Microsoft.Web.WebView2.Core.CoreWebView2DownloadStartingEventArgs::get_DownloadOperation()
    @_property
    def download_operation(self) -> CoreWebView2DownloadOperation: ...

@typing.final
class CoreWebView2Environment_Static(type):
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2Environment::CompareBrowserVersionString(System.String,System.String)
    def compare_browser_version_string(cls, browser_version_string1: str, browser_version_string2: str, /) -> winrt.system.Int32: ...
    # Windows.Foundation.IAsyncOperation`1<Microsoft.Web.WebView2.Core.CoreWebView2Environment> Microsoft.Web.WebView2.Core.CoreWebView2Environment::CreateAsync()
    def create_async(cls) -> windows_foundation.IAsyncOperation[CoreWebView2Environment]: ...
    # Windows.Foundation.IAsyncOperation`1<Microsoft.Web.WebView2.Core.CoreWebView2Environment> Microsoft.Web.WebView2.Core.CoreWebView2Environment::CreateWithOptionsAsync(System.String,System.String,Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions)
    def create_with_options_async(cls, browser_executable_folder: str, user_data_folder: str, options: typing.Optional[CoreWebView2EnvironmentOptions], /) -> windows_foundation.IAsyncOperation[CoreWebView2Environment]: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Environment::GetAvailableBrowserVersionString()
    def get_available_browser_version_string(cls) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Environment::GetAvailableBrowserVersionString(System.String)
    def get_available_browser_version_string2(cls, browser_executable_folder: str, /) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Environment::GetAvailableBrowserVersionString(System.String,Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions)
    def get_available_browser_version_string_with_options(cls, browser_executable_folder: str, options: CoreWebView2EnvironmentOptions, /) -> str: ...

@typing.final
class CoreWebView2Environment(winrt.system.Object, metaclass=CoreWebView2Environment_Static):
    # Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItem Microsoft.Web.WebView2.Core.CoreWebView2Environment::CreateContextMenuItem(System.String,Windows.Storage.Streams.IRandomAccessStream,Microsoft.Web.WebView2.Core.CoreWebView2ContextMenuItemKind)
    def create_context_menu_item(self, label: str, icon_stream: windows_storage_streams.IRandomAccessStream, kind: CoreWebView2ContextMenuItemKind, /) -> CoreWebView2ContextMenuItem: ...
    @typing.overload
    # Windows.Foundation.IAsyncOperation`1<Microsoft.Web.WebView2.Core.CoreWebView2CompositionController> Microsoft.Web.WebView2.Core.CoreWebView2Environment::CreateCoreWebView2CompositionControllerAsync(Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference)
    def create_core_webview2_composition_controller_async(self, parent_window: CoreWebView2ControllerWindowReference, /) -> windows_foundation.IAsyncOperation[CoreWebView2CompositionController]: ...
    @typing.overload
    # Windows.Foundation.IAsyncOperation`1<Microsoft.Web.WebView2.Core.CoreWebView2CompositionController> Microsoft.Web.WebView2.Core.CoreWebView2Environment::CreateCoreWebView2CompositionControllerAsync(Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference,Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions)
    def create_core_webview2_composition_controller_async(self, parent_window: CoreWebView2ControllerWindowReference, options: CoreWebView2ControllerOptions, /) -> windows_foundation.IAsyncOperation[CoreWebView2CompositionController]: ...
    @typing.overload
    # Windows.Foundation.IAsyncOperation`1<Microsoft.Web.WebView2.Core.CoreWebView2Controller> Microsoft.Web.WebView2.Core.CoreWebView2Environment::CreateCoreWebView2ControllerAsync(Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference)
    def create_core_webview2_controller_async(self, parent_window: CoreWebView2ControllerWindowReference, /) -> windows_foundation.IAsyncOperation[CoreWebView2Controller]: ...
    @typing.overload
    # Windows.Foundation.IAsyncOperation`1<Microsoft.Web.WebView2.Core.CoreWebView2Controller> Microsoft.Web.WebView2.Core.CoreWebView2Environment::CreateCoreWebView2ControllerAsync(Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference,Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions)
    def create_core_webview2_controller_async(self, parent_window: CoreWebView2ControllerWindowReference, options: CoreWebView2ControllerOptions, /) -> windows_foundation.IAsyncOperation[CoreWebView2Controller]: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2ControllerOptions Microsoft.Web.WebView2.Core.CoreWebView2Environment::CreateCoreWebView2ControllerOptions()
    def create_core_webview2_controller_options(self) -> CoreWebView2ControllerOptions: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo Microsoft.Web.WebView2.Core.CoreWebView2Environment::CreateCoreWebView2PointerInfo()
    def create_core_webview2_pointer_info(self) -> CoreWebView2PointerInfo: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings Microsoft.Web.WebView2.Core.CoreWebView2Environment::CreatePrintSettings()
    def create_print_settings(self) -> CoreWebView2PrintSettings: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer Microsoft.Web.WebView2.Core.CoreWebView2Environment::CreateSharedBuffer(System.UInt64)
    def create_shared_buffer(self, size: winrt.system.UInt64, /) -> CoreWebView2SharedBuffer: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle Microsoft.Web.WebView2.Core.CoreWebView2Environment::CreateWebFileSystemDirectoryHandle(System.String,Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandlePermission)
    def create_web_file_system_directory_handle(self, path: str, permission: CoreWebView2FileSystemHandlePermission, /) -> CoreWebView2FileSystemHandle: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle Microsoft.Web.WebView2.Core.CoreWebView2Environment::CreateWebFileSystemFileHandle(System.String,Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandlePermission)
    def create_web_file_system_file_handle(self, path: str, permission: CoreWebView2FileSystemHandlePermission, /) -> CoreWebView2FileSystemHandle: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest Microsoft.Web.WebView2.Core.CoreWebView2Environment::CreateWebResourceRequest(System.String,System.String,Windows.Storage.Streams.IRandomAccessStream,System.String)
    def create_web_resource_request(self, uri: str, method: str, post_data: windows_storage_streams.IRandomAccessStream, headers: str, /) -> CoreWebView2WebResourceRequest: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse Microsoft.Web.WebView2.Core.CoreWebView2Environment::CreateWebResourceResponse(Windows.Storage.Streams.IRandomAccessStream,System.Int32,System.String,System.String)
    def create_web_resource_response(self, content: windows_storage_streams.IRandomAccessStream, status_code: winrt.system.Int32, reason_phrase: str, headers: str, /) -> CoreWebView2WebResourceResponse: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo>> Microsoft.Web.WebView2.Core.CoreWebView2Environment::GetProcessExtendedInfosAsync()
    def get_process_extended_infos_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[CoreWebView2ProcessExtendedInfo]]: ...
    # Windows.Foundation.Collections.IVectorView`1<Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo> Microsoft.Web.WebView2.Core.CoreWebView2Environment::GetProcessInfos()
    def get_process_infos(self) -> typing.Sequence[CoreWebView2ProcessInfo]: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Environment::add_BrowserProcessExited(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Environment,Microsoft.Web.WebView2.Core.CoreWebView2BrowserProcessExitedEventArgs>)
    def add_browser_process_exited(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Environment, CoreWebView2BrowserProcessExitedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Environment::remove_BrowserProcessExited(Windows.Foundation.EventRegistrationToken)
    def remove_browser_process_exited(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Environment::add_ProcessInfosChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Environment,System.Object>)
    def add_process_infos_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Environment, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Environment::remove_ProcessInfosChanged(Windows.Foundation.EventRegistrationToken)
    def remove_process_infos_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Environment::add_NewBrowserVersionAvailable(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Environment,System.Object>)
    def add_new_browser_version_available(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Environment, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Environment::remove_NewBrowserVersionAvailable(Windows.Foundation.EventRegistrationToken)
    def remove_new_browser_version_available(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Environment::get_BrowserVersionString()
    @_property
    def browser_version_string(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Environment::get_FailureReportFolderPath()
    @_property
    def failure_report_folder_path(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Environment::get_UserDataFolder()
    @_property
    def user_data_folder(self) -> str: ...

@typing.final
class CoreWebView2EnvironmentOptions(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::get_TargetCompatibleBrowserVersion()
    @_property
    def target_compatible_browser_version(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::put_TargetCompatibleBrowserVersion(System.String)
    @target_compatible_browser_version.setter
    def target_compatible_browser_version(self, value: str) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::get_Language()
    @_property
    def language(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::put_Language(System.String)
    @language.setter
    def language(self, value: str) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::get_AllowSingleSignOnUsingOSPrimaryAccount()
    @_property
    def allow_single_sign_on_using_os_primary_account(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::put_AllowSingleSignOnUsingOSPrimaryAccount(System.Boolean)
    @allow_single_sign_on_using_os_primary_account.setter
    def allow_single_sign_on_using_os_primary_account(self, value: bool) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::get_AdditionalBrowserArguments()
    @_property
    def additional_browser_arguments(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::put_AdditionalBrowserArguments(System.String)
    @additional_browser_arguments.setter
    def additional_browser_arguments(self, value: str) -> None: ...
    # Windows.Foundation.Collections.IVector`1<Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration> Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::get_CustomSchemeRegistrations()
    @_property
    def custom_scheme_registrations(self) -> typing.MutableSequence[CoreWebView2CustomSchemeRegistration]: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::put_CustomSchemeRegistrations(Windows.Foundation.Collections.IVector`1<Microsoft.Web.WebView2.Core.CoreWebView2CustomSchemeRegistration>)
    @custom_scheme_registrations.setter
    def custom_scheme_registrations(self, value: typing.MutableSequence[CoreWebView2CustomSchemeRegistration]) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::get_ExclusiveUserDataFolderAccess()
    @_property
    def exclusive_user_data_folder_access(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::put_ExclusiveUserDataFolderAccess(System.Boolean)
    @exclusive_user_data_folder_access.setter
    def exclusive_user_data_folder_access(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::get_IsCustomCrashReportingEnabled()
    @_property
    def is_custom_crash_reporting_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::put_IsCustomCrashReportingEnabled(System.Boolean)
    @is_custom_crash_reporting_enabled.setter
    def is_custom_crash_reporting_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::get_EnableTrackingPrevention()
    @_property
    def enable_tracking_prevention(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::put_EnableTrackingPrevention(System.Boolean)
    @enable_tracking_prevention.setter
    def enable_tracking_prevention(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::get_AreBrowserExtensionsEnabled()
    @_property
    def are_browser_extensions_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::put_AreBrowserExtensionsEnabled(System.Boolean)
    @are_browser_extensions_enabled.setter
    def are_browser_extensions_enabled(self, value: bool) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2ReleaseChannels Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::get_ReleaseChannels()
    @_property
    def release_channels(self) -> CoreWebView2ReleaseChannels: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::put_ReleaseChannels(Microsoft.Web.WebView2.Core.CoreWebView2ReleaseChannels)
    @release_channels.setter
    def release_channels(self, value: CoreWebView2ReleaseChannels) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2ChannelSearchKind Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::get_ChannelSearchKind()
    @_property
    def channel_search_kind(self) -> CoreWebView2ChannelSearchKind: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::put_ChannelSearchKind(Microsoft.Web.WebView2.Core.CoreWebView2ChannelSearchKind)
    @channel_search_kind.setter
    def channel_search_kind(self, value: CoreWebView2ChannelSearchKind) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2ScrollbarStyle Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::get_ScrollBarStyle()
    @_property
    def scroll_bar_style(self) -> CoreWebView2ScrollbarStyle: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions::put_ScrollBarStyle(Microsoft.Web.WebView2.Core.CoreWebView2ScrollbarStyle)
    @scroll_bar_style.setter
    def scroll_bar_style(self, value: CoreWebView2ScrollbarStyle) -> None: ...

@typing.final
class CoreWebView2ExecuteScriptResult(winrt.system.Object):
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult::TryGetResultAsString(System.String&)
    def try_get_result_as_string(self) -> typing.Tuple[winrt.system.Int32, str]: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2ScriptException Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult::get_Exception()
    @_property
    def exception(self) -> CoreWebView2ScriptException: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult::get_ResultAsJson()
    @_property
    def result_as_json(self) -> str: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2ExecuteScriptResult::get_Succeeded()
    @_property
    def succeeded(self) -> bool: ...

@typing.final
class CoreWebView2File(winrt.system.Object):
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2File::get_Path()
    @_property
    def path(self) -> str: ...

@typing.final
class CoreWebView2FileSystemHandle(winrt.system.Object):
    # Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandleKind Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle::get_Kind()
    @_property
    def kind(self) -> CoreWebView2FileSystemHandleKind: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle::get_Path()
    @_property
    def path(self) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandlePermission Microsoft.Web.WebView2.Core.CoreWebView2FileSystemHandle::get_Permission()
    @_property
    def permission(self) -> CoreWebView2FileSystemHandlePermission: ...

@typing.final
class CoreWebView2Frame(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<System.String> Microsoft.Web.WebView2.Core.CoreWebView2Frame::ExecuteScriptAsync(System.String)
    def execute_script_async(self, java_script: str, /) -> windows_foundation.IAsyncOperation[str]: ...
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2Frame::IsDestroyed()
    def is_destroyed(self) -> winrt.system.Int32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Frame::PostSharedBufferToScript(Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer,Microsoft.Web.WebView2.Core.CoreWebView2SharedBufferAccess,System.String)
    def post_shared_buffer_to_script(self, shared_buffer: CoreWebView2SharedBuffer, access: CoreWebView2SharedBufferAccess, additional_data_as_json: str, /) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Frame::PostWebMessageAsJson(System.String)
    def post_web_message_as_json(self, web_message_as_json: str, /) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Frame::PostWebMessageAsString(System.String)
    def post_web_message_as_string(self, web_message_as_string: str, /) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Frame::RemoveHostObjectFromScript(System.String)
    def remove_host_object_from_script(self, name: str, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Frame::add_ContentLoading(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Frame,Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs>)
    def add_content_loading(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Frame, CoreWebView2ContentLoadingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Frame::remove_ContentLoading(Windows.Foundation.EventRegistrationToken)
    def remove_content_loading(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Frame::add_DOMContentLoaded(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Frame,Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs>)
    def add_dom_content_loaded(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Frame, CoreWebView2DOMContentLoadedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Frame::remove_DOMContentLoaded(Windows.Foundation.EventRegistrationToken)
    def remove_dom_content_loaded(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Frame::add_NavigationCompleted(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Frame,Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs>)
    def add_navigation_completed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Frame, CoreWebView2NavigationCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Frame::remove_NavigationCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_navigation_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Frame::add_NavigationStarting(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Frame,Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs>)
    def add_navigation_starting(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Frame, CoreWebView2NavigationStartingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Frame::remove_NavigationStarting(Windows.Foundation.EventRegistrationToken)
    def remove_navigation_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Frame::add_WebMessageReceived(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Frame,Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs>)
    def add_web_message_received(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Frame, CoreWebView2WebMessageReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Frame::remove_WebMessageReceived(Windows.Foundation.EventRegistrationToken)
    def remove_web_message_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Frame::add_PermissionRequested(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Frame,Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs>)
    def add_permission_requested(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Frame, CoreWebView2PermissionRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Frame::remove_PermissionRequested(Windows.Foundation.EventRegistrationToken)
    def remove_permission_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Frame::add_Destroyed(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Frame,System.Object>)
    def add_destroyed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Frame, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Frame::remove_Destroyed(Windows.Foundation.EventRegistrationToken)
    def remove_destroyed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Frame::add_NameChanged(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Frame,System.Object>)
    def add_name_changed(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Frame, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Frame::remove_NameChanged(Windows.Foundation.EventRegistrationToken)
    def remove_name_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Frame::get_Name()
    @_property
    def name(self) -> str: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2Frame::get_FrameId()
    @_property
    def frame_id(self) -> winrt.system.UInt32: ...

@typing.final
class CoreWebView2FrameCreatedEventArgs(winrt.system.Object):
    # Microsoft.Web.WebView2.Core.CoreWebView2Frame Microsoft.Web.WebView2.Core.CoreWebView2FrameCreatedEventArgs::get_Frame()
    @_property
    def frame(self) -> CoreWebView2Frame: ...

@typing.final
class CoreWebView2FrameInfo(winrt.system.Object):
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo::get_Name()
    @_property
    def name(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo::get_Source()
    @_property
    def source(self) -> str: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo::get_FrameId()
    @_property
    def frame_id(self) -> winrt.system.UInt32: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2FrameKind Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo::get_FrameKind()
    @_property
    def frame_kind(self) -> CoreWebView2FrameKind: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo::get_ParentFrameInfo()
    @_property
    def parent_frame_info(self) -> CoreWebView2FrameInfo: ...

@typing.final
class CoreWebView2HttpHeadersCollectionIterator(winrt.system.Object, windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[str, str]]):
    def __iter__(self: Self) -> Self: ...
    def __next__(self) -> windows_foundation_collections.IKeyValuePair[str, str]: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator::GetMany(Windows.Foundation.Collections.IKeyValuePair`2<System.String,System.String>[])
    def get_many(self, items: typing.Union[winrt.system.Array[windows_foundation_collections.IKeyValuePair[str, str]], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator::MoveNext()
    def move_next(self) -> bool: ...
    # Windows.Foundation.Collections.IKeyValuePair`2<System.String,System.String> Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator::get_Current()
    @_property
    def current(self) -> windows_foundation_collections.IKeyValuePair[str, str]: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator::get_HasCurrent()
    @_property
    def has_current(self) -> bool: ...

@typing.final
class CoreWebView2HttpRequestHeaders(winrt.system.Object):
    def __iter__(self) -> typing.Iterator[windows_foundation_collections.IKeyValuePair[str, str]]: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders::Contains(System.String)
    def contains(self, name: str, /) -> bool: ...
    # Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<System.String,System.String>> Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders::First()
    def first(self) -> windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[str, str]]: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders::GetHeader(System.String)
    def get_header(self, name: str, /) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders::GetHeaders(System.String)
    def get_headers(self, name: str, /) -> CoreWebView2HttpHeadersCollectionIterator: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders::RemoveHeader(System.String)
    def remove_header(self, name: str, /) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders::SetHeader(System.String,System.String)
    def set_header(self, name: str, value: str, /) -> None: ...

@typing.final
class CoreWebView2HttpResponseHeaders(winrt.system.Object):
    def __iter__(self) -> typing.Iterator[windows_foundation_collections.IKeyValuePair[str, str]]: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders::AppendHeader(System.String,System.String)
    def append_header(self, name: str, value: str, /) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders::Contains(System.String)
    def contains(self, name: str, /) -> bool: ...
    # Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<System.String,System.String>> Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders::First()
    def first(self) -> windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[str, str]]: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders::GetHeader(System.String)
    def get_header(self, name: str, /) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders::GetHeaders(System.String)
    def get_headers(self, name: str, /) -> CoreWebView2HttpHeadersCollectionIterator: ...

@typing.final
class CoreWebView2LaunchingExternalUriSchemeEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs::get_Cancel()
    @_property
    def cancel(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs::put_Cancel(System.Boolean)
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs::get_InitiatingOrigin()
    @_property
    def initiating_origin(self) -> str: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs::get_IsUserInitiated()
    @_property
    def is_user_initiated(self) -> bool: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2LaunchingExternalUriSchemeEventArgs::get_Uri()
    @_property
    def uri(self) -> str: ...

@typing.final
class CoreWebView2MoveFocusRequestedEventArgs(winrt.system.Object):
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusReason Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs::get_Reason()
    @_property
    def reason(self) -> CoreWebView2MoveFocusReason: ...

@typing.final
class CoreWebView2NavigationCompletedEventArgs(winrt.system.Object):
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs::get_IsSuccess()
    @_property
    def is_success(self) -> bool: ...
    # System.UInt64 Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs::get_NavigationId()
    @_property
    def navigation_id(self) -> winrt.system.UInt64: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2WebErrorStatus Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs::get_WebErrorStatus()
    @_property
    def web_error_status(self) -> CoreWebView2WebErrorStatus: ...
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs::get_HttpStatusCode()
    @_property
    def http_status_code(self) -> winrt.system.Int32: ...

@typing.final
class CoreWebView2NavigationStartingEventArgs(winrt.system.Object):
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs::get_Cancel()
    @_property
    def cancel(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs::put_Cancel(System.Boolean)
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs::get_IsRedirected()
    @_property
    def is_redirected(self) -> bool: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs::get_IsUserInitiated()
    @_property
    def is_user_initiated(self) -> bool: ...
    # System.UInt64 Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs::get_NavigationId()
    @_property
    def navigation_id(self) -> winrt.system.UInt64: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs::get_RequestHeaders()
    @_property
    def request_headers(self) -> CoreWebView2HttpRequestHeaders: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs::get_Uri()
    @_property
    def uri(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs::get_AdditionalAllowedFrameAncestors()
    @_property
    def additional_allowed_frame_ancestors(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs::put_AdditionalAllowedFrameAncestors(System.String)
    @additional_allowed_frame_ancestors.setter
    def additional_allowed_frame_ancestors(self, value: str) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2NavigationKind Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs::get_NavigationKind()
    @_property
    def navigation_kind(self) -> CoreWebView2NavigationKind: ...

@typing.final
class CoreWebView2NewWindowRequestedEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2 Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs::get_NewWindow()
    @_property
    def new_window(self) -> CoreWebView2: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs::put_NewWindow(Microsoft.Web.WebView2.Core.CoreWebView2)
    @new_window.setter
    def new_window(self, value: CoreWebView2) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs::get_IsUserInitiated()
    @_property
    def is_user_initiated(self) -> bool: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs::get_Uri()
    @_property
    def uri(self) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs::get_WindowFeatures()
    @_property
    def window_features(self) -> CoreWebView2WindowFeatures: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs::get_Name()
    @_property
    def name(self) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs::get_OriginalSourceFrameInfo()
    @_property
    def original_source_frame_info(self) -> CoreWebView2FrameInfo: ...

@typing.final
class CoreWebView2NonClientRegionChangedEventArgs(winrt.system.Object):
    # Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionKind Microsoft.Web.WebView2.Core.CoreWebView2NonClientRegionChangedEventArgs::get_RegionKind()
    @_property
    def region_kind(self) -> CoreWebView2NonClientRegionKind: ...

@typing.final
class CoreWebView2Notification(winrt.system.Object):
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Notification::ReportClicked()
    def report_clicked(self) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Notification::ReportClosed()
    def report_closed(self) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Notification::ReportShown()
    def report_shown(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Notification::add_CloseRequested(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Notification,System.Object>)
    def add_close_requested(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Notification, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Notification::remove_CloseRequested(Windows.Foundation.EventRegistrationToken)
    def remove_close_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Notification::get_BadgeUri()
    @_property
    def badge_uri(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Notification::get_Body()
    @_property
    def body(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Notification::get_BodyImageUri()
    @_property
    def body_image_uri(self) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2TextDirectionKind Microsoft.Web.WebView2.Core.CoreWebView2Notification::get_Direction()
    @_property
    def direction(self) -> CoreWebView2TextDirectionKind: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Notification::get_IconUri()
    @_property
    def icon_uri(self) -> str: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Notification::get_IsSilent()
    @_property
    def is_silent(self) -> bool: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Notification::get_Language()
    @_property
    def language(self) -> str: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Notification::get_RequiresInteraction()
    @_property
    def requires_interaction(self) -> bool: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Notification::get_ShouldRenotify()
    @_property
    def should_renotify(self) -> bool: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Notification::get_Tag()
    @_property
    def tag(self) -> str: ...
    # System.Double Microsoft.Web.WebView2.Core.CoreWebView2Notification::get_Timestamp()
    @_property
    def timestamp(self) -> winrt.system.Double: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Notification::get_Title()
    @_property
    def title(self) -> str: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt64> Microsoft.Web.WebView2.Core.CoreWebView2Notification::get_VibrationPattern()
    @_property
    def vibration_pattern(self) -> typing.Sequence[winrt.system.UInt64]: ...

@typing.final
class CoreWebView2NotificationReceivedEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2Notification Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs::get_Notification()
    @_property
    def notification(self) -> CoreWebView2Notification: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2NotificationReceivedEventArgs::get_SenderOrigin()
    @_property
    def sender_origin(self) -> str: ...

@typing.final
class CoreWebView2PermissionRequestedEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2PermissionState Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs::get_State()
    @_property
    def state(self) -> CoreWebView2PermissionState: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs::put_State(Microsoft.Web.WebView2.Core.CoreWebView2PermissionState)
    @state.setter
    def state(self, value: CoreWebView2PermissionState) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs::get_IsUserInitiated()
    @_property
    def is_user_initiated(self) -> bool: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2PermissionKind Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs::get_PermissionKind()
    @_property
    def permission_kind(self) -> CoreWebView2PermissionKind: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs::get_Uri()
    @_property
    def uri(self) -> str: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs::get_SavesInProfile()
    @_property
    def saves_in_profile(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs::put_SavesInProfile(System.Boolean)
    @saves_in_profile.setter
    def saves_in_profile(self, value: bool) -> None: ...

@typing.final
class CoreWebView2PermissionSetting(winrt.system.Object):
    # Microsoft.Web.WebView2.Core.CoreWebView2PermissionKind Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting::get_PermissionKind()
    @_property
    def permission_kind(self) -> CoreWebView2PermissionKind: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting::get_PermissionOrigin()
    @_property
    def permission_origin(self) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2PermissionState Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting::get_PermissionState()
    @_property
    def permission_state(self) -> CoreWebView2PermissionState: ...

@typing.final
class CoreWebView2PointerInfo(winrt.system.Object):
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_TouchPressure()
    @_property
    def touch_pressure(self) -> winrt.system.UInt32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_TouchPressure(System.UInt32)
    @touch_pressure.setter
    def touch_pressure(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_TouchOrientation()
    @_property
    def touch_orientation(self) -> winrt.system.UInt32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_TouchOrientation(System.UInt32)
    @touch_orientation.setter
    def touch_orientation(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_TouchMask()
    @_property
    def touch_mask(self) -> winrt.system.UInt32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_TouchMask(System.UInt32)
    @touch_mask.setter
    def touch_mask(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_TouchFlags()
    @_property
    def touch_flags(self) -> winrt.system.UInt32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_TouchFlags(System.UInt32)
    @touch_flags.setter
    def touch_flags(self, value: winrt.system.UInt32) -> None: ...
    # Windows.Foundation.Rect Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_TouchContactRaw()
    @_property
    def touch_contact_raw(self) -> windows_foundation.Rect: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_TouchContactRaw(Windows.Foundation.Rect)
    @touch_contact_raw.setter
    def touch_contact_raw(self, value: windows_foundation.Rect) -> None: ...
    # Windows.Foundation.Rect Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_TouchContact()
    @_property
    def touch_contact(self) -> windows_foundation.Rect: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_TouchContact(Windows.Foundation.Rect)
    @touch_contact.setter
    def touch_contact(self, value: windows_foundation.Rect) -> None: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_Time()
    @_property
    def time(self) -> winrt.system.UInt32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_Time(System.UInt32)
    @time.setter
    def time(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_PointerKind()
    @_property
    def pointer_kind(self) -> winrt.system.UInt32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_PointerKind(System.UInt32)
    @pointer_kind.setter
    def pointer_kind(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_PointerId()
    @_property
    def pointer_id(self) -> winrt.system.UInt32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_PointerId(System.UInt32)
    @pointer_id.setter
    def pointer_id(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_PointerFlags()
    @_property
    def pointer_flags(self) -> winrt.system.UInt32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_PointerFlags(System.UInt32)
    @pointer_flags.setter
    def pointer_flags(self, value: winrt.system.UInt32) -> None: ...
    # Windows.Foundation.Rect Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_PointerDeviceRect()
    @_property
    def pointer_device_rect(self) -> windows_foundation.Rect: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_PointerDeviceRect(Windows.Foundation.Rect)
    @pointer_device_rect.setter
    def pointer_device_rect(self, value: windows_foundation.Rect) -> None: ...
    # Windows.Foundation.Point Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_PixelLocationRaw()
    @_property
    def pixel_location_raw(self) -> windows_foundation.Point: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_PixelLocationRaw(Windows.Foundation.Point)
    @pixel_location_raw.setter
    def pixel_location_raw(self, value: windows_foundation.Point) -> None: ...
    # Windows.Foundation.Point Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_PixelLocation()
    @_property
    def pixel_location(self) -> windows_foundation.Point: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_PixelLocation(Windows.Foundation.Point)
    @pixel_location.setter
    def pixel_location(self, value: windows_foundation.Point) -> None: ...
    # System.UInt64 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_PerformanceCount()
    @_property
    def performance_count(self) -> winrt.system.UInt64: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_PerformanceCount(System.UInt64)
    @performance_count.setter
    def performance_count(self, value: winrt.system.UInt64) -> None: ...
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_PenTiltY()
    @_property
    def pen_tilt_y(self) -> winrt.system.Int32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_PenTiltY(System.Int32)
    @pen_tilt_y.setter
    def pen_tilt_y(self, value: winrt.system.Int32) -> None: ...
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_PenTiltX()
    @_property
    def pen_tilt_x(self) -> winrt.system.Int32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_PenTiltX(System.Int32)
    @pen_tilt_x.setter
    def pen_tilt_x(self, value: winrt.system.Int32) -> None: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_PenRotation()
    @_property
    def pen_rotation(self) -> winrt.system.UInt32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_PenRotation(System.UInt32)
    @pen_rotation.setter
    def pen_rotation(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_PenPressure()
    @_property
    def pen_pressure(self) -> winrt.system.UInt32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_PenPressure(System.UInt32)
    @pen_pressure.setter
    def pen_pressure(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_PenMask()
    @_property
    def pen_mask(self) -> winrt.system.UInt32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_PenMask(System.UInt32)
    @pen_mask.setter
    def pen_mask(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_PenFlags()
    @_property
    def pen_flags(self) -> winrt.system.UInt32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_PenFlags(System.UInt32)
    @pen_flags.setter
    def pen_flags(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_KeyStates()
    @_property
    def key_states(self) -> winrt.system.UInt32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_KeyStates(System.UInt32)
    @key_states.setter
    def key_states(self, value: winrt.system.UInt32) -> None: ...
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_InputData()
    @_property
    def input_data(self) -> winrt.system.Int32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_InputData(System.Int32)
    @input_data.setter
    def input_data(self, value: winrt.system.Int32) -> None: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_HistoryCount()
    @_property
    def history_count(self) -> winrt.system.UInt32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_HistoryCount(System.UInt32)
    @history_count.setter
    def history_count(self, value: winrt.system.UInt32) -> None: ...
    # Windows.Foundation.Point Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_HimetricLocationRaw()
    @_property
    def himetric_location_raw(self) -> windows_foundation.Point: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_HimetricLocationRaw(Windows.Foundation.Point)
    @himetric_location_raw.setter
    def himetric_location_raw(self, value: windows_foundation.Point) -> None: ...
    # Windows.Foundation.Point Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_HimetricLocation()
    @_property
    def himetric_location(self) -> windows_foundation.Point: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_HimetricLocation(Windows.Foundation.Point)
    @himetric_location.setter
    def himetric_location(self, value: windows_foundation.Point) -> None: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_FrameId()
    @_property
    def frame_id(self) -> winrt.system.UInt32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_FrameId(System.UInt32)
    @frame_id.setter
    def frame_id(self, value: winrt.system.UInt32) -> None: ...
    # Windows.Foundation.Rect Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_DisplayRect()
    @_property
    def display_rect(self) -> windows_foundation.Rect: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_DisplayRect(Windows.Foundation.Rect)
    @display_rect.setter
    def display_rect(self, value: windows_foundation.Rect) -> None: ...
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::get_ButtonChangeKind()
    @_property
    def button_change_kind(self) -> winrt.system.Int32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo::put_ButtonChangeKind(System.Int32)
    @button_change_kind.setter
    def button_change_kind(self, value: winrt.system.Int32) -> None: ...

@typing.final
class CoreWebView2PrintSettings(winrt.system.Object):
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_ShouldPrintSelectionOnly()
    @_property
    def should_print_selection_only(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_ShouldPrintSelectionOnly(System.Boolean)
    @should_print_selection_only.setter
    def should_print_selection_only(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_ShouldPrintHeaderAndFooter()
    @_property
    def should_print_header_and_footer(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_ShouldPrintHeaderAndFooter(System.Boolean)
    @should_print_header_and_footer.setter
    def should_print_header_and_footer(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_ShouldPrintBackgrounds()
    @_property
    def should_print_backgrounds(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_ShouldPrintBackgrounds(System.Boolean)
    @should_print_backgrounds.setter
    def should_print_backgrounds(self, value: bool) -> None: ...
    # System.Double Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_ScaleFactor()
    @_property
    def scale_factor(self) -> winrt.system.Double: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_ScaleFactor(System.Double)
    @scale_factor.setter
    def scale_factor(self, value: winrt.system.Double) -> None: ...
    # System.Double Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_PageWidth()
    @_property
    def page_width(self) -> winrt.system.Double: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_PageWidth(System.Double)
    @page_width.setter
    def page_width(self, value: winrt.system.Double) -> None: ...
    # System.Double Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_PageHeight()
    @_property
    def page_height(self) -> winrt.system.Double: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_PageHeight(System.Double)
    @page_height.setter
    def page_height(self, value: winrt.system.Double) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2PrintOrientation Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_Orientation()
    @_property
    def orientation(self) -> CoreWebView2PrintOrientation: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_Orientation(Microsoft.Web.WebView2.Core.CoreWebView2PrintOrientation)
    @orientation.setter
    def orientation(self, value: CoreWebView2PrintOrientation) -> None: ...
    # System.Double Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_MarginTop()
    @_property
    def margin_top(self) -> winrt.system.Double: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_MarginTop(System.Double)
    @margin_top.setter
    def margin_top(self, value: winrt.system.Double) -> None: ...
    # System.Double Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_MarginRight()
    @_property
    def margin_right(self) -> winrt.system.Double: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_MarginRight(System.Double)
    @margin_right.setter
    def margin_right(self, value: winrt.system.Double) -> None: ...
    # System.Double Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_MarginLeft()
    @_property
    def margin_left(self) -> winrt.system.Double: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_MarginLeft(System.Double)
    @margin_left.setter
    def margin_left(self, value: winrt.system.Double) -> None: ...
    # System.Double Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_MarginBottom()
    @_property
    def margin_bottom(self) -> winrt.system.Double: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_MarginBottom(System.Double)
    @margin_bottom.setter
    def margin_bottom(self, value: winrt.system.Double) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_HeaderTitle()
    @_property
    def header_title(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_HeaderTitle(System.String)
    @header_title.setter
    def header_title(self, value: str) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_FooterUri()
    @_property
    def footer_uri(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_FooterUri(System.String)
    @footer_uri.setter
    def footer_uri(self, value: str) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_PrinterName()
    @_property
    def printer_name(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_PrinterName(System.String)
    @printer_name.setter
    def printer_name(self, value: str) -> None: ...
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_PagesPerSide()
    @_property
    def pages_per_side(self) -> winrt.system.Int32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_PagesPerSide(System.Int32)
    @pages_per_side.setter
    def pages_per_side(self, value: winrt.system.Int32) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_PageRanges()
    @_property
    def page_ranges(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_PageRanges(System.String)
    @page_ranges.setter
    def page_ranges(self, value: str) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2PrintMediaSize Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_MediaSize()
    @_property
    def media_size(self) -> CoreWebView2PrintMediaSize: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_MediaSize(Microsoft.Web.WebView2.Core.CoreWebView2PrintMediaSize)
    @media_size.setter
    def media_size(self, value: CoreWebView2PrintMediaSize) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2PrintDuplex Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_Duplex()
    @_property
    def duplex(self) -> CoreWebView2PrintDuplex: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_Duplex(Microsoft.Web.WebView2.Core.CoreWebView2PrintDuplex)
    @duplex.setter
    def duplex(self, value: CoreWebView2PrintDuplex) -> None: ...
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_Copies()
    @_property
    def copies(self) -> winrt.system.Int32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_Copies(System.Int32)
    @copies.setter
    def copies(self, value: winrt.system.Int32) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2PrintColorMode Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_ColorMode()
    @_property
    def color_mode(self) -> CoreWebView2PrintColorMode: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_ColorMode(Microsoft.Web.WebView2.Core.CoreWebView2PrintColorMode)
    @color_mode.setter
    def color_mode(self, value: CoreWebView2PrintColorMode) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2PrintCollation Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::get_Collation()
    @_property
    def collation(self) -> CoreWebView2PrintCollation: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2PrintSettings::put_Collation(Microsoft.Web.WebView2.Core.CoreWebView2PrintCollation)
    @collation.setter
    def collation(self, value: CoreWebView2PrintCollation) -> None: ...

@typing.final
class CoreWebView2ProcessExtendedInfo(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo> Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo::get_AssociatedFrameInfos()
    @_property
    def associated_frame_infos(self) -> typing.Sequence[CoreWebView2FrameInfo]: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo Microsoft.Web.WebView2.Core.CoreWebView2ProcessExtendedInfo::get_ProcessInfo()
    @_property
    def process_info(self) -> CoreWebView2ProcessInfo: ...

@typing.final
class CoreWebView2ProcessFailedEventArgs(winrt.system.Object):
    # Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedKind Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs::get_ProcessFailedKind()
    @_property
    def process_failed_kind(self) -> CoreWebView2ProcessFailedKind: ...
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs::get_ExitCode()
    @_property
    def exit_code(self) -> winrt.system.Int32: ...
    # Windows.Foundation.Collections.IVectorView`1<Microsoft.Web.WebView2.Core.CoreWebView2FrameInfo> Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs::get_FrameInfosForFailedProcess()
    @_property
    def frame_infos_for_failed_process(self) -> typing.Sequence[CoreWebView2FrameInfo]: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs::get_ProcessDescription()
    @_property
    def process_description(self) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedReason Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs::get_Reason()
    @_property
    def reason(self) -> CoreWebView2ProcessFailedReason: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs::get_FailureSourceModulePath()
    @_property
    def failure_source_module_path(self) -> str: ...

@typing.final
class CoreWebView2ProcessInfo(winrt.system.Object):
    # Microsoft.Web.WebView2.Core.CoreWebView2ProcessKind Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo::get_Kind()
    @_property
    def kind(self) -> CoreWebView2ProcessKind: ...
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2ProcessInfo::get_ProcessId()
    @_property
    def process_id(self) -> winrt.system.Int32: ...

@typing.final
class CoreWebView2Profile(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension> Microsoft.Web.WebView2.Core.CoreWebView2Profile::AddBrowserExtensionAsync(System.String)
    def add_browser_extension_async(self, extension_folder_path: str, /) -> windows_foundation.IAsyncOperation[CoreWebView2BrowserExtension]: ...
    @typing.overload
    # Windows.Foundation.IAsyncAction Microsoft.Web.WebView2.Core.CoreWebView2Profile::ClearBrowsingDataAsync(Microsoft.Web.WebView2.Core.CoreWebView2BrowsingDataKinds)
    def clear_browsing_data_async(self, data_kinds: CoreWebView2BrowsingDataKinds, /) -> windows_foundation.IAsyncAction: ...
    @typing.overload
    # Windows.Foundation.IAsyncAction Microsoft.Web.WebView2.Core.CoreWebView2Profile::ClearBrowsingDataAsync(Microsoft.Web.WebView2.Core.CoreWebView2BrowsingDataKinds,Windows.Foundation.DateTime,Windows.Foundation.DateTime)
    def clear_browsing_data_async(self, data_kinds: CoreWebView2BrowsingDataKinds, start_time: datetime.datetime, end_time: datetime.datetime, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Microsoft.Web.WebView2.Core.CoreWebView2Profile::ClearBrowsingDataAsync()
    def clear_browsing_data_async2(self) -> windows_foundation.IAsyncAction: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Profile::Delete()
    def delete(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Microsoft.Web.WebView2.Core.CoreWebView2BrowserExtension>> Microsoft.Web.WebView2.Core.CoreWebView2Profile::GetBrowserExtensionsAsync()
    def get_browser_extensions_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[CoreWebView2BrowserExtension]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Microsoft.Web.WebView2.Core.CoreWebView2PermissionSetting>> Microsoft.Web.WebView2.Core.CoreWebView2Profile::GetNonDefaultPermissionSettingsAsync()
    def get_non_default_permission_settings_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[CoreWebView2PermissionSetting]]: ...
    # Windows.Foundation.IAsyncAction Microsoft.Web.WebView2.Core.CoreWebView2Profile::SetPermissionStateAsync(Microsoft.Web.WebView2.Core.CoreWebView2PermissionKind,System.String,Microsoft.Web.WebView2.Core.CoreWebView2PermissionState)
    def set_permission_state_async(self, permission_kind: CoreWebView2PermissionKind, origin: str, state: CoreWebView2PermissionState, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.EventRegistrationToken Microsoft.Web.WebView2.Core.CoreWebView2Profile::add_Deleted(Windows.Foundation.TypedEventHandler`2<Microsoft.Web.WebView2.Core.CoreWebView2Profile,System.Object>)
    def add_deleted(self, handler: windows_foundation.TypedEventHandler[CoreWebView2Profile, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Profile::remove_Deleted(Windows.Foundation.EventRegistrationToken)
    def remove_deleted(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2PreferredColorScheme Microsoft.Web.WebView2.Core.CoreWebView2Profile::get_PreferredColorScheme()
    @_property
    def preferred_color_scheme(self) -> CoreWebView2PreferredColorScheme: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Profile::put_PreferredColorScheme(Microsoft.Web.WebView2.Core.CoreWebView2PreferredColorScheme)
    @preferred_color_scheme.setter
    def preferred_color_scheme(self, value: CoreWebView2PreferredColorScheme) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Profile::get_DefaultDownloadFolderPath()
    @_property
    def default_download_folder_path(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Profile::put_DefaultDownloadFolderPath(System.String)
    @default_download_folder_path.setter
    def default_download_folder_path(self, value: str) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Profile::get_IsInPrivateModeEnabled()
    @_property
    def is_in_private_mode_enabled(self) -> bool: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Profile::get_ProfileName()
    @_property
    def profile_name(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Profile::get_ProfilePath()
    @_property
    def profile_path(self) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2TrackingPreventionLevel Microsoft.Web.WebView2.Core.CoreWebView2Profile::get_PreferredTrackingPreventionLevel()
    @_property
    def preferred_tracking_prevention_level(self) -> CoreWebView2TrackingPreventionLevel: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Profile::put_PreferredTrackingPreventionLevel(Microsoft.Web.WebView2.Core.CoreWebView2TrackingPreventionLevel)
    @preferred_tracking_prevention_level.setter
    def preferred_tracking_prevention_level(self, value: CoreWebView2TrackingPreventionLevel) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2CookieManager Microsoft.Web.WebView2.Core.CoreWebView2Profile::get_CookieManager()
    @_property
    def cookie_manager(self) -> CoreWebView2CookieManager: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Profile::get_IsPasswordAutosaveEnabled()
    @_property
    def is_password_autosave_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Profile::put_IsPasswordAutosaveEnabled(System.Boolean)
    @is_password_autosave_enabled.setter
    def is_password_autosave_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Profile::get_IsGeneralAutofillEnabled()
    @_property
    def is_general_autofill_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Profile::put_IsGeneralAutofillEnabled(System.Boolean)
    @is_general_autofill_enabled.setter
    def is_general_autofill_enabled(self, value: bool) -> None: ...

@typing.final
class CoreWebView2SaveAsUIShowingEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs::get_SuppressDefaultDialog()
    @_property
    def suppress_default_dialog(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs::put_SuppressDefaultDialog(System.Boolean)
    @suppress_default_dialog.setter
    def suppress_default_dialog(self, value: bool) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs::get_SaveAsFilePath()
    @_property
    def save_as_file_path(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs::put_SaveAsFilePath(System.String)
    @save_as_file_path.setter
    def save_as_file_path(self, value: str) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2SaveAsKind Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs::get_Kind()
    @_property
    def kind(self) -> CoreWebView2SaveAsKind: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs::put_Kind(Microsoft.Web.WebView2.Core.CoreWebView2SaveAsKind)
    @kind.setter
    def kind(self, value: CoreWebView2SaveAsKind) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs::get_Cancel()
    @_property
    def cancel(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs::put_Cancel(System.Boolean)
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs::get_AllowReplace()
    @_property
    def allow_replace(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs::put_AllowReplace(System.Boolean)
    @allow_replace.setter
    def allow_replace(self, value: bool) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2SaveAsUIShowingEventArgs::get_ContentMimeType()
    @_property
    def content_mime_type(self) -> str: ...

@typing.final
class CoreWebView2ScriptDialogOpeningEventArgs(winrt.system.Object):
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs::Accept()
    def accept(self) -> None: ...
    # Windows.Foundation.Deferral Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs::get_ResultText()
    @_property
    def result_text(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs::put_ResultText(System.String)
    @result_text.setter
    def result_text(self, value: str) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs::get_DefaultText()
    @_property
    def default_text(self) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogKind Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs::get_Kind()
    @_property
    def kind(self) -> CoreWebView2ScriptDialogKind: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs::get_Message()
    @_property
    def message(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs::get_Uri()
    @_property
    def uri(self) -> str: ...

@typing.final
class CoreWebView2ScriptException(winrt.system.Object):
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2ScriptException::get_ColumnNumber()
    @_property
    def column_number(self) -> winrt.system.UInt32: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2ScriptException::get_LineNumber()
    @_property
    def line_number(self) -> winrt.system.UInt32: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ScriptException::get_Message()
    @_property
    def message(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ScriptException::get_Name()
    @_property
    def name(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ScriptException::get_ToJson()
    @_property
    def to_json(self) -> str: ...

@typing.final
class CoreWebView2ServerCertificateErrorDetectedEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorAction Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs::get_Action()
    @_property
    def action(self) -> CoreWebView2ServerCertificateErrorAction: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs::put_Action(Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorAction)
    @action.setter
    def action(self, value: CoreWebView2ServerCertificateErrorAction) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2WebErrorStatus Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs::get_ErrorStatus()
    @_property
    def error_status(self) -> CoreWebView2WebErrorStatus: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs::get_RequestUri()
    @_property
    def request_uri(self) -> str: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2Certificate Microsoft.Web.WebView2.Core.CoreWebView2ServerCertificateErrorDetectedEventArgs::get_ServerCertificate()
    @_property
    def server_certificate(self) -> CoreWebView2Certificate: ...

@typing.final
class CoreWebView2Settings(winrt.system.Object):
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_IsZoomControlEnabled()
    @_property
    def is_zoom_control_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_IsZoomControlEnabled(System.Boolean)
    @is_zoom_control_enabled.setter
    def is_zoom_control_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_IsWebMessageEnabled()
    @_property
    def is_web_message_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_IsWebMessageEnabled(System.Boolean)
    @is_web_message_enabled.setter
    def is_web_message_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_IsStatusBarEnabled()
    @_property
    def is_status_bar_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_IsStatusBarEnabled(System.Boolean)
    @is_status_bar_enabled.setter
    def is_status_bar_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_IsScriptEnabled()
    @_property
    def is_script_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_IsScriptEnabled(System.Boolean)
    @is_script_enabled.setter
    def is_script_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_IsBuiltInErrorPageEnabled()
    @_property
    def is_built_in_error_page_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_IsBuiltInErrorPageEnabled(System.Boolean)
    @is_built_in_error_page_enabled.setter
    def is_built_in_error_page_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_AreHostObjectsAllowed()
    @_property
    def are_host_objects_allowed(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_AreHostObjectsAllowed(System.Boolean)
    @are_host_objects_allowed.setter
    def are_host_objects_allowed(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_AreDevToolsEnabled()
    @_property
    def are_dev_tools_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_AreDevToolsEnabled(System.Boolean)
    @are_dev_tools_enabled.setter
    def are_dev_tools_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_AreDefaultScriptDialogsEnabled()
    @_property
    def are_default_script_dialogs_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_AreDefaultScriptDialogsEnabled(System.Boolean)
    @are_default_script_dialogs_enabled.setter
    def are_default_script_dialogs_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_AreDefaultContextMenusEnabled()
    @_property
    def are_default_context_menus_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_AreDefaultContextMenusEnabled(System.Boolean)
    @are_default_context_menus_enabled.setter
    def are_default_context_menus_enabled(self, value: bool) -> None: ...
    # Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_HostObjectDispatchAdapter()
    @_property
    def host_object_dispatch_adapter(self) -> ICoreWebView2DispatchAdapter: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_HostObjectDispatchAdapter(Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter)
    @host_object_dispatch_adapter.setter
    def host_object_dispatch_adapter(self, value: ICoreWebView2DispatchAdapter) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_UserAgent()
    @_property
    def user_agent(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_UserAgent(System.String)
    @user_agent.setter
    def user_agent(self, value: str) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_AreBrowserAcceleratorKeysEnabled()
    @_property
    def are_browser_accelerator_keys_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_AreBrowserAcceleratorKeysEnabled(System.Boolean)
    @are_browser_accelerator_keys_enabled.setter
    def are_browser_accelerator_keys_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_IsPasswordAutosaveEnabled()
    @_property
    def is_password_autosave_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_IsPasswordAutosaveEnabled(System.Boolean)
    @is_password_autosave_enabled.setter
    def is_password_autosave_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_IsGeneralAutofillEnabled()
    @_property
    def is_general_autofill_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_IsGeneralAutofillEnabled(System.Boolean)
    @is_general_autofill_enabled.setter
    def is_general_autofill_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_IsPinchZoomEnabled()
    @_property
    def is_pinch_zoom_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_IsPinchZoomEnabled(System.Boolean)
    @is_pinch_zoom_enabled.setter
    def is_pinch_zoom_enabled(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_IsSwipeNavigationEnabled()
    @_property
    def is_swipe_navigation_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_IsSwipeNavigationEnabled(System.Boolean)
    @is_swipe_navigation_enabled.setter
    def is_swipe_navigation_enabled(self, value: bool) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2PdfToolbarItems Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_HiddenPdfToolbarItems()
    @_property
    def hidden_pdf_toolbar_items(self) -> CoreWebView2PdfToolbarItems: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_HiddenPdfToolbarItems(Microsoft.Web.WebView2.Core.CoreWebView2PdfToolbarItems)
    @hidden_pdf_toolbar_items.setter
    def hidden_pdf_toolbar_items(self, value: CoreWebView2PdfToolbarItems) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_IsReputationCheckingRequired()
    @_property
    def is_reputation_checking_required(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_IsReputationCheckingRequired(System.Boolean)
    @is_reputation_checking_required.setter
    def is_reputation_checking_required(self, value: bool) -> None: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2Settings::get_IsNonClientRegionSupportEnabled()
    @_property
    def is_non_client_region_support_enabled(self) -> bool: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2Settings::put_IsNonClientRegionSupportEnabled(System.Boolean)
    @is_non_client_region_support_enabled.setter
    def is_non_client_region_support_enabled(self, value: bool) -> None: ...

@typing.final
class CoreWebView2SharedBuffer(winrt.system.Object, windows_foundation.IClosable):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer::Close()
    def close(self) -> None: ...
    # Windows.Storage.Streams.IRandomAccessStream Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer::OpenStream()
    def open_stream(self) -> windows_storage_streams.IRandomAccessStream: ...
    # System.UInt64 Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer::get_Size()
    @_property
    def size(self) -> winrt.system.UInt64: ...
    # Windows.Foundation.IMemoryBufferReference Microsoft.Web.WebView2.Core.CoreWebView2SharedBuffer::get_Buffer()
    @_property
    def buffer(self) -> windows_foundation.IMemoryBufferReference: ...

@typing.final
class CoreWebView2SourceChangedEventArgs(winrt.system.Object):
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs::get_IsNewDocument()
    @_property
    def is_new_document(self) -> bool: ...

@typing.final
class CoreWebView2WebMessageReceivedEventArgs(winrt.system.Object):
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs::TryGetWebMessageAsString()
    def try_get_web_message_as_string(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs::get_Source()
    @_property
    def source(self) -> str: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs::get_WebMessageAsJson()
    @_property
    def web_message_as_json(self) -> str: ...
    # Windows.Foundation.Collections.IVectorView`1<System.Object> Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs::get_AdditionalObjects()
    @_property
    def additional_objects(self) -> typing.Sequence[winrt.system.Object]: ...

@typing.final
class CoreWebView2WebResourceRequest(winrt.system.Object):
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest::get_Uri()
    @_property
    def uri(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest::put_Uri(System.String)
    @uri.setter
    def uri(self, value: str) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest::get_Method()
    @_property
    def method(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest::put_Method(System.String)
    @method.setter
    def method(self, value: str) -> None: ...
    # Windows.Storage.Streams.IRandomAccessStream Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest::get_Content()
    @_property
    def content(self) -> windows_storage_streams.IRandomAccessStream: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest::put_Content(Windows.Storage.Streams.IRandomAccessStream)
    @content.setter
    def content(self, value: windows_storage_streams.IRandomAccessStream) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest::get_Headers()
    @_property
    def headers(self) -> CoreWebView2HttpRequestHeaders: ...

@typing.final
class CoreWebView2WebResourceRequestedEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs::get_Response()
    @_property
    def response(self) -> CoreWebView2WebResourceResponse: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs::put_Response(Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse)
    @response.setter
    def response(self, value: CoreWebView2WebResourceResponse) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs::get_Request()
    @_property
    def request(self) -> CoreWebView2WebResourceRequest: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs::get_ResourceContext()
    @_property
    def resource_context(self) -> CoreWebView2WebResourceContext: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestSourceKinds Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs::get_RequestedSourceKind()
    @_property
    def requested_source_kind(self) -> CoreWebView2WebResourceRequestSourceKinds: ...

@typing.final
class CoreWebView2WebResourceResponse(winrt.system.Object):
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse::get_StatusCode()
    @_property
    def status_code(self) -> winrt.system.Int32: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse::put_StatusCode(System.Int32)
    @status_code.setter
    def status_code(self, value: winrt.system.Int32) -> None: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse::get_ReasonPhrase()
    @_property
    def reason_phrase(self) -> str: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse::put_ReasonPhrase(System.String)
    @reason_phrase.setter
    def reason_phrase(self, value: str) -> None: ...
    # Windows.Storage.Streams.IRandomAccessStream Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse::get_Content()
    @_property
    def content(self) -> windows_storage_streams.IRandomAccessStream: ...
    # System.Void Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse::put_Content(Windows.Storage.Streams.IRandomAccessStream)
    @content.setter
    def content(self, value: windows_storage_streams.IRandomAccessStream) -> None: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse::get_Headers()
    @_property
    def headers(self) -> CoreWebView2HttpResponseHeaders: ...

@typing.final
class CoreWebView2WebResourceResponseReceivedEventArgs(winrt.system.Object):
    # Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs::get_Request()
    @_property
    def request(self) -> CoreWebView2WebResourceRequest: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs::get_Response()
    @_property
    def response(self) -> CoreWebView2WebResourceResponseView: ...

@typing.final
class CoreWebView2WebResourceResponseView(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStream> Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView::GetContentAsync()
    def get_content_async(self) -> windows_foundation.IAsyncOperation[windows_storage_streams.IRandomAccessStream]: ...
    # Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView::get_Headers()
    @_property
    def headers(self) -> CoreWebView2HttpResponseHeaders: ...
    # System.String Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView::get_ReasonPhrase()
    @_property
    def reason_phrase(self) -> str: ...
    # System.Int32 Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView::get_StatusCode()
    @_property
    def status_code(self) -> winrt.system.Int32: ...

@typing.final
class CoreWebView2WindowFeatures(winrt.system.Object):
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures::get_HasPosition()
    @_property
    def has_position(self) -> bool: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures::get_HasSize()
    @_property
    def has_size(self) -> bool: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures::get_Height()
    @_property
    def height(self) -> winrt.system.UInt32: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures::get_Left()
    @_property
    def left(self) -> winrt.system.UInt32: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures::get_ShouldDisplayMenuBar()
    @_property
    def should_display_menu_bar(self) -> bool: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures::get_ShouldDisplayScrollBars()
    @_property
    def should_display_scroll_bars(self) -> bool: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures::get_ShouldDisplayStatus()
    @_property
    def should_display_status(self) -> bool: ...
    # System.Boolean Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures::get_ShouldDisplayToolbar()
    @_property
    def should_display_toolbar(self) -> bool: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures::get_Top()
    @_property
    def top(self) -> winrt.system.UInt32: ...
    # System.UInt32 Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures::get_Width()
    @_property
    def width(self) -> winrt.system.UInt32: ...

class ICoreWebView2DispatchAdapter(winrt._winrt.IInspectable):
    # System.Void Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter::Clean()
    @abstractmethod
    def clean(self) -> None: ...
    # System.Object Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter::UnwrapObject(System.Object)
    @abstractmethod
    def unwrap_object(self, wrapped: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter::WrapNamedObject(System.String,Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter)
    @abstractmethod
    def wrap_named_object(self, name: str, adapter: ICoreWebView2DispatchAdapter, /) -> winrt.system.Object: ...
    # System.Object Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter::WrapObject(System.Object,Microsoft.Web.WebView2.Core.ICoreWebView2DispatchAdapter)
    @abstractmethod
    def wrap_object(self, unwrapped: winrt.system.Object, adapter: ICoreWebView2DispatchAdapter, /) -> winrt.system.Object: ...

