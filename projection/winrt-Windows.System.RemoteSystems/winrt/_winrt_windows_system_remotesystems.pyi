# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.appservice
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.networking
import winrt.windows.security.credentials
import winrt.windows.system

from winrt.windows.system.remotesystems import RemoteSystemAccessStatus, RemoteSystemAuthorizationKind, RemoteSystemDiscoveryType, RemoteSystemPlatform, RemoteSystemSessionCreationStatus, RemoteSystemSessionDisconnectedReason, RemoteSystemSessionJoinStatus, RemoteSystemSessionMessageChannelReliability, RemoteSystemSessionParticipantWatcherStatus, RemoteSystemSessionWatcherStatus, RemoteSystemStatus, RemoteSystemStatusType, RemoteSystemWatcherError

Self = typing.TypeVar('Self')

@typing.final
class KnownRemoteSystemCapabilities_Static(type):
    @_property
    def app_service(cls) -> str: ...
    @_property
    def launch_uri(cls) -> str: ...
    @_property
    def remote_session(cls) -> str: ...
    @_property
    def spatial_entity(cls) -> str: ...

@typing.final
class KnownRemoteSystemCapabilities(winrt.system.Object, metaclass=KnownRemoteSystemCapabilities_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> KnownRemoteSystemCapabilities: ...

@typing.final
class RemoteSystem_Static(type):
    @typing.overload
    def create_watcher(cls) -> typing.Optional[RemoteSystemWatcher]: ...
    @typing.overload
    def create_watcher(cls, filters: typing.Iterable[IRemoteSystemFilter], /) -> typing.Optional[RemoteSystemWatcher]: ...
    @typing.overload
    def create_watcher_for_user(cls, user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[RemoteSystemWatcher]: ...
    @typing.overload
    def create_watcher_for_user(cls, user: typing.Optional[winrt.windows.system.User], filters: typing.Iterable[IRemoteSystemFilter], /) -> typing.Optional[RemoteSystemWatcher]: ...
    def find_by_host_name_async(cls, host_name: typing.Optional[winrt.windows.networking.HostName], /) -> winrt.windows.foundation.IAsyncOperation[RemoteSystem]: ...
    def is_authorization_kind_enabled(cls, kind: RemoteSystemAuthorizationKind, /) -> bool: ...
    def request_access_async(cls) -> winrt.windows.foundation.IAsyncOperation[RemoteSystemAccessStatus]: ...

@typing.final
class RemoteSystem(winrt.system.Object, metaclass=RemoteSystem_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystem: ...
    def get_capability_supported_async(self, capability_name: str, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @_property
    def display_name(self) -> str: ...
    @_property
    def id(self) -> str: ...
    @_property
    def is_available_by_proximity(self) -> bool: ...
    @_property
    def kind(self) -> str: ...
    @_property
    def status(self) -> RemoteSystemStatus: ...
    @_property
    def is_available_by_spatial_proximity(self) -> bool: ...
    @_property
    def manufacturer_display_name(self) -> str: ...
    @_property
    def model_display_name(self) -> str: ...
    @_property
    def platform(self) -> RemoteSystemPlatform: ...
    @_property
    def apps(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[RemoteSystemApp]]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...

@typing.final
class RemoteSystemAddedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemAddedEventArgs: ...
    @_property
    def remote_system(self) -> typing.Optional[RemoteSystem]: ...

@typing.final
class RemoteSystemApp(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemApp: ...
    @_property
    def attributes(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]: ...
    @_property
    def display_name(self) -> str: ...
    @_property
    def id(self) -> str: ...
    @_property
    def is_available_by_proximity(self) -> bool: ...
    @_property
    def is_available_by_spatial_proximity(self) -> bool: ...
    @_property
    def connection_token(self) -> str: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...

@typing.final
class RemoteSystemAppRegistration_Static(type):
    def get_default(cls) -> typing.Optional[RemoteSystemAppRegistration]: ...
    def get_for_user(cls, user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[RemoteSystemAppRegistration]: ...

@typing.final
class RemoteSystemAppRegistration(winrt.system.Object, metaclass=RemoteSystemAppRegistration_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemAppRegistration: ...
    def save_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @_property
    def attributes(self) -> typing.Optional[winrt.windows.foundation.collections.IMap[str, str]]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...

@typing.final
class RemoteSystemAuthorizationKindFilter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemAuthorizationKindFilter: ...
    def __new__(cls: typing.Type[RemoteSystemAuthorizationKindFilter], remote_system_authorization_kind: RemoteSystemAuthorizationKind) -> RemoteSystemAuthorizationKindFilter:...
    @_property
    def remote_system_authorization_kind(self) -> RemoteSystemAuthorizationKind: ...

@typing.final
class RemoteSystemConnectionInfo_Static(type):
    def try_create_from_app_service_connection(cls, connection: typing.Optional[winrt.windows.applicationmodel.appservice.AppServiceConnection], /) -> typing.Optional[RemoteSystemConnectionInfo]: ...

@typing.final
class RemoteSystemConnectionInfo(winrt.system.Object, metaclass=RemoteSystemConnectionInfo_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemConnectionInfo: ...
    @_property
    def is_proximal(self) -> bool: ...

@typing.final
class RemoteSystemConnectionRequest_Static(type):
    def create_for_app(cls, remote_system_app: typing.Optional[RemoteSystemApp], /) -> typing.Optional[RemoteSystemConnectionRequest]: ...
    def create_from_connection_token(cls, connection_token: str, /) -> typing.Optional[RemoteSystemConnectionRequest]: ...
    def create_from_connection_token_for_user(cls, user: typing.Optional[winrt.windows.system.User], connection_token: str, /) -> typing.Optional[RemoteSystemConnectionRequest]: ...

@typing.final
class RemoteSystemConnectionRequest(winrt.system.Object, metaclass=RemoteSystemConnectionRequest_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemConnectionRequest: ...
    def __new__(cls: typing.Type[RemoteSystemConnectionRequest], remote_system: typing.Optional[RemoteSystem]) -> RemoteSystemConnectionRequest:...
    @_property
    def remote_system(self) -> typing.Optional[RemoteSystem]: ...
    @_property
    def remote_system_app(self) -> typing.Optional[RemoteSystemApp]: ...
    @_property
    def connection_token(self) -> str: ...

@typing.final
class RemoteSystemDiscoveryTypeFilter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemDiscoveryTypeFilter: ...
    def __new__(cls: typing.Type[RemoteSystemDiscoveryTypeFilter], discovery_type: RemoteSystemDiscoveryType) -> RemoteSystemDiscoveryTypeFilter:...
    @_property
    def remote_system_discovery_type(self) -> RemoteSystemDiscoveryType: ...

@typing.final
class RemoteSystemEnumerationCompletedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemEnumerationCompletedEventArgs: ...

@typing.final
class RemoteSystemKindFilter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemKindFilter: ...
    def __new__(cls: typing.Type[RemoteSystemKindFilter], remote_system_kinds: typing.Iterable[str]) -> RemoteSystemKindFilter:...
    @_property
    def remote_system_kinds(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...

@typing.final
class RemoteSystemKinds_Static(type):
    @_property
    def desktop(cls) -> str: ...
    @_property
    def holographic(cls) -> str: ...
    @_property
    def hub(cls) -> str: ...
    @_property
    def phone(cls) -> str: ...
    @_property
    def xbox(cls) -> str: ...
    @_property
    def iot(cls) -> str: ...
    @_property
    def laptop(cls) -> str: ...
    @_property
    def tablet(cls) -> str: ...

@typing.final
class RemoteSystemKinds(winrt.system.Object, metaclass=RemoteSystemKinds_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemKinds: ...

@typing.final
class RemoteSystemRemovedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemRemovedEventArgs: ...
    @_property
    def remote_system_id(self) -> str: ...

@typing.final
class RemoteSystemSession_Static(type):
    def create_watcher(cls) -> typing.Optional[RemoteSystemSessionWatcher]: ...

@typing.final
class RemoteSystemSession(winrt.system.Object, metaclass=RemoteSystemSession_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSession: ...
    def close(self) -> None: ...
    def create_participant_watcher(self) -> typing.Optional[RemoteSystemSessionParticipantWatcher]: ...
    def send_invitation_async(self, invitee: typing.Optional[RemoteSystem], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def add_disconnected(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSession, RemoteSystemSessionDisconnectedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_disconnected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def controller_display_name(self) -> str: ...
    @_property
    def display_name(self) -> str: ...
    @_property
    def id(self) -> str: ...

@typing.final
class RemoteSystemSessionAddedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionAddedEventArgs: ...
    @_property
    def session_info(self) -> typing.Optional[RemoteSystemSessionInfo]: ...

@typing.final
class RemoteSystemSessionController(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionController: ...
    @typing.overload
    def __new__(cls: typing.Type[RemoteSystemSessionController], display_name: str) -> RemoteSystemSessionController:...
    @typing.overload
    def __new__(cls: typing.Type[RemoteSystemSessionController], display_name: str, options: typing.Optional[RemoteSystemSessionOptions]) -> RemoteSystemSessionController:...
    def create_session_async(self) -> winrt.windows.foundation.IAsyncOperation[RemoteSystemSessionCreationResult]: ...
    def remove_participant_async(self, p_participant: typing.Optional[RemoteSystemSessionParticipant], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def add_join_requested(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionController, RemoteSystemSessionJoinRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_join_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class RemoteSystemSessionCreationResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionCreationResult: ...
    @_property
    def session(self) -> typing.Optional[RemoteSystemSession]: ...
    @_property
    def status(self) -> RemoteSystemSessionCreationStatus: ...

@typing.final
class RemoteSystemSessionDisconnectedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionDisconnectedEventArgs: ...
    @_property
    def reason(self) -> RemoteSystemSessionDisconnectedReason: ...

@typing.final
class RemoteSystemSessionInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionInfo: ...
    def join_async(self) -> winrt.windows.foundation.IAsyncOperation[RemoteSystemSessionJoinResult]: ...
    @_property
    def controller_display_name(self) -> str: ...
    @_property
    def display_name(self) -> str: ...

@typing.final
class RemoteSystemSessionInvitation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionInvitation: ...
    @_property
    def sender(self) -> typing.Optional[RemoteSystem]: ...
    @_property
    def session_info(self) -> typing.Optional[RemoteSystemSessionInfo]: ...

@typing.final
class RemoteSystemSessionInvitationListener(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionInvitationListener: ...
    def __new__(cls: typing.Type[RemoteSystemSessionInvitationListener]) -> RemoteSystemSessionInvitationListener:...
    def add_invitation_received(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionInvitationListener, RemoteSystemSessionInvitationReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_invitation_received(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class RemoteSystemSessionInvitationReceivedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionInvitationReceivedEventArgs: ...
    @_property
    def invitation(self) -> typing.Optional[RemoteSystemSessionInvitation]: ...

@typing.final
class RemoteSystemSessionJoinRequest(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionJoinRequest: ...
    def accept(self) -> None: ...
    @_property
    def participant(self) -> typing.Optional[RemoteSystemSessionParticipant]: ...

@typing.final
class RemoteSystemSessionJoinRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionJoinRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    @_property
    def join_request(self) -> typing.Optional[RemoteSystemSessionJoinRequest]: ...

@typing.final
class RemoteSystemSessionJoinResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionJoinResult: ...
    @_property
    def session(self) -> typing.Optional[RemoteSystemSession]: ...
    @_property
    def status(self) -> RemoteSystemSessionJoinStatus: ...

@typing.final
class RemoteSystemSessionMessageChannel(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionMessageChannel: ...
    @typing.overload
    def __new__(cls: typing.Type[RemoteSystemSessionMessageChannel], session: typing.Optional[RemoteSystemSession], channel_name: str) -> RemoteSystemSessionMessageChannel:...
    @typing.overload
    def __new__(cls: typing.Type[RemoteSystemSessionMessageChannel], session: typing.Optional[RemoteSystemSession], channel_name: str, reliability: RemoteSystemSessionMessageChannelReliability) -> RemoteSystemSessionMessageChannel:...
    def broadcast_value_set_async(self, message_data: typing.Optional[winrt.windows.foundation.collections.ValueSet], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def send_value_set_async(self, message_data: typing.Optional[winrt.windows.foundation.collections.ValueSet], participant: typing.Optional[RemoteSystemSessionParticipant], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def send_value_set_to_participants_async(self, message_data: typing.Optional[winrt.windows.foundation.collections.ValueSet], participants: typing.Iterable[RemoteSystemSessionParticipant], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def add_value_set_received(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionMessageChannel, RemoteSystemSessionValueSetReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_value_set_received(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def session(self) -> typing.Optional[RemoteSystemSession]: ...

@typing.final
class RemoteSystemSessionOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionOptions: ...
    def __new__(cls: typing.Type[RemoteSystemSessionOptions]) -> RemoteSystemSessionOptions:...
    @_property
    def is_invite_only(self) -> bool: ...
    @is_invite_only.setter
    def is_invite_only(self, value: bool) -> None: ...

@typing.final
class RemoteSystemSessionParticipant(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionParticipant: ...
    def get_host_names(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.networking.HostName]]: ...
    @_property
    def remote_system(self) -> typing.Optional[RemoteSystem]: ...

@typing.final
class RemoteSystemSessionParticipantAddedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionParticipantAddedEventArgs: ...
    @_property
    def participant(self) -> typing.Optional[RemoteSystemSessionParticipant]: ...

@typing.final
class RemoteSystemSessionParticipantRemovedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionParticipantRemovedEventArgs: ...
    @_property
    def participant(self) -> typing.Optional[RemoteSystemSessionParticipant]: ...

@typing.final
class RemoteSystemSessionParticipantWatcher(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionParticipantWatcher: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add_added(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionParticipantWatcher, RemoteSystemSessionParticipantAddedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_added(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_enumeration_completed(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionParticipantWatcher, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_enumeration_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_removed(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionParticipantWatcher, RemoteSystemSessionParticipantRemovedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_removed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def status(self) -> RemoteSystemSessionParticipantWatcherStatus: ...

@typing.final
class RemoteSystemSessionRemovedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionRemovedEventArgs: ...
    @_property
    def session_info(self) -> typing.Optional[RemoteSystemSessionInfo]: ...

@typing.final
class RemoteSystemSessionUpdatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionUpdatedEventArgs: ...
    @_property
    def session_info(self) -> typing.Optional[RemoteSystemSessionInfo]: ...

@typing.final
class RemoteSystemSessionValueSetReceivedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionValueSetReceivedEventArgs: ...
    @_property
    def message(self) -> typing.Optional[winrt.windows.foundation.collections.ValueSet]: ...
    @_property
    def sender(self) -> typing.Optional[RemoteSystemSessionParticipant]: ...

@typing.final
class RemoteSystemSessionWatcher(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemSessionWatcher: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add_added(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionWatcher, RemoteSystemSessionAddedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_added(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_removed(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionWatcher, RemoteSystemSessionRemovedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_removed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_updated(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemSessionWatcher, RemoteSystemSessionUpdatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_updated(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def status(self) -> RemoteSystemSessionWatcherStatus: ...

@typing.final
class RemoteSystemStatusTypeFilter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemStatusTypeFilter: ...
    def __new__(cls: typing.Type[RemoteSystemStatusTypeFilter], remote_system_status_type: RemoteSystemStatusType) -> RemoteSystemStatusTypeFilter:...
    @_property
    def remote_system_status_type(self) -> RemoteSystemStatusType: ...

@typing.final
class RemoteSystemUpdatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemUpdatedEventArgs: ...
    @_property
    def remote_system(self) -> typing.Optional[RemoteSystem]: ...

@typing.final
class RemoteSystemWatcher(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemWatcher: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add_remote_system_added(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemWatcher, RemoteSystemAddedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_remote_system_added(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_remote_system_removed(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemWatcher, RemoteSystemRemovedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_remote_system_removed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_remote_system_updated(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemWatcher, RemoteSystemUpdatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_remote_system_updated(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_enumeration_completed(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemWatcher, RemoteSystemEnumerationCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_enumeration_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_error_occurred(self, handler: winrt.windows.foundation.TypedEventHandler[RemoteSystemWatcher, RemoteSystemWatcherErrorOccurredEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_error_occurred(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...

@typing.final
class RemoteSystemWatcherErrorOccurredEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemWatcherErrorOccurredEventArgs: ...
    @_property
    def error(self) -> RemoteSystemWatcherError: ...

@typing.final
class RemoteSystemWebAccountFilter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RemoteSystemWebAccountFilter: ...
    def __new__(cls: typing.Type[RemoteSystemWebAccountFilter], account: typing.Optional[winrt.windows.security.credentials.WebAccount]) -> RemoteSystemWebAccountFilter:...
    @_property
    def account(self) -> typing.Optional[winrt.windows.security.credentials.WebAccount]: ...

@typing.final
class IRemoteSystemFilter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IRemoteSystemFilter: ...

