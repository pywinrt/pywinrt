// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.UI.Core.AnimationMetrics.h"


namespace py::cpp::Windows::UI::Core::AnimationMetrics
{
    // ----- AnimationDescription class --------------------

    static PyObject* _new_AnimationDescription(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Core::AnimationMetrics::AnimationEffect>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Core::AnimationMetrics::AnimationEffectTarget>(args, 1);

                winrt::Windows::UI::Core::AnimationMetrics::AnimationDescription instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_AnimationDescription(py::wrapper::Windows::UI::Core::AnimationMetrics::AnimationDescription* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AnimationDescription_get_Animations(py::wrapper::Windows::UI::Core::AnimationMetrics::AnimationDescription* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.AnimationDescription", L"Animations"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Animations());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AnimationDescription_get_DelayLimit(py::wrapper::Windows::UI::Core::AnimationMetrics::AnimationDescription* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.AnimationDescription", L"DelayLimit"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DelayLimit());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AnimationDescription_get_StaggerDelay(py::wrapper::Windows::UI::Core::AnimationMetrics::AnimationDescription* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.AnimationDescription", L"StaggerDelay"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.StaggerDelay());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AnimationDescription_get_StaggerDelayFactor(py::wrapper::Windows::UI::Core::AnimationMetrics::AnimationDescription* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.AnimationDescription", L"StaggerDelayFactor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.StaggerDelayFactor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AnimationDescription_get_ZOrder(py::wrapper::Windows::UI::Core::AnimationMetrics::AnimationDescription* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.AnimationDescription", L"ZOrder"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ZOrder());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AnimationDescription(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Core::AnimationMetrics::AnimationDescription>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AnimationDescription(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::AnimationMetrics::AnimationDescription>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AnimationDescription[] = {
        { "_assign_array_", _assign_array_AnimationDescription, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AnimationDescription), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AnimationDescription[] = {
        { "animations", reinterpret_cast<getter>(AnimationDescription_get_Animations), nullptr, nullptr, nullptr },
        { "delay_limit", reinterpret_cast<getter>(AnimationDescription_get_DelayLimit), nullptr, nullptr, nullptr },
        { "stagger_delay", reinterpret_cast<getter>(AnimationDescription_get_StaggerDelay), nullptr, nullptr, nullptr },
        { "stagger_delay_factor", reinterpret_cast<getter>(AnimationDescription_get_StaggerDelayFactor), nullptr, nullptr, nullptr },
        { "z_order", reinterpret_cast<getter>(AnimationDescription_get_ZOrder), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AnimationDescription[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AnimationDescription) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AnimationDescription) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AnimationDescription) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AnimationDescription) },
        { },
    };

    static PyType_Spec type_spec_AnimationDescription =
    {
        "winrt._winrt_windows_ui_core_animationmetrics.AnimationDescription",
        sizeof(py::wrapper::Windows::UI::Core::AnimationMetrics::AnimationDescription),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AnimationDescription
    };

    // ----- OpacityAnimation class --------------------

    static PyObject* _new_OpacityAnimation(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::Core::AnimationMetrics::OpacityAnimation>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::Core::AnimationMetrics::OpacityAnimation>::type_name);
        return nullptr;
    }

    static void _dealloc_OpacityAnimation(py::wrapper::Windows::UI::Core::AnimationMetrics::OpacityAnimation* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* OpacityAnimation_get_FinalOpacity(py::wrapper::Windows::UI::Core::AnimationMetrics::OpacityAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.OpacityAnimation", L"FinalOpacity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FinalOpacity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* OpacityAnimation_get_InitialOpacity(py::wrapper::Windows::UI::Core::AnimationMetrics::OpacityAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.OpacityAnimation", L"InitialOpacity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.InitialOpacity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* OpacityAnimation_get_Control1(py::wrapper::Windows::UI::Core::AnimationMetrics::OpacityAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.OpacityAnimation", L"Control1"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Control1());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* OpacityAnimation_get_Control2(py::wrapper::Windows::UI::Core::AnimationMetrics::OpacityAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.OpacityAnimation", L"Control2"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Control2());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* OpacityAnimation_get_Delay(py::wrapper::Windows::UI::Core::AnimationMetrics::OpacityAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.OpacityAnimation", L"Delay"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Delay());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* OpacityAnimation_get_Duration(py::wrapper::Windows::UI::Core::AnimationMetrics::OpacityAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.OpacityAnimation", L"Duration"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Duration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* OpacityAnimation_get_Type(py::wrapper::Windows::UI::Core::AnimationMetrics::OpacityAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.OpacityAnimation", L"Type"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_OpacityAnimation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Core::AnimationMetrics::OpacityAnimation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_OpacityAnimation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::AnimationMetrics::OpacityAnimation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_OpacityAnimation[] = {
        { "_assign_array_", _assign_array_OpacityAnimation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_OpacityAnimation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_OpacityAnimation[] = {
        { "final_opacity", reinterpret_cast<getter>(OpacityAnimation_get_FinalOpacity), nullptr, nullptr, nullptr },
        { "initial_opacity", reinterpret_cast<getter>(OpacityAnimation_get_InitialOpacity), nullptr, nullptr, nullptr },
        { "control1", reinterpret_cast<getter>(OpacityAnimation_get_Control1), nullptr, nullptr, nullptr },
        { "control2", reinterpret_cast<getter>(OpacityAnimation_get_Control2), nullptr, nullptr, nullptr },
        { "delay", reinterpret_cast<getter>(OpacityAnimation_get_Delay), nullptr, nullptr, nullptr },
        { "duration", reinterpret_cast<getter>(OpacityAnimation_get_Duration), nullptr, nullptr, nullptr },
        { "type", reinterpret_cast<getter>(OpacityAnimation_get_Type), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_OpacityAnimation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_OpacityAnimation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_OpacityAnimation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_OpacityAnimation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_OpacityAnimation) },
        { },
    };

    static PyType_Spec type_spec_OpacityAnimation =
    {
        "winrt._winrt_windows_ui_core_animationmetrics.OpacityAnimation",
        sizeof(py::wrapper::Windows::UI::Core::AnimationMetrics::OpacityAnimation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_OpacityAnimation
    };

    // ----- PropertyAnimation class --------------------

    static PyObject* _new_PropertyAnimation(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::Core::AnimationMetrics::PropertyAnimation>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::Core::AnimationMetrics::PropertyAnimation>::type_name);
        return nullptr;
    }

    static void _dealloc_PropertyAnimation(py::wrapper::Windows::UI::Core::AnimationMetrics::PropertyAnimation* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PropertyAnimation_get_Control1(py::wrapper::Windows::UI::Core::AnimationMetrics::PropertyAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.PropertyAnimation", L"Control1"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Control1());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PropertyAnimation_get_Control2(py::wrapper::Windows::UI::Core::AnimationMetrics::PropertyAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.PropertyAnimation", L"Control2"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Control2());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PropertyAnimation_get_Delay(py::wrapper::Windows::UI::Core::AnimationMetrics::PropertyAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.PropertyAnimation", L"Delay"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Delay());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PropertyAnimation_get_Duration(py::wrapper::Windows::UI::Core::AnimationMetrics::PropertyAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.PropertyAnimation", L"Duration"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Duration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PropertyAnimation_get_Type(py::wrapper::Windows::UI::Core::AnimationMetrics::PropertyAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.PropertyAnimation", L"Type"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PropertyAnimation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Core::AnimationMetrics::PropertyAnimation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PropertyAnimation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::AnimationMetrics::PropertyAnimation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PropertyAnimation[] = {
        { "_assign_array_", _assign_array_PropertyAnimation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PropertyAnimation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PropertyAnimation[] = {
        { "control1", reinterpret_cast<getter>(PropertyAnimation_get_Control1), nullptr, nullptr, nullptr },
        { "control2", reinterpret_cast<getter>(PropertyAnimation_get_Control2), nullptr, nullptr, nullptr },
        { "delay", reinterpret_cast<getter>(PropertyAnimation_get_Delay), nullptr, nullptr, nullptr },
        { "duration", reinterpret_cast<getter>(PropertyAnimation_get_Duration), nullptr, nullptr, nullptr },
        { "type", reinterpret_cast<getter>(PropertyAnimation_get_Type), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PropertyAnimation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PropertyAnimation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PropertyAnimation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PropertyAnimation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PropertyAnimation) },
        { },
    };

    static PyType_Spec type_spec_PropertyAnimation =
    {
        "winrt._winrt_windows_ui_core_animationmetrics.PropertyAnimation",
        sizeof(py::wrapper::Windows::UI::Core::AnimationMetrics::PropertyAnimation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PropertyAnimation
    };

    // ----- ScaleAnimation class --------------------

    static PyObject* _new_ScaleAnimation(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::Core::AnimationMetrics::ScaleAnimation>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::Core::AnimationMetrics::ScaleAnimation>::type_name);
        return nullptr;
    }

    static void _dealloc_ScaleAnimation(py::wrapper::Windows::UI::Core::AnimationMetrics::ScaleAnimation* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ScaleAnimation_get_Control1(py::wrapper::Windows::UI::Core::AnimationMetrics::ScaleAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.ScaleAnimation", L"Control1"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Control1());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ScaleAnimation_get_Control2(py::wrapper::Windows::UI::Core::AnimationMetrics::ScaleAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.ScaleAnimation", L"Control2"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Control2());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ScaleAnimation_get_Delay(py::wrapper::Windows::UI::Core::AnimationMetrics::ScaleAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.ScaleAnimation", L"Delay"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Delay());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ScaleAnimation_get_Duration(py::wrapper::Windows::UI::Core::AnimationMetrics::ScaleAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.ScaleAnimation", L"Duration"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Duration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ScaleAnimation_get_Type(py::wrapper::Windows::UI::Core::AnimationMetrics::ScaleAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.ScaleAnimation", L"Type"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ScaleAnimation_get_FinalScaleX(py::wrapper::Windows::UI::Core::AnimationMetrics::ScaleAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.ScaleAnimation", L"FinalScaleX"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FinalScaleX());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ScaleAnimation_get_FinalScaleY(py::wrapper::Windows::UI::Core::AnimationMetrics::ScaleAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.ScaleAnimation", L"FinalScaleY"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FinalScaleY());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ScaleAnimation_get_InitialScaleX(py::wrapper::Windows::UI::Core::AnimationMetrics::ScaleAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.ScaleAnimation", L"InitialScaleX"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.InitialScaleX());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ScaleAnimation_get_InitialScaleY(py::wrapper::Windows::UI::Core::AnimationMetrics::ScaleAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.ScaleAnimation", L"InitialScaleY"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.InitialScaleY());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ScaleAnimation_get_NormalizedOrigin(py::wrapper::Windows::UI::Core::AnimationMetrics::ScaleAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.ScaleAnimation", L"NormalizedOrigin"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.NormalizedOrigin());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ScaleAnimation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Core::AnimationMetrics::ScaleAnimation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ScaleAnimation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::AnimationMetrics::ScaleAnimation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ScaleAnimation[] = {
        { "_assign_array_", _assign_array_ScaleAnimation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ScaleAnimation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ScaleAnimation[] = {
        { "control1", reinterpret_cast<getter>(ScaleAnimation_get_Control1), nullptr, nullptr, nullptr },
        { "control2", reinterpret_cast<getter>(ScaleAnimation_get_Control2), nullptr, nullptr, nullptr },
        { "delay", reinterpret_cast<getter>(ScaleAnimation_get_Delay), nullptr, nullptr, nullptr },
        { "duration", reinterpret_cast<getter>(ScaleAnimation_get_Duration), nullptr, nullptr, nullptr },
        { "type", reinterpret_cast<getter>(ScaleAnimation_get_Type), nullptr, nullptr, nullptr },
        { "final_scale_x", reinterpret_cast<getter>(ScaleAnimation_get_FinalScaleX), nullptr, nullptr, nullptr },
        { "final_scale_y", reinterpret_cast<getter>(ScaleAnimation_get_FinalScaleY), nullptr, nullptr, nullptr },
        { "initial_scale_x", reinterpret_cast<getter>(ScaleAnimation_get_InitialScaleX), nullptr, nullptr, nullptr },
        { "initial_scale_y", reinterpret_cast<getter>(ScaleAnimation_get_InitialScaleY), nullptr, nullptr, nullptr },
        { "normalized_origin", reinterpret_cast<getter>(ScaleAnimation_get_NormalizedOrigin), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ScaleAnimation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ScaleAnimation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ScaleAnimation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ScaleAnimation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ScaleAnimation) },
        { },
    };

    static PyType_Spec type_spec_ScaleAnimation =
    {
        "winrt._winrt_windows_ui_core_animationmetrics.ScaleAnimation",
        sizeof(py::wrapper::Windows::UI::Core::AnimationMetrics::ScaleAnimation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ScaleAnimation
    };

    // ----- TranslationAnimation class --------------------

    static PyObject* _new_TranslationAnimation(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::Core::AnimationMetrics::TranslationAnimation>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::Core::AnimationMetrics::TranslationAnimation>::type_name);
        return nullptr;
    }

    static void _dealloc_TranslationAnimation(py::wrapper::Windows::UI::Core::AnimationMetrics::TranslationAnimation* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* TranslationAnimation_get_Control1(py::wrapper::Windows::UI::Core::AnimationMetrics::TranslationAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.TranslationAnimation", L"Control1"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Control1());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TranslationAnimation_get_Control2(py::wrapper::Windows::UI::Core::AnimationMetrics::TranslationAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.TranslationAnimation", L"Control2"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Control2());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TranslationAnimation_get_Delay(py::wrapper::Windows::UI::Core::AnimationMetrics::TranslationAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.TranslationAnimation", L"Delay"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Delay());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TranslationAnimation_get_Duration(py::wrapper::Windows::UI::Core::AnimationMetrics::TranslationAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.TranslationAnimation", L"Duration"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Duration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* TranslationAnimation_get_Type(py::wrapper::Windows::UI::Core::AnimationMetrics::TranslationAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.TranslationAnimation", L"Type"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_TranslationAnimation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Core::AnimationMetrics::TranslationAnimation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_TranslationAnimation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::AnimationMetrics::TranslationAnimation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TranslationAnimation[] = {
        { "_assign_array_", _assign_array_TranslationAnimation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_TranslationAnimation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_TranslationAnimation[] = {
        { "control1", reinterpret_cast<getter>(TranslationAnimation_get_Control1), nullptr, nullptr, nullptr },
        { "control2", reinterpret_cast<getter>(TranslationAnimation_get_Control2), nullptr, nullptr, nullptr },
        { "delay", reinterpret_cast<getter>(TranslationAnimation_get_Delay), nullptr, nullptr, nullptr },
        { "duration", reinterpret_cast<getter>(TranslationAnimation_get_Duration), nullptr, nullptr, nullptr },
        { "type", reinterpret_cast<getter>(TranslationAnimation_get_Type), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_TranslationAnimation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_TranslationAnimation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_TranslationAnimation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_TranslationAnimation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_TranslationAnimation) },
        { },
    };

    static PyType_Spec type_spec_TranslationAnimation =
    {
        "winrt._winrt_windows_ui_core_animationmetrics.TranslationAnimation",
        sizeof(py::wrapper::Windows::UI::Core::AnimationMetrics::TranslationAnimation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TranslationAnimation
    };

    // ----- IPropertyAnimation interface --------------------

    static PyObject* _new_IPropertyAnimation(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::Core::AnimationMetrics::IPropertyAnimation>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::Core::AnimationMetrics::IPropertyAnimation>::type_name);
        return nullptr;
    }

    static void _dealloc_IPropertyAnimation(py::wrapper::Windows::UI::Core::AnimationMetrics::IPropertyAnimation* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IPropertyAnimation_get_Control1(py::wrapper::Windows::UI::Core::AnimationMetrics::IPropertyAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.IPropertyAnimation", L"Control1"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Control1());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IPropertyAnimation_get_Control2(py::wrapper::Windows::UI::Core::AnimationMetrics::IPropertyAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.IPropertyAnimation", L"Control2"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Control2());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IPropertyAnimation_get_Delay(py::wrapper::Windows::UI::Core::AnimationMetrics::IPropertyAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.IPropertyAnimation", L"Delay"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Delay());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IPropertyAnimation_get_Duration(py::wrapper::Windows::UI::Core::AnimationMetrics::IPropertyAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.IPropertyAnimation", L"Duration"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Duration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IPropertyAnimation_get_Type(py::wrapper::Windows::UI::Core::AnimationMetrics::IPropertyAnimation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Core.AnimationMetrics.IPropertyAnimation", L"Type"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_IPropertyAnimation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Core::AnimationMetrics::IPropertyAnimation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IPropertyAnimation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Core::AnimationMetrics::IPropertyAnimation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IPropertyAnimation[] = {
        { "_assign_array_", _assign_array_IPropertyAnimation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IPropertyAnimation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IPropertyAnimation[] = {
        { "control1", reinterpret_cast<getter>(IPropertyAnimation_get_Control1), nullptr, nullptr, nullptr },
        { "control2", reinterpret_cast<getter>(IPropertyAnimation_get_Control2), nullptr, nullptr, nullptr },
        { "delay", reinterpret_cast<getter>(IPropertyAnimation_get_Delay), nullptr, nullptr, nullptr },
        { "duration", reinterpret_cast<getter>(IPropertyAnimation_get_Duration), nullptr, nullptr, nullptr },
        { "type", reinterpret_cast<getter>(IPropertyAnimation_get_Type), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IPropertyAnimation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IPropertyAnimation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IPropertyAnimation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IPropertyAnimation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IPropertyAnimation) },
        { },
    };

    static PyType_Spec type_spec_IPropertyAnimation =
    {
        "winrt._winrt_windows_ui_core_animationmetrics.IPropertyAnimation",
        sizeof(py::wrapper::Windows::UI::Core::AnimationMetrics::IPropertyAnimation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IPropertyAnimation
    };

    // ----- Windows.UI.Core.AnimationMetrics Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::UI::Core::AnimationMetrics");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_ui_core_animationmetrics",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::UI::Core::AnimationMetrics

PyMODINIT_FUNC PyInit__winrt_windows_ui_core_animationmetrics(void) noexcept
{
    using namespace py::cpp::Windows::UI::Core::AnimationMetrics;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AnimationDescription, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_OpacityAnimation, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PropertyAnimation, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ScaleAnimation, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_TranslationAnimation, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_IPropertyAnimation, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
