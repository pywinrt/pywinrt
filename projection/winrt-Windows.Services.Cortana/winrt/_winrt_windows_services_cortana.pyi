# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.datatransfer as windows_applicationmodel_datatransfer
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.storage.streams as windows_storage_streams
import winrt.windows.system as windows_system

from winrt.windows.services.cortana import CortanaPermission, CortanaPermissionsChangeResult

Self = typing.TypeVar('Self')

@typing.final
class CortanaActionableInsights_Static(type):
    # @deprecated("CortanaActionableInsights is deprecated and might not work on all platforms. For more info, see MSDN.")
    def get_default(cls) -> CortanaActionableInsights: ...
    # @deprecated("CortanaActionableInsights is deprecated and might not work on all platforms. For more info, see MSDN.")
    def get_for_user(cls, user: windows_system.User, /) -> CortanaActionableInsights: ...

@typing.final
class CortanaActionableInsights(winrt.system.Object, metaclass=CortanaActionableInsights_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CortanaActionableInsights: ...
    # @deprecated("CortanaActionableInsights is deprecated and might not work on all platforms. For more info, see MSDN.")
    def is_available_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # @deprecated("CortanaActionableInsights is deprecated and might not work on all platforms. For more info, see MSDN.")
    def show_insights_async(self, datapackage: windows_applicationmodel_datatransfer.DataPackage, /) -> windows_foundation.IAsyncAction: ...
    # @deprecated("CortanaActionableInsights is deprecated and might not work on all platforms. For more info, see MSDN.")
    def show_insights_for_image_async(self, image_stream: windows_storage_streams.IRandomAccessStreamReference, /) -> windows_foundation.IAsyncAction: ...
    # @deprecated("CortanaActionableInsights is deprecated and might not work on all platforms. For more info, see MSDN.")
    def show_insights_for_image_with_options_async(self, image_stream: windows_storage_streams.IRandomAccessStreamReference, options: CortanaActionableInsightsOptions, /) -> windows_foundation.IAsyncAction: ...
    # @deprecated("CortanaActionableInsights is deprecated and might not work on all platforms. For more info, see MSDN.")
    def show_insights_for_text_async(self, text: str, /) -> windows_foundation.IAsyncAction: ...
    # @deprecated("CortanaActionableInsights is deprecated and might not work on all platforms. For more info, see MSDN.")
    def show_insights_for_text_with_options_async(self, text: str, options: CortanaActionableInsightsOptions, /) -> windows_foundation.IAsyncAction: ...
    # @deprecated("CortanaActionableInsights is deprecated and might not work on all platforms. For more info, see MSDN.")
    def show_insights_with_options_async(self, datapackage: windows_applicationmodel_datatransfer.DataPackage, options: CortanaActionableInsightsOptions, /) -> windows_foundation.IAsyncAction: ...
    @_property
    def user(self) -> windows_system.User: ...

@typing.final
class CortanaActionableInsightsOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CortanaActionableInsightsOptions: ...
    def __new__(cls: typing.Type[CortanaActionableInsightsOptions]) -> CortanaActionableInsightsOptions: ...
    @_property
    def surrounding_text(self) -> str: ...
    @surrounding_text.setter
    def surrounding_text(self, value: str) -> None: ...
    @_property
    def content_source_web_link(self) -> windows_foundation.Uri: ...
    @content_source_web_link.setter
    def content_source_web_link(self, value: windows_foundation.Uri) -> None: ...

@typing.final
class CortanaPermissionsManager_Static(type):
    # @deprecated("ICortanaPermissionsManagerStatics is deprecated and might not work on all platforms. For more info, see MSDN.")
    def get_default(cls) -> CortanaPermissionsManager: ...

@typing.final
class CortanaPermissionsManager(winrt.system.Object, metaclass=CortanaPermissionsManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CortanaPermissionsManager: ...
    # @deprecated("ICortanaPermissionsManager is deprecated and might not work on all platforms. For more info, see MSDN.")
    def are_permissions_granted_async(self, permissions: typing.Iterable[CortanaPermission], /) -> windows_foundation.IAsyncOperation[bool]: ...
    # @deprecated("ICortanaPermissionsManager is deprecated and might not work on all platforms. For more info, see MSDN.")
    def grant_permissions_async(self, permissions: typing.Iterable[CortanaPermission], /) -> windows_foundation.IAsyncOperation[CortanaPermissionsChangeResult]: ...
    # @deprecated("ICortanaPermissionsManager is deprecated and might not work on all platforms. For more info, see MSDN.")
    def is_supported(self) -> bool: ...
    # @deprecated("ICortanaPermissionsManager is deprecated and might not work on all platforms. For more info, see MSDN.")
    def revoke_permissions_async(self, permissions: typing.Iterable[CortanaPermission], /) -> windows_foundation.IAsyncOperation[CortanaPermissionsChangeResult]: ...

@typing.final
class CortanaSettings_Static(type):
    # @deprecated("ICortanaSettingsStatics is deprecated and might not work on all platforms. For more info, see MSDN.")
    def get_default(cls) -> CortanaSettings: ...
    # @deprecated("ICortanaSettingsStatics is deprecated and might not work on all platforms. For more info, see MSDN.")
    def is_supported(cls) -> bool: ...

@typing.final
class CortanaSettings(winrt.system.Object, metaclass=CortanaSettings_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CortanaSettings: ...
    @_property
    def is_voice_activation_enabled(self) -> bool: ...
    @is_voice_activation_enabled.setter
    def is_voice_activation_enabled(self, value: bool) -> None: ...
    @_property
    def has_user_consent_to_voice_activation(self) -> bool: ...

