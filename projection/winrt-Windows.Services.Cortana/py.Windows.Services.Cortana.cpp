// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Services.Cortana.h"


namespace py::cpp::Windows::Services::Cortana
{
    // ----- CortanaActionableInsights class --------------------

    static PyObject* _new_CortanaActionableInsights(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Services::Cortana::CortanaActionableInsights>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Services::Cortana::CortanaActionableInsights>::type_name);
        return nullptr;
    }

    static void _dealloc_CortanaActionableInsights(py::wrapper::Windows::Services::Cortana::CortanaActionableInsights* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CortanaActionableInsights_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Cortana.CortanaActionableInsights", L"GetDefault", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Services::Cortana::CortanaActionableInsights::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CortanaActionableInsights_GetForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Cortana.CortanaActionableInsights", L"GetForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::Services::Cortana::CortanaActionableInsights::GetForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CortanaActionableInsights_IsAvailableAsync(py::wrapper::Windows::Services::Cortana::CortanaActionableInsights* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Cortana.CortanaActionableInsights", L"IsAvailableAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.IsAvailableAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CortanaActionableInsights_ShowInsightsAsync(py::wrapper::Windows::Services::Cortana::CortanaActionableInsights* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Cortana.CortanaActionableInsights", L"ShowInsightsAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::DataTransfer::DataPackage>(args, 0);

                return py::convert(self->obj.ShowInsightsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Cortana.CortanaActionableInsights", L"ShowInsightsAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::DataTransfer::DataPackage>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Services::Cortana::CortanaActionableInsightsOptions>(args, 1);

                return py::convert(self->obj.ShowInsightsAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CortanaActionableInsights_ShowInsightsForImageAsync(py::wrapper::Windows::Services::Cortana::CortanaActionableInsights* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Cortana.CortanaActionableInsights", L"ShowInsightsForImageAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStreamReference>(args, 0);

                return py::convert(self->obj.ShowInsightsForImageAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Cortana.CortanaActionableInsights", L"ShowInsightsForImageAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStreamReference>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Services::Cortana::CortanaActionableInsightsOptions>(args, 1);

                return py::convert(self->obj.ShowInsightsForImageAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CortanaActionableInsights_ShowInsightsForTextAsync(py::wrapper::Windows::Services::Cortana::CortanaActionableInsights* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Cortana.CortanaActionableInsights", L"ShowInsightsForTextAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ShowInsightsForTextAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Cortana.CortanaActionableInsights", L"ShowInsightsForTextAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Services::Cortana::CortanaActionableInsightsOptions>(args, 1);

                return py::convert(self->obj.ShowInsightsForTextAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CortanaActionableInsights_get_User(py::wrapper::Windows::Services::Cortana::CortanaActionableInsights* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Cortana.CortanaActionableInsights", L"User"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_CortanaActionableInsights(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Cortana::CortanaActionableInsights>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CortanaActionableInsights(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Cortana::CortanaActionableInsights>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CortanaActionableInsights[] = {
        { "is_available_async", reinterpret_cast<PyCFunction>(CortanaActionableInsights_IsAvailableAsync), METH_VARARGS, nullptr },
        { "show_insights_async", reinterpret_cast<PyCFunction>(CortanaActionableInsights_ShowInsightsAsync), METH_VARARGS, nullptr },
        { "show_insights_for_image_async", reinterpret_cast<PyCFunction>(CortanaActionableInsights_ShowInsightsForImageAsync), METH_VARARGS, nullptr },
        { "show_insights_for_text_async", reinterpret_cast<PyCFunction>(CortanaActionableInsights_ShowInsightsForTextAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_CortanaActionableInsights, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CortanaActionableInsights), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CortanaActionableInsights[] = {
        { "user", reinterpret_cast<getter>(CortanaActionableInsights_get_User), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CortanaActionableInsights[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CortanaActionableInsights) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CortanaActionableInsights) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CortanaActionableInsights) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CortanaActionableInsights) },
        { },
    };

    static PyType_Spec type_spec_CortanaActionableInsights =
    {
        "winrt._winrt_windows_services_cortana.CortanaActionableInsights",
        sizeof(py::wrapper::Windows::Services::Cortana::CortanaActionableInsights),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CortanaActionableInsights
    };

    static PyGetSetDef getset_CortanaActionableInsights_Static[] = {
        { }
    };

    static PyMethodDef methods_CortanaActionableInsights_Static[] = {
        { "get_default", reinterpret_cast<PyCFunction>(CortanaActionableInsights_GetDefault), METH_VARARGS, nullptr },
        { "get_for_user", reinterpret_cast<PyCFunction>(CortanaActionableInsights_GetForUser), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_CortanaActionableInsights_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_CortanaActionableInsights_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_CortanaActionableInsights_Static) },
        { }
    };

    static PyType_Spec type_spec_CortanaActionableInsights_Static =
    {
        "winrt._winrt_windows_services_cortana.CortanaActionableInsights_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_CortanaActionableInsights_Static
    };

    // ----- CortanaActionableInsightsOptions class --------------------

    static PyObject* _new_CortanaActionableInsightsOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Services::Cortana::CortanaActionableInsightsOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CortanaActionableInsightsOptions(py::wrapper::Windows::Services::Cortana::CortanaActionableInsightsOptions* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CortanaActionableInsightsOptions_get_SurroundingText(py::wrapper::Windows::Services::Cortana::CortanaActionableInsightsOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Cortana.CortanaActionableInsightsOptions", L"SurroundingText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SurroundingText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CortanaActionableInsightsOptions_put_SurroundingText(py::wrapper::Windows::Services::Cortana::CortanaActionableInsightsOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Cortana.CortanaActionableInsightsOptions", L"SurroundingText"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.SurroundingText(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CortanaActionableInsightsOptions_get_ContentSourceWebLink(py::wrapper::Windows::Services::Cortana::CortanaActionableInsightsOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Cortana.CortanaActionableInsightsOptions", L"ContentSourceWebLink"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ContentSourceWebLink());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CortanaActionableInsightsOptions_put_ContentSourceWebLink(py::wrapper::Windows::Services::Cortana::CortanaActionableInsightsOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Cortana.CortanaActionableInsightsOptions", L"ContentSourceWebLink"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.ContentSourceWebLink(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_CortanaActionableInsightsOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Cortana::CortanaActionableInsightsOptions>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CortanaActionableInsightsOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Cortana::CortanaActionableInsightsOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CortanaActionableInsightsOptions[] = {
        { "_assign_array_", _assign_array_CortanaActionableInsightsOptions, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CortanaActionableInsightsOptions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CortanaActionableInsightsOptions[] = {
        { "surrounding_text", reinterpret_cast<getter>(CortanaActionableInsightsOptions_get_SurroundingText), reinterpret_cast<setter>(CortanaActionableInsightsOptions_put_SurroundingText), nullptr, nullptr },
        { "content_source_web_link", reinterpret_cast<getter>(CortanaActionableInsightsOptions_get_ContentSourceWebLink), reinterpret_cast<setter>(CortanaActionableInsightsOptions_put_ContentSourceWebLink), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CortanaActionableInsightsOptions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CortanaActionableInsightsOptions) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CortanaActionableInsightsOptions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CortanaActionableInsightsOptions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CortanaActionableInsightsOptions) },
        { },
    };

    static PyType_Spec type_spec_CortanaActionableInsightsOptions =
    {
        "winrt._winrt_windows_services_cortana.CortanaActionableInsightsOptions",
        sizeof(py::wrapper::Windows::Services::Cortana::CortanaActionableInsightsOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CortanaActionableInsightsOptions
    };

    // ----- CortanaPermissionsManager class --------------------

    static PyObject* _new_CortanaPermissionsManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Services::Cortana::CortanaPermissionsManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Services::Cortana::CortanaPermissionsManager>::type_name);
        return nullptr;
    }

    static void _dealloc_CortanaPermissionsManager(py::wrapper::Windows::Services::Cortana::CortanaPermissionsManager* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CortanaPermissionsManager_ArePermissionsGrantedAsync(py::wrapper::Windows::Services::Cortana::CortanaPermissionsManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Cortana.CortanaPermissionsManager", L"ArePermissionsGrantedAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Services::Cortana::CortanaPermission>>(args, 0);

                return py::convert(self->obj.ArePermissionsGrantedAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CortanaPermissionsManager_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Cortana.CortanaPermissionsManager", L"GetDefault", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Services::Cortana::CortanaPermissionsManager::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CortanaPermissionsManager_GrantPermissionsAsync(py::wrapper::Windows::Services::Cortana::CortanaPermissionsManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Cortana.CortanaPermissionsManager", L"GrantPermissionsAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Services::Cortana::CortanaPermission>>(args, 0);

                return py::convert(self->obj.GrantPermissionsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CortanaPermissionsManager_IsSupported(py::wrapper::Windows::Services::Cortana::CortanaPermissionsManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Cortana.CortanaPermissionsManager", L"IsSupported", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.IsSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CortanaPermissionsManager_RevokePermissionsAsync(py::wrapper::Windows::Services::Cortana::CortanaPermissionsManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Cortana.CortanaPermissionsManager", L"RevokePermissionsAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Services::Cortana::CortanaPermission>>(args, 0);

                return py::convert(self->obj.RevokePermissionsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_CortanaPermissionsManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Cortana::CortanaPermissionsManager>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CortanaPermissionsManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Cortana::CortanaPermissionsManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CortanaPermissionsManager[] = {
        { "are_permissions_granted_async", reinterpret_cast<PyCFunction>(CortanaPermissionsManager_ArePermissionsGrantedAsync), METH_VARARGS, nullptr },
        { "grant_permissions_async", reinterpret_cast<PyCFunction>(CortanaPermissionsManager_GrantPermissionsAsync), METH_VARARGS, nullptr },
        { "is_supported", reinterpret_cast<PyCFunction>(CortanaPermissionsManager_IsSupported), METH_VARARGS, nullptr },
        { "revoke_permissions_async", reinterpret_cast<PyCFunction>(CortanaPermissionsManager_RevokePermissionsAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_CortanaPermissionsManager, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CortanaPermissionsManager), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CortanaPermissionsManager[] = {
        { }
    };

    static PyType_Slot _type_slots_CortanaPermissionsManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CortanaPermissionsManager) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CortanaPermissionsManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CortanaPermissionsManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CortanaPermissionsManager) },
        { },
    };

    static PyType_Spec type_spec_CortanaPermissionsManager =
    {
        "winrt._winrt_windows_services_cortana.CortanaPermissionsManager",
        sizeof(py::wrapper::Windows::Services::Cortana::CortanaPermissionsManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CortanaPermissionsManager
    };

    static PyGetSetDef getset_CortanaPermissionsManager_Static[] = {
        { }
    };

    static PyMethodDef methods_CortanaPermissionsManager_Static[] = {
        { "get_default", reinterpret_cast<PyCFunction>(CortanaPermissionsManager_GetDefault), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_CortanaPermissionsManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_CortanaPermissionsManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_CortanaPermissionsManager_Static) },
        { }
    };

    static PyType_Spec type_spec_CortanaPermissionsManager_Static =
    {
        "winrt._winrt_windows_services_cortana.CortanaPermissionsManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_CortanaPermissionsManager_Static
    };

    // ----- CortanaSettings class --------------------

    static PyObject* _new_CortanaSettings(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Services::Cortana::CortanaSettings>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Services::Cortana::CortanaSettings>::type_name);
        return nullptr;
    }

    static void _dealloc_CortanaSettings(py::wrapper::Windows::Services::Cortana::CortanaSettings* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CortanaSettings_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Cortana.CortanaSettings", L"GetDefault", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Services::Cortana::CortanaSettings::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CortanaSettings_IsSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Services.Cortana.CortanaSettings", L"IsSupported", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Services::Cortana::CortanaSettings::IsSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CortanaSettings_get_IsVoiceActivationEnabled(py::wrapper::Windows::Services::Cortana::CortanaSettings* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Cortana.CortanaSettings", L"IsVoiceActivationEnabled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsVoiceActivationEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CortanaSettings_put_IsVoiceActivationEnabled(py::wrapper::Windows::Services::Cortana::CortanaSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Cortana.CortanaSettings", L"IsVoiceActivationEnabled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsVoiceActivationEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CortanaSettings_get_HasUserConsentToVoiceActivation(py::wrapper::Windows::Services::Cortana::CortanaSettings* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Services.Cortana.CortanaSettings", L"HasUserConsentToVoiceActivation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.HasUserConsentToVoiceActivation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_CortanaSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Services::Cortana::CortanaSettings>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CortanaSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Cortana::CortanaSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CortanaSettings[] = {
        { "_assign_array_", _assign_array_CortanaSettings, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CortanaSettings), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CortanaSettings[] = {
        { "is_voice_activation_enabled", reinterpret_cast<getter>(CortanaSettings_get_IsVoiceActivationEnabled), reinterpret_cast<setter>(CortanaSettings_put_IsVoiceActivationEnabled), nullptr, nullptr },
        { "has_user_consent_to_voice_activation", reinterpret_cast<getter>(CortanaSettings_get_HasUserConsentToVoiceActivation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CortanaSettings[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CortanaSettings) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CortanaSettings) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CortanaSettings) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CortanaSettings) },
        { },
    };

    static PyType_Spec type_spec_CortanaSettings =
    {
        "winrt._winrt_windows_services_cortana.CortanaSettings",
        sizeof(py::wrapper::Windows::Services::Cortana::CortanaSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CortanaSettings
    };

    static PyGetSetDef getset_CortanaSettings_Static[] = {
        { }
    };

    static PyMethodDef methods_CortanaSettings_Static[] = {
        { "get_default", reinterpret_cast<PyCFunction>(CortanaSettings_GetDefault), METH_VARARGS, nullptr },
        { "is_supported", reinterpret_cast<PyCFunction>(CortanaSettings_IsSupported), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_CortanaSettings_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_CortanaSettings_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_CortanaSettings_Static) },
        { }
    };

    static PyType_Spec type_spec_CortanaSettings_Static =
    {
        "winrt._winrt_windows_services_cortana.CortanaSettings_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_CortanaSettings_Static
    };

    // ----- Windows.Services.Cortana Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Services::Cortana");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_services_cortana",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Services::Cortana

PyMODINIT_FUNC PyInit__winrt_windows_services_cortana(void) noexcept
{
    using namespace py::cpp::Windows::Services::Cortana;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_CortanaActionableInsights_Static{PyType_FromSpec(&type_spec_CortanaActionableInsights_Static)};
    if (!type_CortanaActionableInsights_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CortanaActionableInsights, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_CortanaActionableInsights_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CortanaActionableInsightsOptions, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_CortanaPermissionsManager_Static{PyType_FromSpec(&type_spec_CortanaPermissionsManager_Static)};
    if (!type_CortanaPermissionsManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CortanaPermissionsManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_CortanaPermissionsManager_Static.get())) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_CortanaSettings_Static{PyType_FromSpec(&type_spec_CortanaSettings_Static)};
    if (!type_CortanaSettings_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CortanaSettings, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_CortanaSettings_Static.get())) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
