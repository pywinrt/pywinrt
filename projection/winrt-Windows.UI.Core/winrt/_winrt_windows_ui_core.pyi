# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.system
import winrt.windows.ui
import winrt.windows.ui.composition
import winrt.windows.ui.input
import winrt.windows.ui.popups

from winrt.windows.ui.core import AppViewBackButtonVisibility, CoreAcceleratorKeyEventType, CoreCursorType, CoreDispatcherPriority, CoreIndependentInputFilters, CoreInputDeviceTypes, CoreProcessEventsOption, CoreProximityEvaluationScore, CoreVirtualKeyStates, CoreWindowActivationMode, CoreWindowActivationState, CoreWindowFlowDirection
from winrt.windows.ui.core import DispatchedHandler, IdleDispatchedHandler

Self = typing.TypeVar('Self')

@typing.final
class CorePhysicalKeyStatus:
    repeat_count: winrt.system.UInt32
    scan_code: winrt.system.UInt32
    is_extended_key: bool
    is_menu_key_down: bool
    was_key_down: bool
    is_key_released: bool
    def __init__(self, repeat_count: winrt.system.UInt32, scan_code: winrt.system.UInt32, is_extended_key: bool, is_menu_key_down: bool, was_key_down: bool, is_key_released: bool) -> None: ...

@typing.final
class CoreProximityEvaluation:
    score: winrt.system.Int32
    adjusted_point: winrt.windows.foundation.Point
    def __init__(self, score: winrt.system.Int32, adjusted_point: winrt.windows.foundation.Point) -> None: ...

@typing.final
class AcceleratorKeyEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AcceleratorKeyEventArgs: ...
    @_property
    def event_type(self) -> CoreAcceleratorKeyEventType: ...
    @_property
    def key_status(self) -> CorePhysicalKeyStatus: ...
    @_property
    def virtual_key(self) -> winrt.windows.system.VirtualKey: ...
    @_property
    def device_id(self) -> str: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class AutomationProviderRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AutomationProviderRequestedEventArgs: ...
    @_property
    def automation_provider(self) -> typing.Optional[winrt.system.Object]: ...
    @automation_provider.setter
    def automation_provider(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class BackRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackRequestedEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class CharacterReceivedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CharacterReceivedEventArgs: ...
    @_property
    def key_code(self) -> winrt.system.UInt32: ...
    @_property
    def key_status(self) -> CorePhysicalKeyStatus: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class ClosestInteractiveBoundsRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ClosestInteractiveBoundsRequestedEventArgs: ...
    @_property
    def closest_interactive_bounds(self) -> winrt.windows.foundation.Rect: ...
    @closest_interactive_bounds.setter
    def closest_interactive_bounds(self, value: winrt.windows.foundation.Rect) -> None: ...
    @_property
    def pointer_position(self) -> winrt.windows.foundation.Point: ...
    @_property
    def search_bounds(self) -> winrt.windows.foundation.Rect: ...

@typing.final
class CoreAcceleratorKeys(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreAcceleratorKeys: ...
    def add_accelerator_key_activated(self, handler: winrt.windows.foundation.TypedEventHandler[CoreDispatcher, AcceleratorKeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_accelerator_key_activated(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class CoreComponentInputSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreComponentInputSource: ...
    def get_current_key_event_device_id(self) -> str: ...
    def get_current_key_state(self, virtual_key: winrt.windows.system.VirtualKey, /) -> CoreVirtualKeyStates: ...
    def release_pointer_capture(self) -> None: ...
    def set_pointer_capture(self) -> None: ...
    def add_input_enabled(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, InputEnabledEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_input_enabled(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_capture_lost(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_capture_lost(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_entered(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_entered(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_exited(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_exited(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_moved(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_moved(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_pressed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_pressed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_released(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_wheel_changed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_wheel_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_character_received(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, CharacterReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_character_received(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_key_down(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, KeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_key_down(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_key_up(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, KeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_key_up(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_got_focus(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, CoreWindowEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_got_focus(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_lost_focus(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, CoreWindowEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_lost_focus(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_touch_hit_testing(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, TouchHitTestingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_touch_hit_testing(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_closest_interactive_bounds_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CoreComponentInputSource, ClosestInteractiveBoundsRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closest_interactive_bounds_requested(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def has_focus(self) -> bool: ...
    @_property
    def is_input_enabled(self) -> bool: ...
    @is_input_enabled.setter
    def is_input_enabled(self, value: bool) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[CoreDispatcher]: ...
    @_property
    def pointer_cursor(self) -> typing.Optional[CoreCursor]: ...
    @pointer_cursor.setter
    def pointer_cursor(self, value: typing.Optional[CoreCursor]) -> None: ...
    @_property
    def has_capture(self) -> bool: ...
    @_property
    def pointer_position(self) -> winrt.windows.foundation.Point: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[winrt.windows.system.DispatcherQueue]: ...

@typing.final
class CoreCursor(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreCursor: ...
    def __new__(cls: typing.Type[CoreCursor], type: CoreCursorType, id: winrt.system.UInt32) -> CoreCursor:...
    @_property
    def id(self) -> winrt.system.UInt32: ...
    @_property
    def type(self) -> CoreCursorType: ...

@typing.final
class CoreDispatcher(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreDispatcher: ...
    def process_events(self, options: CoreProcessEventsOption, /) -> None: ...
    def run_async(self, priority: CoreDispatcherPriority, agile_callback: typing.Optional[DispatchedHandler], /) -> winrt.windows.foundation.IAsyncAction: ...
    def run_idle_async(self, agile_callback: typing.Optional[IdleDispatchedHandler], /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def should_yield(self) -> bool: ...
    @typing.overload
    def should_yield(self, priority: CoreDispatcherPriority, /) -> bool: ...
    def stop_process_events(self) -> None: ...
    def try_run_async(self, priority: CoreDispatcherPriority, agile_callback: typing.Optional[DispatchedHandler], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_run_idle_async(self, agile_callback: typing.Optional[IdleDispatchedHandler], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def add_accelerator_key_activated(self, handler: winrt.windows.foundation.TypedEventHandler[CoreDispatcher, AcceleratorKeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_accelerator_key_activated(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def has_thread_access(self) -> bool: ...
    @_property
    def current_priority(self) -> CoreDispatcherPriority: ...
    @current_priority.setter
    def current_priority(self, value: CoreDispatcherPriority) -> None: ...

@typing.final
class CoreIndependentInputSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreIndependentInputSource: ...
    def release_pointer_capture(self) -> None: ...
    def set_pointer_capture(self) -> None: ...
    def add_input_enabled(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, InputEnabledEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_input_enabled(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_capture_lost(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_capture_lost(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_entered(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_entered(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_exited(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_exited(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_moved(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_moved(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_pressed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_pressed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_released(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_wheel_changed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_wheel_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_routed_away(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_away(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_routed_released(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_routed_to(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_to(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_input_enabled(self) -> bool: ...
    @is_input_enabled.setter
    def is_input_enabled(self, value: bool) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[CoreDispatcher]: ...
    @_property
    def pointer_cursor(self) -> typing.Optional[CoreCursor]: ...
    @pointer_cursor.setter
    def pointer_cursor(self, value: typing.Optional[CoreCursor]) -> None: ...
    @_property
    def has_capture(self) -> bool: ...
    @_property
    def pointer_position(self) -> winrt.windows.foundation.Point: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[winrt.windows.system.DispatcherQueue]: ...

@typing.final
class CoreIndependentInputSourceController_Static(type):
    def create_for_i_visual_element(cls, visual_element: typing.Optional[winrt.windows.ui.composition.IVisualElement], /) -> typing.Optional[CoreIndependentInputSourceController]: ...
    def create_for_visual(cls, visual: typing.Optional[winrt.windows.ui.composition.Visual], /) -> typing.Optional[CoreIndependentInputSourceController]: ...

@typing.final
class CoreIndependentInputSourceController(winrt.system.Object, metaclass=CoreIndependentInputSourceController_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreIndependentInputSourceController: ...
    def close(self) -> None: ...
    @typing.overload
    def set_controlled_input(self, input_types: CoreInputDeviceTypes, /) -> None: ...
    @typing.overload
    def set_controlled_input(self, input_types: CoreInputDeviceTypes, required: CoreIndependentInputFilters, excluded: CoreIndependentInputFilters, /) -> None: ...
    @_property
    def is_transparent_for_uncontrolled_input(self) -> bool: ...
    @is_transparent_for_uncontrolled_input.setter
    def is_transparent_for_uncontrolled_input(self, value: bool) -> None: ...
    @_property
    def is_palm_rejection_enabled(self) -> bool: ...
    @is_palm_rejection_enabled.setter
    def is_palm_rejection_enabled(self, value: bool) -> None: ...
    @_property
    def source(self) -> typing.Optional[CoreIndependentInputSource]: ...

@typing.final
class CoreWindow_Static(type):
    def get_for_current_thread(cls) -> typing.Optional[CoreWindow]: ...

@typing.final
class CoreWindow(winrt.system.Object, metaclass=CoreWindow_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWindow: ...
    def activate(self) -> None: ...
    def close(self) -> None: ...
    def get_async_key_state(self, virtual_key: winrt.windows.system.VirtualKey, /) -> CoreVirtualKeyStates: ...
    def get_current_key_event_device_id(self) -> str: ...
    def get_key_state(self, virtual_key: winrt.windows.system.VirtualKey, /) -> CoreVirtualKeyStates: ...
    def release_pointer_capture(self) -> None: ...
    def set_pointer_capture(self) -> None: ...
    def add_activated(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, WindowActivatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_activated(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_automation_provider_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, AutomationProviderRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_automation_provider_requested(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_character_received(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, CharacterReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_character_received(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, CoreWindowEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_input_enabled(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, InputEnabledEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_input_enabled(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_key_down(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, KeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_key_down(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_key_up(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, KeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_key_up(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_capture_lost(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_capture_lost(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_entered(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_entered(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_exited(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_exited(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_moved(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_moved(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_pressed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_pressed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_released(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_wheel_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_wheel_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_size_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, WindowSizeChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_size_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_touch_hit_testing(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, TouchHitTestingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_touch_hit_testing(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_visibility_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, VisibilityChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_visibility_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_routed_away(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_away(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_routed_released(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_routed_to(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_to(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_closest_interactive_bounds_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, ClosestInteractiveBoundsRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closest_interactive_bounds_requested(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_resize_completed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_resize_completed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_resize_started(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_resize_started(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def pointer_position(self) -> winrt.windows.foundation.Point: ...
    @pointer_position.setter
    def pointer_position(self, value: winrt.windows.foundation.Point) -> None: ...
    @_property
    def pointer_cursor(self) -> typing.Optional[CoreCursor]: ...
    @pointer_cursor.setter
    def pointer_cursor(self, value: typing.Optional[CoreCursor]) -> None: ...
    @_property
    def flow_direction(self) -> CoreWindowFlowDirection: ...
    @flow_direction.setter
    def flow_direction(self, value: CoreWindowFlowDirection) -> None: ...
    @_property
    def is_input_enabled(self) -> bool: ...
    @is_input_enabled.setter
    def is_input_enabled(self, value: bool) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[CoreDispatcher]: ...
    @_property
    def automation_host_provider(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def bounds(self) -> winrt.windows.foundation.Rect: ...
    @_property
    def custom_properties(self) -> typing.Optional[winrt.windows.foundation.collections.IPropertySet]: ...
    @_property
    def visible(self) -> bool: ...
    @_property
    def activation_mode(self) -> CoreWindowActivationMode: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[winrt.windows.system.DispatcherQueue]: ...
    @_property
    def u_i_context(self) -> typing.Optional[winrt.windows.ui.UIContext]: ...

@typing.final
class CoreWindowDialog(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWindowDialog: ...
    @typing.overload
    def __new__(cls: typing.Type[CoreWindowDialog], title: str) -> CoreWindowDialog:...
    @typing.overload
    def __new__(cls: typing.Type[CoreWindowDialog]) -> CoreWindowDialog:...
    def show_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.ui.popups.IUICommand]: ...
    def add_showing(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, CoreWindowPopupShowingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_showing(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> None: ...
    @_property
    def is_interaction_delayed(self) -> winrt.system.Int32: ...
    @is_interaction_delayed.setter
    def is_interaction_delayed(self, value: winrt.system.Int32) -> None: ...
    @_property
    def default_command_index(self) -> winrt.system.UInt32: ...
    @default_command_index.setter
    def default_command_index(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def cancel_command_index(self) -> winrt.system.UInt32: ...
    @cancel_command_index.setter
    def cancel_command_index(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def back_button_command(self) -> typing.Optional[winrt.windows.ui.popups.UICommandInvokedHandler]: ...
    @back_button_command.setter
    def back_button_command(self, value: typing.Optional[winrt.windows.ui.popups.UICommandInvokedHandler]) -> None: ...
    @_property
    def commands(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.ui.popups.IUICommand]]: ...
    @_property
    def max_size(self) -> winrt.windows.foundation.Size: ...
    @_property
    def min_size(self) -> winrt.windows.foundation.Size: ...

@typing.final
class CoreWindowEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWindowEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class CoreWindowFlyout(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWindowFlyout: ...
    @typing.overload
    def __new__(cls: typing.Type[CoreWindowFlyout], position: winrt.windows.foundation.Point) -> CoreWindowFlyout:...
    @typing.overload
    def __new__(cls: typing.Type[CoreWindowFlyout], position: winrt.windows.foundation.Point, title: str) -> CoreWindowFlyout:...
    def show_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.ui.popups.IUICommand]: ...
    def add_showing(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, CoreWindowPopupShowingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_showing(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> None: ...
    @_property
    def is_interaction_delayed(self) -> winrt.system.Int32: ...
    @is_interaction_delayed.setter
    def is_interaction_delayed(self, value: winrt.system.Int32) -> None: ...
    @_property
    def default_command_index(self) -> winrt.system.UInt32: ...
    @default_command_index.setter
    def default_command_index(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def back_button_command(self) -> typing.Optional[winrt.windows.ui.popups.UICommandInvokedHandler]: ...
    @back_button_command.setter
    def back_button_command(self, value: typing.Optional[winrt.windows.ui.popups.UICommandInvokedHandler]) -> None: ...
    @_property
    def commands(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.ui.popups.IUICommand]]: ...
    @_property
    def max_size(self) -> winrt.windows.foundation.Size: ...
    @_property
    def min_size(self) -> winrt.windows.foundation.Size: ...

@typing.final
class CoreWindowPopupShowingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWindowPopupShowingEventArgs: ...
    def set_desired_size(self, value: winrt.windows.foundation.Size, /) -> None: ...

@typing.final
class CoreWindowResizeManager_Static(type):
    def get_for_current_view(cls) -> typing.Optional[CoreWindowResizeManager]: ...

@typing.final
class CoreWindowResizeManager(winrt.system.Object, metaclass=CoreWindowResizeManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWindowResizeManager: ...
    def notify_layout_completed(self) -> None: ...
    @_property
    def should_wait_for_layout_completion(self) -> bool: ...
    @should_wait_for_layout_completion.setter
    def should_wait_for_layout_completion(self, value: bool) -> None: ...

@typing.final
class IdleDispatchedHandlerArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IdleDispatchedHandlerArgs: ...
    @_property
    def is_dispatcher_idle(self) -> bool: ...

@typing.final
class InputEnabledEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InputEnabledEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def input_enabled(self) -> bool: ...

@typing.final
class KeyEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> KeyEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def key_status(self) -> CorePhysicalKeyStatus: ...
    @_property
    def virtual_key(self) -> winrt.windows.system.VirtualKey: ...
    @_property
    def device_id(self) -> str: ...

@typing.final
class PointerEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PointerEventArgs: ...
    def get_intermediate_points(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.ui.input.PointerPoint]]: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def current_point(self) -> typing.Optional[winrt.windows.ui.input.PointerPoint]: ...
    @_property
    def key_modifiers(self) -> winrt.windows.system.VirtualKeyModifiers: ...

@typing.final
class SystemNavigationManager_Static(type):
    def get_for_current_view(cls) -> typing.Optional[SystemNavigationManager]: ...

@typing.final
class SystemNavigationManager(winrt.system.Object, metaclass=SystemNavigationManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemNavigationManager: ...
    def add_back_requested(self, handler: winrt.windows.foundation.EventHandler[BackRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_back_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def app_view_back_button_visibility(self) -> AppViewBackButtonVisibility: ...
    @app_view_back_button_visibility.setter
    def app_view_back_button_visibility(self, value: AppViewBackButtonVisibility) -> None: ...

@typing.final
class TouchHitTestingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TouchHitTestingEventArgs: ...
    def evaluate_proximity(self, control_bounding_box: winrt.windows.foundation.Rect, /) -> CoreProximityEvaluation: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def proximity_evaluation(self) -> CoreProximityEvaluation: ...
    @proximity_evaluation.setter
    def proximity_evaluation(self, value: CoreProximityEvaluation) -> None: ...
    @_property
    def bounding_box(self) -> winrt.windows.foundation.Rect: ...
    @_property
    def point(self) -> winrt.windows.foundation.Point: ...

@typing.final
class VisibilityChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VisibilityChangedEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def visible(self) -> bool: ...

@typing.final
class WindowActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowActivatedEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def window_activation_state(self) -> CoreWindowActivationState: ...

@typing.final
class WindowSizeChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowSizeChangedEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def size(self) -> winrt.windows.foundation.Size: ...

@typing.final
class ICoreAcceleratorKeys(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICoreAcceleratorKeys: ...
    def add_accelerator_key_activated(self, handler: winrt.windows.foundation.TypedEventHandler[CoreDispatcher, AcceleratorKeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_accelerator_key_activated(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class ICoreInputSourceBase(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICoreInputSourceBase: ...
    def add_input_enabled(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, InputEnabledEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_input_enabled(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[CoreDispatcher]: ...
    @_property
    def is_input_enabled(self) -> bool: ...
    @is_input_enabled.setter
    def is_input_enabled(self, value: bool) -> None: ...

@typing.final
class ICorePointerInputSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICorePointerInputSource: ...
    def release_pointer_capture(self) -> None: ...
    def set_pointer_capture(self) -> None: ...
    def add_pointer_capture_lost(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_capture_lost(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_entered(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_entered(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_exited(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_exited(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_moved(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_moved(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_pressed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_pressed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_released(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_wheel_changed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_wheel_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def has_capture(self) -> bool: ...
    @_property
    def pointer_cursor(self) -> typing.Optional[CoreCursor]: ...
    @pointer_cursor.setter
    def pointer_cursor(self, value: typing.Optional[CoreCursor]) -> None: ...
    @_property
    def pointer_position(self) -> winrt.windows.foundation.Point: ...

@typing.final
class ICorePointerInputSource2(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICorePointerInputSource2: ...
    def release_pointer_capture(self) -> None: ...
    def set_pointer_capture(self) -> None: ...
    def add_pointer_capture_lost(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_capture_lost(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_entered(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_entered(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_exited(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_exited(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_moved(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_moved(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_pressed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_pressed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_released(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_wheel_changed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.system.Object, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_wheel_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def dispatcher_queue(self) -> typing.Optional[winrt.windows.system.DispatcherQueue]: ...
    @_property
    def has_capture(self) -> bool: ...
    @_property
    def pointer_cursor(self) -> typing.Optional[CoreCursor]: ...
    @pointer_cursor.setter
    def pointer_cursor(self, value: typing.Optional[CoreCursor]) -> None: ...
    @_property
    def pointer_position(self) -> winrt.windows.foundation.Point: ...

@typing.final
class ICorePointerRedirector(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICorePointerRedirector: ...
    def add_pointer_routed_away(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_away(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_routed_released(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_routed_to(self, handler: winrt.windows.foundation.TypedEventHandler[ICorePointerRedirector, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_routed_to(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class ICoreWindow(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICoreWindow: ...
    def activate(self) -> None: ...
    def close(self) -> None: ...
    def get_async_key_state(self, virtual_key: winrt.windows.system.VirtualKey, /) -> CoreVirtualKeyStates: ...
    def get_key_state(self, virtual_key: winrt.windows.system.VirtualKey, /) -> CoreVirtualKeyStates: ...
    def release_pointer_capture(self) -> None: ...
    def set_pointer_capture(self) -> None: ...
    def add_activated(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, WindowActivatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_activated(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_automation_provider_requested(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, AutomationProviderRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_automation_provider_requested(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_character_received(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, CharacterReceivedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_character_received(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, CoreWindowEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_input_enabled(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, InputEnabledEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_input_enabled(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_key_down(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, KeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_key_down(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_key_up(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, KeyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_key_up(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_capture_lost(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_capture_lost(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_entered(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_entered(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_exited(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_exited(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_moved(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_moved(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_pressed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_pressed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_released(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_released(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_wheel_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, PointerEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pointer_wheel_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_size_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, WindowSizeChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_size_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_touch_hit_testing(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, TouchHitTestingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_touch_hit_testing(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_visibility_changed(self, handler: winrt.windows.foundation.TypedEventHandler[CoreWindow, VisibilityChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_visibility_changed(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def automation_host_provider(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def bounds(self) -> winrt.windows.foundation.Rect: ...
    @_property
    def custom_properties(self) -> typing.Optional[winrt.windows.foundation.collections.IPropertySet]: ...
    @_property
    def dispatcher(self) -> typing.Optional[CoreDispatcher]: ...
    @_property
    def flow_direction(self) -> CoreWindowFlowDirection: ...
    @flow_direction.setter
    def flow_direction(self, value: CoreWindowFlowDirection) -> None: ...
    @_property
    def is_input_enabled(self) -> bool: ...
    @is_input_enabled.setter
    def is_input_enabled(self, value: bool) -> None: ...
    @_property
    def pointer_cursor(self) -> typing.Optional[CoreCursor]: ...
    @pointer_cursor.setter
    def pointer_cursor(self, value: typing.Optional[CoreCursor]) -> None: ...
    @_property
    def pointer_position(self) -> winrt.windows.foundation.Point: ...
    @_property
    def visible(self) -> bool: ...

@typing.final
class ICoreWindowEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICoreWindowEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class IInitializeWithCoreWindow(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IInitializeWithCoreWindow: ...
    def initialize(self, window: typing.Optional[CoreWindow], /) -> None: ...

