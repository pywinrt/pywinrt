// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "py.Windows.Web.h"

namespace py::cpp::Windows::Web
{
    // ----- WebError class --------------------

    static PyObject* _new_WebError(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Web::WebError>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Web::WebError>::type_name);
        return nullptr;
    }

    static PyObject* WebError_GetStatus(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.WebError", L"GetStatus", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Windows::Web::WebError::GetStatus(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebError[] = {
        { }};

    static PyGetSetDef _getset_WebError[] = {
        { }};

    static PyType_Slot _type_slots_WebError[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_WebError) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WebError) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WebError) },
        { }};

    static PyType_Spec type_spec_WebError = {
        "winrt._winrt_windows_web.WebError",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebError};

    static PyGetSetDef getset_WebError_Static[] = {
        { }};

    static PyMethodDef methods_WebError_Static[] = {
        { "get_status", reinterpret_cast<PyCFunction>(WebError_GetStatus), METH_VARARGS, nullptr },
        { }};

    static PyType_Slot type_slots_WebError_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_WebError_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_WebError_Static) },
        { }
    };

    static PyType_Spec type_spec_WebError_Static = {
        "winrt._winrt_windows_web.WebError_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_WebError_Static};

    // ----- IUriToStreamResolver interface --------------------

    static PyObject* _new_IUriToStreamResolver(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Web::IUriToStreamResolver>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Web::IUriToStreamResolver>::type_name);
        return nullptr;
    }

    static void _dealloc_IUriToStreamResolver(py::wrapper::Windows::Web::IUriToStreamResolver* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IUriToStreamResolver_UriToStreamAsync(py::wrapper::Windows::Web::IUriToStreamResolver* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.IUriToStreamResolver", L"UriToStreamAsync", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.UriToStreamAsync(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_IUriToStreamResolver[] = {
        { "uri_to_stream_async", reinterpret_cast<PyCFunction>(IUriToStreamResolver_UriToStreamAsync), METH_VARARGS, nullptr },
        { }};

    static PyGetSetDef _getset_IUriToStreamResolver[] = {
        { }};

    static PyType_Slot _type_slots_IUriToStreamResolver[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_IUriToStreamResolver) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IUriToStreamResolver) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IUriToStreamResolver) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IUriToStreamResolver) },
        { }};

    static PyType_Spec type_spec_IUriToStreamResolver = {
        "winrt._winrt_windows_web._IUriToStreamResolver",
        sizeof(py::wrapper::Windows::Web::IUriToStreamResolver),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IUriToStreamResolver};

    struct ImplementsIUriToStreamResolver : py::ImplementsInterfaceT<ImplementsIUriToStreamResolver, winrt::Windows::Web::IUriToStreamResolver>
    {
        ImplementsIUriToStreamResolver() = delete;
        ImplementsIUriToStreamResolver(PyObject* py_obj, winrt::impl::inspectable_abi* runtime_class) : py::ImplementsInterfaceT<ImplementsIUriToStreamResolver, winrt::Windows::Web::IUriToStreamResolver>(py_obj, runtime_class)
        {
        }

        auto UriToStreamAsync(winrt::Windows::Foundation::Uri const& param0)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "uri_to_stream_async")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallOneArg(method.get(), py_param0.get())};
                if (!return_value)
                {
                    throw python_exception();
                }

                return py::convert_to<winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Streams::IInputStream>>(return_value.get());
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }
    };

    static PyObject* _assign_array_IUriToStreamResolver(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Web::IUriToStreamResolver>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IUriToStreamResolver(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::IUriToStreamResolver>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _guid_ImplementsIUriToStreamResolver(PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::guid_of<winrt::Windows::Web::IUriToStreamResolver>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _make_ImplementsIUriToStreamResolver(PyObject* /*unused*/, PyObject* args) noexcept
    {
        try
        {
            PyObject* py_obj;
            winrt::impl::inspectable_abi* runtime_class;

            if (!PyArg_ParseTuple(args, "On", &py_obj, &runtime_class))
            {
                return nullptr;
            }

            auto iface{std::make_unique<ImplementsIUriToStreamResolver>(py_obj, runtime_class)};

            return PyLong_FromVoidPtr(iface.release());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef methods_ImplementsIUriToStreamResolver[] = {
        { "_assign_array_", _assign_array_IUriToStreamResolver, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IUriToStreamResolver), METH_O | METH_STATIC, nullptr },
        { "_guid_", reinterpret_cast<PyCFunction>(_guid_ImplementsIUriToStreamResolver), METH_NOARGS | METH_STATIC, nullptr },
        { "_make_", reinterpret_cast<PyCFunction>(_make_ImplementsIUriToStreamResolver), METH_VARARGS | METH_STATIC, nullptr },
        { }};

    static PyType_Slot type_slots_ImplementsIUriToStreamResolver[] = {
        { Py_tp_methods, reinterpret_cast<void*>(methods_ImplementsIUriToStreamResolver) },
        { }};

    static PyType_Spec type_spec_ImplementsIUriToStreamResolver = {
        "winrt._winrt_windows_web.IUriToStreamResolver",
        0,
        0,
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,
        type_slots_ImplementsIUriToStreamResolver};

    // ----- Windows.Web Initialization --------------------

    PyDoc_STRVAR(module_doc, "Windows.Web");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_windows_web",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Windows::Web

PyMODINIT_FUNC PyInit__winrt_windows_web(void) noexcept
{
    using namespace py::cpp::Windows::Web;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto inspectable_meta_type = py::get_inspectable_meta_type();
    if (!inspectable_meta_type)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle WebError_Static_bases{PyTuple_Pack(1, reinterpret_cast<PyObject*>(inspectable_meta_type))};
    if (!WebError_Static_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_WebError_Static{PyType_FromSpecWithBases(&type_spec_WebError_Static, WebError_Static_bases.get())};
    if (!type_WebError_Static)
    {
        return nullptr;
    }

    py::pytype_handle WebError_type{py::register_python_type(module.get(), &type_spec_WebError, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_WebError_Static.get()))};
    if (!WebError_type)
    {
        return nullptr;
    }

    py::pytype_handle IUriToStreamResolver_type{py::register_python_type(module.get(), &type_spec_IUriToStreamResolver, object_bases.get(), nullptr)};
    if (!IUriToStreamResolver_type)
    {
        return nullptr;
    }

    py::pytype_handle ImplementsIUriToStreamResolver_type{py::register_python_type(module.get(), &type_spec_ImplementsIUriToStreamResolver, nullptr, inspectable_meta_type)};
    if (!ImplementsIUriToStreamResolver_type)
    {
        return nullptr;
    }

    if (PyModule_AddType(module.get(), ImplementsIUriToStreamResolver_type.get()) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
