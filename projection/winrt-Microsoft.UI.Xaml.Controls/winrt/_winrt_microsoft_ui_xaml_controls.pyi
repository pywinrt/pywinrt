# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.microsoft.ui.composition as microsoft_ui_composition
import winrt.microsoft.ui.input as microsoft_ui_input
import winrt.microsoft.ui.text as microsoft_ui_text
import winrt.microsoft.ui.xaml as microsoft_ui_xaml
import winrt.microsoft.ui.xaml.controls.primitives as microsoft_ui_xaml_controls_primitives
import winrt.microsoft.ui.xaml.data as microsoft_ui_xaml_data
import winrt.microsoft.ui.xaml.documents as microsoft_ui_xaml_documents
import winrt.microsoft.ui.xaml.input as microsoft_ui_xaml_input
import winrt.microsoft.ui.xaml.interop as microsoft_ui_xaml_interop
import winrt.microsoft.ui.xaml.media as microsoft_ui_xaml_media
import winrt.microsoft.ui.xaml.media.animation as microsoft_ui_xaml_media_animation
import winrt.microsoft.ui.xaml.navigation as microsoft_ui_xaml_navigation
import winrt.microsoft.web.webview2.core as microsoft_web_webview2_core
import winrt.windows.applicationmodel.contacts as windows_applicationmodel_contacts
import winrt.windows.applicationmodel.datatransfer as windows_applicationmodel_datatransfer
import winrt.windows.devices.geolocation as windows_devices_geolocation
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.foundation.numerics as windows_foundation_numerics
import winrt.windows.globalization as windows_globalization
import winrt.windows.globalization.numberformatting as windows_globalization_numberformatting
import winrt.windows.media.casting as windows_media_casting
import winrt.windows.media.playback as windows_media_playback
import winrt.windows.ui as windows_ui
import winrt.windows.ui.text as windows_ui_text
import winrt.windows.ui.xaml.interop as windows_ui_xaml_interop

from winrt.microsoft.ui.xaml.controls import AnnotatedScrollBarScrollingEventKind, AppBarClosedDisplayMode, AutoSuggestionBoxTextChangeReason, BackgroundSizing, CalendarViewDisplayMode, CalendarViewSelectionMode, CandidateWindowAlignment, CharacterCasing, ClickMode, ColorPickerHsvChannel, ColorSpectrumComponents, ColorSpectrumShape, ComboBoxSelectionChangedTrigger, CommandBarDefaultLabelPosition, CommandBarDynamicOverflowAction, CommandBarLabelPosition, CommandBarOverflowButtonVisibility, ContentDialogButton, ContentDialogPlacement, ContentDialogResult, DisabledFormattingAccelerators, ElementRealizationOptions, ExpandDirection, IncrementalLoadingTrigger, IndexBasedLayoutOrientation, InfoBarCloseReason, InfoBarSeverity, ItemCollectionTransitionOperation, ItemCollectionTransitionTriggers, ItemsUpdatingScrollMode, ItemsViewSelectionMode, LightDismissOverlayMode, LinedFlowLayoutItemsJustification, LinedFlowLayoutItemsStretch, ListPickerFlyoutSelectionMode, ListViewReorderMode, ListViewSelectionMode, NavigationViewBackButtonVisible, NavigationViewDisplayMode, NavigationViewOverflowLabelMode, NavigationViewPaneDisplayMode, NavigationViewSelectionFollowsFocus, NavigationViewShoulderNavigationEnabled, NumberBoxSpinButtonPlacementMode, NumberBoxValidationMode, Orientation, PanelScrollingDirection, ParallaxSourceOffsetKind, PasswordRevealMode, PipsPagerButtonVisibility, PivotHeaderFocusVisualPlacement, PivotSlideInAnimationGroup, PlayerAnimationOptimization, RefreshPullDirection, RefreshVisualizerOrientation, RefreshVisualizerState, RequiresPointer, RichEditClipboardFormat, ScrollBarVisibility, ScrollIntoViewAlignment, ScrollMode, ScrollingAnimationMode, ScrollingChainMode, ScrollingContentOrientation, ScrollingInputKinds, ScrollingInteractionState, ScrollingRailMode, ScrollingScrollBarVisibility, ScrollingScrollMode, ScrollingSnapPointsMode, ScrollingZoomMode, SelectionMode, SnapPointsType, SplitViewDisplayMode, SplitViewPanePlacement, StretchDirection, SwipeBehaviorOnInvoked, SwipeMode, Symbol, TabViewCloseButtonOverlayMode, TabViewWidthMode, TeachingTipCloseReason, TeachingTipHeroContentPlacementMode, TeachingTipPlacementMode, TeachingTipTailVisibility, TreeViewSelectionMode, TwoPaneViewMode, TwoPaneViewPriority, TwoPaneViewTallModeConfiguration, TwoPaneViewWideModeConfiguration, UniformGridLayoutItemsJustification, UniformGridLayoutItemsStretch, VirtualizationMode, ZoomMode
from winrt.microsoft.ui.xaml.controls import CalendarViewDayItemChangingEventHandler, CleanUpVirtualizedItemEventHandler, ContextMenuOpeningEventHandler, DragItemsStartingEventHandler, HubSectionHeaderClickEventHandler, ItemClickEventHandler, ListViewItemToKeyHandler, ListViewKeyToItemHandler, SectionsInViewChangedEventHandler, SelectionChangedEventHandler, SemanticZoomViewChangedEventHandler, TextChangedEventHandler, TextControlPasteEventHandler

Self = typing.TypeVar('Self')

@typing.final
class AnchorRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnchorRequestedEventArgs: ...
    @_property
    def anchor(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @anchor.setter
    def anchor(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def anchor_candidates(self) -> typing.Optional[windows_foundation_collections.IVector[microsoft_ui_xaml.UIElement]]: ...

@typing.final
class AnimatedIcon_Static(type):
    def get_state(cls, object: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> str: ...
    def set_state(cls, object: typing.Optional[microsoft_ui_xaml.DependencyObject], value: str, /) -> None: ...
    @_property
    def fallback_icon_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def mirrored_when_right_to_left_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def state_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class AnimatedIcon(winrt.system.Object, metaclass=AnimatedIcon_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnimatedIcon: ...
    def __new__(cls: typing.Type[AnimatedIcon]) -> AnimatedIcon: ...
    @_property
    def source(self) -> typing.Optional[IAnimatedVisualSource2]: ...
    @source.setter
    def source(self, value: typing.Optional[IAnimatedVisualSource2]) -> None: ...
    @_property
    def mirrored_when_right_to_left(self) -> bool: ...
    @mirrored_when_right_to_left.setter
    def mirrored_when_right_to_left(self, value: bool) -> None: ...
    @_property
    def fallback_icon_source(self) -> typing.Optional[IconSource]: ...
    @fallback_icon_source.setter
    def fallback_icon_source(self, value: typing.Optional[IconSource]) -> None: ...

@typing.final
class AnimatedIconSource_Static(type):
    @_property
    def fallback_icon_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def mirrored_when_right_to_left_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class AnimatedIconSource(winrt.system.Object, metaclass=AnimatedIconSource_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnimatedIconSource: ...
    def __new__(cls: typing.Type[AnimatedIconSource]) -> AnimatedIconSource: ...
    @_property
    def source(self) -> typing.Optional[IAnimatedVisualSource2]: ...
    @source.setter
    def source(self, value: typing.Optional[IAnimatedVisualSource2]) -> None: ...
    @_property
    def mirrored_when_right_to_left(self) -> bool: ...
    @mirrored_when_right_to_left.setter
    def mirrored_when_right_to_left(self, value: bool) -> None: ...
    @_property
    def fallback_icon_source(self) -> typing.Optional[IconSource]: ...
    @fallback_icon_source.setter
    def fallback_icon_source(self, value: typing.Optional[IconSource]) -> None: ...

@typing.final
class AnimatedVisualPlayer_Static(type):
    @_property
    def auto_play_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def diagnostics_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def duration_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def fallback_content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_animated_visual_loaded_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_playing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def playback_rate_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def stretch_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def animation_optimization_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class AnimatedVisualPlayer(winrt.system.Object, metaclass=AnimatedVisualPlayer_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnimatedVisualPlayer: ...
    def __new__(cls: typing.Type[AnimatedVisualPlayer]) -> AnimatedVisualPlayer: ...
    def pause(self) -> None: ...
    def play_async(self, from_progress: winrt.system.Double, to_progress: winrt.system.Double, looped: bool, /) -> windows_foundation.IAsyncAction: ...
    def resume(self) -> None: ...
    def set_progress(self, progress: winrt.system.Double, /) -> None: ...
    def stop(self) -> None: ...
    @_property
    def stretch(self) -> microsoft_ui_xaml_media.Stretch: ...
    @stretch.setter
    def stretch(self, value: microsoft_ui_xaml_media.Stretch) -> None: ...
    @_property
    def source(self) -> typing.Optional[IAnimatedVisualSource]: ...
    @source.setter
    def source(self, value: typing.Optional[IAnimatedVisualSource]) -> None: ...
    @_property
    def playback_rate(self) -> winrt.system.Double: ...
    @playback_rate.setter
    def playback_rate(self, value: winrt.system.Double) -> None: ...
    @_property
    def fallback_content(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @fallback_content.setter
    def fallback_content(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def auto_play(self) -> bool: ...
    @auto_play.setter
    def auto_play(self, value: bool) -> None: ...
    @_property
    def diagnostics(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def duration(self) -> datetime.timedelta: ...
    @_property
    def is_animated_visual_loaded(self) -> bool: ...
    @_property
    def is_playing(self) -> bool: ...
    @_property
    def progress_object(self) -> typing.Optional[microsoft_ui_composition.CompositionObject]: ...
    @_property
    def animation_optimization(self) -> PlayerAnimationOptimization: ...
    @animation_optimization.setter
    def animation_optimization(self, value: PlayerAnimationOptimization) -> None: ...

@typing.final
class AnnotatedScrollBar_Static(type):
    @_property
    def detail_label_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def label_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def labels_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def small_change_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class AnnotatedScrollBar(winrt.system.Object, metaclass=AnnotatedScrollBar_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnnotatedScrollBar: ...
    def __new__(cls: typing.Type[AnnotatedScrollBar]) -> AnnotatedScrollBar: ...
    def add_detail_label_requested(self, handler: windows_foundation.TypedEventHandler[AnnotatedScrollBar, AnnotatedScrollBarDetailLabelRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_detail_label_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_scrolling(self, handler: windows_foundation.TypedEventHandler[AnnotatedScrollBar, AnnotatedScrollBarScrollingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_scrolling(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def small_change(self) -> winrt.system.Double: ...
    @small_change.setter
    def small_change(self, value: winrt.system.Double) -> None: ...
    @_property
    def labels(self) -> typing.Optional[windows_foundation_collections.IVector[AnnotatedScrollBarLabel]]: ...
    @labels.setter
    def labels(self, value: typing.Optional[windows_foundation_collections.IVector[AnnotatedScrollBarLabel]]) -> None: ...
    @_property
    def label_template(self) -> typing.Optional[microsoft_ui_xaml.IElementFactory]: ...
    @label_template.setter
    def label_template(self, value: typing.Optional[microsoft_ui_xaml.IElementFactory]) -> None: ...
    @_property
    def detail_label_template(self) -> typing.Optional[microsoft_ui_xaml.IElementFactory]: ...
    @detail_label_template.setter
    def detail_label_template(self, value: typing.Optional[microsoft_ui_xaml.IElementFactory]) -> None: ...
    @_property
    def scroll_controller(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.IScrollController]: ...

@typing.final
class AnnotatedScrollBarDetailLabelRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnnotatedScrollBarDetailLabelRequestedEventArgs: ...
    @_property
    def content(self) -> typing.Optional[winrt.system.Object]: ...
    @content.setter
    def content(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def scroll_offset(self) -> winrt.system.Double: ...

@typing.final
class AnnotatedScrollBarLabel(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnnotatedScrollBarLabel: ...
    def __new__(cls: typing.Type[AnnotatedScrollBarLabel], content: typing.Optional[winrt.system.Object], scroll_offset: winrt.system.Double) -> AnnotatedScrollBarLabel: ...
    @_property
    def content(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def scroll_offset(self) -> winrt.system.Double: ...

@typing.final
class AnnotatedScrollBarScrollingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnnotatedScrollBarScrollingEventArgs: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def scroll_offset(self) -> winrt.system.Double: ...
    @_property
    def scrolling_event_kind(self) -> AnnotatedScrollBarScrollingEventKind: ...

@typing.final
class AppBar_Static(type):
    @_property
    def closed_display_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_open_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_sticky_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def light_dismiss_overlay_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class AppBar(winrt.system.Object, metaclass=AppBar_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppBar: ...
    def __new__(cls: typing.Type[AppBar]) -> AppBar: ...
    def add_closed(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_closing(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_opened(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_opened(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_opening(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_opening(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def light_dismiss_overlay_mode(self) -> LightDismissOverlayMode: ...
    @light_dismiss_overlay_mode.setter
    def light_dismiss_overlay_mode(self, value: LightDismissOverlayMode) -> None: ...
    @_property
    def is_sticky(self) -> bool: ...
    @is_sticky.setter
    def is_sticky(self, value: bool) -> None: ...
    @_property
    def is_open(self) -> bool: ...
    @is_open.setter
    def is_open(self, value: bool) -> None: ...
    @_property
    def closed_display_mode(self) -> AppBarClosedDisplayMode: ...
    @closed_display_mode.setter
    def closed_display_mode(self, value: AppBarClosedDisplayMode) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.AppBarTemplateSettings]: ...

@typing.final
class AppBarButton_Static(type):
    @_property
    def dynamic_overflow_order_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def icon_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_compact_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_in_overflow_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def keyboard_accelerator_text_override_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def label_position_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def label_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class AppBarButton(winrt.system.Object, metaclass=AppBarButton_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppBarButton: ...
    def __new__(cls: typing.Type[AppBarButton]) -> AppBarButton: ...
    @_property
    def label_position(self) -> CommandBarLabelPosition: ...
    @label_position.setter
    def label_position(self, value: CommandBarLabelPosition) -> None: ...
    @_property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> None: ...
    @_property
    def keyboard_accelerator_text_override(self) -> str: ...
    @keyboard_accelerator_text_override.setter
    def keyboard_accelerator_text_override(self, value: str) -> None: ...
    @_property
    def icon(self) -> typing.Optional[IconElement]: ...
    @icon.setter
    def icon(self, value: typing.Optional[IconElement]) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.AppBarButtonTemplateSettings]: ...
    @_property
    def is_compact(self) -> bool: ...
    @is_compact.setter
    def is_compact(self, value: bool) -> None: ...
    @_property
    def dynamic_overflow_order(self) -> winrt.system.Int32: ...
    @dynamic_overflow_order.setter
    def dynamic_overflow_order(self, value: winrt.system.Int32) -> None: ...
    @_property
    def is_in_overflow(self) -> bool: ...

@typing.final
class AppBarElementContainer_Static(type):
    @_property
    def dynamic_overflow_order_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_compact_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_in_overflow_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class AppBarElementContainer(winrt.system.Object, metaclass=AppBarElementContainer_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppBarElementContainer: ...
    def __new__(cls: typing.Type[AppBarElementContainer]) -> AppBarElementContainer: ...
    @_property
    def is_compact(self) -> bool: ...
    @is_compact.setter
    def is_compact(self, value: bool) -> None: ...
    @_property
    def dynamic_overflow_order(self) -> winrt.system.Int32: ...
    @dynamic_overflow_order.setter
    def dynamic_overflow_order(self, value: winrt.system.Int32) -> None: ...
    @_property
    def is_in_overflow(self) -> bool: ...

@typing.final
class AppBarSeparator_Static(type):
    @_property
    def dynamic_overflow_order_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_compact_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_in_overflow_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class AppBarSeparator(winrt.system.Object, metaclass=AppBarSeparator_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppBarSeparator: ...
    def __new__(cls: typing.Type[AppBarSeparator]) -> AppBarSeparator: ...
    @_property
    def is_compact(self) -> bool: ...
    @is_compact.setter
    def is_compact(self, value: bool) -> None: ...
    @_property
    def dynamic_overflow_order(self) -> winrt.system.Int32: ...
    @dynamic_overflow_order.setter
    def dynamic_overflow_order(self, value: winrt.system.Int32) -> None: ...
    @_property
    def is_in_overflow(self) -> bool: ...

@typing.final
class AppBarToggleButton_Static(type):
    @_property
    def dynamic_overflow_order_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def icon_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_compact_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_in_overflow_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def keyboard_accelerator_text_override_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def label_position_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def label_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class AppBarToggleButton(winrt.system.Object, metaclass=AppBarToggleButton_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppBarToggleButton: ...
    def __new__(cls: typing.Type[AppBarToggleButton]) -> AppBarToggleButton: ...
    @_property
    def label_position(self) -> CommandBarLabelPosition: ...
    @label_position.setter
    def label_position(self, value: CommandBarLabelPosition) -> None: ...
    @_property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> None: ...
    @_property
    def keyboard_accelerator_text_override(self) -> str: ...
    @keyboard_accelerator_text_override.setter
    def keyboard_accelerator_text_override(self, value: str) -> None: ...
    @_property
    def icon(self) -> typing.Optional[IconElement]: ...
    @icon.setter
    def icon(self, value: typing.Optional[IconElement]) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.AppBarToggleButtonTemplateSettings]: ...
    @_property
    def is_compact(self) -> bool: ...
    @is_compact.setter
    def is_compact(self, value: bool) -> None: ...
    @_property
    def dynamic_overflow_order(self) -> winrt.system.Int32: ...
    @dynamic_overflow_order.setter
    def dynamic_overflow_order(self, value: winrt.system.Int32) -> None: ...
    @_property
    def is_in_overflow(self) -> bool: ...

@typing.final
class AutoSuggestBox_Static(type):
    @_property
    def auto_maximize_suggestion_area_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def description_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_suggestion_list_open_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def light_dismiss_overlay_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_suggestion_list_height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def placeholder_text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def query_icon_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_box_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_member_path_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def update_text_on_select_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class AutoSuggestBox(winrt.system.Object, metaclass=AutoSuggestBox_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AutoSuggestBox: ...
    def __new__(cls: typing.Type[AutoSuggestBox]) -> AutoSuggestBox: ...
    def add_query_submitted(self, handler: windows_foundation.TypedEventHandler[AutoSuggestBox, AutoSuggestBoxQuerySubmittedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_query_submitted(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_suggestion_chosen(self, handler: windows_foundation.TypedEventHandler[AutoSuggestBox, AutoSuggestBoxSuggestionChosenEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_suggestion_chosen(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_text_changed(self, handler: windows_foundation.TypedEventHandler[AutoSuggestBox, AutoSuggestBoxTextChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_text_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def update_text_on_select(self) -> bool: ...
    @update_text_on_select.setter
    def update_text_on_select(self, value: bool) -> None: ...
    @_property
    def text_member_path(self) -> str: ...
    @text_member_path.setter
    def text_member_path(self, value: str) -> None: ...
    @_property
    def text_box_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @text_box_style.setter
    def text_box_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> None: ...
    @_property
    def query_icon(self) -> typing.Optional[IconElement]: ...
    @query_icon.setter
    def query_icon(self, value: typing.Optional[IconElement]) -> None: ...
    @_property
    def placeholder_text(self) -> str: ...
    @placeholder_text.setter
    def placeholder_text(self, value: str) -> None: ...
    @_property
    def max_suggestion_list_height(self) -> winrt.system.Double: ...
    @max_suggestion_list_height.setter
    def max_suggestion_list_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def light_dismiss_overlay_mode(self) -> LightDismissOverlayMode: ...
    @light_dismiss_overlay_mode.setter
    def light_dismiss_overlay_mode(self, value: LightDismissOverlayMode) -> None: ...
    @_property
    def is_suggestion_list_open(self) -> bool: ...
    @is_suggestion_list_open.setter
    def is_suggestion_list_open(self, value: bool) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def description(self) -> typing.Optional[winrt.system.Object]: ...
    @description.setter
    def description(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def auto_maximize_suggestion_area(self) -> bool: ...
    @auto_maximize_suggestion_area.setter
    def auto_maximize_suggestion_area(self, value: bool) -> None: ...

@typing.final
class AutoSuggestBoxQuerySubmittedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AutoSuggestBoxQuerySubmittedEventArgs: ...
    def __new__(cls: typing.Type[AutoSuggestBoxQuerySubmittedEventArgs]) -> AutoSuggestBoxQuerySubmittedEventArgs: ...
    @_property
    def chosen_suggestion(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def query_text(self) -> str: ...

@typing.final
class AutoSuggestBoxSuggestionChosenEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AutoSuggestBoxSuggestionChosenEventArgs: ...
    def __new__(cls: typing.Type[AutoSuggestBoxSuggestionChosenEventArgs]) -> AutoSuggestBoxSuggestionChosenEventArgs: ...
    @_property
    def selected_item(self) -> typing.Optional[winrt.system.Object]: ...

@typing.final
class AutoSuggestBoxTextChangedEventArgs_Static(type):
    @_property
    def reason_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class AutoSuggestBoxTextChangedEventArgs(winrt.system.Object, metaclass=AutoSuggestBoxTextChangedEventArgs_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AutoSuggestBoxTextChangedEventArgs: ...
    def __new__(cls: typing.Type[AutoSuggestBoxTextChangedEventArgs]) -> AutoSuggestBoxTextChangedEventArgs: ...
    def check_current(self) -> bool: ...
    @_property
    def reason(self) -> AutoSuggestionBoxTextChangeReason: ...
    @reason.setter
    def reason(self, value: AutoSuggestionBoxTextChangeReason) -> None: ...

@typing.final
class BitmapIcon_Static(type):
    @_property
    def show_as_monochrome_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def uri_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class BitmapIcon(winrt.system.Object, metaclass=BitmapIcon_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BitmapIcon: ...
    def __new__(cls: typing.Type[BitmapIcon]) -> BitmapIcon: ...
    @_property
    def uri_source(self) -> typing.Optional[windows_foundation.Uri]: ...
    @uri_source.setter
    def uri_source(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def show_as_monochrome(self) -> bool: ...
    @show_as_monochrome.setter
    def show_as_monochrome(self, value: bool) -> None: ...

@typing.final
class BitmapIconSource_Static(type):
    @_property
    def show_as_monochrome_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def uri_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class BitmapIconSource(winrt.system.Object, metaclass=BitmapIconSource_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BitmapIconSource: ...
    def __new__(cls: typing.Type[BitmapIconSource]) -> BitmapIconSource: ...
    @_property
    def uri_source(self) -> typing.Optional[windows_foundation.Uri]: ...
    @uri_source.setter
    def uri_source(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def show_as_monochrome(self) -> bool: ...
    @show_as_monochrome.setter
    def show_as_monochrome(self, value: bool) -> None: ...

@typing.final
class Border_Static(type):
    @_property
    def background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def background_sizing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def border_brush_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def border_thickness_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def child_transitions_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def corner_radius_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def padding_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class Border(winrt.system.Object, metaclass=Border_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Border: ...
    def __new__(cls: typing.Type[Border]) -> Border: ...
    @_property
    def padding(self) -> microsoft_ui_xaml.Thickness: ...
    @padding.setter
    def padding(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def corner_radius(self) -> microsoft_ui_xaml.CornerRadius: ...
    @corner_radius.setter
    def corner_radius(self, value: microsoft_ui_xaml.CornerRadius) -> None: ...
    @_property
    def child_transitions(self) -> typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]: ...
    @child_transitions.setter
    def child_transitions(self, value: typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]) -> None: ...
    @_property
    def child(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @child.setter
    def child(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def border_thickness(self) -> microsoft_ui_xaml.Thickness: ...
    @border_thickness.setter
    def border_thickness(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def border_brush(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @border_brush.setter
    def border_brush(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def background_transition(self) -> typing.Optional[microsoft_ui_xaml.BrushTransition]: ...
    @background_transition.setter
    def background_transition(self, value: typing.Optional[microsoft_ui_xaml.BrushTransition]) -> None: ...
    @_property
    def background_sizing(self) -> BackgroundSizing: ...
    @background_sizing.setter
    def background_sizing(self, value: BackgroundSizing) -> None: ...
    @_property
    def background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @background.setter
    def background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...

@typing.final
class BreadcrumbBar_Static(type):
    @_property
    def item_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def items_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class BreadcrumbBar(winrt.system.Object, metaclass=BreadcrumbBar_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BreadcrumbBar: ...
    def __new__(cls: typing.Type[BreadcrumbBar]) -> BreadcrumbBar: ...
    def add_item_clicked(self, handler: windows_foundation.TypedEventHandler[BreadcrumbBar, BreadcrumbBarItemClickedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_item_clicked(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def items_source(self) -> typing.Optional[winrt.system.Object]: ...
    @items_source.setter
    def items_source(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def item_template(self) -> typing.Optional[winrt.system.Object]: ...
    @item_template.setter
    def item_template(self, value: typing.Optional[winrt.system.Object]) -> None: ...

@typing.final
class BreadcrumbBarItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BreadcrumbBarItem: ...
    def __new__(cls: typing.Type[BreadcrumbBarItem]) -> BreadcrumbBarItem: ...

@typing.final
class BreadcrumbBarItemClickedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BreadcrumbBarItemClickedEventArgs: ...
    @_property
    def index(self) -> winrt.system.Int32: ...
    @_property
    def item(self) -> typing.Optional[winrt.system.Object]: ...

@typing.final
class Button_Static(type):
    @_property
    def flyout_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class Button(winrt.system.Object, metaclass=Button_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Button: ...
    def __new__(cls: typing.Type[Button]) -> Button: ...
    @_property
    def flyout(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]: ...
    @flyout.setter
    def flyout(self, value: typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]) -> None: ...

@typing.final
class CalendarDatePicker_Static(type):
    @_property
    def calendar_identifier_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def calendar_view_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def date_format_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def date_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def day_of_week_format_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def description_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def display_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def first_day_of_week_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_calendar_open_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_group_label_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_out_of_scope_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_today_highlighted_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def light_dismiss_overlay_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_date_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def min_date_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def placeholder_text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class CalendarDatePicker(winrt.system.Object, metaclass=CalendarDatePicker_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CalendarDatePicker: ...
    def __new__(cls: typing.Type[CalendarDatePicker]) -> CalendarDatePicker: ...
    def set_display_date(self, date: datetime.datetime, /) -> None: ...
    def set_year_decade_display_dimensions(self, columns: winrt.system.Int32, rows: winrt.system.Int32, /) -> None: ...
    def add_calendar_view_day_item_changing(self, handler: typing.Optional[CalendarViewDayItemChangingEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_calendar_view_day_item_changing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_date_changed(self, handler: windows_foundation.TypedEventHandler[CalendarDatePicker, CalendarDatePickerDateChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_date_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_opened(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_opened(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def placeholder_text(self) -> str: ...
    @placeholder_text.setter
    def placeholder_text(self, value: str) -> None: ...
    @_property
    def min_date(self) -> datetime.datetime: ...
    @min_date.setter
    def min_date(self, value: datetime.datetime) -> None: ...
    @_property
    def max_date(self) -> datetime.datetime: ...
    @max_date.setter
    def max_date(self, value: datetime.datetime) -> None: ...
    @_property
    def light_dismiss_overlay_mode(self) -> LightDismissOverlayMode: ...
    @light_dismiss_overlay_mode.setter
    def light_dismiss_overlay_mode(self, value: LightDismissOverlayMode) -> None: ...
    @_property
    def is_today_highlighted(self) -> bool: ...
    @is_today_highlighted.setter
    def is_today_highlighted(self, value: bool) -> None: ...
    @_property
    def is_out_of_scope_enabled(self) -> bool: ...
    @is_out_of_scope_enabled.setter
    def is_out_of_scope_enabled(self, value: bool) -> None: ...
    @_property
    def is_group_label_visible(self) -> bool: ...
    @is_group_label_visible.setter
    def is_group_label_visible(self, value: bool) -> None: ...
    @_property
    def is_calendar_open(self) -> bool: ...
    @is_calendar_open.setter
    def is_calendar_open(self, value: bool) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def first_day_of_week(self) -> windows_globalization.DayOfWeek: ...
    @first_day_of_week.setter
    def first_day_of_week(self, value: windows_globalization.DayOfWeek) -> None: ...
    @_property
    def display_mode(self) -> CalendarViewDisplayMode: ...
    @display_mode.setter
    def display_mode(self, value: CalendarViewDisplayMode) -> None: ...
    @_property
    def description(self) -> typing.Optional[winrt.system.Object]: ...
    @description.setter
    def description(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def day_of_week_format(self) -> str: ...
    @day_of_week_format.setter
    def day_of_week_format(self, value: str) -> None: ...
    @_property
    def date_format(self) -> str: ...
    @date_format.setter
    def date_format(self, value: str) -> None: ...
    @_property
    def date(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @date.setter
    def date(self, value: typing.Optional[typing.Optional[datetime.datetime]]) -> None: ...
    @_property
    def calendar_view_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @calendar_view_style.setter
    def calendar_view_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def calendar_identifier(self) -> str: ...
    @calendar_identifier.setter
    def calendar_identifier(self, value: str) -> None: ...

@typing.final
class CalendarDatePickerDateChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CalendarDatePickerDateChangedEventArgs: ...
    @_property
    def new_date(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @_property
    def old_date(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...

@typing.final
class CalendarView_Static(type):
    @_property
    def blackout_background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def blackout_foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def blackout_strikethrough_brush_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def calendar_identifier_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def calendar_item_background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def calendar_item_border_brush_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def calendar_item_border_thickness_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def calendar_item_corner_radius_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def calendar_item_disabled_background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def calendar_item_foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def calendar_item_hover_background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def calendar_item_pressed_background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def calendar_view_day_item_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def day_item_font_family_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def day_item_font_size_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def day_item_font_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def day_item_font_weight_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def day_item_margin_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def day_of_week_format_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def disabled_foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def display_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def first_day_of_week_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def first_of_month_label_font_family_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def first_of_month_label_font_size_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def first_of_month_label_font_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def first_of_month_label_font_weight_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def first_of_month_label_margin_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def first_of_year_decade_label_font_family_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def first_of_year_decade_label_font_size_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def first_of_year_decade_label_font_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def first_of_year_decade_label_font_weight_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def first_of_year_decade_label_margin_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def focus_border_brush_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_day_item_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_first_of_month_label_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def hover_border_brush_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_group_label_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_out_of_scope_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_today_highlighted_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_date_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def min_date_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def month_year_item_font_family_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def month_year_item_font_size_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def month_year_item_font_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def month_year_item_font_weight_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def month_year_item_margin_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def number_of_weeks_in_view_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def out_of_scope_background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def out_of_scope_foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def out_of_scope_hover_foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def out_of_scope_pressed_foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pressed_border_brush_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pressed_foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_border_brush_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_dates_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_disabled_border_brush_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_disabled_foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_hover_border_brush_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_hover_foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_pressed_border_brush_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_pressed_foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def template_settings_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def today_background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def today_blackout_background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def today_blackout_foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def today_disabled_background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def today_font_weight_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def today_foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def today_hover_background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def today_pressed_background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def today_selected_inner_border_brush_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_day_item_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_first_of_month_label_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class CalendarView(winrt.system.Object, metaclass=CalendarView_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CalendarView: ...
    def __new__(cls: typing.Type[CalendarView]) -> CalendarView: ...
    def set_display_date(self, date: datetime.datetime, /) -> None: ...
    def set_year_decade_display_dimensions(self, columns: winrt.system.Int32, rows: winrt.system.Int32, /) -> None: ...
    def add_calendar_view_day_item_changing(self, handler: windows_foundation.TypedEventHandler[CalendarView, CalendarViewDayItemChangingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_calendar_view_day_item_changing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_selected_dates_changed(self, handler: windows_foundation.TypedEventHandler[CalendarView, CalendarViewSelectedDatesChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_selected_dates_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def day_item_margin(self) -> microsoft_ui_xaml.Thickness: ...
    @day_item_margin.setter
    def day_item_margin(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def day_item_font_weight(self) -> windows_ui_text.FontWeight: ...
    @day_item_font_weight.setter
    def day_item_font_weight(self, value: windows_ui_text.FontWeight) -> None: ...
    @_property
    def day_item_font_style(self) -> windows_ui_text.FontStyle: ...
    @day_item_font_style.setter
    def day_item_font_style(self, value: windows_ui_text.FontStyle) -> None: ...
    @_property
    def day_item_font_size(self) -> winrt.system.Double: ...
    @day_item_font_size.setter
    def day_item_font_size(self, value: winrt.system.Double) -> None: ...
    @_property
    def day_item_font_family(self) -> typing.Optional[microsoft_ui_xaml_media.FontFamily]: ...
    @day_item_font_family.setter
    def day_item_font_family(self, value: typing.Optional[microsoft_ui_xaml_media.FontFamily]) -> None: ...
    @_property
    def calendar_view_day_item_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @calendar_view_day_item_style.setter
    def calendar_view_day_item_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def calendar_item_pressed_background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @calendar_item_pressed_background.setter
    def calendar_item_pressed_background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def calendar_item_hover_background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @calendar_item_hover_background.setter
    def calendar_item_hover_background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def today_blackout_background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @today_blackout_background.setter
    def today_blackout_background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def calendar_item_disabled_background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @calendar_item_disabled_background.setter
    def calendar_item_disabled_background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def calendar_item_corner_radius(self) -> microsoft_ui_xaml.CornerRadius: ...
    @calendar_item_corner_radius.setter
    def calendar_item_corner_radius(self, value: microsoft_ui_xaml.CornerRadius) -> None: ...
    @_property
    def calendar_item_border_thickness(self) -> microsoft_ui_xaml.Thickness: ...
    @calendar_item_border_thickness.setter
    def calendar_item_border_thickness(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def calendar_item_border_brush(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @calendar_item_border_brush.setter
    def calendar_item_border_brush(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def calendar_item_background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @calendar_item_background.setter
    def calendar_item_background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def calendar_identifier(self) -> str: ...
    @calendar_identifier.setter
    def calendar_identifier(self, value: str) -> None: ...
    @_property
    def blackout_strikethrough_brush(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @blackout_strikethrough_brush.setter
    def blackout_strikethrough_brush(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def blackout_foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @blackout_foreground.setter
    def blackout_foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def is_group_label_visible(self) -> bool: ...
    @is_group_label_visible.setter
    def is_group_label_visible(self, value: bool) -> None: ...
    @_property
    def blackout_background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @blackout_background.setter
    def blackout_background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def day_of_week_format(self) -> str: ...
    @day_of_week_format.setter
    def day_of_week_format(self, value: str) -> None: ...
    @_property
    def hover_border_brush(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @hover_border_brush.setter
    def hover_border_brush(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def horizontal_first_of_month_label_alignment(self) -> microsoft_ui_xaml.HorizontalAlignment: ...
    @horizontal_first_of_month_label_alignment.setter
    def horizontal_first_of_month_label_alignment(self, value: microsoft_ui_xaml.HorizontalAlignment) -> None: ...
    @_property
    def horizontal_day_item_alignment(self) -> microsoft_ui_xaml.HorizontalAlignment: ...
    @horizontal_day_item_alignment.setter
    def horizontal_day_item_alignment(self, value: microsoft_ui_xaml.HorizontalAlignment) -> None: ...
    @_property
    def focus_border_brush(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @focus_border_brush.setter
    def focus_border_brush(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def first_of_year_decade_label_margin(self) -> microsoft_ui_xaml.Thickness: ...
    @first_of_year_decade_label_margin.setter
    def first_of_year_decade_label_margin(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def first_of_year_decade_label_font_weight(self) -> windows_ui_text.FontWeight: ...
    @first_of_year_decade_label_font_weight.setter
    def first_of_year_decade_label_font_weight(self, value: windows_ui_text.FontWeight) -> None: ...
    @_property
    def first_of_year_decade_label_font_style(self) -> windows_ui_text.FontStyle: ...
    @first_of_year_decade_label_font_style.setter
    def first_of_year_decade_label_font_style(self, value: windows_ui_text.FontStyle) -> None: ...
    @_property
    def number_of_weeks_in_view(self) -> winrt.system.Int32: ...
    @number_of_weeks_in_view.setter
    def number_of_weeks_in_view(self, value: winrt.system.Int32) -> None: ...
    @_property
    def first_of_year_decade_label_font_family(self) -> typing.Optional[microsoft_ui_xaml_media.FontFamily]: ...
    @first_of_year_decade_label_font_family.setter
    def first_of_year_decade_label_font_family(self, value: typing.Optional[microsoft_ui_xaml_media.FontFamily]) -> None: ...
    @_property
    def first_of_month_label_margin(self) -> microsoft_ui_xaml.Thickness: ...
    @first_of_month_label_margin.setter
    def first_of_month_label_margin(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def first_of_month_label_font_weight(self) -> windows_ui_text.FontWeight: ...
    @first_of_month_label_font_weight.setter
    def first_of_month_label_font_weight(self, value: windows_ui_text.FontWeight) -> None: ...
    @_property
    def first_of_month_label_font_style(self) -> windows_ui_text.FontStyle: ...
    @first_of_month_label_font_style.setter
    def first_of_month_label_font_style(self, value: windows_ui_text.FontStyle) -> None: ...
    @_property
    def first_of_month_label_font_size(self) -> winrt.system.Double: ...
    @first_of_month_label_font_size.setter
    def first_of_month_label_font_size(self, value: winrt.system.Double) -> None: ...
    @_property
    def first_of_month_label_font_family(self) -> typing.Optional[microsoft_ui_xaml_media.FontFamily]: ...
    @first_of_month_label_font_family.setter
    def first_of_month_label_font_family(self, value: typing.Optional[microsoft_ui_xaml_media.FontFamily]) -> None: ...
    @_property
    def first_day_of_week(self) -> windows_globalization.DayOfWeek: ...
    @first_day_of_week.setter
    def first_day_of_week(self, value: windows_globalization.DayOfWeek) -> None: ...
    @_property
    def display_mode(self) -> CalendarViewDisplayMode: ...
    @display_mode.setter
    def display_mode(self, value: CalendarViewDisplayMode) -> None: ...
    @_property
    def disabled_foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @disabled_foreground.setter
    def disabled_foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def is_out_of_scope_enabled(self) -> bool: ...
    @is_out_of_scope_enabled.setter
    def is_out_of_scope_enabled(self, value: bool) -> None: ...
    @_property
    def selected_disabled_border_brush(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @selected_disabled_border_brush.setter
    def selected_disabled_border_brush(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def selected_border_brush(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @selected_border_brush.setter
    def selected_border_brush(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def pressed_foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @pressed_foreground.setter
    def pressed_foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def pressed_border_brush(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @pressed_border_brush.setter
    def pressed_border_brush(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def out_of_scope_pressed_foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @out_of_scope_pressed_foreground.setter
    def out_of_scope_pressed_foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def out_of_scope_hover_foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @out_of_scope_hover_foreground.setter
    def out_of_scope_hover_foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def out_of_scope_foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @out_of_scope_foreground.setter
    def out_of_scope_foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def out_of_scope_background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @out_of_scope_background.setter
    def out_of_scope_background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def first_of_year_decade_label_font_size(self) -> winrt.system.Double: ...
    @first_of_year_decade_label_font_size.setter
    def first_of_year_decade_label_font_size(self, value: winrt.system.Double) -> None: ...
    @_property
    def month_year_item_margin(self) -> microsoft_ui_xaml.Thickness: ...
    @month_year_item_margin.setter
    def month_year_item_margin(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def month_year_item_font_weight(self) -> windows_ui_text.FontWeight: ...
    @month_year_item_font_weight.setter
    def month_year_item_font_weight(self, value: windows_ui_text.FontWeight) -> None: ...
    @_property
    def month_year_item_font_style(self) -> windows_ui_text.FontStyle: ...
    @month_year_item_font_style.setter
    def month_year_item_font_style(self, value: windows_ui_text.FontStyle) -> None: ...
    @_property
    def month_year_item_font_size(self) -> winrt.system.Double: ...
    @month_year_item_font_size.setter
    def month_year_item_font_size(self, value: winrt.system.Double) -> None: ...
    @_property
    def month_year_item_font_family(self) -> typing.Optional[microsoft_ui_xaml_media.FontFamily]: ...
    @month_year_item_font_family.setter
    def month_year_item_font_family(self, value: typing.Optional[microsoft_ui_xaml_media.FontFamily]) -> None: ...
    @_property
    def min_date(self) -> datetime.datetime: ...
    @min_date.setter
    def min_date(self, value: datetime.datetime) -> None: ...
    @_property
    def max_date(self) -> datetime.datetime: ...
    @max_date.setter
    def max_date(self, value: datetime.datetime) -> None: ...
    @_property
    def selected_disabled_foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @selected_disabled_foreground.setter
    def selected_disabled_foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def vertical_first_of_month_label_alignment(self) -> microsoft_ui_xaml.VerticalAlignment: ...
    @vertical_first_of_month_label_alignment.setter
    def vertical_first_of_month_label_alignment(self, value: microsoft_ui_xaml.VerticalAlignment) -> None: ...
    @_property
    def is_today_highlighted(self) -> bool: ...
    @is_today_highlighted.setter
    def is_today_highlighted(self, value: bool) -> None: ...
    @_property
    def vertical_day_item_alignment(self) -> microsoft_ui_xaml.VerticalAlignment: ...
    @vertical_day_item_alignment.setter
    def vertical_day_item_alignment(self, value: microsoft_ui_xaml.VerticalAlignment) -> None: ...
    @_property
    def today_selected_inner_border_brush(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @today_selected_inner_border_brush.setter
    def today_selected_inner_border_brush(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def today_pressed_background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @today_pressed_background.setter
    def today_pressed_background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def today_hover_background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @today_hover_background.setter
    def today_hover_background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def today_foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @today_foreground.setter
    def today_foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def today_font_weight(self) -> windows_ui_text.FontWeight: ...
    @today_font_weight.setter
    def today_font_weight(self, value: windows_ui_text.FontWeight) -> None: ...
    @_property
    def today_disabled_background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @today_disabled_background.setter
    def today_disabled_background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def today_blackout_foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @today_blackout_foreground.setter
    def today_blackout_foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def calendar_item_foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @calendar_item_foreground.setter
    def calendar_item_foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def today_background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @today_background.setter
    def today_background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def selection_mode(self) -> CalendarViewSelectionMode: ...
    @selection_mode.setter
    def selection_mode(self, value: CalendarViewSelectionMode) -> None: ...
    @_property
    def selected_pressed_foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @selected_pressed_foreground.setter
    def selected_pressed_foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def selected_pressed_border_brush(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @selected_pressed_border_brush.setter
    def selected_pressed_border_brush(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def selected_hover_foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @selected_hover_foreground.setter
    def selected_hover_foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def selected_hover_border_brush(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @selected_hover_border_brush.setter
    def selected_hover_border_brush(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def selected_foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @selected_foreground.setter
    def selected_foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def selected_dates(self) -> typing.Optional[windows_foundation_collections.IVector[datetime.datetime]]: ...
    @_property
    def template_settings(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.CalendarViewTemplateSettings]: ...

@typing.final
class CalendarViewDayItem_Static(type):
    @_property
    def date_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_blackout_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class CalendarViewDayItem(winrt.system.Object, metaclass=CalendarViewDayItem_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CalendarViewDayItem: ...
    def __new__(cls: typing.Type[CalendarViewDayItem]) -> CalendarViewDayItem: ...
    def set_density_colors(self, colors: typing.Iterable[windows_ui.Color], /) -> None: ...
    @_property
    def is_blackout(self) -> bool: ...
    @is_blackout.setter
    def is_blackout(self, value: bool) -> None: ...
    @_property
    def date(self) -> datetime.datetime: ...

@typing.final
class CalendarViewDayItemChangingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CalendarViewDayItemChangingEventArgs: ...
    @typing.overload
    def register_update_callback(self, callback: windows_foundation.TypedEventHandler[CalendarView, CalendarViewDayItemChangingEventArgs], /) -> None: ...
    @typing.overload
    def register_update_callback(self, callback_phase: winrt.system.UInt32, callback: windows_foundation.TypedEventHandler[CalendarView, CalendarViewDayItemChangingEventArgs], /) -> None: ...
    @_property
    def in_recycle_queue(self) -> bool: ...
    @_property
    def item(self) -> typing.Optional[CalendarViewDayItem]: ...
    @_property
    def phase(self) -> winrt.system.UInt32: ...

@typing.final
class CalendarViewSelectedDatesChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CalendarViewSelectedDatesChangedEventArgs: ...
    @_property
    def added_dates(self) -> typing.Optional[windows_foundation_collections.IVectorView[datetime.datetime]]: ...
    @_property
    def removed_dates(self) -> typing.Optional[windows_foundation_collections.IVectorView[datetime.datetime]]: ...

@typing.final
class CandidateWindowBoundsChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CandidateWindowBoundsChangedEventArgs: ...
    @_property
    def bounds(self) -> windows_foundation.Rect: ...

@typing.final
class Canvas_Static(type):
    def get_left(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> winrt.system.Double: ...
    def get_top(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> winrt.system.Double: ...
    def get_z_index(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> winrt.system.Int32: ...
    def set_left(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], length: winrt.system.Double, /) -> None: ...
    def set_top(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], length: winrt.system.Double, /) -> None: ...
    def set_z_index(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: winrt.system.Int32, /) -> None: ...
    @_property
    def left_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def top_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def z_index_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class Canvas(winrt.system.Object, metaclass=Canvas_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Canvas: ...
    def __new__(cls: typing.Type[Canvas]) -> Canvas: ...

@typing.final
class CheckBox(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CheckBox: ...
    def __new__(cls: typing.Type[CheckBox]) -> CheckBox: ...

@typing.final
class ChoosingGroupHeaderContainerEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ChoosingGroupHeaderContainerEventArgs: ...
    def __new__(cls: typing.Type[ChoosingGroupHeaderContainerEventArgs]) -> ChoosingGroupHeaderContainerEventArgs: ...
    @_property
    def group_header_container(self) -> typing.Optional[ListViewBaseHeaderItem]: ...
    @group_header_container.setter
    def group_header_container(self, value: typing.Optional[ListViewBaseHeaderItem]) -> None: ...
    @_property
    def group(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def group_index(self) -> winrt.system.Int32: ...

@typing.final
class ChoosingItemContainerEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ChoosingItemContainerEventArgs: ...
    def __new__(cls: typing.Type[ChoosingItemContainerEventArgs]) -> ChoosingItemContainerEventArgs: ...
    @_property
    def item_container(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.SelectorItem]: ...
    @item_container.setter
    def item_container(self, value: typing.Optional[microsoft_ui_xaml_controls_primitives.SelectorItem]) -> None: ...
    @_property
    def is_container_prepared(self) -> bool: ...
    @is_container_prepared.setter
    def is_container_prepared(self, value: bool) -> None: ...
    @_property
    def item(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def item_index(self) -> winrt.system.Int32: ...

@typing.final
class CleanUpVirtualizedItemEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CleanUpVirtualizedItemEventArgs: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def u_i_element(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @_property
    def value(self) -> typing.Optional[winrt.system.Object]: ...

@typing.final
class ColorChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ColorChangedEventArgs: ...
    @_property
    def new_color(self) -> windows_ui.Color: ...
    @_property
    def old_color(self) -> windows_ui.Color: ...

@typing.final
class ColorPicker_Static(type):
    @_property
    def color_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def color_spectrum_components_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def color_spectrum_shape_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_alpha_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_alpha_slider_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_alpha_text_input_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_color_channel_text_input_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_color_preview_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_color_slider_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_color_spectrum_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_hex_input_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_more_button_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_hue_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_saturation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_value_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def min_hue_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def min_saturation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def min_value_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def previous_color_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def orientation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ColorPicker(winrt.system.Object, metaclass=ColorPicker_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ColorPicker: ...
    def __new__(cls: typing.Type[ColorPicker]) -> ColorPicker: ...
    def add_color_changed(self, handler: windows_foundation.TypedEventHandler[ColorPicker, ColorChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_color_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def previous_color(self) -> typing.Optional[typing.Optional[windows_ui.Color]]: ...
    @previous_color.setter
    def previous_color(self, value: typing.Optional[typing.Optional[windows_ui.Color]]) -> None: ...
    @_property
    def min_value(self) -> winrt.system.Int32: ...
    @min_value.setter
    def min_value(self, value: winrt.system.Int32) -> None: ...
    @_property
    def min_saturation(self) -> winrt.system.Int32: ...
    @min_saturation.setter
    def min_saturation(self, value: winrt.system.Int32) -> None: ...
    @_property
    def min_hue(self) -> winrt.system.Int32: ...
    @min_hue.setter
    def min_hue(self, value: winrt.system.Int32) -> None: ...
    @_property
    def max_value(self) -> winrt.system.Int32: ...
    @max_value.setter
    def max_value(self, value: winrt.system.Int32) -> None: ...
    @_property
    def max_saturation(self) -> winrt.system.Int32: ...
    @max_saturation.setter
    def max_saturation(self, value: winrt.system.Int32) -> None: ...
    @_property
    def max_hue(self) -> winrt.system.Int32: ...
    @max_hue.setter
    def max_hue(self, value: winrt.system.Int32) -> None: ...
    @_property
    def is_more_button_visible(self) -> bool: ...
    @is_more_button_visible.setter
    def is_more_button_visible(self, value: bool) -> None: ...
    @_property
    def is_hex_input_visible(self) -> bool: ...
    @is_hex_input_visible.setter
    def is_hex_input_visible(self, value: bool) -> None: ...
    @_property
    def is_color_spectrum_visible(self) -> bool: ...
    @is_color_spectrum_visible.setter
    def is_color_spectrum_visible(self, value: bool) -> None: ...
    @_property
    def is_color_slider_visible(self) -> bool: ...
    @is_color_slider_visible.setter
    def is_color_slider_visible(self, value: bool) -> None: ...
    @_property
    def is_color_preview_visible(self) -> bool: ...
    @is_color_preview_visible.setter
    def is_color_preview_visible(self, value: bool) -> None: ...
    @_property
    def is_color_channel_text_input_visible(self) -> bool: ...
    @is_color_channel_text_input_visible.setter
    def is_color_channel_text_input_visible(self, value: bool) -> None: ...
    @_property
    def is_alpha_text_input_visible(self) -> bool: ...
    @is_alpha_text_input_visible.setter
    def is_alpha_text_input_visible(self, value: bool) -> None: ...
    @_property
    def is_alpha_slider_visible(self) -> bool: ...
    @is_alpha_slider_visible.setter
    def is_alpha_slider_visible(self, value: bool) -> None: ...
    @_property
    def is_alpha_enabled(self) -> bool: ...
    @is_alpha_enabled.setter
    def is_alpha_enabled(self, value: bool) -> None: ...
    @_property
    def color_spectrum_shape(self) -> ColorSpectrumShape: ...
    @color_spectrum_shape.setter
    def color_spectrum_shape(self, value: ColorSpectrumShape) -> None: ...
    @_property
    def color_spectrum_components(self) -> ColorSpectrumComponents: ...
    @color_spectrum_components.setter
    def color_spectrum_components(self, value: ColorSpectrumComponents) -> None: ...
    @_property
    def color(self) -> windows_ui.Color: ...
    @color.setter
    def color(self, value: windows_ui.Color) -> None: ...
    @_property
    def orientation(self) -> Orientation: ...
    @orientation.setter
    def orientation(self, value: Orientation) -> None: ...

@typing.final
class ColumnDefinition_Static(type):
    @_property
    def max_width_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def min_width_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def width_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ColumnDefinition(winrt.system.Object, metaclass=ColumnDefinition_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ColumnDefinition: ...
    def __new__(cls: typing.Type[ColumnDefinition]) -> ColumnDefinition: ...
    @_property
    def width(self) -> microsoft_ui_xaml.GridLength: ...
    @width.setter
    def width(self, value: microsoft_ui_xaml.GridLength) -> None: ...
    @_property
    def min_width(self) -> winrt.system.Double: ...
    @min_width.setter
    def min_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def max_width(self) -> winrt.system.Double: ...
    @max_width.setter
    def max_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def actual_width(self) -> winrt.system.Double: ...

@typing.final
class ColumnDefinitionCollection(winrt.system.Object, winrt._winrt.MutableSequence[ColumnDefinition]):
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[ColumnDefinition]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> ColumnDefinition: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[ColumnDefinition]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: ColumnDefinition) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[ColumnDefinition]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ColumnDefinitionCollection: ...
    def append(self, value: typing.Optional[ColumnDefinition], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[windows_foundation_collections.IIterator[ColumnDefinition]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[ColumnDefinition]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[ColumnDefinition], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[windows_foundation_collections.IVectorView[ColumnDefinition]]: ...
    def index_of(self, value: typing.Optional[ColumnDefinition], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[ColumnDefinition], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[ColumnDefinition], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[ColumnDefinition], /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class ComboBox_Static(type):
    @_property
    def description_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_drop_down_open_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_editable_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_text_search_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def light_dismiss_overlay_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_drop_down_height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def placeholder_foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def placeholder_text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_changed_trigger_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_box_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ComboBox(winrt.system.Object, metaclass=ComboBox_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ComboBox: ...
    def __new__(cls: typing.Type[ComboBox]) -> ComboBox: ...
    def add_drop_down_closed(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drop_down_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drop_down_opened(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drop_down_opened(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_text_submitted(self, handler: windows_foundation.TypedEventHandler[ComboBox, ComboBoxTextSubmittedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_text_submitted(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def text_box_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @text_box_style.setter
    def text_box_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> None: ...
    @_property
    def selection_changed_trigger(self) -> ComboBoxSelectionChangedTrigger: ...
    @selection_changed_trigger.setter
    def selection_changed_trigger(self, value: ComboBoxSelectionChangedTrigger) -> None: ...
    @_property
    def placeholder_text(self) -> str: ...
    @placeholder_text.setter
    def placeholder_text(self, value: str) -> None: ...
    @_property
    def placeholder_foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @placeholder_foreground.setter
    def placeholder_foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def max_drop_down_height(self) -> winrt.system.Double: ...
    @max_drop_down_height.setter
    def max_drop_down_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def light_dismiss_overlay_mode(self) -> LightDismissOverlayMode: ...
    @light_dismiss_overlay_mode.setter
    def light_dismiss_overlay_mode(self, value: LightDismissOverlayMode) -> None: ...
    @_property
    def is_text_search_enabled(self) -> bool: ...
    @is_text_search_enabled.setter
    def is_text_search_enabled(self, value: bool) -> None: ...
    @_property
    def is_editable(self) -> bool: ...
    @is_editable.setter
    def is_editable(self, value: bool) -> None: ...
    @_property
    def is_drop_down_open(self) -> bool: ...
    @is_drop_down_open.setter
    def is_drop_down_open(self, value: bool) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def description(self) -> typing.Optional[winrt.system.Object]: ...
    @description.setter
    def description(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def is_selection_box_highlighted(self) -> bool: ...
    @_property
    def selection_box_item(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def selection_box_item_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @_property
    def template_settings(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.ComboBoxTemplateSettings]: ...

@typing.final
class ComboBoxItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ComboBoxItem: ...
    def __new__(cls: typing.Type[ComboBoxItem]) -> ComboBoxItem: ...

@typing.final
class ComboBoxTextSubmittedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ComboBoxTextSubmittedEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def text(self) -> str: ...

@typing.final
class CommandBar_Static(type):
    @_property
    def command_bar_overflow_presenter_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def default_label_position_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_dynamic_overflow_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def overflow_button_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def primary_commands_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def secondary_commands_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class CommandBar(winrt.system.Object, metaclass=CommandBar_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CommandBar: ...
    def __new__(cls: typing.Type[CommandBar]) -> CommandBar: ...
    def add_dynamic_overflow_items_changing(self, handler: windows_foundation.TypedEventHandler[CommandBar, DynamicOverflowItemsChangingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_dynamic_overflow_items_changing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def overflow_button_visibility(self) -> CommandBarOverflowButtonVisibility: ...
    @overflow_button_visibility.setter
    def overflow_button_visibility(self, value: CommandBarOverflowButtonVisibility) -> None: ...
    @_property
    def is_dynamic_overflow_enabled(self) -> bool: ...
    @is_dynamic_overflow_enabled.setter
    def is_dynamic_overflow_enabled(self, value: bool) -> None: ...
    @_property
    def default_label_position(self) -> CommandBarDefaultLabelPosition: ...
    @default_label_position.setter
    def default_label_position(self, value: CommandBarDefaultLabelPosition) -> None: ...
    @_property
    def command_bar_overflow_presenter_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @command_bar_overflow_presenter_style.setter
    def command_bar_overflow_presenter_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def command_bar_template_settings(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.CommandBarTemplateSettings]: ...
    @_property
    def primary_commands(self) -> typing.Optional[windows_foundation_collections.IObservableVector[ICommandBarElement]]: ...
    @_property
    def secondary_commands(self) -> typing.Optional[windows_foundation_collections.IObservableVector[ICommandBarElement]]: ...

@typing.final
class CommandBarFlyout(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CommandBarFlyout: ...
    def __new__(cls: typing.Type[CommandBarFlyout]) -> CommandBarFlyout: ...
    @_property
    def primary_commands(self) -> typing.Optional[windows_foundation_collections.IObservableVector[ICommandBarElement]]: ...
    @_property
    def secondary_commands(self) -> typing.Optional[windows_foundation_collections.IObservableVector[ICommandBarElement]]: ...
    @_property
    def always_expanded(self) -> bool: ...
    @always_expanded.setter
    def always_expanded(self, value: bool) -> None: ...

@typing.final
class CommandBarOverflowPresenter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CommandBarOverflowPresenter: ...
    def __new__(cls: typing.Type[CommandBarOverflowPresenter]) -> CommandBarOverflowPresenter: ...

@typing.final
class ContainerContentChangingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContainerContentChangingEventArgs: ...
    def __new__(cls: typing.Type[ContainerContentChangingEventArgs]) -> ContainerContentChangingEventArgs: ...
    @typing.overload
    def register_update_callback(self, callback: windows_foundation.TypedEventHandler[ListViewBase, ContainerContentChangingEventArgs], /) -> None: ...
    @typing.overload
    def register_update_callback(self, callback_phase: winrt.system.UInt32, callback: windows_foundation.TypedEventHandler[ListViewBase, ContainerContentChangingEventArgs], /) -> None: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def in_recycle_queue(self) -> bool: ...
    @_property
    def item(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def item_container(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.SelectorItem]: ...
    @_property
    def item_index(self) -> winrt.system.Int32: ...
    @_property
    def phase(self) -> winrt.system.UInt32: ...

@typing.final
class ContentControl_Static(type):
    @_property
    def content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def content_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def content_template_selector_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def content_transitions_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ContentControl(winrt.system.Object, metaclass=ContentControl_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContentControl: ...
    def __new__(cls: typing.Type[ContentControl]) -> ContentControl: ...
    @_property
    def content_transitions(self) -> typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]: ...
    @content_transitions.setter
    def content_transitions(self, value: typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]) -> None: ...
    @_property
    def content_template_selector(self) -> typing.Optional[DataTemplateSelector]: ...
    @content_template_selector.setter
    def content_template_selector(self, value: typing.Optional[DataTemplateSelector]) -> None: ...
    @_property
    def content_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @content_template.setter
    def content_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def content(self) -> typing.Optional[winrt.system.Object]: ...
    @content.setter
    def content(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def content_template_root(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...

@typing.final
class ContentDialog_Static(type):
    @_property
    def close_button_command_parameter_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def close_button_command_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def close_button_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def close_button_text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def default_button_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def full_size_desired_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_primary_button_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_secondary_button_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def primary_button_command_parameter_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def primary_button_command_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def primary_button_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def primary_button_text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def secondary_button_command_parameter_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def secondary_button_command_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def secondary_button_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def secondary_button_text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def title_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def title_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ContentDialog(winrt.system.Object, metaclass=ContentDialog_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContentDialog: ...
    def __new__(cls: typing.Type[ContentDialog]) -> ContentDialog: ...
    def hide(self) -> None: ...
    @typing.overload
    def show_async(self) -> windows_foundation.IAsyncOperation[ContentDialogResult]: ...
    @typing.overload
    def show_async(self, placement: ContentDialogPlacement, /) -> windows_foundation.IAsyncOperation[ContentDialogResult]: ...
    def add_close_button_click(self, handler: windows_foundation.TypedEventHandler[ContentDialog, ContentDialogButtonClickEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_close_button_click(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: windows_foundation.TypedEventHandler[ContentDialog, ContentDialogClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_closing(self, handler: windows_foundation.TypedEventHandler[ContentDialog, ContentDialogClosingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_opened(self, handler: windows_foundation.TypedEventHandler[ContentDialog, ContentDialogOpenedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_opened(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_primary_button_click(self, handler: windows_foundation.TypedEventHandler[ContentDialog, ContentDialogButtonClickEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_primary_button_click(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_secondary_button_click(self, handler: windows_foundation.TypedEventHandler[ContentDialog, ContentDialogButtonClickEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_secondary_button_click(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def title_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @title_template.setter
    def title_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def title(self) -> typing.Optional[winrt.system.Object]: ...
    @title.setter
    def title(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def secondary_button_text(self) -> str: ...
    @secondary_button_text.setter
    def secondary_button_text(self, value: str) -> None: ...
    @_property
    def secondary_button_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @secondary_button_style.setter
    def secondary_button_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def secondary_button_command_parameter(self) -> typing.Optional[winrt.system.Object]: ...
    @secondary_button_command_parameter.setter
    def secondary_button_command_parameter(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def secondary_button_command(self) -> typing.Optional[microsoft_ui_xaml_input.ICommand]: ...
    @secondary_button_command.setter
    def secondary_button_command(self, value: typing.Optional[microsoft_ui_xaml_input.ICommand]) -> None: ...
    @_property
    def primary_button_text(self) -> str: ...
    @primary_button_text.setter
    def primary_button_text(self, value: str) -> None: ...
    @_property
    def primary_button_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @primary_button_style.setter
    def primary_button_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def primary_button_command_parameter(self) -> typing.Optional[winrt.system.Object]: ...
    @primary_button_command_parameter.setter
    def primary_button_command_parameter(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def primary_button_command(self) -> typing.Optional[microsoft_ui_xaml_input.ICommand]: ...
    @primary_button_command.setter
    def primary_button_command(self, value: typing.Optional[microsoft_ui_xaml_input.ICommand]) -> None: ...
    @_property
    def is_secondary_button_enabled(self) -> bool: ...
    @is_secondary_button_enabled.setter
    def is_secondary_button_enabled(self, value: bool) -> None: ...
    @_property
    def is_primary_button_enabled(self) -> bool: ...
    @is_primary_button_enabled.setter
    def is_primary_button_enabled(self, value: bool) -> None: ...
    @_property
    def full_size_desired(self) -> bool: ...
    @full_size_desired.setter
    def full_size_desired(self, value: bool) -> None: ...
    @_property
    def default_button(self) -> ContentDialogButton: ...
    @default_button.setter
    def default_button(self, value: ContentDialogButton) -> None: ...
    @_property
    def close_button_text(self) -> str: ...
    @close_button_text.setter
    def close_button_text(self, value: str) -> None: ...
    @_property
    def close_button_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @close_button_style.setter
    def close_button_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def close_button_command_parameter(self) -> typing.Optional[winrt.system.Object]: ...
    @close_button_command_parameter.setter
    def close_button_command_parameter(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def close_button_command(self) -> typing.Optional[microsoft_ui_xaml_input.ICommand]: ...
    @close_button_command.setter
    def close_button_command(self, value: typing.Optional[microsoft_ui_xaml_input.ICommand]) -> None: ...

@typing.final
class ContentDialogButtonClickDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContentDialogButtonClickDeferral: ...
    def complete(self) -> None: ...

@typing.final
class ContentDialogButtonClickEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContentDialogButtonClickEventArgs: ...
    def get_deferral(self) -> typing.Optional[ContentDialogButtonClickDeferral]: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...

@typing.final
class ContentDialogClosedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContentDialogClosedEventArgs: ...
    @_property
    def result(self) -> ContentDialogResult: ...

@typing.final
class ContentDialogClosingDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContentDialogClosingDeferral: ...
    def complete(self) -> None: ...

@typing.final
class ContentDialogClosingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContentDialogClosingEventArgs: ...
    def get_deferral(self) -> typing.Optional[ContentDialogClosingDeferral]: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def result(self) -> ContentDialogResult: ...

@typing.final
class ContentDialogOpenedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContentDialogOpenedEventArgs: ...

@typing.final
class ContentPresenter_Static(type):
    @_property
    def background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def background_sizing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def border_brush_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def border_thickness_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def character_spacing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def content_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def content_template_selector_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def content_transitions_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def corner_radius_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_family_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_size_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_stretch_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_weight_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_content_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_text_scale_factor_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def line_height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def line_stacking_strategy_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_lines_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def optical_margin_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def padding_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_line_bounds_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_wrapping_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_content_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ContentPresenter(winrt.system.Object, metaclass=ContentPresenter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContentPresenter: ...
    def __new__(cls: typing.Type[ContentPresenter]) -> ContentPresenter: ...
    @_property
    def vertical_content_alignment(self) -> microsoft_ui_xaml.VerticalAlignment: ...
    @vertical_content_alignment.setter
    def vertical_content_alignment(self, value: microsoft_ui_xaml.VerticalAlignment) -> None: ...
    @_property
    def text_wrapping(self) -> microsoft_ui_xaml.TextWrapping: ...
    @text_wrapping.setter
    def text_wrapping(self, value: microsoft_ui_xaml.TextWrapping) -> None: ...
    @_property
    def text_line_bounds(self) -> microsoft_ui_xaml.TextLineBounds: ...
    @text_line_bounds.setter
    def text_line_bounds(self, value: microsoft_ui_xaml.TextLineBounds) -> None: ...
    @_property
    def padding(self) -> microsoft_ui_xaml.Thickness: ...
    @padding.setter
    def padding(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def optical_margin_alignment(self) -> microsoft_ui_xaml.OpticalMarginAlignment: ...
    @optical_margin_alignment.setter
    def optical_margin_alignment(self, value: microsoft_ui_xaml.OpticalMarginAlignment) -> None: ...
    @_property
    def max_lines(self) -> winrt.system.Int32: ...
    @max_lines.setter
    def max_lines(self, value: winrt.system.Int32) -> None: ...
    @_property
    def line_stacking_strategy(self) -> microsoft_ui_xaml.LineStackingStrategy: ...
    @line_stacking_strategy.setter
    def line_stacking_strategy(self, value: microsoft_ui_xaml.LineStackingStrategy) -> None: ...
    @_property
    def line_height(self) -> winrt.system.Double: ...
    @line_height.setter
    def line_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def is_text_scale_factor_enabled(self) -> bool: ...
    @is_text_scale_factor_enabled.setter
    def is_text_scale_factor_enabled(self, value: bool) -> None: ...
    @_property
    def horizontal_content_alignment(self) -> microsoft_ui_xaml.HorizontalAlignment: ...
    @horizontal_content_alignment.setter
    def horizontal_content_alignment(self, value: microsoft_ui_xaml.HorizontalAlignment) -> None: ...
    @_property
    def foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @foreground.setter
    def foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def font_weight(self) -> windows_ui_text.FontWeight: ...
    @font_weight.setter
    def font_weight(self, value: windows_ui_text.FontWeight) -> None: ...
    @_property
    def font_style(self) -> windows_ui_text.FontStyle: ...
    @font_style.setter
    def font_style(self, value: windows_ui_text.FontStyle) -> None: ...
    @_property
    def font_stretch(self) -> windows_ui_text.FontStretch: ...
    @font_stretch.setter
    def font_stretch(self, value: windows_ui_text.FontStretch) -> None: ...
    @_property
    def font_size(self) -> winrt.system.Double: ...
    @font_size.setter
    def font_size(self, value: winrt.system.Double) -> None: ...
    @_property
    def font_family(self) -> typing.Optional[microsoft_ui_xaml_media.FontFamily]: ...
    @font_family.setter
    def font_family(self, value: typing.Optional[microsoft_ui_xaml_media.FontFamily]) -> None: ...
    @_property
    def corner_radius(self) -> microsoft_ui_xaml.CornerRadius: ...
    @corner_radius.setter
    def corner_radius(self, value: microsoft_ui_xaml.CornerRadius) -> None: ...
    @_property
    def content_transitions(self) -> typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]: ...
    @content_transitions.setter
    def content_transitions(self, value: typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]) -> None: ...
    @_property
    def content_template_selector(self) -> typing.Optional[DataTemplateSelector]: ...
    @content_template_selector.setter
    def content_template_selector(self, value: typing.Optional[DataTemplateSelector]) -> None: ...
    @_property
    def content_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @content_template.setter
    def content_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def content(self) -> typing.Optional[winrt.system.Object]: ...
    @content.setter
    def content(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def character_spacing(self) -> winrt.system.Int32: ...
    @character_spacing.setter
    def character_spacing(self, value: winrt.system.Int32) -> None: ...
    @_property
    def border_thickness(self) -> microsoft_ui_xaml.Thickness: ...
    @border_thickness.setter
    def border_thickness(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def border_brush(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @border_brush.setter
    def border_brush(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def background_transition(self) -> typing.Optional[microsoft_ui_xaml.BrushTransition]: ...
    @background_transition.setter
    def background_transition(self, value: typing.Optional[microsoft_ui_xaml.BrushTransition]) -> None: ...
    @_property
    def background_sizing(self) -> BackgroundSizing: ...
    @background_sizing.setter
    def background_sizing(self, value: BackgroundSizing) -> None: ...
    @_property
    def background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @background.setter
    def background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...

@typing.final
class ContextMenuEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContextMenuEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def cursor_left(self) -> winrt.system.Double: ...
    @_property
    def cursor_top(self) -> winrt.system.Double: ...

@typing.final
class Control_Static(type):
    def get_is_template_focus_target(cls, element: typing.Optional[microsoft_ui_xaml.FrameworkElement], /) -> bool: ...
    def get_is_template_key_tip_target(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> bool: ...
    def set_is_template_focus_target(cls, element: typing.Optional[microsoft_ui_xaml.FrameworkElement], value: bool, /) -> None: ...
    def set_is_template_key_tip_target(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], value: bool, /) -> None: ...
    @_property
    def background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def background_sizing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def border_brush_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def border_thickness_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def character_spacing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def corner_radius_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def default_style_key_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def default_style_resource_uri_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def element_sound_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_family_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_size_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_stretch_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_weight_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_content_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_focus_engaged_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_focus_engagement_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_template_focus_target_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_template_key_tip_target_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_text_scale_factor_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def padding_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def requires_pointer_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tab_navigation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_content_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class Control(winrt.system.Object, metaclass=Control_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Control: ...
    def apply_template(self) -> bool: ...
    def remove_focus_engagement(self) -> None: ...
    def add_focus_disengaged(self, handler: windows_foundation.TypedEventHandler[Control, FocusDisengagedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_focus_disengaged(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_focus_engaged(self, handler: windows_foundation.TypedEventHandler[Control, FocusEngagedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_focus_engaged(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_is_enabled_changed(self, handler: typing.Optional[microsoft_ui_xaml.DependencyPropertyChangedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_is_enabled_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def vertical_content_alignment(self) -> microsoft_ui_xaml.VerticalAlignment: ...
    @vertical_content_alignment.setter
    def vertical_content_alignment(self, value: microsoft_ui_xaml.VerticalAlignment) -> None: ...
    @_property
    def template(self) -> typing.Optional[ControlTemplate]: ...
    @template.setter
    def template(self, value: typing.Optional[ControlTemplate]) -> None: ...
    @_property
    def tab_navigation(self) -> microsoft_ui_xaml_input.KeyboardNavigationMode: ...
    @tab_navigation.setter
    def tab_navigation(self, value: microsoft_ui_xaml_input.KeyboardNavigationMode) -> None: ...
    @_property
    def requires_pointer(self) -> RequiresPointer: ...
    @requires_pointer.setter
    def requires_pointer(self, value: RequiresPointer) -> None: ...
    @_property
    def padding(self) -> microsoft_ui_xaml.Thickness: ...
    @padding.setter
    def padding(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def is_text_scale_factor_enabled(self) -> bool: ...
    @is_text_scale_factor_enabled.setter
    def is_text_scale_factor_enabled(self, value: bool) -> None: ...
    @_property
    def is_focus_engagement_enabled(self) -> bool: ...
    @is_focus_engagement_enabled.setter
    def is_focus_engagement_enabled(self, value: bool) -> None: ...
    @_property
    def is_focus_engaged(self) -> bool: ...
    @is_focus_engaged.setter
    def is_focus_engaged(self, value: bool) -> None: ...
    @_property
    def is_enabled(self) -> bool: ...
    @is_enabled.setter
    def is_enabled(self, value: bool) -> None: ...
    @_property
    def horizontal_content_alignment(self) -> microsoft_ui_xaml.HorizontalAlignment: ...
    @horizontal_content_alignment.setter
    def horizontal_content_alignment(self, value: microsoft_ui_xaml.HorizontalAlignment) -> None: ...
    @_property
    def foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @foreground.setter
    def foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def font_weight(self) -> windows_ui_text.FontWeight: ...
    @font_weight.setter
    def font_weight(self, value: windows_ui_text.FontWeight) -> None: ...
    @_property
    def font_style(self) -> windows_ui_text.FontStyle: ...
    @font_style.setter
    def font_style(self, value: windows_ui_text.FontStyle) -> None: ...
    @_property
    def font_stretch(self) -> windows_ui_text.FontStretch: ...
    @font_stretch.setter
    def font_stretch(self, value: windows_ui_text.FontStretch) -> None: ...
    @_property
    def font_size(self) -> winrt.system.Double: ...
    @font_size.setter
    def font_size(self, value: winrt.system.Double) -> None: ...
    @_property
    def font_family(self) -> typing.Optional[microsoft_ui_xaml_media.FontFamily]: ...
    @font_family.setter
    def font_family(self, value: typing.Optional[microsoft_ui_xaml_media.FontFamily]) -> None: ...
    @_property
    def element_sound_mode(self) -> microsoft_ui_xaml.ElementSoundMode: ...
    @element_sound_mode.setter
    def element_sound_mode(self, value: microsoft_ui_xaml.ElementSoundMode) -> None: ...
    @_property
    def default_style_resource_uri(self) -> typing.Optional[windows_foundation.Uri]: ...
    @default_style_resource_uri.setter
    def default_style_resource_uri(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def corner_radius(self) -> microsoft_ui_xaml.CornerRadius: ...
    @corner_radius.setter
    def corner_radius(self, value: microsoft_ui_xaml.CornerRadius) -> None: ...
    @_property
    def character_spacing(self) -> winrt.system.Int32: ...
    @character_spacing.setter
    def character_spacing(self, value: winrt.system.Int32) -> None: ...
    @_property
    def border_thickness(self) -> microsoft_ui_xaml.Thickness: ...
    @border_thickness.setter
    def border_thickness(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def border_brush(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @border_brush.setter
    def border_brush(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def background_sizing(self) -> BackgroundSizing: ...
    @background_sizing.setter
    def background_sizing(self, value: BackgroundSizing) -> None: ...
    @_property
    def background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @background.setter
    def background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...

@typing.final
class ControlTemplate(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ControlTemplate: ...
    def __new__(cls: typing.Type[ControlTemplate]) -> ControlTemplate: ...
    @_property
    def target_type(self) -> windows_ui_xaml_interop.TypeName: ...
    @target_type.setter
    def target_type(self, value: windows_ui_xaml_interop.TypeName) -> None: ...

@typing.final
class CoreWebView2InitializedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CoreWebView2InitializedEventArgs: ...
    @_property
    def exception(self) -> windows_foundation.HResult: ...

@typing.final
class DataTemplateSelector(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataTemplateSelector: ...
    def __new__(cls: typing.Type[DataTemplateSelector]) -> DataTemplateSelector: ...
    def get_element(self, args: typing.Optional[microsoft_ui_xaml.ElementFactoryGetArgs], /) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    def recycle_element(self, args: typing.Optional[microsoft_ui_xaml.ElementFactoryRecycleArgs], /) -> None: ...
    @typing.overload
    def select_template(self, item: typing.Optional[winrt.system.Object], /) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @typing.overload
    def select_template(self, item: typing.Optional[winrt.system.Object], container: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...

@typing.final
class DatePickedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DatePickedEventArgs: ...
    def __new__(cls: typing.Type[DatePickedEventArgs]) -> DatePickedEventArgs: ...
    @_property
    def new_date(self) -> datetime.datetime: ...
    @_property
    def old_date(self) -> datetime.datetime: ...

@typing.final
class DatePicker_Static(type):
    @_property
    def calendar_identifier_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def date_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def day_format_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def day_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def light_dismiss_overlay_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_year_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def min_year_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def month_format_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def month_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def orientation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_date_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def year_format_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def year_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class DatePicker(winrt.system.Object, metaclass=DatePicker_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DatePicker: ...
    def __new__(cls: typing.Type[DatePicker]) -> DatePicker: ...
    def add_date_changed(self, handler: windows_foundation.EventHandler[DatePickerValueChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_date_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_selected_date_changed(self, handler: windows_foundation.TypedEventHandler[DatePicker, DatePickerSelectedValueChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_selected_date_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def year_visible(self) -> bool: ...
    @year_visible.setter
    def year_visible(self, value: bool) -> None: ...
    @_property
    def year_format(self) -> str: ...
    @year_format.setter
    def year_format(self, value: str) -> None: ...
    @_property
    def selected_date(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @selected_date.setter
    def selected_date(self, value: typing.Optional[typing.Optional[datetime.datetime]]) -> None: ...
    @_property
    def orientation(self) -> Orientation: ...
    @orientation.setter
    def orientation(self, value: Orientation) -> None: ...
    @_property
    def month_visible(self) -> bool: ...
    @month_visible.setter
    def month_visible(self, value: bool) -> None: ...
    @_property
    def month_format(self) -> str: ...
    @month_format.setter
    def month_format(self, value: str) -> None: ...
    @_property
    def min_year(self) -> datetime.datetime: ...
    @min_year.setter
    def min_year(self, value: datetime.datetime) -> None: ...
    @_property
    def max_year(self) -> datetime.datetime: ...
    @max_year.setter
    def max_year(self, value: datetime.datetime) -> None: ...
    @_property
    def light_dismiss_overlay_mode(self) -> LightDismissOverlayMode: ...
    @light_dismiss_overlay_mode.setter
    def light_dismiss_overlay_mode(self, value: LightDismissOverlayMode) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def day_visible(self) -> bool: ...
    @day_visible.setter
    def day_visible(self, value: bool) -> None: ...
    @_property
    def day_format(self) -> str: ...
    @day_format.setter
    def day_format(self, value: str) -> None: ...
    @_property
    def date(self) -> datetime.datetime: ...
    @date.setter
    def date(self, value: datetime.datetime) -> None: ...
    @_property
    def calendar_identifier(self) -> str: ...
    @calendar_identifier.setter
    def calendar_identifier(self, value: str) -> None: ...

@typing.final
class DatePickerFlyout_Static(type):
    @_property
    def calendar_identifier_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def date_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def day_format_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def day_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_year_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def min_year_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def month_format_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def month_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def year_format_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def year_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class DatePickerFlyout(winrt.system.Object, metaclass=DatePickerFlyout_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DatePickerFlyout: ...
    def __new__(cls: typing.Type[DatePickerFlyout]) -> DatePickerFlyout: ...
    def show_at_async(self, target: typing.Optional[microsoft_ui_xaml.FrameworkElement], /) -> windows_foundation.IAsyncOperation[typing.Optional[datetime.datetime]]: ...
    def add_date_picked(self, handler: windows_foundation.TypedEventHandler[DatePickerFlyout, DatePickedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_date_picked(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def year_visible(self) -> bool: ...
    @year_visible.setter
    def year_visible(self, value: bool) -> None: ...
    @_property
    def year_format(self) -> str: ...
    @year_format.setter
    def year_format(self, value: str) -> None: ...
    @_property
    def month_visible(self) -> bool: ...
    @month_visible.setter
    def month_visible(self, value: bool) -> None: ...
    @_property
    def month_format(self) -> str: ...
    @month_format.setter
    def month_format(self, value: str) -> None: ...
    @_property
    def min_year(self) -> datetime.datetime: ...
    @min_year.setter
    def min_year(self, value: datetime.datetime) -> None: ...
    @_property
    def max_year(self) -> datetime.datetime: ...
    @max_year.setter
    def max_year(self, value: datetime.datetime) -> None: ...
    @_property
    def day_visible(self) -> bool: ...
    @day_visible.setter
    def day_visible(self, value: bool) -> None: ...
    @_property
    def day_format(self) -> str: ...
    @day_format.setter
    def day_format(self, value: str) -> None: ...
    @_property
    def date(self) -> datetime.datetime: ...
    @date.setter
    def date(self, value: datetime.datetime) -> None: ...
    @_property
    def calendar_identifier(self) -> str: ...
    @calendar_identifier.setter
    def calendar_identifier(self, value: str) -> None: ...

@typing.final
class DatePickerFlyoutItem_Static(type):
    @_property
    def primary_text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def secondary_text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class DatePickerFlyoutItem(winrt.system.Object, metaclass=DatePickerFlyoutItem_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DatePickerFlyoutItem: ...
    def get_custom_property(self, name: str, /) -> typing.Optional[microsoft_ui_xaml_data.ICustomProperty]: ...
    def get_indexed_property(self, name: str, type: windows_ui_xaml_interop.TypeName, /) -> typing.Optional[microsoft_ui_xaml_data.ICustomProperty]: ...
    def get_string_representation(self) -> str: ...
    @_property
    def secondary_text(self) -> str: ...
    @secondary_text.setter
    def secondary_text(self, value: str) -> None: ...
    @_property
    def primary_text(self) -> str: ...
    @primary_text.setter
    def primary_text(self, value: str) -> None: ...
    @_property
    def type(self) -> windows_ui_xaml_interop.TypeName: ...

@typing.final
class DatePickerFlyoutPresenter_Static(type):
    @_property
    def is_default_shadow_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class DatePickerFlyoutPresenter(winrt.system.Object, metaclass=DatePickerFlyoutPresenter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DatePickerFlyoutPresenter: ...
    @_property
    def is_default_shadow_enabled(self) -> bool: ...
    @is_default_shadow_enabled.setter
    def is_default_shadow_enabled(self, value: bool) -> None: ...

@typing.final
class DatePickerSelectedValueChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DatePickerSelectedValueChangedEventArgs: ...
    @_property
    def new_date(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @_property
    def old_date(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...

@typing.final
class DatePickerValueChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DatePickerValueChangedEventArgs: ...
    @_property
    def new_date(self) -> datetime.datetime: ...
    @_property
    def old_date(self) -> datetime.datetime: ...

@typing.final
class DragItemsCompletedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragItemsCompletedEventArgs: ...
    @_property
    def drop_result(self) -> windows_applicationmodel_datatransfer.DataPackageOperation: ...
    @_property
    def items(self) -> typing.Optional[windows_foundation_collections.IVectorView[winrt.system.Object]]: ...

@typing.final
class DragItemsStartingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragItemsStartingEventArgs: ...
    def __new__(cls: typing.Type[DragItemsStartingEventArgs]) -> DragItemsStartingEventArgs: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def data(self) -> typing.Optional[windows_applicationmodel_datatransfer.DataPackage]: ...
    @_property
    def items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Object]]: ...

@typing.final
class DropDownButton(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DropDownButton: ...
    def __new__(cls: typing.Type[DropDownButton]) -> DropDownButton: ...

@typing.final
class DynamicOverflowItemsChangingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DynamicOverflowItemsChangingEventArgs: ...
    def __new__(cls: typing.Type[DynamicOverflowItemsChangingEventArgs]) -> DynamicOverflowItemsChangingEventArgs: ...
    @_property
    def action(self) -> CommandBarDynamicOverflowAction: ...

@typing.final
class Expander_Static(type):
    @_property
    def expand_direction_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_selector_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_expanded_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class Expander(winrt.system.Object, metaclass=Expander_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Expander: ...
    def __new__(cls: typing.Type[Expander]) -> Expander: ...
    def add_collapsed(self, handler: windows_foundation.TypedEventHandler[Expander, ExpanderCollapsedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_collapsed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_expanding(self, handler: windows_foundation.TypedEventHandler[Expander, ExpanderExpandingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_expanding(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_expanded(self) -> bool: ...
    @is_expanded.setter
    def is_expanded(self, value: bool) -> None: ...
    @_property
    def header_template_selector(self) -> typing.Optional[DataTemplateSelector]: ...
    @header_template_selector.setter
    def header_template_selector(self, value: typing.Optional[DataTemplateSelector]) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def expand_direction(self) -> ExpandDirection: ...
    @expand_direction.setter
    def expand_direction(self, value: ExpandDirection) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[ExpanderTemplateSettings]: ...

@typing.final
class ExpanderCollapsedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ExpanderCollapsedEventArgs: ...

@typing.final
class ExpanderExpandingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ExpanderExpandingEventArgs: ...

@typing.final
class ExpanderTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ExpanderTemplateSettings: ...
    @_property
    def content_height(self) -> winrt.system.Double: ...
    @_property
    def negative_content_height(self) -> winrt.system.Double: ...

@typing.final
class FlipView_Static(type):
    @_property
    def use_touch_animations_for_all_navigation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class FlipView(winrt.system.Object, metaclass=FlipView_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FlipView: ...
    def __new__(cls: typing.Type[FlipView]) -> FlipView: ...
    @_property
    def use_touch_animations_for_all_navigation(self) -> bool: ...
    @use_touch_animations_for_all_navigation.setter
    def use_touch_animations_for_all_navigation(self, value: bool) -> None: ...

@typing.final
class FlipViewItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FlipViewItem: ...
    def __new__(cls: typing.Type[FlipViewItem]) -> FlipViewItem: ...

@typing.final
class Flyout_Static(type):
    @_property
    def content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def flyout_presenter_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class Flyout(winrt.system.Object, metaclass=Flyout_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Flyout: ...
    def __new__(cls: typing.Type[Flyout]) -> Flyout: ...
    @_property
    def flyout_presenter_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @flyout_presenter_style.setter
    def flyout_presenter_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def content(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @content.setter
    def content(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...

@typing.final
class FlyoutPresenter_Static(type):
    @_property
    def is_default_shadow_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class FlyoutPresenter(winrt.system.Object, metaclass=FlyoutPresenter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FlyoutPresenter: ...
    def __new__(cls: typing.Type[FlyoutPresenter]) -> FlyoutPresenter: ...
    @_property
    def is_default_shadow_enabled(self) -> bool: ...
    @is_default_shadow_enabled.setter
    def is_default_shadow_enabled(self, value: bool) -> None: ...

@typing.final
class FocusDisengagedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FocusDisengagedEventArgs: ...

@typing.final
class FocusEngagedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FocusEngagedEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class FontIcon_Static(type):
    @_property
    def font_family_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_size_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_weight_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def glyph_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_text_scale_factor_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def mirrored_when_right_to_left_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class FontIcon(winrt.system.Object, metaclass=FontIcon_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FontIcon: ...
    def __new__(cls: typing.Type[FontIcon]) -> FontIcon: ...
    @_property
    def mirrored_when_right_to_left(self) -> bool: ...
    @mirrored_when_right_to_left.setter
    def mirrored_when_right_to_left(self, value: bool) -> None: ...
    @_property
    def is_text_scale_factor_enabled(self) -> bool: ...
    @is_text_scale_factor_enabled.setter
    def is_text_scale_factor_enabled(self, value: bool) -> None: ...
    @_property
    def glyph(self) -> str: ...
    @glyph.setter
    def glyph(self, value: str) -> None: ...
    @_property
    def font_weight(self) -> windows_ui_text.FontWeight: ...
    @font_weight.setter
    def font_weight(self, value: windows_ui_text.FontWeight) -> None: ...
    @_property
    def font_style(self) -> windows_ui_text.FontStyle: ...
    @font_style.setter
    def font_style(self, value: windows_ui_text.FontStyle) -> None: ...
    @_property
    def font_size(self) -> winrt.system.Double: ...
    @font_size.setter
    def font_size(self, value: winrt.system.Double) -> None: ...
    @_property
    def font_family(self) -> typing.Optional[microsoft_ui_xaml_media.FontFamily]: ...
    @font_family.setter
    def font_family(self, value: typing.Optional[microsoft_ui_xaml_media.FontFamily]) -> None: ...

@typing.final
class FontIconSource_Static(type):
    @_property
    def font_family_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_size_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_weight_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def glyph_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_text_scale_factor_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def mirrored_when_right_to_left_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class FontIconSource(winrt.system.Object, metaclass=FontIconSource_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FontIconSource: ...
    def __new__(cls: typing.Type[FontIconSource]) -> FontIconSource: ...
    @_property
    def mirrored_when_right_to_left(self) -> bool: ...
    @mirrored_when_right_to_left.setter
    def mirrored_when_right_to_left(self, value: bool) -> None: ...
    @_property
    def is_text_scale_factor_enabled(self) -> bool: ...
    @is_text_scale_factor_enabled.setter
    def is_text_scale_factor_enabled(self, value: bool) -> None: ...
    @_property
    def glyph(self) -> str: ...
    @glyph.setter
    def glyph(self, value: str) -> None: ...
    @_property
    def font_weight(self) -> windows_ui_text.FontWeight: ...
    @font_weight.setter
    def font_weight(self, value: windows_ui_text.FontWeight) -> None: ...
    @_property
    def font_style(self) -> windows_ui_text.FontStyle: ...
    @font_style.setter
    def font_style(self, value: windows_ui_text.FontStyle) -> None: ...
    @_property
    def font_size(self) -> winrt.system.Double: ...
    @font_size.setter
    def font_size(self, value: winrt.system.Double) -> None: ...
    @_property
    def font_family(self) -> typing.Optional[microsoft_ui_xaml_media.FontFamily]: ...
    @font_family.setter
    def font_family(self, value: typing.Optional[microsoft_ui_xaml_media.FontFamily]) -> None: ...

@typing.final
class Frame_Static(type):
    @_property
    def back_stack_depth_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def back_stack_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def cache_size_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def can_go_back_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def can_go_forward_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def current_source_page_type_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def forward_stack_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_navigation_stack_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def source_page_type_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class Frame(winrt.system.Object, metaclass=Frame_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Frame: ...
    def __new__(cls: typing.Type[Frame]) -> Frame: ...
    def get_navigation_state(self) -> str: ...
    @typing.overload
    def go_back(self) -> None: ...
    @typing.overload
    def go_back(self, transition_info_override: typing.Optional[microsoft_ui_xaml_media_animation.NavigationTransitionInfo], /) -> None: ...
    def go_forward(self) -> None: ...
    @typing.overload
    def navigate(self, source_page_type: windows_ui_xaml_interop.TypeName, /) -> bool: ...
    @typing.overload
    def navigate(self, source_page_type: windows_ui_xaml_interop.TypeName, parameter: typing.Optional[winrt.system.Object], /) -> bool: ...
    @typing.overload
    def navigate(self, source_page_type: windows_ui_xaml_interop.TypeName, parameter: typing.Optional[winrt.system.Object], info_override: typing.Optional[microsoft_ui_xaml_media_animation.NavigationTransitionInfo], /) -> bool: ...
    def navigate_to_type(self, source_page_type: windows_ui_xaml_interop.TypeName, parameter: typing.Optional[winrt.system.Object], navigation_options: typing.Optional[microsoft_ui_xaml_navigation.FrameNavigationOptions], /) -> bool: ...
    @typing.overload
    def set_navigation_state(self, navigation_state: str, /) -> None: ...
    @typing.overload
    def set_navigation_state(self, navigation_state: str, suppress_navigate: bool, /) -> None: ...
    def add_navigated(self, handler: typing.Optional[microsoft_ui_xaml_navigation.NavigatedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_navigated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_navigating(self, handler: typing.Optional[microsoft_ui_xaml_navigation.NavigatingCancelEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_navigating(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_navigation_failed(self, handler: typing.Optional[microsoft_ui_xaml_navigation.NavigationFailedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_navigation_failed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_navigation_stopped(self, handler: typing.Optional[microsoft_ui_xaml_navigation.NavigationStoppedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_navigation_stopped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def source_page_type(self) -> windows_ui_xaml_interop.TypeName: ...
    @source_page_type.setter
    def source_page_type(self, value: windows_ui_xaml_interop.TypeName) -> None: ...
    @_property
    def is_navigation_stack_enabled(self) -> bool: ...
    @is_navigation_stack_enabled.setter
    def is_navigation_stack_enabled(self, value: bool) -> None: ...
    @_property
    def cache_size(self) -> winrt.system.Int32: ...
    @cache_size.setter
    def cache_size(self, value: winrt.system.Int32) -> None: ...
    @_property
    def back_stack(self) -> typing.Optional[windows_foundation_collections.IVector[microsoft_ui_xaml_navigation.PageStackEntry]]: ...
    @_property
    def back_stack_depth(self) -> winrt.system.Int32: ...
    @_property
    def can_go_back(self) -> bool: ...
    @_property
    def can_go_forward(self) -> bool: ...
    @_property
    def current_source_page_type(self) -> windows_ui_xaml_interop.TypeName: ...
    @_property
    def forward_stack(self) -> typing.Optional[windows_foundation_collections.IVector[microsoft_ui_xaml_navigation.PageStackEntry]]: ...

@typing.final
class Grid_Static(type):
    def get_column(cls, element: typing.Optional[microsoft_ui_xaml.FrameworkElement], /) -> winrt.system.Int32: ...
    def get_column_span(cls, element: typing.Optional[microsoft_ui_xaml.FrameworkElement], /) -> winrt.system.Int32: ...
    def get_row(cls, element: typing.Optional[microsoft_ui_xaml.FrameworkElement], /) -> winrt.system.Int32: ...
    def get_row_span(cls, element: typing.Optional[microsoft_ui_xaml.FrameworkElement], /) -> winrt.system.Int32: ...
    def set_column(cls, element: typing.Optional[microsoft_ui_xaml.FrameworkElement], value: winrt.system.Int32, /) -> None: ...
    def set_column_span(cls, element: typing.Optional[microsoft_ui_xaml.FrameworkElement], value: winrt.system.Int32, /) -> None: ...
    def set_row(cls, element: typing.Optional[microsoft_ui_xaml.FrameworkElement], value: winrt.system.Int32, /) -> None: ...
    def set_row_span(cls, element: typing.Optional[microsoft_ui_xaml.FrameworkElement], value: winrt.system.Int32, /) -> None: ...
    @_property
    def background_sizing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def border_brush_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def border_thickness_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def column_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def column_spacing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def column_span_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def corner_radius_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def padding_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def row_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def row_spacing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def row_span_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class Grid(winrt.system.Object, metaclass=Grid_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Grid: ...
    def __new__(cls: typing.Type[Grid]) -> Grid: ...
    @_property
    def row_spacing(self) -> winrt.system.Double: ...
    @row_spacing.setter
    def row_spacing(self, value: winrt.system.Double) -> None: ...
    @_property
    def padding(self) -> microsoft_ui_xaml.Thickness: ...
    @padding.setter
    def padding(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def corner_radius(self) -> microsoft_ui_xaml.CornerRadius: ...
    @corner_radius.setter
    def corner_radius(self, value: microsoft_ui_xaml.CornerRadius) -> None: ...
    @_property
    def column_spacing(self) -> winrt.system.Double: ...
    @column_spacing.setter
    def column_spacing(self, value: winrt.system.Double) -> None: ...
    @_property
    def border_thickness(self) -> microsoft_ui_xaml.Thickness: ...
    @border_thickness.setter
    def border_thickness(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def border_brush(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @border_brush.setter
    def border_brush(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def background_sizing(self) -> BackgroundSizing: ...
    @background_sizing.setter
    def background_sizing(self, value: BackgroundSizing) -> None: ...
    @_property
    def column_definitions(self) -> typing.Optional[ColumnDefinitionCollection]: ...
    @_property
    def row_definitions(self) -> typing.Optional[RowDefinitionCollection]: ...

@typing.final
class GridView(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GridView: ...
    def __new__(cls: typing.Type[GridView]) -> GridView: ...

@typing.final
class GridViewHeaderItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GridViewHeaderItem: ...
    def __new__(cls: typing.Type[GridViewHeaderItem]) -> GridViewHeaderItem: ...

@typing.final
class GridViewItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GridViewItem: ...
    def __new__(cls: typing.Type[GridViewItem]) -> GridViewItem: ...
    @_property
    def template_settings(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.GridViewItemTemplateSettings]: ...

@typing.final
class GroupItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GroupItem: ...
    def __new__(cls: typing.Type[GroupItem]) -> GroupItem: ...

@typing.final
class GroupStyle(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GroupStyle: ...
    def __new__(cls: typing.Type[GroupStyle]) -> GroupStyle: ...
    def add_property_changed(self, handler: typing.Optional[microsoft_ui_xaml_data.PropertyChangedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_property_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def panel(self) -> typing.Optional[ItemsPanelTemplate]: ...
    @panel.setter
    def panel(self, value: typing.Optional[ItemsPanelTemplate]) -> None: ...
    @_property
    def hides_if_empty(self) -> bool: ...
    @hides_if_empty.setter
    def hides_if_empty(self, value: bool) -> None: ...
    @_property
    def header_template_selector(self) -> typing.Optional[DataTemplateSelector]: ...
    @header_template_selector.setter
    def header_template_selector(self, value: typing.Optional[DataTemplateSelector]) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header_container_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @header_container_style.setter
    def header_container_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def container_style_selector(self) -> typing.Optional[StyleSelector]: ...
    @container_style_selector.setter
    def container_style_selector(self, value: typing.Optional[StyleSelector]) -> None: ...
    @_property
    def container_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @container_style.setter
    def container_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...

@typing.final
class GroupStyleSelector(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GroupStyleSelector: ...
    def __new__(cls: typing.Type[GroupStyleSelector]) -> GroupStyleSelector: ...
    def select_group_style(self, group: typing.Optional[winrt.system.Object], level: winrt.system.UInt32, /) -> typing.Optional[GroupStyle]: ...

@typing.final
class HasValidationErrorsChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HasValidationErrorsChangedEventArgs: ...
    @_property
    def new_value(self) -> bool: ...

@typing.final
class Hub_Static(type):
    @_property
    def default_section_index_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_active_view_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_zoomed_in_view_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def orientation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def semantic_zoom_owner_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class Hub(winrt.system.Object, metaclass=Hub_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Hub: ...
    def __new__(cls: typing.Type[Hub]) -> Hub: ...
    def complete_view_change(self) -> None: ...
    def complete_view_change_from(self, source: typing.Optional[SemanticZoomLocation], destination: typing.Optional[SemanticZoomLocation], /) -> None: ...
    def complete_view_change_to(self, source: typing.Optional[SemanticZoomLocation], destination: typing.Optional[SemanticZoomLocation], /) -> None: ...
    def initialize_view_change(self) -> None: ...
    def make_visible(self, item: typing.Optional[SemanticZoomLocation], /) -> None: ...
    def scroll_to_section(self, section: typing.Optional[HubSection], /) -> None: ...
    def start_view_change_from(self, source: typing.Optional[SemanticZoomLocation], destination: typing.Optional[SemanticZoomLocation], /) -> None: ...
    def start_view_change_to(self, source: typing.Optional[SemanticZoomLocation], destination: typing.Optional[SemanticZoomLocation], /) -> None: ...
    def add_section_header_click(self, handler: typing.Optional[HubSectionHeaderClickEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_section_header_click(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_sections_in_view_changed(self, handler: typing.Optional[SectionsInViewChangedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_sections_in_view_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def orientation(self) -> Orientation: ...
    @orientation.setter
    def orientation(self, value: Orientation) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def default_section_index(self) -> winrt.system.Int32: ...
    @default_section_index.setter
    def default_section_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def section_headers(self) -> typing.Optional[windows_foundation_collections.IObservableVector[winrt.system.Object]]: ...
    @_property
    def sections(self) -> typing.Optional[windows_foundation_collections.IVector[HubSection]]: ...
    @_property
    def sections_in_view(self) -> typing.Optional[windows_foundation_collections.IVector[HubSection]]: ...
    @_property
    def semantic_zoom_owner(self) -> typing.Optional[SemanticZoom]: ...
    @semantic_zoom_owner.setter
    def semantic_zoom_owner(self, value: typing.Optional[SemanticZoom]) -> None: ...
    @_property
    def is_zoomed_in_view(self) -> bool: ...
    @is_zoomed_in_view.setter
    def is_zoomed_in_view(self, value: bool) -> None: ...
    @_property
    def is_active_view(self) -> bool: ...
    @is_active_view.setter
    def is_active_view(self, value: bool) -> None: ...

@typing.final
class HubSection_Static(type):
    @_property
    def content_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_header_interactive_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class HubSection(winrt.system.Object, metaclass=HubSection_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HubSection: ...
    def __new__(cls: typing.Type[HubSection]) -> HubSection: ...
    @_property
    def is_header_interactive(self) -> bool: ...
    @is_header_interactive.setter
    def is_header_interactive(self, value: bool) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def content_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @content_template.setter
    def content_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...

@typing.final
class HubSectionCollection(winrt.system.Object, winrt._winrt.MutableSequence[HubSection]):
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[HubSection]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HubSection: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HubSection]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HubSection) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HubSection]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HubSectionCollection: ...
    def append(self, value: typing.Optional[HubSection], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[windows_foundation_collections.IIterator[HubSection]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HubSection]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HubSection], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[windows_foundation_collections.IVectorView[HubSection]]: ...
    def index_of(self, value: typing.Optional[HubSection], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HubSection], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HubSection], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HubSection], /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HubSectionHeaderClickEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HubSectionHeaderClickEventArgs: ...
    def __new__(cls: typing.Type[HubSectionHeaderClickEventArgs]) -> HubSectionHeaderClickEventArgs: ...
    @_property
    def section(self) -> typing.Optional[HubSection]: ...

@typing.final
class HyperlinkButton_Static(type):
    @_property
    def navigate_uri_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class HyperlinkButton(winrt.system.Object, metaclass=HyperlinkButton_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HyperlinkButton: ...
    def __new__(cls: typing.Type[HyperlinkButton]) -> HyperlinkButton: ...
    @_property
    def navigate_uri(self) -> typing.Optional[windows_foundation.Uri]: ...
    @navigate_uri.setter
    def navigate_uri(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...

@typing.final
class IconElement_Static(type):
    @_property
    def foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class IconElement(winrt.system.Object, metaclass=IconElement_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IconElement: ...
    @_property
    def foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @foreground.setter
    def foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...

@typing.final
class IconSource_Static(type):
    @_property
    def foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class IconSource(winrt.system.Object, metaclass=IconSource_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IconSource: ...
    def create_icon_element(self) -> typing.Optional[IconElement]: ...
    @_property
    def foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @foreground.setter
    def foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...

@typing.final
class IconSourceElement_Static(type):
    @_property
    def icon_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class IconSourceElement(winrt.system.Object, metaclass=IconSourceElement_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IconSourceElement: ...
    def __new__(cls: typing.Type[IconSourceElement]) -> IconSourceElement: ...
    @_property
    def icon_source(self) -> typing.Optional[IconSource]: ...
    @icon_source.setter
    def icon_source(self, value: typing.Optional[IconSource]) -> None: ...

@typing.final
class Image_Static(type):
    @_property
    def nine_grid_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def stretch_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class Image(winrt.system.Object, metaclass=Image_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Image: ...
    def __new__(cls: typing.Type[Image]) -> Image: ...
    def get_alpha_mask(self) -> typing.Optional[microsoft_ui_composition.CompositionBrush]: ...
    def get_as_casting_source(self) -> typing.Optional[windows_media_casting.CastingSource]: ...
    def add_image_failed(self, handler: typing.Optional[microsoft_ui_xaml.ExceptionRoutedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_image_failed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_image_opened(self, handler: typing.Optional[microsoft_ui_xaml.RoutedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_image_opened(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def stretch(self) -> microsoft_ui_xaml_media.Stretch: ...
    @stretch.setter
    def stretch(self, value: microsoft_ui_xaml_media.Stretch) -> None: ...
    @_property
    def source(self) -> typing.Optional[microsoft_ui_xaml_media.ImageSource]: ...
    @source.setter
    def source(self, value: typing.Optional[microsoft_ui_xaml_media.ImageSource]) -> None: ...
    @_property
    def nine_grid(self) -> microsoft_ui_xaml.Thickness: ...
    @nine_grid.setter
    def nine_grid(self, value: microsoft_ui_xaml.Thickness) -> None: ...

@typing.final
class ImageIcon_Static(type):
    @_property
    def source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ImageIcon(winrt.system.Object, metaclass=ImageIcon_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ImageIcon: ...
    def __new__(cls: typing.Type[ImageIcon]) -> ImageIcon: ...
    @_property
    def source(self) -> typing.Optional[microsoft_ui_xaml_media.ImageSource]: ...
    @source.setter
    def source(self, value: typing.Optional[microsoft_ui_xaml_media.ImageSource]) -> None: ...

@typing.final
class ImageIconSource_Static(type):
    @_property
    def image_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ImageIconSource(winrt.system.Object, metaclass=ImageIconSource_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ImageIconSource: ...
    def __new__(cls: typing.Type[ImageIconSource]) -> ImageIconSource: ...
    @_property
    def image_source(self) -> typing.Optional[microsoft_ui_xaml_media.ImageSource]: ...
    @image_source.setter
    def image_source(self, value: typing.Optional[microsoft_ui_xaml_media.ImageSource]) -> None: ...

@typing.final
class InfoBadge_Static(type):
    @_property
    def icon_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def template_settings_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def value_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class InfoBadge(winrt.system.Object, metaclass=InfoBadge_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InfoBadge: ...
    def __new__(cls: typing.Type[InfoBadge]) -> InfoBadge: ...
    @_property
    def value(self) -> winrt.system.Int32: ...
    @value.setter
    def value(self, value: winrt.system.Int32) -> None: ...
    @_property
    def icon_source(self) -> typing.Optional[IconSource]: ...
    @icon_source.setter
    def icon_source(self, value: typing.Optional[IconSource]) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[InfoBadgeTemplateSettings]: ...

@typing.final
class InfoBadgeTemplateSettings_Static(type):
    @_property
    def icon_element_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def info_badge_corner_radius_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class InfoBadgeTemplateSettings(winrt.system.Object, metaclass=InfoBadgeTemplateSettings_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InfoBadgeTemplateSettings: ...
    def __new__(cls: typing.Type[InfoBadgeTemplateSettings]) -> InfoBadgeTemplateSettings: ...
    @_property
    def info_badge_corner_radius(self) -> microsoft_ui_xaml.CornerRadius: ...
    @info_badge_corner_radius.setter
    def info_badge_corner_radius(self, value: microsoft_ui_xaml.CornerRadius) -> None: ...
    @_property
    def icon_element(self) -> typing.Optional[IconElement]: ...
    @icon_element.setter
    def icon_element(self, value: typing.Optional[IconElement]) -> None: ...

@typing.final
class InfoBar_Static(type):
    @_property
    def action_button_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def close_button_command_parameter_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def close_button_command_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def close_button_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def content_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def icon_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_closable_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_icon_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_open_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def message_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def severity_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def template_settings_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def title_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class InfoBar(winrt.system.Object, metaclass=InfoBar_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InfoBar: ...
    def __new__(cls: typing.Type[InfoBar]) -> InfoBar: ...
    def add_close_button_click(self, handler: windows_foundation.TypedEventHandler[InfoBar, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_close_button_click(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: windows_foundation.TypedEventHandler[InfoBar, InfoBarClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_closing(self, handler: windows_foundation.TypedEventHandler[InfoBar, InfoBarClosingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> None: ...
    @_property
    def severity(self) -> InfoBarSeverity: ...
    @severity.setter
    def severity(self, value: InfoBarSeverity) -> None: ...
    @_property
    def message(self) -> str: ...
    @message.setter
    def message(self, value: str) -> None: ...
    @_property
    def is_open(self) -> bool: ...
    @is_open.setter
    def is_open(self, value: bool) -> None: ...
    @_property
    def is_icon_visible(self) -> bool: ...
    @is_icon_visible.setter
    def is_icon_visible(self, value: bool) -> None: ...
    @_property
    def is_closable(self) -> bool: ...
    @is_closable.setter
    def is_closable(self, value: bool) -> None: ...
    @_property
    def icon_source(self) -> typing.Optional[IconSource]: ...
    @icon_source.setter
    def icon_source(self, value: typing.Optional[IconSource]) -> None: ...
    @_property
    def content_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @content_template.setter
    def content_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def content(self) -> typing.Optional[winrt.system.Object]: ...
    @content.setter
    def content(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def close_button_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @close_button_style.setter
    def close_button_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def close_button_command_parameter(self) -> typing.Optional[winrt.system.Object]: ...
    @close_button_command_parameter.setter
    def close_button_command_parameter(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def close_button_command(self) -> typing.Optional[microsoft_ui_xaml_input.ICommand]: ...
    @close_button_command.setter
    def close_button_command(self, value: typing.Optional[microsoft_ui_xaml_input.ICommand]) -> None: ...
    @_property
    def action_button(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.ButtonBase]: ...
    @action_button.setter
    def action_button(self, value: typing.Optional[microsoft_ui_xaml_controls_primitives.ButtonBase]) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[InfoBarTemplateSettings]: ...

@typing.final
class InfoBarClosedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InfoBarClosedEventArgs: ...
    @_property
    def reason(self) -> InfoBarCloseReason: ...

@typing.final
class InfoBarClosingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InfoBarClosingEventArgs: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def reason(self) -> InfoBarCloseReason: ...

@typing.final
class InfoBarTemplateSettings_Static(type):
    @_property
    def icon_element_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class InfoBarTemplateSettings(winrt.system.Object, metaclass=InfoBarTemplateSettings_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InfoBarTemplateSettings: ...
    def __new__(cls: typing.Type[InfoBarTemplateSettings]) -> InfoBarTemplateSettings: ...
    @_property
    def icon_element(self) -> typing.Optional[IconElement]: ...
    @icon_element.setter
    def icon_element(self, value: typing.Optional[IconElement]) -> None: ...

@typing.final
class IsTextTrimmedChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IsTextTrimmedChangedEventArgs: ...

@typing.final
class ItemClickEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemClickEventArgs: ...
    def __new__(cls: typing.Type[ItemClickEventArgs]) -> ItemClickEventArgs: ...
    @_property
    def clicked_item(self) -> typing.Optional[winrt.system.Object]: ...

@typing.final
class ItemCollection(winrt.system.Object, winrt._winrt.MutableSequence[winrt.system.Object]):
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[winrt.system.Object]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> winrt.system.Object: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[winrt.system.Object]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: winrt.system.Object) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[winrt.system.Object]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemCollection: ...
    def append(self, value: typing.Optional[winrt.system.Object], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[windows_foundation_collections.IIterator[winrt.system.Object]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[winrt.system.Object]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[winrt.system.Object], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[windows_foundation_collections.IVectorView[winrt.system.Object]]: ...
    def index_of(self, value: typing.Optional[winrt.system.Object], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[winrt.system.Object], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[winrt.system.Object], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[winrt.system.Object], /) -> None: ...
    def add_vector_changed(self, vhnd: windows_foundation_collections.VectorChangedEventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_vector_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class ItemCollectionTransition(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemCollectionTransition: ...
    def start(self) -> typing.Optional[ItemCollectionTransitionProgress]: ...
    @_property
    def has_started(self) -> bool: ...
    @_property
    def new_bounds(self) -> windows_foundation.Rect: ...
    @_property
    def old_bounds(self) -> windows_foundation.Rect: ...
    @_property
    def operation(self) -> ItemCollectionTransitionOperation: ...
    @_property
    def triggers(self) -> ItemCollectionTransitionTriggers: ...

@typing.final
class ItemCollectionTransitionCompletedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemCollectionTransitionCompletedEventArgs: ...
    @_property
    def element(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @_property
    def transition(self) -> typing.Optional[ItemCollectionTransition]: ...

@typing.final
class ItemCollectionTransitionProgress(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemCollectionTransitionProgress: ...
    def complete(self) -> None: ...
    @_property
    def element(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @_property
    def transition(self) -> typing.Optional[ItemCollectionTransition]: ...

@typing.final
class ItemCollectionTransitionProvider(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemCollectionTransitionProvider: ...
    def __new__(cls: typing.Type[ItemCollectionTransitionProvider]) -> ItemCollectionTransitionProvider: ...
    def queue_transition(self, transition: typing.Optional[ItemCollectionTransition], /) -> None: ...
    def should_animate(self, transition: typing.Optional[ItemCollectionTransition], /) -> bool: ...
    def add_transition_completed(self, handler: windows_foundation.TypedEventHandler[ItemCollectionTransitionProvider, ItemCollectionTransitionCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_transition_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class ItemContainer_Static(type):
    @_property
    def child_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_selected_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ItemContainer(winrt.system.Object, metaclass=ItemContainer_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemContainer: ...
    def __new__(cls: typing.Type[ItemContainer]) -> ItemContainer: ...
    @_property
    def is_selected(self) -> bool: ...
    @is_selected.setter
    def is_selected(self, value: bool) -> None: ...
    @_property
    def child(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @child.setter
    def child(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...

@typing.final
class ItemContainerGenerator(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemContainerGenerator: ...
    def container_from_index(self, index: winrt.system.Int32, /) -> typing.Optional[microsoft_ui_xaml.DependencyObject]: ...
    def container_from_item(self, item: typing.Optional[winrt.system.Object], /) -> typing.Optional[microsoft_ui_xaml.DependencyObject]: ...
    def generate_next(self) -> typing.Tuple[typing.Optional[microsoft_ui_xaml.DependencyObject], bool]: ...
    def generator_position_from_index(self, item_index: winrt.system.Int32, /) -> microsoft_ui_xaml_controls_primitives.GeneratorPosition: ...
    def get_item_container_generator_for_panel(self, panel: typing.Optional[Panel], /) -> typing.Optional[ItemContainerGenerator]: ...
    def index_from_container(self, container: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> winrt.system.Int32: ...
    def index_from_generator_position(self, position: microsoft_ui_xaml_controls_primitives.GeneratorPosition, /) -> winrt.system.Int32: ...
    def item_from_container(self, container: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> typing.Optional[winrt.system.Object]: ...
    def prepare_item_container(self, container: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> None: ...
    def recycle(self, position: microsoft_ui_xaml_controls_primitives.GeneratorPosition, count: winrt.system.Int32, /) -> None: ...
    def remove(self, position: microsoft_ui_xaml_controls_primitives.GeneratorPosition, count: winrt.system.Int32, /) -> None: ...
    def remove_all(self) -> None: ...
    def start_at(self, position: microsoft_ui_xaml_controls_primitives.GeneratorPosition, direction: microsoft_ui_xaml_controls_primitives.GeneratorDirection, allow_start_at_realized_item: bool, /) -> None: ...
    def stop(self) -> None: ...
    def add_items_changed(self, handler: typing.Optional[microsoft_ui_xaml_controls_primitives.ItemsChangedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_items_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class ItemsControl_Static(type):
    def get_items_owner(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> typing.Optional[ItemsControl]: ...
    def items_control_from_item_container(cls, container: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> typing.Optional[ItemsControl]: ...
    @_property
    def display_member_path_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def group_style_selector_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_grouping_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_container_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_container_style_selector_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_container_transitions_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_template_selector_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def items_panel_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def items_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ItemsControl(winrt.system.Object, metaclass=ItemsControl_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemsControl: ...
    def __new__(cls: typing.Type[ItemsControl]) -> ItemsControl: ...
    def container_from_index(self, index: winrt.system.Int32, /) -> typing.Optional[microsoft_ui_xaml.DependencyObject]: ...
    def container_from_item(self, item: typing.Optional[winrt.system.Object], /) -> typing.Optional[microsoft_ui_xaml.DependencyObject]: ...
    def group_header_container_from_item_container(self, item_container: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> typing.Optional[microsoft_ui_xaml.DependencyObject]: ...
    def index_from_container(self, container: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> winrt.system.Int32: ...
    def item_from_container(self, container: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def items_source(self) -> typing.Optional[winrt.system.Object]: ...
    @items_source.setter
    def items_source(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def items_panel(self) -> typing.Optional[ItemsPanelTemplate]: ...
    @items_panel.setter
    def items_panel(self, value: typing.Optional[ItemsPanelTemplate]) -> None: ...
    @_property
    def item_template_selector(self) -> typing.Optional[DataTemplateSelector]: ...
    @item_template_selector.setter
    def item_template_selector(self, value: typing.Optional[DataTemplateSelector]) -> None: ...
    @_property
    def item_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @item_template.setter
    def item_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def item_container_transitions(self) -> typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]: ...
    @item_container_transitions.setter
    def item_container_transitions(self, value: typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]) -> None: ...
    @_property
    def item_container_style_selector(self) -> typing.Optional[StyleSelector]: ...
    @item_container_style_selector.setter
    def item_container_style_selector(self, value: typing.Optional[StyleSelector]) -> None: ...
    @_property
    def item_container_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @item_container_style.setter
    def item_container_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def group_style_selector(self) -> typing.Optional[GroupStyleSelector]: ...
    @group_style_selector.setter
    def group_style_selector(self, value: typing.Optional[GroupStyleSelector]) -> None: ...
    @_property
    def display_member_path(self) -> str: ...
    @display_member_path.setter
    def display_member_path(self, value: str) -> None: ...
    @_property
    def group_style(self) -> typing.Optional[windows_foundation_collections.IObservableVector[GroupStyle]]: ...
    @_property
    def is_grouping(self) -> bool: ...
    @_property
    def item_container_generator(self) -> typing.Optional[ItemContainerGenerator]: ...
    @_property
    def items(self) -> typing.Optional[ItemCollection]: ...
    @_property
    def items_panel_root(self) -> typing.Optional[Panel]: ...

@typing.final
class ItemsPanelTemplate(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemsPanelTemplate: ...
    def __new__(cls: typing.Type[ItemsPanelTemplate]) -> ItemsPanelTemplate: ...

@typing.final
class ItemsPickedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemsPickedEventArgs: ...
    def __new__(cls: typing.Type[ItemsPickedEventArgs]) -> ItemsPickedEventArgs: ...
    @_property
    def added_items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Object]]: ...
    @_property
    def removed_items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Object]]: ...

@typing.final
class ItemsPresenter_Static(type):
    @_property
    def footer_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def footer_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def footer_transitions_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_transitions_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def padding_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ItemsPresenter(winrt.system.Object, metaclass=ItemsPresenter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemsPresenter: ...
    def __new__(cls: typing.Type[ItemsPresenter]) -> ItemsPresenter: ...
    def get_irregular_snap_points(self, orientation: Orientation, alignment: microsoft_ui_xaml_controls_primitives.SnapPointsAlignment, /) -> typing.Optional[windows_foundation_collections.IVectorView[winrt.system.Single]]: ...
    def get_regular_snap_points(self, orientation: Orientation, alignment: microsoft_ui_xaml_controls_primitives.SnapPointsAlignment, /) -> typing.Tuple[winrt.system.Single, winrt.system.Single]: ...
    def add_horizontal_snap_points_changed(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_horizontal_snap_points_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_vertical_snap_points_changed(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_vertical_snap_points_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def padding(self) -> microsoft_ui_xaml.Thickness: ...
    @padding.setter
    def padding(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def header_transitions(self) -> typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]: ...
    @header_transitions.setter
    def header_transitions(self, value: typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def footer_transitions(self) -> typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]: ...
    @footer_transitions.setter
    def footer_transitions(self, value: typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]) -> None: ...
    @_property
    def footer_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @footer_template.setter
    def footer_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def footer(self) -> typing.Optional[winrt.system.Object]: ...
    @footer.setter
    def footer(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def are_horizontal_snap_points_regular(self) -> bool: ...
    @_property
    def are_vertical_snap_points_regular(self) -> bool: ...

@typing.final
class ItemsRepeater_Static(type):
    @_property
    def background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_cache_length_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def items_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def layout_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_cache_length_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_transition_provider_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ItemsRepeater(winrt.system.Object, metaclass=ItemsRepeater_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemsRepeater: ...
    def __new__(cls: typing.Type[ItemsRepeater]) -> ItemsRepeater: ...
    def get_element_index(self, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> winrt.system.Int32: ...
    def get_or_create_element(self, index: winrt.system.Int32, /) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    def try_get_element(self, index: winrt.system.Int32, /) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    def add_element_clearing(self, handler: windows_foundation.TypedEventHandler[ItemsRepeater, ItemsRepeaterElementClearingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_element_clearing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_element_index_changed(self, handler: windows_foundation.TypedEventHandler[ItemsRepeater, ItemsRepeaterElementIndexChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_element_index_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_element_prepared(self, handler: windows_foundation.TypedEventHandler[ItemsRepeater, ItemsRepeaterElementPreparedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_element_prepared(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def vertical_cache_length(self) -> winrt.system.Double: ...
    @vertical_cache_length.setter
    def vertical_cache_length(self, value: winrt.system.Double) -> None: ...
    @_property
    def layout(self) -> typing.Optional[Layout]: ...
    @layout.setter
    def layout(self, value: typing.Optional[Layout]) -> None: ...
    @_property
    def items_source(self) -> typing.Optional[winrt.system.Object]: ...
    @items_source.setter
    def items_source(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def item_template(self) -> typing.Optional[winrt.system.Object]: ...
    @item_template.setter
    def item_template(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def horizontal_cache_length(self) -> winrt.system.Double: ...
    @horizontal_cache_length.setter
    def horizontal_cache_length(self, value: winrt.system.Double) -> None: ...
    @_property
    def background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @background.setter
    def background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def items_source_view(self) -> typing.Optional[ItemsSourceView]: ...
    @_property
    def item_transition_provider(self) -> typing.Optional[ItemCollectionTransitionProvider]: ...
    @item_transition_provider.setter
    def item_transition_provider(self, value: typing.Optional[ItemCollectionTransitionProvider]) -> None: ...

@typing.final
class ItemsRepeaterElementClearingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemsRepeaterElementClearingEventArgs: ...
    @_property
    def element(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...

@typing.final
class ItemsRepeaterElementIndexChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemsRepeaterElementIndexChangedEventArgs: ...
    @_property
    def element(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @_property
    def new_index(self) -> winrt.system.Int32: ...
    @_property
    def old_index(self) -> winrt.system.Int32: ...

@typing.final
class ItemsRepeaterElementPreparedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemsRepeaterElementPreparedEventArgs: ...
    @_property
    def element(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @_property
    def index(self) -> winrt.system.Int32: ...

@typing.final
class ItemsRepeaterScrollHost(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemsRepeaterScrollHost: ...
    def __new__(cls: typing.Type[ItemsRepeaterScrollHost]) -> ItemsRepeaterScrollHost: ...
    @_property
    def vertical_anchor_ratio(self) -> winrt.system.Double: ...
    @vertical_anchor_ratio.setter
    def vertical_anchor_ratio(self, value: winrt.system.Double) -> None: ...
    @_property
    def scroll_viewer(self) -> typing.Optional[ScrollViewer]: ...
    @scroll_viewer.setter
    def scroll_viewer(self, value: typing.Optional[ScrollViewer]) -> None: ...
    @_property
    def horizontal_anchor_ratio(self) -> winrt.system.Double: ...
    @horizontal_anchor_ratio.setter
    def horizontal_anchor_ratio(self, value: winrt.system.Double) -> None: ...
    @_property
    def current_anchor(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...

@typing.final
class ItemsSourceView(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemsSourceView: ...
    def __new__(cls: typing.Type[ItemsSourceView], source: typing.Optional[winrt.system.Object]) -> ItemsSourceView: ...
    def get_at(self, index: winrt.system.Int32, /) -> typing.Optional[winrt.system.Object]: ...
    def index_from_key(self, key: str, /) -> winrt.system.Int32: ...
    def index_of(self, item: typing.Optional[winrt.system.Object], /) -> winrt.system.Int32: ...
    def key_from_index(self, index: winrt.system.Int32, /) -> str: ...
    def add_collection_changed(self, handler: typing.Optional[microsoft_ui_xaml_interop.NotifyCollectionChangedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_collection_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def count(self) -> winrt.system.Int32: ...
    @_property
    def has_key_index_mapping(self) -> bool: ...

@typing.final
class ItemsStackPanel_Static(type):
    @_property
    def are_sticky_group_headers_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def cache_length_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def group_header_placement_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def group_padding_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def orientation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ItemsStackPanel(winrt.system.Object, metaclass=ItemsStackPanel_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemsStackPanel: ...
    def __new__(cls: typing.Type[ItemsStackPanel]) -> ItemsStackPanel: ...
    @_property
    def orientation(self) -> Orientation: ...
    @orientation.setter
    def orientation(self, value: Orientation) -> None: ...
    @_property
    def items_updating_scroll_mode(self) -> ItemsUpdatingScrollMode: ...
    @items_updating_scroll_mode.setter
    def items_updating_scroll_mode(self, value: ItemsUpdatingScrollMode) -> None: ...
    @_property
    def group_padding(self) -> microsoft_ui_xaml.Thickness: ...
    @group_padding.setter
    def group_padding(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def group_header_placement(self) -> microsoft_ui_xaml_controls_primitives.GroupHeaderPlacement: ...
    @group_header_placement.setter
    def group_header_placement(self, value: microsoft_ui_xaml_controls_primitives.GroupHeaderPlacement) -> None: ...
    @_property
    def cache_length(self) -> winrt.system.Double: ...
    @cache_length.setter
    def cache_length(self, value: winrt.system.Double) -> None: ...
    @_property
    def are_sticky_group_headers_enabled(self) -> bool: ...
    @are_sticky_group_headers_enabled.setter
    def are_sticky_group_headers_enabled(self, value: bool) -> None: ...
    @_property
    def first_cache_index(self) -> winrt.system.Int32: ...
    @_property
    def first_visible_index(self) -> winrt.system.Int32: ...
    @_property
    def last_cache_index(self) -> winrt.system.Int32: ...
    @_property
    def last_visible_index(self) -> winrt.system.Int32: ...
    @_property
    def scrolling_direction(self) -> PanelScrollingDirection: ...

@typing.final
class ItemsView_Static(type):
    @_property
    def current_item_index_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_item_invoked_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_transition_provider_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def items_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def layout_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def scroll_view_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_item_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_scroll_controller_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ItemsView(winrt.system.Object, metaclass=ItemsView_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemsView: ...
    def __new__(cls: typing.Type[ItemsView]) -> ItemsView: ...
    def deselect(self, item_index: winrt.system.Int32, /) -> None: ...
    def deselect_all(self) -> None: ...
    def invert_selection(self) -> None: ...
    def is_selected(self, item_index: winrt.system.Int32, /) -> bool: ...
    def select(self, item_index: winrt.system.Int32, /) -> None: ...
    def select_all(self) -> None: ...
    def start_bring_item_into_view(self, index: winrt.system.Int32, options: typing.Optional[microsoft_ui_xaml.BringIntoViewOptions], /) -> None: ...
    def try_get_item_index(self, horizontal_viewport_ratio: winrt.system.Double, vertical_viewport_ratio: winrt.system.Double, /) -> typing.Tuple[bool, winrt.system.Int32]: ...
    def add_item_invoked(self, handler: windows_foundation.TypedEventHandler[ItemsView, ItemsViewItemInvokedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_item_invoked(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_selection_changed(self, handler: windows_foundation.TypedEventHandler[ItemsView, ItemsViewSelectionChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_selection_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def vertical_scroll_controller(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.IScrollController]: ...
    @vertical_scroll_controller.setter
    def vertical_scroll_controller(self, value: typing.Optional[microsoft_ui_xaml_controls_primitives.IScrollController]) -> None: ...
    @_property
    def selection_mode(self) -> ItemsViewSelectionMode: ...
    @selection_mode.setter
    def selection_mode(self, value: ItemsViewSelectionMode) -> None: ...
    @_property
    def layout(self) -> typing.Optional[Layout]: ...
    @layout.setter
    def layout(self, value: typing.Optional[Layout]) -> None: ...
    @_property
    def items_source(self) -> typing.Optional[winrt.system.Object]: ...
    @items_source.setter
    def items_source(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def item_transition_provider(self) -> typing.Optional[ItemCollectionTransitionProvider]: ...
    @item_transition_provider.setter
    def item_transition_provider(self, value: typing.Optional[ItemCollectionTransitionProvider]) -> None: ...
    @_property
    def item_template(self) -> typing.Optional[microsoft_ui_xaml.IElementFactory]: ...
    @item_template.setter
    def item_template(self, value: typing.Optional[microsoft_ui_xaml.IElementFactory]) -> None: ...
    @_property
    def is_item_invoked_enabled(self) -> bool: ...
    @is_item_invoked_enabled.setter
    def is_item_invoked_enabled(self, value: bool) -> None: ...
    @_property
    def current_item_index(self) -> winrt.system.Int32: ...
    @_property
    def scroll_view(self) -> typing.Optional[ScrollView]: ...
    @_property
    def selected_item(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def selected_items(self) -> typing.Optional[windows_foundation_collections.IVectorView[winrt.system.Object]]: ...

@typing.final
class ItemsViewItemInvokedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemsViewItemInvokedEventArgs: ...
    @_property
    def invoked_item(self) -> typing.Optional[winrt.system.Object]: ...

@typing.final
class ItemsViewSelectionChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemsViewSelectionChangedEventArgs: ...

@typing.final
class ItemsWrapGrid_Static(type):
    @_property
    def are_sticky_group_headers_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def cache_length_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def group_header_placement_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def group_padding_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_width_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def maximum_rows_or_columns_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def orientation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ItemsWrapGrid(winrt.system.Object, metaclass=ItemsWrapGrid_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemsWrapGrid: ...
    def __new__(cls: typing.Type[ItemsWrapGrid]) -> ItemsWrapGrid: ...
    @_property
    def orientation(self) -> Orientation: ...
    @orientation.setter
    def orientation(self, value: Orientation) -> None: ...
    @_property
    def maximum_rows_or_columns(self) -> winrt.system.Int32: ...
    @maximum_rows_or_columns.setter
    def maximum_rows_or_columns(self, value: winrt.system.Int32) -> None: ...
    @_property
    def item_width(self) -> winrt.system.Double: ...
    @item_width.setter
    def item_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def item_height(self) -> winrt.system.Double: ...
    @item_height.setter
    def item_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def group_padding(self) -> microsoft_ui_xaml.Thickness: ...
    @group_padding.setter
    def group_padding(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def group_header_placement(self) -> microsoft_ui_xaml_controls_primitives.GroupHeaderPlacement: ...
    @group_header_placement.setter
    def group_header_placement(self, value: microsoft_ui_xaml_controls_primitives.GroupHeaderPlacement) -> None: ...
    @_property
    def cache_length(self) -> winrt.system.Double: ...
    @cache_length.setter
    def cache_length(self, value: winrt.system.Double) -> None: ...
    @_property
    def are_sticky_group_headers_enabled(self) -> bool: ...
    @are_sticky_group_headers_enabled.setter
    def are_sticky_group_headers_enabled(self, value: bool) -> None: ...
    @_property
    def first_cache_index(self) -> winrt.system.Int32: ...
    @_property
    def first_visible_index(self) -> winrt.system.Int32: ...
    @_property
    def last_cache_index(self) -> winrt.system.Int32: ...
    @_property
    def last_visible_index(self) -> winrt.system.Int32: ...
    @_property
    def scrolling_direction(self) -> PanelScrollingDirection: ...

@typing.final
class Layout(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Layout: ...
    def arrange(self, context: typing.Optional[LayoutContext], final_size: windows_foundation.Size, /) -> windows_foundation.Size: ...
    def initialize_for_context(self, context: typing.Optional[LayoutContext], /) -> None: ...
    def measure(self, context: typing.Optional[LayoutContext], available_size: windows_foundation.Size, /) -> windows_foundation.Size: ...
    def uninitialize_for_context(self, context: typing.Optional[LayoutContext], /) -> None: ...
    def add_arrange_invalidated(self, handler: windows_foundation.TypedEventHandler[Layout, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_arrange_invalidated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_measure_invalidated(self, handler: windows_foundation.TypedEventHandler[Layout, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_measure_invalidated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def index_based_layout_orientation(self) -> IndexBasedLayoutOrientation: ...

@typing.final
class LayoutContext(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LayoutContext: ...
    @_property
    def layout_state(self) -> typing.Optional[winrt.system.Object]: ...
    @layout_state.setter
    def layout_state(self, value: typing.Optional[winrt.system.Object]) -> None: ...

@typing.final
class LinedFlowLayout_Static(type):
    @_property
    def actual_line_height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def items_justification_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def items_stretch_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def line_height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def line_spacing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def min_item_spacing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class LinedFlowLayout(winrt.system.Object, metaclass=LinedFlowLayout_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LinedFlowLayout: ...
    def __new__(cls: typing.Type[LinedFlowLayout]) -> LinedFlowLayout: ...
    def invalidate_items_info(self) -> None: ...
    def lock_item_to_line(self, item_index: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def add_items_info_requested(self, handler: windows_foundation.TypedEventHandler[LinedFlowLayout, LinedFlowLayoutItemsInfoRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_items_info_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_items_unlocked(self, handler: windows_foundation.TypedEventHandler[LinedFlowLayout, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_items_unlocked(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def min_item_spacing(self) -> winrt.system.Double: ...
    @min_item_spacing.setter
    def min_item_spacing(self, value: winrt.system.Double) -> None: ...
    @_property
    def line_spacing(self) -> winrt.system.Double: ...
    @line_spacing.setter
    def line_spacing(self, value: winrt.system.Double) -> None: ...
    @_property
    def line_height(self) -> winrt.system.Double: ...
    @line_height.setter
    def line_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def items_stretch(self) -> LinedFlowLayoutItemsStretch: ...
    @items_stretch.setter
    def items_stretch(self, value: LinedFlowLayoutItemsStretch) -> None: ...
    @_property
    def items_justification(self) -> LinedFlowLayoutItemsJustification: ...
    @items_justification.setter
    def items_justification(self, value: LinedFlowLayoutItemsJustification) -> None: ...
    @_property
    def actual_line_height(self) -> winrt.system.Double: ...
    @_property
    def requested_range_length(self) -> winrt.system.Int32: ...
    @_property
    def requested_range_start_index(self) -> winrt.system.Int32: ...

@typing.final
class LinedFlowLayoutItemCollectionTransitionProvider(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LinedFlowLayoutItemCollectionTransitionProvider: ...
    def __new__(cls: typing.Type[LinedFlowLayoutItemCollectionTransitionProvider]) -> LinedFlowLayoutItemCollectionTransitionProvider: ...

@typing.final
class LinedFlowLayoutItemsInfoRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LinedFlowLayoutItemsInfoRequestedEventArgs: ...
    def set_desired_aspect_ratios(self, values: winrt.system.Array[winrt.system.Double], /) -> None: ...
    def set_max_widths(self, values: winrt.system.Array[winrt.system.Double], /) -> None: ...
    def set_min_widths(self, values: winrt.system.Array[winrt.system.Double], /) -> None: ...
    @_property
    def min_width(self) -> winrt.system.Double: ...
    @min_width.setter
    def min_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def max_width(self) -> winrt.system.Double: ...
    @max_width.setter
    def max_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def items_range_start_index(self) -> winrt.system.Int32: ...
    @items_range_start_index.setter
    def items_range_start_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def items_range_requested_length(self) -> winrt.system.Int32: ...

@typing.final
class ListBox_Static(type):
    @_property
    def selection_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def single_selection_follows_focus_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ListBox(winrt.system.Object, metaclass=ListBox_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ListBox: ...
    def __new__(cls: typing.Type[ListBox]) -> ListBox: ...
    def scroll_into_view(self, item: typing.Optional[winrt.system.Object], /) -> None: ...
    def select_all(self) -> None: ...
    @_property
    def single_selection_follows_focus(self) -> bool: ...
    @single_selection_follows_focus.setter
    def single_selection_follows_focus(self, value: bool) -> None: ...
    @_property
    def selection_mode(self) -> SelectionMode: ...
    @selection_mode.setter
    def selection_mode(self, value: SelectionMode) -> None: ...
    @_property
    def selected_items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Object]]: ...

@typing.final
class ListBoxItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ListBoxItem: ...
    def __new__(cls: typing.Type[ListBoxItem]) -> ListBoxItem: ...

@typing.final
class ListPickerFlyout_Static(type):
    @_property
    def display_member_path_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def items_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_index_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_item_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_value_path_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_value_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ListPickerFlyout(winrt.system.Object, metaclass=ListPickerFlyout_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ListPickerFlyout: ...
    def __new__(cls: typing.Type[ListPickerFlyout]) -> ListPickerFlyout: ...
    def show_at_async(self, target: typing.Optional[microsoft_ui_xaml.FrameworkElement], /) -> windows_foundation.IAsyncOperation[windows_foundation_collections.IVectorView[winrt.system.Object]]: ...
    def add_items_picked(self, handler: windows_foundation.TypedEventHandler[ListPickerFlyout, ItemsPickedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_items_picked(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def selection_mode(self) -> ListPickerFlyoutSelectionMode: ...
    @selection_mode.setter
    def selection_mode(self, value: ListPickerFlyoutSelectionMode) -> None: ...
    @_property
    def selected_value_path(self) -> str: ...
    @selected_value_path.setter
    def selected_value_path(self, value: str) -> None: ...
    @_property
    def selected_value(self) -> typing.Optional[winrt.system.Object]: ...
    @selected_value.setter
    def selected_value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def selected_item(self) -> typing.Optional[winrt.system.Object]: ...
    @selected_item.setter
    def selected_item(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def selected_index(self) -> winrt.system.Int32: ...
    @selected_index.setter
    def selected_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def items_source(self) -> typing.Optional[winrt.system.Object]: ...
    @items_source.setter
    def items_source(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def item_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @item_template.setter
    def item_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def display_member_path(self) -> str: ...
    @display_member_path.setter
    def display_member_path(self, value: str) -> None: ...
    @_property
    def selected_items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Object]]: ...

@typing.final
class ListPickerFlyoutPresenter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ListPickerFlyoutPresenter: ...

@typing.final
class ListView(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ListView: ...
    def __new__(cls: typing.Type[ListView]) -> ListView: ...

@typing.final
class ListViewBase_Static(type):
    @_property
    def can_drag_items_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def can_reorder_items_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def data_fetch_size_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def footer_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def footer_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def footer_transitions_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_transitions_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def incremental_loading_threshold_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def incremental_loading_trigger_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_active_view_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_item_click_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_multi_select_check_box_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_swipe_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_zoomed_in_view_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def reorder_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def semantic_zoom_owner_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def shows_scrolling_placeholders_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def single_selection_follows_focus_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ListViewBase(winrt.system.Object, metaclass=ListViewBase_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ListViewBase: ...
    def complete_view_change(self) -> None: ...
    def complete_view_change_from(self, source: typing.Optional[SemanticZoomLocation], destination: typing.Optional[SemanticZoomLocation], /) -> None: ...
    def complete_view_change_to(self, source: typing.Optional[SemanticZoomLocation], destination: typing.Optional[SemanticZoomLocation], /) -> None: ...
    def deselect_range(self, item_index_range: typing.Optional[microsoft_ui_xaml_data.ItemIndexRange], /) -> None: ...
    def initialize_view_change(self) -> None: ...
    def is_drag_source(self) -> bool: ...
    def load_more_items_async(self) -> windows_foundation.IAsyncOperation[microsoft_ui_xaml_data.LoadMoreItemsResult]: ...
    def make_visible(self, item: typing.Optional[SemanticZoomLocation], /) -> None: ...
    def prepare_connected_animation(self, key: str, item: typing.Optional[winrt.system.Object], element_name: str, /) -> typing.Optional[microsoft_ui_xaml_media_animation.ConnectedAnimation]: ...
    @typing.overload
    def scroll_into_view(self, item: typing.Optional[winrt.system.Object], /) -> None: ...
    @typing.overload
    def scroll_into_view(self, item: typing.Optional[winrt.system.Object], alignment: ScrollIntoViewAlignment, /) -> None: ...
    def select_all(self) -> None: ...
    def select_range(self, item_index_range: typing.Optional[microsoft_ui_xaml_data.ItemIndexRange], /) -> None: ...
    def set_desired_container_update_duration(self, duration: datetime.timedelta, /) -> None: ...
    def start_view_change_from(self, source: typing.Optional[SemanticZoomLocation], destination: typing.Optional[SemanticZoomLocation], /) -> None: ...
    def start_view_change_to(self, source: typing.Optional[SemanticZoomLocation], destination: typing.Optional[SemanticZoomLocation], /) -> None: ...
    def try_start_connected_animation_async(self, animation: typing.Optional[microsoft_ui_xaml_media_animation.ConnectedAnimation], item: typing.Optional[winrt.system.Object], element_name: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def add_choosing_group_header_container(self, handler: windows_foundation.TypedEventHandler[ListViewBase, ChoosingGroupHeaderContainerEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_choosing_group_header_container(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_choosing_item_container(self, handler: windows_foundation.TypedEventHandler[ListViewBase, ChoosingItemContainerEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_choosing_item_container(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_container_content_changing(self, handler: windows_foundation.TypedEventHandler[ListViewBase, ContainerContentChangingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_container_content_changing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drag_items_completed(self, handler: windows_foundation.TypedEventHandler[ListViewBase, DragItemsCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drag_items_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drag_items_starting(self, handler: typing.Optional[DragItemsStartingEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drag_items_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_item_click(self, handler: typing.Optional[ItemClickEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_item_click(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def single_selection_follows_focus(self) -> bool: ...
    @single_selection_follows_focus.setter
    def single_selection_follows_focus(self, value: bool) -> None: ...
    @_property
    def shows_scrolling_placeholders(self) -> bool: ...
    @shows_scrolling_placeholders.setter
    def shows_scrolling_placeholders(self, value: bool) -> None: ...
    @_property
    def selection_mode(self) -> ListViewSelectionMode: ...
    @selection_mode.setter
    def selection_mode(self, value: ListViewSelectionMode) -> None: ...
    @_property
    def reorder_mode(self) -> ListViewReorderMode: ...
    @reorder_mode.setter
    def reorder_mode(self, value: ListViewReorderMode) -> None: ...
    @_property
    def is_swipe_enabled(self) -> bool: ...
    @is_swipe_enabled.setter
    def is_swipe_enabled(self, value: bool) -> None: ...
    @_property
    def is_multi_select_check_box_enabled(self) -> bool: ...
    @is_multi_select_check_box_enabled.setter
    def is_multi_select_check_box_enabled(self, value: bool) -> None: ...
    @_property
    def is_item_click_enabled(self) -> bool: ...
    @is_item_click_enabled.setter
    def is_item_click_enabled(self, value: bool) -> None: ...
    @_property
    def incremental_loading_trigger(self) -> IncrementalLoadingTrigger: ...
    @incremental_loading_trigger.setter
    def incremental_loading_trigger(self, value: IncrementalLoadingTrigger) -> None: ...
    @_property
    def incremental_loading_threshold(self) -> winrt.system.Double: ...
    @incremental_loading_threshold.setter
    def incremental_loading_threshold(self, value: winrt.system.Double) -> None: ...
    @_property
    def header_transitions(self) -> typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]: ...
    @header_transitions.setter
    def header_transitions(self, value: typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def footer_transitions(self) -> typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]: ...
    @footer_transitions.setter
    def footer_transitions(self, value: typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]) -> None: ...
    @_property
    def footer_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @footer_template.setter
    def footer_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def footer(self) -> typing.Optional[winrt.system.Object]: ...
    @footer.setter
    def footer(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def data_fetch_size(self) -> winrt.system.Double: ...
    @data_fetch_size.setter
    def data_fetch_size(self, value: winrt.system.Double) -> None: ...
    @_property
    def can_reorder_items(self) -> bool: ...
    @can_reorder_items.setter
    def can_reorder_items(self, value: bool) -> None: ...
    @_property
    def can_drag_items(self) -> bool: ...
    @can_drag_items.setter
    def can_drag_items(self, value: bool) -> None: ...
    @_property
    def selected_items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Object]]: ...
    @_property
    def selected_ranges(self) -> typing.Optional[windows_foundation_collections.IVectorView[microsoft_ui_xaml_data.ItemIndexRange]]: ...
    @_property
    def semantic_zoom_owner(self) -> typing.Optional[SemanticZoom]: ...
    @semantic_zoom_owner.setter
    def semantic_zoom_owner(self, value: typing.Optional[SemanticZoom]) -> None: ...
    @_property
    def is_zoomed_in_view(self) -> bool: ...
    @is_zoomed_in_view.setter
    def is_zoomed_in_view(self, value: bool) -> None: ...
    @_property
    def is_active_view(self) -> bool: ...
    @is_active_view.setter
    def is_active_view(self, value: bool) -> None: ...

@typing.final
class ListViewBaseHeaderItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ListViewBaseHeaderItem: ...

@typing.final
class ListViewHeaderItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ListViewHeaderItem: ...
    def __new__(cls: typing.Type[ListViewHeaderItem]) -> ListViewHeaderItem: ...

@typing.final
class ListViewItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ListViewItem: ...
    def __new__(cls: typing.Type[ListViewItem]) -> ListViewItem: ...
    @_property
    def template_settings(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.ListViewItemTemplateSettings]: ...

@typing.final
class ListViewPersistenceHelper_Static(type):
    def get_relative_scroll_position(cls, list_view_base: typing.Optional[ListViewBase], item_to_key_handler: typing.Optional[ListViewItemToKeyHandler], /) -> str: ...
    def set_relative_scroll_position_async(cls, list_view_base: typing.Optional[ListViewBase], relative_scroll_position: str, key_to_item_handler: typing.Optional[ListViewKeyToItemHandler], /) -> windows_foundation.IAsyncAction: ...

@typing.final
class ListViewPersistenceHelper(winrt.system.Object, metaclass=ListViewPersistenceHelper_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ListViewPersistenceHelper: ...

@typing.final
class MapControl_Static(type):
    @_property
    def center_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def interactive_controls_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def layers_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def map_service_token_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def zoom_level_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class MapControl(winrt.system.Object, metaclass=MapControl_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControl: ...
    def __new__(cls: typing.Type[MapControl]) -> MapControl: ...
    def add_map_element_click(self, handler: windows_foundation.TypedEventHandler[MapControl, MapElementClickEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_map_element_click(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_map_service_error_occurred(self, handler: windows_foundation.TypedEventHandler[MapControl, MapControlMapServiceErrorOccurredEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_map_service_error_occurred(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def zoom_level(self) -> winrt.system.Double: ...
    @zoom_level.setter
    def zoom_level(self, value: winrt.system.Double) -> None: ...
    @_property
    def map_service_token(self) -> str: ...
    @map_service_token.setter
    def map_service_token(self, value: str) -> None: ...
    @_property
    def layers(self) -> typing.Optional[windows_foundation_collections.IVector[MapLayer]]: ...
    @layers.setter
    def layers(self, value: typing.Optional[windows_foundation_collections.IVector[MapLayer]]) -> None: ...
    @_property
    def interactive_controls_visible(self) -> bool: ...
    @interactive_controls_visible.setter
    def interactive_controls_visible(self, value: bool) -> None: ...
    @_property
    def center(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @center.setter
    def center(self, value: typing.Optional[windows_devices_geolocation.Geopoint]) -> None: ...

@typing.final
class MapControlMapServiceErrorOccurredEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlMapServiceErrorOccurredEventArgs: ...
    @_property
    def diagnostic_message(self) -> str: ...

@typing.final
class MapElement(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElement: ...

@typing.final
class MapElementClickEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementClickEventArgs: ...
    @_property
    def element(self) -> typing.Optional[MapElement]: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...

@typing.final
class MapElementsLayer_Static(type):
    @_property
    def map_elements_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class MapElementsLayer(winrt.system.Object, metaclass=MapElementsLayer_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementsLayer: ...
    def __new__(cls: typing.Type[MapElementsLayer]) -> MapElementsLayer: ...
    def add_map_element_click(self, handler: windows_foundation.TypedEventHandler[MapElementsLayer, MapElementClickEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_map_element_click(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def map_elements(self) -> typing.Optional[windows_foundation_collections.IVector[MapElement]]: ...
    @map_elements.setter
    def map_elements(self, value: typing.Optional[windows_foundation_collections.IVector[MapElement]]) -> None: ...

@typing.final
class MapIcon_Static(type):
    @_property
    def location_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class MapIcon(winrt.system.Object, metaclass=MapIcon_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapIcon: ...
    def __new__(cls: typing.Type[MapIcon]) -> MapIcon: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @location.setter
    def location(self, value: typing.Optional[windows_devices_geolocation.Geopoint]) -> None: ...

@typing.final
class MapLayer(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapLayer: ...

@typing.final
class MediaPlayerElement_Static(type):
    @_property
    def are_transport_controls_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def auto_play_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_full_window_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def media_player_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def poster_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def stretch_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class MediaPlayerElement(winrt.system.Object, metaclass=MediaPlayerElement_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaPlayerElement: ...
    def __new__(cls: typing.Type[MediaPlayerElement]) -> MediaPlayerElement: ...
    def set_media_player(self, media_player: typing.Optional[windows_media_playback.MediaPlayer], /) -> None: ...
    @_property
    def transport_controls(self) -> typing.Optional[MediaTransportControls]: ...
    @transport_controls.setter
    def transport_controls(self, value: typing.Optional[MediaTransportControls]) -> None: ...
    @_property
    def stretch(self) -> microsoft_ui_xaml_media.Stretch: ...
    @stretch.setter
    def stretch(self, value: microsoft_ui_xaml_media.Stretch) -> None: ...
    @_property
    def source(self) -> typing.Optional[windows_media_playback.IMediaPlaybackSource]: ...
    @source.setter
    def source(self, value: typing.Optional[windows_media_playback.IMediaPlaybackSource]) -> None: ...
    @_property
    def poster_source(self) -> typing.Optional[microsoft_ui_xaml_media.ImageSource]: ...
    @poster_source.setter
    def poster_source(self, value: typing.Optional[microsoft_ui_xaml_media.ImageSource]) -> None: ...
    @_property
    def is_full_window(self) -> bool: ...
    @is_full_window.setter
    def is_full_window(self, value: bool) -> None: ...
    @_property
    def auto_play(self) -> bool: ...
    @auto_play.setter
    def auto_play(self, value: bool) -> None: ...
    @_property
    def are_transport_controls_enabled(self) -> bool: ...
    @are_transport_controls_enabled.setter
    def are_transport_controls_enabled(self, value: bool) -> None: ...
    @_property
    def media_player(self) -> typing.Optional[windows_media_playback.MediaPlayer]: ...

@typing.final
class MediaPlayerPresenter_Static(type):
    @_property
    def is_full_window_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def media_player_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def stretch_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class MediaPlayerPresenter(winrt.system.Object, metaclass=MediaPlayerPresenter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaPlayerPresenter: ...
    def __new__(cls: typing.Type[MediaPlayerPresenter]) -> MediaPlayerPresenter: ...
    @_property
    def stretch(self) -> microsoft_ui_xaml_media.Stretch: ...
    @stretch.setter
    def stretch(self, value: microsoft_ui_xaml_media.Stretch) -> None: ...
    @_property
    def media_player(self) -> typing.Optional[windows_media_playback.MediaPlayer]: ...
    @media_player.setter
    def media_player(self, value: typing.Optional[windows_media_playback.MediaPlayer]) -> None: ...
    @_property
    def is_full_window(self) -> bool: ...
    @is_full_window.setter
    def is_full_window(self, value: bool) -> None: ...

@typing.final
class MediaTransportControls_Static(type):
    @_property
    def fast_play_fallback_behaviour_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_compact_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_fast_forward_button_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_fast_forward_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_fast_rewind_button_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_fast_rewind_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_next_track_button_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_playback_rate_button_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_playback_rate_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_previous_track_button_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_repeat_button_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_repeat_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_seek_bar_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_seek_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_skip_backward_button_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_skip_backward_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_skip_forward_button_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_skip_forward_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_stop_button_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_stop_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_volume_button_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_volume_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_zoom_button_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_zoom_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def show_and_hide_automatically_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class MediaTransportControls(winrt.system.Object, metaclass=MediaTransportControls_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaTransportControls: ...
    def __new__(cls: typing.Type[MediaTransportControls]) -> MediaTransportControls: ...
    def hide(self) -> None: ...
    def show(self) -> None: ...
    def add_thumbnail_requested(self, handler: windows_foundation.TypedEventHandler[MediaTransportControls, microsoft_ui_xaml_media.MediaTransportControlsThumbnailRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_thumbnail_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def show_and_hide_automatically(self) -> bool: ...
    @show_and_hide_automatically.setter
    def show_and_hide_automatically(self, value: bool) -> None: ...
    @_property
    def is_zoom_enabled(self) -> bool: ...
    @is_zoom_enabled.setter
    def is_zoom_enabled(self, value: bool) -> None: ...
    @_property
    def is_zoom_button_visible(self) -> bool: ...
    @is_zoom_button_visible.setter
    def is_zoom_button_visible(self, value: bool) -> None: ...
    @_property
    def is_volume_enabled(self) -> bool: ...
    @is_volume_enabled.setter
    def is_volume_enabled(self, value: bool) -> None: ...
    @_property
    def is_volume_button_visible(self) -> bool: ...
    @is_volume_button_visible.setter
    def is_volume_button_visible(self, value: bool) -> None: ...
    @_property
    def is_stop_enabled(self) -> bool: ...
    @is_stop_enabled.setter
    def is_stop_enabled(self, value: bool) -> None: ...
    @_property
    def is_stop_button_visible(self) -> bool: ...
    @is_stop_button_visible.setter
    def is_stop_button_visible(self, value: bool) -> None: ...
    @_property
    def is_skip_forward_enabled(self) -> bool: ...
    @is_skip_forward_enabled.setter
    def is_skip_forward_enabled(self, value: bool) -> None: ...
    @_property
    def is_skip_forward_button_visible(self) -> bool: ...
    @is_skip_forward_button_visible.setter
    def is_skip_forward_button_visible(self, value: bool) -> None: ...
    @_property
    def is_skip_backward_enabled(self) -> bool: ...
    @is_skip_backward_enabled.setter
    def is_skip_backward_enabled(self, value: bool) -> None: ...
    @_property
    def is_skip_backward_button_visible(self) -> bool: ...
    @is_skip_backward_button_visible.setter
    def is_skip_backward_button_visible(self, value: bool) -> None: ...
    @_property
    def is_seek_enabled(self) -> bool: ...
    @is_seek_enabled.setter
    def is_seek_enabled(self, value: bool) -> None: ...
    @_property
    def is_seek_bar_visible(self) -> bool: ...
    @is_seek_bar_visible.setter
    def is_seek_bar_visible(self, value: bool) -> None: ...
    @_property
    def is_repeat_enabled(self) -> bool: ...
    @is_repeat_enabled.setter
    def is_repeat_enabled(self, value: bool) -> None: ...
    @_property
    def is_repeat_button_visible(self) -> bool: ...
    @is_repeat_button_visible.setter
    def is_repeat_button_visible(self, value: bool) -> None: ...
    @_property
    def is_previous_track_button_visible(self) -> bool: ...
    @is_previous_track_button_visible.setter
    def is_previous_track_button_visible(self, value: bool) -> None: ...
    @_property
    def is_playback_rate_enabled(self) -> bool: ...
    @is_playback_rate_enabled.setter
    def is_playback_rate_enabled(self, value: bool) -> None: ...
    @_property
    def is_playback_rate_button_visible(self) -> bool: ...
    @is_playback_rate_button_visible.setter
    def is_playback_rate_button_visible(self, value: bool) -> None: ...
    @_property
    def is_next_track_button_visible(self) -> bool: ...
    @is_next_track_button_visible.setter
    def is_next_track_button_visible(self, value: bool) -> None: ...
    @_property
    def is_fast_rewind_enabled(self) -> bool: ...
    @is_fast_rewind_enabled.setter
    def is_fast_rewind_enabled(self, value: bool) -> None: ...
    @_property
    def is_fast_rewind_button_visible(self) -> bool: ...
    @is_fast_rewind_button_visible.setter
    def is_fast_rewind_button_visible(self, value: bool) -> None: ...
    @_property
    def is_fast_forward_enabled(self) -> bool: ...
    @is_fast_forward_enabled.setter
    def is_fast_forward_enabled(self, value: bool) -> None: ...
    @_property
    def is_fast_forward_button_visible(self) -> bool: ...
    @is_fast_forward_button_visible.setter
    def is_fast_forward_button_visible(self, value: bool) -> None: ...
    @_property
    def is_compact(self) -> bool: ...
    @is_compact.setter
    def is_compact(self, value: bool) -> None: ...
    @_property
    def fast_play_fallback_behaviour(self) -> microsoft_ui_xaml_media.FastPlayFallbackBehaviour: ...
    @fast_play_fallback_behaviour.setter
    def fast_play_fallback_behaviour(self, value: microsoft_ui_xaml_media.FastPlayFallbackBehaviour) -> None: ...

@typing.final
class MediaTransportControlsHelper_Static(type):
    def get_dropout_order(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    def set_dropout_order(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: typing.Optional[winrt.system.Int32], /) -> None: ...
    @_property
    def dropout_order_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class MediaTransportControlsHelper(winrt.system.Object, metaclass=MediaTransportControlsHelper_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaTransportControlsHelper: ...

@typing.final
class MenuBar_Static(type):
    @_property
    def items_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class MenuBar(winrt.system.Object, metaclass=MenuBar_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MenuBar: ...
    def __new__(cls: typing.Type[MenuBar]) -> MenuBar: ...
    @_property
    def items(self) -> typing.Optional[windows_foundation_collections.IVector[MenuBarItem]]: ...

@typing.final
class MenuBarItem_Static(type):
    @_property
    def items_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def title_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class MenuBarItem(winrt.system.Object, metaclass=MenuBarItem_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MenuBarItem: ...
    def __new__(cls: typing.Type[MenuBarItem]) -> MenuBarItem: ...
    @_property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> None: ...
    @_property
    def items(self) -> typing.Optional[windows_foundation_collections.IVector[MenuFlyoutItemBase]]: ...

@typing.final
class MenuBarItemFlyout(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MenuBarItemFlyout: ...
    def __new__(cls: typing.Type[MenuBarItemFlyout]) -> MenuBarItemFlyout: ...

@typing.final
class MenuFlyout_Static(type):
    @_property
    def menu_flyout_presenter_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class MenuFlyout(winrt.system.Object, metaclass=MenuFlyout_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MenuFlyout: ...
    def __new__(cls: typing.Type[MenuFlyout]) -> MenuFlyout: ...
    def show_at(self, target_element: typing.Optional[microsoft_ui_xaml.UIElement], point: windows_foundation.Point, /) -> None: ...
    @_property
    def menu_flyout_presenter_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @menu_flyout_presenter_style.setter
    def menu_flyout_presenter_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def items(self) -> typing.Optional[windows_foundation_collections.IVector[MenuFlyoutItemBase]]: ...

@typing.final
class MenuFlyoutItem_Static(type):
    @_property
    def command_parameter_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def command_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def icon_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def keyboard_accelerator_text_override_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class MenuFlyoutItem(winrt.system.Object, metaclass=MenuFlyoutItem_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MenuFlyoutItem: ...
    def __new__(cls: typing.Type[MenuFlyoutItem]) -> MenuFlyoutItem: ...
    def add_click(self, handler: typing.Optional[microsoft_ui_xaml.RoutedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_click(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> None: ...
    @_property
    def keyboard_accelerator_text_override(self) -> str: ...
    @keyboard_accelerator_text_override.setter
    def keyboard_accelerator_text_override(self, value: str) -> None: ...
    @_property
    def icon(self) -> typing.Optional[IconElement]: ...
    @icon.setter
    def icon(self, value: typing.Optional[IconElement]) -> None: ...
    @_property
    def command_parameter(self) -> typing.Optional[winrt.system.Object]: ...
    @command_parameter.setter
    def command_parameter(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def command(self) -> typing.Optional[microsoft_ui_xaml_input.ICommand]: ...
    @command.setter
    def command(self, value: typing.Optional[microsoft_ui_xaml_input.ICommand]) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.MenuFlyoutItemTemplateSettings]: ...

@typing.final
class MenuFlyoutItemBase(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MenuFlyoutItemBase: ...

@typing.final
class MenuFlyoutPresenter_Static(type):
    @_property
    def is_default_shadow_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def system_backdrop_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class MenuFlyoutPresenter(winrt.system.Object, metaclass=MenuFlyoutPresenter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MenuFlyoutPresenter: ...
    def __new__(cls: typing.Type[MenuFlyoutPresenter]) -> MenuFlyoutPresenter: ...
    @_property
    def is_default_shadow_enabled(self) -> bool: ...
    @is_default_shadow_enabled.setter
    def is_default_shadow_enabled(self, value: bool) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.MenuFlyoutPresenterTemplateSettings]: ...
    @_property
    def system_backdrop(self) -> typing.Optional[microsoft_ui_xaml_media.SystemBackdrop]: ...
    @system_backdrop.setter
    def system_backdrop(self, value: typing.Optional[microsoft_ui_xaml_media.SystemBackdrop]) -> None: ...

@typing.final
class MenuFlyoutSeparator(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MenuFlyoutSeparator: ...
    def __new__(cls: typing.Type[MenuFlyoutSeparator]) -> MenuFlyoutSeparator: ...

@typing.final
class MenuFlyoutSubItem_Static(type):
    @_property
    def icon_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class MenuFlyoutSubItem(winrt.system.Object, metaclass=MenuFlyoutSubItem_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MenuFlyoutSubItem: ...
    def __new__(cls: typing.Type[MenuFlyoutSubItem]) -> MenuFlyoutSubItem: ...
    @_property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> None: ...
    @_property
    def icon(self) -> typing.Optional[IconElement]: ...
    @icon.setter
    def icon(self, value: typing.Optional[IconElement]) -> None: ...
    @_property
    def items(self) -> typing.Optional[windows_foundation_collections.IVector[MenuFlyoutItemBase]]: ...

@typing.final
class NavigationView_Static(type):
    @_property
    def footer_menu_items_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_title_bar_auto_padding_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def menu_item_container_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def menu_item_container_style_selector_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def menu_item_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def menu_item_template_selector_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def menu_items_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def menu_items_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def open_pane_length_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pane_footer_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pane_toggle_button_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_item_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def always_show_header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def auto_suggest_box_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def compact_mode_threshold_width_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def compact_pane_length_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def display_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def expanded_mode_threshold_width_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def settings_item_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def footer_menu_items_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_pane_open_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_pane_toggle_button_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_settings_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_back_button_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_back_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_pane_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def overflow_label_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pane_custom_content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pane_display_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pane_header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pane_title_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_follows_focus_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def shoulder_navigation_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def template_settings_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def content_overlay_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class NavigationView(winrt.system.Object, metaclass=NavigationView_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationView: ...
    def __new__(cls: typing.Type[NavigationView]) -> NavigationView: ...
    def collapse(self, item: typing.Optional[NavigationViewItem], /) -> None: ...
    def container_from_menu_item(self, item: typing.Optional[winrt.system.Object], /) -> typing.Optional[microsoft_ui_xaml.DependencyObject]: ...
    def expand(self, item: typing.Optional[NavigationViewItem], /) -> None: ...
    def menu_item_from_container(self, container: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> typing.Optional[winrt.system.Object]: ...
    def add_display_mode_changed(self, handler: windows_foundation.TypedEventHandler[NavigationView, NavigationViewDisplayModeChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_display_mode_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_item_invoked(self, handler: windows_foundation.TypedEventHandler[NavigationView, NavigationViewItemInvokedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_item_invoked(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_selection_changed(self, handler: windows_foundation.TypedEventHandler[NavigationView, NavigationViewSelectionChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_selection_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_back_requested(self, handler: windows_foundation.TypedEventHandler[NavigationView, NavigationViewBackRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_back_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_collapsed(self, handler: windows_foundation.TypedEventHandler[NavigationView, NavigationViewItemCollapsedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_collapsed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_expanding(self, handler: windows_foundation.TypedEventHandler[NavigationView, NavigationViewItemExpandingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_expanding(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pane_closed(self, handler: windows_foundation.TypedEventHandler[NavigationView, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pane_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pane_closing(self, handler: windows_foundation.TypedEventHandler[NavigationView, NavigationViewPaneClosingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pane_closing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pane_opened(self, handler: windows_foundation.TypedEventHandler[NavigationView, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pane_opened(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pane_opening(self, handler: windows_foundation.TypedEventHandler[NavigationView, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pane_opening(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def selected_item(self) -> typing.Optional[winrt.system.Object]: ...
    @selected_item.setter
    def selected_item(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def pane_toggle_button_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @pane_toggle_button_style.setter
    def pane_toggle_button_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def pane_footer(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @pane_footer.setter
    def pane_footer(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def open_pane_length(self) -> winrt.system.Double: ...
    @open_pane_length.setter
    def open_pane_length(self, value: winrt.system.Double) -> None: ...
    @_property
    def menu_items_source(self) -> typing.Optional[winrt.system.Object]: ...
    @menu_items_source.setter
    def menu_items_source(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def menu_item_container_style_selector(self) -> typing.Optional[StyleSelector]: ...
    @menu_item_container_style_selector.setter
    def menu_item_container_style_selector(self, value: typing.Optional[StyleSelector]) -> None: ...
    @_property
    def menu_item_container_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @menu_item_container_style.setter
    def menu_item_container_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def is_title_bar_auto_padding_enabled(self) -> bool: ...
    @is_title_bar_auto_padding_enabled.setter
    def is_title_bar_auto_padding_enabled(self, value: bool) -> None: ...
    @_property
    def is_settings_visible(self) -> bool: ...
    @is_settings_visible.setter
    def is_settings_visible(self, value: bool) -> None: ...
    @_property
    def is_pane_toggle_button_visible(self) -> bool: ...
    @is_pane_toggle_button_visible.setter
    def is_pane_toggle_button_visible(self, value: bool) -> None: ...
    @_property
    def is_pane_open(self) -> bool: ...
    @is_pane_open.setter
    def is_pane_open(self, value: bool) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def footer_menu_items_source(self) -> typing.Optional[winrt.system.Object]: ...
    @footer_menu_items_source.setter
    def footer_menu_items_source(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def menu_item_template_selector(self) -> typing.Optional[DataTemplateSelector]: ...
    @menu_item_template_selector.setter
    def menu_item_template_selector(self, value: typing.Optional[DataTemplateSelector]) -> None: ...
    @_property
    def expanded_mode_threshold_width(self) -> winrt.system.Double: ...
    @expanded_mode_threshold_width.setter
    def expanded_mode_threshold_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def menu_item_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @menu_item_template.setter
    def menu_item_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def compact_pane_length(self) -> winrt.system.Double: ...
    @compact_pane_length.setter
    def compact_pane_length(self, value: winrt.system.Double) -> None: ...
    @_property
    def compact_mode_threshold_width(self) -> winrt.system.Double: ...
    @compact_mode_threshold_width.setter
    def compact_mode_threshold_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def auto_suggest_box(self) -> typing.Optional[AutoSuggestBox]: ...
    @auto_suggest_box.setter
    def auto_suggest_box(self, value: typing.Optional[AutoSuggestBox]) -> None: ...
    @_property
    def always_show_header(self) -> bool: ...
    @always_show_header.setter
    def always_show_header(self, value: bool) -> None: ...
    @_property
    def menu_items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Object]]: ...
    @_property
    def display_mode(self) -> NavigationViewDisplayMode: ...
    @_property
    def footer_menu_items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Object]]: ...
    @_property
    def settings_item(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def shoulder_navigation_enabled(self) -> NavigationViewShoulderNavigationEnabled: ...
    @shoulder_navigation_enabled.setter
    def shoulder_navigation_enabled(self, value: NavigationViewShoulderNavigationEnabled) -> None: ...
    @_property
    def selection_follows_focus(self) -> NavigationViewSelectionFollowsFocus: ...
    @selection_follows_focus.setter
    def selection_follows_focus(self, value: NavigationViewSelectionFollowsFocus) -> None: ...
    @_property
    def pane_title(self) -> str: ...
    @pane_title.setter
    def pane_title(self, value: str) -> None: ...
    @_property
    def pane_header(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @pane_header.setter
    def pane_header(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def pane_display_mode(self) -> NavigationViewPaneDisplayMode: ...
    @pane_display_mode.setter
    def pane_display_mode(self, value: NavigationViewPaneDisplayMode) -> None: ...
    @_property
    def pane_custom_content(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @pane_custom_content.setter
    def pane_custom_content(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def overflow_label_mode(self) -> NavigationViewOverflowLabelMode: ...
    @overflow_label_mode.setter
    def overflow_label_mode(self, value: NavigationViewOverflowLabelMode) -> None: ...
    @_property
    def is_pane_visible(self) -> bool: ...
    @is_pane_visible.setter
    def is_pane_visible(self, value: bool) -> None: ...
    @_property
    def is_back_enabled(self) -> bool: ...
    @is_back_enabled.setter
    def is_back_enabled(self, value: bool) -> None: ...
    @_property
    def is_back_button_visible(self) -> NavigationViewBackButtonVisible: ...
    @is_back_button_visible.setter
    def is_back_button_visible(self, value: NavigationViewBackButtonVisible) -> None: ...
    @_property
    def content_overlay(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @content_overlay.setter
    def content_overlay(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[NavigationViewTemplateSettings]: ...

@typing.final
class NavigationViewBackRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationViewBackRequestedEventArgs: ...

@typing.final
class NavigationViewDisplayModeChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationViewDisplayModeChangedEventArgs: ...
    @_property
    def display_mode(self) -> NavigationViewDisplayMode: ...

@typing.final
class NavigationViewItem_Static(type):
    @_property
    def compact_pane_length_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def icon_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def has_unrealized_children_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_child_selected_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_expanded_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def menu_items_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def menu_items_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selects_on_invoked_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def info_badge_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class NavigationViewItem(winrt.system.Object, metaclass=NavigationViewItem_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationViewItem: ...
    def __new__(cls: typing.Type[NavigationViewItem]) -> NavigationViewItem: ...
    @_property
    def icon(self) -> typing.Optional[IconElement]: ...
    @icon.setter
    def icon(self, value: typing.Optional[IconElement]) -> None: ...
    @_property
    def compact_pane_length(self) -> winrt.system.Double: ...
    @_property
    def selects_on_invoked(self) -> bool: ...
    @selects_on_invoked.setter
    def selects_on_invoked(self, value: bool) -> None: ...
    @_property
    def menu_items_source(self) -> typing.Optional[winrt.system.Object]: ...
    @menu_items_source.setter
    def menu_items_source(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def is_expanded(self) -> bool: ...
    @is_expanded.setter
    def is_expanded(self, value: bool) -> None: ...
    @_property
    def is_child_selected(self) -> bool: ...
    @is_child_selected.setter
    def is_child_selected(self, value: bool) -> None: ...
    @_property
    def has_unrealized_children(self) -> bool: ...
    @has_unrealized_children.setter
    def has_unrealized_children(self, value: bool) -> None: ...
    @_property
    def menu_items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Object]]: ...
    @_property
    def info_badge(self) -> typing.Optional[InfoBadge]: ...
    @info_badge.setter
    def info_badge(self, value: typing.Optional[InfoBadge]) -> None: ...

@typing.final
class NavigationViewItemBase_Static(type):
    @_property
    def is_selected_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class NavigationViewItemBase(winrt.system.Object, metaclass=NavigationViewItemBase_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationViewItemBase: ...
    @_property
    def is_selected(self) -> bool: ...
    @is_selected.setter
    def is_selected(self, value: bool) -> None: ...

@typing.final
class NavigationViewItemCollapsedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationViewItemCollapsedEventArgs: ...
    @_property
    def collapsed_item(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def collapsed_item_container(self) -> typing.Optional[NavigationViewItemBase]: ...

@typing.final
class NavigationViewItemExpandingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationViewItemExpandingEventArgs: ...
    @_property
    def expanding_item(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def expanding_item_container(self) -> typing.Optional[NavigationViewItemBase]: ...

@typing.final
class NavigationViewItemHeader(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationViewItemHeader: ...
    def __new__(cls: typing.Type[NavigationViewItemHeader]) -> NavigationViewItemHeader: ...

@typing.final
class NavigationViewItemInvokedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationViewItemInvokedEventArgs: ...
    def __new__(cls: typing.Type[NavigationViewItemInvokedEventArgs]) -> NavigationViewItemInvokedEventArgs: ...
    @_property
    def invoked_item(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def is_settings_invoked(self) -> bool: ...
    @_property
    def invoked_item_container(self) -> typing.Optional[NavigationViewItemBase]: ...
    @_property
    def recommended_navigation_transition_info(self) -> typing.Optional[microsoft_ui_xaml_media_animation.NavigationTransitionInfo]: ...

@typing.final
class NavigationViewItemSeparator(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationViewItemSeparator: ...
    def __new__(cls: typing.Type[NavigationViewItemSeparator]) -> NavigationViewItemSeparator: ...

@typing.final
class NavigationViewPaneClosingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationViewPaneClosingEventArgs: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...

@typing.final
class NavigationViewSelectionChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationViewSelectionChangedEventArgs: ...
    @_property
    def is_settings_selected(self) -> bool: ...
    @_property
    def selected_item(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def recommended_navigation_transition_info(self) -> typing.Optional[microsoft_ui_xaml_media_animation.NavigationTransitionInfo]: ...
    @_property
    def selected_item_container(self) -> typing.Optional[NavigationViewItemBase]: ...

@typing.final
class NavigationViewTemplateSettings_Static(type):
    @_property
    def back_button_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def left_pane_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def overflow_button_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pane_toggle_button_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pane_toggle_button_width_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def single_selection_follows_focus_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def smaller_pane_toggle_button_width_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def top_padding_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def top_pane_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def open_pane_length_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class NavigationViewTemplateSettings(winrt.system.Object, metaclass=NavigationViewTemplateSettings_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationViewTemplateSettings: ...
    def __new__(cls: typing.Type[NavigationViewTemplateSettings]) -> NavigationViewTemplateSettings: ...
    @_property
    def back_button_visibility(self) -> microsoft_ui_xaml.Visibility: ...
    @_property
    def left_pane_visibility(self) -> microsoft_ui_xaml.Visibility: ...
    @_property
    def overflow_button_visibility(self) -> microsoft_ui_xaml.Visibility: ...
    @_property
    def pane_toggle_button_visibility(self) -> microsoft_ui_xaml.Visibility: ...
    @_property
    def pane_toggle_button_width(self) -> winrt.system.Double: ...
    @_property
    def single_selection_follows_focus(self) -> bool: ...
    @_property
    def smaller_pane_toggle_button_width(self) -> winrt.system.Double: ...
    @_property
    def top_padding(self) -> winrt.system.Double: ...
    @_property
    def top_pane_visibility(self) -> microsoft_ui_xaml.Visibility: ...
    @_property
    def open_pane_length(self) -> winrt.system.Double: ...

@typing.final
class NonVirtualizingLayout(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NonVirtualizingLayout: ...
    def __new__(cls: typing.Type[NonVirtualizingLayout]) -> NonVirtualizingLayout: ...

@typing.final
class NonVirtualizingLayoutContext(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NonVirtualizingLayoutContext: ...
    def __new__(cls: typing.Type[NonVirtualizingLayoutContext]) -> NonVirtualizingLayoutContext: ...
    @_property
    def children(self) -> typing.Optional[windows_foundation_collections.IVectorView[microsoft_ui_xaml.UIElement]]: ...

@typing.final
class NumberBox_Static(type):
    @_property
    def accepts_expression_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def description_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_wrap_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def large_change_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def maximum_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def minimum_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def number_formatter_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def placeholder_text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def prevent_keyboard_display_on_programmatic_focus_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_flyout_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_highlight_color_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def small_change_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def spin_button_placement_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_reading_order_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def validation_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def value_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class NumberBox(winrt.system.Object, metaclass=NumberBox_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NumberBox: ...
    def __new__(cls: typing.Type[NumberBox]) -> NumberBox: ...
    def add_value_changed(self, handler: windows_foundation.TypedEventHandler[NumberBox, NumberBoxValueChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_value_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def value(self) -> winrt.system.Double: ...
    @value.setter
    def value(self, value: winrt.system.Double) -> None: ...
    @_property
    def validation_mode(self) -> NumberBoxValidationMode: ...
    @validation_mode.setter
    def validation_mode(self, value: NumberBoxValidationMode) -> None: ...
    @_property
    def text_reading_order(self) -> microsoft_ui_xaml.TextReadingOrder: ...
    @text_reading_order.setter
    def text_reading_order(self, value: microsoft_ui_xaml.TextReadingOrder) -> None: ...
    @_property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> None: ...
    @_property
    def spin_button_placement_mode(self) -> NumberBoxSpinButtonPlacementMode: ...
    @spin_button_placement_mode.setter
    def spin_button_placement_mode(self, value: NumberBoxSpinButtonPlacementMode) -> None: ...
    @_property
    def small_change(self) -> winrt.system.Double: ...
    @small_change.setter
    def small_change(self, value: winrt.system.Double) -> None: ...
    @_property
    def selection_highlight_color(self) -> typing.Optional[microsoft_ui_xaml_media.SolidColorBrush]: ...
    @selection_highlight_color.setter
    def selection_highlight_color(self, value: typing.Optional[microsoft_ui_xaml_media.SolidColorBrush]) -> None: ...
    @_property
    def selection_flyout(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]: ...
    @selection_flyout.setter
    def selection_flyout(self, value: typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]) -> None: ...
    @_property
    def prevent_keyboard_display_on_programmatic_focus(self) -> bool: ...
    @prevent_keyboard_display_on_programmatic_focus.setter
    def prevent_keyboard_display_on_programmatic_focus(self, value: bool) -> None: ...
    @_property
    def placeholder_text(self) -> str: ...
    @placeholder_text.setter
    def placeholder_text(self, value: str) -> None: ...
    @_property
    def number_formatter(self) -> typing.Optional[windows_globalization_numberformatting.INumberFormatter2]: ...
    @number_formatter.setter
    def number_formatter(self, value: typing.Optional[windows_globalization_numberformatting.INumberFormatter2]) -> None: ...
    @_property
    def minimum(self) -> winrt.system.Double: ...
    @minimum.setter
    def minimum(self, value: winrt.system.Double) -> None: ...
    @_property
    def maximum(self) -> winrt.system.Double: ...
    @maximum.setter
    def maximum(self, value: winrt.system.Double) -> None: ...
    @_property
    def large_change(self) -> winrt.system.Double: ...
    @large_change.setter
    def large_change(self, value: winrt.system.Double) -> None: ...
    @_property
    def is_wrap_enabled(self) -> bool: ...
    @is_wrap_enabled.setter
    def is_wrap_enabled(self, value: bool) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def description(self) -> typing.Optional[winrt.system.Object]: ...
    @description.setter
    def description(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def accepts_expression(self) -> bool: ...
    @accepts_expression.setter
    def accepts_expression(self, value: bool) -> None: ...

@typing.final
class NumberBoxValueChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NumberBoxValueChangedEventArgs: ...
    @_property
    def new_value(self) -> winrt.system.Double: ...
    @_property
    def old_value(self) -> winrt.system.Double: ...

@typing.final
class Page_Static(type):
    @_property
    def bottom_app_bar_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def frame_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def top_app_bar_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class Page(winrt.system.Object, metaclass=Page_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Page: ...
    def __new__(cls: typing.Type[Page]) -> Page: ...
    @_property
    def top_app_bar(self) -> typing.Optional[AppBar]: ...
    @top_app_bar.setter
    def top_app_bar(self, value: typing.Optional[AppBar]) -> None: ...
    @_property
    def navigation_cache_mode(self) -> microsoft_ui_xaml_navigation.NavigationCacheMode: ...
    @navigation_cache_mode.setter
    def navigation_cache_mode(self, value: microsoft_ui_xaml_navigation.NavigationCacheMode) -> None: ...
    @_property
    def bottom_app_bar(self) -> typing.Optional[AppBar]: ...
    @bottom_app_bar.setter
    def bottom_app_bar(self, value: typing.Optional[AppBar]) -> None: ...
    @_property
    def frame(self) -> typing.Optional[Frame]: ...

@typing.final
class Panel_Static(type):
    @_property
    def background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def children_transitions_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_items_host_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class Panel(winrt.system.Object, metaclass=Panel_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Panel: ...
    @_property
    def children_transitions(self) -> typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]: ...
    @children_transitions.setter
    def children_transitions(self, value: typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]) -> None: ...
    @_property
    def background_transition(self) -> typing.Optional[microsoft_ui_xaml.BrushTransition]: ...
    @background_transition.setter
    def background_transition(self, value: typing.Optional[microsoft_ui_xaml.BrushTransition]) -> None: ...
    @_property
    def background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @background.setter
    def background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def children(self) -> typing.Optional[UIElementCollection]: ...
    @_property
    def is_items_host(self) -> bool: ...

@typing.final
class ParallaxView_Static(type):
    @_property
    def child_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_shift_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_source_end_offset_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_source_offset_kind_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_source_start_offset_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_horizontal_shift_clamped_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_vertical_shift_clamped_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_horizontal_shift_ratio_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_vertical_shift_ratio_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_shift_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_source_end_offset_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_source_offset_kind_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_source_start_offset_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ParallaxView(winrt.system.Object, metaclass=ParallaxView_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ParallaxView: ...
    def __new__(cls: typing.Type[ParallaxView]) -> ParallaxView: ...
    def refresh_automatic_horizontal_offsets(self) -> None: ...
    def refresh_automatic_vertical_offsets(self) -> None: ...
    @_property
    def vertical_source_start_offset(self) -> winrt.system.Double: ...
    @vertical_source_start_offset.setter
    def vertical_source_start_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def vertical_source_offset_kind(self) -> ParallaxSourceOffsetKind: ...
    @vertical_source_offset_kind.setter
    def vertical_source_offset_kind(self, value: ParallaxSourceOffsetKind) -> None: ...
    @_property
    def vertical_source_end_offset(self) -> winrt.system.Double: ...
    @vertical_source_end_offset.setter
    def vertical_source_end_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def vertical_shift(self) -> winrt.system.Double: ...
    @vertical_shift.setter
    def vertical_shift(self, value: winrt.system.Double) -> None: ...
    @_property
    def source(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @source.setter
    def source(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def max_vertical_shift_ratio(self) -> winrt.system.Double: ...
    @max_vertical_shift_ratio.setter
    def max_vertical_shift_ratio(self, value: winrt.system.Double) -> None: ...
    @_property
    def max_horizontal_shift_ratio(self) -> winrt.system.Double: ...
    @max_horizontal_shift_ratio.setter
    def max_horizontal_shift_ratio(self, value: winrt.system.Double) -> None: ...
    @_property
    def is_vertical_shift_clamped(self) -> bool: ...
    @is_vertical_shift_clamped.setter
    def is_vertical_shift_clamped(self, value: bool) -> None: ...
    @_property
    def is_horizontal_shift_clamped(self) -> bool: ...
    @is_horizontal_shift_clamped.setter
    def is_horizontal_shift_clamped(self, value: bool) -> None: ...
    @_property
    def horizontal_source_start_offset(self) -> winrt.system.Double: ...
    @horizontal_source_start_offset.setter
    def horizontal_source_start_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def horizontal_source_offset_kind(self) -> ParallaxSourceOffsetKind: ...
    @horizontal_source_offset_kind.setter
    def horizontal_source_offset_kind(self, value: ParallaxSourceOffsetKind) -> None: ...
    @_property
    def horizontal_source_end_offset(self) -> winrt.system.Double: ...
    @horizontal_source_end_offset.setter
    def horizontal_source_end_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def horizontal_shift(self) -> winrt.system.Double: ...
    @horizontal_shift.setter
    def horizontal_shift(self, value: winrt.system.Double) -> None: ...
    @_property
    def child(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @child.setter
    def child(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...

@typing.final
class PasswordBox_Static(type):
    @_property
    def can_paste_clipboard_content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def description_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def input_scope_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_password_reveal_button_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_length_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def password_char_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def password_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def password_reveal_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def placeholder_text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def prevent_keyboard_display_on_programmatic_focus_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_flyout_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_highlight_color_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_reading_order_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class PasswordBox(winrt.system.Object, metaclass=PasswordBox_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PasswordBox: ...
    def __new__(cls: typing.Type[PasswordBox]) -> PasswordBox: ...
    def paste_from_clipboard(self) -> None: ...
    def select_all(self) -> None: ...
    def add_context_menu_opening(self, handler: typing.Optional[ContextMenuOpeningEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_context_menu_opening(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_password_changed(self, handler: typing.Optional[microsoft_ui_xaml.RoutedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_password_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_password_changing(self, handler: windows_foundation.TypedEventHandler[PasswordBox, PasswordBoxPasswordChangingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_password_changing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_paste(self, handler: typing.Optional[TextControlPasteEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_paste(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def text_reading_order(self) -> microsoft_ui_xaml.TextReadingOrder: ...
    @text_reading_order.setter
    def text_reading_order(self, value: microsoft_ui_xaml.TextReadingOrder) -> None: ...
    @_property
    def selection_highlight_color(self) -> typing.Optional[microsoft_ui_xaml_media.SolidColorBrush]: ...
    @selection_highlight_color.setter
    def selection_highlight_color(self, value: typing.Optional[microsoft_ui_xaml_media.SolidColorBrush]) -> None: ...
    @_property
    def selection_flyout(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]: ...
    @selection_flyout.setter
    def selection_flyout(self, value: typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]) -> None: ...
    @_property
    def prevent_keyboard_display_on_programmatic_focus(self) -> bool: ...
    @prevent_keyboard_display_on_programmatic_focus.setter
    def prevent_keyboard_display_on_programmatic_focus(self, value: bool) -> None: ...
    @_property
    def placeholder_text(self) -> str: ...
    @placeholder_text.setter
    def placeholder_text(self, value: str) -> None: ...
    @_property
    def password_reveal_mode(self) -> PasswordRevealMode: ...
    @password_reveal_mode.setter
    def password_reveal_mode(self, value: PasswordRevealMode) -> None: ...
    @_property
    def password_char(self) -> str: ...
    @password_char.setter
    def password_char(self, value: str) -> None: ...
    @_property
    def password(self) -> str: ...
    @password.setter
    def password(self, value: str) -> None: ...
    @_property
    def max_length(self) -> winrt.system.Int32: ...
    @max_length.setter
    def max_length(self, value: winrt.system.Int32) -> None: ...
    @_property
    def is_password_reveal_button_enabled(self) -> bool: ...
    @is_password_reveal_button_enabled.setter
    def is_password_reveal_button_enabled(self, value: bool) -> None: ...
    @_property
    def input_scope(self) -> typing.Optional[microsoft_ui_xaml_input.InputScope]: ...
    @input_scope.setter
    def input_scope(self, value: typing.Optional[microsoft_ui_xaml_input.InputScope]) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def description(self) -> typing.Optional[winrt.system.Object]: ...
    @description.setter
    def description(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def can_paste_clipboard_content(self) -> bool: ...

@typing.final
class PasswordBoxPasswordChangingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PasswordBoxPasswordChangingEventArgs: ...
    @_property
    def is_content_changing(self) -> bool: ...

@typing.final
class PathIcon_Static(type):
    @_property
    def data_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class PathIcon(winrt.system.Object, metaclass=PathIcon_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PathIcon: ...
    def __new__(cls: typing.Type[PathIcon]) -> PathIcon: ...
    @_property
    def data(self) -> typing.Optional[microsoft_ui_xaml_media.Geometry]: ...
    @data.setter
    def data(self, value: typing.Optional[microsoft_ui_xaml_media.Geometry]) -> None: ...

@typing.final
class PathIconSource_Static(type):
    @_property
    def data_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class PathIconSource(winrt.system.Object, metaclass=PathIconSource_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PathIconSource: ...
    def __new__(cls: typing.Type[PathIconSource]) -> PathIconSource: ...
    @_property
    def data(self) -> typing.Optional[microsoft_ui_xaml_media.Geometry]: ...
    @data.setter
    def data(self, value: typing.Optional[microsoft_ui_xaml_media.Geometry]) -> None: ...

@typing.final
class PersonPicture_Static(type):
    @_property
    def badge_glyph_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def badge_image_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def badge_number_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def badge_text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def contact_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def display_name_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def initials_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_group_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def prefer_small_image_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def profile_picture_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class PersonPicture(winrt.system.Object, metaclass=PersonPicture_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PersonPicture: ...
    def __new__(cls: typing.Type[PersonPicture]) -> PersonPicture: ...
    @_property
    def profile_picture(self) -> typing.Optional[microsoft_ui_xaml_media.ImageSource]: ...
    @profile_picture.setter
    def profile_picture(self, value: typing.Optional[microsoft_ui_xaml_media.ImageSource]) -> None: ...
    @_property
    def prefer_small_image(self) -> bool: ...
    @prefer_small_image.setter
    def prefer_small_image(self, value: bool) -> None: ...
    @_property
    def is_group(self) -> bool: ...
    @is_group.setter
    def is_group(self, value: bool) -> None: ...
    @_property
    def initials(self) -> str: ...
    @initials.setter
    def initials(self, value: str) -> None: ...
    @_property
    def display_name(self) -> str: ...
    @display_name.setter
    def display_name(self, value: str) -> None: ...
    @_property
    def contact(self) -> typing.Optional[windows_applicationmodel_contacts.Contact]: ...
    @contact.setter
    def contact(self, value: typing.Optional[windows_applicationmodel_contacts.Contact]) -> None: ...
    @_property
    def badge_text(self) -> str: ...
    @badge_text.setter
    def badge_text(self, value: str) -> None: ...
    @_property
    def badge_number(self) -> winrt.system.Int32: ...
    @badge_number.setter
    def badge_number(self, value: winrt.system.Int32) -> None: ...
    @_property
    def badge_image_source(self) -> typing.Optional[microsoft_ui_xaml_media.ImageSource]: ...
    @badge_image_source.setter
    def badge_image_source(self, value: typing.Optional[microsoft_ui_xaml_media.ImageSource]) -> None: ...
    @_property
    def badge_glyph(self) -> str: ...
    @badge_glyph.setter
    def badge_glyph(self, value: str) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[PersonPictureTemplateSettings]: ...

@typing.final
class PersonPictureTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PersonPictureTemplateSettings: ...
    @_property
    def actual_image_brush(self) -> typing.Optional[microsoft_ui_xaml_media.ImageBrush]: ...
    @_property
    def actual_initials(self) -> str: ...

@typing.final
class PickerConfirmedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PickerConfirmedEventArgs: ...
    def __new__(cls: typing.Type[PickerConfirmedEventArgs]) -> PickerConfirmedEventArgs: ...

@typing.final
class PickerFlyout_Static(type):
    @_property
    def confirmation_buttons_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class PickerFlyout(winrt.system.Object, metaclass=PickerFlyout_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PickerFlyout: ...
    def __new__(cls: typing.Type[PickerFlyout]) -> PickerFlyout: ...
    def show_at_async(self, target: typing.Optional[microsoft_ui_xaml.FrameworkElement], /) -> windows_foundation.IAsyncOperation[bool]: ...
    def add_confirmed(self, handler: windows_foundation.TypedEventHandler[PickerFlyout, PickerConfirmedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_confirmed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def content(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @content.setter
    def content(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def confirmation_buttons_visible(self) -> bool: ...
    @confirmation_buttons_visible.setter
    def confirmation_buttons_visible(self, value: bool) -> None: ...

@typing.final
class PickerFlyoutPresenter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PickerFlyoutPresenter: ...

@typing.final
class PipsPager_Static(type):
    @_property
    def max_visible_pips_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def next_button_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def next_button_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def normal_pip_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def number_of_pages_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def orientation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def previous_button_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def previous_button_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_page_index_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_pip_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class PipsPager(winrt.system.Object, metaclass=PipsPager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PipsPager: ...
    def __new__(cls: typing.Type[PipsPager]) -> PipsPager: ...
    def add_selected_index_changed(self, handler: windows_foundation.TypedEventHandler[PipsPager, PipsPagerSelectedIndexChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_selected_index_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def selected_pip_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @selected_pip_style.setter
    def selected_pip_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def selected_page_index(self) -> winrt.system.Int32: ...
    @selected_page_index.setter
    def selected_page_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def previous_button_visibility(self) -> PipsPagerButtonVisibility: ...
    @previous_button_visibility.setter
    def previous_button_visibility(self, value: PipsPagerButtonVisibility) -> None: ...
    @_property
    def previous_button_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @previous_button_style.setter
    def previous_button_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def orientation(self) -> Orientation: ...
    @orientation.setter
    def orientation(self, value: Orientation) -> None: ...
    @_property
    def number_of_pages(self) -> winrt.system.Int32: ...
    @number_of_pages.setter
    def number_of_pages(self, value: winrt.system.Int32) -> None: ...
    @_property
    def normal_pip_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @normal_pip_style.setter
    def normal_pip_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def next_button_visibility(self) -> PipsPagerButtonVisibility: ...
    @next_button_visibility.setter
    def next_button_visibility(self, value: PipsPagerButtonVisibility) -> None: ...
    @_property
    def next_button_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @next_button_style.setter
    def next_button_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def max_visible_pips(self) -> winrt.system.Int32: ...
    @max_visible_pips.setter
    def max_visible_pips(self, value: winrt.system.Int32) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[PipsPagerTemplateSettings]: ...

@typing.final
class PipsPagerSelectedIndexChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PipsPagerSelectedIndexChangedEventArgs: ...

@typing.final
class PipsPagerTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PipsPagerTemplateSettings: ...
    @_property
    def pips_pager_items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Int32]]: ...

@typing.final
class Pivot_Static(type):
    def get_slide_in_animation_group(cls, element: typing.Optional[microsoft_ui_xaml.FrameworkElement], /) -> PivotSlideInAnimationGroup: ...
    def set_slide_in_animation_group(cls, element: typing.Optional[microsoft_ui_xaml.FrameworkElement], value: PivotSlideInAnimationGroup, /) -> None: ...
    @_property
    def header_focus_visual_placement_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_header_items_carousel_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_locked_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def left_header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def left_header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def right_header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def right_header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_index_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_item_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def slide_in_animation_group_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def title_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def title_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class Pivot(winrt.system.Object, metaclass=Pivot_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Pivot: ...
    def __new__(cls: typing.Type[Pivot]) -> Pivot: ...
    def add_pivot_item_loaded(self, handler: windows_foundation.TypedEventHandler[Pivot, PivotItemEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pivot_item_loaded(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pivot_item_loading(self, handler: windows_foundation.TypedEventHandler[Pivot, PivotItemEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pivot_item_loading(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pivot_item_unloaded(self, handler: windows_foundation.TypedEventHandler[Pivot, PivotItemEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pivot_item_unloaded(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pivot_item_unloading(self, handler: windows_foundation.TypedEventHandler[Pivot, PivotItemEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pivot_item_unloading(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_selection_changed(self, handler: typing.Optional[SelectionChangedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_selection_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def title_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @title_template.setter
    def title_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def title(self) -> typing.Optional[winrt.system.Object]: ...
    @title.setter
    def title(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def selected_item(self) -> typing.Optional[winrt.system.Object]: ...
    @selected_item.setter
    def selected_item(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def selected_index(self) -> winrt.system.Int32: ...
    @selected_index.setter
    def selected_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def right_header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @right_header_template.setter
    def right_header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def right_header(self) -> typing.Optional[winrt.system.Object]: ...
    @right_header.setter
    def right_header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def left_header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @left_header_template.setter
    def left_header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def left_header(self) -> typing.Optional[winrt.system.Object]: ...
    @left_header.setter
    def left_header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def is_locked(self) -> bool: ...
    @is_locked.setter
    def is_locked(self, value: bool) -> None: ...
    @_property
    def is_header_items_carousel_enabled(self) -> bool: ...
    @is_header_items_carousel_enabled.setter
    def is_header_items_carousel_enabled(self, value: bool) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header_focus_visual_placement(self) -> PivotHeaderFocusVisualPlacement: ...
    @header_focus_visual_placement.setter
    def header_focus_visual_placement(self, value: PivotHeaderFocusVisualPlacement) -> None: ...

@typing.final
class PivotItem_Static(type):
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class PivotItem(winrt.system.Object, metaclass=PivotItem_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PivotItem: ...
    def __new__(cls: typing.Type[PivotItem]) -> PivotItem: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...

@typing.final
class PivotItemEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PivotItemEventArgs: ...
    def __new__(cls: typing.Type[PivotItemEventArgs]) -> PivotItemEventArgs: ...
    @_property
    def item(self) -> typing.Optional[PivotItem]: ...
    @item.setter
    def item(self, value: typing.Optional[PivotItem]) -> None: ...

@typing.final
class ProgressBar_Static(type):
    @_property
    def is_indeterminate_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def show_error_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def show_paused_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ProgressBar(winrt.system.Object, metaclass=ProgressBar_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProgressBar: ...
    def __new__(cls: typing.Type[ProgressBar]) -> ProgressBar: ...
    @_property
    def show_paused(self) -> bool: ...
    @show_paused.setter
    def show_paused(self, value: bool) -> None: ...
    @_property
    def show_error(self) -> bool: ...
    @show_error.setter
    def show_error(self, value: bool) -> None: ...
    @_property
    def is_indeterminate(self) -> bool: ...
    @is_indeterminate.setter
    def is_indeterminate(self, value: bool) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[ProgressBarTemplateSettings]: ...

@typing.final
class ProgressBarTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProgressBarTemplateSettings: ...
    @_property
    def clip_rect(self) -> typing.Optional[microsoft_ui_xaml_media.RectangleGeometry]: ...
    @_property
    def container2_animation_end_position(self) -> winrt.system.Double: ...
    @_property
    def container2_animation_start_position(self) -> winrt.system.Double: ...
    @_property
    def container_animation_end_position(self) -> winrt.system.Double: ...
    @_property
    def container_animation_mid_position(self) -> winrt.system.Double: ...
    @_property
    def container_animation_start_position(self) -> winrt.system.Double: ...
    @_property
    def ellipse_animation_end_position(self) -> winrt.system.Double: ...
    @_property
    def ellipse_animation_well_position(self) -> winrt.system.Double: ...
    @_property
    def ellipse_diameter(self) -> winrt.system.Double: ...
    @_property
    def ellipse_offset(self) -> winrt.system.Double: ...
    @_property
    def indicator_length_delta(self) -> winrt.system.Double: ...

@typing.final
class ProgressRing_Static(type):
    @_property
    def is_active_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_indeterminate_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def maximum_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def minimum_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def value_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ProgressRing(winrt.system.Object, metaclass=ProgressRing_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProgressRing: ...
    def __new__(cls: typing.Type[ProgressRing]) -> ProgressRing: ...
    @_property
    def value(self) -> winrt.system.Double: ...
    @value.setter
    def value(self, value: winrt.system.Double) -> None: ...
    @_property
    def minimum(self) -> winrt.system.Double: ...
    @minimum.setter
    def minimum(self, value: winrt.system.Double) -> None: ...
    @_property
    def maximum(self) -> winrt.system.Double: ...
    @maximum.setter
    def maximum(self, value: winrt.system.Double) -> None: ...
    @_property
    def is_indeterminate(self) -> bool: ...
    @is_indeterminate.setter
    def is_indeterminate(self, value: bool) -> None: ...
    @_property
    def is_active(self) -> bool: ...
    @is_active.setter
    def is_active(self, value: bool) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[ProgressRingTemplateSettings]: ...

@typing.final
class ProgressRingTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProgressRingTemplateSettings: ...
    @_property
    def ellipse_diameter(self) -> winrt.system.Double: ...
    @_property
    def ellipse_offset(self) -> microsoft_ui_xaml.Thickness: ...
    @_property
    def max_side_length(self) -> winrt.system.Double: ...

@typing.final
class RadioButton_Static(type):
    @_property
    def group_name_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class RadioButton(winrt.system.Object, metaclass=RadioButton_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RadioButton: ...
    def __new__(cls: typing.Type[RadioButton]) -> RadioButton: ...
    @_property
    def group_name(self) -> str: ...
    @group_name.setter
    def group_name(self, value: str) -> None: ...

@typing.final
class RadioButtons_Static(type):
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def items_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def items_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_columns_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_index_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_item_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class RadioButtons(winrt.system.Object, metaclass=RadioButtons_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RadioButtons: ...
    def __new__(cls: typing.Type[RadioButtons]) -> RadioButtons: ...
    def container_from_index(self, index: winrt.system.Int32, /) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    def add_selection_changed(self, handler: typing.Optional[SelectionChangedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_selection_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def selected_item(self) -> typing.Optional[winrt.system.Object]: ...
    @selected_item.setter
    def selected_item(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def selected_index(self) -> winrt.system.Int32: ...
    @selected_index.setter
    def selected_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def max_columns(self) -> winrt.system.Int32: ...
    @max_columns.setter
    def max_columns(self, value: winrt.system.Int32) -> None: ...
    @_property
    def items_source(self) -> typing.Optional[winrt.system.Object]: ...
    @items_source.setter
    def items_source(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def item_template(self) -> typing.Optional[winrt.system.Object]: ...
    @item_template.setter
    def item_template(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Object]]: ...

@typing.final
class RadioMenuFlyoutItem_Static(type):
    def get_are_check_states_enabled(cls, object: typing.Optional[MenuFlyoutSubItem], /) -> bool: ...
    def set_are_check_states_enabled(cls, object: typing.Optional[MenuFlyoutSubItem], value: bool, /) -> None: ...
    @_property
    def group_name_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_checked_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def are_check_states_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class RadioMenuFlyoutItem(winrt.system.Object, metaclass=RadioMenuFlyoutItem_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RadioMenuFlyoutItem: ...
    def __new__(cls: typing.Type[RadioMenuFlyoutItem]) -> RadioMenuFlyoutItem: ...
    @_property
    def is_checked(self) -> bool: ...
    @is_checked.setter
    def is_checked(self, value: bool) -> None: ...
    @_property
    def group_name(self) -> str: ...
    @group_name.setter
    def group_name(self, value: str) -> None: ...

@typing.final
class RatingControl_Static(type):
    @_property
    def caption_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def initial_set_value_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_clear_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_read_only_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_info_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_rating_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def placeholder_value_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def value_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class RatingControl(winrt.system.Object, metaclass=RatingControl_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RatingControl: ...
    def __new__(cls: typing.Type[RatingControl]) -> RatingControl: ...
    def add_value_changed(self, handler: windows_foundation.TypedEventHandler[RatingControl, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_value_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def value(self) -> winrt.system.Double: ...
    @value.setter
    def value(self, value: winrt.system.Double) -> None: ...
    @_property
    def placeholder_value(self) -> winrt.system.Double: ...
    @placeholder_value.setter
    def placeholder_value(self, value: winrt.system.Double) -> None: ...
    @_property
    def max_rating(self) -> winrt.system.Int32: ...
    @max_rating.setter
    def max_rating(self, value: winrt.system.Int32) -> None: ...
    @_property
    def item_info(self) -> typing.Optional[RatingItemInfo]: ...
    @item_info.setter
    def item_info(self, value: typing.Optional[RatingItemInfo]) -> None: ...
    @_property
    def is_read_only(self) -> bool: ...
    @is_read_only.setter
    def is_read_only(self, value: bool) -> None: ...
    @_property
    def is_clear_enabled(self) -> bool: ...
    @is_clear_enabled.setter
    def is_clear_enabled(self, value: bool) -> None: ...
    @_property
    def initial_set_value(self) -> winrt.system.Int32: ...
    @initial_set_value.setter
    def initial_set_value(self, value: winrt.system.Int32) -> None: ...
    @_property
    def caption(self) -> str: ...
    @caption.setter
    def caption(self, value: str) -> None: ...

@typing.final
class RatingItemFontInfo_Static(type):
    @_property
    def disabled_glyph_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def glyph_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def placeholder_glyph_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pointer_over_glyph_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pointer_over_placeholder_glyph_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def unset_glyph_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class RatingItemFontInfo(winrt.system.Object, metaclass=RatingItemFontInfo_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RatingItemFontInfo: ...
    def __new__(cls: typing.Type[RatingItemFontInfo]) -> RatingItemFontInfo: ...
    @_property
    def unset_glyph(self) -> str: ...
    @unset_glyph.setter
    def unset_glyph(self, value: str) -> None: ...
    @_property
    def pointer_over_placeholder_glyph(self) -> str: ...
    @pointer_over_placeholder_glyph.setter
    def pointer_over_placeholder_glyph(self, value: str) -> None: ...
    @_property
    def pointer_over_glyph(self) -> str: ...
    @pointer_over_glyph.setter
    def pointer_over_glyph(self, value: str) -> None: ...
    @_property
    def placeholder_glyph(self) -> str: ...
    @placeholder_glyph.setter
    def placeholder_glyph(self, value: str) -> None: ...
    @_property
    def glyph(self) -> str: ...
    @glyph.setter
    def glyph(self, value: str) -> None: ...
    @_property
    def disabled_glyph(self) -> str: ...
    @disabled_glyph.setter
    def disabled_glyph(self, value: str) -> None: ...

@typing.final
class RatingItemImageInfo_Static(type):
    @_property
    def disabled_image_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def image_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def placeholder_image_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pointer_over_image_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pointer_over_placeholder_image_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def unset_image_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class RatingItemImageInfo(winrt.system.Object, metaclass=RatingItemImageInfo_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RatingItemImageInfo: ...
    def __new__(cls: typing.Type[RatingItemImageInfo]) -> RatingItemImageInfo: ...
    @_property
    def unset_image(self) -> typing.Optional[microsoft_ui_xaml_media.ImageSource]: ...
    @unset_image.setter
    def unset_image(self, value: typing.Optional[microsoft_ui_xaml_media.ImageSource]) -> None: ...
    @_property
    def pointer_over_placeholder_image(self) -> typing.Optional[microsoft_ui_xaml_media.ImageSource]: ...
    @pointer_over_placeholder_image.setter
    def pointer_over_placeholder_image(self, value: typing.Optional[microsoft_ui_xaml_media.ImageSource]) -> None: ...
    @_property
    def pointer_over_image(self) -> typing.Optional[microsoft_ui_xaml_media.ImageSource]: ...
    @pointer_over_image.setter
    def pointer_over_image(self, value: typing.Optional[microsoft_ui_xaml_media.ImageSource]) -> None: ...
    @_property
    def placeholder_image(self) -> typing.Optional[microsoft_ui_xaml_media.ImageSource]: ...
    @placeholder_image.setter
    def placeholder_image(self, value: typing.Optional[microsoft_ui_xaml_media.ImageSource]) -> None: ...
    @_property
    def image(self) -> typing.Optional[microsoft_ui_xaml_media.ImageSource]: ...
    @image.setter
    def image(self, value: typing.Optional[microsoft_ui_xaml_media.ImageSource]) -> None: ...
    @_property
    def disabled_image(self) -> typing.Optional[microsoft_ui_xaml_media.ImageSource]: ...
    @disabled_image.setter
    def disabled_image(self, value: typing.Optional[microsoft_ui_xaml_media.ImageSource]) -> None: ...

@typing.final
class RatingItemInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RatingItemInfo: ...
    def __new__(cls: typing.Type[RatingItemInfo]) -> RatingItemInfo: ...

@typing.final
class RefreshContainer_Static(type):
    @_property
    def pull_direction_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def visualizer_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class RefreshContainer(winrt.system.Object, metaclass=RefreshContainer_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RefreshContainer: ...
    def __new__(cls: typing.Type[RefreshContainer]) -> RefreshContainer: ...
    def request_refresh(self) -> None: ...
    def add_refresh_requested(self, handler: windows_foundation.TypedEventHandler[RefreshContainer, RefreshRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_refresh_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def visualizer(self) -> typing.Optional[RefreshVisualizer]: ...
    @visualizer.setter
    def visualizer(self, value: typing.Optional[RefreshVisualizer]) -> None: ...
    @_property
    def pull_direction(self) -> RefreshPullDirection: ...
    @pull_direction.setter
    def pull_direction(self, value: RefreshPullDirection) -> None: ...

@typing.final
class RefreshInteractionRatioChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RefreshInteractionRatioChangedEventArgs: ...
    @_property
    def interaction_ratio(self) -> winrt.system.Double: ...

@typing.final
class RefreshRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RefreshRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[windows_foundation.Deferral]: ...

@typing.final
class RefreshStateChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RefreshStateChangedEventArgs: ...
    @_property
    def new_state(self) -> RefreshVisualizerState: ...
    @_property
    def old_state(self) -> RefreshVisualizerState: ...

@typing.final
class RefreshVisualizer_Static(type):
    @_property
    def content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def info_provider_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def orientation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def state_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class RefreshVisualizer(winrt.system.Object, metaclass=RefreshVisualizer_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RefreshVisualizer: ...
    def __new__(cls: typing.Type[RefreshVisualizer]) -> RefreshVisualizer: ...
    def request_refresh(self) -> None: ...
    def add_refresh_requested(self, handler: windows_foundation.TypedEventHandler[RefreshVisualizer, RefreshRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_refresh_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_refresh_state_changed(self, handler: windows_foundation.TypedEventHandler[RefreshVisualizer, RefreshStateChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_refresh_state_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def orientation(self) -> RefreshVisualizerOrientation: ...
    @orientation.setter
    def orientation(self, value: RefreshVisualizerOrientation) -> None: ...
    @_property
    def content(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @content.setter
    def content(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def state(self) -> RefreshVisualizerState: ...

@typing.final
class RelativePanel_Static(type):
    def get_above(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> typing.Optional[winrt.system.Object]: ...
    def get_align_bottom_with(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> typing.Optional[winrt.system.Object]: ...
    def get_align_bottom_with_panel(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> bool: ...
    def get_align_horizontal_center_with(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> typing.Optional[winrt.system.Object]: ...
    def get_align_horizontal_center_with_panel(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> bool: ...
    def get_align_left_with(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> typing.Optional[winrt.system.Object]: ...
    def get_align_left_with_panel(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> bool: ...
    def get_align_right_with(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> typing.Optional[winrt.system.Object]: ...
    def get_align_right_with_panel(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> bool: ...
    def get_align_top_with(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> typing.Optional[winrt.system.Object]: ...
    def get_align_top_with_panel(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> bool: ...
    def get_align_vertical_center_with(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> typing.Optional[winrt.system.Object]: ...
    def get_align_vertical_center_with_panel(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> bool: ...
    def get_below(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> typing.Optional[winrt.system.Object]: ...
    def get_left_of(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> typing.Optional[winrt.system.Object]: ...
    def get_right_of(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> typing.Optional[winrt.system.Object]: ...
    def set_above(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def set_align_bottom_with(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def set_align_bottom_with_panel(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: bool, /) -> None: ...
    def set_align_horizontal_center_with(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def set_align_horizontal_center_with_panel(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: bool, /) -> None: ...
    def set_align_left_with(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def set_align_left_with_panel(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: bool, /) -> None: ...
    def set_align_right_with(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def set_align_right_with_panel(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: bool, /) -> None: ...
    def set_align_top_with(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def set_align_top_with_panel(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: bool, /) -> None: ...
    def set_align_vertical_center_with(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def set_align_vertical_center_with_panel(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: bool, /) -> None: ...
    def set_below(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def set_left_of(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def set_right_of(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: typing.Optional[winrt.system.Object], /) -> None: ...
    @_property
    def above_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def align_bottom_with_panel_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def align_bottom_with_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def align_horizontal_center_with_panel_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def align_horizontal_center_with_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def align_left_with_panel_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def align_left_with_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def align_right_with_panel_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def align_right_with_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def align_top_with_panel_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def align_top_with_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def align_vertical_center_with_panel_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def align_vertical_center_with_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def background_sizing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def below_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def border_brush_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def border_thickness_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def corner_radius_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def left_of_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def padding_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def right_of_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class RelativePanel(winrt.system.Object, metaclass=RelativePanel_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RelativePanel: ...
    def __new__(cls: typing.Type[RelativePanel]) -> RelativePanel: ...
    @_property
    def padding(self) -> microsoft_ui_xaml.Thickness: ...
    @padding.setter
    def padding(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def corner_radius(self) -> microsoft_ui_xaml.CornerRadius: ...
    @corner_radius.setter
    def corner_radius(self, value: microsoft_ui_xaml.CornerRadius) -> None: ...
    @_property
    def border_thickness(self) -> microsoft_ui_xaml.Thickness: ...
    @border_thickness.setter
    def border_thickness(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def border_brush(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @border_brush.setter
    def border_brush(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def background_sizing(self) -> BackgroundSizing: ...
    @background_sizing.setter
    def background_sizing(self, value: BackgroundSizing) -> None: ...

@typing.final
class RevealListViewItemPresenter(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RevealListViewItemPresenter: ...
    def __new__(cls: typing.Type[RevealListViewItemPresenter]) -> RevealListViewItemPresenter: ...

@typing.final
class RichEditBox_Static(type):
    @_property
    def accepts_return_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def character_casing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def clipboard_copy_format_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def description_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def desired_candidate_window_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def disabled_formatting_accelerators_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_text_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def input_scope_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_color_font_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_read_only_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_spell_check_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_text_prediction_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_length_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def placeholder_text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def prevent_keyboard_display_on_programmatic_focus_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def proofing_menu_flyout_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_flyout_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_highlight_color_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_highlight_color_when_not_focused_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_reading_order_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_wrapping_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class RichEditBox(winrt.system.Object, metaclass=RichEditBox_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RichEditBox: ...
    def __new__(cls: typing.Type[RichEditBox]) -> RichEditBox: ...
    def get_linguistic_alternatives_async(self) -> windows_foundation.IAsyncOperation[windows_foundation_collections.IVectorView[str]]: ...
    def add_candidate_window_bounds_changed(self, handler: windows_foundation.TypedEventHandler[RichEditBox, CandidateWindowBoundsChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_candidate_window_bounds_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_context_menu_opening(self, handler: typing.Optional[ContextMenuOpeningEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_context_menu_opening(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_copying_to_clipboard(self, handler: windows_foundation.TypedEventHandler[RichEditBox, TextControlCopyingToClipboardEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_copying_to_clipboard(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_cutting_to_clipboard(self, handler: windows_foundation.TypedEventHandler[RichEditBox, TextControlCuttingToClipboardEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_cutting_to_clipboard(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_paste(self, handler: typing.Optional[TextControlPasteEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_paste(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_selection_changed(self, handler: typing.Optional[microsoft_ui_xaml.RoutedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_selection_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_selection_changing(self, handler: windows_foundation.TypedEventHandler[RichEditBox, RichEditBoxSelectionChangingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_selection_changing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_text_changed(self, handler: typing.Optional[microsoft_ui_xaml.RoutedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_text_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_text_changing(self, handler: windows_foundation.TypedEventHandler[RichEditBox, RichEditBoxTextChangingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_text_changing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_text_composition_changed(self, handler: windows_foundation.TypedEventHandler[RichEditBox, TextCompositionChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_text_composition_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_text_composition_ended(self, handler: windows_foundation.TypedEventHandler[RichEditBox, TextCompositionEndedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_text_composition_ended(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_text_composition_started(self, handler: windows_foundation.TypedEventHandler[RichEditBox, TextCompositionStartedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_text_composition_started(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def text_wrapping(self) -> microsoft_ui_xaml.TextWrapping: ...
    @text_wrapping.setter
    def text_wrapping(self, value: microsoft_ui_xaml.TextWrapping) -> None: ...
    @_property
    def text_reading_order(self) -> microsoft_ui_xaml.TextReadingOrder: ...
    @text_reading_order.setter
    def text_reading_order(self, value: microsoft_ui_xaml.TextReadingOrder) -> None: ...
    @_property
    def text_alignment(self) -> microsoft_ui_xaml.TextAlignment: ...
    @text_alignment.setter
    def text_alignment(self, value: microsoft_ui_xaml.TextAlignment) -> None: ...
    @_property
    def selection_highlight_color_when_not_focused(self) -> typing.Optional[microsoft_ui_xaml_media.SolidColorBrush]: ...
    @selection_highlight_color_when_not_focused.setter
    def selection_highlight_color_when_not_focused(self, value: typing.Optional[microsoft_ui_xaml_media.SolidColorBrush]) -> None: ...
    @_property
    def selection_highlight_color(self) -> typing.Optional[microsoft_ui_xaml_media.SolidColorBrush]: ...
    @selection_highlight_color.setter
    def selection_highlight_color(self, value: typing.Optional[microsoft_ui_xaml_media.SolidColorBrush]) -> None: ...
    @_property
    def selection_flyout(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]: ...
    @selection_flyout.setter
    def selection_flyout(self, value: typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]) -> None: ...
    @_property
    def prevent_keyboard_display_on_programmatic_focus(self) -> bool: ...
    @prevent_keyboard_display_on_programmatic_focus.setter
    def prevent_keyboard_display_on_programmatic_focus(self, value: bool) -> None: ...
    @_property
    def placeholder_text(self) -> str: ...
    @placeholder_text.setter
    def placeholder_text(self, value: str) -> None: ...
    @_property
    def max_length(self) -> winrt.system.Int32: ...
    @max_length.setter
    def max_length(self, value: winrt.system.Int32) -> None: ...
    @_property
    def is_text_prediction_enabled(self) -> bool: ...
    @is_text_prediction_enabled.setter
    def is_text_prediction_enabled(self, value: bool) -> None: ...
    @_property
    def is_spell_check_enabled(self) -> bool: ...
    @is_spell_check_enabled.setter
    def is_spell_check_enabled(self, value: bool) -> None: ...
    @_property
    def is_read_only(self) -> bool: ...
    @is_read_only.setter
    def is_read_only(self, value: bool) -> None: ...
    @_property
    def is_color_font_enabled(self) -> bool: ...
    @is_color_font_enabled.setter
    def is_color_font_enabled(self, value: bool) -> None: ...
    @_property
    def input_scope(self) -> typing.Optional[microsoft_ui_xaml_input.InputScope]: ...
    @input_scope.setter
    def input_scope(self, value: typing.Optional[microsoft_ui_xaml_input.InputScope]) -> None: ...
    @_property
    def horizontal_text_alignment(self) -> microsoft_ui_xaml.TextAlignment: ...
    @horizontal_text_alignment.setter
    def horizontal_text_alignment(self, value: microsoft_ui_xaml.TextAlignment) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def disabled_formatting_accelerators(self) -> DisabledFormattingAccelerators: ...
    @disabled_formatting_accelerators.setter
    def disabled_formatting_accelerators(self, value: DisabledFormattingAccelerators) -> None: ...
    @_property
    def desired_candidate_window_alignment(self) -> CandidateWindowAlignment: ...
    @desired_candidate_window_alignment.setter
    def desired_candidate_window_alignment(self, value: CandidateWindowAlignment) -> None: ...
    @_property
    def description(self) -> typing.Optional[winrt.system.Object]: ...
    @description.setter
    def description(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def clipboard_copy_format(self) -> RichEditClipboardFormat: ...
    @clipboard_copy_format.setter
    def clipboard_copy_format(self, value: RichEditClipboardFormat) -> None: ...
    @_property
    def character_casing(self) -> CharacterCasing: ...
    @character_casing.setter
    def character_casing(self, value: CharacterCasing) -> None: ...
    @_property
    def accepts_return(self) -> bool: ...
    @accepts_return.setter
    def accepts_return(self, value: bool) -> None: ...
    @_property
    def document(self) -> typing.Optional[microsoft_ui_text.RichEditTextDocument]: ...
    @_property
    def proofing_menu_flyout(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]: ...
    @_property
    def text_document(self) -> typing.Optional[microsoft_ui_text.RichEditTextDocument]: ...

@typing.final
class RichEditBoxSelectionChangingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RichEditBoxSelectionChangingEventArgs: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def selection_length(self) -> winrt.system.Int32: ...
    @_property
    def selection_start(self) -> winrt.system.Int32: ...

@typing.final
class RichEditBoxTextChangingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RichEditBoxTextChangingEventArgs: ...
    @_property
    def is_content_changing(self) -> bool: ...

@typing.final
class RichTextBlock_Static(type):
    @_property
    def character_spacing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_family_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_size_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_stretch_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_weight_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def has_overflow_content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_text_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_color_font_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_text_scale_factor_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_text_selection_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_text_trimmed_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def line_height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def line_stacking_strategy_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_lines_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def optical_margin_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def overflow_content_target_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def padding_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_flyout_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_highlight_color_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_decorations_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_indent_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_line_bounds_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_reading_order_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_trimming_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_wrapping_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class RichTextBlock(winrt.system.Object, metaclass=RichTextBlock_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RichTextBlock: ...
    def __new__(cls: typing.Type[RichTextBlock]) -> RichTextBlock: ...
    def copy_selection_to_clipboard(self) -> None: ...
    def get_position_from_point(self, point: windows_foundation.Point, /) -> typing.Optional[microsoft_ui_xaml_documents.TextPointer]: ...
    def select(self, start: typing.Optional[microsoft_ui_xaml_documents.TextPointer], end: typing.Optional[microsoft_ui_xaml_documents.TextPointer], /) -> None: ...
    def select_all(self) -> None: ...
    def add_context_menu_opening(self, handler: typing.Optional[ContextMenuOpeningEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_context_menu_opening(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_is_text_trimmed_changed(self, handler: windows_foundation.TypedEventHandler[RichTextBlock, IsTextTrimmedChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_is_text_trimmed_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_selection_changed(self, handler: typing.Optional[microsoft_ui_xaml.RoutedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_selection_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def horizontal_text_alignment(self) -> microsoft_ui_xaml.TextAlignment: ...
    @horizontal_text_alignment.setter
    def horizontal_text_alignment(self, value: microsoft_ui_xaml.TextAlignment) -> None: ...
    @_property
    def line_height(self) -> winrt.system.Double: ...
    @line_height.setter
    def line_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @foreground.setter
    def foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def font_weight(self) -> windows_ui_text.FontWeight: ...
    @font_weight.setter
    def font_weight(self, value: windows_ui_text.FontWeight) -> None: ...
    @_property
    def font_style(self) -> windows_ui_text.FontStyle: ...
    @font_style.setter
    def font_style(self, value: windows_ui_text.FontStyle) -> None: ...
    @_property
    def font_stretch(self) -> windows_ui_text.FontStretch: ...
    @font_stretch.setter
    def font_stretch(self, value: windows_ui_text.FontStretch) -> None: ...
    @_property
    def font_size(self) -> winrt.system.Double: ...
    @font_size.setter
    def font_size(self, value: winrt.system.Double) -> None: ...
    @_property
    def font_family(self) -> typing.Optional[microsoft_ui_xaml_media.FontFamily]: ...
    @font_family.setter
    def font_family(self, value: typing.Optional[microsoft_ui_xaml_media.FontFamily]) -> None: ...
    @_property
    def is_text_selection_enabled(self) -> bool: ...
    @is_text_selection_enabled.setter
    def is_text_selection_enabled(self, value: bool) -> None: ...
    @_property
    def is_text_scale_factor_enabled(self) -> bool: ...
    @is_text_scale_factor_enabled.setter
    def is_text_scale_factor_enabled(self, value: bool) -> None: ...
    @_property
    def character_spacing(self) -> winrt.system.Int32: ...
    @character_spacing.setter
    def character_spacing(self, value: winrt.system.Int32) -> None: ...
    @_property
    def is_color_font_enabled(self) -> bool: ...
    @is_color_font_enabled.setter
    def is_color_font_enabled(self, value: bool) -> None: ...
    @_property
    def text_wrapping(self) -> microsoft_ui_xaml.TextWrapping: ...
    @text_wrapping.setter
    def text_wrapping(self, value: microsoft_ui_xaml.TextWrapping) -> None: ...
    @_property
    def line_stacking_strategy(self) -> microsoft_ui_xaml.LineStackingStrategy: ...
    @line_stacking_strategy.setter
    def line_stacking_strategy(self, value: microsoft_ui_xaml.LineStackingStrategy) -> None: ...
    @_property
    def text_trimming(self) -> microsoft_ui_xaml.TextTrimming: ...
    @text_trimming.setter
    def text_trimming(self, value: microsoft_ui_xaml.TextTrimming) -> None: ...
    @_property
    def text_reading_order(self) -> microsoft_ui_xaml.TextReadingOrder: ...
    @text_reading_order.setter
    def text_reading_order(self, value: microsoft_ui_xaml.TextReadingOrder) -> None: ...
    @_property
    def text_line_bounds(self) -> microsoft_ui_xaml.TextLineBounds: ...
    @text_line_bounds.setter
    def text_line_bounds(self, value: microsoft_ui_xaml.TextLineBounds) -> None: ...
    @_property
    def text_indent(self) -> winrt.system.Double: ...
    @text_indent.setter
    def text_indent(self, value: winrt.system.Double) -> None: ...
    @_property
    def text_decorations(self) -> windows_ui_text.TextDecorations: ...
    @text_decorations.setter
    def text_decorations(self, value: windows_ui_text.TextDecorations) -> None: ...
    @_property
    def text_alignment(self) -> microsoft_ui_xaml.TextAlignment: ...
    @text_alignment.setter
    def text_alignment(self, value: microsoft_ui_xaml.TextAlignment) -> None: ...
    @_property
    def selection_highlight_color(self) -> typing.Optional[microsoft_ui_xaml_media.SolidColorBrush]: ...
    @selection_highlight_color.setter
    def selection_highlight_color(self, value: typing.Optional[microsoft_ui_xaml_media.SolidColorBrush]) -> None: ...
    @_property
    def selection_flyout(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]: ...
    @selection_flyout.setter
    def selection_flyout(self, value: typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]) -> None: ...
    @_property
    def padding(self) -> microsoft_ui_xaml.Thickness: ...
    @padding.setter
    def padding(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def overflow_content_target(self) -> typing.Optional[RichTextBlockOverflow]: ...
    @overflow_content_target.setter
    def overflow_content_target(self, value: typing.Optional[RichTextBlockOverflow]) -> None: ...
    @_property
    def optical_margin_alignment(self) -> microsoft_ui_xaml.OpticalMarginAlignment: ...
    @optical_margin_alignment.setter
    def optical_margin_alignment(self, value: microsoft_ui_xaml.OpticalMarginAlignment) -> None: ...
    @_property
    def max_lines(self) -> winrt.system.Int32: ...
    @max_lines.setter
    def max_lines(self, value: winrt.system.Int32) -> None: ...
    @_property
    def blocks(self) -> typing.Optional[microsoft_ui_xaml_documents.BlockCollection]: ...
    @_property
    def content_end(self) -> typing.Optional[microsoft_ui_xaml_documents.TextPointer]: ...
    @_property
    def content_start(self) -> typing.Optional[microsoft_ui_xaml_documents.TextPointer]: ...
    @_property
    def has_overflow_content(self) -> bool: ...
    @_property
    def is_text_trimmed(self) -> bool: ...
    @_property
    def selected_text(self) -> str: ...
    @_property
    def selection_end(self) -> typing.Optional[microsoft_ui_xaml_documents.TextPointer]: ...
    @_property
    def selection_start(self) -> typing.Optional[microsoft_ui_xaml_documents.TextPointer]: ...
    @_property
    def text_highlighters(self) -> typing.Optional[windows_foundation_collections.IVector[microsoft_ui_xaml_documents.TextHighlighter]]: ...
    @_property
    def baseline_offset(self) -> winrt.system.Double: ...

@typing.final
class RichTextBlockOverflow_Static(type):
    @_property
    def has_overflow_content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_text_trimmed_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_lines_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def overflow_content_target_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def padding_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class RichTextBlockOverflow(winrt.system.Object, metaclass=RichTextBlockOverflow_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RichTextBlockOverflow: ...
    def __new__(cls: typing.Type[RichTextBlockOverflow]) -> RichTextBlockOverflow: ...
    def get_position_from_point(self, point: windows_foundation.Point, /) -> typing.Optional[microsoft_ui_xaml_documents.TextPointer]: ...
    def add_is_text_trimmed_changed(self, handler: windows_foundation.TypedEventHandler[RichTextBlockOverflow, IsTextTrimmedChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_is_text_trimmed_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def padding(self) -> microsoft_ui_xaml.Thickness: ...
    @padding.setter
    def padding(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def overflow_content_target(self) -> typing.Optional[RichTextBlockOverflow]: ...
    @overflow_content_target.setter
    def overflow_content_target(self, value: typing.Optional[RichTextBlockOverflow]) -> None: ...
    @_property
    def max_lines(self) -> winrt.system.Int32: ...
    @max_lines.setter
    def max_lines(self, value: winrt.system.Int32) -> None: ...
    @_property
    def baseline_offset(self) -> winrt.system.Double: ...
    @_property
    def content_end(self) -> typing.Optional[microsoft_ui_xaml_documents.TextPointer]: ...
    @_property
    def content_source(self) -> typing.Optional[RichTextBlock]: ...
    @_property
    def content_start(self) -> typing.Optional[microsoft_ui_xaml_documents.TextPointer]: ...
    @_property
    def has_overflow_content(self) -> bool: ...
    @_property
    def is_text_trimmed(self) -> bool: ...

@typing.final
class RowDefinition_Static(type):
    @_property
    def height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def min_height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class RowDefinition(winrt.system.Object, metaclass=RowDefinition_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RowDefinition: ...
    def __new__(cls: typing.Type[RowDefinition]) -> RowDefinition: ...
    @_property
    def min_height(self) -> winrt.system.Double: ...
    @min_height.setter
    def min_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def max_height(self) -> winrt.system.Double: ...
    @max_height.setter
    def max_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def height(self) -> microsoft_ui_xaml.GridLength: ...
    @height.setter
    def height(self, value: microsoft_ui_xaml.GridLength) -> None: ...
    @_property
    def actual_height(self) -> winrt.system.Double: ...

@typing.final
class RowDefinitionCollection(winrt.system.Object, winrt._winrt.MutableSequence[RowDefinition]):
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[RowDefinition]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> RowDefinition: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[RowDefinition]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: RowDefinition) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[RowDefinition]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RowDefinitionCollection: ...
    def append(self, value: typing.Optional[RowDefinition], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[windows_foundation_collections.IIterator[RowDefinition]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[RowDefinition]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[RowDefinition], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[windows_foundation_collections.IVectorView[RowDefinition]]: ...
    def index_of(self, value: typing.Optional[RowDefinition], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[RowDefinition], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[RowDefinition], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[RowDefinition], /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class ScrollContentPresenter_Static(type):
    @_property
    def can_content_render_outside_bounds_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def sizes_content_to_templated_parent_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ScrollContentPresenter(winrt.system.Object, metaclass=ScrollContentPresenter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollContentPresenter: ...
    def __new__(cls: typing.Type[ScrollContentPresenter]) -> ScrollContentPresenter: ...
    def line_down(self) -> None: ...
    def line_left(self) -> None: ...
    def line_right(self) -> None: ...
    def line_up(self) -> None: ...
    def make_visible(self, visual: typing.Optional[microsoft_ui_xaml.UIElement], rectangle: windows_foundation.Rect, /) -> windows_foundation.Rect: ...
    def mouse_wheel_down(self) -> None: ...
    def mouse_wheel_left(self) -> None: ...
    def mouse_wheel_right(self) -> None: ...
    def mouse_wheel_up(self) -> None: ...
    def page_down(self) -> None: ...
    def page_left(self) -> None: ...
    def page_right(self) -> None: ...
    def page_up(self) -> None: ...
    def set_horizontal_offset(self, offset: winrt.system.Double, /) -> None: ...
    def set_vertical_offset(self, offset: winrt.system.Double, /) -> None: ...
    @_property
    def sizes_content_to_templated_parent(self) -> bool: ...
    @sizes_content_to_templated_parent.setter
    def sizes_content_to_templated_parent(self, value: bool) -> None: ...
    @_property
    def scroll_owner(self) -> typing.Optional[winrt.system.Object]: ...
    @scroll_owner.setter
    def scroll_owner(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def can_vertically_scroll(self) -> bool: ...
    @can_vertically_scroll.setter
    def can_vertically_scroll(self, value: bool) -> None: ...
    @_property
    def can_horizontally_scroll(self) -> bool: ...
    @can_horizontally_scroll.setter
    def can_horizontally_scroll(self, value: bool) -> None: ...
    @_property
    def can_content_render_outside_bounds(self) -> bool: ...
    @can_content_render_outside_bounds.setter
    def can_content_render_outside_bounds(self, value: bool) -> None: ...
    @_property
    def extent_height(self) -> winrt.system.Double: ...
    @_property
    def extent_width(self) -> winrt.system.Double: ...
    @_property
    def horizontal_offset(self) -> winrt.system.Double: ...
    @_property
    def vertical_offset(self) -> winrt.system.Double: ...
    @_property
    def viewport_height(self) -> winrt.system.Double: ...
    @_property
    def viewport_width(self) -> winrt.system.Double: ...

@typing.final
class ScrollView_Static(type):
    @_property
    def computed_horizontal_scroll_bar_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def computed_horizontal_scroll_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def computed_vertical_scroll_bar_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def computed_vertical_scroll_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def content_orientation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_anchor_ratio_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_scroll_bar_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_scroll_chain_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_scroll_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_scroll_rail_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def ignored_input_kinds_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_zoom_factor_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def min_zoom_factor_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def scroll_presenter_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_anchor_ratio_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_scroll_bar_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_scroll_chain_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_scroll_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_scroll_rail_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def zoom_chain_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def zoom_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ScrollView(winrt.system.Object, metaclass=ScrollView_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollView: ...
    def __new__(cls: typing.Type[ScrollView]) -> ScrollView: ...
    def add_scroll_velocity(self, offsets_velocity: windows_foundation_numerics.Vector2, inertia_decay_rate: typing.Optional[windows_foundation_numerics.Vector2], /) -> winrt.system.Int32: ...
    def add_zoom_velocity(self, zoom_factor_velocity: winrt.system.Single, center_point: typing.Optional[windows_foundation_numerics.Vector2], inertia_decay_rate: typing.Optional[winrt.system.Single], /) -> winrt.system.Int32: ...
    def register_anchor_candidate(self, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> None: ...
    @typing.overload
    def scroll_by(self, horizontal_offset_delta: winrt.system.Double, vertical_offset_delta: winrt.system.Double, /) -> winrt.system.Int32: ...
    @typing.overload
    def scroll_by(self, horizontal_offset_delta: winrt.system.Double, vertical_offset_delta: winrt.system.Double, options: typing.Optional[ScrollingScrollOptions], /) -> winrt.system.Int32: ...
    @typing.overload
    def scroll_to(self, horizontal_offset: winrt.system.Double, vertical_offset: winrt.system.Double, /) -> winrt.system.Int32: ...
    @typing.overload
    def scroll_to(self, horizontal_offset: winrt.system.Double, vertical_offset: winrt.system.Double, options: typing.Optional[ScrollingScrollOptions], /) -> winrt.system.Int32: ...
    def unregister_anchor_candidate(self, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> None: ...
    @typing.overload
    def zoom_by(self, zoom_factor_delta: winrt.system.Single, center_point: typing.Optional[windows_foundation_numerics.Vector2], /) -> winrt.system.Int32: ...
    @typing.overload
    def zoom_by(self, zoom_factor_delta: winrt.system.Single, center_point: typing.Optional[windows_foundation_numerics.Vector2], options: typing.Optional[ScrollingZoomOptions], /) -> winrt.system.Int32: ...
    @typing.overload
    def zoom_to(self, zoom_factor: winrt.system.Single, center_point: typing.Optional[windows_foundation_numerics.Vector2], /) -> winrt.system.Int32: ...
    @typing.overload
    def zoom_to(self, zoom_factor: winrt.system.Single, center_point: typing.Optional[windows_foundation_numerics.Vector2], options: typing.Optional[ScrollingZoomOptions], /) -> winrt.system.Int32: ...
    def add_anchor_requested(self, handler: windows_foundation.TypedEventHandler[ScrollView, ScrollingAnchorRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_anchor_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_bringing_into_view(self, handler: windows_foundation.TypedEventHandler[ScrollView, ScrollingBringingIntoViewEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_bringing_into_view(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_extent_changed(self, handler: windows_foundation.TypedEventHandler[ScrollView, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_extent_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_scroll_animation_starting(self, handler: windows_foundation.TypedEventHandler[ScrollView, ScrollingScrollAnimationStartingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_scroll_animation_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_scroll_completed(self, handler: windows_foundation.TypedEventHandler[ScrollView, ScrollingScrollCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_scroll_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_state_changed(self, handler: windows_foundation.TypedEventHandler[ScrollView, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_state_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_view_changed(self, handler: windows_foundation.TypedEventHandler[ScrollView, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_view_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_zoom_animation_starting(self, handler: windows_foundation.TypedEventHandler[ScrollView, ScrollingZoomAnimationStartingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_zoom_animation_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_zoom_completed(self, handler: windows_foundation.TypedEventHandler[ScrollView, ScrollingZoomCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_zoom_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def horizontal_scroll_mode(self) -> ScrollingScrollMode: ...
    @horizontal_scroll_mode.setter
    def horizontal_scroll_mode(self, value: ScrollingScrollMode) -> None: ...
    @_property
    def horizontal_scroll_chain_mode(self) -> ScrollingChainMode: ...
    @horizontal_scroll_chain_mode.setter
    def horizontal_scroll_chain_mode(self, value: ScrollingChainMode) -> None: ...
    @_property
    def horizontal_scroll_bar_visibility(self) -> ScrollingScrollBarVisibility: ...
    @horizontal_scroll_bar_visibility.setter
    def horizontal_scroll_bar_visibility(self, value: ScrollingScrollBarVisibility) -> None: ...
    @_property
    def content_orientation(self) -> ScrollingContentOrientation: ...
    @content_orientation.setter
    def content_orientation(self, value: ScrollingContentOrientation) -> None: ...
    @_property
    def content(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @content.setter
    def content(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def ignored_input_kinds(self) -> ScrollingInputKinds: ...
    @ignored_input_kinds.setter
    def ignored_input_kinds(self, value: ScrollingInputKinds) -> None: ...
    @_property
    def horizontal_anchor_ratio(self) -> winrt.system.Double: ...
    @horizontal_anchor_ratio.setter
    def horizontal_anchor_ratio(self, value: winrt.system.Double) -> None: ...
    @_property
    def horizontal_scroll_rail_mode(self) -> ScrollingRailMode: ...
    @horizontal_scroll_rail_mode.setter
    def horizontal_scroll_rail_mode(self, value: ScrollingRailMode) -> None: ...
    @_property
    def zoom_mode(self) -> ScrollingZoomMode: ...
    @zoom_mode.setter
    def zoom_mode(self, value: ScrollingZoomMode) -> None: ...
    @_property
    def max_zoom_factor(self) -> winrt.system.Double: ...
    @max_zoom_factor.setter
    def max_zoom_factor(self, value: winrt.system.Double) -> None: ...
    @_property
    def zoom_chain_mode(self) -> ScrollingChainMode: ...
    @zoom_chain_mode.setter
    def zoom_chain_mode(self, value: ScrollingChainMode) -> None: ...
    @_property
    def vertical_scroll_rail_mode(self) -> ScrollingRailMode: ...
    @vertical_scroll_rail_mode.setter
    def vertical_scroll_rail_mode(self, value: ScrollingRailMode) -> None: ...
    @_property
    def vertical_scroll_mode(self) -> ScrollingScrollMode: ...
    @vertical_scroll_mode.setter
    def vertical_scroll_mode(self, value: ScrollingScrollMode) -> None: ...
    @_property
    def vertical_scroll_chain_mode(self) -> ScrollingChainMode: ...
    @vertical_scroll_chain_mode.setter
    def vertical_scroll_chain_mode(self, value: ScrollingChainMode) -> None: ...
    @_property
    def vertical_scroll_bar_visibility(self) -> ScrollingScrollBarVisibility: ...
    @vertical_scroll_bar_visibility.setter
    def vertical_scroll_bar_visibility(self, value: ScrollingScrollBarVisibility) -> None: ...
    @_property
    def vertical_anchor_ratio(self) -> winrt.system.Double: ...
    @vertical_anchor_ratio.setter
    def vertical_anchor_ratio(self, value: winrt.system.Double) -> None: ...
    @_property
    def min_zoom_factor(self) -> winrt.system.Double: ...
    @min_zoom_factor.setter
    def min_zoom_factor(self, value: winrt.system.Double) -> None: ...
    @_property
    def computed_horizontal_scroll_mode(self) -> ScrollingScrollMode: ...
    @_property
    def computed_vertical_scroll_bar_visibility(self) -> microsoft_ui_xaml.Visibility: ...
    @_property
    def computed_vertical_scroll_mode(self) -> ScrollingScrollMode: ...
    @_property
    def current_anchor(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @_property
    def expression_animation_sources(self) -> typing.Optional[microsoft_ui_composition.CompositionPropertySet]: ...
    @_property
    def extent_height(self) -> winrt.system.Double: ...
    @_property
    def extent_width(self) -> winrt.system.Double: ...
    @_property
    def horizontal_offset(self) -> winrt.system.Double: ...
    @_property
    def scroll_presenter(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.ScrollPresenter]: ...
    @_property
    def scrollable_height(self) -> winrt.system.Double: ...
    @_property
    def scrollable_width(self) -> winrt.system.Double: ...
    @_property
    def state(self) -> ScrollingInteractionState: ...
    @_property
    def vertical_offset(self) -> winrt.system.Double: ...
    @_property
    def viewport_height(self) -> winrt.system.Double: ...
    @_property
    def viewport_width(self) -> winrt.system.Double: ...
    @_property
    def zoom_factor(self) -> winrt.system.Single: ...
    @_property
    def computed_horizontal_scroll_bar_visibility(self) -> microsoft_ui_xaml.Visibility: ...

@typing.final
class ScrollViewer_Static(type):
    def get_bring_into_view_on_focus_change(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> bool: ...
    def get_can_content_render_outside_bounds(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> bool: ...
    def get_horizontal_scroll_bar_visibility(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> ScrollBarVisibility: ...
    def get_horizontal_scroll_mode(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> ScrollMode: ...
    def get_is_deferred_scrolling_enabled(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> bool: ...
    def get_is_horizontal_rail_enabled(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> bool: ...
    def get_is_horizontal_scroll_chaining_enabled(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> bool: ...
    def get_is_scroll_inertia_enabled(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> bool: ...
    def get_is_vertical_rail_enabled(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> bool: ...
    def get_is_vertical_scroll_chaining_enabled(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> bool: ...
    def get_is_zoom_chaining_enabled(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> bool: ...
    def get_is_zoom_inertia_enabled(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> bool: ...
    def get_vertical_scroll_bar_visibility(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> ScrollBarVisibility: ...
    def get_vertical_scroll_mode(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> ScrollMode: ...
    def get_zoom_mode(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> ZoomMode: ...
    def set_bring_into_view_on_focus_change(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], bring_into_view_on_focus_change: bool, /) -> None: ...
    def set_can_content_render_outside_bounds(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], can_content_render_outside_bounds: bool, /) -> None: ...
    def set_horizontal_scroll_bar_visibility(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], horizontal_scroll_bar_visibility: ScrollBarVisibility, /) -> None: ...
    def set_horizontal_scroll_mode(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], horizontal_scroll_mode: ScrollMode, /) -> None: ...
    def set_is_deferred_scrolling_enabled(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], is_deferred_scrolling_enabled: bool, /) -> None: ...
    def set_is_horizontal_rail_enabled(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], is_horizontal_rail_enabled: bool, /) -> None: ...
    def set_is_horizontal_scroll_chaining_enabled(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], is_horizontal_scroll_chaining_enabled: bool, /) -> None: ...
    def set_is_scroll_inertia_enabled(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], is_scroll_inertia_enabled: bool, /) -> None: ...
    def set_is_vertical_rail_enabled(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], is_vertical_rail_enabled: bool, /) -> None: ...
    def set_is_vertical_scroll_chaining_enabled(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], is_vertical_scroll_chaining_enabled: bool, /) -> None: ...
    def set_is_zoom_chaining_enabled(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], is_zoom_chaining_enabled: bool, /) -> None: ...
    def set_is_zoom_inertia_enabled(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], is_zoom_inertia_enabled: bool, /) -> None: ...
    def set_vertical_scroll_bar_visibility(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], vertical_scroll_bar_visibility: ScrollBarVisibility, /) -> None: ...
    def set_vertical_scroll_mode(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], vertical_scroll_mode: ScrollMode, /) -> None: ...
    def set_zoom_mode(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], zoom_mode: ZoomMode, /) -> None: ...
    @_property
    def bring_into_view_on_focus_change_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def can_content_render_outside_bounds_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def computed_horizontal_scroll_bar_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def computed_vertical_scroll_bar_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def extent_height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def extent_width_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_anchor_ratio_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_offset_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_scroll_bar_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_scroll_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_snap_points_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_snap_points_type_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_deferred_scrolling_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_horizontal_rail_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_horizontal_scroll_chaining_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_scroll_inertia_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_vertical_rail_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_vertical_scroll_chaining_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_zoom_chaining_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_zoom_inertia_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def left_header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_zoom_factor_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def min_zoom_factor_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def reduce_viewport_for_core_input_view_occlusions_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def scrollable_height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def scrollable_width_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def top_header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def top_left_header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_anchor_ratio_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_offset_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_scroll_bar_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_scroll_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_snap_points_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_snap_points_type_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def viewport_height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def viewport_width_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def zoom_factor_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def zoom_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def zoom_snap_points_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def zoom_snap_points_type_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ScrollViewer(winrt.system.Object, metaclass=ScrollViewer_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollViewer: ...
    def __new__(cls: typing.Type[ScrollViewer]) -> ScrollViewer: ...
    @typing.overload
    def change_view(self, horizontal_offset: typing.Optional[winrt.system.Double], vertical_offset: typing.Optional[winrt.system.Double], zoom_factor: typing.Optional[winrt.system.Single], /) -> bool: ...
    @typing.overload
    def change_view(self, horizontal_offset: typing.Optional[winrt.system.Double], vertical_offset: typing.Optional[winrt.system.Double], zoom_factor: typing.Optional[winrt.system.Single], disable_animation: bool, /) -> bool: ...
    def invalidate_scroll_info(self) -> None: ...
    def register_anchor_candidate(self, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> None: ...
    def scroll_to_horizontal_offset(self, offset: winrt.system.Double, /) -> None: ...
    def scroll_to_vertical_offset(self, offset: winrt.system.Double, /) -> None: ...
    def unregister_anchor_candidate(self, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> None: ...
    def zoom_to_factor(self, factor: winrt.system.Single, /) -> None: ...
    def add_anchor_requested(self, handler: windows_foundation.TypedEventHandler[ScrollViewer, AnchorRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_anchor_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_direct_manipulation_completed(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_direct_manipulation_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_direct_manipulation_started(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_direct_manipulation_started(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_view_changed(self, handler: windows_foundation.EventHandler[ScrollViewerViewChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_view_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_view_changing(self, handler: windows_foundation.EventHandler[ScrollViewerViewChangingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_view_changing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def current_anchor(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @_property
    def is_horizontal_scroll_chaining_enabled(self) -> bool: ...
    @is_horizontal_scroll_chaining_enabled.setter
    def is_horizontal_scroll_chaining_enabled(self, value: bool) -> None: ...
    @_property
    def is_horizontal_rail_enabled(self) -> bool: ...
    @is_horizontal_rail_enabled.setter
    def is_horizontal_rail_enabled(self, value: bool) -> None: ...
    @_property
    def is_deferred_scrolling_enabled(self) -> bool: ...
    @is_deferred_scrolling_enabled.setter
    def is_deferred_scrolling_enabled(self, value: bool) -> None: ...
    @_property
    def horizontal_snap_points_type(self) -> SnapPointsType: ...
    @horizontal_snap_points_type.setter
    def horizontal_snap_points_type(self, value: SnapPointsType) -> None: ...
    @_property
    def horizontal_snap_points_alignment(self) -> microsoft_ui_xaml_controls_primitives.SnapPointsAlignment: ...
    @horizontal_snap_points_alignment.setter
    def horizontal_snap_points_alignment(self, value: microsoft_ui_xaml_controls_primitives.SnapPointsAlignment) -> None: ...
    @_property
    def horizontal_scroll_mode(self) -> ScrollMode: ...
    @horizontal_scroll_mode.setter
    def horizontal_scroll_mode(self, value: ScrollMode) -> None: ...
    @_property
    def horizontal_scroll_bar_visibility(self) -> ScrollBarVisibility: ...
    @horizontal_scroll_bar_visibility.setter
    def horizontal_scroll_bar_visibility(self, value: ScrollBarVisibility) -> None: ...
    @_property
    def is_zoom_inertia_enabled(self) -> bool: ...
    @is_zoom_inertia_enabled.setter
    def is_zoom_inertia_enabled(self, value: bool) -> None: ...
    @_property
    def horizontal_anchor_ratio(self) -> winrt.system.Double: ...
    @horizontal_anchor_ratio.setter
    def horizontal_anchor_ratio(self, value: winrt.system.Double) -> None: ...
    @_property
    def is_zoom_chaining_enabled(self) -> bool: ...
    @is_zoom_chaining_enabled.setter
    def is_zoom_chaining_enabled(self, value: bool) -> None: ...
    @_property
    def is_vertical_scroll_chaining_enabled(self) -> bool: ...
    @is_vertical_scroll_chaining_enabled.setter
    def is_vertical_scroll_chaining_enabled(self, value: bool) -> None: ...
    @_property
    def is_vertical_rail_enabled(self) -> bool: ...
    @is_vertical_rail_enabled.setter
    def is_vertical_rail_enabled(self, value: bool) -> None: ...
    @_property
    def is_scroll_inertia_enabled(self) -> bool: ...
    @is_scroll_inertia_enabled.setter
    def is_scroll_inertia_enabled(self, value: bool) -> None: ...
    @_property
    def can_content_render_outside_bounds(self) -> bool: ...
    @can_content_render_outside_bounds.setter
    def can_content_render_outside_bounds(self, value: bool) -> None: ...
    @_property
    def left_header(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @left_header.setter
    def left_header(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def bring_into_view_on_focus_change(self) -> bool: ...
    @bring_into_view_on_focus_change.setter
    def bring_into_view_on_focus_change(self, value: bool) -> None: ...
    @_property
    def zoom_snap_points_type(self) -> SnapPointsType: ...
    @zoom_snap_points_type.setter
    def zoom_snap_points_type(self, value: SnapPointsType) -> None: ...
    @_property
    def zoom_mode(self) -> ZoomMode: ...
    @zoom_mode.setter
    def zoom_mode(self, value: ZoomMode) -> None: ...
    @_property
    def vertical_snap_points_type(self) -> SnapPointsType: ...
    @vertical_snap_points_type.setter
    def vertical_snap_points_type(self, value: SnapPointsType) -> None: ...
    @_property
    def vertical_snap_points_alignment(self) -> microsoft_ui_xaml_controls_primitives.SnapPointsAlignment: ...
    @vertical_snap_points_alignment.setter
    def vertical_snap_points_alignment(self, value: microsoft_ui_xaml_controls_primitives.SnapPointsAlignment) -> None: ...
    @_property
    def vertical_scroll_mode(self) -> ScrollMode: ...
    @vertical_scroll_mode.setter
    def vertical_scroll_mode(self, value: ScrollMode) -> None: ...
    @_property
    def vertical_scroll_bar_visibility(self) -> ScrollBarVisibility: ...
    @vertical_scroll_bar_visibility.setter
    def vertical_scroll_bar_visibility(self, value: ScrollBarVisibility) -> None: ...
    @_property
    def vertical_anchor_ratio(self) -> winrt.system.Double: ...
    @vertical_anchor_ratio.setter
    def vertical_anchor_ratio(self, value: winrt.system.Double) -> None: ...
    @_property
    def top_left_header(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @top_left_header.setter
    def top_left_header(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def top_header(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @top_header.setter
    def top_header(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def reduce_viewport_for_core_input_view_occlusions(self) -> bool: ...
    @reduce_viewport_for_core_input_view_occlusions.setter
    def reduce_viewport_for_core_input_view_occlusions(self, value: bool) -> None: ...
    @_property
    def min_zoom_factor(self) -> winrt.system.Single: ...
    @min_zoom_factor.setter
    def min_zoom_factor(self, value: winrt.system.Single) -> None: ...
    @_property
    def max_zoom_factor(self) -> winrt.system.Single: ...
    @max_zoom_factor.setter
    def max_zoom_factor(self, value: winrt.system.Single) -> None: ...
    @_property
    def computed_horizontal_scroll_bar_visibility(self) -> microsoft_ui_xaml.Visibility: ...
    @_property
    def computed_vertical_scroll_bar_visibility(self) -> microsoft_ui_xaml.Visibility: ...
    @_property
    def extent_height(self) -> winrt.system.Double: ...
    @_property
    def extent_width(self) -> winrt.system.Double: ...
    @_property
    def horizontal_offset(self) -> winrt.system.Double: ...
    @_property
    def scrollable_height(self) -> winrt.system.Double: ...
    @_property
    def scrollable_width(self) -> winrt.system.Double: ...
    @_property
    def vertical_offset(self) -> winrt.system.Double: ...
    @_property
    def viewport_height(self) -> winrt.system.Double: ...
    @_property
    def viewport_width(self) -> winrt.system.Double: ...
    @_property
    def zoom_factor(self) -> winrt.system.Single: ...
    @_property
    def zoom_snap_points(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Single]]: ...

@typing.final
class ScrollViewerView(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollViewerView: ...
    @_property
    def horizontal_offset(self) -> winrt.system.Double: ...
    @_property
    def vertical_offset(self) -> winrt.system.Double: ...
    @_property
    def zoom_factor(self) -> winrt.system.Single: ...

@typing.final
class ScrollViewerViewChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollViewerViewChangedEventArgs: ...
    def __new__(cls: typing.Type[ScrollViewerViewChangedEventArgs]) -> ScrollViewerViewChangedEventArgs: ...
    @_property
    def is_intermediate(self) -> bool: ...

@typing.final
class ScrollViewerViewChangingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollViewerViewChangingEventArgs: ...
    @_property
    def final_view(self) -> typing.Optional[ScrollViewerView]: ...
    @_property
    def is_inertial(self) -> bool: ...
    @_property
    def next_view(self) -> typing.Optional[ScrollViewerView]: ...

@typing.final
class ScrollingAnchorRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollingAnchorRequestedEventArgs: ...
    @_property
    def anchor_element(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @anchor_element.setter
    def anchor_element(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def anchor_candidates(self) -> typing.Optional[windows_foundation_collections.IVector[microsoft_ui_xaml.UIElement]]: ...

@typing.final
class ScrollingBringingIntoViewEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollingBringingIntoViewEventArgs: ...
    @_property
    def snap_points_mode(self) -> ScrollingSnapPointsMode: ...
    @snap_points_mode.setter
    def snap_points_mode(self, value: ScrollingSnapPointsMode) -> None: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def correlation_id(self) -> winrt.system.Int32: ...
    @_property
    def request_event_args(self) -> typing.Optional[microsoft_ui_xaml.BringIntoViewRequestedEventArgs]: ...
    @_property
    def target_horizontal_offset(self) -> winrt.system.Double: ...
    @_property
    def target_vertical_offset(self) -> winrt.system.Double: ...

@typing.final
class ScrollingScrollAnimationStartingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollingScrollAnimationStartingEventArgs: ...
    @_property
    def animation(self) -> typing.Optional[microsoft_ui_composition.CompositionAnimation]: ...
    @animation.setter
    def animation(self, value: typing.Optional[microsoft_ui_composition.CompositionAnimation]) -> None: ...
    @_property
    def correlation_id(self) -> winrt.system.Int32: ...
    @_property
    def end_position(self) -> windows_foundation_numerics.Vector2: ...
    @_property
    def start_position(self) -> windows_foundation_numerics.Vector2: ...

@typing.final
class ScrollingScrollCompletedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollingScrollCompletedEventArgs: ...
    @_property
    def correlation_id(self) -> winrt.system.Int32: ...

@typing.final
class ScrollingScrollOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollingScrollOptions: ...
    @typing.overload
    def __new__(cls: typing.Type[ScrollingScrollOptions], animation_mode: ScrollingAnimationMode) -> ScrollingScrollOptions: ...
    @typing.overload
    def __new__(cls: typing.Type[ScrollingScrollOptions], animation_mode: ScrollingAnimationMode, snap_points_mode: ScrollingSnapPointsMode) -> ScrollingScrollOptions: ...
    @_property
    def snap_points_mode(self) -> ScrollingSnapPointsMode: ...
    @snap_points_mode.setter
    def snap_points_mode(self, value: ScrollingSnapPointsMode) -> None: ...
    @_property
    def animation_mode(self) -> ScrollingAnimationMode: ...
    @animation_mode.setter
    def animation_mode(self, value: ScrollingAnimationMode) -> None: ...

@typing.final
class ScrollingZoomAnimationStartingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollingZoomAnimationStartingEventArgs: ...
    @_property
    def animation(self) -> typing.Optional[microsoft_ui_composition.CompositionAnimation]: ...
    @animation.setter
    def animation(self, value: typing.Optional[microsoft_ui_composition.CompositionAnimation]) -> None: ...
    @_property
    def center_point(self) -> windows_foundation_numerics.Vector2: ...
    @_property
    def correlation_id(self) -> winrt.system.Int32: ...
    @_property
    def end_zoom_factor(self) -> winrt.system.Single: ...
    @_property
    def start_zoom_factor(self) -> winrt.system.Single: ...

@typing.final
class ScrollingZoomCompletedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollingZoomCompletedEventArgs: ...
    @_property
    def correlation_id(self) -> winrt.system.Int32: ...

@typing.final
class ScrollingZoomOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollingZoomOptions: ...
    @typing.overload
    def __new__(cls: typing.Type[ScrollingZoomOptions], animation_mode: ScrollingAnimationMode) -> ScrollingZoomOptions: ...
    @typing.overload
    def __new__(cls: typing.Type[ScrollingZoomOptions], animation_mode: ScrollingAnimationMode, snap_points_mode: ScrollingSnapPointsMode) -> ScrollingZoomOptions: ...
    @_property
    def snap_points_mode(self) -> ScrollingSnapPointsMode: ...
    @snap_points_mode.setter
    def snap_points_mode(self, value: ScrollingSnapPointsMode) -> None: ...
    @_property
    def animation_mode(self) -> ScrollingAnimationMode: ...
    @animation_mode.setter
    def animation_mode(self, value: ScrollingAnimationMode) -> None: ...

@typing.final
class SectionsInViewChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SectionsInViewChangedEventArgs: ...
    @_property
    def added_sections(self) -> typing.Optional[windows_foundation_collections.IVector[HubSection]]: ...
    @_property
    def removed_sections(self) -> typing.Optional[windows_foundation_collections.IVector[HubSection]]: ...

@typing.final
class SelectionChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SelectionChangedEventArgs: ...
    def __new__(cls: typing.Type[SelectionChangedEventArgs], removed_items: windows_foundation_collections.IVector[winrt.system.Object], added_items: windows_foundation_collections.IVector[winrt.system.Object]) -> SelectionChangedEventArgs: ...
    @_property
    def added_items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Object]]: ...
    @_property
    def removed_items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Object]]: ...

@typing.final
class SelectorBar_Static(type):
    @_property
    def items_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_item_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class SelectorBar(winrt.system.Object, metaclass=SelectorBar_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SelectorBar: ...
    def __new__(cls: typing.Type[SelectorBar]) -> SelectorBar: ...
    def add_selection_changed(self, handler: windows_foundation.TypedEventHandler[SelectorBar, SelectorBarSelectionChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_selection_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def selected_item(self) -> typing.Optional[SelectorBarItem]: ...
    @selected_item.setter
    def selected_item(self, value: typing.Optional[SelectorBarItem]) -> None: ...
    @_property
    def items(self) -> typing.Optional[windows_foundation_collections.IVector[SelectorBarItem]]: ...

@typing.final
class SelectorBarItem_Static(type):
    @_property
    def icon_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class SelectorBarItem(winrt.system.Object, metaclass=SelectorBarItem_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SelectorBarItem: ...
    def __new__(cls: typing.Type[SelectorBarItem]) -> SelectorBarItem: ...
    @_property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> None: ...
    @_property
    def icon(self) -> typing.Optional[IconElement]: ...
    @icon.setter
    def icon(self, value: typing.Optional[IconElement]) -> None: ...

@typing.final
class SelectorBarSelectionChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SelectorBarSelectionChangedEventArgs: ...

@typing.final
class SemanticZoom_Static(type):
    @_property
    def can_change_views_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_zoom_out_button_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_zoomed_in_view_active_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def zoomed_in_view_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def zoomed_out_view_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class SemanticZoom(winrt.system.Object, metaclass=SemanticZoom_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SemanticZoom: ...
    def __new__(cls: typing.Type[SemanticZoom]) -> SemanticZoom: ...
    def toggle_active_view(self) -> None: ...
    def add_view_change_completed(self, handler: typing.Optional[SemanticZoomViewChangedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_view_change_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_view_change_started(self, handler: typing.Optional[SemanticZoomViewChangedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_view_change_started(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def zoomed_out_view(self) -> typing.Optional[ISemanticZoomInformation]: ...
    @zoomed_out_view.setter
    def zoomed_out_view(self, value: typing.Optional[ISemanticZoomInformation]) -> None: ...
    @_property
    def zoomed_in_view(self) -> typing.Optional[ISemanticZoomInformation]: ...
    @zoomed_in_view.setter
    def zoomed_in_view(self, value: typing.Optional[ISemanticZoomInformation]) -> None: ...
    @_property
    def is_zoomed_in_view_active(self) -> bool: ...
    @is_zoomed_in_view_active.setter
    def is_zoomed_in_view_active(self, value: bool) -> None: ...
    @_property
    def is_zoom_out_button_enabled(self) -> bool: ...
    @is_zoom_out_button_enabled.setter
    def is_zoom_out_button_enabled(self, value: bool) -> None: ...
    @_property
    def can_change_views(self) -> bool: ...
    @can_change_views.setter
    def can_change_views(self, value: bool) -> None: ...

@typing.final
class SemanticZoomLocation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SemanticZoomLocation: ...
    def __new__(cls: typing.Type[SemanticZoomLocation]) -> SemanticZoomLocation: ...
    @_property
    def item(self) -> typing.Optional[winrt.system.Object]: ...
    @item.setter
    def item(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def bounds(self) -> windows_foundation.Rect: ...
    @bounds.setter
    def bounds(self, value: windows_foundation.Rect) -> None: ...

@typing.final
class SemanticZoomViewChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SemanticZoomViewChangedEventArgs: ...
    def __new__(cls: typing.Type[SemanticZoomViewChangedEventArgs]) -> SemanticZoomViewChangedEventArgs: ...
    @_property
    def source_item(self) -> typing.Optional[SemanticZoomLocation]: ...
    @source_item.setter
    def source_item(self, value: typing.Optional[SemanticZoomLocation]) -> None: ...
    @_property
    def is_source_zoomed_in_view(self) -> bool: ...
    @is_source_zoomed_in_view.setter
    def is_source_zoomed_in_view(self, value: bool) -> None: ...
    @_property
    def destination_item(self) -> typing.Optional[SemanticZoomLocation]: ...
    @destination_item.setter
    def destination_item(self, value: typing.Optional[SemanticZoomLocation]) -> None: ...

@typing.final
class Slider_Static(type):
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def intermediate_value_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_direction_reversed_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_thumb_tool_tip_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def orientation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def snaps_to_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def step_frequency_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def thumb_tool_tip_value_converter_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tick_frequency_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tick_placement_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class Slider(winrt.system.Object, metaclass=Slider_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Slider: ...
    def __new__(cls: typing.Type[Slider]) -> Slider: ...
    @_property
    def tick_placement(self) -> microsoft_ui_xaml_controls_primitives.TickPlacement: ...
    @tick_placement.setter
    def tick_placement(self, value: microsoft_ui_xaml_controls_primitives.TickPlacement) -> None: ...
    @_property
    def tick_frequency(self) -> winrt.system.Double: ...
    @tick_frequency.setter
    def tick_frequency(self, value: winrt.system.Double) -> None: ...
    @_property
    def thumb_tool_tip_value_converter(self) -> typing.Optional[microsoft_ui_xaml_data.IValueConverter]: ...
    @thumb_tool_tip_value_converter.setter
    def thumb_tool_tip_value_converter(self, value: typing.Optional[microsoft_ui_xaml_data.IValueConverter]) -> None: ...
    @_property
    def step_frequency(self) -> winrt.system.Double: ...
    @step_frequency.setter
    def step_frequency(self, value: winrt.system.Double) -> None: ...
    @_property
    def snaps_to(self) -> microsoft_ui_xaml_controls_primitives.SliderSnapsTo: ...
    @snaps_to.setter
    def snaps_to(self, value: microsoft_ui_xaml_controls_primitives.SliderSnapsTo) -> None: ...
    @_property
    def orientation(self) -> Orientation: ...
    @orientation.setter
    def orientation(self, value: Orientation) -> None: ...
    @_property
    def is_thumb_tool_tip_enabled(self) -> bool: ...
    @is_thumb_tool_tip_enabled.setter
    def is_thumb_tool_tip_enabled(self, value: bool) -> None: ...
    @_property
    def is_direction_reversed(self) -> bool: ...
    @is_direction_reversed.setter
    def is_direction_reversed(self, value: bool) -> None: ...
    @_property
    def intermediate_value(self) -> winrt.system.Double: ...
    @intermediate_value.setter
    def intermediate_value(self, value: winrt.system.Double) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...

@typing.final
class SplitButton_Static(type):
    @_property
    def command_parameter_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def command_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def flyout_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class SplitButton(winrt.system.Object, metaclass=SplitButton_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SplitButton: ...
    def __new__(cls: typing.Type[SplitButton]) -> SplitButton: ...
    def add_click(self, handler: windows_foundation.TypedEventHandler[SplitButton, SplitButtonClickEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_click(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def flyout(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]: ...
    @flyout.setter
    def flyout(self, value: typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]) -> None: ...
    @_property
    def command_parameter(self) -> typing.Optional[winrt.system.Object]: ...
    @command_parameter.setter
    def command_parameter(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def command(self) -> typing.Optional[microsoft_ui_xaml_input.ICommand]: ...
    @command.setter
    def command(self, value: typing.Optional[microsoft_ui_xaml_input.ICommand]) -> None: ...

@typing.final
class SplitButtonClickEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SplitButtonClickEventArgs: ...

@typing.final
class SplitView_Static(type):
    @_property
    def compact_pane_length_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def display_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_pane_open_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def light_dismiss_overlay_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def open_pane_length_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pane_background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pane_placement_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pane_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def template_settings_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class SplitView(winrt.system.Object, metaclass=SplitView_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SplitView: ...
    def __new__(cls: typing.Type[SplitView]) -> SplitView: ...
    def add_pane_closed(self, handler: windows_foundation.TypedEventHandler[SplitView, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pane_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pane_closing(self, handler: windows_foundation.TypedEventHandler[SplitView, SplitViewPaneClosingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pane_closing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pane_opened(self, handler: windows_foundation.TypedEventHandler[SplitView, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pane_opened(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pane_opening(self, handler: windows_foundation.TypedEventHandler[SplitView, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pane_opening(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def pane_placement(self) -> SplitViewPanePlacement: ...
    @pane_placement.setter
    def pane_placement(self, value: SplitViewPanePlacement) -> None: ...
    @_property
    def pane_background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @pane_background.setter
    def pane_background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def pane(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @pane.setter
    def pane(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def open_pane_length(self) -> winrt.system.Double: ...
    @open_pane_length.setter
    def open_pane_length(self, value: winrt.system.Double) -> None: ...
    @_property
    def light_dismiss_overlay_mode(self) -> LightDismissOverlayMode: ...
    @light_dismiss_overlay_mode.setter
    def light_dismiss_overlay_mode(self, value: LightDismissOverlayMode) -> None: ...
    @_property
    def is_pane_open(self) -> bool: ...
    @is_pane_open.setter
    def is_pane_open(self, value: bool) -> None: ...
    @_property
    def display_mode(self) -> SplitViewDisplayMode: ...
    @display_mode.setter
    def display_mode(self, value: SplitViewDisplayMode) -> None: ...
    @_property
    def content(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @content.setter
    def content(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def compact_pane_length(self) -> winrt.system.Double: ...
    @compact_pane_length.setter
    def compact_pane_length(self, value: winrt.system.Double) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.SplitViewTemplateSettings]: ...

@typing.final
class SplitViewPaneClosingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SplitViewPaneClosingEventArgs: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...

@typing.final
class StackLayout_Static(type):
    @_property
    def orientation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def spacing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class StackLayout(winrt.system.Object, metaclass=StackLayout_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StackLayout: ...
    def __new__(cls: typing.Type[StackLayout]) -> StackLayout: ...
    @_property
    def spacing(self) -> winrt.system.Double: ...
    @spacing.setter
    def spacing(self, value: winrt.system.Double) -> None: ...
    @_property
    def orientation(self) -> Orientation: ...
    @orientation.setter
    def orientation(self, value: Orientation) -> None: ...

@typing.final
class StackPanel_Static(type):
    @_property
    def are_scroll_snap_points_regular_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def background_sizing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def border_brush_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def border_thickness_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def corner_radius_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def orientation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def padding_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def spacing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class StackPanel(winrt.system.Object, metaclass=StackPanel_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StackPanel: ...
    def __new__(cls: typing.Type[StackPanel]) -> StackPanel: ...
    def get_insertion_indexes(self, position: windows_foundation.Point, /) -> typing.Tuple[winrt.system.Int32, winrt.system.Int32]: ...
    def get_irregular_snap_points(self, orientation: Orientation, alignment: microsoft_ui_xaml_controls_primitives.SnapPointsAlignment, /) -> typing.Optional[windows_foundation_collections.IVectorView[winrt.system.Single]]: ...
    def get_regular_snap_points(self, orientation: Orientation, alignment: microsoft_ui_xaml_controls_primitives.SnapPointsAlignment, /) -> typing.Tuple[winrt.system.Single, winrt.system.Single]: ...
    def add_horizontal_snap_points_changed(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_horizontal_snap_points_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_vertical_snap_points_changed(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_vertical_snap_points_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def spacing(self) -> winrt.system.Double: ...
    @spacing.setter
    def spacing(self, value: winrt.system.Double) -> None: ...
    @_property
    def padding(self) -> microsoft_ui_xaml.Thickness: ...
    @padding.setter
    def padding(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def orientation(self) -> Orientation: ...
    @orientation.setter
    def orientation(self, value: Orientation) -> None: ...
    @_property
    def corner_radius(self) -> microsoft_ui_xaml.CornerRadius: ...
    @corner_radius.setter
    def corner_radius(self, value: microsoft_ui_xaml.CornerRadius) -> None: ...
    @_property
    def border_thickness(self) -> microsoft_ui_xaml.Thickness: ...
    @border_thickness.setter
    def border_thickness(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def border_brush(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @border_brush.setter
    def border_brush(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def background_sizing(self) -> BackgroundSizing: ...
    @background_sizing.setter
    def background_sizing(self, value: BackgroundSizing) -> None: ...
    @_property
    def are_scroll_snap_points_regular(self) -> bool: ...
    @are_scroll_snap_points_regular.setter
    def are_scroll_snap_points_regular(self, value: bool) -> None: ...
    @_property
    def are_horizontal_snap_points_regular(self) -> bool: ...
    @_property
    def are_vertical_snap_points_regular(self) -> bool: ...

@typing.final
class StyleSelector(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StyleSelector: ...
    def __new__(cls: typing.Type[StyleSelector]) -> StyleSelector: ...
    def select_style(self, item: typing.Optional[winrt.system.Object], container: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> typing.Optional[microsoft_ui_xaml.Style]: ...

@typing.final
class SwapChainBackgroundPanel(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SwapChainBackgroundPanel: ...
    def __new__(cls: typing.Type[SwapChainBackgroundPanel]) -> SwapChainBackgroundPanel: ...

@typing.final
class SwapChainPanel_Static(type):
    @_property
    def composition_scale_x_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def composition_scale_y_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class SwapChainPanel(winrt.system.Object, metaclass=SwapChainPanel_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SwapChainPanel: ...
    def __new__(cls: typing.Type[SwapChainPanel]) -> SwapChainPanel: ...
    def create_core_independent_input_source(self, device_kinds: microsoft_ui_input.InputPointerSourceDeviceKinds, /) -> typing.Optional[microsoft_ui_input.InputPointerSource]: ...
    def add_composition_scale_changed(self, handler: windows_foundation.TypedEventHandler[SwapChainPanel, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_composition_scale_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def composition_scale_x(self) -> winrt.system.Single: ...
    @_property
    def composition_scale_y(self) -> winrt.system.Single: ...

@typing.final
class SwipeControl_Static(type):
    @_property
    def bottom_items_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def left_items_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def right_items_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def top_items_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class SwipeControl(winrt.system.Object, metaclass=SwipeControl_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SwipeControl: ...
    def __new__(cls: typing.Type[SwipeControl]) -> SwipeControl: ...
    def close(self) -> None: ...
    @_property
    def top_items(self) -> typing.Optional[SwipeItems]: ...
    @top_items.setter
    def top_items(self, value: typing.Optional[SwipeItems]) -> None: ...
    @_property
    def right_items(self) -> typing.Optional[SwipeItems]: ...
    @right_items.setter
    def right_items(self, value: typing.Optional[SwipeItems]) -> None: ...
    @_property
    def left_items(self) -> typing.Optional[SwipeItems]: ...
    @left_items.setter
    def left_items(self, value: typing.Optional[SwipeItems]) -> None: ...
    @_property
    def bottom_items(self) -> typing.Optional[SwipeItems]: ...
    @bottom_items.setter
    def bottom_items(self, value: typing.Optional[SwipeItems]) -> None: ...

@typing.final
class SwipeItem_Static(type):
    @_property
    def background_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def behavior_on_invoked_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def command_parameter_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def command_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def icon_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class SwipeItem(winrt.system.Object, metaclass=SwipeItem_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SwipeItem: ...
    def __new__(cls: typing.Type[SwipeItem]) -> SwipeItem: ...
    def add_invoked(self, handler: windows_foundation.TypedEventHandler[SwipeItem, SwipeItemInvokedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_invoked(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> None: ...
    @_property
    def icon_source(self) -> typing.Optional[IconSource]: ...
    @icon_source.setter
    def icon_source(self, value: typing.Optional[IconSource]) -> None: ...
    @_property
    def foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @foreground.setter
    def foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def command_parameter(self) -> typing.Optional[winrt.system.Object]: ...
    @command_parameter.setter
    def command_parameter(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def command(self) -> typing.Optional[microsoft_ui_xaml_input.ICommand]: ...
    @command.setter
    def command(self, value: typing.Optional[microsoft_ui_xaml_input.ICommand]) -> None: ...
    @_property
    def behavior_on_invoked(self) -> SwipeBehaviorOnInvoked: ...
    @behavior_on_invoked.setter
    def behavior_on_invoked(self, value: SwipeBehaviorOnInvoked) -> None: ...
    @_property
    def background(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @background.setter
    def background(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...

@typing.final
class SwipeItemInvokedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SwipeItemInvokedEventArgs: ...
    @_property
    def swipe_control(self) -> typing.Optional[SwipeControl]: ...

@typing.final
class SwipeItems_Static(type):
    @_property
    def mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class SwipeItems(winrt.system.Object, winrt._winrt.MutableSequence[SwipeItem], metaclass=SwipeItems_Static):
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[SwipeItem]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> SwipeItem: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[SwipeItem]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: SwipeItem) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[SwipeItem]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SwipeItems: ...
    def __new__(cls: typing.Type[SwipeItems]) -> SwipeItems: ...
    def append(self, value: typing.Optional[SwipeItem], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[windows_foundation_collections.IIterator[SwipeItem]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[SwipeItem]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[SwipeItem], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[windows_foundation_collections.IVectorView[SwipeItem]]: ...
    def index_of(self, value: typing.Optional[SwipeItem], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[SwipeItem], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[SwipeItem], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[SwipeItem], /) -> None: ...
    @_property
    def mode(self) -> SwipeMode: ...
    @mode.setter
    def mode(self, value: SwipeMode) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class SymbolIcon_Static(type):
    @_property
    def symbol_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class SymbolIcon(winrt.system.Object, metaclass=SymbolIcon_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SymbolIcon: ...
    @typing.overload
    def __new__(cls: typing.Type[SymbolIcon], symbol: Symbol) -> SymbolIcon: ...
    @typing.overload
    def __new__(cls: typing.Type[SymbolIcon]) -> SymbolIcon: ...
    @_property
    def symbol(self) -> Symbol: ...
    @symbol.setter
    def symbol(self, value: Symbol) -> None: ...

@typing.final
class SymbolIconSource_Static(type):
    @_property
    def symbol_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class SymbolIconSource(winrt.system.Object, metaclass=SymbolIconSource_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SymbolIconSource: ...
    def __new__(cls: typing.Type[SymbolIconSource]) -> SymbolIconSource: ...
    @_property
    def symbol(self) -> Symbol: ...
    @symbol.setter
    def symbol(self, value: Symbol) -> None: ...

@typing.final
class TabView_Static(type):
    @_property
    def add_tab_button_command_parameter_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def add_tab_button_command_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def allow_drop_tabs_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def can_drag_tabs_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def can_reorder_tabs_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def close_button_overlay_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_add_tab_button_visible_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_index_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_item_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tab_item_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tab_item_template_selector_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tab_items_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tab_items_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tab_strip_footer_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tab_strip_footer_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tab_strip_header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tab_strip_header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tab_width_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class TabView(winrt.system.Object, metaclass=TabView_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TabView: ...
    def __new__(cls: typing.Type[TabView]) -> TabView: ...
    def container_from_index(self, index: winrt.system.Int32, /) -> typing.Optional[microsoft_ui_xaml.DependencyObject]: ...
    def container_from_item(self, item: typing.Optional[winrt.system.Object], /) -> typing.Optional[microsoft_ui_xaml.DependencyObject]: ...
    def add_add_tab_button_click(self, handler: windows_foundation.TypedEventHandler[TabView, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_add_tab_button_click(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_selection_changed(self, handler: typing.Optional[SelectionChangedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_selection_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_tab_close_requested(self, handler: windows_foundation.TypedEventHandler[TabView, TabViewTabCloseRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_tab_close_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_tab_drag_completed(self, handler: windows_foundation.TypedEventHandler[TabView, TabViewTabDragCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_tab_drag_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_tab_drag_starting(self, handler: windows_foundation.TypedEventHandler[TabView, TabViewTabDragStartingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_tab_drag_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_tab_dropped_outside(self, handler: windows_foundation.TypedEventHandler[TabView, TabViewTabDroppedOutsideEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_tab_dropped_outside(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_tab_items_changed(self, handler: windows_foundation.TypedEventHandler[TabView, windows_foundation_collections.IVectorChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_tab_items_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_tab_strip_drag_over(self, handler: typing.Optional[microsoft_ui_xaml.DragEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_tab_strip_drag_over(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_tab_strip_drop(self, handler: typing.Optional[microsoft_ui_xaml.DragEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_tab_strip_drop(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def tab_width_mode(self) -> TabViewWidthMode: ...
    @tab_width_mode.setter
    def tab_width_mode(self, value: TabViewWidthMode) -> None: ...
    @_property
    def tab_strip_header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @tab_strip_header_template.setter
    def tab_strip_header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def tab_strip_header(self) -> typing.Optional[winrt.system.Object]: ...
    @tab_strip_header.setter
    def tab_strip_header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def tab_strip_footer_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @tab_strip_footer_template.setter
    def tab_strip_footer_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def tab_strip_footer(self) -> typing.Optional[winrt.system.Object]: ...
    @tab_strip_footer.setter
    def tab_strip_footer(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def tab_items_source(self) -> typing.Optional[winrt.system.Object]: ...
    @tab_items_source.setter
    def tab_items_source(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def tab_item_template_selector(self) -> typing.Optional[DataTemplateSelector]: ...
    @tab_item_template_selector.setter
    def tab_item_template_selector(self, value: typing.Optional[DataTemplateSelector]) -> None: ...
    @_property
    def tab_item_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @tab_item_template.setter
    def tab_item_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def selected_item(self) -> typing.Optional[winrt.system.Object]: ...
    @selected_item.setter
    def selected_item(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def selected_index(self) -> winrt.system.Int32: ...
    @selected_index.setter
    def selected_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def is_add_tab_button_visible(self) -> bool: ...
    @is_add_tab_button_visible.setter
    def is_add_tab_button_visible(self, value: bool) -> None: ...
    @_property
    def close_button_overlay_mode(self) -> TabViewCloseButtonOverlayMode: ...
    @close_button_overlay_mode.setter
    def close_button_overlay_mode(self, value: TabViewCloseButtonOverlayMode) -> None: ...
    @_property
    def can_reorder_tabs(self) -> bool: ...
    @can_reorder_tabs.setter
    def can_reorder_tabs(self, value: bool) -> None: ...
    @_property
    def can_drag_tabs(self) -> bool: ...
    @can_drag_tabs.setter
    def can_drag_tabs(self, value: bool) -> None: ...
    @_property
    def allow_drop_tabs(self) -> bool: ...
    @allow_drop_tabs.setter
    def allow_drop_tabs(self, value: bool) -> None: ...
    @_property
    def add_tab_button_command_parameter(self) -> typing.Optional[winrt.system.Object]: ...
    @add_tab_button_command_parameter.setter
    def add_tab_button_command_parameter(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def add_tab_button_command(self) -> typing.Optional[microsoft_ui_xaml_input.ICommand]: ...
    @add_tab_button_command.setter
    def add_tab_button_command(self, value: typing.Optional[microsoft_ui_xaml_input.ICommand]) -> None: ...
    @_property
    def tab_items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Object]]: ...

@typing.final
class TabViewItem_Static(type):
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def icon_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_closable_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tab_view_template_settings_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class TabViewItem(winrt.system.Object, metaclass=TabViewItem_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TabViewItem: ...
    def __new__(cls: typing.Type[TabViewItem]) -> TabViewItem: ...
    def add_close_requested(self, handler: windows_foundation.TypedEventHandler[TabViewItem, TabViewTabCloseRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_close_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_closable(self) -> bool: ...
    @is_closable.setter
    def is_closable(self, value: bool) -> None: ...
    @_property
    def icon_source(self) -> typing.Optional[IconSource]: ...
    @icon_source.setter
    def icon_source(self, value: typing.Optional[IconSource]) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def tab_view_template_settings(self) -> typing.Optional[TabViewItemTemplateSettings]: ...

@typing.final
class TabViewItemTemplateSettings_Static(type):
    @_property
    def icon_element_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tab_geometry_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class TabViewItemTemplateSettings(winrt.system.Object, metaclass=TabViewItemTemplateSettings_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TabViewItemTemplateSettings: ...
    def __new__(cls: typing.Type[TabViewItemTemplateSettings]) -> TabViewItemTemplateSettings: ...
    @_property
    def icon_element(self) -> typing.Optional[IconElement]: ...
    @icon_element.setter
    def icon_element(self, value: typing.Optional[IconElement]) -> None: ...
    @_property
    def tab_geometry(self) -> typing.Optional[microsoft_ui_xaml_media.Geometry]: ...
    @tab_geometry.setter
    def tab_geometry(self, value: typing.Optional[microsoft_ui_xaml_media.Geometry]) -> None: ...

@typing.final
class TabViewTabCloseRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TabViewTabCloseRequestedEventArgs: ...
    @_property
    def item(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def tab(self) -> typing.Optional[TabViewItem]: ...

@typing.final
class TabViewTabDragCompletedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TabViewTabDragCompletedEventArgs: ...
    @_property
    def drop_result(self) -> windows_applicationmodel_datatransfer.DataPackageOperation: ...
    @_property
    def item(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def tab(self) -> typing.Optional[TabViewItem]: ...

@typing.final
class TabViewTabDragStartingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TabViewTabDragStartingEventArgs: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def data(self) -> typing.Optional[windows_applicationmodel_datatransfer.DataPackage]: ...
    @_property
    def item(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def tab(self) -> typing.Optional[TabViewItem]: ...

@typing.final
class TabViewTabDroppedOutsideEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TabViewTabDroppedOutsideEventArgs: ...
    @_property
    def item(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def tab(self) -> typing.Optional[TabViewItem]: ...

@typing.final
class TeachingTip_Static(type):
    @_property
    def action_button_command_parameter_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def action_button_command_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def action_button_content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def action_button_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def close_button_command_parameter_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def close_button_command_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def close_button_content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def close_button_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def hero_content_placement_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def hero_content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def icon_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_light_dismiss_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_open_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def placement_margin_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def preferred_placement_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def should_constrain_to_root_bounds_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def subtitle_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tail_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def target_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def template_settings_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def title_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class TeachingTip(winrt.system.Object, metaclass=TeachingTip_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TeachingTip: ...
    def __new__(cls: typing.Type[TeachingTip]) -> TeachingTip: ...
    def add_action_button_click(self, handler: windows_foundation.TypedEventHandler[TeachingTip, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_action_button_click(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_close_button_click(self, handler: windows_foundation.TypedEventHandler[TeachingTip, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_close_button_click(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: windows_foundation.TypedEventHandler[TeachingTip, TeachingTipClosedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_closing(self, handler: windows_foundation.TypedEventHandler[TeachingTip, TeachingTipClosingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> None: ...
    @_property
    def target(self) -> typing.Optional[microsoft_ui_xaml.FrameworkElement]: ...
    @target.setter
    def target(self, value: typing.Optional[microsoft_ui_xaml.FrameworkElement]) -> None: ...
    @_property
    def tail_visibility(self) -> TeachingTipTailVisibility: ...
    @tail_visibility.setter
    def tail_visibility(self, value: TeachingTipTailVisibility) -> None: ...
    @_property
    def subtitle(self) -> str: ...
    @subtitle.setter
    def subtitle(self, value: str) -> None: ...
    @_property
    def should_constrain_to_root_bounds(self) -> bool: ...
    @should_constrain_to_root_bounds.setter
    def should_constrain_to_root_bounds(self, value: bool) -> None: ...
    @_property
    def preferred_placement(self) -> TeachingTipPlacementMode: ...
    @preferred_placement.setter
    def preferred_placement(self, value: TeachingTipPlacementMode) -> None: ...
    @_property
    def placement_margin(self) -> microsoft_ui_xaml.Thickness: ...
    @placement_margin.setter
    def placement_margin(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def is_open(self) -> bool: ...
    @is_open.setter
    def is_open(self, value: bool) -> None: ...
    @_property
    def is_light_dismiss_enabled(self) -> bool: ...
    @is_light_dismiss_enabled.setter
    def is_light_dismiss_enabled(self, value: bool) -> None: ...
    @_property
    def icon_source(self) -> typing.Optional[IconSource]: ...
    @icon_source.setter
    def icon_source(self, value: typing.Optional[IconSource]) -> None: ...
    @_property
    def hero_content_placement(self) -> TeachingTipHeroContentPlacementMode: ...
    @hero_content_placement.setter
    def hero_content_placement(self, value: TeachingTipHeroContentPlacementMode) -> None: ...
    @_property
    def hero_content(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @hero_content.setter
    def hero_content(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def close_button_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @close_button_style.setter
    def close_button_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def close_button_content(self) -> typing.Optional[winrt.system.Object]: ...
    @close_button_content.setter
    def close_button_content(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def close_button_command_parameter(self) -> typing.Optional[winrt.system.Object]: ...
    @close_button_command_parameter.setter
    def close_button_command_parameter(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def close_button_command(self) -> typing.Optional[microsoft_ui_xaml_input.ICommand]: ...
    @close_button_command.setter
    def close_button_command(self, value: typing.Optional[microsoft_ui_xaml_input.ICommand]) -> None: ...
    @_property
    def action_button_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @action_button_style.setter
    def action_button_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def action_button_content(self) -> typing.Optional[winrt.system.Object]: ...
    @action_button_content.setter
    def action_button_content(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def action_button_command_parameter(self) -> typing.Optional[winrt.system.Object]: ...
    @action_button_command_parameter.setter
    def action_button_command_parameter(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def action_button_command(self) -> typing.Optional[microsoft_ui_xaml_input.ICommand]: ...
    @action_button_command.setter
    def action_button_command(self, value: typing.Optional[microsoft_ui_xaml_input.ICommand]) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[TeachingTipTemplateSettings]: ...

@typing.final
class TeachingTipClosedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TeachingTipClosedEventArgs: ...
    @_property
    def reason(self) -> TeachingTipCloseReason: ...

@typing.final
class TeachingTipClosingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TeachingTipClosingEventArgs: ...
    def get_deferral(self) -> typing.Optional[windows_foundation.Deferral]: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def reason(self) -> TeachingTipCloseReason: ...

@typing.final
class TeachingTipTemplateSettings_Static(type):
    @_property
    def icon_element_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def top_left_highlight_margin_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def top_right_highlight_margin_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class TeachingTipTemplateSettings(winrt.system.Object, metaclass=TeachingTipTemplateSettings_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TeachingTipTemplateSettings: ...
    def __new__(cls: typing.Type[TeachingTipTemplateSettings]) -> TeachingTipTemplateSettings: ...
    @_property
    def top_right_highlight_margin(self) -> microsoft_ui_xaml.Thickness: ...
    @top_right_highlight_margin.setter
    def top_right_highlight_margin(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def top_left_highlight_margin(self) -> microsoft_ui_xaml.Thickness: ...
    @top_left_highlight_margin.setter
    def top_left_highlight_margin(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def icon_element(self) -> typing.Optional[IconElement]: ...
    @icon_element.setter
    def icon_element(self, value: typing.Optional[IconElement]) -> None: ...

@typing.final
class TextBlock_Static(type):
    @_property
    def character_spacing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_family_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_size_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_stretch_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def font_weight_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_text_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_color_font_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_text_scale_factor_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_text_selection_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_text_trimmed_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def line_height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def line_stacking_strategy_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_lines_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def optical_margin_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def padding_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_flyout_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_highlight_color_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_decorations_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_line_bounds_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_reading_order_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_trimming_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_wrapping_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class TextBlock(winrt.system.Object, metaclass=TextBlock_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TextBlock: ...
    def __new__(cls: typing.Type[TextBlock]) -> TextBlock: ...
    def copy_selection_to_clipboard(self) -> None: ...
    def get_alpha_mask(self) -> typing.Optional[microsoft_ui_composition.CompositionBrush]: ...
    def select(self, start: typing.Optional[microsoft_ui_xaml_documents.TextPointer], end: typing.Optional[microsoft_ui_xaml_documents.TextPointer], /) -> None: ...
    def select_all(self) -> None: ...
    def add_context_menu_opening(self, handler: typing.Optional[ContextMenuOpeningEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_context_menu_opening(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_is_text_trimmed_changed(self, handler: windows_foundation.TypedEventHandler[TextBlock, IsTextTrimmedChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_is_text_trimmed_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_selection_changed(self, handler: typing.Optional[microsoft_ui_xaml.RoutedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_selection_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_color_font_enabled(self) -> bool: ...
    @is_color_font_enabled.setter
    def is_color_font_enabled(self, value: bool) -> None: ...
    @_property
    def line_height(self) -> winrt.system.Double: ...
    @line_height.setter
    def line_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def horizontal_text_alignment(self) -> microsoft_ui_xaml.TextAlignment: ...
    @horizontal_text_alignment.setter
    def horizontal_text_alignment(self, value: microsoft_ui_xaml.TextAlignment) -> None: ...
    @_property
    def foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @foreground.setter
    def foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def font_weight(self) -> windows_ui_text.FontWeight: ...
    @font_weight.setter
    def font_weight(self, value: windows_ui_text.FontWeight) -> None: ...
    @_property
    def font_style(self) -> windows_ui_text.FontStyle: ...
    @font_style.setter
    def font_style(self, value: windows_ui_text.FontStyle) -> None: ...
    @_property
    def font_stretch(self) -> windows_ui_text.FontStretch: ...
    @font_stretch.setter
    def font_stretch(self, value: windows_ui_text.FontStretch) -> None: ...
    @_property
    def font_size(self) -> winrt.system.Double: ...
    @font_size.setter
    def font_size(self, value: winrt.system.Double) -> None: ...
    @_property
    def font_family(self) -> typing.Optional[microsoft_ui_xaml_media.FontFamily]: ...
    @font_family.setter
    def font_family(self, value: typing.Optional[microsoft_ui_xaml_media.FontFamily]) -> None: ...
    @_property
    def is_text_selection_enabled(self) -> bool: ...
    @is_text_selection_enabled.setter
    def is_text_selection_enabled(self, value: bool) -> None: ...
    @_property
    def is_text_scale_factor_enabled(self) -> bool: ...
    @is_text_scale_factor_enabled.setter
    def is_text_scale_factor_enabled(self, value: bool) -> None: ...
    @_property
    def character_spacing(self) -> winrt.system.Int32: ...
    @character_spacing.setter
    def character_spacing(self, value: winrt.system.Int32) -> None: ...
    @_property
    def text_wrapping(self) -> microsoft_ui_xaml.TextWrapping: ...
    @text_wrapping.setter
    def text_wrapping(self, value: microsoft_ui_xaml.TextWrapping) -> None: ...
    @_property
    def line_stacking_strategy(self) -> microsoft_ui_xaml.LineStackingStrategy: ...
    @line_stacking_strategy.setter
    def line_stacking_strategy(self, value: microsoft_ui_xaml.LineStackingStrategy) -> None: ...
    @_property
    def text_trimming(self) -> microsoft_ui_xaml.TextTrimming: ...
    @text_trimming.setter
    def text_trimming(self, value: microsoft_ui_xaml.TextTrimming) -> None: ...
    @_property
    def text_reading_order(self) -> microsoft_ui_xaml.TextReadingOrder: ...
    @text_reading_order.setter
    def text_reading_order(self, value: microsoft_ui_xaml.TextReadingOrder) -> None: ...
    @_property
    def text_line_bounds(self) -> microsoft_ui_xaml.TextLineBounds: ...
    @text_line_bounds.setter
    def text_line_bounds(self, value: microsoft_ui_xaml.TextLineBounds) -> None: ...
    @_property
    def text_decorations(self) -> windows_ui_text.TextDecorations: ...
    @text_decorations.setter
    def text_decorations(self, value: windows_ui_text.TextDecorations) -> None: ...
    @_property
    def text_alignment(self) -> microsoft_ui_xaml.TextAlignment: ...
    @text_alignment.setter
    def text_alignment(self, value: microsoft_ui_xaml.TextAlignment) -> None: ...
    @_property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> None: ...
    @_property
    def selection_highlight_color(self) -> typing.Optional[microsoft_ui_xaml_media.SolidColorBrush]: ...
    @selection_highlight_color.setter
    def selection_highlight_color(self, value: typing.Optional[microsoft_ui_xaml_media.SolidColorBrush]) -> None: ...
    @_property
    def selection_flyout(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]: ...
    @selection_flyout.setter
    def selection_flyout(self, value: typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]) -> None: ...
    @_property
    def padding(self) -> microsoft_ui_xaml.Thickness: ...
    @padding.setter
    def padding(self, value: microsoft_ui_xaml.Thickness) -> None: ...
    @_property
    def optical_margin_alignment(self) -> microsoft_ui_xaml.OpticalMarginAlignment: ...
    @optical_margin_alignment.setter
    def optical_margin_alignment(self, value: microsoft_ui_xaml.OpticalMarginAlignment) -> None: ...
    @_property
    def max_lines(self) -> winrt.system.Int32: ...
    @max_lines.setter
    def max_lines(self, value: winrt.system.Int32) -> None: ...
    @_property
    def content_end(self) -> typing.Optional[microsoft_ui_xaml_documents.TextPointer]: ...
    @_property
    def content_start(self) -> typing.Optional[microsoft_ui_xaml_documents.TextPointer]: ...
    @_property
    def inlines(self) -> typing.Optional[microsoft_ui_xaml_documents.InlineCollection]: ...
    @_property
    def is_text_trimmed(self) -> bool: ...
    @_property
    def selected_text(self) -> str: ...
    @_property
    def selection_end(self) -> typing.Optional[microsoft_ui_xaml_documents.TextPointer]: ...
    @_property
    def selection_start(self) -> typing.Optional[microsoft_ui_xaml_documents.TextPointer]: ...
    @_property
    def text_highlighters(self) -> typing.Optional[windows_foundation_collections.IVector[microsoft_ui_xaml_documents.TextHighlighter]]: ...
    @_property
    def baseline_offset(self) -> winrt.system.Double: ...

@typing.final
class TextBox_Static(type):
    @_property
    def accepts_return_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def can_paste_clipboard_content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def can_redo_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def can_undo_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def character_casing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def description_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def desired_candidate_window_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_text_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def input_scope_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_color_font_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_read_only_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_spell_check_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_text_prediction_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def max_length_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def placeholder_foreground_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def placeholder_text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def prevent_keyboard_display_on_programmatic_focus_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def proofing_menu_flyout_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_flyout_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_highlight_color_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_highlight_color_when_not_focused_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_reading_order_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def text_wrapping_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class TextBox(winrt.system.Object, metaclass=TextBox_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TextBox: ...
    def __new__(cls: typing.Type[TextBox]) -> TextBox: ...
    def clear_undo_redo_history(self) -> None: ...
    def copy_selection_to_clipboard(self) -> None: ...
    def cut_selection_to_clipboard(self) -> None: ...
    def get_linguistic_alternatives_async(self) -> windows_foundation.IAsyncOperation[windows_foundation_collections.IVectorView[str]]: ...
    def get_rect_from_character_index(self, char_index: winrt.system.Int32, trailing_edge: bool, /) -> windows_foundation.Rect: ...
    def paste_from_clipboard(self) -> None: ...
    def redo(self) -> None: ...
    def select(self, start: winrt.system.Int32, length: winrt.system.Int32, /) -> None: ...
    def select_all(self) -> None: ...
    def undo(self) -> None: ...
    def add_before_text_changing(self, handler: windows_foundation.TypedEventHandler[TextBox, TextBoxBeforeTextChangingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_before_text_changing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_candidate_window_bounds_changed(self, handler: windows_foundation.TypedEventHandler[TextBox, CandidateWindowBoundsChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_candidate_window_bounds_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_context_menu_opening(self, handler: typing.Optional[ContextMenuOpeningEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_context_menu_opening(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_copying_to_clipboard(self, handler: windows_foundation.TypedEventHandler[TextBox, TextControlCopyingToClipboardEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_copying_to_clipboard(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_cutting_to_clipboard(self, handler: windows_foundation.TypedEventHandler[TextBox, TextControlCuttingToClipboardEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_cutting_to_clipboard(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_paste(self, handler: typing.Optional[TextControlPasteEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_paste(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_selection_changed(self, handler: typing.Optional[microsoft_ui_xaml.RoutedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_selection_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_selection_changing(self, handler: windows_foundation.TypedEventHandler[TextBox, TextBoxSelectionChangingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_selection_changing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_text_changed(self, handler: typing.Optional[TextChangedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_text_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_text_changing(self, handler: windows_foundation.TypedEventHandler[TextBox, TextBoxTextChangingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_text_changing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_text_composition_changed(self, handler: windows_foundation.TypedEventHandler[TextBox, TextCompositionChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_text_composition_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_text_composition_ended(self, handler: windows_foundation.TypedEventHandler[TextBox, TextCompositionEndedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_text_composition_ended(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_text_composition_started(self, handler: windows_foundation.TypedEventHandler[TextBox, TextCompositionStartedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_text_composition_started(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def placeholder_text(self) -> str: ...
    @placeholder_text.setter
    def placeholder_text(self, value: str) -> None: ...
    @_property
    def placeholder_foreground(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @placeholder_foreground.setter
    def placeholder_foreground(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def max_length(self) -> winrt.system.Int32: ...
    @max_length.setter
    def max_length(self, value: winrt.system.Int32) -> None: ...
    @_property
    def is_text_prediction_enabled(self) -> bool: ...
    @is_text_prediction_enabled.setter
    def is_text_prediction_enabled(self, value: bool) -> None: ...
    @_property
    def is_spell_check_enabled(self) -> bool: ...
    @is_spell_check_enabled.setter
    def is_spell_check_enabled(self, value: bool) -> None: ...
    @_property
    def is_read_only(self) -> bool: ...
    @is_read_only.setter
    def is_read_only(self, value: bool) -> None: ...
    @_property
    def is_color_font_enabled(self) -> bool: ...
    @is_color_font_enabled.setter
    def is_color_font_enabled(self, value: bool) -> None: ...
    @_property
    def input_scope(self) -> typing.Optional[microsoft_ui_xaml_input.InputScope]: ...
    @input_scope.setter
    def input_scope(self, value: typing.Optional[microsoft_ui_xaml_input.InputScope]) -> None: ...
    @_property
    def horizontal_text_alignment(self) -> microsoft_ui_xaml.TextAlignment: ...
    @horizontal_text_alignment.setter
    def horizontal_text_alignment(self, value: microsoft_ui_xaml.TextAlignment) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def desired_candidate_window_alignment(self) -> CandidateWindowAlignment: ...
    @desired_candidate_window_alignment.setter
    def desired_candidate_window_alignment(self, value: CandidateWindowAlignment) -> None: ...
    @_property
    def description(self) -> typing.Optional[winrt.system.Object]: ...
    @description.setter
    def description(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def character_casing(self) -> CharacterCasing: ...
    @character_casing.setter
    def character_casing(self, value: CharacterCasing) -> None: ...
    @_property
    def prevent_keyboard_display_on_programmatic_focus(self) -> bool: ...
    @prevent_keyboard_display_on_programmatic_focus.setter
    def prevent_keyboard_display_on_programmatic_focus(self, value: bool) -> None: ...
    @_property
    def accepts_return(self) -> bool: ...
    @accepts_return.setter
    def accepts_return(self, value: bool) -> None: ...
    @_property
    def selected_text(self) -> str: ...
    @selected_text.setter
    def selected_text(self, value: str) -> None: ...
    @_property
    def text_wrapping(self) -> microsoft_ui_xaml.TextWrapping: ...
    @text_wrapping.setter
    def text_wrapping(self, value: microsoft_ui_xaml.TextWrapping) -> None: ...
    @_property
    def text_reading_order(self) -> microsoft_ui_xaml.TextReadingOrder: ...
    @text_reading_order.setter
    def text_reading_order(self, value: microsoft_ui_xaml.TextReadingOrder) -> None: ...
    @_property
    def text_alignment(self) -> microsoft_ui_xaml.TextAlignment: ...
    @text_alignment.setter
    def text_alignment(self, value: microsoft_ui_xaml.TextAlignment) -> None: ...
    @_property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> None: ...
    @_property
    def selection_start(self) -> winrt.system.Int32: ...
    @selection_start.setter
    def selection_start(self, value: winrt.system.Int32) -> None: ...
    @_property
    def selection_length(self) -> winrt.system.Int32: ...
    @selection_length.setter
    def selection_length(self, value: winrt.system.Int32) -> None: ...
    @_property
    def selection_highlight_color_when_not_focused(self) -> typing.Optional[microsoft_ui_xaml_media.SolidColorBrush]: ...
    @selection_highlight_color_when_not_focused.setter
    def selection_highlight_color_when_not_focused(self, value: typing.Optional[microsoft_ui_xaml_media.SolidColorBrush]) -> None: ...
    @_property
    def selection_highlight_color(self) -> typing.Optional[microsoft_ui_xaml_media.SolidColorBrush]: ...
    @selection_highlight_color.setter
    def selection_highlight_color(self, value: typing.Optional[microsoft_ui_xaml_media.SolidColorBrush]) -> None: ...
    @_property
    def selection_flyout(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]: ...
    @selection_flyout.setter
    def selection_flyout(self, value: typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]) -> None: ...
    @_property
    def can_undo(self) -> bool: ...
    @_property
    def can_redo(self) -> bool: ...
    @_property
    def can_paste_clipboard_content(self) -> bool: ...
    @_property
    def proofing_menu_flyout(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.FlyoutBase]: ...

@typing.final
class TextBoxBeforeTextChangingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TextBoxBeforeTextChangingEventArgs: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def new_text(self) -> str: ...

@typing.final
class TextBoxSelectionChangingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TextBoxSelectionChangingEventArgs: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def selection_length(self) -> winrt.system.Int32: ...
    @_property
    def selection_start(self) -> winrt.system.Int32: ...

@typing.final
class TextBoxTextChangingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TextBoxTextChangingEventArgs: ...
    @_property
    def is_content_changing(self) -> bool: ...

@typing.final
class TextChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TextChangedEventArgs: ...

@typing.final
class TextCommandBarFlyout(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TextCommandBarFlyout: ...
    def __new__(cls: typing.Type[TextCommandBarFlyout]) -> TextCommandBarFlyout: ...

@typing.final
class TextCompositionChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TextCompositionChangedEventArgs: ...
    @_property
    def length(self) -> winrt.system.Int32: ...
    @_property
    def start_index(self) -> winrt.system.Int32: ...

@typing.final
class TextCompositionEndedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TextCompositionEndedEventArgs: ...
    @_property
    def length(self) -> winrt.system.Int32: ...
    @_property
    def start_index(self) -> winrt.system.Int32: ...

@typing.final
class TextCompositionStartedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TextCompositionStartedEventArgs: ...
    @_property
    def length(self) -> winrt.system.Int32: ...
    @_property
    def start_index(self) -> winrt.system.Int32: ...

@typing.final
class TextControlCopyingToClipboardEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TextControlCopyingToClipboardEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class TextControlCuttingToClipboardEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TextControlCuttingToClipboardEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class TextControlPasteEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TextControlPasteEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class TimePickedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TimePickedEventArgs: ...
    def __new__(cls: typing.Type[TimePickedEventArgs]) -> TimePickedEventArgs: ...
    @_property
    def new_time(self) -> datetime.timedelta: ...
    @_property
    def old_time(self) -> datetime.timedelta: ...

@typing.final
class TimePicker_Static(type):
    @_property
    def clock_identifier_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def light_dismiss_overlay_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def minute_increment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selected_time_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def time_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class TimePicker(winrt.system.Object, metaclass=TimePicker_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TimePicker: ...
    def __new__(cls: typing.Type[TimePicker]) -> TimePicker: ...
    def add_selected_time_changed(self, handler: windows_foundation.TypedEventHandler[TimePicker, TimePickerSelectedValueChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_selected_time_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_time_changed(self, handler: windows_foundation.EventHandler[TimePickerValueChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_time_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def time(self) -> datetime.timedelta: ...
    @time.setter
    def time(self, value: datetime.timedelta) -> None: ...
    @_property
    def selected_time(self) -> typing.Optional[typing.Optional[datetime.timedelta]]: ...
    @selected_time.setter
    def selected_time(self, value: typing.Optional[typing.Optional[datetime.timedelta]]) -> None: ...
    @_property
    def minute_increment(self) -> winrt.system.Int32: ...
    @minute_increment.setter
    def minute_increment(self, value: winrt.system.Int32) -> None: ...
    @_property
    def light_dismiss_overlay_mode(self) -> LightDismissOverlayMode: ...
    @light_dismiss_overlay_mode.setter
    def light_dismiss_overlay_mode(self, value: LightDismissOverlayMode) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def clock_identifier(self) -> str: ...
    @clock_identifier.setter
    def clock_identifier(self, value: str) -> None: ...

@typing.final
class TimePickerFlyout_Static(type):
    @_property
    def clock_identifier_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def minute_increment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def time_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class TimePickerFlyout(winrt.system.Object, metaclass=TimePickerFlyout_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TimePickerFlyout: ...
    def __new__(cls: typing.Type[TimePickerFlyout]) -> TimePickerFlyout: ...
    def show_at_async(self, target: typing.Optional[microsoft_ui_xaml.FrameworkElement], /) -> windows_foundation.IAsyncOperation[typing.Optional[datetime.timedelta]]: ...
    def add_time_picked(self, handler: windows_foundation.TypedEventHandler[TimePickerFlyout, TimePickedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_time_picked(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def time(self) -> datetime.timedelta: ...
    @time.setter
    def time(self, value: datetime.timedelta) -> None: ...
    @_property
    def minute_increment(self) -> winrt.system.Int32: ...
    @minute_increment.setter
    def minute_increment(self, value: winrt.system.Int32) -> None: ...
    @_property
    def clock_identifier(self) -> str: ...
    @clock_identifier.setter
    def clock_identifier(self, value: str) -> None: ...

@typing.final
class TimePickerFlyoutPresenter_Static(type):
    @_property
    def is_default_shadow_enabled_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class TimePickerFlyoutPresenter(winrt.system.Object, metaclass=TimePickerFlyoutPresenter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TimePickerFlyoutPresenter: ...
    @_property
    def is_default_shadow_enabled(self) -> bool: ...
    @is_default_shadow_enabled.setter
    def is_default_shadow_enabled(self, value: bool) -> None: ...

@typing.final
class TimePickerSelectedValueChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TimePickerSelectedValueChangedEventArgs: ...
    @_property
    def new_time(self) -> typing.Optional[typing.Optional[datetime.timedelta]]: ...
    @_property
    def old_time(self) -> typing.Optional[typing.Optional[datetime.timedelta]]: ...

@typing.final
class TimePickerValueChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TimePickerValueChangedEventArgs: ...
    @_property
    def new_time(self) -> datetime.timedelta: ...
    @_property
    def old_time(self) -> datetime.timedelta: ...

@typing.final
class ToggleMenuFlyoutItem_Static(type):
    @_property
    def is_checked_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ToggleMenuFlyoutItem(winrt.system.Object, metaclass=ToggleMenuFlyoutItem_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToggleMenuFlyoutItem: ...
    def __new__(cls: typing.Type[ToggleMenuFlyoutItem]) -> ToggleMenuFlyoutItem: ...
    @_property
    def is_checked(self) -> bool: ...
    @is_checked.setter
    def is_checked(self, value: bool) -> None: ...

@typing.final
class ToggleSplitButton_Static(type):
    @_property
    def is_checked_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ToggleSplitButton(winrt.system.Object, metaclass=ToggleSplitButton_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToggleSplitButton: ...
    def __new__(cls: typing.Type[ToggleSplitButton]) -> ToggleSplitButton: ...
    def add_is_checked_changed(self, handler: windows_foundation.TypedEventHandler[ToggleSplitButton, ToggleSplitButtonIsCheckedChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_is_checked_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_checked(self) -> bool: ...
    @is_checked.setter
    def is_checked(self, value: bool) -> None: ...

@typing.final
class ToggleSplitButtonIsCheckedChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToggleSplitButtonIsCheckedChangedEventArgs: ...

@typing.final
class ToggleSwitch_Static(type):
    @_property
    def header_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def header_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_on_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def off_content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def off_content_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def on_content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def on_content_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ToggleSwitch(winrt.system.Object, metaclass=ToggleSwitch_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToggleSwitch: ...
    def __new__(cls: typing.Type[ToggleSwitch]) -> ToggleSwitch: ...
    def add_toggled(self, handler: typing.Optional[microsoft_ui_xaml.RoutedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_toggled(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def on_content_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @on_content_template.setter
    def on_content_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def on_content(self) -> typing.Optional[winrt.system.Object]: ...
    @on_content.setter
    def on_content(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def off_content_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @off_content_template.setter
    def off_content_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def off_content(self) -> typing.Optional[winrt.system.Object]: ...
    @off_content.setter
    def off_content(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def is_on(self) -> bool: ...
    @is_on.setter
    def is_on(self, value: bool) -> None: ...
    @_property
    def header_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @header_template.setter
    def header_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def header(self) -> typing.Optional[winrt.system.Object]: ...
    @header.setter
    def header(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.ToggleSwitchTemplateSettings]: ...

@typing.final
class ToolTip_Static(type):
    @_property
    def horizontal_offset_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_open_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def placement_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def placement_rect_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def placement_target_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_offset_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ToolTip(winrt.system.Object, metaclass=ToolTip_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToolTip: ...
    def __new__(cls: typing.Type[ToolTip]) -> ToolTip: ...
    def add_closed(self, handler: typing.Optional[microsoft_ui_xaml.RoutedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_opened(self, handler: typing.Optional[microsoft_ui_xaml.RoutedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_opened(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def vertical_offset(self) -> winrt.system.Double: ...
    @vertical_offset.setter
    def vertical_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def placement_target(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @placement_target.setter
    def placement_target(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def placement_rect(self) -> typing.Optional[typing.Optional[windows_foundation.Rect]]: ...
    @placement_rect.setter
    def placement_rect(self, value: typing.Optional[typing.Optional[windows_foundation.Rect]]) -> None: ...
    @_property
    def placement(self) -> microsoft_ui_xaml_controls_primitives.PlacementMode: ...
    @placement.setter
    def placement(self, value: microsoft_ui_xaml_controls_primitives.PlacementMode) -> None: ...
    @_property
    def is_open(self) -> bool: ...
    @is_open.setter
    def is_open(self, value: bool) -> None: ...
    @_property
    def horizontal_offset(self) -> winrt.system.Double: ...
    @horizontal_offset.setter
    def horizontal_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[microsoft_ui_xaml_controls_primitives.ToolTipTemplateSettings]: ...

@typing.final
class ToolTipService_Static(type):
    def get_placement(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> microsoft_ui_xaml_controls_primitives.PlacementMode: ...
    def get_placement_target(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    def get_tool_tip(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> typing.Optional[winrt.system.Object]: ...
    def set_placement(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], value: microsoft_ui_xaml_controls_primitives.PlacementMode, /) -> None: ...
    def set_placement_target(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], value: typing.Optional[microsoft_ui_xaml.UIElement], /) -> None: ...
    def set_tool_tip(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], value: typing.Optional[winrt.system.Object], /) -> None: ...
    @_property
    def placement_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def placement_target_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tool_tip_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class ToolTipService(winrt.system.Object, metaclass=ToolTipService_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToolTipService: ...

@typing.final
class TreeView_Static(type):
    @_property
    def selected_item_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def selection_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def can_drag_items_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def can_reorder_items_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_container_style_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_container_style_selector_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_container_transitions_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_template_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_template_selector_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def items_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class TreeView(winrt.system.Object, metaclass=TreeView_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TreeView: ...
    def __new__(cls: typing.Type[TreeView]) -> TreeView: ...
    def collapse(self, value: typing.Optional[TreeViewNode], /) -> None: ...
    def container_from_item(self, item: typing.Optional[winrt.system.Object], /) -> typing.Optional[microsoft_ui_xaml.DependencyObject]: ...
    def container_from_node(self, node: typing.Optional[TreeViewNode], /) -> typing.Optional[microsoft_ui_xaml.DependencyObject]: ...
    def expand(self, value: typing.Optional[TreeViewNode], /) -> None: ...
    def item_from_container(self, container: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> typing.Optional[winrt.system.Object]: ...
    def node_from_container(self, container: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> typing.Optional[TreeViewNode]: ...
    def select_all(self) -> None: ...
    def add_collapsed(self, handler: windows_foundation.TypedEventHandler[TreeView, TreeViewCollapsedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_collapsed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_expanding(self, handler: windows_foundation.TypedEventHandler[TreeView, TreeViewExpandingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_expanding(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_item_invoked(self, handler: windows_foundation.TypedEventHandler[TreeView, TreeViewItemInvokedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_item_invoked(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drag_items_completed(self, handler: windows_foundation.TypedEventHandler[TreeView, TreeViewDragItemsCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drag_items_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drag_items_starting(self, handler: windows_foundation.TypedEventHandler[TreeView, TreeViewDragItemsStartingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drag_items_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_selection_changed(self, handler: windows_foundation.TypedEventHandler[TreeView, TreeViewSelectionChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_selection_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def selection_mode(self) -> TreeViewSelectionMode: ...
    @selection_mode.setter
    def selection_mode(self, value: TreeViewSelectionMode) -> None: ...
    @_property
    def root_nodes(self) -> typing.Optional[windows_foundation_collections.IVector[TreeViewNode]]: ...
    @_property
    def selected_nodes(self) -> typing.Optional[windows_foundation_collections.IVector[TreeViewNode]]: ...
    @_property
    def selected_node(self) -> typing.Optional[TreeViewNode]: ...
    @selected_node.setter
    def selected_node(self, value: typing.Optional[TreeViewNode]) -> None: ...
    @_property
    def selected_item(self) -> typing.Optional[winrt.system.Object]: ...
    @selected_item.setter
    def selected_item(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def items_source(self) -> typing.Optional[winrt.system.Object]: ...
    @items_source.setter
    def items_source(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def item_template_selector(self) -> typing.Optional[DataTemplateSelector]: ...
    @item_template_selector.setter
    def item_template_selector(self, value: typing.Optional[DataTemplateSelector]) -> None: ...
    @_property
    def item_template(self) -> typing.Optional[microsoft_ui_xaml.DataTemplate]: ...
    @item_template.setter
    def item_template(self, value: typing.Optional[microsoft_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def item_container_transitions(self) -> typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]: ...
    @item_container_transitions.setter
    def item_container_transitions(self, value: typing.Optional[microsoft_ui_xaml_media_animation.TransitionCollection]) -> None: ...
    @_property
    def item_container_style_selector(self) -> typing.Optional[StyleSelector]: ...
    @item_container_style_selector.setter
    def item_container_style_selector(self, value: typing.Optional[StyleSelector]) -> None: ...
    @_property
    def item_container_style(self) -> typing.Optional[microsoft_ui_xaml.Style]: ...
    @item_container_style.setter
    def item_container_style(self, value: typing.Optional[microsoft_ui_xaml.Style]) -> None: ...
    @_property
    def can_reorder_items(self) -> bool: ...
    @can_reorder_items.setter
    def can_reorder_items(self, value: bool) -> None: ...
    @_property
    def can_drag_items(self) -> bool: ...
    @can_drag_items.setter
    def can_drag_items(self, value: bool) -> None: ...
    @_property
    def selected_items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Object]]: ...

@typing.final
class TreeViewCollapsedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TreeViewCollapsedEventArgs: ...
    @_property
    def node(self) -> typing.Optional[TreeViewNode]: ...
    @_property
    def item(self) -> typing.Optional[winrt.system.Object]: ...

@typing.final
class TreeViewDragItemsCompletedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TreeViewDragItemsCompletedEventArgs: ...
    @_property
    def drop_result(self) -> windows_applicationmodel_datatransfer.DataPackageOperation: ...
    @_property
    def items(self) -> typing.Optional[windows_foundation_collections.IVectorView[winrt.system.Object]]: ...
    @_property
    def new_parent_item(self) -> typing.Optional[winrt.system.Object]: ...

@typing.final
class TreeViewDragItemsStartingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TreeViewDragItemsStartingEventArgs: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def data(self) -> typing.Optional[windows_applicationmodel_datatransfer.DataPackage]: ...
    @_property
    def items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Object]]: ...

@typing.final
class TreeViewExpandingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TreeViewExpandingEventArgs: ...
    @_property
    def node(self) -> typing.Optional[TreeViewNode]: ...
    @_property
    def item(self) -> typing.Optional[winrt.system.Object]: ...

@typing.final
class TreeViewItem_Static(type):
    @_property
    def collapsed_glyph_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def expanded_glyph_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def glyph_brush_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def glyph_opacity_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def glyph_size_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_expanded_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tree_view_item_template_settings_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def has_unrealized_children_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def items_source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class TreeViewItem(winrt.system.Object, metaclass=TreeViewItem_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TreeViewItem: ...
    def __new__(cls: typing.Type[TreeViewItem]) -> TreeViewItem: ...
    @_property
    def is_expanded(self) -> bool: ...
    @is_expanded.setter
    def is_expanded(self, value: bool) -> None: ...
    @_property
    def glyph_size(self) -> winrt.system.Double: ...
    @glyph_size.setter
    def glyph_size(self, value: winrt.system.Double) -> None: ...
    @_property
    def glyph_opacity(self) -> winrt.system.Double: ...
    @glyph_opacity.setter
    def glyph_opacity(self, value: winrt.system.Double) -> None: ...
    @_property
    def glyph_brush(self) -> typing.Optional[microsoft_ui_xaml_media.Brush]: ...
    @glyph_brush.setter
    def glyph_brush(self, value: typing.Optional[microsoft_ui_xaml_media.Brush]) -> None: ...
    @_property
    def expanded_glyph(self) -> str: ...
    @expanded_glyph.setter
    def expanded_glyph(self, value: str) -> None: ...
    @_property
    def collapsed_glyph(self) -> str: ...
    @collapsed_glyph.setter
    def collapsed_glyph(self, value: str) -> None: ...
    @_property
    def tree_view_item_template_settings(self) -> typing.Optional[TreeViewItemTemplateSettings]: ...
    @_property
    def items_source(self) -> typing.Optional[winrt.system.Object]: ...
    @items_source.setter
    def items_source(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def has_unrealized_children(self) -> bool: ...
    @has_unrealized_children.setter
    def has_unrealized_children(self, value: bool) -> None: ...

@typing.final
class TreeViewItemInvokedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TreeViewItemInvokedEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def invoked_item(self) -> typing.Optional[winrt.system.Object]: ...

@typing.final
class TreeViewItemTemplateSettings_Static(type):
    @_property
    def collapsed_glyph_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def drag_items_count_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def expanded_glyph_visibility_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def indentation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class TreeViewItemTemplateSettings(winrt.system.Object, metaclass=TreeViewItemTemplateSettings_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TreeViewItemTemplateSettings: ...
    def __new__(cls: typing.Type[TreeViewItemTemplateSettings]) -> TreeViewItemTemplateSettings: ...
    @_property
    def collapsed_glyph_visibility(self) -> microsoft_ui_xaml.Visibility: ...
    @_property
    def drag_items_count(self) -> winrt.system.Int32: ...
    @_property
    def expanded_glyph_visibility(self) -> microsoft_ui_xaml.Visibility: ...
    @_property
    def indentation(self) -> microsoft_ui_xaml.Thickness: ...

@typing.final
class TreeViewList(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TreeViewList: ...
    def __new__(cls: typing.Type[TreeViewList]) -> TreeViewList: ...

@typing.final
class TreeViewNode_Static(type):
    @_property
    def content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def depth_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def has_children_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_expanded_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class TreeViewNode(winrt.system.Object, metaclass=TreeViewNode_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TreeViewNode: ...
    def __new__(cls: typing.Type[TreeViewNode]) -> TreeViewNode: ...
    @_property
    def is_expanded(self) -> bool: ...
    @is_expanded.setter
    def is_expanded(self, value: bool) -> None: ...
    @_property
    def has_unrealized_children(self) -> bool: ...
    @has_unrealized_children.setter
    def has_unrealized_children(self, value: bool) -> None: ...
    @_property
    def content(self) -> typing.Optional[winrt.system.Object]: ...
    @content.setter
    def content(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def children(self) -> typing.Optional[windows_foundation_collections.IVector[TreeViewNode]]: ...
    @_property
    def depth(self) -> winrt.system.Int32: ...
    @_property
    def has_children(self) -> bool: ...
    @_property
    def parent(self) -> typing.Optional[TreeViewNode]: ...

@typing.final
class TreeViewSelectionChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TreeViewSelectionChangedEventArgs: ...
    @_property
    def added_items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Object]]: ...
    @_property
    def removed_items(self) -> typing.Optional[windows_foundation_collections.IVector[winrt.system.Object]]: ...

@typing.final
class TwoPaneView_Static(type):
    @_property
    def min_tall_mode_height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def min_wide_mode_width_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pane1_length_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pane1_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pane2_length_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pane2_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def pane_priority_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def tall_mode_configuration_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def wide_mode_configuration_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class TwoPaneView(winrt.system.Object, metaclass=TwoPaneView_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TwoPaneView: ...
    def __new__(cls: typing.Type[TwoPaneView]) -> TwoPaneView: ...
    def add_mode_changed(self, handler: windows_foundation.TypedEventHandler[TwoPaneView, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_mode_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def wide_mode_configuration(self) -> TwoPaneViewWideModeConfiguration: ...
    @wide_mode_configuration.setter
    def wide_mode_configuration(self, value: TwoPaneViewWideModeConfiguration) -> None: ...
    @_property
    def tall_mode_configuration(self) -> TwoPaneViewTallModeConfiguration: ...
    @tall_mode_configuration.setter
    def tall_mode_configuration(self, value: TwoPaneViewTallModeConfiguration) -> None: ...
    @_property
    def pane_priority(self) -> TwoPaneViewPriority: ...
    @pane_priority.setter
    def pane_priority(self, value: TwoPaneViewPriority) -> None: ...
    @_property
    def pane2_length(self) -> microsoft_ui_xaml.GridLength: ...
    @pane2_length.setter
    def pane2_length(self, value: microsoft_ui_xaml.GridLength) -> None: ...
    @_property
    def pane2(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @pane2.setter
    def pane2(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def pane1_length(self) -> microsoft_ui_xaml.GridLength: ...
    @pane1_length.setter
    def pane1_length(self, value: microsoft_ui_xaml.GridLength) -> None: ...
    @_property
    def pane1(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @pane1.setter
    def pane1(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...
    @_property
    def min_wide_mode_width(self) -> winrt.system.Double: ...
    @min_wide_mode_width.setter
    def min_wide_mode_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def min_tall_mode_height(self) -> winrt.system.Double: ...
    @min_tall_mode_height.setter
    def min_tall_mode_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def mode(self) -> TwoPaneViewMode: ...

@typing.final
class UIElementCollection(winrt.system.Object, winrt._winrt.MutableSequence[microsoft_ui_xaml.UIElement]):
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[microsoft_ui_xaml.UIElement]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> microsoft_ui_xaml.UIElement: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[microsoft_ui_xaml.UIElement]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: microsoft_ui_xaml.UIElement) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[microsoft_ui_xaml.UIElement]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UIElementCollection: ...
    def append(self, value: typing.Optional[microsoft_ui_xaml.UIElement], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[windows_foundation_collections.IIterator[microsoft_ui_xaml.UIElement]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[microsoft_ui_xaml.UIElement], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[windows_foundation_collections.IVectorView[microsoft_ui_xaml.UIElement]]: ...
    def index_of(self, value: typing.Optional[microsoft_ui_xaml.UIElement], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[microsoft_ui_xaml.UIElement], /) -> None: ...
    def move(self, old_index: winrt.system.UInt32, new_index: winrt.system.UInt32, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[microsoft_ui_xaml.UIElement], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[microsoft_ui_xaml.UIElement], /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class UniformGridLayout_Static(type):
    @_property
    def items_justification_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def items_stretch_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def maximum_rows_or_columns_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def min_column_spacing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def min_item_height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def min_item_width_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def min_row_spacing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def orientation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class UniformGridLayout(winrt.system.Object, metaclass=UniformGridLayout_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UniformGridLayout: ...
    def __new__(cls: typing.Type[UniformGridLayout]) -> UniformGridLayout: ...
    @_property
    def orientation(self) -> Orientation: ...
    @orientation.setter
    def orientation(self, value: Orientation) -> None: ...
    @_property
    def min_row_spacing(self) -> winrt.system.Double: ...
    @min_row_spacing.setter
    def min_row_spacing(self, value: winrt.system.Double) -> None: ...
    @_property
    def min_item_width(self) -> winrt.system.Double: ...
    @min_item_width.setter
    def min_item_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def min_item_height(self) -> winrt.system.Double: ...
    @min_item_height.setter
    def min_item_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def min_column_spacing(self) -> winrt.system.Double: ...
    @min_column_spacing.setter
    def min_column_spacing(self, value: winrt.system.Double) -> None: ...
    @_property
    def maximum_rows_or_columns(self) -> winrt.system.Int32: ...
    @maximum_rows_or_columns.setter
    def maximum_rows_or_columns(self, value: winrt.system.Int32) -> None: ...
    @_property
    def items_stretch(self) -> UniformGridLayoutItemsStretch: ...
    @items_stretch.setter
    def items_stretch(self, value: UniformGridLayoutItemsStretch) -> None: ...
    @_property
    def items_justification(self) -> UniformGridLayoutItemsJustification: ...
    @items_justification.setter
    def items_justification(self, value: UniformGridLayoutItemsJustification) -> None: ...

@typing.final
class UserControl_Static(type):
    @_property
    def content_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class UserControl(winrt.system.Object, metaclass=UserControl_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserControl: ...
    def __new__(cls: typing.Type[UserControl]) -> UserControl: ...
    @_property
    def content(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @content.setter
    def content(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...

@typing.final
class VariableSizedWrapGrid_Static(type):
    def get_column_span(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> winrt.system.Int32: ...
    def get_row_span(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> winrt.system.Int32: ...
    def set_column_span(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: winrt.system.Int32, /) -> None: ...
    def set_row_span(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], value: winrt.system.Int32, /) -> None: ...
    @_property
    def column_span_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def horizontal_children_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_width_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def maximum_rows_or_columns_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def orientation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def row_span_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_children_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class VariableSizedWrapGrid(winrt.system.Object, metaclass=VariableSizedWrapGrid_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VariableSizedWrapGrid: ...
    def __new__(cls: typing.Type[VariableSizedWrapGrid]) -> VariableSizedWrapGrid: ...
    @_property
    def vertical_children_alignment(self) -> microsoft_ui_xaml.VerticalAlignment: ...
    @vertical_children_alignment.setter
    def vertical_children_alignment(self, value: microsoft_ui_xaml.VerticalAlignment) -> None: ...
    @_property
    def orientation(self) -> Orientation: ...
    @orientation.setter
    def orientation(self, value: Orientation) -> None: ...
    @_property
    def maximum_rows_or_columns(self) -> winrt.system.Int32: ...
    @maximum_rows_or_columns.setter
    def maximum_rows_or_columns(self, value: winrt.system.Int32) -> None: ...
    @_property
    def item_width(self) -> winrt.system.Double: ...
    @item_width.setter
    def item_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def item_height(self) -> winrt.system.Double: ...
    @item_height.setter
    def item_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def horizontal_children_alignment(self) -> microsoft_ui_xaml.HorizontalAlignment: ...
    @horizontal_children_alignment.setter
    def horizontal_children_alignment(self, value: microsoft_ui_xaml.HorizontalAlignment) -> None: ...

@typing.final
class Viewbox_Static(type):
    @_property
    def stretch_direction_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def stretch_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class Viewbox(winrt.system.Object, metaclass=Viewbox_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Viewbox: ...
    def __new__(cls: typing.Type[Viewbox]) -> Viewbox: ...
    @_property
    def stretch_direction(self) -> StretchDirection: ...
    @stretch_direction.setter
    def stretch_direction(self, value: StretchDirection) -> None: ...
    @_property
    def stretch(self) -> microsoft_ui_xaml_media.Stretch: ...
    @stretch.setter
    def stretch(self, value: microsoft_ui_xaml_media.Stretch) -> None: ...
    @_property
    def child(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @child.setter
    def child(self, value: typing.Optional[microsoft_ui_xaml.UIElement]) -> None: ...

@typing.final
class VirtualizingLayout(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VirtualizingLayout: ...
    def __new__(cls: typing.Type[VirtualizingLayout]) -> VirtualizingLayout: ...

@typing.final
class VirtualizingLayoutContext(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VirtualizingLayoutContext: ...
    def __new__(cls: typing.Type[VirtualizingLayoutContext]) -> VirtualizingLayoutContext: ...
    def get_item_at(self, index: winrt.system.Int32, /) -> typing.Optional[winrt.system.Object]: ...
    @typing.overload
    def get_or_create_element_at(self, index: winrt.system.Int32, /) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    @typing.overload
    def get_or_create_element_at(self, index: winrt.system.Int32, options: ElementRealizationOptions, /) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...
    def recycle_element(self, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> None: ...
    @_property
    def layout_origin(self) -> windows_foundation.Point: ...
    @layout_origin.setter
    def layout_origin(self, value: windows_foundation.Point) -> None: ...
    @_property
    def item_count(self) -> winrt.system.Int32: ...
    @_property
    def realization_rect(self) -> windows_foundation.Rect: ...
    @_property
    def recommended_anchor_index(self) -> winrt.system.Int32: ...
    @_property
    def visible_rect(self) -> windows_foundation.Rect: ...

@typing.final
class VirtualizingPanel(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VirtualizingPanel: ...
    @_property
    def item_container_generator(self) -> typing.Optional[ItemContainerGenerator]: ...

@typing.final
class VirtualizingStackPanel_Static(type):
    def get_is_virtualizing(cls, o: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> bool: ...
    def get_virtualization_mode(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> VirtualizationMode: ...
    def set_virtualization_mode(cls, element: typing.Optional[microsoft_ui_xaml.DependencyObject], value: VirtualizationMode, /) -> None: ...
    @_property
    def are_scroll_snap_points_regular_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def is_virtualizing_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def orientation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def virtualization_mode_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class VirtualizingStackPanel(winrt.system.Object, metaclass=VirtualizingStackPanel_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VirtualizingStackPanel: ...
    def __new__(cls: typing.Type[VirtualizingStackPanel]) -> VirtualizingStackPanel: ...
    def add_clean_up_virtualized_item_event(self, handler: typing.Optional[CleanUpVirtualizedItemEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_clean_up_virtualized_item_event(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def orientation(self) -> Orientation: ...
    @orientation.setter
    def orientation(self, value: Orientation) -> None: ...
    @_property
    def are_scroll_snap_points_regular(self) -> bool: ...
    @are_scroll_snap_points_regular.setter
    def are_scroll_snap_points_regular(self, value: bool) -> None: ...

@typing.final
class WebView2_Static(type):
    @_property
    def can_go_back_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def can_go_forward_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def default_background_color_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def source_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class WebView2(winrt.system.Object, metaclass=WebView2_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebView2: ...
    def __new__(cls: typing.Type[WebView2]) -> WebView2: ...
    def close(self) -> None: ...
    @typing.overload
    def ensure_core_web_view2_async(self) -> windows_foundation.IAsyncAction: ...
    @typing.overload
    def ensure_core_web_view2_async(self, environment: typing.Optional[microsoft_web_webview2_core.CoreWebView2Environment], /) -> windows_foundation.IAsyncAction: ...
    @typing.overload
    def ensure_core_web_view2_async(self, environment: typing.Optional[microsoft_web_webview2_core.CoreWebView2Environment], controller_options: typing.Optional[microsoft_web_webview2_core.CoreWebView2ControllerOptions], /) -> windows_foundation.IAsyncAction: ...
    def execute_script_async(self, javascript_code: str, /) -> windows_foundation.IAsyncOperation[str]: ...
    def go_back(self) -> None: ...
    def go_forward(self) -> None: ...
    def navigate_to_string(self, html_content: str, /) -> None: ...
    def reload(self) -> None: ...
    def add_core_process_failed(self, handler: windows_foundation.TypedEventHandler[WebView2, microsoft_web_webview2_core.CoreWebView2ProcessFailedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_core_process_failed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_core_web_view2_initialized(self, handler: windows_foundation.TypedEventHandler[WebView2, CoreWebView2InitializedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_core_web_view2_initialized(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_navigation_completed(self, handler: windows_foundation.TypedEventHandler[WebView2, microsoft_web_webview2_core.CoreWebView2NavigationCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_navigation_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_navigation_starting(self, handler: windows_foundation.TypedEventHandler[WebView2, microsoft_web_webview2_core.CoreWebView2NavigationStartingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_navigation_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_web_message_received(self, handler: windows_foundation.TypedEventHandler[WebView2, microsoft_web_webview2_core.CoreWebView2WebMessageReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_web_message_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def source(self) -> typing.Optional[windows_foundation.Uri]: ...
    @source.setter
    def source(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def default_background_color(self) -> windows_ui.Color: ...
    @default_background_color.setter
    def default_background_color(self, value: windows_ui.Color) -> None: ...
    @_property
    def can_go_forward(self) -> bool: ...
    @can_go_forward.setter
    def can_go_forward(self, value: bool) -> None: ...
    @_property
    def can_go_back(self) -> bool: ...
    @can_go_back.setter
    def can_go_back(self, value: bool) -> None: ...
    @_property
    def core_web_view2(self) -> typing.Optional[microsoft_web_webview2_core.CoreWebView2]: ...

@typing.final
class WrapGrid_Static(type):
    @_property
    def horizontal_children_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_height_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def item_width_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def maximum_rows_or_columns_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def orientation_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...
    @_property
    def vertical_children_alignment_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class WrapGrid(winrt.system.Object, metaclass=WrapGrid_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WrapGrid: ...
    def __new__(cls: typing.Type[WrapGrid]) -> WrapGrid: ...
    @_property
    def vertical_children_alignment(self) -> microsoft_ui_xaml.VerticalAlignment: ...
    @vertical_children_alignment.setter
    def vertical_children_alignment(self, value: microsoft_ui_xaml.VerticalAlignment) -> None: ...
    @_property
    def orientation(self) -> Orientation: ...
    @orientation.setter
    def orientation(self, value: Orientation) -> None: ...
    @_property
    def maximum_rows_or_columns(self) -> winrt.system.Int32: ...
    @maximum_rows_or_columns.setter
    def maximum_rows_or_columns(self, value: winrt.system.Int32) -> None: ...
    @_property
    def item_width(self) -> winrt.system.Double: ...
    @item_width.setter
    def item_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def item_height(self) -> winrt.system.Double: ...
    @item_height.setter
    def item_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def horizontal_children_alignment(self) -> microsoft_ui_xaml.HorizontalAlignment: ...
    @horizontal_children_alignment.setter
    def horizontal_children_alignment(self, value: microsoft_ui_xaml.HorizontalAlignment) -> None: ...

@typing.final
class XamlControlsResources_Static(type):
    def ensure_reveal_lights(cls, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> None: ...
    @_property
    def use_compact_resources_property(cls) -> typing.Optional[microsoft_ui_xaml.DependencyProperty]: ...

@typing.final
class XamlControlsResources(winrt.system.Object, metaclass=XamlControlsResources_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XamlControlsResources: ...
    def __new__(cls: typing.Type[XamlControlsResources]) -> XamlControlsResources: ...
    @_property
    def use_compact_resources(self) -> bool: ...
    @use_compact_resources.setter
    def use_compact_resources(self, value: bool) -> None: ...

@typing.final
class IAnimatedVisual(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IAnimatedVisual: ...
    def close(self) -> None: ...
    @_property
    def duration(self) -> datetime.timedelta: ...
    @_property
    def root_visual(self) -> typing.Optional[microsoft_ui_composition.Visual]: ...
    @_property
    def size(self) -> windows_foundation_numerics.Vector2: ...

@typing.final
class IAnimatedVisual2(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IAnimatedVisual2: ...
    def close(self) -> None: ...
    def create_animations(self) -> None: ...
    def destroy_animations(self) -> None: ...
    @_property
    def duration(self) -> datetime.timedelta: ...
    @_property
    def root_visual(self) -> typing.Optional[microsoft_ui_composition.Visual]: ...
    @_property
    def size(self) -> windows_foundation_numerics.Vector2: ...

@typing.final
class IAnimatedVisualSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IAnimatedVisualSource: ...
    def try_create_animated_visual(self, compositor: typing.Optional[microsoft_ui_composition.Compositor], /) -> typing.Tuple[typing.Optional[IAnimatedVisual], typing.Optional[winrt.system.Object]]: ...

@typing.final
class IAnimatedVisualSource2(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IAnimatedVisualSource2: ...
    def set_color_property(self, property_name: str, value: windows_ui.Color, /) -> None: ...
    def try_create_animated_visual(self, compositor: typing.Optional[microsoft_ui_composition.Compositor], /) -> typing.Tuple[typing.Optional[IAnimatedVisual], typing.Optional[winrt.system.Object]]: ...
    @_property
    def markers(self) -> typing.Optional[windows_foundation_collections.IMapView[str, winrt.system.Double]]: ...

@typing.final
class IAnimatedVisualSource3(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IAnimatedVisualSource3: ...
    def try_create_animated_visual(self, compositor: typing.Optional[microsoft_ui_composition.Compositor], create_animations: bool, /) -> typing.Tuple[typing.Optional[IAnimatedVisual2], typing.Optional[winrt.system.Object]]: ...

@typing.final
class ICommandBarElement(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ICommandBarElement: ...
    @_property
    def dynamic_overflow_order(self) -> winrt.system.Int32: ...
    @dynamic_overflow_order.setter
    def dynamic_overflow_order(self, value: winrt.system.Int32) -> None: ...
    @_property
    def is_compact(self) -> bool: ...
    @is_compact.setter
    def is_compact(self, value: bool) -> None: ...
    @_property
    def is_in_overflow(self) -> bool: ...

@typing.final
class IDynamicAnimatedVisualSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IDynamicAnimatedVisualSource: ...
    def try_create_animated_visual(self, compositor: typing.Optional[microsoft_ui_composition.Compositor], /) -> typing.Tuple[typing.Optional[IAnimatedVisual], typing.Optional[winrt.system.Object]]: ...
    def add_animated_visual_invalidated(self, handler: windows_foundation.TypedEventHandler[IDynamicAnimatedVisualSource, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_animated_visual_invalidated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class IInsertionPanel(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IInsertionPanel: ...
    def get_insertion_indexes(self, position: windows_foundation.Point, /) -> typing.Tuple[winrt.system.Int32, winrt.system.Int32]: ...

@typing.final
class IItemContainerMapping(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IItemContainerMapping: ...
    def container_from_index(self, index: winrt.system.Int32, /) -> typing.Optional[microsoft_ui_xaml.DependencyObject]: ...
    def container_from_item(self, item: typing.Optional[winrt.system.Object], /) -> typing.Optional[microsoft_ui_xaml.DependencyObject]: ...
    def index_from_container(self, container: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> winrt.system.Int32: ...
    def item_from_container(self, container: typing.Optional[microsoft_ui_xaml.DependencyObject], /) -> typing.Optional[winrt.system.Object]: ...

@typing.final
class IKeyIndexMapping(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IKeyIndexMapping: ...
    def index_from_key(self, key: str, /) -> winrt.system.Int32: ...
    def key_from_index(self, index: winrt.system.Int32, /) -> str: ...

@typing.final
class INavigate(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INavigate: ...
    def navigate(self, source_page_type: windows_ui_xaml_interop.TypeName, /) -> bool: ...

@typing.final
class IScrollAnchorProvider(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IScrollAnchorProvider: ...
    def register_anchor_candidate(self, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> None: ...
    def unregister_anchor_candidate(self, element: typing.Optional[microsoft_ui_xaml.UIElement], /) -> None: ...
    @_property
    def current_anchor(self) -> typing.Optional[microsoft_ui_xaml.UIElement]: ...

@typing.final
class ISemanticZoomInformation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ISemanticZoomInformation: ...
    def complete_view_change(self) -> None: ...
    def complete_view_change_from(self, source: typing.Optional[SemanticZoomLocation], destination: typing.Optional[SemanticZoomLocation], /) -> None: ...
    def complete_view_change_to(self, source: typing.Optional[SemanticZoomLocation], destination: typing.Optional[SemanticZoomLocation], /) -> None: ...
    def initialize_view_change(self) -> None: ...
    def make_visible(self, item: typing.Optional[SemanticZoomLocation], /) -> None: ...
    def start_view_change_from(self, source: typing.Optional[SemanticZoomLocation], destination: typing.Optional[SemanticZoomLocation], /) -> None: ...
    def start_view_change_to(self, source: typing.Optional[SemanticZoomLocation], destination: typing.Optional[SemanticZoomLocation], /) -> None: ...
    @_property
    def is_active_view(self) -> bool: ...
    @is_active_view.setter
    def is_active_view(self, value: bool) -> None: ...
    @_property
    def is_zoomed_in_view(self) -> bool: ...
    @is_zoomed_in_view.setter
    def is_zoomed_in_view(self, value: bool) -> None: ...
    @_property
    def semantic_zoom_owner(self) -> typing.Optional[SemanticZoom]: ...
    @semantic_zoom_owner.setter
    def semantic_zoom_owner(self, value: typing.Optional[SemanticZoom]) -> None: ...

