# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.media.core as windows_media_core
import winrt.windows.storage.streams as windows_storage_streams
import winrt.windows.web.http as windows_web_http

from winrt.windows.media.streaming.adaptive import AdaptiveMediaSourceCreationStatus, AdaptiveMediaSourceDiagnosticType, AdaptiveMediaSourceDownloadBitrateChangedReason, AdaptiveMediaSourceResourceType

Self = typing.TypeVar('Self')

@typing.final
class AdaptiveMediaSource_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult> Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::CreateFromStreamAsync(Windows.Storage.Streams.IInputStream,Windows.Foundation.Uri,System.String)
    def create_from_stream_async(cls, stream: windows_storage_streams.ImplementsIInputStream, uri: windows_foundation.Uri, content_type: str, /) -> windows_foundation.IAsyncOperation[AdaptiveMediaSourceCreationResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult> Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::CreateFromStreamAsync(Windows.Storage.Streams.IInputStream,Windows.Foundation.Uri,System.String,Windows.Web.Http.HttpClient)
    def create_from_stream_with_downloader_async(cls, stream: windows_storage_streams.ImplementsIInputStream, uri: windows_foundation.Uri, content_type: str, http_client: windows_web_http.HttpClient, /) -> windows_foundation.IAsyncOperation[AdaptiveMediaSourceCreationResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult> Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::CreateFromUriAsync(Windows.Foundation.Uri)
    def create_from_uri_async(cls, uri: windows_foundation.Uri, /) -> windows_foundation.IAsyncOperation[AdaptiveMediaSourceCreationResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult> Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::CreateFromUriAsync(Windows.Foundation.Uri,Windows.Web.Http.HttpClient)
    def create_from_uri_with_downloader_async(cls, uri: windows_foundation.Uri, http_client: windows_web_http.HttpClient, /) -> windows_foundation.IAsyncOperation[AdaptiveMediaSourceCreationResult]: ...
    # System.Boolean Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::IsContentTypeSupported(System.String)
    def is_content_type_supported(cls, content_type: str, /) -> bool: ...

@typing.final
class AdaptiveMediaSource(winrt.system.Object, windows_foundation.ImplementsIClosable, windows_media_core.ImplementsIMediaSource, metaclass=AdaptiveMediaSource_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::Close()
    def close(self) -> None: ...
    # Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCorrelatedTimes Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::GetCorrelatedTimes()
    def get_correlated_times(self) -> AdaptiveMediaSourceCorrelatedTimes: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::add_DownloadBitrateChanged(Windows.Foundation.TypedEventHandler`2<Windows.Media.Streaming.Adaptive.AdaptiveMediaSource,Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadBitrateChangedEventArgs>)
    def add_download_bitrate_changed(self, handler: windows_foundation.TypedEventHandler[AdaptiveMediaSource, AdaptiveMediaSourceDownloadBitrateChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::remove_DownloadBitrateChanged(Windows.Foundation.EventRegistrationToken)
    def remove_download_bitrate_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::add_DownloadCompleted(Windows.Foundation.TypedEventHandler`2<Windows.Media.Streaming.Adaptive.AdaptiveMediaSource,Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadCompletedEventArgs>)
    def add_download_completed(self, handler: windows_foundation.TypedEventHandler[AdaptiveMediaSource, AdaptiveMediaSourceDownloadCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::remove_DownloadCompleted(Windows.Foundation.EventRegistrationToken)
    def remove_download_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::add_DownloadFailed(Windows.Foundation.TypedEventHandler`2<Windows.Media.Streaming.Adaptive.AdaptiveMediaSource,Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadFailedEventArgs>)
    def add_download_failed(self, handler: windows_foundation.TypedEventHandler[AdaptiveMediaSource, AdaptiveMediaSourceDownloadFailedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::remove_DownloadFailed(Windows.Foundation.EventRegistrationToken)
    def remove_download_failed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::add_DownloadRequested(Windows.Foundation.TypedEventHandler`2<Windows.Media.Streaming.Adaptive.AdaptiveMediaSource,Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedEventArgs>)
    def add_download_requested(self, handler: windows_foundation.TypedEventHandler[AdaptiveMediaSource, AdaptiveMediaSourceDownloadRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::remove_DownloadRequested(Windows.Foundation.EventRegistrationToken)
    def remove_download_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::add_PlaybackBitrateChanged(Windows.Foundation.TypedEventHandler`2<Windows.Media.Streaming.Adaptive.AdaptiveMediaSource,Windows.Media.Streaming.Adaptive.AdaptiveMediaSourcePlaybackBitrateChangedEventArgs>)
    def add_playback_bitrate_changed(self, handler: windows_foundation.TypedEventHandler[AdaptiveMediaSource, AdaptiveMediaSourcePlaybackBitrateChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::remove_PlaybackBitrateChanged(Windows.Foundation.EventRegistrationToken)
    def remove_playback_bitrate_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.UInt32 Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::get_InitialBitrate()
    @_property
    def initial_bitrate(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::put_InitialBitrate(System.UInt32)
    @initial_bitrate.setter
    def initial_bitrate(self, value: winrt.system.UInt32) -> None: ...
    # Windows.Foundation.TimeSpan Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::get_InboundBitsPerSecondWindow()
    @_property
    def inbound_bits_per_second_window(self) -> datetime.timedelta: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::put_InboundBitsPerSecondWindow(Windows.Foundation.TimeSpan)
    @inbound_bits_per_second_window.setter
    def inbound_bits_per_second_window(self, value: datetime.timedelta) -> None: ...
    # Windows.Foundation.IReference`1<System.UInt32> Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::get_DesiredMaxBitrate()
    @_property
    def desired_max_bitrate(self) -> typing.Optional[winrt.system.UInt32]: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::put_DesiredMaxBitrate(Windows.Foundation.IReference`1<System.UInt32>)
    @desired_max_bitrate.setter
    def desired_max_bitrate(self, value: typing.Optional[winrt.system.UInt32]) -> None: ...
    # Windows.Foundation.TimeSpan Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::get_DesiredLiveOffset()
    @_property
    def desired_live_offset(self) -> datetime.timedelta: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::put_DesiredLiveOffset(Windows.Foundation.TimeSpan)
    @desired_live_offset.setter
    def desired_live_offset(self, value: datetime.timedelta) -> None: ...
    # Windows.Foundation.IReference`1<System.UInt32> Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::get_DesiredMinBitrate()
    @_property
    def desired_min_bitrate(self) -> typing.Optional[winrt.system.UInt32]: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::put_DesiredMinBitrate(Windows.Foundation.IReference`1<System.UInt32>)
    @desired_min_bitrate.setter
    def desired_min_bitrate(self, value: typing.Optional[winrt.system.UInt32]) -> None: ...
    # System.UInt32 Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::get_CurrentPlaybackBitrate()
    @_property
    def current_playback_bitrate(self) -> winrt.system.UInt32: ...
    # System.Boolean Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::get_AudioOnlyPlayback()
    @_property
    def audio_only_playback(self) -> bool: ...
    # System.UInt64 Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::get_InboundBitsPerSecond()
    @_property
    def inbound_bits_per_second(self) -> winrt.system.UInt64: ...
    # Windows.Foundation.Collections.IVectorView`1<System.UInt32> Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::get_AvailableBitrates()
    @_property
    def available_bitrates(self) -> typing.Sequence[winrt.system.UInt32]: ...
    # System.UInt32 Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::get_CurrentDownloadBitrate()
    @_property
    def current_download_bitrate(self) -> winrt.system.UInt32: ...
    # System.Boolean Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::get_IsLive()
    @_property
    def is_live(self) -> bool: ...
    # Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceAdvancedSettings Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::get_AdvancedSettings()
    @_property
    def advanced_settings(self) -> AdaptiveMediaSourceAdvancedSettings: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::get_DesiredSeekableWindowSize()
    @_property
    def desired_seekable_window_size(self) -> typing.Optional[datetime.timedelta]: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::put_DesiredSeekableWindowSize(Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan>)
    @desired_seekable_window_size.setter
    def desired_seekable_window_size(self, value: typing.Optional[datetime.timedelta]) -> None: ...
    # Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::get_Diagnostics()
    @_property
    def diagnostics(self) -> AdaptiveMediaSourceDiagnostics: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::get_MaxSeekableWindowSize()
    @_property
    def max_seekable_window_size(self) -> typing.Optional[datetime.timedelta]: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Media.Streaming.Adaptive.AdaptiveMediaSource::get_MinLiveOffset()
    @_property
    def min_live_offset(self) -> typing.Optional[datetime.timedelta]: ...

@typing.final
class AdaptiveMediaSourceAdvancedSettings(winrt.system.Object):
    # Windows.Foundation.IReference`1<System.Double> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceAdvancedSettings::get_DesiredBitrateHeadroomRatio()
    @_property
    def desired_bitrate_headroom_ratio(self) -> typing.Optional[winrt.system.Double]: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceAdvancedSettings::put_DesiredBitrateHeadroomRatio(Windows.Foundation.IReference`1<System.Double>)
    @desired_bitrate_headroom_ratio.setter
    def desired_bitrate_headroom_ratio(self, value: typing.Optional[winrt.system.Double]) -> None: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceAdvancedSettings::get_BitrateDowngradeTriggerRatio()
    @_property
    def bitrate_downgrade_trigger_ratio(self) -> typing.Optional[winrt.system.Double]: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceAdvancedSettings::put_BitrateDowngradeTriggerRatio(Windows.Foundation.IReference`1<System.Double>)
    @bitrate_downgrade_trigger_ratio.setter
    def bitrate_downgrade_trigger_ratio(self, value: typing.Optional[winrt.system.Double]) -> None: ...
    # System.Boolean Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceAdvancedSettings::get_AllSegmentsIndependent()
    @_property
    def all_segments_independent(self) -> bool: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceAdvancedSettings::put_AllSegmentsIndependent(System.Boolean)
    @all_segments_independent.setter
    def all_segments_independent(self, value: bool) -> None: ...

@typing.final
class AdaptiveMediaSourceCorrelatedTimes(winrt.system.Object):
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCorrelatedTimes::get_Position()
    @_property
    def position(self) -> typing.Optional[datetime.timedelta]: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCorrelatedTimes::get_PresentationTimeStamp()
    @_property
    def presentation_time_stamp(self) -> typing.Optional[datetime.timedelta]: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.DateTime> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCorrelatedTimes::get_ProgramDateTime()
    @_property
    def program_date_time(self) -> typing.Optional[datetime.datetime]: ...

@typing.final
class AdaptiveMediaSourceCreationResult(winrt.system.Object):
    # Windows.Web.Http.HttpResponseMessage Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult::get_HttpResponseMessage()
    @_property
    def http_response_message(self) -> windows_web_http.HttpResponseMessage: ...
    # Windows.Media.Streaming.Adaptive.AdaptiveMediaSource Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult::get_MediaSource()
    @_property
    def media_source(self) -> AdaptiveMediaSource: ...
    # Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationStatus Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult::get_Status()
    @_property
    def status(self) -> AdaptiveMediaSourceCreationStatus: ...
    # Windows.Foundation.HResult Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceCreationResult::get_ExtendedError()
    @_property
    def extended_error(self) -> windows_foundation.HResult: ...

@typing.final
class AdaptiveMediaSourceDiagnosticAvailableEventArgs(winrt.system.Object):
    # Windows.Foundation.IReference`1<System.UInt32> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticAvailableEventArgs::get_Bitrate()
    @_property
    def bitrate(self) -> typing.Optional[winrt.system.UInt32]: ...
    # Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticType Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticAvailableEventArgs::get_DiagnosticType()
    @_property
    def diagnostic_type(self) -> AdaptiveMediaSourceDiagnosticType: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticAvailableEventArgs::get_Position()
    @_property
    def position(self) -> typing.Optional[datetime.timedelta]: ...
    # Windows.Foundation.IReference`1<System.Int32> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticAvailableEventArgs::get_RequestId()
    @_property
    def request_id(self) -> typing.Optional[winrt.system.Int32]: ...
    # Windows.Foundation.IReference`1<System.UInt64> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticAvailableEventArgs::get_ResourceByteRangeLength()
    @_property
    def resource_byte_range_length(self) -> typing.Optional[winrt.system.UInt64]: ...
    # Windows.Foundation.IReference`1<System.UInt64> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticAvailableEventArgs::get_ResourceByteRangeOffset()
    @_property
    def resource_byte_range_offset(self) -> typing.Optional[winrt.system.UInt64]: ...
    # Windows.Foundation.IReference`1<Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceResourceType> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticAvailableEventArgs::get_ResourceType()
    @_property
    def resource_type(self) -> typing.Optional[AdaptiveMediaSourceResourceType]: ...
    # Windows.Foundation.Uri Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticAvailableEventArgs::get_ResourceUri()
    @_property
    def resource_uri(self) -> windows_foundation.Uri: ...
    # Windows.Foundation.IReference`1<System.UInt64> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticAvailableEventArgs::get_SegmentId()
    @_property
    def segment_id(self) -> typing.Optional[winrt.system.UInt64]: ...
    # Windows.Foundation.HResult Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticAvailableEventArgs::get_ExtendedError()
    @_property
    def extended_error(self) -> windows_foundation.HResult: ...
    # System.String Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticAvailableEventArgs::get_ResourceContentType()
    @_property
    def resource_content_type(self) -> str: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticAvailableEventArgs::get_ResourceDuration()
    @_property
    def resource_duration(self) -> typing.Optional[datetime.timedelta]: ...

@typing.final
class AdaptiveMediaSourceDiagnostics(winrt.system.Object):
    # Windows.Foundation.EventRegistrationToken Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics::add_DiagnosticAvailable(Windows.Foundation.TypedEventHandler`2<Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics,Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnosticAvailableEventArgs>)
    def add_diagnostic_available(self, handler: windows_foundation.TypedEventHandler[AdaptiveMediaSourceDiagnostics, AdaptiveMediaSourceDiagnosticAvailableEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDiagnostics::remove_DiagnosticAvailable(Windows.Foundation.EventRegistrationToken)
    def remove_diagnostic_available(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class AdaptiveMediaSourceDownloadBitrateChangedEventArgs(winrt.system.Object):
    # System.UInt32 Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadBitrateChangedEventArgs::get_NewValue()
    @_property
    def new_value(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadBitrateChangedEventArgs::get_OldValue()
    @_property
    def old_value(self) -> winrt.system.UInt32: ...
    # Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadBitrateChangedReason Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadBitrateChangedEventArgs::get_Reason()
    @_property
    def reason(self) -> AdaptiveMediaSourceDownloadBitrateChangedReason: ...

@typing.final
class AdaptiveMediaSourceDownloadCompletedEventArgs(winrt.system.Object):
    # Windows.Web.Http.HttpResponseMessage Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadCompletedEventArgs::get_HttpResponseMessage()
    @_property
    def http_response_message(self) -> windows_web_http.HttpResponseMessage: ...
    # Windows.Foundation.IReference`1<System.UInt64> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadCompletedEventArgs::get_ResourceByteRangeLength()
    @_property
    def resource_byte_range_length(self) -> typing.Optional[winrt.system.UInt64]: ...
    # Windows.Foundation.IReference`1<System.UInt64> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadCompletedEventArgs::get_ResourceByteRangeOffset()
    @_property
    def resource_byte_range_offset(self) -> typing.Optional[winrt.system.UInt64]: ...
    # Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceResourceType Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadCompletedEventArgs::get_ResourceType()
    @_property
    def resource_type(self) -> AdaptiveMediaSourceResourceType: ...
    # Windows.Foundation.Uri Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadCompletedEventArgs::get_ResourceUri()
    @_property
    def resource_uri(self) -> windows_foundation.Uri: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadCompletedEventArgs::get_Position()
    @_property
    def position(self) -> typing.Optional[datetime.timedelta]: ...
    # System.Int32 Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadCompletedEventArgs::get_RequestId()
    @_property
    def request_id(self) -> winrt.system.Int32: ...
    # Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadStatistics Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadCompletedEventArgs::get_Statistics()
    @_property
    def statistics(self) -> AdaptiveMediaSourceDownloadStatistics: ...
    # System.String Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadCompletedEventArgs::get_ResourceContentType()
    @_property
    def resource_content_type(self) -> str: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadCompletedEventArgs::get_ResourceDuration()
    @_property
    def resource_duration(self) -> typing.Optional[datetime.timedelta]: ...

@typing.final
class AdaptiveMediaSourceDownloadFailedEventArgs(winrt.system.Object):
    # Windows.Web.Http.HttpResponseMessage Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadFailedEventArgs::get_HttpResponseMessage()
    @_property
    def http_response_message(self) -> windows_web_http.HttpResponseMessage: ...
    # Windows.Foundation.IReference`1<System.UInt64> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadFailedEventArgs::get_ResourceByteRangeLength()
    @_property
    def resource_byte_range_length(self) -> typing.Optional[winrt.system.UInt64]: ...
    # Windows.Foundation.IReference`1<System.UInt64> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadFailedEventArgs::get_ResourceByteRangeOffset()
    @_property
    def resource_byte_range_offset(self) -> typing.Optional[winrt.system.UInt64]: ...
    # Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceResourceType Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadFailedEventArgs::get_ResourceType()
    @_property
    def resource_type(self) -> AdaptiveMediaSourceResourceType: ...
    # Windows.Foundation.Uri Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadFailedEventArgs::get_ResourceUri()
    @_property
    def resource_uri(self) -> windows_foundation.Uri: ...
    # Windows.Foundation.HResult Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadFailedEventArgs::get_ExtendedError()
    @_property
    def extended_error(self) -> windows_foundation.HResult: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadFailedEventArgs::get_Position()
    @_property
    def position(self) -> typing.Optional[datetime.timedelta]: ...
    # System.Int32 Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadFailedEventArgs::get_RequestId()
    @_property
    def request_id(self) -> winrt.system.Int32: ...
    # Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadStatistics Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadFailedEventArgs::get_Statistics()
    @_property
    def statistics(self) -> AdaptiveMediaSourceDownloadStatistics: ...
    # System.String Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadFailedEventArgs::get_ResourceContentType()
    @_property
    def resource_content_type(self) -> str: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadFailedEventArgs::get_ResourceDuration()
    @_property
    def resource_duration(self) -> typing.Optional[datetime.timedelta]: ...

@typing.final
class AdaptiveMediaSourceDownloadRequestedDeferral(winrt.system.Object):
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedDeferral::Complete()
    def complete(self) -> None: ...

@typing.final
class AdaptiveMediaSourceDownloadRequestedEventArgs(winrt.system.Object):
    # Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedDeferral Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedEventArgs::GetDeferral()
    def get_deferral(self) -> AdaptiveMediaSourceDownloadRequestedDeferral: ...
    # Windows.Foundation.IReference`1<System.UInt64> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedEventArgs::get_ResourceByteRangeLength()
    @_property
    def resource_byte_range_length(self) -> typing.Optional[winrt.system.UInt64]: ...
    # Windows.Foundation.IReference`1<System.UInt64> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedEventArgs::get_ResourceByteRangeOffset()
    @_property
    def resource_byte_range_offset(self) -> typing.Optional[winrt.system.UInt64]: ...
    # Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceResourceType Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedEventArgs::get_ResourceType()
    @_property
    def resource_type(self) -> AdaptiveMediaSourceResourceType: ...
    # Windows.Foundation.Uri Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedEventArgs::get_ResourceUri()
    @_property
    def resource_uri(self) -> windows_foundation.Uri: ...
    # Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadResult Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedEventArgs::get_Result()
    @_property
    def result(self) -> AdaptiveMediaSourceDownloadResult: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedEventArgs::get_Position()
    @_property
    def position(self) -> typing.Optional[datetime.timedelta]: ...
    # System.Int32 Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedEventArgs::get_RequestId()
    @_property
    def request_id(self) -> winrt.system.Int32: ...
    # System.String Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedEventArgs::get_ResourceContentType()
    @_property
    def resource_content_type(self) -> str: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadRequestedEventArgs::get_ResourceDuration()
    @_property
    def resource_duration(self) -> typing.Optional[datetime.timedelta]: ...

@typing.final
class AdaptiveMediaSourceDownloadResult(winrt.system.Object):
    # Windows.Foundation.Uri Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadResult::get_ResourceUri()
    @_property
    def resource_uri(self) -> windows_foundation.Uri: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadResult::put_ResourceUri(Windows.Foundation.Uri)
    @resource_uri.setter
    def resource_uri(self, value: windows_foundation.Uri) -> None: ...
    # Windows.Storage.Streams.IInputStream Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadResult::get_InputStream()
    @_property
    def input_stream(self) -> windows_storage_streams.IInputStream: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadResult::put_InputStream(Windows.Storage.Streams.IInputStream)
    @input_stream.setter
    def input_stream(self, value: windows_storage_streams.ImplementsIInputStream) -> None: ...
    # System.UInt32 Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadResult::get_ExtendedStatus()
    @_property
    def extended_status(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadResult::put_ExtendedStatus(System.UInt32)
    @extended_status.setter
    def extended_status(self, value: winrt.system.UInt32) -> None: ...
    # System.String Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadResult::get_ContentType()
    @_property
    def content_type(self) -> str: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadResult::put_ContentType(System.String)
    @content_type.setter
    def content_type(self, value: str) -> None: ...
    # Windows.Storage.Streams.IBuffer Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadResult::get_Buffer()
    @_property
    def buffer(self) -> windows_storage_streams.IBuffer: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadResult::put_Buffer(Windows.Storage.Streams.IBuffer)
    @buffer.setter
    def buffer(self, value: windows_storage_streams.ImplementsIBuffer) -> None: ...
    # Windows.Foundation.IReference`1<System.UInt64> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadResult::get_ResourceByteRangeOffset()
    @_property
    def resource_byte_range_offset(self) -> typing.Optional[winrt.system.UInt64]: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadResult::put_ResourceByteRangeOffset(Windows.Foundation.IReference`1<System.UInt64>)
    @resource_byte_range_offset.setter
    def resource_byte_range_offset(self, value: typing.Optional[winrt.system.UInt64]) -> None: ...
    # Windows.Foundation.IReference`1<System.UInt64> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadResult::get_ResourceByteRangeLength()
    @_property
    def resource_byte_range_length(self) -> typing.Optional[winrt.system.UInt64]: ...
    # System.Void Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadResult::put_ResourceByteRangeLength(Windows.Foundation.IReference`1<System.UInt64>)
    @resource_byte_range_length.setter
    def resource_byte_range_length(self, value: typing.Optional[winrt.system.UInt64]) -> None: ...

@typing.final
class AdaptiveMediaSourceDownloadStatistics(winrt.system.Object):
    # System.UInt64 Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadStatistics::get_ContentBytesReceivedCount()
    @_property
    def content_bytes_received_count(self) -> winrt.system.UInt64: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadStatistics::get_TimeToFirstByteReceived()
    @_property
    def time_to_first_byte_received(self) -> typing.Optional[datetime.timedelta]: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadStatistics::get_TimeToHeadersReceived()
    @_property
    def time_to_headers_received(self) -> typing.Optional[datetime.timedelta]: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Media.Streaming.Adaptive.AdaptiveMediaSourceDownloadStatistics::get_TimeToLastByteReceived()
    @_property
    def time_to_last_byte_received(self) -> typing.Optional[datetime.timedelta]: ...

@typing.final
class AdaptiveMediaSourcePlaybackBitrateChangedEventArgs(winrt.system.Object):
    # System.Boolean Windows.Media.Streaming.Adaptive.AdaptiveMediaSourcePlaybackBitrateChangedEventArgs::get_AudioOnly()
    @_property
    def audio_only(self) -> bool: ...
    # System.UInt32 Windows.Media.Streaming.Adaptive.AdaptiveMediaSourcePlaybackBitrateChangedEventArgs::get_NewValue()
    @_property
    def new_value(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Media.Streaming.Adaptive.AdaptiveMediaSourcePlaybackBitrateChangedEventArgs::get_OldValue()
    @_property
    def old_value(self) -> winrt.system.UInt32: ...

