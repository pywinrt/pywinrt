// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.3.0

#include "py.Microsoft.Windows.Widgets.Notifications.h"

namespace py::cpp::Microsoft::Windows::Widgets::Notifications
{
    // ----- FeedAnnouncement class --------------------

    static PyObject* _new_FeedAnnouncement(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 5)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 4);

                winrt::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement instance{param0, param1, param2, param3, param4};
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_FeedAnnouncement(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FeedAnnouncement_get_ShowBadgeIfUserNotEngaged(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"ShowBadgeIfUserNotEngaged");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ShowBadgeIfUserNotEngaged());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FeedAnnouncement_put_ShowBadgeIfUserNotEngaged(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"ShowBadgeIfUserNotEngaged");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<bool>(arg);

            self->obj.ShowBadgeIfUserNotEngaged(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FeedAnnouncement_get_SecondaryTextColor(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"SecondaryTextColor");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.SecondaryTextColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FeedAnnouncement_put_SecondaryTextColor(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"SecondaryTextColor");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Microsoft::Windows::Widgets::Notifications::AnnouncementTextColor>(arg);

            self->obj.SecondaryTextColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FeedAnnouncement_get_SecondaryText(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"SecondaryText");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.SecondaryText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FeedAnnouncement_put_SecondaryText(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"SecondaryText");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.SecondaryText(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FeedAnnouncement_get_PrimaryTextColor(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"PrimaryTextColor");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.PrimaryTextColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FeedAnnouncement_put_PrimaryTextColor(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"PrimaryTextColor");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Microsoft::Windows::Widgets::Notifications::AnnouncementTextColor>(arg);

            self->obj.PrimaryTextColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FeedAnnouncement_get_PrimaryText(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"PrimaryText");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.PrimaryText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FeedAnnouncement_put_PrimaryText(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"PrimaryText");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.PrimaryText(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FeedAnnouncement_get_LightModeIconUri(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"LightModeIconUri");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.LightModeIconUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FeedAnnouncement_put_LightModeIconUri(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"LightModeIconUri");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.LightModeIconUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FeedAnnouncement_get_IsSecondaryTextSubtle(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"IsSecondaryTextSubtle");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.IsSecondaryTextSubtle());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FeedAnnouncement_put_IsSecondaryTextSubtle(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"IsSecondaryTextSubtle");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsSecondaryTextSubtle(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FeedAnnouncement_get_Id(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"Id");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FeedAnnouncement_put_Id(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"Id");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Id(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FeedAnnouncement_get_ExpirationTime(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"ExpirationTime");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ExpirationTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FeedAnnouncement_put_ExpirationTime(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"ExpirationTime");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.ExpirationTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FeedAnnouncement_get_Duration(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"Duration");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Duration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FeedAnnouncement_put_Duration(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"Duration");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(arg);

            self->obj.Duration(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FeedAnnouncement_get_DarkModeIconUri(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"DarkModeIconUri");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.DarkModeIconUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FeedAnnouncement_put_DarkModeIconUri(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"DarkModeIconUri");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.DarkModeIconUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FeedAnnouncement_get_CustomAccessibilityText(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"CustomAccessibilityText");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.CustomAccessibilityText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FeedAnnouncement_put_CustomAccessibilityText(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncement", L"CustomAccessibilityText");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CustomAccessibilityText(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_FeedAnnouncement(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FeedAnnouncement(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FeedAnnouncement[] = {
        { "_assign_array_", _assign_array_FeedAnnouncement, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FeedAnnouncement), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_FeedAnnouncement[] = {
        { "show_badge_if_user_not_engaged", reinterpret_cast<getter>(FeedAnnouncement_get_ShowBadgeIfUserNotEngaged), reinterpret_cast<setter>(FeedAnnouncement_put_ShowBadgeIfUserNotEngaged), nullptr, nullptr },
        { "secondary_text_color", reinterpret_cast<getter>(FeedAnnouncement_get_SecondaryTextColor), reinterpret_cast<setter>(FeedAnnouncement_put_SecondaryTextColor), nullptr, nullptr },
        { "secondary_text", reinterpret_cast<getter>(FeedAnnouncement_get_SecondaryText), reinterpret_cast<setter>(FeedAnnouncement_put_SecondaryText), nullptr, nullptr },
        { "primary_text_color", reinterpret_cast<getter>(FeedAnnouncement_get_PrimaryTextColor), reinterpret_cast<setter>(FeedAnnouncement_put_PrimaryTextColor), nullptr, nullptr },
        { "primary_text", reinterpret_cast<getter>(FeedAnnouncement_get_PrimaryText), reinterpret_cast<setter>(FeedAnnouncement_put_PrimaryText), nullptr, nullptr },
        { "light_mode_icon_uri", reinterpret_cast<getter>(FeedAnnouncement_get_LightModeIconUri), reinterpret_cast<setter>(FeedAnnouncement_put_LightModeIconUri), nullptr, nullptr },
        { "is_secondary_text_subtle", reinterpret_cast<getter>(FeedAnnouncement_get_IsSecondaryTextSubtle), reinterpret_cast<setter>(FeedAnnouncement_put_IsSecondaryTextSubtle), nullptr, nullptr },
        { "id", reinterpret_cast<getter>(FeedAnnouncement_get_Id), reinterpret_cast<setter>(FeedAnnouncement_put_Id), nullptr, nullptr },
        { "expiration_time", reinterpret_cast<getter>(FeedAnnouncement_get_ExpirationTime), reinterpret_cast<setter>(FeedAnnouncement_put_ExpirationTime), nullptr, nullptr },
        { "duration", reinterpret_cast<getter>(FeedAnnouncement_get_Duration), reinterpret_cast<setter>(FeedAnnouncement_put_Duration), nullptr, nullptr },
        { "dark_mode_icon_uri", reinterpret_cast<getter>(FeedAnnouncement_get_DarkModeIconUri), reinterpret_cast<setter>(FeedAnnouncement_put_DarkModeIconUri), nullptr, nullptr },
        { "custom_accessibility_text", reinterpret_cast<getter>(FeedAnnouncement_get_CustomAccessibilityText), reinterpret_cast<setter>(FeedAnnouncement_put_CustomAccessibilityText), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_FeedAnnouncement[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_FeedAnnouncement) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FeedAnnouncement) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FeedAnnouncement) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FeedAnnouncement) },
        { }
    };

    static PyType_Spec type_spec_FeedAnnouncement = {
        "winrt._winrt_microsoft_windows_widgets_notifications.FeedAnnouncement",
        sizeof(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncement),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FeedAnnouncement};

    // ----- FeedAnnouncementInvokedArgs class --------------------

    static PyObject* _new_FeedAnnouncementInvokedArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::Widgets::Notifications::FeedAnnouncementInvokedArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::Widgets::Notifications::FeedAnnouncementInvokedArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_FeedAnnouncementInvokedArgs(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncementInvokedArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FeedAnnouncementInvokedArgs_get_ActionKind(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncementInvokedArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs", L"ActionKind");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ActionKind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FeedAnnouncementInvokedArgs_get_AnnouncementId(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncementInvokedArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs", L"AnnouncementId");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.AnnouncementId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FeedAnnouncementInvokedArgs_get_FeedDefinitionId(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncementInvokedArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs", L"FeedDefinitionId");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.FeedDefinitionId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FeedAnnouncementInvokedArgs_get_FeedProviderDefinitionId(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncementInvokedArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.Widgets.Notifications.FeedAnnouncementInvokedArgs", L"FeedProviderDefinitionId");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.FeedProviderDefinitionId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_FeedAnnouncementInvokedArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::Widgets::Notifications::FeedAnnouncementInvokedArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FeedAnnouncementInvokedArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::Widgets::Notifications::FeedAnnouncementInvokedArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FeedAnnouncementInvokedArgs[] = {
        { "_assign_array_", _assign_array_FeedAnnouncementInvokedArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FeedAnnouncementInvokedArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_FeedAnnouncementInvokedArgs[] = {
        { "action_kind", reinterpret_cast<getter>(FeedAnnouncementInvokedArgs_get_ActionKind), nullptr, nullptr, nullptr },
        { "announcement_id", reinterpret_cast<getter>(FeedAnnouncementInvokedArgs_get_AnnouncementId), nullptr, nullptr, nullptr },
        { "feed_definition_id", reinterpret_cast<getter>(FeedAnnouncementInvokedArgs_get_FeedDefinitionId), nullptr, nullptr, nullptr },
        { "feed_provider_definition_id", reinterpret_cast<getter>(FeedAnnouncementInvokedArgs_get_FeedProviderDefinitionId), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_FeedAnnouncementInvokedArgs[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_FeedAnnouncementInvokedArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FeedAnnouncementInvokedArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FeedAnnouncementInvokedArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FeedAnnouncementInvokedArgs) },
        { }
    };

    static PyType_Spec type_spec_FeedAnnouncementInvokedArgs = {
        "winrt._winrt_microsoft_windows_widgets_notifications.FeedAnnouncementInvokedArgs",
        sizeof(py::wrapper::Microsoft::Windows::Widgets::Notifications::FeedAnnouncementInvokedArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FeedAnnouncementInvokedArgs};

    // ----- Microsoft.Windows.Widgets.Notifications Initialization --------------------

    PyDoc_STRVAR(module_doc, "Microsoft.Windows.Widgets.Notifications");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_microsoft_windows_widgets_notifications",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Microsoft::Windows::Widgets::Notifications

PyMODINIT_FUNC PyInit__winrt_microsoft_windows_widgets_notifications(void) noexcept
{
    using namespace py::cpp::Microsoft::Windows::Widgets::Notifications;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pytype_handle FeedAnnouncement_type{py::register_python_type(module.get(), &type_spec_FeedAnnouncement, object_bases.get(), nullptr)};
    if (!FeedAnnouncement_type)
    {
        return nullptr;
    }

    py::pytype_handle FeedAnnouncementInvokedArgs_type{py::register_python_type(module.get(), &type_spec_FeedAnnouncementInvokedArgs, object_bases.get(), nullptr)};
    if (!FeedAnnouncementInvokedArgs_type)
    {
        return nullptr;
    }


    return module.detach();
}
