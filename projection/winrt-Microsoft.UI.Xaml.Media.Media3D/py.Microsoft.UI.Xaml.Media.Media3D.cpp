// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Microsoft.UI.Xaml.Media.Media3D.h"


namespace py::cpp::Microsoft::UI::Xaml::Media::Media3D
{
    // ----- CompositeTransform3D class --------------------

    static PyObject* _new_CompositeTransform3D(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CompositeTransform3D(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CompositeTransform3D_get_TranslateZ(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"TranslateZ"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TranslateZ());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CompositeTransform3D_put_TranslateZ(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"TranslateZ"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.TranslateZ(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CompositeTransform3D_get_TranslateY(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"TranslateY"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TranslateY());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CompositeTransform3D_put_TranslateY(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"TranslateY"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.TranslateY(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CompositeTransform3D_get_TranslateX(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"TranslateX"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TranslateX());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CompositeTransform3D_put_TranslateX(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"TranslateX"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.TranslateX(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CompositeTransform3D_get_ScaleZ(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"ScaleZ"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ScaleZ());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CompositeTransform3D_put_ScaleZ(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"ScaleZ"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.ScaleZ(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CompositeTransform3D_get_ScaleY(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"ScaleY"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ScaleY());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CompositeTransform3D_put_ScaleY(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"ScaleY"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.ScaleY(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CompositeTransform3D_get_ScaleX(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"ScaleX"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ScaleX());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CompositeTransform3D_put_ScaleX(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"ScaleX"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.ScaleX(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CompositeTransform3D_get_RotationZ(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"RotationZ"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RotationZ());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CompositeTransform3D_put_RotationZ(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"RotationZ"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.RotationZ(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CompositeTransform3D_get_RotationY(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"RotationY"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RotationY());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CompositeTransform3D_put_RotationY(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"RotationY"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.RotationY(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CompositeTransform3D_get_RotationX(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"RotationX"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RotationX());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CompositeTransform3D_put_RotationX(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"RotationX"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.RotationX(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CompositeTransform3D_get_CenterZ(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"CenterZ"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CenterZ());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CompositeTransform3D_put_CenterZ(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"CenterZ"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.CenterZ(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CompositeTransform3D_get_CenterY(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"CenterY"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CenterY());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CompositeTransform3D_put_CenterY(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"CenterY"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.CenterY(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CompositeTransform3D_get_CenterX(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"CenterX"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CenterX());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CompositeTransform3D_put_CenterX(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"CenterX"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.CenterX(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CompositeTransform3D_get_CenterXProperty(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"CenterXProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D::CenterXProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CompositeTransform3D_get_CenterYProperty(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"CenterYProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D::CenterYProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CompositeTransform3D_get_CenterZProperty(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"CenterZProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D::CenterZProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CompositeTransform3D_get_RotationXProperty(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"RotationXProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D::RotationXProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CompositeTransform3D_get_RotationYProperty(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"RotationYProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D::RotationYProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CompositeTransform3D_get_RotationZProperty(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"RotationZProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D::RotationZProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CompositeTransform3D_get_ScaleXProperty(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"ScaleXProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D::ScaleXProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CompositeTransform3D_get_ScaleYProperty(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"ScaleYProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D::ScaleYProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CompositeTransform3D_get_ScaleZProperty(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"ScaleZProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D::ScaleZProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CompositeTransform3D_get_TranslateXProperty(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"TranslateXProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D::TranslateXProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CompositeTransform3D_get_TranslateYProperty(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"TranslateYProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D::TranslateYProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CompositeTransform3D_get_TranslateZProperty(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.CompositeTransform3D", L"TranslateZProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D::TranslateZProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_CompositeTransform3D(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CompositeTransform3D(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CompositeTransform3D[] = {
        { "_assign_array_", _assign_array_CompositeTransform3D, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CompositeTransform3D), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CompositeTransform3D[] = {
        { "translate_z", reinterpret_cast<getter>(CompositeTransform3D_get_TranslateZ), reinterpret_cast<setter>(CompositeTransform3D_put_TranslateZ), nullptr, nullptr },
        { "translate_y", reinterpret_cast<getter>(CompositeTransform3D_get_TranslateY), reinterpret_cast<setter>(CompositeTransform3D_put_TranslateY), nullptr, nullptr },
        { "translate_x", reinterpret_cast<getter>(CompositeTransform3D_get_TranslateX), reinterpret_cast<setter>(CompositeTransform3D_put_TranslateX), nullptr, nullptr },
        { "scale_z", reinterpret_cast<getter>(CompositeTransform3D_get_ScaleZ), reinterpret_cast<setter>(CompositeTransform3D_put_ScaleZ), nullptr, nullptr },
        { "scale_y", reinterpret_cast<getter>(CompositeTransform3D_get_ScaleY), reinterpret_cast<setter>(CompositeTransform3D_put_ScaleY), nullptr, nullptr },
        { "scale_x", reinterpret_cast<getter>(CompositeTransform3D_get_ScaleX), reinterpret_cast<setter>(CompositeTransform3D_put_ScaleX), nullptr, nullptr },
        { "rotation_z", reinterpret_cast<getter>(CompositeTransform3D_get_RotationZ), reinterpret_cast<setter>(CompositeTransform3D_put_RotationZ), nullptr, nullptr },
        { "rotation_y", reinterpret_cast<getter>(CompositeTransform3D_get_RotationY), reinterpret_cast<setter>(CompositeTransform3D_put_RotationY), nullptr, nullptr },
        { "rotation_x", reinterpret_cast<getter>(CompositeTransform3D_get_RotationX), reinterpret_cast<setter>(CompositeTransform3D_put_RotationX), nullptr, nullptr },
        { "center_z", reinterpret_cast<getter>(CompositeTransform3D_get_CenterZ), reinterpret_cast<setter>(CompositeTransform3D_put_CenterZ), nullptr, nullptr },
        { "center_y", reinterpret_cast<getter>(CompositeTransform3D_get_CenterY), reinterpret_cast<setter>(CompositeTransform3D_put_CenterY), nullptr, nullptr },
        { "center_x", reinterpret_cast<getter>(CompositeTransform3D_get_CenterX), reinterpret_cast<setter>(CompositeTransform3D_put_CenterX), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CompositeTransform3D[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CompositeTransform3D) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CompositeTransform3D) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CompositeTransform3D) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CompositeTransform3D) },
        { },
    };

    static PyType_Spec type_spec_CompositeTransform3D =
    {
        "winrt._winrt_microsoft_ui_xaml_media_media3d.CompositeTransform3D",
        sizeof(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::CompositeTransform3D),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CompositeTransform3D
    };

    static PyGetSetDef getset_CompositeTransform3D_Static[] = {
        { "center_x_property", reinterpret_cast<getter>(CompositeTransform3D_get_CenterXProperty), nullptr, nullptr, nullptr },
        { "center_y_property", reinterpret_cast<getter>(CompositeTransform3D_get_CenterYProperty), nullptr, nullptr, nullptr },
        { "center_z_property", reinterpret_cast<getter>(CompositeTransform3D_get_CenterZProperty), nullptr, nullptr, nullptr },
        { "rotation_x_property", reinterpret_cast<getter>(CompositeTransform3D_get_RotationXProperty), nullptr, nullptr, nullptr },
        { "rotation_y_property", reinterpret_cast<getter>(CompositeTransform3D_get_RotationYProperty), nullptr, nullptr, nullptr },
        { "rotation_z_property", reinterpret_cast<getter>(CompositeTransform3D_get_RotationZProperty), nullptr, nullptr, nullptr },
        { "scale_x_property", reinterpret_cast<getter>(CompositeTransform3D_get_ScaleXProperty), nullptr, nullptr, nullptr },
        { "scale_y_property", reinterpret_cast<getter>(CompositeTransform3D_get_ScaleYProperty), nullptr, nullptr, nullptr },
        { "scale_z_property", reinterpret_cast<getter>(CompositeTransform3D_get_ScaleZProperty), nullptr, nullptr, nullptr },
        { "translate_x_property", reinterpret_cast<getter>(CompositeTransform3D_get_TranslateXProperty), nullptr, nullptr, nullptr },
        { "translate_y_property", reinterpret_cast<getter>(CompositeTransform3D_get_TranslateYProperty), nullptr, nullptr, nullptr },
        { "translate_z_property", reinterpret_cast<getter>(CompositeTransform3D_get_TranslateZProperty), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_CompositeTransform3D_Static[] = {
        { }
    };

    static PyType_Slot type_slots_CompositeTransform3D_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_CompositeTransform3D_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_CompositeTransform3D_Static) },
        { }
    };

    static PyType_Spec type_spec_CompositeTransform3D_Static =
    {
        "winrt._winrt_microsoft_ui_xaml_media_media3d.CompositeTransform3D_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_CompositeTransform3D_Static
    };

    // ----- Matrix3DHelper class --------------------

    static PyObject* _new_Matrix3DHelper(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3DHelper>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3DHelper>::type_name);
        return nullptr;
    }

    static void _dealloc_Matrix3DHelper(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3DHelper* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* Matrix3DHelper_FromElements(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 16)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Media.Media3D.Matrix3DHelper", L"FromElements", 16))
            {
                py::set_arg_count_version_error(16);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<double>(args, 0);
                auto param1 = py::convert_to<double>(args, 1);
                auto param2 = py::convert_to<double>(args, 2);
                auto param3 = py::convert_to<double>(args, 3);
                auto param4 = py::convert_to<double>(args, 4);
                auto param5 = py::convert_to<double>(args, 5);
                auto param6 = py::convert_to<double>(args, 6);
                auto param7 = py::convert_to<double>(args, 7);
                auto param8 = py::convert_to<double>(args, 8);
                auto param9 = py::convert_to<double>(args, 9);
                auto param10 = py::convert_to<double>(args, 10);
                auto param11 = py::convert_to<double>(args, 11);
                auto param12 = py::convert_to<double>(args, 12);
                auto param13 = py::convert_to<double>(args, 13);
                auto param14 = py::convert_to<double>(args, 14);
                auto param15 = py::convert_to<double>(args, 15);

                return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3DHelper::FromElements(param0, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Matrix3DHelper_GetHasInverse(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Media.Media3D.Matrix3DHelper", L"GetHasInverse", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3D>(args, 0);

                return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3DHelper::GetHasInverse(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Matrix3DHelper_GetIsIdentity(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Media.Media3D.Matrix3DHelper", L"GetIsIdentity", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3D>(args, 0);

                return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3DHelper::GetIsIdentity(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Matrix3DHelper_Invert(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Media.Media3D.Matrix3DHelper", L"Invert", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3D>(args, 0);

                return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3DHelper::Invert(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Matrix3DHelper_Multiply(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.UI.Xaml.Media.Media3D.Matrix3DHelper", L"Multiply", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3D>(args, 0);
                auto param1 = py::convert_to<winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3D>(args, 1);

                return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3DHelper::Multiply(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* Matrix3DHelper_get_Identity(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.Matrix3DHelper", L"Identity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3DHelper::Identity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_Matrix3DHelper(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3DHelper>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_Matrix3DHelper(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3DHelper>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Matrix3DHelper[] = {
        { "_assign_array_", _assign_array_Matrix3DHelper, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_Matrix3DHelper), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_Matrix3DHelper[] = {
        { }
    };

    static PyType_Slot _type_slots_Matrix3DHelper[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_Matrix3DHelper) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_Matrix3DHelper) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_Matrix3DHelper) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_Matrix3DHelper) },
        { },
    };

    static PyType_Spec type_spec_Matrix3DHelper =
    {
        "winrt._winrt_microsoft_ui_xaml_media_media3d.Matrix3DHelper",
        sizeof(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3DHelper),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Matrix3DHelper
    };

    static PyGetSetDef getset_Matrix3DHelper_Static[] = {
        { "identity", reinterpret_cast<getter>(Matrix3DHelper_get_Identity), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_Matrix3DHelper_Static[] = {
        { "from_elements", reinterpret_cast<PyCFunction>(Matrix3DHelper_FromElements), METH_VARARGS, nullptr },
        { "get_has_inverse", reinterpret_cast<PyCFunction>(Matrix3DHelper_GetHasInverse), METH_VARARGS, nullptr },
        { "get_is_identity", reinterpret_cast<PyCFunction>(Matrix3DHelper_GetIsIdentity), METH_VARARGS, nullptr },
        { "invert", reinterpret_cast<PyCFunction>(Matrix3DHelper_Invert), METH_VARARGS, nullptr },
        { "multiply", reinterpret_cast<PyCFunction>(Matrix3DHelper_Multiply), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_Matrix3DHelper_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_Matrix3DHelper_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_Matrix3DHelper_Static) },
        { }
    };

    static PyType_Spec type_spec_Matrix3DHelper_Static =
    {
        "winrt._winrt_microsoft_ui_xaml_media_media3d.Matrix3DHelper_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_Matrix3DHelper_Static
    };

    // ----- PerspectiveTransform3D class --------------------

    static PyObject* _new_PerspectiveTransform3D(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Microsoft::UI::Xaml::Media::Media3D::PerspectiveTransform3D instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PerspectiveTransform3D(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::PerspectiveTransform3D* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PerspectiveTransform3D_get_OffsetY(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::PerspectiveTransform3D* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D", L"OffsetY"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.OffsetY());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PerspectiveTransform3D_put_OffsetY(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::PerspectiveTransform3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D", L"OffsetY"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.OffsetY(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PerspectiveTransform3D_get_OffsetX(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::PerspectiveTransform3D* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D", L"OffsetX"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.OffsetX());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PerspectiveTransform3D_put_OffsetX(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::PerspectiveTransform3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D", L"OffsetX"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.OffsetX(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PerspectiveTransform3D_get_Depth(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::PerspectiveTransform3D* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D", L"Depth"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Depth());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PerspectiveTransform3D_put_Depth(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::PerspectiveTransform3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D", L"Depth"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.Depth(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PerspectiveTransform3D_get_DepthProperty(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D", L"DepthProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::PerspectiveTransform3D::DepthProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerspectiveTransform3D_get_OffsetXProperty(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D", L"OffsetXProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::PerspectiveTransform3D::OffsetXProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PerspectiveTransform3D_get_OffsetYProperty(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.UI.Xaml.Media.Media3D.PerspectiveTransform3D", L"OffsetYProperty"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Microsoft::UI::Xaml::Media::Media3D::PerspectiveTransform3D::OffsetYProperty());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PerspectiveTransform3D(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Xaml::Media::Media3D::PerspectiveTransform3D>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PerspectiveTransform3D(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Xaml::Media::Media3D::PerspectiveTransform3D>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PerspectiveTransform3D[] = {
        { "_assign_array_", _assign_array_PerspectiveTransform3D, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PerspectiveTransform3D), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PerspectiveTransform3D[] = {
        { "offset_y", reinterpret_cast<getter>(PerspectiveTransform3D_get_OffsetY), reinterpret_cast<setter>(PerspectiveTransform3D_put_OffsetY), nullptr, nullptr },
        { "offset_x", reinterpret_cast<getter>(PerspectiveTransform3D_get_OffsetX), reinterpret_cast<setter>(PerspectiveTransform3D_put_OffsetX), nullptr, nullptr },
        { "depth", reinterpret_cast<getter>(PerspectiveTransform3D_get_Depth), reinterpret_cast<setter>(PerspectiveTransform3D_put_Depth), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PerspectiveTransform3D[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PerspectiveTransform3D) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PerspectiveTransform3D) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PerspectiveTransform3D) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PerspectiveTransform3D) },
        { },
    };

    static PyType_Spec type_spec_PerspectiveTransform3D =
    {
        "winrt._winrt_microsoft_ui_xaml_media_media3d.PerspectiveTransform3D",
        sizeof(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::PerspectiveTransform3D),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PerspectiveTransform3D
    };

    static PyGetSetDef getset_PerspectiveTransform3D_Static[] = {
        { "depth_property", reinterpret_cast<getter>(PerspectiveTransform3D_get_DepthProperty), nullptr, nullptr, nullptr },
        { "offset_x_property", reinterpret_cast<getter>(PerspectiveTransform3D_get_OffsetXProperty), nullptr, nullptr, nullptr },
        { "offset_y_property", reinterpret_cast<getter>(PerspectiveTransform3D_get_OffsetYProperty), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_PerspectiveTransform3D_Static[] = {
        { }
    };

    static PyType_Slot type_slots_PerspectiveTransform3D_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_PerspectiveTransform3D_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_PerspectiveTransform3D_Static) },
        { }
    };

    static PyType_Spec type_spec_PerspectiveTransform3D_Static =
    {
        "winrt._winrt_microsoft_ui_xaml_media_media3d.PerspectiveTransform3D_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_PerspectiveTransform3D_Static
    };

    // ----- Transform3D class --------------------

    static PyObject* _new_Transform3D(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::UI::Xaml::Media::Media3D::Transform3D>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::UI::Xaml::Media::Media3D::Transform3D>::type_name);
        return nullptr;
    }

    static void _dealloc_Transform3D(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Transform3D* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_Transform3D(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Xaml::Media::Media3D::Transform3D>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_Transform3D(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::UI::Xaml::Media::Media3D::Transform3D>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Transform3D[] = {
        { "_assign_array_", _assign_array_Transform3D, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_Transform3D), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_Transform3D[] = {
        { }
    };

    static PyType_Slot _type_slots_Transform3D[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_Transform3D) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_Transform3D) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_Transform3D) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_Transform3D) },
        { },
    };

    static PyType_Spec type_spec_Transform3D =
    {
        "winrt._winrt_microsoft_ui_xaml_media_media3d.Transform3D",
        sizeof(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Transform3D),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Transform3D
    };

    // ----- Matrix3D struct --------------------

    winrt_struct_wrapper<winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3D>* _new_Matrix3D(PyTypeObject* subclass, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3D>*>(subclass->tp_alloc(subclass, 0));

        if (!self)
        {
            return nullptr;
        }

        std::construct_at(&self->obj);

        return self;
    }

    int _init_Matrix3D(winrt_struct_wrapper<winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3D>* self, PyObject* args, PyObject* kwds) noexcept
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            self->obj = {};
            return 0;
        }

        double _M11{};
        double _M12{};
        double _M13{};
        double _M14{};
        double _M21{};
        double _M22{};
        double _M23{};
        double _M24{};
        double _M31{};
        double _M32{};
        double _M33{};
        double _M34{};
        double _OffsetX{};
        double _OffsetY{};
        double _OffsetZ{};
        double _M44{};

        static const char* kwlist[] = {"m11", "m12", "m13", "m14", "m21", "m22", "m23", "m24", "m31", "m32", "m33", "m34", "offset_x", "offset_y", "offset_z", "m44", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "dddddddddddddddd", const_cast<char**>(kwlist), &_M11, &_M12, &_M13, &_M14, &_M21, &_M22, &_M23, &_M24, &_M31, &_M32, &_M33, &_M34, &_OffsetX, &_OffsetY, &_OffsetZ, &_M44))
        {
            return -1;
        }

        try
        {
            self->obj = {_M11, _M12, _M13, _M14, _M21, _M22, _M23, _M24, _M31, _M32, _M33, _M34, _OffsetX, _OffsetY, _OffsetZ, _M44};
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static void _dealloc_Matrix3D(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_Matrix3D(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::UI::Xaml::Media::Media3D::Matrix3D>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_Matrix3D[] = {
        { "_assign_array_", _assign_array_Matrix3D, METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyObject* Matrix3D_get_M11(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.M11);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3D_set_M11(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.M11 = py::converter<double>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3D_get_M12(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.M12);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3D_set_M12(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.M12 = py::converter<double>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3D_get_M13(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.M13);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3D_set_M13(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.M13 = py::converter<double>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3D_get_M14(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.M14);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3D_set_M14(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.M14 = py::converter<double>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3D_get_M21(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.M21);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3D_set_M21(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.M21 = py::converter<double>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3D_get_M22(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.M22);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3D_set_M22(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.M22 = py::converter<double>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3D_get_M23(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.M23);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3D_set_M23(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.M23 = py::converter<double>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3D_get_M24(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.M24);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3D_set_M24(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.M24 = py::converter<double>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3D_get_M31(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.M31);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3D_set_M31(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.M31 = py::converter<double>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3D_get_M32(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.M32);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3D_set_M32(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.M32 = py::converter<double>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3D_get_M33(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.M33);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3D_set_M33(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.M33 = py::converter<double>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3D_get_M34(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.M34);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3D_set_M34(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.M34 = py::converter<double>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3D_get_OffsetX(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OffsetX);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3D_set_OffsetX(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.OffsetX = py::converter<double>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3D_get_OffsetY(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OffsetY);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3D_set_OffsetY(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.OffsetY = py::converter<double>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3D_get_OffsetZ(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OffsetZ);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3D_set_OffsetZ(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.OffsetZ = py::converter<double>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Matrix3D_get_M44(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.M44);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Matrix3D_set_M44(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.M44 = py::converter<double>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_Matrix3D[] = {
        { "m11", reinterpret_cast<getter>(Matrix3D_get_M11), reinterpret_cast<setter>(Matrix3D_set_M11), nullptr, nullptr },
        { "m12", reinterpret_cast<getter>(Matrix3D_get_M12), reinterpret_cast<setter>(Matrix3D_set_M12), nullptr, nullptr },
        { "m13", reinterpret_cast<getter>(Matrix3D_get_M13), reinterpret_cast<setter>(Matrix3D_set_M13), nullptr, nullptr },
        { "m14", reinterpret_cast<getter>(Matrix3D_get_M14), reinterpret_cast<setter>(Matrix3D_set_M14), nullptr, nullptr },
        { "m21", reinterpret_cast<getter>(Matrix3D_get_M21), reinterpret_cast<setter>(Matrix3D_set_M21), nullptr, nullptr },
        { "m22", reinterpret_cast<getter>(Matrix3D_get_M22), reinterpret_cast<setter>(Matrix3D_set_M22), nullptr, nullptr },
        { "m23", reinterpret_cast<getter>(Matrix3D_get_M23), reinterpret_cast<setter>(Matrix3D_set_M23), nullptr, nullptr },
        { "m24", reinterpret_cast<getter>(Matrix3D_get_M24), reinterpret_cast<setter>(Matrix3D_set_M24), nullptr, nullptr },
        { "m31", reinterpret_cast<getter>(Matrix3D_get_M31), reinterpret_cast<setter>(Matrix3D_set_M31), nullptr, nullptr },
        { "m32", reinterpret_cast<getter>(Matrix3D_get_M32), reinterpret_cast<setter>(Matrix3D_set_M32), nullptr, nullptr },
        { "m33", reinterpret_cast<getter>(Matrix3D_get_M33), reinterpret_cast<setter>(Matrix3D_set_M33), nullptr, nullptr },
        { "m34", reinterpret_cast<getter>(Matrix3D_get_M34), reinterpret_cast<setter>(Matrix3D_set_M34), nullptr, nullptr },
        { "offset_x", reinterpret_cast<getter>(Matrix3D_get_OffsetX), reinterpret_cast<setter>(Matrix3D_set_OffsetX), nullptr, nullptr },
        { "offset_y", reinterpret_cast<getter>(Matrix3D_get_OffsetY), reinterpret_cast<setter>(Matrix3D_set_OffsetY), nullptr, nullptr },
        { "offset_z", reinterpret_cast<getter>(Matrix3D_get_OffsetZ), reinterpret_cast<setter>(Matrix3D_set_OffsetZ), nullptr, nullptr },
        { "m44", reinterpret_cast<getter>(Matrix3D_get_M44), reinterpret_cast<setter>(Matrix3D_set_M44), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_Matrix3D[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_Matrix3D) },
        { Py_tp_init, reinterpret_cast<void*>(_init_Matrix3D) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_Matrix3D) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_Matrix3D) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_Matrix3D) },
        { },
    };

    static PyType_Spec type_spec_Matrix3D =
    {
        "winrt._winrt_microsoft_ui_xaml_media_media3d.Matrix3D",
        sizeof(py::wrapper::Microsoft::UI::Xaml::Media::Media3D::Matrix3D),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Matrix3D
    };

    // ----- Microsoft.UI.Xaml.Media.Media3D Initialization --------------------
    PyDoc_STRVAR(module_doc, "Microsoft::UI::Xaml::Media::Media3D");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_microsoft_ui_xaml_media_media3d",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Microsoft::UI::Xaml::Media::Media3D

PyMODINIT_FUNC PyInit__winrt_microsoft_ui_xaml_media_media3d(void) noexcept
{
    using namespace py::cpp::Microsoft::UI::Xaml::Media::Media3D;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_CompositeTransform3D_Static{PyType_FromSpec(&type_spec_CompositeTransform3D_Static)};
    if (!type_CompositeTransform3D_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CompositeTransform3D, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_CompositeTransform3D_Static.get())) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_Matrix3DHelper_Static{PyType_FromSpec(&type_spec_Matrix3DHelper_Static)};
    if (!type_Matrix3DHelper_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_Matrix3DHelper, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_Matrix3DHelper_Static.get())) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_PerspectiveTransform3D_Static{PyType_FromSpec(&type_spec_PerspectiveTransform3D_Static)};
    if (!type_PerspectiveTransform3D_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PerspectiveTransform3D, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_PerspectiveTransform3D_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_Transform3D, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_Matrix3D, nullptr, nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
