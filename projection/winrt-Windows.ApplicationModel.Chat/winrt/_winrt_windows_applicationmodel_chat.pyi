# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.media.mediaproperties as windows_media_mediaproperties
import winrt.windows.security.credentials as windows_security_credentials
import winrt.windows.storage.streams as windows_storage_streams

from winrt.windows.applicationmodel.chat import ChatConversationThreadingKind, ChatItemKind, ChatMessageChangeType, ChatMessageKind, ChatMessageOperatorKind, ChatMessageStatus, ChatMessageTransportKind, ChatMessageValidationStatus, ChatRestoreHistorySpan, ChatStoreChangedEventKind, ChatTransportErrorCodeCategory, ChatTransportInterpretedErrorCode, RcsServiceKind

Self = typing.TypeVar('Self')

@typing.final
class ChatCapabilities(winrt.system.Object):
    # System.Boolean Windows.ApplicationModel.Chat.ChatCapabilities::get_IsChatCapable()
    @_property
    def is_chat_capable(self) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatCapabilities::get_IsFileTransferCapable()
    @_property
    def is_file_transfer_capable(self) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatCapabilities::get_IsGeoLocationPushCapable()
    @_property
    def is_geo_location_push_capable(self) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatCapabilities::get_IsIntegratedMessagingCapable()
    @_property
    def is_integrated_messaging_capable(self) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatCapabilities::get_IsOnline()
    @_property
    def is_online(self) -> bool: ...

@typing.final
class ChatCapabilitiesManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Chat.ChatCapabilities> Windows.ApplicationModel.Chat.ChatCapabilitiesManager::GetCachedCapabilitiesAsync(System.String)
    def get_cached_capabilities_async(cls, address: str, /) -> windows_foundation.IAsyncOperation[ChatCapabilities]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Chat.ChatCapabilities> Windows.ApplicationModel.Chat.ChatCapabilitiesManager::GetCachedCapabilitiesAsync(System.String,System.String)
    def get_cached_capabilities_for_transport_async(cls, address: str, transport_id: str, /) -> windows_foundation.IAsyncOperation[ChatCapabilities]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Chat.ChatCapabilities> Windows.ApplicationModel.Chat.ChatCapabilitiesManager::GetCapabilitiesFromNetworkAsync(System.String)
    def get_capabilities_from_network_async(cls, address: str, /) -> windows_foundation.IAsyncOperation[ChatCapabilities]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Chat.ChatCapabilities> Windows.ApplicationModel.Chat.ChatCapabilitiesManager::GetCapabilitiesFromNetworkAsync(System.String,System.String)
    def get_capabilities_from_network_for_transport_async(cls, address: str, transport_id: str, /) -> windows_foundation.IAsyncOperation[ChatCapabilities]: ...

@typing.final
class ChatCapabilitiesManager(winrt.system.Object, metaclass=ChatCapabilitiesManager_Static):
    pass

@typing.final
class ChatConversation(winrt.system.Object, IChatItem):
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatConversation::DeleteAsync()
    def delete_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.ApplicationModel.Chat.ChatMessageReader Windows.ApplicationModel.Chat.ChatConversation::GetMessageReader()
    def get_message_reader(self) -> ChatMessageReader: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatConversation::MarkMessagesAsReadAsync()
    def mark_all_messages_as_read_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatConversation::MarkMessagesAsReadAsync(Windows.Foundation.DateTime)
    def mark_messages_as_read_async(self, value: datetime.datetime, /) -> windows_foundation.IAsyncAction: ...
    # System.Void Windows.ApplicationModel.Chat.ChatConversation::NotifyLocalParticipantComposing(System.String,System.String,System.Boolean)
    def notify_local_participant_composing(self, transport_id: str, participant_address: str, is_composing: bool, /) -> None: ...
    # System.Void Windows.ApplicationModel.Chat.ChatConversation::NotifyRemoteParticipantComposing(System.String,System.String,System.Boolean)
    def notify_remote_participant_composing(self, transport_id: str, participant_address: str, is_composing: bool, /) -> None: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatConversation::SaveAsync()
    def save_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Chat.ChatConversation::add_RemoteParticipantComposingChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Chat.ChatConversation,Windows.ApplicationModel.Chat.RemoteParticipantComposingChangedEventArgs>)
    def add_remote_participant_composing_changed(self, handler: windows_foundation.TypedEventHandler[ChatConversation, RemoteParticipantComposingChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Chat.ChatConversation::remove_RemoteParticipantComposingChanged(Windows.Foundation.EventRegistrationToken)
    def remove_remote_participant_composing_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Windows.ApplicationModel.Chat.ChatConversation::get_Subject()
    @_property
    def subject(self) -> str: ...
    # System.Void Windows.ApplicationModel.Chat.ChatConversation::put_Subject(System.String)
    @subject.setter
    def subject(self, value: str) -> None: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatConversation::get_IsConversationMuted()
    @_property
    def is_conversation_muted(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Chat.ChatConversation::put_IsConversationMuted(System.Boolean)
    @is_conversation_muted.setter
    def is_conversation_muted(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatConversation::get_HasUnreadMessages()
    @_property
    def has_unread_messages(self) -> bool: ...
    # System.String Windows.ApplicationModel.Chat.ChatConversation::get_Id()
    @_property
    def id(self) -> str: ...
    # System.String Windows.ApplicationModel.Chat.ChatConversation::get_MostRecentMessageId()
    @_property
    def most_recent_message_id(self) -> str: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Windows.ApplicationModel.Chat.ChatConversation::get_Participants()
    @_property
    def participants(self) -> typing.MutableSequence[str]: ...
    # Windows.ApplicationModel.Chat.ChatConversationThreadingInfo Windows.ApplicationModel.Chat.ChatConversation::get_ThreadingInfo()
    @_property
    def threading_info(self) -> ChatConversationThreadingInfo: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatConversation::get_CanModifyParticipants()
    @_property
    def can_modify_participants(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Chat.ChatConversation::put_CanModifyParticipants(System.Boolean)
    @can_modify_participants.setter
    def can_modify_participants(self, value: bool) -> None: ...
    # Windows.ApplicationModel.Chat.ChatItemKind Windows.ApplicationModel.Chat.ChatConversation::get_ItemKind()
    @_property
    def item_kind(self) -> ChatItemKind: ...

@typing.final
class ChatConversationReader(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Chat.ChatConversation>> Windows.ApplicationModel.Chat.ChatConversationReader::ReadBatchAsync()
    def read_batch_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[ChatConversation]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Chat.ChatConversation>> Windows.ApplicationModel.Chat.ChatConversationReader::ReadBatchAsync(System.Int32)
    def read_batch_with_count_async(self, count: winrt.system.Int32, /) -> windows_foundation.IAsyncOperation[typing.Sequence[ChatConversation]]: ...

@typing.final
class ChatConversationThreadingInfo(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.ApplicationModel.Chat.ChatConversationThreadingKind Windows.ApplicationModel.Chat.ChatConversationThreadingInfo::get_Kind()
    @_property
    def kind(self) -> ChatConversationThreadingKind: ...
    # System.Void Windows.ApplicationModel.Chat.ChatConversationThreadingInfo::put_Kind(Windows.ApplicationModel.Chat.ChatConversationThreadingKind)
    @kind.setter
    def kind(self, value: ChatConversationThreadingKind) -> None: ...
    # System.String Windows.ApplicationModel.Chat.ChatConversationThreadingInfo::get_Custom()
    @_property
    def custom(self) -> str: ...
    # System.Void Windows.ApplicationModel.Chat.ChatConversationThreadingInfo::put_Custom(System.String)
    @custom.setter
    def custom(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Chat.ChatConversationThreadingInfo::get_ConversationId()
    @_property
    def conversation_id(self) -> str: ...
    # System.Void Windows.ApplicationModel.Chat.ChatConversationThreadingInfo::put_ConversationId(System.String)
    @conversation_id.setter
    def conversation_id(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Chat.ChatConversationThreadingInfo::get_ContactId()
    @_property
    def contact_id(self) -> str: ...
    # System.Void Windows.ApplicationModel.Chat.ChatConversationThreadingInfo::put_ContactId(System.String)
    @contact_id.setter
    def contact_id(self, value: str) -> None: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Windows.ApplicationModel.Chat.ChatConversationThreadingInfo::get_Participants()
    @_property
    def participants(self) -> typing.MutableSequence[str]: ...

@typing.final
class ChatMessage(winrt.system.Object, IChatItem):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.ApplicationModel.Chat.ChatItemKind Windows.ApplicationModel.Chat.ChatMessage::get_ItemKind()
    @_property
    def item_kind(self) -> ChatItemKind: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatMessage::get_IsIncoming()
    @_property
    def is_incoming(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_IsIncoming(System.Boolean)
    @is_incoming.setter
    def is_incoming(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatMessage::get_IsForwardingDisabled()
    @_property
    def is_forwarding_disabled(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_IsForwardingDisabled(System.Boolean)
    @is_forwarding_disabled.setter
    def is_forwarding_disabled(self, value: bool) -> None: ...
    # System.String Windows.ApplicationModel.Chat.ChatMessage::get_TransportId()
    @_property
    def transport_id(self) -> str: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_TransportId(System.String)
    @transport_id.setter
    def transport_id(self, value: str) -> None: ...
    # Windows.ApplicationModel.Chat.ChatMessageStatus Windows.ApplicationModel.Chat.ChatMessage::get_Status()
    @_property
    def status(self) -> ChatMessageStatus: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_Status(Windows.ApplicationModel.Chat.ChatMessageStatus)
    @status.setter
    def status(self, value: ChatMessageStatus) -> None: ...
    # System.String Windows.ApplicationModel.Chat.ChatMessage::get_From()
    @_property
    def from_(self) -> str: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_From(System.String)
    @from_.setter
    def from_(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Chat.ChatMessage::get_Body()
    @_property
    def body(self) -> str: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_Body(System.String)
    @body.setter
    def body(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Chat.ChatMessage::get_Subject()
    @_property
    def subject(self) -> str: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_Subject(System.String)
    @subject.setter
    def subject(self, value: str) -> None: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatMessage::get_IsRead()
    @_property
    def is_read(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_IsRead(System.Boolean)
    @is_read.setter
    def is_read(self, value: bool) -> None: ...
    # Windows.Foundation.DateTime Windows.ApplicationModel.Chat.ChatMessage::get_NetworkTimestamp()
    @_property
    def network_timestamp(self) -> datetime.datetime: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_NetworkTimestamp(Windows.Foundation.DateTime)
    @network_timestamp.setter
    def network_timestamp(self, value: datetime.datetime) -> None: ...
    # Windows.Foundation.DateTime Windows.ApplicationModel.Chat.ChatMessage::get_LocalTimestamp()
    @_property
    def local_timestamp(self) -> datetime.datetime: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_LocalTimestamp(Windows.Foundation.DateTime)
    @local_timestamp.setter
    def local_timestamp(self, value: datetime.datetime) -> None: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,Windows.ApplicationModel.Chat.ChatMessageStatus> Windows.ApplicationModel.Chat.ChatMessage::get_RecipientSendStatuses()
    @_property
    def recipient_send_statuses(self) -> typing.Mapping[str, ChatMessageStatus]: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Windows.ApplicationModel.Chat.ChatMessage::get_Recipients()
    @_property
    def recipients(self) -> typing.MutableSequence[str]: ...
    # System.String Windows.ApplicationModel.Chat.ChatMessage::get_TransportFriendlyName()
    @_property
    def transport_friendly_name(self) -> str: ...
    # Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Chat.ChatMessageAttachment> Windows.ApplicationModel.Chat.ChatMessage::get_Attachments()
    @_property
    def attachments(self) -> typing.MutableSequence[ChatMessageAttachment]: ...
    # System.String Windows.ApplicationModel.Chat.ChatMessage::get_Id()
    @_property
    def id(self) -> str: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatMessage::get_IsSeen()
    @_property
    def is_seen(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_IsSeen(System.Boolean)
    @is_seen.setter
    def is_seen(self, value: bool) -> None: ...
    # Windows.ApplicationModel.Chat.ChatMessageKind Windows.ApplicationModel.Chat.ChatMessage::get_MessageKind()
    @_property
    def message_kind(self) -> ChatMessageKind: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_MessageKind(Windows.ApplicationModel.Chat.ChatMessageKind)
    @message_kind.setter
    def message_kind(self, value: ChatMessageKind) -> None: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatMessage::get_IsReceivedDuringQuietHours()
    @_property
    def is_received_during_quiet_hours(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_IsReceivedDuringQuietHours(System.Boolean)
    @is_received_during_quiet_hours.setter
    def is_received_during_quiet_hours(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatMessage::get_IsAutoReply()
    @_property
    def is_auto_reply(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_IsAutoReply(System.Boolean)
    @is_auto_reply.setter
    def is_auto_reply(self, value: bool) -> None: ...
    # System.UInt64 Windows.ApplicationModel.Chat.ChatMessage::get_EstimatedDownloadSize()
    @_property
    def estimated_download_size(self) -> winrt.system.UInt64: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_EstimatedDownloadSize(System.UInt64)
    @estimated_download_size.setter
    def estimated_download_size(self, value: winrt.system.UInt64) -> None: ...
    # Windows.ApplicationModel.Chat.ChatConversationThreadingInfo Windows.ApplicationModel.Chat.ChatMessage::get_ThreadingInfo()
    @_property
    def threading_info(self) -> ChatConversationThreadingInfo: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_ThreadingInfo(Windows.ApplicationModel.Chat.ChatConversationThreadingInfo)
    @threading_info.setter
    def threading_info(self, value: ChatConversationThreadingInfo) -> None: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatMessage::get_ShouldSuppressNotification()
    @_property
    def should_suppress_notification(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_ShouldSuppressNotification(System.Boolean)
    @should_suppress_notification.setter
    def should_suppress_notification(self, value: bool) -> None: ...
    # System.String Windows.ApplicationModel.Chat.ChatMessage::get_RemoteId()
    @_property
    def remote_id(self) -> str: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_RemoteId(System.String)
    @remote_id.setter
    def remote_id(self, value: str) -> None: ...
    # Windows.ApplicationModel.Chat.ChatMessageOperatorKind Windows.ApplicationModel.Chat.ChatMessage::get_MessageOperatorKind()
    @_property
    def message_operator_kind(self) -> ChatMessageOperatorKind: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_MessageOperatorKind(Windows.ApplicationModel.Chat.ChatMessageOperatorKind)
    @message_operator_kind.setter
    def message_operator_kind(self, value: ChatMessageOperatorKind) -> None: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatMessage::get_IsReplyDisabled()
    @_property
    def is_reply_disabled(self) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatMessage::get_IsSimMessage()
    @_property
    def is_sim_message(self) -> bool: ...
    # Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Chat.ChatRecipientDeliveryInfo> Windows.ApplicationModel.Chat.ChatMessage::get_RecipientsDeliveryInfos()
    @_property
    def recipients_delivery_infos(self) -> typing.MutableSequence[ChatRecipientDeliveryInfo]: ...
    # System.String Windows.ApplicationModel.Chat.ChatMessage::get_SyncId()
    @_property
    def sync_id(self) -> str: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessage::put_SyncId(System.String)
    @sync_id.setter
    def sync_id(self, value: str) -> None: ...

@typing.final
class ChatMessageAttachment(winrt.system.Object):
    def __new__(cls: typing.Type[Self], mime_type: str, data_stream_reference: windows_storage_streams.IRandomAccessStreamReference) -> Self: ...
    # System.String Windows.ApplicationModel.Chat.ChatMessageAttachment::get_Text()
    @_property
    def text(self) -> str: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessageAttachment::put_Text(System.String)
    @text.setter
    def text(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Chat.ChatMessageAttachment::get_MimeType()
    @_property
    def mime_type(self) -> str: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessageAttachment::put_MimeType(System.String)
    @mime_type.setter
    def mime_type(self, value: str) -> None: ...
    # System.UInt32 Windows.ApplicationModel.Chat.ChatMessageAttachment::get_GroupId()
    @_property
    def group_id(self) -> winrt.system.UInt32: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessageAttachment::put_GroupId(System.UInt32)
    @group_id.setter
    def group_id(self, value: winrt.system.UInt32) -> None: ...
    # Windows.Storage.Streams.IRandomAccessStreamReference Windows.ApplicationModel.Chat.ChatMessageAttachment::get_DataStreamReference()
    @_property
    def data_stream_reference(self) -> windows_storage_streams.IRandomAccessStreamReference: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessageAttachment::put_DataStreamReference(Windows.Storage.Streams.IRandomAccessStreamReference)
    @data_stream_reference.setter
    def data_stream_reference(self, value: windows_storage_streams.IRandomAccessStreamReference) -> None: ...
    # System.Double Windows.ApplicationModel.Chat.ChatMessageAttachment::get_TransferProgress()
    @_property
    def transfer_progress(self) -> winrt.system.Double: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessageAttachment::put_TransferProgress(System.Double)
    @transfer_progress.setter
    def transfer_progress(self, value: winrt.system.Double) -> None: ...
    # Windows.Storage.Streams.IRandomAccessStreamReference Windows.ApplicationModel.Chat.ChatMessageAttachment::get_Thumbnail()
    @_property
    def thumbnail(self) -> windows_storage_streams.IRandomAccessStreamReference: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessageAttachment::put_Thumbnail(Windows.Storage.Streams.IRandomAccessStreamReference)
    @thumbnail.setter
    def thumbnail(self, value: windows_storage_streams.IRandomAccessStreamReference) -> None: ...
    # System.String Windows.ApplicationModel.Chat.ChatMessageAttachment::get_OriginalFileName()
    @_property
    def original_file_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessageAttachment::put_OriginalFileName(System.String)
    @original_file_name.setter
    def original_file_name(self, value: str) -> None: ...

@typing.final
class ChatMessageBlocking_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatMessageBlocking::MarkMessageAsBlockedAsync(System.String,System.Boolean)
    def mark_message_as_blocked_async(cls, local_chat_message_id: str, blocked: bool, /) -> windows_foundation.IAsyncAction: ...

@typing.final
class ChatMessageBlocking(winrt.system.Object, metaclass=ChatMessageBlocking_Static):
    pass

@typing.final
class ChatMessageChange(winrt.system.Object):
    # Windows.ApplicationModel.Chat.ChatMessageChangeType Windows.ApplicationModel.Chat.ChatMessageChange::get_ChangeType()
    @_property
    def change_type(self) -> ChatMessageChangeType: ...
    # Windows.ApplicationModel.Chat.ChatMessage Windows.ApplicationModel.Chat.ChatMessageChange::get_Message()
    @_property
    def message(self) -> ChatMessage: ...

@typing.final
class ChatMessageChangeReader(winrt.system.Object):
    # System.Void Windows.ApplicationModel.Chat.ChatMessageChangeReader::AcceptChanges()
    def accept_changes(self) -> None: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessageChangeReader::AcceptChangesThrough(Windows.ApplicationModel.Chat.ChatMessageChange)
    def accept_changes_through(self, last_change_to_acknowledge: ChatMessageChange, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Chat.ChatMessageChange>> Windows.ApplicationModel.Chat.ChatMessageChangeReader::ReadBatchAsync()
    def read_batch_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[ChatMessageChange]]: ...

@typing.final
class ChatMessageChangeTracker(winrt.system.Object):
    # System.Void Windows.ApplicationModel.Chat.ChatMessageChangeTracker::Enable()
    def enable(self) -> None: ...
    # Windows.ApplicationModel.Chat.ChatMessageChangeReader Windows.ApplicationModel.Chat.ChatMessageChangeTracker::GetChangeReader()
    def get_change_reader(self) -> ChatMessageChangeReader: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessageChangeTracker::Reset()
    def reset(self) -> None: ...

@typing.final
class ChatMessageChangedDeferral(winrt.system.Object):
    # System.Void Windows.ApplicationModel.Chat.ChatMessageChangedDeferral::Complete()
    def complete(self) -> None: ...

@typing.final
class ChatMessageChangedEventArgs(winrt.system.Object):
    # Windows.ApplicationModel.Chat.ChatMessageChangedDeferral Windows.ApplicationModel.Chat.ChatMessageChangedEventArgs::GetDeferral()
    def get_deferral(self) -> ChatMessageChangedDeferral: ...

@typing.final
class ChatMessageManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Chat.ChatMessageTransport> Windows.ApplicationModel.Chat.ChatMessageManager::GetTransportAsync(System.String)
    def get_transport_async(cls, transport_id: str, /) -> windows_foundation.IAsyncOperation[ChatMessageTransport]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Chat.ChatMessageTransport>> Windows.ApplicationModel.Chat.ChatMessageManager::GetTransportsAsync()
    def get_transports_async(cls) -> windows_foundation.IAsyncOperation[typing.Sequence[ChatMessageTransport]]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Chat.ChatMessageManager::RegisterTransportAsync()
    def register_transport_async(cls) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Chat.ChatMessageStore> Windows.ApplicationModel.Chat.ChatMessageManager::RequestStoreAsync()
    def request_store_async(cls) -> windows_foundation.IAsyncOperation[ChatMessageStore]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Chat.ChatSyncManager> Windows.ApplicationModel.Chat.ChatMessageManager::RequestSyncManagerAsync()
    def request_sync_manager_async(cls) -> windows_foundation.IAsyncOperation[ChatSyncManager]: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatMessageManager::ShowComposeSmsMessageAsync(Windows.ApplicationModel.Chat.ChatMessage)
    def show_compose_sms_message_async(cls, message: ChatMessage, /) -> windows_foundation.IAsyncAction: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessageManager::ShowSmsSettings()
    def show_sms_settings(cls) -> None: ...

@typing.final
class ChatMessageManager(winrt.system.Object, metaclass=ChatMessageManager_Static):
    pass

@typing.final
class ChatMessageNotificationTriggerDetails(winrt.system.Object):
    # Windows.ApplicationModel.Chat.ChatMessage Windows.ApplicationModel.Chat.ChatMessageNotificationTriggerDetails::get_ChatMessage()
    @_property
    def chat_message(self) -> ChatMessage: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatMessageNotificationTriggerDetails::get_ShouldDisplayToast()
    @_property
    def should_display_toast(self) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatMessageNotificationTriggerDetails::get_ShouldUpdateActionCenter()
    @_property
    def should_update_action_center(self) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatMessageNotificationTriggerDetails::get_ShouldUpdateBadge()
    @_property
    def should_update_badge(self) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatMessageNotificationTriggerDetails::get_ShouldUpdateDetailText()
    @_property
    def should_update_detail_text(self) -> bool: ...

@typing.final
class ChatMessageReader(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Chat.ChatMessage>> Windows.ApplicationModel.Chat.ChatMessageReader::ReadBatchAsync()
    def read_batch_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[ChatMessage]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Chat.ChatMessage>> Windows.ApplicationModel.Chat.ChatMessageReader::ReadBatchAsync(System.Int32)
    def read_batch_with_count_async(self, count: winrt.system.Int32, /) -> windows_foundation.IAsyncOperation[typing.Sequence[ChatMessage]]: ...

@typing.final
class ChatMessageStore(winrt.system.Object):
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatMessageStore::DeleteMessageAsync(System.String)
    def delete_message_async(self, local_message_id: str, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatMessageStore::DownloadMessageAsync(System.String)
    def download_message_async(self, local_chat_message_id: str, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Chat.ChatMessage> Windows.ApplicationModel.Chat.ChatMessageStore::ForwardMessageAsync(System.String,Windows.Foundation.Collections.IIterable`1<System.String>)
    def forward_message_async(self, local_chat_message_id: str, addresses: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[ChatMessage]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Chat.ChatConversation> Windows.ApplicationModel.Chat.ChatMessageStore::GetConversationAsync(System.String)
    def get_conversation_async(self, conversation_id: str, /) -> windows_foundation.IAsyncOperation[ChatConversation]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Chat.ChatConversation> Windows.ApplicationModel.Chat.ChatMessageStore::GetConversationAsync(System.String,Windows.Foundation.Collections.IIterable`1<System.String>)
    def get_conversation_for_transports_async(self, conversation_id: str, transport_ids: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[ChatConversation]: ...
    # Windows.ApplicationModel.Chat.ChatConversationReader Windows.ApplicationModel.Chat.ChatMessageStore::GetConversationReader(Windows.Foundation.Collections.IIterable`1<System.String>)
    def get_conversation_for_transports_reader(self, transport_ids: typing.Iterable[str], /) -> ChatConversationReader: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Chat.ChatConversation> Windows.ApplicationModel.Chat.ChatMessageStore::GetConversationFromThreadingInfoAsync(Windows.ApplicationModel.Chat.ChatConversationThreadingInfo)
    def get_conversation_from_threading_info_async(self, threading_info: ChatConversationThreadingInfo, /) -> windows_foundation.IAsyncOperation[ChatConversation]: ...
    # Windows.ApplicationModel.Chat.ChatConversationReader Windows.ApplicationModel.Chat.ChatMessageStore::GetConversationReader()
    def get_conversation_reader(self) -> ChatConversationReader: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Chat.ChatMessage> Windows.ApplicationModel.Chat.ChatMessageStore::GetMessageAsync(System.String)
    def get_message_async(self, local_chat_message_id: str, /) -> windows_foundation.IAsyncOperation[ChatMessage]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Chat.ChatMessage> Windows.ApplicationModel.Chat.ChatMessageStore::GetMessageByRemoteIdAsync(System.String,System.String)
    def get_message_by_remote_id_async(self, transport_id: str, remote_id: str, /) -> windows_foundation.IAsyncOperation[ChatMessage]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Chat.ChatMessage> Windows.ApplicationModel.Chat.ChatMessageStore::GetMessageBySyncIdAsync(System.String)
    def get_message_by_sync_id_async(self, sync_id: str, /) -> windows_foundation.IAsyncOperation[ChatMessage]: ...
    # Windows.ApplicationModel.Chat.ChatMessageReader Windows.ApplicationModel.Chat.ChatMessageStore::GetMessageReader()
    def get_message_reader1(self) -> ChatMessageReader: ...
    # Windows.ApplicationModel.Chat.ChatMessageReader Windows.ApplicationModel.Chat.ChatMessageStore::GetMessageReader(Windows.Foundation.TimeSpan)
    def get_message_reader2(self, recent_time_limit: datetime.timedelta, /) -> ChatMessageReader: ...
    # Windows.ApplicationModel.Chat.ChatSearchReader Windows.ApplicationModel.Chat.ChatMessageStore::GetSearchReader(Windows.ApplicationModel.Chat.ChatQueryOptions)
    def get_search_reader(self, value: ChatQueryOptions, /) -> ChatSearchReader: ...
    # Windows.Foundation.IAsyncOperation`1<System.Int32> Windows.ApplicationModel.Chat.ChatMessageStore::GetUnseenCountAsync()
    def get_unseen_count_async(self) -> windows_foundation.IAsyncOperation[winrt.system.Int32]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Int32> Windows.ApplicationModel.Chat.ChatMessageStore::GetUnseenCountAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def get_unseen_count_for_transports_reader_async(self, transport_ids: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[winrt.system.Int32]: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatMessageStore::MarkAsSeenAsync()
    def mark_as_seen_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatMessageStore::MarkAsSeenAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def mark_as_seen_for_transports_async(self, transport_ids: typing.Iterable[str], /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatMessageStore::MarkMessageReadAsync(System.String)
    def mark_message_read_async(self, local_chat_message_id: str, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatMessageStore::RetrySendMessageAsync(System.String)
    def retry_send_message_async(self, local_chat_message_id: str, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatMessageStore::SaveMessageAsync(Windows.ApplicationModel.Chat.ChatMessage)
    def save_message_async(self, chat_message: ChatMessage, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatMessageStore::SendMessageAsync(Windows.ApplicationModel.Chat.ChatMessage)
    def send_message_async(self, chat_message: ChatMessage, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Chat.ChatMessageStore::TryCancelDownloadMessageAsync(System.String)
    def try_cancel_download_message_async(self, local_chat_message_id: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Chat.ChatMessageStore::TryCancelSendMessageAsync(System.String)
    def try_cancel_send_message_async(self, local_chat_message_id: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.ApplicationModel.Chat.ChatMessageValidationResult Windows.ApplicationModel.Chat.ChatMessageStore::ValidateMessage(Windows.ApplicationModel.Chat.ChatMessage)
    def validate_message(self, chat_message: ChatMessage, /) -> ChatMessageValidationResult: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Chat.ChatMessageStore::add_MessageChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Chat.ChatMessageStore,Windows.ApplicationModel.Chat.ChatMessageChangedEventArgs>)
    def add_message_changed(self, value: windows_foundation.TypedEventHandler[ChatMessageStore, ChatMessageChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessageStore::remove_MessageChanged(Windows.Foundation.EventRegistrationToken)
    def remove_message_changed(self, value: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Chat.ChatMessageStore::add_StoreChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Chat.ChatMessageStore,Windows.ApplicationModel.Chat.ChatMessageStoreChangedEventArgs>)
    def add_store_changed(self, handler: windows_foundation.TypedEventHandler[ChatMessageStore, ChatMessageStoreChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Chat.ChatMessageStore::remove_StoreChanged(Windows.Foundation.EventRegistrationToken)
    def remove_store_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.ApplicationModel.Chat.ChatMessageChangeTracker Windows.ApplicationModel.Chat.ChatMessageStore::get_ChangeTracker()
    @_property
    def change_tracker(self) -> ChatMessageChangeTracker: ...

@typing.final
class ChatMessageStoreChangedEventArgs(winrt.system.Object):
    # System.String Windows.ApplicationModel.Chat.ChatMessageStoreChangedEventArgs::get_Id()
    @_property
    def id(self) -> str: ...
    # Windows.ApplicationModel.Chat.ChatStoreChangedEventKind Windows.ApplicationModel.Chat.ChatMessageStoreChangedEventArgs::get_Kind()
    @_property
    def kind(self) -> ChatStoreChangedEventKind: ...

@typing.final
class ChatMessageTransport(winrt.system.Object):
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatMessageTransport::RequestSetAsNotificationProviderAsync()
    def request_set_as_notification_provider_async(self) -> windows_foundation.IAsyncAction: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatMessageTransport::get_IsActive()
    @_property
    def is_active(self) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatMessageTransport::get_IsAppSetAsNotificationProvider()
    @_property
    def is_app_set_as_notification_provider(self) -> bool: ...
    # System.String Windows.ApplicationModel.Chat.ChatMessageTransport::get_TransportFriendlyName()
    @_property
    def transport_friendly_name(self) -> str: ...
    # System.String Windows.ApplicationModel.Chat.ChatMessageTransport::get_TransportId()
    @_property
    def transport_id(self) -> str: ...
    # Windows.ApplicationModel.Chat.ChatMessageTransportConfiguration Windows.ApplicationModel.Chat.ChatMessageTransport::get_Configuration()
    @_property
    def configuration(self) -> ChatMessageTransportConfiguration: ...
    # Windows.ApplicationModel.Chat.ChatMessageTransportKind Windows.ApplicationModel.Chat.ChatMessageTransport::get_TransportKind()
    @_property
    def transport_kind(self) -> ChatMessageTransportKind: ...

@typing.final
class ChatMessageTransportConfiguration(winrt.system.Object):
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Object> Windows.ApplicationModel.Chat.ChatMessageTransportConfiguration::get_ExtendedProperties()
    @_property
    def extended_properties(self) -> typing.Mapping[str, winrt.system.Object]: ...
    # System.Int32 Windows.ApplicationModel.Chat.ChatMessageTransportConfiguration::get_MaxAttachmentCount()
    @_property
    def max_attachment_count(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.ApplicationModel.Chat.ChatMessageTransportConfiguration::get_MaxMessageSizeInKilobytes()
    @_property
    def max_message_size_in_kilobytes(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.ApplicationModel.Chat.ChatMessageTransportConfiguration::get_MaxRecipientCount()
    @_property
    def max_recipient_count(self) -> winrt.system.Int32: ...
    # Windows.Media.MediaProperties.MediaEncodingProfile Windows.ApplicationModel.Chat.ChatMessageTransportConfiguration::get_SupportedVideoFormat()
    @_property
    def supported_video_format(self) -> windows_media_mediaproperties.MediaEncodingProfile: ...

@typing.final
class ChatMessageValidationResult(winrt.system.Object):
    # Windows.Foundation.IReference`1<System.UInt32> Windows.ApplicationModel.Chat.ChatMessageValidationResult::get_MaxPartCount()
    @_property
    def max_part_count(self) -> typing.Optional[winrt.system.UInt32]: ...
    # Windows.Foundation.IReference`1<System.UInt32> Windows.ApplicationModel.Chat.ChatMessageValidationResult::get_PartCount()
    @_property
    def part_count(self) -> typing.Optional[winrt.system.UInt32]: ...
    # Windows.Foundation.IReference`1<System.UInt32> Windows.ApplicationModel.Chat.ChatMessageValidationResult::get_RemainingCharacterCountInPart()
    @_property
    def remaining_character_count_in_part(self) -> typing.Optional[winrt.system.UInt32]: ...
    # Windows.ApplicationModel.Chat.ChatMessageValidationStatus Windows.ApplicationModel.Chat.ChatMessageValidationResult::get_Status()
    @_property
    def status(self) -> ChatMessageValidationStatus: ...

@typing.final
class ChatQueryOptions(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.ApplicationModel.Chat.ChatQueryOptions::get_SearchString()
    @_property
    def search_string(self) -> str: ...
    # System.Void Windows.ApplicationModel.Chat.ChatQueryOptions::put_SearchString(System.String)
    @search_string.setter
    def search_string(self, value: str) -> None: ...

@typing.final
class ChatRecipientDeliveryInfo(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.ApplicationModel.Chat.ChatRecipientDeliveryInfo::get_TransportAddress()
    @_property
    def transport_address(self) -> str: ...
    # System.Void Windows.ApplicationModel.Chat.ChatRecipientDeliveryInfo::put_TransportAddress(System.String)
    @transport_address.setter
    def transport_address(self, value: str) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.DateTime> Windows.ApplicationModel.Chat.ChatRecipientDeliveryInfo::get_ReadTime()
    @_property
    def read_time(self) -> typing.Optional[datetime.datetime]: ...
    # System.Void Windows.ApplicationModel.Chat.ChatRecipientDeliveryInfo::put_ReadTime(Windows.Foundation.IReference`1<Windows.Foundation.DateTime>)
    @read_time.setter
    def read_time(self, value: typing.Optional[datetime.datetime]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.DateTime> Windows.ApplicationModel.Chat.ChatRecipientDeliveryInfo::get_DeliveryTime()
    @_property
    def delivery_time(self) -> typing.Optional[datetime.datetime]: ...
    # System.Void Windows.ApplicationModel.Chat.ChatRecipientDeliveryInfo::put_DeliveryTime(Windows.Foundation.IReference`1<Windows.Foundation.DateTime>)
    @delivery_time.setter
    def delivery_time(self, value: typing.Optional[datetime.datetime]) -> None: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatRecipientDeliveryInfo::get_IsErrorPermanent()
    @_property
    def is_error_permanent(self) -> bool: ...
    # Windows.ApplicationModel.Chat.ChatMessageStatus Windows.ApplicationModel.Chat.ChatRecipientDeliveryInfo::get_Status()
    @_property
    def status(self) -> ChatMessageStatus: ...
    # System.Int32 Windows.ApplicationModel.Chat.ChatRecipientDeliveryInfo::get_TransportErrorCode()
    @_property
    def transport_error_code(self) -> winrt.system.Int32: ...
    # Windows.ApplicationModel.Chat.ChatTransportErrorCodeCategory Windows.ApplicationModel.Chat.ChatRecipientDeliveryInfo::get_TransportErrorCodeCategory()
    @_property
    def transport_error_code_category(self) -> ChatTransportErrorCodeCategory: ...
    # Windows.ApplicationModel.Chat.ChatTransportInterpretedErrorCode Windows.ApplicationModel.Chat.ChatRecipientDeliveryInfo::get_TransportInterpretedErrorCode()
    @_property
    def transport_interpreted_error_code(self) -> ChatTransportInterpretedErrorCode: ...

@typing.final
class ChatSearchReader(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Chat.IChatItem>> Windows.ApplicationModel.Chat.ChatSearchReader::ReadBatchAsync()
    def read_batch_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[IChatItem]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Chat.IChatItem>> Windows.ApplicationModel.Chat.ChatSearchReader::ReadBatchAsync(System.Int32)
    def read_batch_with_count_async(self, count: winrt.system.Int32, /) -> windows_foundation.IAsyncOperation[typing.Sequence[IChatItem]]: ...

@typing.final
class ChatSyncConfiguration(winrt.system.Object):
    # Windows.ApplicationModel.Chat.ChatRestoreHistorySpan Windows.ApplicationModel.Chat.ChatSyncConfiguration::get_RestoreHistorySpan()
    @_property
    def restore_history_span(self) -> ChatRestoreHistorySpan: ...
    # System.Void Windows.ApplicationModel.Chat.ChatSyncConfiguration::put_RestoreHistorySpan(Windows.ApplicationModel.Chat.ChatRestoreHistorySpan)
    @restore_history_span.setter
    def restore_history_span(self, value: ChatRestoreHistorySpan) -> None: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatSyncConfiguration::get_IsSyncEnabled()
    @_property
    def is_sync_enabled(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Chat.ChatSyncConfiguration::put_IsSyncEnabled(System.Boolean)
    @is_sync_enabled.setter
    def is_sync_enabled(self, value: bool) -> None: ...

@typing.final
class ChatSyncManager(winrt.system.Object):
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatSyncManager::AssociateAccountAsync(Windows.Security.Credentials.WebAccount)
    def associate_account_async(self, web_account: windows_security_credentials.WebAccount, /) -> windows_foundation.IAsyncAction: ...
    # System.Boolean Windows.ApplicationModel.Chat.ChatSyncManager::IsAccountAssociated(Windows.Security.Credentials.WebAccount)
    def is_account_associated(self, web_account: windows_security_credentials.WebAccount, /) -> bool: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatSyncManager::SetConfigurationAsync(Windows.ApplicationModel.Chat.ChatSyncConfiguration)
    def set_configuration_async(self, configuration: ChatSyncConfiguration, /) -> windows_foundation.IAsyncAction: ...
    # System.Void Windows.ApplicationModel.Chat.ChatSyncManager::StartSync()
    def start_sync(self) -> None: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.ChatSyncManager::UnassociateAccountAsync()
    def unassociate_account_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.ApplicationModel.Chat.ChatSyncConfiguration Windows.ApplicationModel.Chat.ChatSyncManager::get_Configuration()
    @_property
    def configuration(self) -> ChatSyncConfiguration: ...

@typing.final
class RcsEndUserMessage(winrt.system.Object):
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.RcsEndUserMessage::SendResponseAsync(Windows.ApplicationModel.Chat.RcsEndUserMessageAction)
    def send_response_async(self, action: RcsEndUserMessageAction, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.RcsEndUserMessage::SendResponseWithPinAsync(Windows.ApplicationModel.Chat.RcsEndUserMessageAction,System.String)
    def send_response_with_pin_async(self, action: RcsEndUserMessageAction, pin: str, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Chat.RcsEndUserMessageAction> Windows.ApplicationModel.Chat.RcsEndUserMessage::get_Actions()
    @_property
    def actions(self) -> typing.Sequence[RcsEndUserMessageAction]: ...
    # System.Boolean Windows.ApplicationModel.Chat.RcsEndUserMessage::get_IsPinRequired()
    @_property
    def is_pin_required(self) -> bool: ...
    # System.String Windows.ApplicationModel.Chat.RcsEndUserMessage::get_Text()
    @_property
    def text(self) -> str: ...
    # System.String Windows.ApplicationModel.Chat.RcsEndUserMessage::get_Title()
    @_property
    def title(self) -> str: ...
    # System.String Windows.ApplicationModel.Chat.RcsEndUserMessage::get_TransportId()
    @_property
    def transport_id(self) -> str: ...

@typing.final
class RcsEndUserMessageAction(winrt.system.Object):
    # System.String Windows.ApplicationModel.Chat.RcsEndUserMessageAction::get_Label()
    @_property
    def label(self) -> str: ...

@typing.final
class RcsEndUserMessageAvailableEventArgs(winrt.system.Object):
    # System.Boolean Windows.ApplicationModel.Chat.RcsEndUserMessageAvailableEventArgs::get_IsMessageAvailable()
    @_property
    def is_message_available(self) -> bool: ...
    # Windows.ApplicationModel.Chat.RcsEndUserMessage Windows.ApplicationModel.Chat.RcsEndUserMessageAvailableEventArgs::get_Message()
    @_property
    def message(self) -> RcsEndUserMessage: ...

@typing.final
class RcsEndUserMessageAvailableTriggerDetails(winrt.system.Object):
    # System.String Windows.ApplicationModel.Chat.RcsEndUserMessageAvailableTriggerDetails::get_Text()
    @_property
    def text(self) -> str: ...
    # System.String Windows.ApplicationModel.Chat.RcsEndUserMessageAvailableTriggerDetails::get_Title()
    @_property
    def title(self) -> str: ...

@typing.final
class RcsEndUserMessageManager(winrt.system.Object):
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Chat.RcsEndUserMessageManager::add_MessageAvailableChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Chat.RcsEndUserMessageManager,Windows.ApplicationModel.Chat.RcsEndUserMessageAvailableEventArgs>)
    def add_message_available_changed(self, handler: windows_foundation.TypedEventHandler[RcsEndUserMessageManager, RcsEndUserMessageAvailableEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Chat.RcsEndUserMessageManager::remove_MessageAvailableChanged(Windows.Foundation.EventRegistrationToken)
    def remove_message_available_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class RcsManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.ApplicationModel.Chat.RcsEndUserMessageManager Windows.ApplicationModel.Chat.RcsManager::GetEndUserMessageManager()
    def get_end_user_message_manager(cls) -> RcsEndUserMessageManager: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Chat.RcsTransport> Windows.ApplicationModel.Chat.RcsManager::GetTransportAsync(System.String)
    def get_transport_async(cls, transport_id: str, /) -> windows_foundation.IAsyncOperation[RcsTransport]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Chat.RcsTransport>> Windows.ApplicationModel.Chat.RcsManager::GetTransportsAsync()
    def get_transports_async(cls) -> windows_foundation.IAsyncOperation[typing.Sequence[RcsTransport]]: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Chat.RcsManager::LeaveConversationAsync(Windows.ApplicationModel.Chat.ChatConversation)
    def leave_conversation_async(cls, conversation: ChatConversation, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Chat.RcsManager::add_TransportListChanged(Windows.Foundation.EventHandler`1<System.Object>)
    def add_transport_list_changed(cls, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Chat.RcsManager::remove_TransportListChanged(Windows.Foundation.EventRegistrationToken)
    def remove_transport_list_changed(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class RcsManager(winrt.system.Object, metaclass=RcsManager_Static):
    pass

@typing.final
class RcsServiceKindSupportedChangedEventArgs(winrt.system.Object):
    # Windows.ApplicationModel.Chat.RcsServiceKind Windows.ApplicationModel.Chat.RcsServiceKindSupportedChangedEventArgs::get_ServiceKind()
    @_property
    def service_kind(self) -> RcsServiceKind: ...

@typing.final
class RcsTransport(winrt.system.Object):
    # System.Boolean Windows.ApplicationModel.Chat.RcsTransport::IsServiceKindSupported(Windows.ApplicationModel.Chat.RcsServiceKind)
    def is_service_kind_supported(self, service_kind: RcsServiceKind, /) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Chat.RcsTransport::IsStoreAndForwardEnabled(Windows.ApplicationModel.Chat.RcsServiceKind)
    def is_store_and_forward_enabled(self, service_kind: RcsServiceKind, /) -> bool: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Chat.RcsTransport::add_ServiceKindSupportedChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Chat.RcsTransport,Windows.ApplicationModel.Chat.RcsServiceKindSupportedChangedEventArgs>)
    def add_service_kind_supported_changed(self, handler: windows_foundation.TypedEventHandler[RcsTransport, RcsServiceKindSupportedChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Chat.RcsTransport::remove_ServiceKindSupportedChanged(Windows.Foundation.EventRegistrationToken)
    def remove_service_kind_supported_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.ApplicationModel.Chat.RcsTransportConfiguration Windows.ApplicationModel.Chat.RcsTransport::get_Configuration()
    @_property
    def configuration(self) -> RcsTransportConfiguration: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Object> Windows.ApplicationModel.Chat.RcsTransport::get_ExtendedProperties()
    @_property
    def extended_properties(self) -> typing.Mapping[str, winrt.system.Object]: ...
    # System.Boolean Windows.ApplicationModel.Chat.RcsTransport::get_IsActive()
    @_property
    def is_active(self) -> bool: ...
    # System.String Windows.ApplicationModel.Chat.RcsTransport::get_TransportFriendlyName()
    @_property
    def transport_friendly_name(self) -> str: ...
    # System.String Windows.ApplicationModel.Chat.RcsTransport::get_TransportId()
    @_property
    def transport_id(self) -> str: ...

@typing.final
class RcsTransportConfiguration(winrt.system.Object):
    # System.Int32 Windows.ApplicationModel.Chat.RcsTransportConfiguration::get_MaxAttachmentCount()
    @_property
    def max_attachment_count(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.ApplicationModel.Chat.RcsTransportConfiguration::get_MaxFileSizeInKilobytes()
    @_property
    def max_file_size_in_kilobytes(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.ApplicationModel.Chat.RcsTransportConfiguration::get_MaxGroupMessageSizeInKilobytes()
    @_property
    def max_group_message_size_in_kilobytes(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.ApplicationModel.Chat.RcsTransportConfiguration::get_MaxMessageSizeInKilobytes()
    @_property
    def max_message_size_in_kilobytes(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.ApplicationModel.Chat.RcsTransportConfiguration::get_MaxRecipientCount()
    @_property
    def max_recipient_count(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.ApplicationModel.Chat.RcsTransportConfiguration::get_WarningFileSizeInKilobytes()
    @_property
    def warning_file_size_in_kilobytes(self) -> winrt.system.Int32: ...

@typing.final
class RemoteParticipantComposingChangedEventArgs(winrt.system.Object):
    # System.Boolean Windows.ApplicationModel.Chat.RemoteParticipantComposingChangedEventArgs::get_IsComposing()
    @_property
    def is_composing(self) -> bool: ...
    # System.String Windows.ApplicationModel.Chat.RemoteParticipantComposingChangedEventArgs::get_ParticipantAddress()
    @_property
    def participant_address(self) -> str: ...
    # System.String Windows.ApplicationModel.Chat.RemoteParticipantComposingChangedEventArgs::get_TransportId()
    @_property
    def transport_id(self) -> str: ...

@typing.final
class _IChatItem: ...

class IChatItem(winrt._winrt.IInspectable):
    # Windows.ApplicationModel.Chat.ChatItemKind Windows.ApplicationModel.Chat.IChatItem::get_ItemKind()
    @_property
    @abstractmethod
    def item_kind(self) -> ChatItemKind: ...

