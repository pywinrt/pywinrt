// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#pragma once

#include "pybase.h"
static_assert(winrt::check_version(PYWINRT_VERSION, "0.0.0"), "Mismatched Py/WinRT headers.");

#if __has_include("py.Windows.Foundation.h")
#include "py.Windows.Foundation.h"
#endif

#include <winrt/Windows.Foundation.h>

#include <winrt/Microsoft.UI.Xaml.Interop.h>

namespace py::proj::Microsoft::UI::Xaml::Interop
{
}

namespace py::impl::Microsoft::UI::Xaml::Interop
{
    struct BindableVectorChangedEventHandler
    {
        static winrt::Microsoft::UI::Xaml::Interop::BindableVectorChangedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::Microsoft::UI::Xaml::Interop::IBindableObservableVector const& param0, winrt::Windows::Foundation::IInspectable const& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct NotifyCollectionChangedEventHandler
    {
        static winrt::Microsoft::UI::Xaml::Interop::NotifyCollectionChangedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::Windows::Foundation::IInspectable const& param0, winrt::Microsoft::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };
}

namespace py::wrapper::Microsoft::UI::Xaml::Interop
{
    using NotifyCollectionChangedEventArgs = py::winrt_wrapper<winrt::Microsoft::UI::Xaml::Interop::NotifyCollectionChangedEventArgs>;
    using IBindableIterable = py::winrt_wrapper<winrt::Microsoft::UI::Xaml::Interop::IBindableIterable>;
    using IBindableIterator = py::winrt_wrapper<winrt::Microsoft::UI::Xaml::Interop::IBindableIterator>;
    using IBindableObservableVector = py::winrt_wrapper<winrt::Microsoft::UI::Xaml::Interop::IBindableObservableVector>;
    using IBindableVector = py::winrt_wrapper<winrt::Microsoft::UI::Xaml::Interop::IBindableVector>;
    using IBindableVectorView = py::winrt_wrapper<winrt::Microsoft::UI::Xaml::Interop::IBindableVectorView>;
    using INotifyCollectionChanged = py::winrt_wrapper<winrt::Microsoft::UI::Xaml::Interop::INotifyCollectionChanged>;
}

namespace py
{
    template<>
    inline constexpr const char* buffer_format<winrt::Microsoft::UI::Xaml::Interop::NotifyCollectionChangedAction> = "i";


    template<>
    struct py_type<winrt::Microsoft::UI::Xaml::Interop::NotifyCollectionChangedAction>
    {
        static constexpr std::string_view qualified_name = "winrt.microsoft.ui.xaml.interop.NotifyCollectionChangedAction";
        static constexpr const char* module_name = "winrt.microsoft.ui.xaml.interop";
        static constexpr const char* type_name = "NotifyCollectionChangedAction";
    };

    template<>
    struct py_type<winrt::Microsoft::UI::Xaml::Interop::NotifyCollectionChangedEventArgs>
    {
        static constexpr std::string_view qualified_name = "winrt.microsoft.ui.xaml.interop.NotifyCollectionChangedEventArgs";
        static constexpr const char* module_name = "winrt.microsoft.ui.xaml.interop";
        static constexpr const char* type_name = "NotifyCollectionChangedEventArgs";
    };

    template<>
    struct py_type<winrt::Microsoft::UI::Xaml::Interop::IBindableIterable>
    {
        static constexpr std::string_view qualified_name = "winrt.microsoft.ui.xaml.interop._IBindableIterable";
        static constexpr const char* module_name = "winrt.microsoft.ui.xaml.interop";
        static constexpr const char* type_name = "_IBindableIterable";
    };

    template<>
    struct py_type<winrt::Microsoft::UI::Xaml::Interop::IBindableIterator>
    {
        static constexpr std::string_view qualified_name = "winrt.microsoft.ui.xaml.interop._IBindableIterator";
        static constexpr const char* module_name = "winrt.microsoft.ui.xaml.interop";
        static constexpr const char* type_name = "_IBindableIterator";
    };

    template<>
    struct py_type<winrt::Microsoft::UI::Xaml::Interop::IBindableObservableVector>
    {
        static constexpr std::string_view qualified_name = "winrt.microsoft.ui.xaml.interop._IBindableObservableVector";
        static constexpr const char* module_name = "winrt.microsoft.ui.xaml.interop";
        static constexpr const char* type_name = "_IBindableObservableVector";
    };

    template<>
    struct py_type<winrt::Microsoft::UI::Xaml::Interop::IBindableVector>
    {
        static constexpr std::string_view qualified_name = "winrt.microsoft.ui.xaml.interop._IBindableVector";
        static constexpr const char* module_name = "winrt.microsoft.ui.xaml.interop";
        static constexpr const char* type_name = "_IBindableVector";
    };

    template<>
    struct py_type<winrt::Microsoft::UI::Xaml::Interop::IBindableVectorView>
    {
        static constexpr std::string_view qualified_name = "winrt.microsoft.ui.xaml.interop._IBindableVectorView";
        static constexpr const char* module_name = "winrt.microsoft.ui.xaml.interop";
        static constexpr const char* type_name = "_IBindableVectorView";
    };

    template<>
    struct py_type<winrt::Microsoft::UI::Xaml::Interop::INotifyCollectionChanged>
    {
        static constexpr std::string_view qualified_name = "winrt.microsoft.ui.xaml.interop._INotifyCollectionChanged";
        static constexpr const char* module_name = "winrt.microsoft.ui.xaml.interop";
        static constexpr const char* type_name = "_INotifyCollectionChanged";
    };
    template <>
    struct delegate_python_type<winrt::Microsoft::UI::Xaml::Interop::BindableVectorChangedEventHandler>
    {
        using type = py::impl::Microsoft::UI::Xaml::Interop::BindableVectorChangedEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Microsoft::UI::Xaml::Interop::NotifyCollectionChangedEventHandler>
    {
        using type = py::impl::Microsoft::UI::Xaml::Interop::NotifyCollectionChangedEventHandler;
    };

}
