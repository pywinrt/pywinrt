// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240111.5

#pragma once
#ifndef WINRT_Microsoft_Windows_Widgets_Providers_H
#define WINRT_Microsoft_Windows_Widgets_Providers_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.240111.5"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.240111.5"
#include "winrt/Microsoft.Windows.Widgets.h"
#include "winrt/impl/Microsoft.Windows.Widgets.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Windows.Storage.Streams.2.h"
#include "winrt/impl/Microsoft.Windows.Widgets.Providers.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetActionInvokedArgs<D>::WidgetContext() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetActionInvokedArgs)->get_WidgetContext(&value));
        return winrt::Microsoft::Windows::Widgets::Providers::WidgetContext{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetActionInvokedArgs<D>::Verb() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetActionInvokedArgs)->get_Verb(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetActionInvokedArgs<D>::Data() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetActionInvokedArgs)->get_Data(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetActionInvokedArgs<D>::CustomState() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetActionInvokedArgs)->get_CustomState(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetAnalyticsInfoReportedArgs<D>::WidgetContext() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetAnalyticsInfoReportedArgs)->get_WidgetContext(&value));
        return winrt::Microsoft::Windows::Widgets::Providers::WidgetContext{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetAnalyticsInfoReportedArgs<D>::AnalyticsJson() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetAnalyticsInfoReportedArgs)->get_AnalyticsJson(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetContext<D>::Id() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetContext)->get_Id(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetContext<D>::DefinitionId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetContext)->get_DefinitionId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetContext<D>::Size() const
    {
        winrt::Microsoft::Windows::Widgets::WidgetSize value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetContext)->get_Size(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetContext<D>::IsActive() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetContext)->get_IsActive(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetContextChangedArgs<D>::WidgetContext() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetContextChangedArgs)->get_WidgetContext(&value));
        return winrt::Microsoft::Windows::Widgets::Providers::WidgetContext{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetCustomizationRequestedArgs<D>::WidgetContext() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetCustomizationRequestedArgs)->get_WidgetContext(&value));
        return winrt::Microsoft::Windows::Widgets::Providers::WidgetContext{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetCustomizationRequestedArgs<D>::CustomState() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetCustomizationRequestedArgs)->get_CustomState(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetErrorInfoReportedArgs<D>::WidgetContext() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetErrorInfoReportedArgs)->get_WidgetContext(&value));
        return winrt::Microsoft::Windows::Widgets::Providers::WidgetContext{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetErrorInfoReportedArgs<D>::ErrorJson() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetErrorInfoReportedArgs)->get_ErrorJson(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetInfo<D>::WidgetContext() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetInfo)->get_WidgetContext(&value));
        return winrt::Microsoft::Windows::Widgets::Providers::WidgetContext{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetInfo<D>::Template() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetInfo)->get_Template(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetInfo<D>::Data() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetInfo)->get_Data(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetInfo<D>::CustomState() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetInfo)->get_CustomState(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetInfo<D>::LastUpdateTime() const
    {
        winrt::Windows::Foundation::DateTime value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetInfo)->get_LastUpdateTime(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetInfo2<D>::IsPlaceholderContent() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetInfo2)->get_IsPlaceholderContent(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetManager<D>::UpdateWidget(winrt::Microsoft::Windows::Widgets::Providers::WidgetUpdateRequestOptions const& widgetUpdateRequestOptions) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetManager)->UpdateWidget(*(void**)(&widgetUpdateRequestOptions)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetManager<D>::GetWidgetIds() const
    {
        uint32_t result_impl_size{};
        void** result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetManager)->GetWidgetIds(&result_impl_size, &result));
        return com_array<hstring>{ result, result_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetManager<D>::GetWidgetInfo(param::hstring const& widgetId) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetManager)->GetWidgetInfo(*(void**)(&widgetId), &result));
        return winrt::Microsoft::Windows::Widgets::Providers::WidgetInfo{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetManager<D>::GetWidgetInfos() const
    {
        uint32_t result_impl_size{};
        void** result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetManager)->GetWidgetInfos(&result_impl_size, &result));
        return com_array<winrt::Microsoft::Windows::Widgets::Providers::WidgetInfo>{ result, result_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetManager<D>::DeleteWidget(param::hstring const& widgetId) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetManager)->DeleteWidget(*(void**)(&widgetId)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetManager2<D>::SendMessageToContent(param::hstring const& widgetId, param::hstring const& message) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetManager2)->SendMessageToContent(*(void**)(&widgetId), *(void**)(&message)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetManagerStatics<D>::GetDefault() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetManagerStatics)->GetDefault(&result));
        return winrt::Microsoft::Windows::Widgets::Providers::WidgetManager{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetMessageReceivedArgs<D>::WidgetContext() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetMessageReceivedArgs)->get_WidgetContext(&value));
        return winrt::Microsoft::Windows::Widgets::Providers::WidgetContext{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetMessageReceivedArgs<D>::Message() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetMessageReceivedArgs)->get_Message(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetProvider<D>::CreateWidget(winrt::Microsoft::Windows::Widgets::Providers::WidgetContext const& widgetContext) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetProvider)->CreateWidget(*(void**)(&widgetContext)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetProvider<D>::DeleteWidget(param::hstring const& widgetId, param::hstring const& customState) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetProvider)->DeleteWidget(*(void**)(&widgetId), *(void**)(&customState)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetProvider<D>::OnActionInvoked(winrt::Microsoft::Windows::Widgets::Providers::WidgetActionInvokedArgs const& actionInvokedArgs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetProvider)->OnActionInvoked(*(void**)(&actionInvokedArgs)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetProvider<D>::OnWidgetContextChanged(winrt::Microsoft::Windows::Widgets::Providers::WidgetContextChangedArgs const& contextChangedArgs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetProvider)->OnWidgetContextChanged(*(void**)(&contextChangedArgs)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetProvider<D>::Activate(winrt::Microsoft::Windows::Widgets::Providers::WidgetContext const& widgetContext) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetProvider)->Activate(*(void**)(&widgetContext)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetProvider<D>::Deactivate(param::hstring const& widgetId) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetProvider)->Deactivate(*(void**)(&widgetId)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetProvider2<D>::OnCustomizationRequested(winrt::Microsoft::Windows::Widgets::Providers::WidgetCustomizationRequestedArgs const& customizationRequestedArgs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetProvider2)->OnCustomizationRequested(*(void**)(&customizationRequestedArgs)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetProviderAnalytics<D>::OnAnalyticsInfoReported(winrt::Microsoft::Windows::Widgets::Providers::WidgetAnalyticsInfoReportedArgs const& args) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetProviderAnalytics)->OnAnalyticsInfoReported(*(void**)(&args)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetProviderErrors<D>::OnErrorInfoReported(winrt::Microsoft::Windows::Widgets::Providers::WidgetErrorInfoReportedArgs const& args) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetProviderErrors)->OnErrorInfoReported(*(void**)(&args)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetProviderMessage<D>::OnMessageReceived(winrt::Microsoft::Windows::Widgets::Providers::WidgetMessageReceivedArgs const& args) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetProviderMessage)->OnMessageReceived(*(void**)(&args)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetResourceProvider<D>::OnResourceRequested(winrt::Microsoft::Windows::Widgets::Providers::WidgetResourceRequestedArgs const& args) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceProvider)->OnResourceRequested(*(void**)(&args)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetResourceRequest<D>::Uri() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceRequest)->get_Uri(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetResourceRequest<D>::Method() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceRequest)->get_Method(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetResourceRequest<D>::Method(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceRequest)->put_Method(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetResourceRequest<D>::Content() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceRequest)->get_Content(&value));
        return winrt::Windows::Storage::Streams::IRandomAccessStreamReference{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetResourceRequest<D>::Content(winrt::Windows::Storage::Streams::IRandomAccessStreamReference const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceRequest)->put_Content(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetResourceRequest<D>::Headers() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceRequest)->get_Headers(&value));
        return winrt::Windows::Foundation::Collections::IMap<hstring, hstring>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetResourceRequestedArgs<D>::WidgetContext() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceRequestedArgs)->get_WidgetContext(&value));
        return winrt::Microsoft::Windows::Widgets::Providers::WidgetContext{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetResourceRequestedArgs<D>::Request() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceRequestedArgs)->get_Request(&value));
        return winrt::Microsoft::Windows::Widgets::Providers::WidgetResourceRequest{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetResourceRequestedArgs<D>::Response() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceRequestedArgs)->get_Response(&value));
        return winrt::Microsoft::Windows::Widgets::Providers::WidgetResourceResponse{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetResourceRequestedArgs<D>::Response(winrt::Microsoft::Windows::Widgets::Providers::WidgetResourceResponse const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceRequestedArgs)->put_Response(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetResourceRequestedArgs<D>::GetDeferral() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceRequestedArgs)->GetDeferral(&result));
        return winrt::Windows::Foundation::Deferral{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetResourceResponse<D>::Content() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceResponse)->get_Content(&value));
        return winrt::Windows::Storage::Streams::IRandomAccessStreamReference{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetResourceResponse<D>::Headers() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceResponse)->get_Headers(&value));
        return winrt::Windows::Foundation::Collections::IMap<hstring, hstring>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetResourceResponse<D>::ReasonPhrase() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceResponse)->get_ReasonPhrase(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetResourceResponse<D>::StatusCode() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceResponse)->get_StatusCode(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetResourceResponseFactory<D>::CreateInstance(winrt::Windows::Storage::Streams::IRandomAccessStreamReference const& content, param::hstring const& reasonPhrase, int32_t statusCode) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceResponseFactory)->CreateInstance(*(void**)(&content), *(void**)(&reasonPhrase), statusCode, &value));
        return winrt::Microsoft::Windows::Widgets::Providers::WidgetResourceResponse{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetUpdateRequestOptions<D>::WidgetId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptions)->get_WidgetId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetUpdateRequestOptions<D>::Template() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptions)->get_Template(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetUpdateRequestOptions<D>::Template(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptions)->put_Template(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetUpdateRequestOptions<D>::Data() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptions)->get_Data(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetUpdateRequestOptions<D>::Data(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptions)->put_Data(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetUpdateRequestOptions<D>::CustomState() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptions)->get_CustomState(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetUpdateRequestOptions<D>::CustomState(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptions)->put_CustomState(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetUpdateRequestOptions2<D>::IsPlaceholderContent() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptions2)->get_IsPlaceholderContent(&value));
        return winrt::Windows::Foundation::IReference<bool>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetUpdateRequestOptions2<D>::IsPlaceholderContent(winrt::Windows::Foundation::IReference<bool> const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptions2)->put_IsPlaceholderContent(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetUpdateRequestOptionsFactory<D>::CreateInstance(param::hstring const& widgetId) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptionsFactory)->CreateInstance(*(void**)(&widgetId), &value));
        return winrt::Microsoft::Windows::Widgets::Providers::WidgetUpdateRequestOptions{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Providers_IWidgetUpdateRequestOptionsStatics<D>::UnsetValue() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptionsStatics)->get_UnsetValue(&value));
        return hstring{ value, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetActionInvokedArgs> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetActionInvokedArgs>
    {
        int32_t __stdcall get_WidgetContext(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Widgets::Providers::WidgetContext>(this->shim().WidgetContext());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Verb(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Verb());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Data(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Data());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CustomState(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().CustomState());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetAnalyticsInfoReportedArgs> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetAnalyticsInfoReportedArgs>
    {
        int32_t __stdcall get_WidgetContext(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Widgets::Providers::WidgetContext>(this->shim().WidgetContext());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AnalyticsJson(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().AnalyticsJson());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetContext> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetContext>
    {
        int32_t __stdcall get_Id(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Id());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DefinitionId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DefinitionId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Size(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Widgets::WidgetSize>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsActive(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsActive());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetContextChangedArgs> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetContextChangedArgs>
    {
        int32_t __stdcall get_WidgetContext(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Widgets::Providers::WidgetContext>(this->shim().WidgetContext());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetCustomizationRequestedArgs> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetCustomizationRequestedArgs>
    {
        int32_t __stdcall get_WidgetContext(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Widgets::Providers::WidgetContext>(this->shim().WidgetContext());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CustomState(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().CustomState());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetErrorInfoReportedArgs> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetErrorInfoReportedArgs>
    {
        int32_t __stdcall get_WidgetContext(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Widgets::Providers::WidgetContext>(this->shim().WidgetContext());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ErrorJson(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ErrorJson());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetInfo> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetInfo>
    {
        int32_t __stdcall get_WidgetContext(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Widgets::Providers::WidgetContext>(this->shim().WidgetContext());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Template(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Template());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Data(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Data());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CustomState(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().CustomState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LastUpdateTime(int64_t* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::DateTime>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::DateTime>(this->shim().LastUpdateTime());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetInfo2> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetInfo2>
    {
        int32_t __stdcall get_IsPlaceholderContent(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsPlaceholderContent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetManager> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetManager>
    {
        int32_t __stdcall UpdateWidget(void* widgetUpdateRequestOptions) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().UpdateWidget(*reinterpret_cast<winrt::Microsoft::Windows::Widgets::Providers::WidgetUpdateRequestOptions const*>(&widgetUpdateRequestOptions));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetWidgetIds(uint32_t* __resultSize, void*** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetWidgetIds());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetWidgetInfo(void* widgetId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Widgets::Providers::WidgetInfo>(this->shim().GetWidgetInfo(*reinterpret_cast<hstring const*>(&widgetId)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetWidgetInfos(uint32_t* __resultSize, void*** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetWidgetInfos());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall DeleteWidget(void* widgetId) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DeleteWidget(*reinterpret_cast<hstring const*>(&widgetId));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetManager2> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetManager2>
    {
        int32_t __stdcall SendMessageToContent(void* widgetId, void* message) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SendMessageToContent(*reinterpret_cast<hstring const*>(&widgetId), *reinterpret_cast<hstring const*>(&message));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetManagerStatics> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetManagerStatics>
    {
        int32_t __stdcall GetDefault(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Widgets::Providers::WidgetManager>(this->shim().GetDefault());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetMessageReceivedArgs> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetMessageReceivedArgs>
    {
        int32_t __stdcall get_WidgetContext(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Widgets::Providers::WidgetContext>(this->shim().WidgetContext());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Message(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Message());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetProvider> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetProvider>
    {
        int32_t __stdcall CreateWidget(void* widgetContext) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CreateWidget(*reinterpret_cast<winrt::Microsoft::Windows::Widgets::Providers::WidgetContext const*>(&widgetContext));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall DeleteWidget(void* widgetId, void* customState) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DeleteWidget(*reinterpret_cast<hstring const*>(&widgetId), *reinterpret_cast<hstring const*>(&customState));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall OnActionInvoked(void* actionInvokedArgs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnActionInvoked(*reinterpret_cast<winrt::Microsoft::Windows::Widgets::Providers::WidgetActionInvokedArgs const*>(&actionInvokedArgs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall OnWidgetContextChanged(void* contextChangedArgs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnWidgetContextChanged(*reinterpret_cast<winrt::Microsoft::Windows::Widgets::Providers::WidgetContextChangedArgs const*>(&contextChangedArgs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Activate(void* widgetContext) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Activate(*reinterpret_cast<winrt::Microsoft::Windows::Widgets::Providers::WidgetContext const*>(&widgetContext));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Deactivate(void* widgetId) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Deactivate(*reinterpret_cast<hstring const*>(&widgetId));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetProvider2> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetProvider2>
    {
        int32_t __stdcall OnCustomizationRequested(void* customizationRequestedArgs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnCustomizationRequested(*reinterpret_cast<winrt::Microsoft::Windows::Widgets::Providers::WidgetCustomizationRequestedArgs const*>(&customizationRequestedArgs));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetProviderAnalytics> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetProviderAnalytics>
    {
        int32_t __stdcall OnAnalyticsInfoReported(void* args) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnAnalyticsInfoReported(*reinterpret_cast<winrt::Microsoft::Windows::Widgets::Providers::WidgetAnalyticsInfoReportedArgs const*>(&args));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetProviderErrors> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetProviderErrors>
    {
        int32_t __stdcall OnErrorInfoReported(void* args) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnErrorInfoReported(*reinterpret_cast<winrt::Microsoft::Windows::Widgets::Providers::WidgetErrorInfoReportedArgs const*>(&args));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetProviderMessage> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetProviderMessage>
    {
        int32_t __stdcall OnMessageReceived(void* args) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnMessageReceived(*reinterpret_cast<winrt::Microsoft::Windows::Widgets::Providers::WidgetMessageReceivedArgs const*>(&args));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceProvider> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceProvider>
    {
        int32_t __stdcall OnResourceRequested(void* args) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnResourceRequested(*reinterpret_cast<winrt::Microsoft::Windows::Widgets::Providers::WidgetResourceRequestedArgs const*>(&args));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceRequest> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceRequest>
    {
        int32_t __stdcall get_Uri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Uri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Method(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Method());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Method(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Method(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Content(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Storage::Streams::IRandomAccessStreamReference>(this->shim().Content());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Content(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Content(*reinterpret_cast<winrt::Windows::Storage::Streams::IRandomAccessStreamReference const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Headers(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IMap<hstring, hstring>>(this->shim().Headers());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceRequestedArgs> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceRequestedArgs>
    {
        int32_t __stdcall get_WidgetContext(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Widgets::Providers::WidgetContext>(this->shim().WidgetContext());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Request(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Widgets::Providers::WidgetResourceRequest>(this->shim().Request());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Response(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Widgets::Providers::WidgetResourceResponse>(this->shim().Response());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Response(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Response(*reinterpret_cast<winrt::Microsoft::Windows::Widgets::Providers::WidgetResourceResponse const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Deferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceResponse> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceResponse>
    {
        int32_t __stdcall get_Content(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Storage::Streams::IRandomAccessStreamReference>(this->shim().Content());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Headers(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IMap<hstring, hstring>>(this->shim().Headers());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ReasonPhrase(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ReasonPhrase());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_StatusCode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().StatusCode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceResponseFactory> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceResponseFactory>
    {
        int32_t __stdcall CreateInstance(void* content, void* reasonPhrase, int32_t statusCode, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Widgets::Providers::WidgetResourceResponse>(this->shim().CreateInstance(*reinterpret_cast<winrt::Windows::Storage::Streams::IRandomAccessStreamReference const*>(&content), *reinterpret_cast<hstring const*>(&reasonPhrase), statusCode));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptions> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptions>
    {
        int32_t __stdcall get_WidgetId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().WidgetId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Template(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Template());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Template(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Template(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Data(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Data());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Data(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Data(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CustomState(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().CustomState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CustomState(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CustomState(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptions2> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptions2>
    {
        int32_t __stdcall get_IsPlaceholderContent(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::IReference<bool>>(this->shim().IsPlaceholderContent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsPlaceholderContent(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsPlaceholderContent(*reinterpret_cast<winrt::Windows::Foundation::IReference<bool> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptionsFactory> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptionsFactory>
    {
        int32_t __stdcall CreateInstance(void* widgetId, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Widgets::Providers::WidgetUpdateRequestOptions>(this->shim().CreateInstance(*reinterpret_cast<hstring const*>(&widgetId)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptionsStatics> : produce_base<D, winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptionsStatics>
    {
        int32_t __stdcall get_UnsetValue(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().UnsetValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Widgets::Providers
{
    inline auto WidgetManager::GetDefault()
    {
        return impl::call_factory_cast<winrt::Microsoft::Windows::Widgets::Providers::WidgetManager(*)(IWidgetManagerStatics const&), WidgetManager, IWidgetManagerStatics>([](IWidgetManagerStatics const& f) { return f.GetDefault(); });
    }
    inline WidgetResourceResponse::WidgetResourceResponse(winrt::Windows::Storage::Streams::IRandomAccessStreamReference const& content, param::hstring const& reasonPhrase, int32_t statusCode) :
        WidgetResourceResponse(impl::call_factory<WidgetResourceResponse, IWidgetResourceResponseFactory>([&](IWidgetResourceResponseFactory const& f) { return f.CreateInstance(content, reasonPhrase, statusCode); }))
    {
    }
    inline WidgetUpdateRequestOptions::WidgetUpdateRequestOptions(param::hstring const& widgetId) :
        WidgetUpdateRequestOptions(impl::call_factory<WidgetUpdateRequestOptions, IWidgetUpdateRequestOptionsFactory>([&](IWidgetUpdateRequestOptionsFactory const& f) { return f.CreateInstance(widgetId); }))
    {
    }
    inline auto WidgetUpdateRequestOptions::UnsetValue()
    {
        return impl::call_factory_cast<hstring(*)(IWidgetUpdateRequestOptionsStatics const&), WidgetUpdateRequestOptions, IWidgetUpdateRequestOptionsStatics>([](IWidgetUpdateRequestOptionsStatics const& f) { return f.UnsetValue(); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetActionInvokedArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetAnalyticsInfoReportedArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetContext> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetContextChangedArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetCustomizationRequestedArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetErrorInfoReportedArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetInfo> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetInfo2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetManager> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetManager2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetManagerStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetMessageReceivedArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetProvider> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetProvider2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetProviderAnalytics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetProviderErrors> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetProviderMessage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceProvider> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceRequest> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceRequestedArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceResponse> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetResourceResponseFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptions> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptions2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptionsFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::IWidgetUpdateRequestOptionsStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::WidgetActionInvokedArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::WidgetAnalyticsInfoReportedArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::WidgetContext> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::WidgetContextChangedArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::WidgetCustomizationRequestedArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::WidgetErrorInfoReportedArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::WidgetInfo> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::WidgetManager> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::WidgetMessageReceivedArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::WidgetResourceRequest> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::WidgetResourceRequestedArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::WidgetResourceResponse> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Providers::WidgetUpdateRequestOptions> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
