// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_UI_Xaml_XamlTypeInfo_H
#define WINRT_Microsoft_UI_Xaml_XamlTypeInfo_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.250303.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.250303.1"
#include "winrt/Microsoft.UI.Xaml.h"
#include "winrt/impl/Microsoft.UI.Xaml.Markup.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.XamlTypeInfo.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_UI_Xaml_XamlTypeInfo_IXamlControlsXamlMetaDataProviderStatics<D>::Initialize() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::UI::Xaml::XamlTypeInfo::IXamlControlsXamlMetaDataProviderStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::UI::Xaml::XamlTypeInfo::IXamlControlsXamlMetaDataProviderStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::UI::Xaml::XamlTypeInfo::IXamlControlsXamlMetaDataProviderStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Initialize());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::UI::Xaml::XamlTypeInfo::IXamlControlsXamlMetaDataProviderStatics>**)this;
            check_hresult(_winrt_abi_type->Initialize());
        }
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Xaml::XamlTypeInfo::IXamlControlsXamlMetaDataProvider> : produce_base<D, winrt::Microsoft::UI::Xaml::XamlTypeInfo::IXamlControlsXamlMetaDataProvider>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Xaml::XamlTypeInfo::IXamlControlsXamlMetaDataProviderStatics> : produce_base<D, winrt::Microsoft::UI::Xaml::XamlTypeInfo::IXamlControlsXamlMetaDataProviderStatics>
    {
        int32_t __stdcall Initialize() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Initialize();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::XamlTypeInfo
{
    inline XamlControlsXamlMetaDataProvider::XamlControlsXamlMetaDataProvider() :
        XamlControlsXamlMetaDataProvider(impl::call_factory_cast<XamlControlsXamlMetaDataProvider(*)(winrt::Windows::Foundation::IActivationFactory const&), XamlControlsXamlMetaDataProvider>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<XamlControlsXamlMetaDataProvider>(); }))
    {
    }
    inline auto XamlControlsXamlMetaDataProvider::Initialize()
    {
        impl::call_factory_cast<void(*)(IXamlControlsXamlMetaDataProviderStatics const&), XamlControlsXamlMetaDataProvider, IXamlControlsXamlMetaDataProviderStatics>([](IXamlControlsXamlMetaDataProviderStatics const& f) { return f.Initialize(); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::UI::Xaml::XamlTypeInfo::IXamlControlsXamlMetaDataProvider> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Xaml::XamlTypeInfo::IXamlControlsXamlMetaDataProviderStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Xaml::XamlTypeInfo::XamlControlsXamlMetaDataProvider> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
