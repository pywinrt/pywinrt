// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_UI_Designer_H
#define WINRT_Microsoft_UI_Designer_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.250303.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.250303.1"
#include "winrt/Microsoft.UI.h"
#include "winrt/impl/Microsoft.UI.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Microsoft.UI.Designer.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_UI_Designer_IDesignerOutputHost<D>::WindowId() const
    {
        winrt::Microsoft::UI::WindowId value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::UI::Designer::IDesignerOutputHost>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::UI::Designer::IDesignerOutputHost, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::UI::Designer::IDesignerOutputHost>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_WindowId(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::UI::Designer::IDesignerOutputHost>**)this;
            check_hresult(_winrt_abi_type->get_WindowId(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_UI_Designer_IDesignerOutputHostStatics<D>::CreateForWindowId(winrt::Windows::UI::Composition::Compositor const& compositor, winrt::Microsoft::UI::WindowId const& windowId) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::UI::Designer::IDesignerOutputHostStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::UI::Designer::IDesignerOutputHostStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::UI::Designer::IDesignerOutputHostStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateForWindowId(*(void**)(&compositor), impl::bind_in(windowId), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::UI::Designer::IDesignerOutputHostStatics>**)this;
            check_hresult(_winrt_abi_type->CreateForWindowId(*(void**)(&compositor), impl::bind_in(windowId), &result));
        }
        return winrt::Microsoft::UI::Designer::DesignerOutputHost{ result, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Designer::IDesignerOutputHost> : produce_base<D, winrt::Microsoft::UI::Designer::IDesignerOutputHost>
    {
        int32_t __stdcall get_WindowId(struct struct_Microsoft_UI_WindowId* value) noexcept final try
        {
            zero_abi<winrt::Microsoft::UI::WindowId>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::WindowId>(this->shim().WindowId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Designer::IDesignerOutputHostStatics> : produce_base<D, winrt::Microsoft::UI::Designer::IDesignerOutputHostStatics>
    {
        int32_t __stdcall CreateForWindowId(void* compositor, struct struct_Microsoft_UI_WindowId windowId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Designer::DesignerOutputHost>(this->shim().CreateForWindowId(*reinterpret_cast<winrt::Windows::UI::Composition::Compositor const*>(&compositor), *reinterpret_cast<winrt::Microsoft::UI::WindowId const*>(&windowId)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Designer
{
    inline auto DesignerOutputHost::CreateForWindowId(winrt::Windows::UI::Composition::Compositor const& compositor, winrt::Microsoft::UI::WindowId const& windowId)
    {
        return impl::call_factory<DesignerOutputHost, IDesignerOutputHostStatics>([&](IDesignerOutputHostStatics const& f) { return f.CreateForWindowId(compositor, windowId); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::UI::Designer::IDesignerOutputHost> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Designer::IDesignerOutputHostStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Designer::DesignerOutputHost> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
