// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240111.5

#pragma once
#ifndef WINRT_Microsoft_Windows_Management_Deployment_1_H
#define WINRT_Microsoft_Windows_Management_Deployment_1_H
#include "winrt/impl/Microsoft.Windows.Management.Deployment.0.h"
WINRT_EXPORT namespace winrt::Microsoft::Windows::Management::Deployment
{
    struct WINRT_IMPL_EMPTY_BASES IAddPackageOptions :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAddPackageOptions>
    {
        IAddPackageOptions(std::nullptr_t = nullptr) noexcept {}
        IAddPackageOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IEnsureReadyOptions :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IEnsureReadyOptions>
    {
        IEnsureReadyOptions(std::nullptr_t = nullptr) noexcept {}
        IEnsureReadyOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IPackageDeploymentManager :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageDeploymentManager>
    {
        IPackageDeploymentManager(std::nullptr_t = nullptr) noexcept {}
        IPackageDeploymentManager(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IPackageDeploymentManagerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageDeploymentManagerStatics>
    {
        IPackageDeploymentManagerStatics(std::nullptr_t = nullptr) noexcept {}
        IPackageDeploymentManagerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IPackageDeploymentResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageDeploymentResult>
    {
        IPackageDeploymentResult(std::nullptr_t = nullptr) noexcept {}
        IPackageDeploymentResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IPackageRuntimeManager :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageRuntimeManager>
    {
        IPackageRuntimeManager(std::nullptr_t = nullptr) noexcept {}
        IPackageRuntimeManager(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IPackageRuntimeManagerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageRuntimeManagerStatics>
    {
        IPackageRuntimeManagerStatics(std::nullptr_t = nullptr) noexcept {}
        IPackageRuntimeManagerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IPackageSet :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageSet>
    {
        IPackageSet(std::nullptr_t = nullptr) noexcept {}
        IPackageSet(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IPackageSetItem :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageSetItem>
    {
        IPackageSetItem(std::nullptr_t = nullptr) noexcept {}
        IPackageSetItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IPackageSetItemRuntimeDisposition :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageSetItemRuntimeDisposition>
    {
        IPackageSetItemRuntimeDisposition(std::nullptr_t = nullptr) noexcept {}
        IPackageSetItemRuntimeDisposition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IPackageSetRuntimeDisposition :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageSetRuntimeDisposition>
    {
        IPackageSetRuntimeDisposition(std::nullptr_t = nullptr) noexcept {}
        IPackageSetRuntimeDisposition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IPackageVolume :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageVolume>
    {
        IPackageVolume(std::nullptr_t = nullptr) noexcept {}
        IPackageVolume(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IPackageVolumeStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageVolumeStatics>
    {
        IPackageVolumeStatics(std::nullptr_t = nullptr) noexcept {}
        IPackageVolumeStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IProvisionPackageOptions :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IProvisionPackageOptions>
    {
        IProvisionPackageOptions(std::nullptr_t = nullptr) noexcept {}
        IProvisionPackageOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IRegisterPackageOptions :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRegisterPackageOptions>
    {
        IRegisterPackageOptions(std::nullptr_t = nullptr) noexcept {}
        IRegisterPackageOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IRemovePackageOptions :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRemovePackageOptions>
    {
        IRemovePackageOptions(std::nullptr_t = nullptr) noexcept {}
        IRemovePackageOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IStagePackageOptions :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStagePackageOptions>
    {
        IStagePackageOptions(std::nullptr_t = nullptr) noexcept {}
        IStagePackageOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
}
#endif
