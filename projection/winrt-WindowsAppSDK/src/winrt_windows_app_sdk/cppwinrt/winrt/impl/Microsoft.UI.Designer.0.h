// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_UI_Designer_0_H
#define WINRT_Microsoft_UI_Designer_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI
{
    struct WindowId;
}
WINRT_EXPORT namespace winrt::Windows::UI::Composition
{
    struct Compositor;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Designer
{
    struct IDesignerOutputHost;
    struct IDesignerOutputHostStatics;
    struct DesignerOutputHost;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Designer::IDesignerOutputHost>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Designer::IDesignerOutputHostStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Designer::DesignerOutputHost>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Designer::DesignerOutputHost> = L"Microsoft.UI.Designer.DesignerOutputHost";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Designer::IDesignerOutputHost> = L"Microsoft.UI.Designer.IDesignerOutputHost";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Designer::IDesignerOutputHostStatics> = L"Microsoft.UI.Designer.IDesignerOutputHostStatics";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Designer::IDesignerOutputHost>{ 0x6C11C625,0x3704,0x54FD,{ 0x89,0x03,0xEF,0x78,0x70,0xB4,0xC4,0x23 } }; // 6C11C625-3704-54FD-8903-EF7870B4C423
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Designer::IDesignerOutputHostStatics>{ 0x3EB1BB30,0xE08C,0x5849,{ 0x9B,0x4B,0xC7,0x89,0xFC,0x23,0x29,0x49 } }; // 3EB1BB30-E08C-5849-9B4B-C789FC232949
    template <> struct default_interface<winrt::Microsoft::UI::Designer::DesignerOutputHost>{ using type = winrt::Microsoft::UI::Designer::IDesignerOutputHost; };
    template <> struct abi<winrt::Microsoft::UI::Designer::IDesignerOutputHost>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_WindowId(struct struct_Microsoft_UI_WindowId*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Designer::IDesignerOutputHostStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateForWindowId(void*, struct struct_Microsoft_UI_WindowId, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Designer_IDesignerOutputHost
    {
        [[nodiscard]] auto WindowId() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Designer::IDesignerOutputHost>
    {
        template <typename D> using type = consume_Microsoft_UI_Designer_IDesignerOutputHost<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Designer_IDesignerOutputHostStatics
    {
        auto CreateForWindowId(winrt::Windows::UI::Composition::Compositor const& compositor, winrt::Microsoft::UI::WindowId const& windowId) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Designer::IDesignerOutputHostStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Designer_IDesignerOutputHostStatics<D>;
    };
}
#endif
