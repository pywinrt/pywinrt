// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_AI_0_H
#define WINRT_Microsoft_Windows_AI_0_H
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct HResult;
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::AI
{
    enum class AIFeatureReadyResultState : int32_t
    {
        InProgress = 0,
        Success = 1,
        Failure = 2,
    };
    enum class AIFeatureReadyState : int32_t
    {
        Ready = 0,
        NotReady = 1,
        NotSupportedOnCurrentSystem = 2,
        DisabledByUser = 3,
    };
    struct IAIFeatureReadyResult;
    struct AIFeatureReadyResult;
    struct AIFeatureReadyContract;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::AI::IAIFeatureReadyResult>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::AIFeatureReadyResult>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::AIFeatureReadyResultState>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::AIFeatureReadyState>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::AIFeatureReadyResult> = L"Microsoft.Windows.AI.AIFeatureReadyResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::AIFeatureReadyResultState> = L"Microsoft.Windows.AI.AIFeatureReadyResultState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::AIFeatureReadyState> = L"Microsoft.Windows.AI.AIFeatureReadyState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::IAIFeatureReadyResult> = L"Microsoft.Windows.AI.IAIFeatureReadyResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::AIFeatureReadyContract> = L"Microsoft.Windows.AI.AIFeatureReadyContract";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::IAIFeatureReadyResult>{ 0x936A78A6,0xC242,0x5937,{ 0x98,0x14,0xE5,0x12,0xD4,0x19,0x3A,0x6D } }; // 936A78A6-C242-5937-9814-E512D4193A6D
    template <> struct default_interface<winrt::Microsoft::Windows::AI::AIFeatureReadyResult>{ using type = winrt::Microsoft::Windows::AI::IAIFeatureReadyResult; };
    template <> struct abi<winrt::Microsoft::Windows::AI::IAIFeatureReadyResult>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Error(winrt::hresult*) noexcept = 0;
            virtual int32_t __stdcall get_ErrorDisplayText(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExtendedError(winrt::hresult*) noexcept = 0;
            virtual int32_t __stdcall get_Status(int32_t*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_IAIFeatureReadyResult
    {
        [[nodiscard]] auto Error() const;
        [[nodiscard]] auto ErrorDisplayText() const;
        [[nodiscard]] auto ExtendedError() const;
        [[nodiscard]] auto Status() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::IAIFeatureReadyResult>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_IAIFeatureReadyResult<D>;
    };
}
#endif
