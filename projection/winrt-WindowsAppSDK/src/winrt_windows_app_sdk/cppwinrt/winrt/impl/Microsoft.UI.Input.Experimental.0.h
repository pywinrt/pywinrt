// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_UI_Input_Experimental_0_H
#define WINRT_Microsoft_UI_Input_Experimental_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Input
{
    struct IPointerPointTransform;
    struct PointerPoint;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Input::Experimental
{
    struct IExpInputSite;
    struct IExpPointerPoint;
    struct IExpPointerPointStatics;
    struct ExpInputSite;
    struct ExpPointerPoint;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpInputSite>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpInputSite>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpInputSite> = L"Microsoft.UI.Input.Experimental.ExpInputSite";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint> = L"Microsoft.UI.Input.Experimental.ExpPointerPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpInputSite> = L"Microsoft.UI.Input.Experimental.IExpInputSite";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint> = L"Microsoft.UI.Input.Experimental.IExpPointerPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics> = L"Microsoft.UI.Input.Experimental.IExpPointerPointStatics";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpInputSite>{ 0x6B707B95,0xBBE8,0x5131,{ 0xA6,0xD7,0xB1,0x1C,0x26,0xCB,0x7C,0xB6 } }; // 6B707B95-BBE8-5131-A6D7-B11C26CB7CB6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint>{ 0xF9DC0C95,0xF286,0x5A1C,{ 0xB0,0x38,0x7F,0xF8,0x4A,0x4E,0x4A,0xF5 } }; // F9DC0C95-F286-5A1C-B038-7FF84A4E4AF5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>{ 0xFAE05D62,0x8E52,0x5BF5,{ 0xA5,0x77,0xFF,0x07,0xBB,0x15,0xE0,0x31 } }; // FAE05D62-8E52-5BF5-A577-FF07BB15E031
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpInputSite>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpInputSite; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint; };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpInputSite>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetCurrentPoint(uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetCurrentPointTransformed(uint32_t, void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetIntermediatePoints(uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetIntermediatePointsTransformed(uint32_t, void*, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpInputSite
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpInputSite>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpInputSite<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpPointerPoint
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpPointerPoint<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics
    {
        auto GetCurrentPoint(uint32_t pointerId) const;
        auto GetCurrentPointTransformed(uint32_t pointerId, winrt::Microsoft::UI::Input::IPointerPointTransform const& transform) const;
        auto GetIntermediatePoints(uint32_t pointerId) const;
        auto GetIntermediatePointsTransformed(uint32_t pointerId, winrt::Microsoft::UI::Input::IPointerPointTransform const& transform) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics<D>;
    };
}
#endif
