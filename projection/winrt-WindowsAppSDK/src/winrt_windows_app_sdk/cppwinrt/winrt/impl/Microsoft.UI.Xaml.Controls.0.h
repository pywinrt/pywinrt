// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#ifndef WINRT_Microsoft_UI_Xaml_Controls_0_H
#define WINRT_Microsoft_UI_Xaml_Controls_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition
{
    struct CompositionAnimation;
    struct CompositionBrush;
    struct CompositionObject;
    struct CompositionPropertySet;
    struct Compositor;
    struct Visual;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Input
{
    struct InputPointerSource;
    enum class InputPointerSourceDeviceKinds : uint32_t;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Text
{
    struct RichEditTextDocument;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml
{
    struct BringIntoViewOptions;
    struct BringIntoViewRequestedEventArgs;
    struct BrushTransition;
    struct CornerRadius;
    struct DataTemplate;
    struct DependencyObject;
    struct DependencyProperty;
    struct DependencyPropertyChangedEventHandler;
    struct DragEventArgs;
    struct DragEventHandler;
    enum class ElementSoundMode : int32_t;
    struct ExceptionRoutedEventHandler;
    struct FrameworkElement;
    struct GridLength;
    enum class HorizontalAlignment : int32_t;
    struct IElementFactory;
    enum class LineStackingStrategy : int32_t;
    enum class OpticalMarginAlignment : int32_t;
    struct RoutedEventArgs;
    struct RoutedEventHandler;
    struct Style;
    enum class TextAlignment : int32_t;
    enum class TextLineBounds : int32_t;
    enum class TextReadingOrder : int32_t;
    enum class TextTrimming : int32_t;
    enum class TextWrapping : int32_t;
    struct Thickness;
    struct UIElement;
    enum class VerticalAlignment : int32_t;
    enum class Visibility : int32_t;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Controls::Primitives
{
    struct AppBarButtonTemplateSettings;
    struct AppBarTemplateSettings;
    struct AppBarToggleButtonTemplateSettings;
    struct ButtonBase;
    struct CalendarViewTemplateSettings;
    struct ComboBoxTemplateSettings;
    struct CommandBarTemplateSettings;
    struct FlyoutBase;
    enum class GeneratorDirection : int32_t;
    struct GeneratorPosition;
    struct GridViewItemTemplateSettings;
    enum class GroupHeaderPlacement : int32_t;
    struct IScrollController;
    struct ItemsChangedEventArgs;
    struct ItemsChangedEventHandler;
    struct ListViewItemTemplateSettings;
    struct MenuFlyoutItemTemplateSettings;
    struct MenuFlyoutPresenterTemplateSettings;
    enum class PlacementMode : int32_t;
    struct ScrollPresenter;
    struct SelectorItem;
    enum class SliderSnapsTo : int32_t;
    enum class SnapPointsAlignment : int32_t;
    struct SplitViewTemplateSettings;
    enum class TickPlacement : int32_t;
    struct ToggleSwitchTemplateSettings;
    struct ToolTipTemplateSettings;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Data
{
    struct IValueConverter;
    struct ItemIndexRange;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Documents
{
    struct BlockCollection;
    struct InlineCollection;
    struct TextPointer;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Input
{
    struct CharacterReceivedRoutedEventArgs;
    struct DoubleTappedRoutedEventArgs;
    struct HoldingRoutedEventArgs;
    struct ICommand;
    struct InputScope;
    struct KeyRoutedEventArgs;
    enum class KeyboardNavigationMode : int32_t;
    struct ManipulationCompletedRoutedEventArgs;
    struct ManipulationDeltaRoutedEventArgs;
    struct ManipulationInertiaStartingRoutedEventArgs;
    struct ManipulationStartedRoutedEventArgs;
    struct ManipulationStartingRoutedEventArgs;
    struct PointerRoutedEventArgs;
    struct RightTappedRoutedEventArgs;
    struct TappedRoutedEventArgs;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Interop
{
    struct NotifyCollectionChangedEventArgs;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Media
{
    struct Brush;
    enum class FastPlayFallbackBehaviour : int32_t;
    struct FontFamily;
    struct Geometry;
    struct ImageBrush;
    struct ImageSource;
    struct MediaTransportControlsThumbnailRequestedEventArgs;
    struct RectangleGeometry;
    struct SolidColorBrush;
    enum class Stretch : int32_t;
    struct SystemBackdrop;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Media::Animation
{
    struct ConnectedAnimation;
    struct NavigationTransitionInfo;
    struct TransitionCollection;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Navigation
{
    struct FrameNavigationOptions;
    struct NavigatedEventHandler;
    struct NavigatingCancelEventArgs;
    struct NavigatingCancelEventHandler;
    enum class NavigationCacheMode : int32_t;
    struct NavigationEventArgs;
    struct NavigationFailedEventHandler;
    struct NavigationStoppedEventHandler;
}
WINRT_EXPORT namespace winrt::Microsoft::Web::WebView2::Core
{
    struct CoreWebView2;
    struct CoreWebView2ControllerOptions;
    struct CoreWebView2Environment;
    struct CoreWebView2NavigationCompletedEventArgs;
    struct CoreWebView2NavigationStartingEventArgs;
    struct CoreWebView2ProcessFailedEventArgs;
    struct CoreWebView2WebMessageReceivedEventArgs;
}
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::Contacts
{
    struct Contact;
}
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::DataTransfer
{
    struct DataPackage;
    enum class DataPackageOperation : uint32_t;
}
WINRT_EXPORT namespace winrt::Windows::Devices::Geolocation
{
    struct Geopoint;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct Deferral;
    template <typename T> struct WINRT_IMPL_EMPTY_BASES EventHandler;
    struct EventRegistrationToken;
    struct HResult;
    struct IAsyncAction;
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IReference;
    struct Point;
    struct Rect;
    struct Size;
    template <typename TSender, typename TResult> struct WINRT_IMPL_EMPTY_BASES TypedEventHandler;
    struct Uri;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IIterable;
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IObservableVector;
    struct IVectorChangedEventArgs;
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IVector;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Numerics
{
}
WINRT_EXPORT namespace winrt::Windows::Globalization
{
    enum class DayOfWeek : int32_t;
}
WINRT_EXPORT namespace winrt::Windows::Globalization::NumberFormatting
{
    struct INumberFormatter2;
}
WINRT_EXPORT namespace winrt::Windows::Media::Casting
{
    struct CastingSource;
}
WINRT_EXPORT namespace winrt::Windows::Media::Playback
{
    struct IMediaPlaybackSource;
    struct MediaPlayer;
}
WINRT_EXPORT namespace winrt::Windows::UI
{
    struct Color;
}
WINRT_EXPORT namespace winrt::Windows::UI::Text
{
    enum class FontStretch : int32_t;
    enum class FontStyle : int32_t;
    struct FontWeight;
    enum class TextDecorations : uint32_t;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Interop
{
    struct TypeName;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Controls
{
    enum class AnnotatedScrollBarScrollingEventKind : int32_t
    {
        Click = 0,
        Drag = 1,
        IncrementButton = 2,
        DecrementButton = 3,
    };
    enum class AppBarClosedDisplayMode : int32_t
    {
        Compact = 0,
        Minimal = 1,
        Hidden = 2,
    };
    enum class AutoSuggestionBoxTextChangeReason : int32_t
    {
        UserInput = 0,
        ProgrammaticChange = 1,
        SuggestionChosen = 2,
    };
    enum class BackgroundSizing : int32_t
    {
        InnerBorderEdge = 0,
        OuterBorderEdge = 1,
    };
    enum class CalendarViewDisplayMode : int32_t
    {
        Month = 0,
        Year = 1,
        Decade = 2,
    };
    enum class CalendarViewSelectionMode : int32_t
    {
        None = 0,
        Single = 1,
        Multiple = 2,
    };
    enum class CandidateWindowAlignment : int32_t
    {
        Default = 0,
        BottomEdge = 1,
    };
    enum class CharacterCasing : int32_t
    {
        Normal = 0,
        Lower = 1,
        Upper = 2,
    };
    enum class ClickMode : int32_t
    {
        Release = 0,
        Press = 1,
        Hover = 2,
    };
    enum class ColorPickerHsvChannel : int32_t
    {
        Hue = 0,
        Saturation = 1,
        Value = 2,
        Alpha = 3,
    };
    enum class ColorSpectrumComponents : int32_t
    {
        HueValue = 0,
        ValueHue = 1,
        HueSaturation = 2,
        SaturationHue = 3,
        SaturationValue = 4,
        ValueSaturation = 5,
    };
    enum class ColorSpectrumShape : int32_t
    {
        Box = 0,
        Ring = 1,
    };
    enum class ComboBoxSelectionChangedTrigger : int32_t
    {
        Committed = 0,
        Always = 1,
    };
    enum class CommandBarDefaultLabelPosition : int32_t
    {
        Bottom = 0,
        Right = 1,
        Collapsed = 2,
    };
    enum class CommandBarDynamicOverflowAction : int32_t
    {
        AddingToOverflow = 0,
        RemovingFromOverflow = 1,
    };
    enum class CommandBarLabelPosition : int32_t
    {
        Default = 0,
        Collapsed = 1,
    };
    enum class CommandBarOverflowButtonVisibility : int32_t
    {
        Auto = 0,
        Visible = 1,
        Collapsed = 2,
    };
    enum class ContentDialogButton : int32_t
    {
        None = 0,
        Primary = 1,
        Secondary = 2,
        Close = 3,
    };
    enum class ContentDialogPlacement : int32_t
    {
        Popup = 0,
        InPlace = 1,
    };
    enum class ContentDialogResult : int32_t
    {
        None = 0,
        Primary = 1,
        Secondary = 2,
    };
    enum class DisabledFormattingAccelerators : uint32_t
    {
        None = 0,
        Bold = 0x1,
        Italic = 0x2,
        Underline = 0x4,
        All = 0xffffffff,
    };
    enum class ElementRealizationOptions : uint32_t
    {
        None = 0,
        ForceCreate = 0x1,
        SuppressAutoRecycle = 0x2,
    };
    enum class ExpandDirection : int32_t
    {
        Down = 0,
        Up = 1,
    };
    enum class IncrementalLoadingTrigger : int32_t
    {
        None = 0,
        Edge = 1,
    };
    enum class IndexBasedLayoutOrientation : int32_t
    {
        None = 0,
        TopToBottom = 1,
        LeftToRight = 2,
    };
    enum class InfoBarCloseReason : int32_t
    {
        CloseButton = 0,
        Programmatic = 1,
    };
    enum class InfoBarSeverity : int32_t
    {
        Informational = 0,
        Success = 1,
        Warning = 2,
        Error = 3,
    };
    enum class ItemCollectionTransitionOperation : int32_t
    {
        Add = 0,
        Remove = 1,
        Move = 2,
    };
    enum class ItemCollectionTransitionTriggers : uint32_t
    {
        CollectionChangeAdd = 0x1,
        CollectionChangeRemove = 0x2,
        CollectionChangeReset = 0x4,
        LayoutTransition = 0x8,
    };
    enum class ItemsUpdatingScrollMode : int32_t
    {
        KeepItemsInView = 0,
        KeepScrollOffset = 1,
        KeepLastItemInView = 2,
    };
    enum class ItemsViewSelectionMode : int32_t
    {
        None = 0,
        Single = 1,
        Multiple = 2,
        Extended = 3,
    };
    enum class LightDismissOverlayMode : int32_t
    {
        Auto = 0,
        On = 1,
        Off = 2,
    };
    enum class LinedFlowLayoutItemsJustification : int32_t
    {
        Start = 0,
        Center = 1,
        End = 2,
        SpaceAround = 3,
        SpaceBetween = 4,
        SpaceEvenly = 5,
    };
    enum class LinedFlowLayoutItemsStretch : int32_t
    {
        None = 0,
        Fill = 1,
    };
    enum class ListPickerFlyoutSelectionMode : int32_t
    {
        Single = 0,
        Multiple = 1,
    };
    enum class ListViewReorderMode : int32_t
    {
        Disabled = 0,
        Enabled = 1,
    };
    enum class ListViewSelectionMode : int32_t
    {
        None = 0,
        Single = 1,
        Multiple = 2,
        Extended = 3,
    };
    enum class NavigationViewBackButtonVisible : int32_t
    {
        Collapsed = 0,
        Visible = 1,
        Auto = 2,
    };
    enum class NavigationViewDisplayMode : int32_t
    {
        Minimal = 0,
        Compact = 1,
        Expanded = 2,
    };
    enum class NavigationViewOverflowLabelMode : int32_t
    {
        MoreLabel = 0,
        NoLabel = 1,
    };
    enum class NavigationViewPaneDisplayMode : int32_t
    {
        Auto = 0,
        Left = 1,
        Top = 2,
        LeftCompact = 3,
        LeftMinimal = 4,
    };
    enum class NavigationViewSelectionFollowsFocus : int32_t
    {
        Disabled = 0,
        Enabled = 1,
    };
    enum class NavigationViewShoulderNavigationEnabled : int32_t
    {
        WhenSelectionFollowsFocus = 0,
        Always = 1,
        Never = 2,
    };
    enum class NumberBoxSpinButtonPlacementMode : int32_t
    {
        Hidden = 0,
        Compact = 1,
        Inline = 2,
    };
    enum class NumberBoxValidationMode : int32_t
    {
        InvalidInputOverwritten = 0,
        Disabled = 1,
    };
    enum class Orientation : int32_t
    {
        Vertical = 0,
        Horizontal = 1,
    };
    enum class PanelScrollingDirection : int32_t
    {
        None = 0,
        Forward = 1,
        Backward = 2,
    };
    enum class ParallaxSourceOffsetKind : int32_t
    {
        Absolute = 0,
        Relative = 1,
    };
    enum class PasswordRevealMode : int32_t
    {
        Peek = 0,
        Hidden = 1,
        Visible = 2,
    };
    enum class PipsPagerButtonVisibility : int32_t
    {
        Visible = 0,
        VisibleOnPointerOver = 1,
        Collapsed = 2,
    };
    enum class PivotHeaderFocusVisualPlacement : int32_t
    {
        ItemHeaders = 0,
        SelectedItemHeader = 1,
    };
    enum class PivotSlideInAnimationGroup : int32_t
    {
        Default = 0,
        GroupOne = 1,
        GroupTwo = 2,
        GroupThree = 3,
    };
    enum class PlayerAnimationOptimization : int32_t
    {
        Latency = 0,
        Resources = 1,
    };
    enum class RefreshPullDirection : int32_t
    {
        LeftToRight = 0,
        TopToBottom = 1,
        RightToLeft = 2,
        BottomToTop = 3,
    };
    enum class RefreshVisualizerOrientation : int32_t
    {
        Auto = 0,
        Normal = 1,
        Rotate90DegreesCounterclockwise = 2,
        Rotate270DegreesCounterclockwise = 3,
    };
    enum class RefreshVisualizerState : int32_t
    {
        Idle = 0,
        Peeking = 1,
        Interacting = 2,
        Pending = 3,
        Refreshing = 4,
    };
    enum class RequiresPointer : int32_t
    {
        Never = 0,
        WhenEngaged = 1,
        WhenFocused = 2,
    };
    enum class RichEditClipboardFormat : int32_t
    {
        AllFormats = 0,
        PlainText = 1,
    };
    enum class ScrollBarVisibility : int32_t
    {
        Disabled = 0,
        Auto = 1,
        Hidden = 2,
        Visible = 3,
    };
    enum class ScrollIntoViewAlignment : int32_t
    {
        Default = 0,
        Leading = 1,
    };
    enum class ScrollMode : int32_t
    {
        Disabled = 0,
        Enabled = 1,
        Auto = 2,
    };
    enum class ScrollingAnimationMode : int32_t
    {
        Disabled = 0,
        Enabled = 1,
        Auto = 2,
    };
    enum class ScrollingChainMode : int32_t
    {
        Auto = 0,
        Always = 1,
        Never = 2,
    };
    enum class ScrollingContentOrientation : int32_t
    {
        Vertical = 0,
        Horizontal = 1,
        None = 2,
        Both = 3,
    };
    enum class ScrollingInputKinds : uint32_t
    {
        None = 0,
        Touch = 0x1,
        Pen = 0x2,
        MouseWheel = 0x4,
        Keyboard = 0x8,
        Gamepad = 0x10,
        All = 0xff,
    };
    enum class ScrollingInteractionState : int32_t
    {
        Idle = 0,
        Interaction = 1,
        Inertia = 2,
        Animation = 3,
    };
    enum class ScrollingRailMode : int32_t
    {
        Enabled = 0,
        Disabled = 1,
    };
    enum class ScrollingScrollBarVisibility : int32_t
    {
        Auto = 0,
        Visible = 1,
        Hidden = 2,
    };
    enum class ScrollingScrollMode : int32_t
    {
        Enabled = 0,
        Disabled = 1,
        Auto = 2,
    };
    enum class ScrollingSnapPointsMode : int32_t
    {
        Default = 0,
        Ignore = 1,
    };
    enum class ScrollingZoomMode : int32_t
    {
        Enabled = 0,
        Disabled = 1,
    };
    enum class SelectionMode : int32_t
    {
        Single = 0,
        Multiple = 1,
        Extended = 2,
    };
    enum class SnapPointsType : int32_t
    {
        None = 0,
        Optional = 1,
        Mandatory = 2,
        OptionalSingle = 3,
        MandatorySingle = 4,
    };
    enum class SplitViewDisplayMode : int32_t
    {
        Overlay = 0,
        Inline = 1,
        CompactOverlay = 2,
        CompactInline = 3,
    };
    enum class SplitViewPanePlacement : int32_t
    {
        Left = 0,
        Right = 1,
    };
    enum class StretchDirection : int32_t
    {
        UpOnly = 0,
        DownOnly = 1,
        Both = 2,
    };
    enum class SwipeBehaviorOnInvoked : int32_t
    {
        Auto = 0,
        Close = 1,
        RemainOpen = 2,
    };
    enum class SwipeMode : int32_t
    {
        Reveal = 0,
        Execute = 1,
    };
    enum class Symbol : int32_t
    {
        Previous = 57600,
        Next = 57601,
        Play = 57602,
        Pause = 57603,
        Edit = 57604,
        Save = 57605,
        Clear = 57606,
        Delete = 57607,
        Remove = 57608,
        Add = 57609,
        Cancel = 57610,
        Accept = 57611,
        More = 57612,
        Redo = 57613,
        Undo = 57614,
        Home = 57615,
        Up = 57616,
        Forward = 57617,
        Back = 57618,
        Favorite = 57619,
        Camera = 57620,
        Setting = 57621,
        Video = 57622,
        Sync = 57623,
        Download = 57624,
        Mail = 57625,
        Find = 57626,
        Help = 57627,
        Upload = 57628,
        Emoji = 57629,
        TwoPage = 57630,
        LeaveChat = 57631,
        MailForward = 57632,
        Clock = 57633,
        Send = 57634,
        Crop = 57635,
        RotateCamera = 57636,
        People = 57637,
        OpenPane = 57638,
        ClosePane = 57639,
        World = 57640,
        Flag = 57641,
        PreviewLink = 57642,
        Globe = 57643,
        Trim = 57644,
        AttachCamera = 57645,
        ZoomIn = 57646,
        Bookmarks = 57647,
        Document = 57648,
        ProtectedDocument = 57649,
        Page = 57650,
        Bullets = 57651,
        Comment = 57652,
        MailFilled = 57653,
        ContactInfo = 57654,
        HangUp = 57655,
        ViewAll = 57656,
        MapPin = 57657,
        Phone = 57658,
        VideoChat = 57659,
        Switch = 57660,
        Contact = 57661,
        Rename = 57662,
        Pin = 57665,
        MusicInfo = 57666,
        Go = 57667,
        Keyboard = 57668,
        DockLeft = 57669,
        DockRight = 57670,
        DockBottom = 57671,
        Remote = 57672,
        Refresh = 57673,
        Rotate = 57674,
        Shuffle = 57675,
        List = 57676,
        Shop = 57677,
        SelectAll = 57678,
        Orientation = 57679,
        Import = 57680,
        ImportAll = 57681,
        BrowsePhotos = 57685,
        WebCam = 57686,
        Pictures = 57688,
        SaveLocal = 57689,
        Caption = 57690,
        Stop = 57691,
        ShowResults = 57692,
        Volume = 57693,
        Repair = 57694,
        Message = 57695,
        Page2 = 57696,
        CalendarDay = 57697,
        CalendarWeek = 57698,
        Calendar = 57699,
        Character = 57700,
        MailReplyAll = 57701,
        Read = 57702,
        Link = 57703,
        Account = 57704,
        ShowBcc = 57705,
        HideBcc = 57706,
        Cut = 57707,
        Attach = 57708,
        Paste = 57709,
        Filter = 57710,
        Copy = 57711,
        Emoji2 = 57712,
        Important = 57713,
        MailReply = 57714,
        SlideShow = 57715,
        Sort = 57716,
        Manage = 57720,
        AllApps = 57721,
        DisconnectDrive = 57722,
        MapDrive = 57723,
        NewWindow = 57724,
        OpenWith = 57725,
        ContactPresence = 57729,
        Priority = 57730,
        GoToToday = 57732,
        Font = 57733,
        FontColor = 57734,
        Contact2 = 57735,
        Folder = 57736,
        Audio = 57737,
        Placeholder = 57738,
        View = 57739,
        SetLockScreen = 57740,
        SetTile = 57741,
        ClosedCaption = 57744,
        StopSlideShow = 57745,
        Permissions = 57746,
        Highlight = 57747,
        DisableUpdates = 57748,
        UnFavorite = 57749,
        UnPin = 57750,
        OpenLocal = 57751,
        Mute = 57752,
        Italic = 57753,
        Underline = 57754,
        Bold = 57755,
        MoveToFolder = 57756,
        LikeDislike = 57757,
        Dislike = 57758,
        Like = 57759,
        AlignRight = 57760,
        AlignCenter = 57761,
        AlignLeft = 57762,
        Zoom = 57763,
        ZoomOut = 57764,
        OpenFile = 57765,
        OtherUser = 57766,
        Admin = 57767,
        Street = 57795,
        Map = 57796,
        ClearSelection = 57797,
        FontDecrease = 57798,
        FontIncrease = 57799,
        FontSize = 57800,
        CellPhone = 57801,
        ReShare = 57802,
        Tag = 57803,
        RepeatOne = 57804,
        RepeatAll = 57805,
        OutlineStar = 57806,
        SolidStar = 57807,
        Calculator = 57808,
        Directions = 57809,
        Target = 57810,
        Library = 57811,
        PhoneBook = 57812,
        Memo = 57813,
        Microphone = 57814,
        PostUpdate = 57815,
        BackToWindow = 57816,
        FullScreen = 57817,
        NewFolder = 57818,
        CalendarReply = 57819,
        UnSyncFolder = 57821,
        ReportHacked = 57822,
        SyncFolder = 57823,
        BlockContact = 57824,
        SwitchApps = 57825,
        AddFriend = 57826,
        TouchPointer = 57827,
        GoToStart = 57828,
        ZeroBars = 57829,
        OneBar = 57830,
        TwoBars = 57831,
        ThreeBars = 57832,
        FourBars = 57833,
        Scan = 58004,
        Preview = 58005,
        GlobalNavigationButton = 59136,
        Share = 59181,
        Print = 59209,
        XboxOneConsole = 59792,
    };
    enum class TabViewCloseButtonOverlayMode : int32_t
    {
        Auto = 0,
        OnPointerOver = 1,
        Always = 2,
    };
    enum class TabViewWidthMode : int32_t
    {
        Equal = 0,
        SizeToContent = 1,
        Compact = 2,
    };
    enum class TeachingTipCloseReason : int32_t
    {
        CloseButton = 0,
        LightDismiss = 1,
        Programmatic = 2,
    };
    enum class TeachingTipHeroContentPlacementMode : int32_t
    {
        Auto = 0,
        Top = 1,
        Bottom = 2,
    };
    enum class TeachingTipPlacementMode : int32_t
    {
        Auto = 0,
        Top = 1,
        Bottom = 2,
        Left = 3,
        Right = 4,
        TopRight = 5,
        TopLeft = 6,
        BottomRight = 7,
        BottomLeft = 8,
        LeftTop = 9,
        LeftBottom = 10,
        RightTop = 11,
        RightBottom = 12,
        Center = 13,
    };
    enum class TeachingTipTailVisibility : int32_t
    {
        Auto = 0,
        Visible = 1,
        Collapsed = 2,
    };
    enum class TreeViewSelectionMode : int32_t
    {
        None = 0,
        Single = 1,
        Multiple = 2,
    };
    enum class TwoPaneViewMode : int32_t
    {
        SinglePane = 0,
        Wide = 1,
        Tall = 2,
    };
    enum class TwoPaneViewPriority : int32_t
    {
        Pane1 = 0,
        Pane2 = 1,
    };
    enum class TwoPaneViewTallModeConfiguration : int32_t
    {
        SinglePane = 0,
        TopBottom = 1,
        BottomTop = 2,
    };
    enum class TwoPaneViewWideModeConfiguration : int32_t
    {
        SinglePane = 0,
        LeftRight = 1,
        RightLeft = 2,
    };
    enum class UniformGridLayoutItemsJustification : int32_t
    {
        Start = 0,
        Center = 1,
        End = 2,
        SpaceAround = 3,
        SpaceBetween = 4,
        SpaceEvenly = 5,
    };
    enum class UniformGridLayoutItemsStretch : int32_t
    {
        None = 0,
        Fill = 1,
        Uniform = 2,
    };
    enum class VirtualizationMode : int32_t
    {
        Standard = 0,
        Recycling = 1,
    };
    enum class ZoomMode : int32_t
    {
        Disabled = 0,
        Enabled = 1,
    };
    struct IAnchorRequestedEventArgs;
    struct IAnimatedIcon;
    struct IAnimatedIconFactory;
    struct IAnimatedIconSource;
    struct IAnimatedIconSourceFactory;
    struct IAnimatedIconSourceStatics;
    struct IAnimatedIconStatics;
    struct IAnimatedVisual;
    struct IAnimatedVisual2;
    struct IAnimatedVisualPlayer;
    struct IAnimatedVisualPlayer2;
    struct IAnimatedVisualPlayerFactory;
    struct IAnimatedVisualPlayerStatics;
    struct IAnimatedVisualPlayerStatics2;
    struct IAnimatedVisualSource;
    struct IAnimatedVisualSource2;
    struct IAnimatedVisualSource3;
    struct IAnnotatedScrollBar;
    struct IAnnotatedScrollBarDetailLabelRequestedEventArgs;
    struct IAnnotatedScrollBarFactory;
    struct IAnnotatedScrollBarLabel;
    struct IAnnotatedScrollBarLabelFactory;
    struct IAnnotatedScrollBarScrollingEventArgs;
    struct IAnnotatedScrollBarStatics;
    struct IAppBar;
    struct IAppBarButton;
    struct IAppBarButtonFactory;
    struct IAppBarButtonStatics;
    struct IAppBarElementContainer;
    struct IAppBarElementContainerFactory;
    struct IAppBarElementContainerStatics;
    struct IAppBarFactory;
    struct IAppBarOverrides;
    struct IAppBarSeparator;
    struct IAppBarSeparatorFactory;
    struct IAppBarSeparatorStatics;
    struct IAppBarStatics;
    struct IAppBarToggleButton;
    struct IAppBarToggleButtonFactory;
    struct IAppBarToggleButtonStatics;
    struct IAutoSuggestBox;
    struct IAutoSuggestBoxQuerySubmittedEventArgs;
    struct IAutoSuggestBoxStatics;
    struct IAutoSuggestBoxSuggestionChosenEventArgs;
    struct IAutoSuggestBoxTextChangedEventArgs;
    struct IAutoSuggestBoxTextChangedEventArgsStatics;
    struct IBitmapIcon;
    struct IBitmapIconFactory;
    struct IBitmapIconSource;
    struct IBitmapIconSourceFactory;
    struct IBitmapIconSourceStatics;
    struct IBitmapIconStatics;
    struct IBorder;
    struct IBorderStatics;
    struct IBreadcrumbBar;
    struct IBreadcrumbBarFactory;
    struct IBreadcrumbBarItem;
    struct IBreadcrumbBarItemClickedEventArgs;
    struct IBreadcrumbBarItemFactory;
    struct IBreadcrumbBarStatics;
    struct IButton;
    struct IButtonFactory;
    struct IButtonStatics;
    struct ICalendarDatePicker;
    struct ICalendarDatePickerDateChangedEventArgs;
    struct ICalendarDatePickerFactory;
    struct ICalendarDatePickerStatics;
    struct ICalendarView;
    struct ICalendarViewDayItem;
    struct ICalendarViewDayItemChangingEventArgs;
    struct ICalendarViewDayItemFactory;
    struct ICalendarViewDayItemStatics;
    struct ICalendarViewFactory;
    struct ICalendarViewSelectedDatesChangedEventArgs;
    struct ICalendarViewStatics;
    struct ICandidateWindowBoundsChangedEventArgs;
    struct ICanvas;
    struct ICanvasFactory;
    struct ICanvasStatics;
    struct ICheckBox;
    struct ICheckBoxFactory;
    struct IChoosingGroupHeaderContainerEventArgs;
    struct IChoosingItemContainerEventArgs;
    struct ICleanUpVirtualizedItemEventArgs;
    struct IColorChangedEventArgs;
    struct IColorPicker;
    struct IColorPicker2;
    struct IColorPickerFactory;
    struct IColorPickerStatics;
    struct IColorPickerStatics2;
    struct IColumnDefinition;
    struct IColumnDefinitionStatics;
    struct IComboBox;
    struct IComboBoxFactory;
    struct IComboBoxItem;
    struct IComboBoxItemFactory;
    struct IComboBoxOverrides;
    struct IComboBoxStatics;
    struct IComboBoxTextSubmittedEventArgs;
    struct ICommandBar;
    struct ICommandBarElement;
    struct ICommandBarFactory;
    struct ICommandBarFlyout;
    struct ICommandBarFlyout2;
    struct ICommandBarFlyoutFactory;
    struct ICommandBarOverflowPresenter;
    struct ICommandBarOverflowPresenterFactory;
    struct ICommandBarStatics;
    struct IContainerContentChangingEventArgs;
    struct IContentControl;
    struct IContentControlFactory;
    struct IContentControlOverrides;
    struct IContentControlStatics;
    struct IContentDialog;
    struct IContentDialogButtonClickDeferral;
    struct IContentDialogButtonClickEventArgs;
    struct IContentDialogClosedEventArgs;
    struct IContentDialogClosingDeferral;
    struct IContentDialogClosingEventArgs;
    struct IContentDialogFactory;
    struct IContentDialogOpenedEventArgs;
    struct IContentDialogStatics;
    struct IContentPresenter;
    struct IContentPresenterFactory;
    struct IContentPresenterOverrides;
    struct IContentPresenterStatics;
    struct IContextMenuEventArgs;
    struct IControl;
    struct IControlFactory;
    struct IControlOverrides;
    struct IControlProtected;
    struct IControlStatics;
    struct IControlTemplate;
    struct ICoreWebView2InitializedEventArgs;
    struct IDataTemplateSelector;
    struct IDataTemplateSelectorFactory;
    struct IDataTemplateSelectorOverrides;
    struct IDatePickedEventArgs;
    struct IDatePicker;
    struct IDatePickerFactory;
    struct IDatePickerFlyout;
    struct IDatePickerFlyoutItem;
    struct IDatePickerFlyoutItemStatics;
    struct IDatePickerFlyoutPresenter;
    struct IDatePickerFlyoutPresenterStatics;
    struct IDatePickerFlyoutStatics;
    struct IDatePickerSelectedValueChangedEventArgs;
    struct IDatePickerStatics;
    struct IDatePickerValueChangedEventArgs;
    struct IDragItemsCompletedEventArgs;
    struct IDragItemsStartingEventArgs;
    struct IDropDownButton;
    struct IDropDownButtonFactory;
    struct IDynamicAnimatedVisualSource;
    struct IDynamicOverflowItemsChangingEventArgs;
    struct IExpander;
    struct IExpanderCollapsedEventArgs;
    struct IExpanderExpandingEventArgs;
    struct IExpanderFactory;
    struct IExpanderStatics;
    struct IExpanderTemplateSettings;
    struct IFlipView;
    struct IFlipViewFactory;
    struct IFlipViewItem;
    struct IFlipViewItemFactory;
    struct IFlipViewStatics;
    struct IFlyout;
    struct IFlyoutFactory;
    struct IFlyoutPresenter;
    struct IFlyoutPresenterFactory;
    struct IFlyoutPresenterStatics;
    struct IFlyoutStatics;
    struct IFocusDisengagedEventArgs;
    struct IFocusEngagedEventArgs;
    struct IFontIcon;
    struct IFontIconFactory;
    struct IFontIconSource;
    struct IFontIconSourceFactory;
    struct IFontIconSourceStatics;
    struct IFontIconStatics;
    struct IFrame;
    struct IFrameFactory;
    struct IFrameStatics;
    struct IGrid;
    struct IGridFactory;
    struct IGridStatics;
    struct IGridView;
    struct IGridViewFactory;
    struct IGridViewHeaderItem;
    struct IGridViewHeaderItemFactory;
    struct IGridViewItem;
    struct IGridViewItemFactory;
    struct IGroupItem;
    struct IGroupItemFactory;
    struct IGroupStyle;
    struct IGroupStyleFactory;
    struct IGroupStyleSelector;
    struct IGroupStyleSelectorFactory;
    struct IGroupStyleSelectorOverrides;
    struct IHasValidationErrorsChangedEventArgs;
    struct IHub;
    struct IHubFactory;
    struct IHubSection;
    struct IHubSectionFactory;
    struct IHubSectionHeaderClickEventArgs;
    struct IHubSectionStatics;
    struct IHubStatics;
    struct IHyperlinkButton;
    struct IHyperlinkButtonFactory;
    struct IHyperlinkButtonStatics;
    struct IIconElement;
    struct IIconElementFactory;
    struct IIconElementStatics;
    struct IIconSource;
    struct IIconSourceElement;
    struct IIconSourceElementFactory;
    struct IIconSourceElementStatics;
    struct IIconSourceFactory;
    struct IIconSourceOverrides;
    struct IIconSourceStatics;
    struct IImage;
    struct IImageIcon;
    struct IImageIconFactory;
    struct IImageIconSource;
    struct IImageIconSourceFactory;
    struct IImageIconSourceStatics;
    struct IImageIconStatics;
    struct IImageStatics;
    struct IInfoBadge;
    struct IInfoBadgeFactory;
    struct IInfoBadgeStatics;
    struct IInfoBadgeTemplateSettings;
    struct IInfoBadgeTemplateSettingsFactory;
    struct IInfoBadgeTemplateSettingsStatics;
    struct IInfoBar;
    struct IInfoBarClosedEventArgs;
    struct IInfoBarClosedEventArgsFactory;
    struct IInfoBarClosingEventArgs;
    struct IInfoBarClosingEventArgsFactory;
    struct IInfoBarFactory;
    struct IInfoBarStatics;
    struct IInfoBarTemplateSettings;
    struct IInfoBarTemplateSettingsFactory;
    struct IInfoBarTemplateSettingsStatics;
    struct IInsertionPanel;
    struct IIsTextTrimmedChangedEventArgs;
    struct IItemClickEventArgs;
    struct IItemCollectionTransition;
    struct IItemCollectionTransitionCompletedEventArgs;
    struct IItemCollectionTransitionProgress;
    struct IItemCollectionTransitionProvider;
    struct IItemCollectionTransitionProviderFactory;
    struct IItemCollectionTransitionProviderOverrides;
    struct IItemContainer;
    struct IItemContainerFactory;
    struct IItemContainerGenerator;
    struct IItemContainerMapping;
    struct IItemContainerStatics;
    struct IItemsControl;
    struct IItemsControlFactory;
    struct IItemsControlOverrides;
    struct IItemsControlStatics;
    struct IItemsPanelTemplate;
    struct IItemsPickedEventArgs;
    struct IItemsPresenter;
    struct IItemsPresenterStatics;
    struct IItemsRepeater;
    struct IItemsRepeater2;
    struct IItemsRepeaterElementClearingEventArgs;
    struct IItemsRepeaterElementIndexChangedEventArgs;
    struct IItemsRepeaterElementPreparedEventArgs;
    struct IItemsRepeaterFactory;
    struct IItemsRepeaterScrollHost;
    struct IItemsRepeaterStatics;
    struct IItemsRepeaterStatics2;
    struct IItemsSourceView;
    struct IItemsSourceViewFactory;
    struct IItemsStackPanel;
    struct IItemsStackPanelStatics;
    struct IItemsView;
    struct IItemsViewFactory;
    struct IItemsViewItemInvokedEventArgs;
    struct IItemsViewSelectionChangedEventArgs;
    struct IItemsViewStatics;
    struct IItemsWrapGrid;
    struct IItemsWrapGridStatics;
    struct IKeyIndexMapping;
    struct ILayout;
    struct ILayout2;
    struct ILayoutContext;
    struct ILayoutContextFactory;
    struct ILayoutContextOverrides;
    struct ILayoutFactory;
    struct ILayoutOverrides;
    struct ILayoutProtected;
    struct ILayoutProtected2;
    struct ILinedFlowLayout;
    struct ILinedFlowLayoutFactory;
    struct ILinedFlowLayoutItemCollectionTransitionProvider;
    struct ILinedFlowLayoutItemCollectionTransitionProviderFactory;
    struct ILinedFlowLayoutItemsInfoRequestedEventArgs;
    struct ILinedFlowLayoutStatics;
    struct IListBox;
    struct IListBoxFactory;
    struct IListBoxItem;
    struct IListBoxItemFactory;
    struct IListBoxStatics;
    struct IListPickerFlyout;
    struct IListPickerFlyoutPresenter;
    struct IListPickerFlyoutStatics;
    struct IListView;
    struct IListViewBase;
    struct IListViewBaseFactory;
    struct IListViewBaseHeaderItem;
    struct IListViewBaseHeaderItemFactory;
    struct IListViewBaseStatics;
    struct IListViewFactory;
    struct IListViewHeaderItem;
    struct IListViewHeaderItemFactory;
    struct IListViewItem;
    struct IListViewItemFactory;
    struct IListViewPersistenceHelper;
    struct IListViewPersistenceHelperStatics;
    struct IMapControl;
    struct IMapControlFactory;
    struct IMapControlMapServiceErrorOccurredEventArgs;
    struct IMapControlStatics;
    struct IMapElement;
    struct IMapElementClickEventArgs;
    struct IMapElementFactory;
    struct IMapElementsLayer;
    struct IMapElementsLayerFactory;
    struct IMapElementsLayerStatics;
    struct IMapIcon;
    struct IMapIconFactory;
    struct IMapIconStatics;
    struct IMapLayer;
    struct IMapLayerFactory;
    struct IMediaPlayerElement;
    struct IMediaPlayerElementFactory;
    struct IMediaPlayerElementStatics;
    struct IMediaPlayerPresenter;
    struct IMediaPlayerPresenterFactory;
    struct IMediaPlayerPresenterStatics;
    struct IMediaTransportControls;
    struct IMediaTransportControlsFactory;
    struct IMediaTransportControlsHelper;
    struct IMediaTransportControlsHelperStatics;
    struct IMediaTransportControlsStatics;
    struct IMenuBar;
    struct IMenuBarFactory;
    struct IMenuBarItem;
    struct IMenuBarItemFactory;
    struct IMenuBarItemFlyout;
    struct IMenuBarItemFlyoutFactory;
    struct IMenuBarItemStatics;
    struct IMenuBarStatics;
    struct IMenuFlyout;
    struct IMenuFlyoutFactory;
    struct IMenuFlyoutItem;
    struct IMenuFlyoutItemBase;
    struct IMenuFlyoutItemBaseFactory;
    struct IMenuFlyoutItemFactory;
    struct IMenuFlyoutItemStatics;
    struct IMenuFlyoutPresenter;
    struct IMenuFlyoutPresenter2;
    struct IMenuFlyoutPresenterFactory;
    struct IMenuFlyoutPresenterStatics;
    struct IMenuFlyoutPresenterStatics2;
    struct IMenuFlyoutSeparator;
    struct IMenuFlyoutSeparatorFactory;
    struct IMenuFlyoutStatics;
    struct IMenuFlyoutSubItem;
    struct IMenuFlyoutSubItemStatics;
    struct INavigate;
    struct INavigationView;
    struct INavigationView2;
    struct INavigationViewBackRequestedEventArgs;
    struct INavigationViewDisplayModeChangedEventArgs;
    struct INavigationViewFactory;
    struct INavigationViewItem;
    struct INavigationViewItem2;
    struct INavigationViewItem3;
    struct INavigationViewItemBase;
    struct INavigationViewItemBase2;
    struct INavigationViewItemBaseFactory;
    struct INavigationViewItemBaseStatics;
    struct INavigationViewItemCollapsedEventArgs;
    struct INavigationViewItemExpandingEventArgs;
    struct INavigationViewItemFactory;
    struct INavigationViewItemHeader;
    struct INavigationViewItemHeaderFactory;
    struct INavigationViewItemInvokedEventArgs;
    struct INavigationViewItemInvokedEventArgs2;
    struct INavigationViewItemSeparator;
    struct INavigationViewItemSeparatorFactory;
    struct INavigationViewItemStatics;
    struct INavigationViewItemStatics2;
    struct INavigationViewItemStatics3;
    struct INavigationViewPaneClosingEventArgs;
    struct INavigationViewSelectionChangedEventArgs;
    struct INavigationViewSelectionChangedEventArgs2;
    struct INavigationViewStatics;
    struct INavigationViewStatics2;
    struct INavigationViewTemplateSettings;
    struct INavigationViewTemplateSettings2;
    struct INavigationViewTemplateSettingsFactory;
    struct INavigationViewTemplateSettingsStatics;
    struct INavigationViewTemplateSettingsStatics2;
    struct INonVirtualizingLayout;
    struct INonVirtualizingLayoutContext;
    struct INonVirtualizingLayoutContextFactory;
    struct INonVirtualizingLayoutContextOverrides;
    struct INonVirtualizingLayoutFactory;
    struct INonVirtualizingLayoutOverrides;
    struct INumberBox;
    struct INumberBoxFactory;
    struct INumberBoxStatics;
    struct INumberBoxValueChangedEventArgs;
    struct IPage;
    struct IPageFactory;
    struct IPageOverrides;
    struct IPageStatics;
    struct IPanel;
    struct IPanelFactory;
    struct IPanelStatics;
    struct IParallaxView;
    struct IParallaxViewFactory;
    struct IParallaxViewStatics;
    struct IPasswordBox;
    struct IPasswordBoxPasswordChangingEventArgs;
    struct IPasswordBoxStatics;
    struct IPathIcon;
    struct IPathIconFactory;
    struct IPathIconSource;
    struct IPathIconSourceFactory;
    struct IPathIconSourceStatics;
    struct IPathIconStatics;
    struct IPersonPicture;
    struct IPersonPictureFactory;
    struct IPersonPictureStatics;
    struct IPersonPictureTemplateSettings;
    struct IPickerConfirmedEventArgs;
    struct IPickerFlyout;
    struct IPickerFlyoutPresenter;
    struct IPickerFlyoutStatics;
    struct IPipsPager;
    struct IPipsPagerFactory;
    struct IPipsPagerSelectedIndexChangedEventArgs;
    struct IPipsPagerStatics;
    struct IPipsPagerTemplateSettings;
    struct IPivot;
    struct IPivotFactory;
    struct IPivotItem;
    struct IPivotItemEventArgs;
    struct IPivotItemFactory;
    struct IPivotItemStatics;
    struct IPivotStatics;
    struct IProgressBar;
    struct IProgressBarFactory;
    struct IProgressBarStatics;
    struct IProgressBarTemplateSettings;
    struct IProgressRing;
    struct IProgressRingFactory;
    struct IProgressRingStatics;
    struct IProgressRingTemplateSettings;
    struct IRadioButton;
    struct IRadioButtonFactory;
    struct IRadioButtonStatics;
    struct IRadioButtons;
    struct IRadioButtonsFactory;
    struct IRadioButtonsStatics;
    struct IRadioMenuFlyoutItem;
    struct IRadioMenuFlyoutItemFactory;
    struct IRadioMenuFlyoutItemStatics;
    struct IRadioMenuFlyoutItemStatics2;
    struct IRatingControl;
    struct IRatingControlFactory;
    struct IRatingControlStatics;
    struct IRatingItemFontInfo;
    struct IRatingItemFontInfoFactory;
    struct IRatingItemFontInfoStatics;
    struct IRatingItemImageInfo;
    struct IRatingItemImageInfoFactory;
    struct IRatingItemImageInfoStatics;
    struct IRatingItemInfo;
    struct IRatingItemInfoFactory;
    struct IRefreshContainer;
    struct IRefreshContainerFactory;
    struct IRefreshContainerStatics;
    struct IRefreshInteractionRatioChangedEventArgs;
    struct IRefreshRequestedEventArgs;
    struct IRefreshStateChangedEventArgs;
    struct IRefreshVisualizer;
    struct IRefreshVisualizerFactory;
    struct IRefreshVisualizerStatics;
    struct IRelativePanel;
    struct IRelativePanelFactory;
    struct IRelativePanelStatics;
    struct IRevealListViewItemPresenter;
    struct IRevealListViewItemPresenterFactory;
    struct IRichEditBox;
    struct IRichEditBoxFactory;
    struct IRichEditBoxSelectionChangingEventArgs;
    struct IRichEditBoxStatics;
    struct IRichEditBoxTextChangingEventArgs;
    struct IRichTextBlock;
    struct IRichTextBlockOverflow;
    struct IRichTextBlockOverflowStatics;
    struct IRichTextBlockStatics;
    struct IRowDefinition;
    struct IRowDefinitionStatics;
    struct IScrollAnchorProvider;
    struct IScrollContentPresenter;
    struct IScrollContentPresenterStatics;
    struct IScrollView;
    struct IScrollViewFactory;
    struct IScrollViewStatics;
    struct IScrollViewer;
    struct IScrollViewerStatics;
    struct IScrollViewerView;
    struct IScrollViewerViewChangedEventArgs;
    struct IScrollViewerViewChangingEventArgs;
    struct IScrollingAnchorRequestedEventArgs;
    struct IScrollingBringingIntoViewEventArgs;
    struct IScrollingScrollAnimationStartingEventArgs;
    struct IScrollingScrollCompletedEventArgs;
    struct IScrollingScrollOptions;
    struct IScrollingScrollOptionsFactory;
    struct IScrollingZoomAnimationStartingEventArgs;
    struct IScrollingZoomCompletedEventArgs;
    struct IScrollingZoomOptions;
    struct IScrollingZoomOptionsFactory;
    struct ISectionsInViewChangedEventArgs;
    struct ISectionsInViewChangedEventArgsFactory;
    struct ISelectionChangedEventArgs;
    struct ISelectionChangedEventArgsFactory;
    struct ISelectorBar;
    struct ISelectorBarFactory;
    struct ISelectorBarItem;
    struct ISelectorBarItemFactory;
    struct ISelectorBarItemStatics;
    struct ISelectorBarSelectionChangedEventArgs;
    struct ISelectorBarStatics;
    struct ISemanticZoom;
    struct ISemanticZoomInformation;
    struct ISemanticZoomLocation;
    struct ISemanticZoomStatics;
    struct ISemanticZoomViewChangedEventArgs;
    struct ISlider;
    struct ISliderFactory;
    struct ISliderStatics;
    struct ISplitButton;
    struct ISplitButtonClickEventArgs;
    struct ISplitButtonFactory;
    struct ISplitButtonStatics;
    struct ISplitView;
    struct ISplitViewFactory;
    struct ISplitViewPaneClosingEventArgs;
    struct ISplitViewStatics;
    struct IStackLayout;
    struct IStackLayoutFactory;
    struct IStackLayoutStatics;
    struct IStackPanel;
    struct IStackPanelFactory;
    struct IStackPanelStatics;
    struct IStyleSelector;
    struct IStyleSelectorFactory;
    struct IStyleSelectorOverrides;
    struct ISwapChainBackgroundPanel;
    struct ISwapChainBackgroundPanelFactory;
    struct ISwapChainPanel;
    struct ISwapChainPanelFactory;
    struct ISwapChainPanelStatics;
    struct ISwipeControl;
    struct ISwipeControlFactory;
    struct ISwipeControlStatics;
    struct ISwipeItem;
    struct ISwipeItemFactory;
    struct ISwipeItemInvokedEventArgs;
    struct ISwipeItemStatics;
    struct ISwipeItems;
    struct ISwipeItemsFactory;
    struct ISwipeItemsStatics;
    struct ISymbolIcon;
    struct ISymbolIconFactory;
    struct ISymbolIconSource;
    struct ISymbolIconSourceFactory;
    struct ISymbolIconSourceStatics;
    struct ISymbolIconStatics;
    struct ITabView;
    struct ITabViewFactory;
    struct ITabViewItem;
    struct ITabViewItemFactory;
    struct ITabViewItemStatics;
    struct ITabViewItemTemplateSettings;
    struct ITabViewItemTemplateSettings2;
    struct ITabViewItemTemplateSettingsFactory;
    struct ITabViewItemTemplateSettingsStatics;
    struct ITabViewItemTemplateSettingsStatics2;
    struct ITabViewStatics;
    struct ITabViewTabCloseRequestedEventArgs;
    struct ITabViewTabDragCompletedEventArgs;
    struct ITabViewTabDragStartingEventArgs;
    struct ITabViewTabDroppedOutsideEventArgs;
    struct ITeachingTip;
    struct ITeachingTipClosedEventArgs;
    struct ITeachingTipClosingEventArgs;
    struct ITeachingTipFactory;
    struct ITeachingTipStatics;
    struct ITeachingTipTemplateSettings;
    struct ITeachingTipTemplateSettingsFactory;
    struct ITeachingTipTemplateSettingsStatics;
    struct ITextBlock;
    struct ITextBlockStatics;
    struct ITextBox;
    struct ITextBoxBeforeTextChangingEventArgs;
    struct ITextBoxFactory;
    struct ITextBoxSelectionChangingEventArgs;
    struct ITextBoxStatics;
    struct ITextBoxTextChangingEventArgs;
    struct ITextChangedEventArgs;
    struct ITextCommandBarFlyout;
    struct ITextCommandBarFlyoutFactory;
    struct ITextCompositionChangedEventArgs;
    struct ITextCompositionEndedEventArgs;
    struct ITextCompositionStartedEventArgs;
    struct ITextControlCopyingToClipboardEventArgs;
    struct ITextControlCuttingToClipboardEventArgs;
    struct ITextControlPasteEventArgs;
    struct ITimePickedEventArgs;
    struct ITimePicker;
    struct ITimePickerFactory;
    struct ITimePickerFlyout;
    struct ITimePickerFlyoutPresenter;
    struct ITimePickerFlyoutPresenterStatics;
    struct ITimePickerFlyoutStatics;
    struct ITimePickerSelectedValueChangedEventArgs;
    struct ITimePickerStatics;
    struct ITimePickerValueChangedEventArgs;
    struct IToggleMenuFlyoutItem;
    struct IToggleMenuFlyoutItemFactory;
    struct IToggleMenuFlyoutItemStatics;
    struct IToggleSplitButton;
    struct IToggleSplitButtonFactory;
    struct IToggleSplitButtonIsCheckedChangedEventArgs;
    struct IToggleSplitButtonStatics;
    struct IToggleSwitch;
    struct IToggleSwitchOverrides;
    struct IToggleSwitchStatics;
    struct IToolTip;
    struct IToolTipFactory;
    struct IToolTipService;
    struct IToolTipServiceStatics;
    struct IToolTipStatics;
    struct ITreeView;
    struct ITreeView2;
    struct ITreeView3;
    struct ITreeViewCollapsedEventArgs;
    struct ITreeViewCollapsedEventArgs2;
    struct ITreeViewDragItemsCompletedEventArgs;
    struct ITreeViewDragItemsCompletedEventArgs2;
    struct ITreeViewDragItemsStartingEventArgs;
    struct ITreeViewExpandingEventArgs;
    struct ITreeViewExpandingEventArgs2;
    struct ITreeViewFactory;
    struct ITreeViewItem;
    struct ITreeViewItem2;
    struct ITreeViewItemFactory;
    struct ITreeViewItemInvokedEventArgs;
    struct ITreeViewItemStatics;
    struct ITreeViewItemStatics2;
    struct ITreeViewItemTemplateSettings;
    struct ITreeViewItemTemplateSettingsFactory;
    struct ITreeViewItemTemplateSettingsStatics;
    struct ITreeViewList;
    struct ITreeViewListFactory;
    struct ITreeViewNode;
    struct ITreeViewNodeFactory;
    struct ITreeViewNodeStatics;
    struct ITreeViewSelectionChangedEventArgs;
    struct ITreeViewStatics;
    struct ITreeViewStatics2;
    struct ITwoPaneView;
    struct ITwoPaneViewFactory;
    struct ITwoPaneViewStatics;
    struct IUIElementCollection;
    struct IUniformGridLayout;
    struct IUniformGridLayoutFactory;
    struct IUniformGridLayoutStatics;
    struct IUserControl;
    struct IUserControlFactory;
    struct IUserControlStatics;
    struct IVariableSizedWrapGrid;
    struct IVariableSizedWrapGridStatics;
    struct IViewbox;
    struct IViewboxStatics;
    struct IVirtualizingLayout;
    struct IVirtualizingLayoutContext;
    struct IVirtualizingLayoutContext2;
    struct IVirtualizingLayoutContextFactory;
    struct IVirtualizingLayoutContextOverrides;
    struct IVirtualizingLayoutContextOverrides2;
    struct IVirtualizingLayoutFactory;
    struct IVirtualizingLayoutOverrides;
    struct IVirtualizingPanel;
    struct IVirtualizingPanelFactory;
    struct IVirtualizingPanelOverrides;
    struct IVirtualizingPanelProtected;
    struct IVirtualizingStackPanel;
    struct IVirtualizingStackPanelOverrides;
    struct IVirtualizingStackPanelStatics;
    struct IWebView2;
    struct IWebView22;
    struct IWebView2Factory;
    struct IWebView2Statics;
    struct IWrapGrid;
    struct IWrapGridStatics;
    struct IXamlControlsResources;
    struct IXamlControlsResourcesStatics;
    struct AnchorRequestedEventArgs;
    struct AnimatedIcon;
    struct AnimatedIconSource;
    struct AnimatedVisualPlayer;
    struct AnnotatedScrollBar;
    struct AnnotatedScrollBarDetailLabelRequestedEventArgs;
    struct AnnotatedScrollBarLabel;
    struct AnnotatedScrollBarScrollingEventArgs;
    struct AppBar;
    struct AppBarButton;
    struct AppBarElementContainer;
    struct AppBarSeparator;
    struct AppBarToggleButton;
    struct AutoSuggestBox;
    struct AutoSuggestBoxQuerySubmittedEventArgs;
    struct AutoSuggestBoxSuggestionChosenEventArgs;
    struct AutoSuggestBoxTextChangedEventArgs;
    struct BitmapIcon;
    struct BitmapIconSource;
    struct Border;
    struct BreadcrumbBar;
    struct BreadcrumbBarItem;
    struct BreadcrumbBarItemClickedEventArgs;
    struct Button;
    struct CalendarDatePicker;
    struct CalendarDatePickerDateChangedEventArgs;
    struct CalendarView;
    struct CalendarViewDayItem;
    struct CalendarViewDayItemChangingEventArgs;
    struct CalendarViewSelectedDatesChangedEventArgs;
    struct CandidateWindowBoundsChangedEventArgs;
    struct Canvas;
    struct CheckBox;
    struct ChoosingGroupHeaderContainerEventArgs;
    struct ChoosingItemContainerEventArgs;
    struct CleanUpVirtualizedItemEventArgs;
    struct ColorChangedEventArgs;
    struct ColorPicker;
    struct ColumnDefinition;
    struct ColumnDefinitionCollection;
    struct ComboBox;
    struct ComboBoxItem;
    struct ComboBoxTextSubmittedEventArgs;
    struct CommandBar;
    struct CommandBarFlyout;
    struct CommandBarOverflowPresenter;
    struct ContainerContentChangingEventArgs;
    struct ContentControl;
    struct ContentDialog;
    struct ContentDialogButtonClickDeferral;
    struct ContentDialogButtonClickEventArgs;
    struct ContentDialogClosedEventArgs;
    struct ContentDialogClosingDeferral;
    struct ContentDialogClosingEventArgs;
    struct ContentDialogOpenedEventArgs;
    struct ContentPresenter;
    struct ContextMenuEventArgs;
    struct Control;
    struct ControlTemplate;
    struct CoreWebView2InitializedEventArgs;
    struct DataTemplateSelector;
    struct DatePickedEventArgs;
    struct DatePicker;
    struct DatePickerFlyout;
    struct DatePickerFlyoutItem;
    struct DatePickerFlyoutPresenter;
    struct DatePickerSelectedValueChangedEventArgs;
    struct DatePickerValueChangedEventArgs;
    struct DragItemsCompletedEventArgs;
    struct DragItemsStartingEventArgs;
    struct DropDownButton;
    struct DynamicOverflowItemsChangingEventArgs;
    struct Expander;
    struct ExpanderCollapsedEventArgs;
    struct ExpanderExpandingEventArgs;
    struct ExpanderTemplateSettings;
    struct FlipView;
    struct FlipViewItem;
    struct Flyout;
    struct FlyoutPresenter;
    struct FocusDisengagedEventArgs;
    struct FocusEngagedEventArgs;
    struct FontIcon;
    struct FontIconSource;
    struct Frame;
    struct Grid;
    struct GridView;
    struct GridViewHeaderItem;
    struct GridViewItem;
    struct GroupItem;
    struct GroupStyle;
    struct GroupStyleSelector;
    struct HasValidationErrorsChangedEventArgs;
    struct Hub;
    struct HubSection;
    struct HubSectionCollection;
    struct HubSectionHeaderClickEventArgs;
    struct HyperlinkButton;
    struct IconElement;
    struct IconSource;
    struct IconSourceElement;
    struct Image;
    struct ImageIcon;
    struct ImageIconSource;
    struct InfoBadge;
    struct InfoBadgeTemplateSettings;
    struct InfoBar;
    struct InfoBarClosedEventArgs;
    struct InfoBarClosingEventArgs;
    struct InfoBarTemplateSettings;
    struct IsTextTrimmedChangedEventArgs;
    struct ItemClickEventArgs;
    struct ItemCollection;
    struct ItemCollectionTransition;
    struct ItemCollectionTransitionCompletedEventArgs;
    struct ItemCollectionTransitionProgress;
    struct ItemCollectionTransitionProvider;
    struct ItemContainer;
    struct ItemContainerGenerator;
    struct ItemsControl;
    struct ItemsPanelTemplate;
    struct ItemsPickedEventArgs;
    struct ItemsPresenter;
    struct ItemsRepeater;
    struct ItemsRepeaterElementClearingEventArgs;
    struct ItemsRepeaterElementIndexChangedEventArgs;
    struct ItemsRepeaterElementPreparedEventArgs;
    struct ItemsRepeaterScrollHost;
    struct ItemsSourceView;
    struct ItemsStackPanel;
    struct ItemsView;
    struct ItemsViewItemInvokedEventArgs;
    struct ItemsViewSelectionChangedEventArgs;
    struct ItemsWrapGrid;
    struct Layout;
    struct LayoutContext;
    struct LinedFlowLayout;
    struct LinedFlowLayoutItemCollectionTransitionProvider;
    struct LinedFlowLayoutItemsInfoRequestedEventArgs;
    struct ListBox;
    struct ListBoxItem;
    struct ListPickerFlyout;
    struct ListPickerFlyoutPresenter;
    struct ListView;
    struct ListViewBase;
    struct ListViewBaseHeaderItem;
    struct ListViewHeaderItem;
    struct ListViewItem;
    struct ListViewPersistenceHelper;
    struct MapControl;
    struct MapControlMapServiceErrorOccurredEventArgs;
    struct MapElement;
    struct MapElementClickEventArgs;
    struct MapElementsLayer;
    struct MapIcon;
    struct MapLayer;
    struct MediaPlayerElement;
    struct MediaPlayerPresenter;
    struct MediaTransportControls;
    struct MediaTransportControlsHelper;
    struct MenuBar;
    struct MenuBarItem;
    struct MenuBarItemFlyout;
    struct MenuFlyout;
    struct MenuFlyoutItem;
    struct MenuFlyoutItemBase;
    struct MenuFlyoutPresenter;
    struct MenuFlyoutSeparator;
    struct MenuFlyoutSubItem;
    struct NavigationView;
    struct NavigationViewBackRequestedEventArgs;
    struct NavigationViewDisplayModeChangedEventArgs;
    struct NavigationViewItem;
    struct NavigationViewItemBase;
    struct NavigationViewItemCollapsedEventArgs;
    struct NavigationViewItemExpandingEventArgs;
    struct NavigationViewItemHeader;
    struct NavigationViewItemInvokedEventArgs;
    struct NavigationViewItemSeparator;
    struct NavigationViewPaneClosingEventArgs;
    struct NavigationViewSelectionChangedEventArgs;
    struct NavigationViewTemplateSettings;
    struct NonVirtualizingLayout;
    struct NonVirtualizingLayoutContext;
    struct NumberBox;
    struct NumberBoxValueChangedEventArgs;
    struct Page;
    struct Panel;
    struct ParallaxView;
    struct PasswordBox;
    struct PasswordBoxPasswordChangingEventArgs;
    struct PathIcon;
    struct PathIconSource;
    struct PersonPicture;
    struct PersonPictureTemplateSettings;
    struct PickerConfirmedEventArgs;
    struct PickerFlyout;
    struct PickerFlyoutPresenter;
    struct PipsPager;
    struct PipsPagerSelectedIndexChangedEventArgs;
    struct PipsPagerTemplateSettings;
    struct Pivot;
    struct PivotItem;
    struct PivotItemEventArgs;
    struct ProgressBar;
    struct ProgressBarTemplateSettings;
    struct ProgressRing;
    struct ProgressRingTemplateSettings;
    struct RadioButton;
    struct RadioButtons;
    struct RadioMenuFlyoutItem;
    struct RatingControl;
    struct RatingItemFontInfo;
    struct RatingItemImageInfo;
    struct RatingItemInfo;
    struct RefreshContainer;
    struct RefreshInteractionRatioChangedEventArgs;
    struct RefreshRequestedEventArgs;
    struct RefreshStateChangedEventArgs;
    struct RefreshVisualizer;
    struct RelativePanel;
    struct RevealListViewItemPresenter;
    struct RichEditBox;
    struct RichEditBoxSelectionChangingEventArgs;
    struct RichEditBoxTextChangingEventArgs;
    struct RichTextBlock;
    struct RichTextBlockOverflow;
    struct RowDefinition;
    struct RowDefinitionCollection;
    struct ScrollContentPresenter;
    struct ScrollView;
    struct ScrollViewer;
    struct ScrollViewerView;
    struct ScrollViewerViewChangedEventArgs;
    struct ScrollViewerViewChangingEventArgs;
    struct ScrollingAnchorRequestedEventArgs;
    struct ScrollingBringingIntoViewEventArgs;
    struct ScrollingScrollAnimationStartingEventArgs;
    struct ScrollingScrollCompletedEventArgs;
    struct ScrollingScrollOptions;
    struct ScrollingZoomAnimationStartingEventArgs;
    struct ScrollingZoomCompletedEventArgs;
    struct ScrollingZoomOptions;
    struct SectionsInViewChangedEventArgs;
    struct SelectionChangedEventArgs;
    struct SelectorBar;
    struct SelectorBarItem;
    struct SelectorBarSelectionChangedEventArgs;
    struct SemanticZoom;
    struct SemanticZoomLocation;
    struct SemanticZoomViewChangedEventArgs;
    struct Slider;
    struct SplitButton;
    struct SplitButtonClickEventArgs;
    struct SplitView;
    struct SplitViewPaneClosingEventArgs;
    struct StackLayout;
    struct StackPanel;
    struct StyleSelector;
    struct SwapChainBackgroundPanel;
    struct SwapChainPanel;
    struct SwipeControl;
    struct SwipeItem;
    struct SwipeItemInvokedEventArgs;
    struct SwipeItems;
    struct SymbolIcon;
    struct SymbolIconSource;
    struct TabView;
    struct TabViewItem;
    struct TabViewItemTemplateSettings;
    struct TabViewTabCloseRequestedEventArgs;
    struct TabViewTabDragCompletedEventArgs;
    struct TabViewTabDragStartingEventArgs;
    struct TabViewTabDroppedOutsideEventArgs;
    struct TeachingTip;
    struct TeachingTipClosedEventArgs;
    struct TeachingTipClosingEventArgs;
    struct TeachingTipTemplateSettings;
    struct TextBlock;
    struct TextBox;
    struct TextBoxBeforeTextChangingEventArgs;
    struct TextBoxSelectionChangingEventArgs;
    struct TextBoxTextChangingEventArgs;
    struct TextChangedEventArgs;
    struct TextCommandBarFlyout;
    struct TextCompositionChangedEventArgs;
    struct TextCompositionEndedEventArgs;
    struct TextCompositionStartedEventArgs;
    struct TextControlCopyingToClipboardEventArgs;
    struct TextControlCuttingToClipboardEventArgs;
    struct TextControlPasteEventArgs;
    struct TimePickedEventArgs;
    struct TimePicker;
    struct TimePickerFlyout;
    struct TimePickerFlyoutPresenter;
    struct TimePickerSelectedValueChangedEventArgs;
    struct TimePickerValueChangedEventArgs;
    struct ToggleMenuFlyoutItem;
    struct ToggleSplitButton;
    struct ToggleSplitButtonIsCheckedChangedEventArgs;
    struct ToggleSwitch;
    struct ToolTip;
    struct ToolTipService;
    struct TreeView;
    struct TreeViewCollapsedEventArgs;
    struct TreeViewDragItemsCompletedEventArgs;
    struct TreeViewDragItemsStartingEventArgs;
    struct TreeViewExpandingEventArgs;
    struct TreeViewItem;
    struct TreeViewItemInvokedEventArgs;
    struct TreeViewItemTemplateSettings;
    struct TreeViewList;
    struct TreeViewNode;
    struct TreeViewSelectionChangedEventArgs;
    struct TwoPaneView;
    struct UIElementCollection;
    struct UniformGridLayout;
    struct UserControl;
    struct VariableSizedWrapGrid;
    struct Viewbox;
    struct VirtualizingLayout;
    struct VirtualizingLayoutContext;
    struct VirtualizingPanel;
    struct VirtualizingStackPanel;
    struct WebView2;
    struct WrapGrid;
    struct XamlControlsResources;
    struct CalendarViewDayItemChangingEventHandler;
    struct CleanUpVirtualizedItemEventHandler;
    struct ContextMenuOpeningEventHandler;
    struct DragItemsStartingEventHandler;
    struct HubSectionHeaderClickEventHandler;
    struct ItemClickEventHandler;
    struct ListViewItemToKeyHandler;
    struct ListViewKeyToItemHandler;
    struct SectionsInViewChangedEventHandler;
    struct SelectionChangedEventHandler;
    struct SemanticZoomViewChangedEventHandler;
    struct TextChangedEventHandler;
    struct TextControlPasteEventHandler;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnchorRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIcon>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSourceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource3>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBar>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarDetailLabelRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarLabel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarLabelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarScrollingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAppBar>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAppBarButton>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAppBarButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAppBarButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainer>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAppBarFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAppBarOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparator>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparatorFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparatorStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAppBarStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButton>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBox>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IBitmapIcon>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IBorder>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IBorderStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBar>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItemClickedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IButton>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePicker>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICalendarView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICanvas>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICanvasFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICanvasStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICheckBox>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICheckBoxFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IChoosingItemContainerEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IColorChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IColorPicker>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IColorPicker2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IColorPickerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IColorPickerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IColorPickerStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IColumnDefinition>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IColumnDefinitionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IComboBox>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IComboBoxFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IComboBoxItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IComboBoxItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IComboBoxOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IComboBoxStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IComboBoxTextSubmittedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICommandBar>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICommandBarElement>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICommandBarOverflowPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICommandBarStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContainerContentChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContentControl>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContentControlFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContentControlStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContentDialog>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContentDialogButtonClickDeferral>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosingDeferral>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContentDialogFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContentDialogOpenedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContentDialogStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContentPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContentPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContentPresenterOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContentPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IContextMenuEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IControl>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IControlFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IControlOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IControlProtected>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IControlStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IControlTemplate>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ICoreWebView2InitializedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelector>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelectorFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelectorOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDatePickedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDatePicker>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDatePickerSelectedValueChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDatePickerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDragItemsCompletedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDragItemsStartingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDropDownButton>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDropDownButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IExpander>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IExpanderCollapsedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IExpanderExpandingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IExpanderFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IExpanderStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IExpanderTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFlipView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFlipViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFlipViewItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFlipViewItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFlipViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFlyoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFlyoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFocusDisengagedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFocusEngagedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFontIcon>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFontIconFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFontIconSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFontIconSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFontIconStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFrameFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IFrameStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IGrid>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IGridFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IGridStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IGridView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IGridViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IGridViewHeaderItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IGridViewHeaderItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IGridViewItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IGridViewItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IGroupItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IGroupItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IGroupStyle>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelector>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelectorFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelectorOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IHasValidationErrorsChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IHub>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IHubFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IHubSection>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IHubSectionFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IHubSectionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IHubStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButton>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IIconElement>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IIconElementFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IIconElementStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IIconSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IIconSourceElement>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IIconSourceElementFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IIconSourceElementStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IIconSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IIconSourceOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IIconSourceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IImage>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IImageIcon>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IImageIconFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IImageIconSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IImageIconSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IImageIconSourceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IImageIconStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IImageStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IInfoBadge>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettingsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettingsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IInfoBar>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosedEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosingEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IInfoBarFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IInfoBarStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettingsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettingsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IInsertionPanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemClickEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransition>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionCompletedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProgress>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProvider>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProviderFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProviderOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemContainer>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemContainerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemContainerGenerator>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemContainerMapping>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemContainerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsControl>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsControlFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsControlStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsPanelTemplate>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsPickedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterScrollHost>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsSourceView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsSourceViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsStackPanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsStackPanelStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsViewItemInvokedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsViewSelectionChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsWrapGrid>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IItemsWrapGridStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IKeyIndexMapping>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ILayout>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ILayout2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ILayoutContext>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ILayoutContextFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ILayoutContextOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ILayoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ILayoutOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayout>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemCollectionTransitionProvider>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemCollectionTransitionProviderFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemsInfoRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListBox>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListBoxFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListBoxItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListBoxItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListBoxStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyoutPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListViewBase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListViewHeaderItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListViewHeaderItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListViewItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListViewItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListViewPersistenceHelper>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IListViewPersistenceHelperStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMapControl>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMapControlFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMapControlMapServiceErrorOccurredEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMapControlStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMapElement>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMapElementClickEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMapElementFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayer>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMapIcon>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMapIconFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMapIconStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMapLayer>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMapLayerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElement>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElementFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElementStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControls>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsHelper>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsHelperStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuBar>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuBarFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuBarStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenter2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenterStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSeparator>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSubItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSubItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigate>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationView2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem3>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBaseStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemCollapsedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemExpandingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemHeader>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayout>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INumberBox>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INumberBoxFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INumberBoxStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::INumberBoxValueChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPage>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPageFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPageOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPageStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPanelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPanelStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IParallaxView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IParallaxViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IParallaxViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPasswordBox>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPasswordBoxStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPathIcon>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPathIconFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPathIconSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPathIconSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPathIconSourceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPathIconStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPersonPicture>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPickerConfirmedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPickerFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPickerFlyoutPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPickerFlyoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPipsPager>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerSelectedIndexChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPivot>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPivotFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPivotItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPivotItemEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPivotItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPivotItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IPivotStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IProgressBar>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IProgressBarFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IProgressBarStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IProgressBarTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IProgressRing>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IProgressRingFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IProgressRingStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IProgressRingTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRadioButton>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRadioButtons>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRatingControl>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRatingControlFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRatingControlStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfo>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfo>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfo>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainer>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizer>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRelativePanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRelativePanelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRelativePanelStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxSelectionChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlock>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflowStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRowDefinition>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IRowDefinitionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollAnchorProvider>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollContentPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollContentPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollViewer>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollingAnchorRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollingBringingIntoViewEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollAnimationStartingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollCompletedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollOptions>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollOptionsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomAnimationStartingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomCompletedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomOptions>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomOptionsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISelectorBar>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarSelectionChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoom>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomInformation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISlider>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISliderFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISliderStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISplitButton>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISplitView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISplitViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISplitViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IStackLayout>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IStackPanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IStackPanelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IStackPanelStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IStyleSelector>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IStyleSelectorFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IStyleSelectorOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISwapChainBackgroundPanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanelStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISwipeControl>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISwipeControlFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISwipeControlStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISwipeItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISwipeItems>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISymbolIcon>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITabView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITabViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITabViewItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITabViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabCloseRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDragCompletedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDragStartingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDroppedOutsideEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITeachingTip>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITextBlock>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITextBlockStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITextBox>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITextBoxFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITextBoxSelectionChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITextBoxStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITextBoxTextChangingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITextChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITextCompositionChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITextCompositionEndedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITextCompositionStartedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITextControlPasteEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITimePickedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITimePicker>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyout>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITimePickerSelectedValueChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITimePickerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButton>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IToggleSwitch>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IToggleSwitchOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IToggleSwitchStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IToolTip>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IToolTipFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IToolTipService>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IToolTipServiceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IToolTipStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeView2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeView3>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItem2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewList>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewListFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNode>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewSelectionChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITreeViewStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IUIElementCollection>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayout>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IUserControl>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IUserControlFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IUserControlStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IVariableSizedWrapGrid>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IVariableSizedWrapGridStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IViewbox>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IViewboxStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayout>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelProtected>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanelOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanelStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IWebView2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IWebView22>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IWebView2Factory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IWebView2Statics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IWrapGrid>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IWrapGridStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IXamlControlsResources>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AnchorRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AnimatedIcon>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AnimatedIconSource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AnimatedVisualPlayer>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBar>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBarDetailLabelRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBarLabel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AppBar>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AppBarButton>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AppBarElementContainer>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AppBarSeparator>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AppBarToggleButton>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBox>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::BitmapIcon>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::BitmapIconSource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Border>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::BreadcrumbBar>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::BreadcrumbBarItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::BreadcrumbBarItemClickedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Button>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CalendarDatePicker>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CalendarView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CalendarViewDayItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Canvas>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CheckBox>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ChoosingItemContainerEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ColorChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ColorPicker>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ColumnDefinition>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ColumnDefinitionCollection>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ComboBox>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ComboBoxItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CommandBar>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CommandBarFlyout>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CommandBarOverflowPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ContentControl>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ContentDialog>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickDeferral>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ContentDialogClosedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ContentDialogClosingDeferral>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ContentDialogOpenedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ContentPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ContextMenuEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Control>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ControlTemplate>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CoreWebView2InitializedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::DatePickedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::DatePicker>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::DatePickerFlyout>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::DatePickerFlyoutItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::DatePickerFlyoutPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::DatePickerValueChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::DragItemsCompletedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::DragItemsStartingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::DropDownButton>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Expander>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ExpanderCollapsedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ExpanderExpandingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ExpanderTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::FlipView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::FlipViewItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Flyout>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::FlyoutPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::FocusDisengagedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::FocusEngagedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::FontIcon>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::FontIconSource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Frame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Grid>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::GridView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::GridViewHeaderItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::GridViewItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::GroupItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::GroupStyle>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::GroupStyleSelector>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Hub>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::HubSection>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::HubSectionCollection>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::HyperlinkButton>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IconElement>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IconSource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IconSourceElement>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Image>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ImageIcon>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ImageIconSource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::InfoBadge>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::InfoBadgeTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::InfoBar>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::InfoBarClosedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::InfoBarTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemClickEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemCollection>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransition>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionCompletedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionProgress>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionProvider>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemContainer>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemContainerGenerator>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemsControl>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemsPanelTemplate>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemsPickedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemsPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeater>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementClearingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementIndexChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementPreparedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterScrollHost>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemsSourceView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemsStackPanel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemsView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemsViewItemInvokedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemsViewSelectionChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemsWrapGrid>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Layout>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::LayoutContext>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayout>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayoutItemCollectionTransitionProvider>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayoutItemsInfoRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ListBox>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ListBoxItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ListPickerFlyout>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ListPickerFlyoutPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ListView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ListViewBase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ListViewHeaderItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ListViewItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ListViewPersistenceHelper>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MapControl>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MapControlMapServiceErrorOccurredEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MapElement>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MapElementClickEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MapElementsLayer>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MapIcon>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MapLayer>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MediaPlayerElement>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MediaPlayerPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MediaTransportControls>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MediaTransportControlsHelper>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MenuBar>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MenuBarItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MenuBarItemFlyout>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MenuFlyout>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutSeparator>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemBase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemCollapsedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemExpandingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemHeader>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayout>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NumberBox>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NumberBoxValueChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Page>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Panel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ParallaxView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PasswordBox>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PathIcon>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PathIconSource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PersonPicture>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PersonPictureTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PickerConfirmedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PickerFlyout>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PickerFlyoutPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PipsPager>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PipsPagerSelectedIndexChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PipsPagerTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Pivot>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PivotItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PivotItemEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ProgressBar>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ProgressBarTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ProgressRing>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ProgressRingTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RadioButton>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RadioButtons>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RatingControl>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RatingItemFontInfo>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RatingItemImageInfo>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RatingItemInfo>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RefreshContainer>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RefreshVisualizer>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RelativePanel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RevealListViewItemPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RichEditBox>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RichEditBoxSelectionChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RichTextBlock>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RichTextBlockOverflow>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RowDefinition>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RowDefinitionCollection>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollContentPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollViewer>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollViewerView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingAnchorRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingBringingIntoViewEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollAnimationStartingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollCompletedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollOptions>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomAnimationStartingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomCompletedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomOptions>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SectionsInViewChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SelectorBar>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SelectorBarItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SelectorBarSelectionChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SemanticZoom>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SemanticZoomLocation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SemanticZoomViewChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Slider>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SplitButton>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SplitView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SplitViewPaneClosingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::StackLayout>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::StackPanel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::StyleSelector>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SwapChainBackgroundPanel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SwapChainPanel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SwipeControl>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SwipeItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SwipeItems>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SymbolIcon>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SymbolIconSource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TabView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TabViewItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TabViewItemTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TabViewTabCloseRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TabViewTabDragCompletedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TabViewTabDragStartingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TabViewTabDroppedOutsideEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TeachingTip>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TeachingTipClosedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TeachingTipClosingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TextBlock>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TextBox>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TextBoxTextChangingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TextChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TextCommandBarFlyout>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TextControlPasteEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TimePickedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TimePicker>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TimePickerFlyout>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TimePickerFlyoutPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TimePickerSelectedValueChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TimePickerValueChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ToggleMenuFlyoutItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ToggleSplitButton>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ToggleSwitch>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ToolTip>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ToolTipService>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TreeView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TreeViewItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TreeViewList>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TreeViewNode>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TreeViewSelectionChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TwoPaneView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::UIElementCollection>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::UniformGridLayout>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::UserControl>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::VariableSizedWrapGrid>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Viewbox>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayout>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::VirtualizingPanel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::VirtualizingStackPanel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::WebView2>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::WrapGrid>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::XamlControlsResources>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AppBarClosedDisplayMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::BackgroundSizing>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CalendarViewDisplayMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CalendarViewSelectionMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CandidateWindowAlignment>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CharacterCasing>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ClickMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ColorSpectrumComponents>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ColorSpectrumShape>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ComboBoxSelectionChangedTrigger>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CommandBarDefaultLabelPosition>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CommandBarDynamicOverflowAction>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CommandBarLabelPosition>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CommandBarOverflowButtonVisibility>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ContentDialogButton>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ContentDialogPlacement>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ContentDialogResult>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::DisabledFormattingAccelerators>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ElementRealizationOptions>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ExpandDirection>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IncrementalLoadingTrigger>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::IndexBasedLayoutOrientation>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::InfoBarCloseReason>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::InfoBarSeverity>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionOperation>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionTriggers>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemsUpdatingScrollMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemsViewSelectionMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayoutItemsJustification>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayoutItemsStretch>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ListPickerFlyoutSelectionMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ListViewReorderMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ListViewSelectionMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NumberBoxSpinButtonPlacementMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::NumberBoxValidationMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Orientation>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PanelScrollingDirection>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PasswordRevealMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PipsPagerButtonVisibility>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PivotSlideInAnimationGroup>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::PlayerAnimationOptimization>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RefreshPullDirection>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RefreshVisualizerState>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RequiresPointer>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::RichEditClipboardFormat>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollBarVisibility>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollIntoViewAlignment>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingAnimationMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingChainMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingContentOrientation>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingInputKinds>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingInteractionState>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingRailMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollBarVisibility>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingSnapPointsMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SelectionMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SnapPointsType>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SplitViewDisplayMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SplitViewPanePlacement>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::StretchDirection>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SwipeMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Symbol>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TabViewCloseButtonOverlayMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TabViewWidthMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TeachingTipCloseReason>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TeachingTipHeroContentPlacementMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TeachingTipPlacementMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TeachingTipTailVisibility>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TreeViewSelectionMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TwoPaneViewMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TwoPaneViewPriority>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsJustification>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsStretch>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::VirtualizationMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ZoomMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ContextMenuOpeningEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::DragItemsStartingEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ItemClickEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ListViewItemToKeyHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::ListViewKeyToItemHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SectionsInViewChangedEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TextChangedEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::TextControlPasteEventHandler>{ using type = delegate_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AnchorRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.AnchorRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AnimatedIcon> = L"Microsoft.UI.Xaml.Controls.AnimatedIcon";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AnimatedIconSource> = L"Microsoft.UI.Xaml.Controls.AnimatedIconSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AnimatedVisualPlayer> = L"Microsoft.UI.Xaml.Controls.AnimatedVisualPlayer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBar> = L"Microsoft.UI.Xaml.Controls.AnnotatedScrollBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBarDetailLabelRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.AnnotatedScrollBarDetailLabelRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBarLabel> = L"Microsoft.UI.Xaml.Controls.AnnotatedScrollBarLabel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventArgs> = L"Microsoft.UI.Xaml.Controls.AnnotatedScrollBarScrollingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AppBar> = L"Microsoft.UI.Xaml.Controls.AppBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AppBarButton> = L"Microsoft.UI.Xaml.Controls.AppBarButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AppBarElementContainer> = L"Microsoft.UI.Xaml.Controls.AppBarElementContainer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AppBarSeparator> = L"Microsoft.UI.Xaml.Controls.AppBarSeparator";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AppBarToggleButton> = L"Microsoft.UI.Xaml.Controls.AppBarToggleButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBox> = L"Microsoft.UI.Xaml.Controls.AutoSuggestBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs> = L"Microsoft.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs> = L"Microsoft.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::BitmapIcon> = L"Microsoft.UI.Xaml.Controls.BitmapIcon";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::BitmapIconSource> = L"Microsoft.UI.Xaml.Controls.BitmapIconSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Border> = L"Microsoft.UI.Xaml.Controls.Border";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::BreadcrumbBar> = L"Microsoft.UI.Xaml.Controls.BreadcrumbBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::BreadcrumbBarItem> = L"Microsoft.UI.Xaml.Controls.BreadcrumbBarItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::BreadcrumbBarItemClickedEventArgs> = L"Microsoft.UI.Xaml.Controls.BreadcrumbBarItemClickedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Button> = L"Microsoft.UI.Xaml.Controls.Button";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CalendarDatePicker> = L"Microsoft.UI.Xaml.Controls.CalendarDatePicker";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.CalendarDatePickerDateChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CalendarView> = L"Microsoft.UI.Xaml.Controls.CalendarView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CalendarViewDayItem> = L"Microsoft.UI.Xaml.Controls.CalendarViewDayItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.CalendarViewDayItemChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.CalendarViewSelectedDatesChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Canvas> = L"Microsoft.UI.Xaml.Controls.Canvas";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CheckBox> = L"Microsoft.UI.Xaml.Controls.CheckBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs> = L"Microsoft.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ChoosingItemContainerEventArgs> = L"Microsoft.UI.Xaml.Controls.ChoosingItemContainerEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs> = L"Microsoft.UI.Xaml.Controls.CleanUpVirtualizedItemEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ColorChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ColorPicker> = L"Microsoft.UI.Xaml.Controls.ColorPicker";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ColumnDefinition> = L"Microsoft.UI.Xaml.Controls.ColumnDefinition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ColumnDefinitionCollection> = L"Microsoft.UI.Xaml.Controls.ColumnDefinitionCollection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ComboBox> = L"Microsoft.UI.Xaml.Controls.ComboBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ComboBoxItem> = L"Microsoft.UI.Xaml.Controls.ComboBoxItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs> = L"Microsoft.UI.Xaml.Controls.ComboBoxTextSubmittedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CommandBar> = L"Microsoft.UI.Xaml.Controls.CommandBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CommandBarFlyout> = L"Microsoft.UI.Xaml.Controls.CommandBarFlyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CommandBarOverflowPresenter> = L"Microsoft.UI.Xaml.Controls.CommandBarOverflowPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ContentControl> = L"Microsoft.UI.Xaml.Controls.ContentControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ContentDialog> = L"Microsoft.UI.Xaml.Controls.ContentDialog";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickDeferral> = L"Microsoft.UI.Xaml.Controls.ContentDialogButtonClickDeferral";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> = L"Microsoft.UI.Xaml.Controls.ContentDialogButtonClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ContentDialogClosedEventArgs> = L"Microsoft.UI.Xaml.Controls.ContentDialogClosedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ContentDialogClosingDeferral> = L"Microsoft.UI.Xaml.Controls.ContentDialogClosingDeferral";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs> = L"Microsoft.UI.Xaml.Controls.ContentDialogClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ContentDialogOpenedEventArgs> = L"Microsoft.UI.Xaml.Controls.ContentDialogOpenedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ContentPresenter> = L"Microsoft.UI.Xaml.Controls.ContentPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ContextMenuEventArgs> = L"Microsoft.UI.Xaml.Controls.ContextMenuEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Control> = L"Microsoft.UI.Xaml.Controls.Control";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ControlTemplate> = L"Microsoft.UI.Xaml.Controls.ControlTemplate";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CoreWebView2InitializedEventArgs> = L"Microsoft.UI.Xaml.Controls.CoreWebView2InitializedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector> = L"Microsoft.UI.Xaml.Controls.DataTemplateSelector";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::DatePickedEventArgs> = L"Microsoft.UI.Xaml.Controls.DatePickedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::DatePicker> = L"Microsoft.UI.Xaml.Controls.DatePicker";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::DatePickerFlyout> = L"Microsoft.UI.Xaml.Controls.DatePickerFlyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::DatePickerFlyoutItem> = L"Microsoft.UI.Xaml.Controls.DatePickerFlyoutItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::DatePickerFlyoutPresenter> = L"Microsoft.UI.Xaml.Controls.DatePickerFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.DatePickerSelectedValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::DatePickerValueChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.DatePickerValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::DragItemsCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.DragItemsCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::DragItemsStartingEventArgs> = L"Microsoft.UI.Xaml.Controls.DragItemsStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::DropDownButton> = L"Microsoft.UI.Xaml.Controls.DropDownButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.DynamicOverflowItemsChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Expander> = L"Microsoft.UI.Xaml.Controls.Expander";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ExpanderCollapsedEventArgs> = L"Microsoft.UI.Xaml.Controls.ExpanderCollapsedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ExpanderExpandingEventArgs> = L"Microsoft.UI.Xaml.Controls.ExpanderExpandingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ExpanderTemplateSettings> = L"Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::FlipView> = L"Microsoft.UI.Xaml.Controls.FlipView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::FlipViewItem> = L"Microsoft.UI.Xaml.Controls.FlipViewItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Flyout> = L"Microsoft.UI.Xaml.Controls.Flyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::FlyoutPresenter> = L"Microsoft.UI.Xaml.Controls.FlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::FocusDisengagedEventArgs> = L"Microsoft.UI.Xaml.Controls.FocusDisengagedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::FocusEngagedEventArgs> = L"Microsoft.UI.Xaml.Controls.FocusEngagedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::FontIcon> = L"Microsoft.UI.Xaml.Controls.FontIcon";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::FontIconSource> = L"Microsoft.UI.Xaml.Controls.FontIconSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Frame> = L"Microsoft.UI.Xaml.Controls.Frame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Grid> = L"Microsoft.UI.Xaml.Controls.Grid";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::GridView> = L"Microsoft.UI.Xaml.Controls.GridView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::GridViewHeaderItem> = L"Microsoft.UI.Xaml.Controls.GridViewHeaderItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::GridViewItem> = L"Microsoft.UI.Xaml.Controls.GridViewItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::GroupItem> = L"Microsoft.UI.Xaml.Controls.GroupItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::GroupStyle> = L"Microsoft.UI.Xaml.Controls.GroupStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::GroupStyleSelector> = L"Microsoft.UI.Xaml.Controls.GroupStyleSelector";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.HasValidationErrorsChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Hub> = L"Microsoft.UI.Xaml.Controls.Hub";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::HubSection> = L"Microsoft.UI.Xaml.Controls.HubSection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::HubSectionCollection> = L"Microsoft.UI.Xaml.Controls.HubSectionCollection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventArgs> = L"Microsoft.UI.Xaml.Controls.HubSectionHeaderClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::HyperlinkButton> = L"Microsoft.UI.Xaml.Controls.HyperlinkButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IconElement> = L"Microsoft.UI.Xaml.Controls.IconElement";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IconSource> = L"Microsoft.UI.Xaml.Controls.IconSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IconSourceElement> = L"Microsoft.UI.Xaml.Controls.IconSourceElement";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Image> = L"Microsoft.UI.Xaml.Controls.Image";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ImageIcon> = L"Microsoft.UI.Xaml.Controls.ImageIcon";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ImageIconSource> = L"Microsoft.UI.Xaml.Controls.ImageIconSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::InfoBadge> = L"Microsoft.UI.Xaml.Controls.InfoBadge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::InfoBadgeTemplateSettings> = L"Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::InfoBar> = L"Microsoft.UI.Xaml.Controls.InfoBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::InfoBarClosedEventArgs> = L"Microsoft.UI.Xaml.Controls.InfoBarClosedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs> = L"Microsoft.UI.Xaml.Controls.InfoBarClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::InfoBarTemplateSettings> = L"Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemClickEventArgs> = L"Microsoft.UI.Xaml.Controls.ItemClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemCollection> = L"Microsoft.UI.Xaml.Controls.ItemCollection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransition> = L"Microsoft.UI.Xaml.Controls.ItemCollectionTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.ItemCollectionTransitionCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionProgress> = L"Microsoft.UI.Xaml.Controls.ItemCollectionTransitionProgress";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionProvider> = L"Microsoft.UI.Xaml.Controls.ItemCollectionTransitionProvider";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemContainer> = L"Microsoft.UI.Xaml.Controls.ItemContainer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemContainerGenerator> = L"Microsoft.UI.Xaml.Controls.ItemContainerGenerator";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemsControl> = L"Microsoft.UI.Xaml.Controls.ItemsControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemsPanelTemplate> = L"Microsoft.UI.Xaml.Controls.ItemsPanelTemplate";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemsPickedEventArgs> = L"Microsoft.UI.Xaml.Controls.ItemsPickedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemsPresenter> = L"Microsoft.UI.Xaml.Controls.ItemsPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeater> = L"Microsoft.UI.Xaml.Controls.ItemsRepeater";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementClearingEventArgs> = L"Microsoft.UI.Xaml.Controls.ItemsRepeaterElementClearingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementIndexChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ItemsRepeaterElementIndexChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementPreparedEventArgs> = L"Microsoft.UI.Xaml.Controls.ItemsRepeaterElementPreparedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterScrollHost> = L"Microsoft.UI.Xaml.Controls.ItemsRepeaterScrollHost";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemsSourceView> = L"Microsoft.UI.Xaml.Controls.ItemsSourceView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemsStackPanel> = L"Microsoft.UI.Xaml.Controls.ItemsStackPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemsView> = L"Microsoft.UI.Xaml.Controls.ItemsView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemsViewItemInvokedEventArgs> = L"Microsoft.UI.Xaml.Controls.ItemsViewItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemsViewSelectionChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ItemsViewSelectionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemsWrapGrid> = L"Microsoft.UI.Xaml.Controls.ItemsWrapGrid";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Layout> = L"Microsoft.UI.Xaml.Controls.Layout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::LayoutContext> = L"Microsoft.UI.Xaml.Controls.LayoutContext";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayout> = L"Microsoft.UI.Xaml.Controls.LinedFlowLayout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayoutItemCollectionTransitionProvider> = L"Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemCollectionTransitionProvider";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayoutItemsInfoRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsInfoRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ListBox> = L"Microsoft.UI.Xaml.Controls.ListBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ListBoxItem> = L"Microsoft.UI.Xaml.Controls.ListBoxItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ListPickerFlyout> = L"Microsoft.UI.Xaml.Controls.ListPickerFlyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ListPickerFlyoutPresenter> = L"Microsoft.UI.Xaml.Controls.ListPickerFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ListView> = L"Microsoft.UI.Xaml.Controls.ListView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ListViewBase> = L"Microsoft.UI.Xaml.Controls.ListViewBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem> = L"Microsoft.UI.Xaml.Controls.ListViewBaseHeaderItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ListViewHeaderItem> = L"Microsoft.UI.Xaml.Controls.ListViewHeaderItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ListViewItem> = L"Microsoft.UI.Xaml.Controls.ListViewItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ListViewPersistenceHelper> = L"Microsoft.UI.Xaml.Controls.ListViewPersistenceHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MapControl> = L"Microsoft.UI.Xaml.Controls.MapControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MapControlMapServiceErrorOccurredEventArgs> = L"Microsoft.UI.Xaml.Controls.MapControlMapServiceErrorOccurredEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MapElement> = L"Microsoft.UI.Xaml.Controls.MapElement";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MapElementClickEventArgs> = L"Microsoft.UI.Xaml.Controls.MapElementClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MapElementsLayer> = L"Microsoft.UI.Xaml.Controls.MapElementsLayer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MapIcon> = L"Microsoft.UI.Xaml.Controls.MapIcon";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MapLayer> = L"Microsoft.UI.Xaml.Controls.MapLayer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MediaPlayerElement> = L"Microsoft.UI.Xaml.Controls.MediaPlayerElement";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MediaPlayerPresenter> = L"Microsoft.UI.Xaml.Controls.MediaPlayerPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MediaTransportControls> = L"Microsoft.UI.Xaml.Controls.MediaTransportControls";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MediaTransportControlsHelper> = L"Microsoft.UI.Xaml.Controls.MediaTransportControlsHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MenuBar> = L"Microsoft.UI.Xaml.Controls.MenuBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MenuBarItem> = L"Microsoft.UI.Xaml.Controls.MenuBarItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MenuBarItemFlyout> = L"Microsoft.UI.Xaml.Controls.MenuBarItemFlyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MenuFlyout> = L"Microsoft.UI.Xaml.Controls.MenuFlyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutItem> = L"Microsoft.UI.Xaml.Controls.MenuFlyoutItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase> = L"Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutPresenter> = L"Microsoft.UI.Xaml.Controls.MenuFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutSeparator> = L"Microsoft.UI.Xaml.Controls.MenuFlyoutSeparator";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem> = L"Microsoft.UI.Xaml.Controls.MenuFlyoutSubItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationView> = L"Microsoft.UI.Xaml.Controls.NavigationView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.NavigationViewBackRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.NavigationViewDisplayModeChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem> = L"Microsoft.UI.Xaml.Controls.NavigationViewItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemBase> = L"Microsoft.UI.Xaml.Controls.NavigationViewItemBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemCollapsedEventArgs> = L"Microsoft.UI.Xaml.Controls.NavigationViewItemCollapsedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemExpandingEventArgs> = L"Microsoft.UI.Xaml.Controls.NavigationViewItemExpandingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemHeader> = L"Microsoft.UI.Xaml.Controls.NavigationViewItemHeader";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> = L"Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator> = L"Microsoft.UI.Xaml.Controls.NavigationViewItemSeparator";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> = L"Microsoft.UI.Xaml.Controls.NavigationViewPaneClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings> = L"Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayout> = L"Microsoft.UI.Xaml.Controls.NonVirtualizingLayout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext> = L"Microsoft.UI.Xaml.Controls.NonVirtualizingLayoutContext";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NumberBox> = L"Microsoft.UI.Xaml.Controls.NumberBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NumberBoxValueChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.NumberBoxValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Page> = L"Microsoft.UI.Xaml.Controls.Page";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Panel> = L"Microsoft.UI.Xaml.Controls.Panel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ParallaxView> = L"Microsoft.UI.Xaml.Controls.ParallaxView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PasswordBox> = L"Microsoft.UI.Xaml.Controls.PasswordBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.PasswordBoxPasswordChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PathIcon> = L"Microsoft.UI.Xaml.Controls.PathIcon";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PathIconSource> = L"Microsoft.UI.Xaml.Controls.PathIconSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PersonPicture> = L"Microsoft.UI.Xaml.Controls.PersonPicture";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PersonPictureTemplateSettings> = L"Microsoft.UI.Xaml.Controls.PersonPictureTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PickerConfirmedEventArgs> = L"Microsoft.UI.Xaml.Controls.PickerConfirmedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PickerFlyout> = L"Microsoft.UI.Xaml.Controls.PickerFlyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PickerFlyoutPresenter> = L"Microsoft.UI.Xaml.Controls.PickerFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PipsPager> = L"Microsoft.UI.Xaml.Controls.PipsPager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PipsPagerSelectedIndexChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.PipsPagerSelectedIndexChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PipsPagerTemplateSettings> = L"Microsoft.UI.Xaml.Controls.PipsPagerTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Pivot> = L"Microsoft.UI.Xaml.Controls.Pivot";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PivotItem> = L"Microsoft.UI.Xaml.Controls.PivotItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PivotItemEventArgs> = L"Microsoft.UI.Xaml.Controls.PivotItemEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ProgressBar> = L"Microsoft.UI.Xaml.Controls.ProgressBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ProgressBarTemplateSettings> = L"Microsoft.UI.Xaml.Controls.ProgressBarTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ProgressRing> = L"Microsoft.UI.Xaml.Controls.ProgressRing";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ProgressRingTemplateSettings> = L"Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RadioButton> = L"Microsoft.UI.Xaml.Controls.RadioButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RadioButtons> = L"Microsoft.UI.Xaml.Controls.RadioButtons";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem> = L"Microsoft.UI.Xaml.Controls.RadioMenuFlyoutItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RatingControl> = L"Microsoft.UI.Xaml.Controls.RatingControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RatingItemFontInfo> = L"Microsoft.UI.Xaml.Controls.RatingItemFontInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RatingItemImageInfo> = L"Microsoft.UI.Xaml.Controls.RatingItemImageInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RatingItemInfo> = L"Microsoft.UI.Xaml.Controls.RatingItemInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RefreshContainer> = L"Microsoft.UI.Xaml.Controls.RefreshContainer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.RefreshInteractionRatioChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.RefreshRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.RefreshStateChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RefreshVisualizer> = L"Microsoft.UI.Xaml.Controls.RefreshVisualizer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RelativePanel> = L"Microsoft.UI.Xaml.Controls.RelativePanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RevealListViewItemPresenter> = L"Microsoft.UI.Xaml.Controls.RevealListViewItemPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RichEditBox> = L"Microsoft.UI.Xaml.Controls.RichEditBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RichEditBoxSelectionChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.RichEditBoxSelectionChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.RichEditBoxTextChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RichTextBlock> = L"Microsoft.UI.Xaml.Controls.RichTextBlock";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RichTextBlockOverflow> = L"Microsoft.UI.Xaml.Controls.RichTextBlockOverflow";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RowDefinition> = L"Microsoft.UI.Xaml.Controls.RowDefinition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RowDefinitionCollection> = L"Microsoft.UI.Xaml.Controls.RowDefinitionCollection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollContentPresenter> = L"Microsoft.UI.Xaml.Controls.ScrollContentPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollView> = L"Microsoft.UI.Xaml.Controls.ScrollView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollViewer> = L"Microsoft.UI.Xaml.Controls.ScrollViewer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollViewerView> = L"Microsoft.UI.Xaml.Controls.ScrollViewerView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingAnchorRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.ScrollingAnchorRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingBringingIntoViewEventArgs> = L"Microsoft.UI.Xaml.Controls.ScrollingBringingIntoViewEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollAnimationStartingEventArgs> = L"Microsoft.UI.Xaml.Controls.ScrollingScrollAnimationStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.ScrollingScrollCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollOptions> = L"Microsoft.UI.Xaml.Controls.ScrollingScrollOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomAnimationStartingEventArgs> = L"Microsoft.UI.Xaml.Controls.ScrollingZoomAnimationStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.ScrollingZoomCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomOptions> = L"Microsoft.UI.Xaml.Controls.ScrollingZoomOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SectionsInViewChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.SectionsInViewChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.SelectionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SelectorBar> = L"Microsoft.UI.Xaml.Controls.SelectorBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SelectorBarItem> = L"Microsoft.UI.Xaml.Controls.SelectorBarItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SelectorBarSelectionChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.SelectorBarSelectionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SemanticZoom> = L"Microsoft.UI.Xaml.Controls.SemanticZoom";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SemanticZoomLocation> = L"Microsoft.UI.Xaml.Controls.SemanticZoomLocation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SemanticZoomViewChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Slider> = L"Microsoft.UI.Xaml.Controls.Slider";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SplitButton> = L"Microsoft.UI.Xaml.Controls.SplitButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs> = L"Microsoft.UI.Xaml.Controls.SplitButtonClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SplitView> = L"Microsoft.UI.Xaml.Controls.SplitView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SplitViewPaneClosingEventArgs> = L"Microsoft.UI.Xaml.Controls.SplitViewPaneClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::StackLayout> = L"Microsoft.UI.Xaml.Controls.StackLayout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::StackPanel> = L"Microsoft.UI.Xaml.Controls.StackPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::StyleSelector> = L"Microsoft.UI.Xaml.Controls.StyleSelector";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SwapChainBackgroundPanel> = L"Microsoft.UI.Xaml.Controls.SwapChainBackgroundPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SwapChainPanel> = L"Microsoft.UI.Xaml.Controls.SwapChainPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SwipeControl> = L"Microsoft.UI.Xaml.Controls.SwipeControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SwipeItem> = L"Microsoft.UI.Xaml.Controls.SwipeItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs> = L"Microsoft.UI.Xaml.Controls.SwipeItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SwipeItems> = L"Microsoft.UI.Xaml.Controls.SwipeItems";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SymbolIcon> = L"Microsoft.UI.Xaml.Controls.SymbolIcon";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SymbolIconSource> = L"Microsoft.UI.Xaml.Controls.SymbolIconSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TabView> = L"Microsoft.UI.Xaml.Controls.TabView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TabViewItem> = L"Microsoft.UI.Xaml.Controls.TabViewItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TabViewItemTemplateSettings> = L"Microsoft.UI.Xaml.Controls.TabViewItemTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TabViewTabCloseRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.TabViewTabCloseRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TabViewTabDragCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.TabViewTabDragCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TabViewTabDragStartingEventArgs> = L"Microsoft.UI.Xaml.Controls.TabViewTabDragStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TabViewTabDroppedOutsideEventArgs> = L"Microsoft.UI.Xaml.Controls.TabViewTabDroppedOutsideEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TeachingTip> = L"Microsoft.UI.Xaml.Controls.TeachingTip";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TeachingTipClosedEventArgs> = L"Microsoft.UI.Xaml.Controls.TeachingTipClosedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TeachingTipClosingEventArgs> = L"Microsoft.UI.Xaml.Controls.TeachingTipClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings> = L"Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TextBlock> = L"Microsoft.UI.Xaml.Controls.TextBlock";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TextBox> = L"Microsoft.UI.Xaml.Controls.TextBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.TextBoxBeforeTextChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.TextBoxSelectionChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TextBoxTextChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.TextBoxTextChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TextChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.TextChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TextCommandBarFlyout> = L"Microsoft.UI.Xaml.Controls.TextCommandBarFlyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.TextCompositionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs> = L"Microsoft.UI.Xaml.Controls.TextCompositionEndedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs> = L"Microsoft.UI.Xaml.Controls.TextCompositionStartedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs> = L"Microsoft.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs> = L"Microsoft.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TextControlPasteEventArgs> = L"Microsoft.UI.Xaml.Controls.TextControlPasteEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TimePickedEventArgs> = L"Microsoft.UI.Xaml.Controls.TimePickedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TimePicker> = L"Microsoft.UI.Xaml.Controls.TimePicker";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TimePickerFlyout> = L"Microsoft.UI.Xaml.Controls.TimePickerFlyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TimePickerFlyoutPresenter> = L"Microsoft.UI.Xaml.Controls.TimePickerFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TimePickerSelectedValueChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.TimePickerSelectedValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TimePickerValueChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.TimePickerValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ToggleMenuFlyoutItem> = L"Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ToggleSplitButton> = L"Microsoft.UI.Xaml.Controls.ToggleSplitButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ToggleSplitButtonIsCheckedChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ToggleSwitch> = L"Microsoft.UI.Xaml.Controls.ToggleSwitch";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ToolTip> = L"Microsoft.UI.Xaml.Controls.ToolTip";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ToolTipService> = L"Microsoft.UI.Xaml.Controls.ToolTipService";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TreeView> = L"Microsoft.UI.Xaml.Controls.TreeView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs> = L"Microsoft.UI.Xaml.Controls.TreeViewCollapsedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs> = L"Microsoft.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs> = L"Microsoft.UI.Xaml.Controls.TreeViewExpandingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TreeViewItem> = L"Microsoft.UI.Xaml.Controls.TreeViewItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> = L"Microsoft.UI.Xaml.Controls.TreeViewItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings> = L"Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TreeViewList> = L"Microsoft.UI.Xaml.Controls.TreeViewList";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TreeViewNode> = L"Microsoft.UI.Xaml.Controls.TreeViewNode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TreeViewSelectionChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.TreeViewSelectionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TwoPaneView> = L"Microsoft.UI.Xaml.Controls.TwoPaneView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::UIElementCollection> = L"Microsoft.UI.Xaml.Controls.UIElementCollection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::UniformGridLayout> = L"Microsoft.UI.Xaml.Controls.UniformGridLayout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::UserControl> = L"Microsoft.UI.Xaml.Controls.UserControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::VariableSizedWrapGrid> = L"Microsoft.UI.Xaml.Controls.VariableSizedWrapGrid";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Viewbox> = L"Microsoft.UI.Xaml.Controls.Viewbox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayout> = L"Microsoft.UI.Xaml.Controls.VirtualizingLayout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext> = L"Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::VirtualizingPanel> = L"Microsoft.UI.Xaml.Controls.VirtualizingPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::VirtualizingStackPanel> = L"Microsoft.UI.Xaml.Controls.VirtualizingStackPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::WebView2> = L"Microsoft.UI.Xaml.Controls.WebView2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::WrapGrid> = L"Microsoft.UI.Xaml.Controls.WrapGrid";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::XamlControlsResources> = L"Microsoft.UI.Xaml.Controls.XamlControlsResources";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventKind> = L"Microsoft.UI.Xaml.Controls.AnnotatedScrollBarScrollingEventKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AppBarClosedDisplayMode> = L"Microsoft.UI.Xaml.Controls.AppBarClosedDisplayMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason> = L"Microsoft.UI.Xaml.Controls.AutoSuggestionBoxTextChangeReason";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::BackgroundSizing> = L"Microsoft.UI.Xaml.Controls.BackgroundSizing";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CalendarViewDisplayMode> = L"Microsoft.UI.Xaml.Controls.CalendarViewDisplayMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CalendarViewSelectionMode> = L"Microsoft.UI.Xaml.Controls.CalendarViewSelectionMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CandidateWindowAlignment> = L"Microsoft.UI.Xaml.Controls.CandidateWindowAlignment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CharacterCasing> = L"Microsoft.UI.Xaml.Controls.CharacterCasing";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ClickMode> = L"Microsoft.UI.Xaml.Controls.ClickMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel> = L"Microsoft.UI.Xaml.Controls.ColorPickerHsvChannel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ColorSpectrumComponents> = L"Microsoft.UI.Xaml.Controls.ColorSpectrumComponents";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ColorSpectrumShape> = L"Microsoft.UI.Xaml.Controls.ColorSpectrumShape";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ComboBoxSelectionChangedTrigger> = L"Microsoft.UI.Xaml.Controls.ComboBoxSelectionChangedTrigger";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CommandBarDefaultLabelPosition> = L"Microsoft.UI.Xaml.Controls.CommandBarDefaultLabelPosition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CommandBarDynamicOverflowAction> = L"Microsoft.UI.Xaml.Controls.CommandBarDynamicOverflowAction";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CommandBarLabelPosition> = L"Microsoft.UI.Xaml.Controls.CommandBarLabelPosition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CommandBarOverflowButtonVisibility> = L"Microsoft.UI.Xaml.Controls.CommandBarOverflowButtonVisibility";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ContentDialogButton> = L"Microsoft.UI.Xaml.Controls.ContentDialogButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ContentDialogPlacement> = L"Microsoft.UI.Xaml.Controls.ContentDialogPlacement";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ContentDialogResult> = L"Microsoft.UI.Xaml.Controls.ContentDialogResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::DisabledFormattingAccelerators> = L"Microsoft.UI.Xaml.Controls.DisabledFormattingAccelerators";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ElementRealizationOptions> = L"Microsoft.UI.Xaml.Controls.ElementRealizationOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ExpandDirection> = L"Microsoft.UI.Xaml.Controls.ExpandDirection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IncrementalLoadingTrigger> = L"Microsoft.UI.Xaml.Controls.IncrementalLoadingTrigger";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IndexBasedLayoutOrientation> = L"Microsoft.UI.Xaml.Controls.IndexBasedLayoutOrientation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::InfoBarCloseReason> = L"Microsoft.UI.Xaml.Controls.InfoBarCloseReason";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::InfoBarSeverity> = L"Microsoft.UI.Xaml.Controls.InfoBarSeverity";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionOperation> = L"Microsoft.UI.Xaml.Controls.ItemCollectionTransitionOperation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionTriggers> = L"Microsoft.UI.Xaml.Controls.ItemCollectionTransitionTriggers";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemsUpdatingScrollMode> = L"Microsoft.UI.Xaml.Controls.ItemsUpdatingScrollMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemsViewSelectionMode> = L"Microsoft.UI.Xaml.Controls.ItemsViewSelectionMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode> = L"Microsoft.UI.Xaml.Controls.LightDismissOverlayMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayoutItemsJustification> = L"Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsJustification";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayoutItemsStretch> = L"Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsStretch";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ListPickerFlyoutSelectionMode> = L"Microsoft.UI.Xaml.Controls.ListPickerFlyoutSelectionMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ListViewReorderMode> = L"Microsoft.UI.Xaml.Controls.ListViewReorderMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ListViewSelectionMode> = L"Microsoft.UI.Xaml.Controls.ListViewSelectionMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible> = L"Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode> = L"Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode> = L"Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode> = L"Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus> = L"Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled> = L"Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NumberBoxSpinButtonPlacementMode> = L"Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::NumberBoxValidationMode> = L"Microsoft.UI.Xaml.Controls.NumberBoxValidationMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Orientation> = L"Microsoft.UI.Xaml.Controls.Orientation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PanelScrollingDirection> = L"Microsoft.UI.Xaml.Controls.PanelScrollingDirection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind> = L"Microsoft.UI.Xaml.Controls.ParallaxSourceOffsetKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PasswordRevealMode> = L"Microsoft.UI.Xaml.Controls.PasswordRevealMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PipsPagerButtonVisibility> = L"Microsoft.UI.Xaml.Controls.PipsPagerButtonVisibility";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement> = L"Microsoft.UI.Xaml.Controls.PivotHeaderFocusVisualPlacement";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PivotSlideInAnimationGroup> = L"Microsoft.UI.Xaml.Controls.PivotSlideInAnimationGroup";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::PlayerAnimationOptimization> = L"Microsoft.UI.Xaml.Controls.PlayerAnimationOptimization";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RefreshPullDirection> = L"Microsoft.UI.Xaml.Controls.RefreshPullDirection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation> = L"Microsoft.UI.Xaml.Controls.RefreshVisualizerOrientation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RefreshVisualizerState> = L"Microsoft.UI.Xaml.Controls.RefreshVisualizerState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RequiresPointer> = L"Microsoft.UI.Xaml.Controls.RequiresPointer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::RichEditClipboardFormat> = L"Microsoft.UI.Xaml.Controls.RichEditClipboardFormat";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollBarVisibility> = L"Microsoft.UI.Xaml.Controls.ScrollBarVisibility";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollIntoViewAlignment> = L"Microsoft.UI.Xaml.Controls.ScrollIntoViewAlignment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollMode> = L"Microsoft.UI.Xaml.Controls.ScrollMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingAnimationMode> = L"Microsoft.UI.Xaml.Controls.ScrollingAnimationMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingChainMode> = L"Microsoft.UI.Xaml.Controls.ScrollingChainMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingContentOrientation> = L"Microsoft.UI.Xaml.Controls.ScrollingContentOrientation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingInputKinds> = L"Microsoft.UI.Xaml.Controls.ScrollingInputKinds";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingInteractionState> = L"Microsoft.UI.Xaml.Controls.ScrollingInteractionState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingRailMode> = L"Microsoft.UI.Xaml.Controls.ScrollingRailMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollBarVisibility> = L"Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollMode> = L"Microsoft.UI.Xaml.Controls.ScrollingScrollMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingSnapPointsMode> = L"Microsoft.UI.Xaml.Controls.ScrollingSnapPointsMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomMode> = L"Microsoft.UI.Xaml.Controls.ScrollingZoomMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SelectionMode> = L"Microsoft.UI.Xaml.Controls.SelectionMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SnapPointsType> = L"Microsoft.UI.Xaml.Controls.SnapPointsType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SplitViewDisplayMode> = L"Microsoft.UI.Xaml.Controls.SplitViewDisplayMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SplitViewPanePlacement> = L"Microsoft.UI.Xaml.Controls.SplitViewPanePlacement";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::StretchDirection> = L"Microsoft.UI.Xaml.Controls.StretchDirection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked> = L"Microsoft.UI.Xaml.Controls.SwipeBehaviorOnInvoked";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SwipeMode> = L"Microsoft.UI.Xaml.Controls.SwipeMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Symbol> = L"Microsoft.UI.Xaml.Controls.Symbol";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TabViewCloseButtonOverlayMode> = L"Microsoft.UI.Xaml.Controls.TabViewCloseButtonOverlayMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TabViewWidthMode> = L"Microsoft.UI.Xaml.Controls.TabViewWidthMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TeachingTipCloseReason> = L"Microsoft.UI.Xaml.Controls.TeachingTipCloseReason";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TeachingTipHeroContentPlacementMode> = L"Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TeachingTipPlacementMode> = L"Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TeachingTipTailVisibility> = L"Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TreeViewSelectionMode> = L"Microsoft.UI.Xaml.Controls.TreeViewSelectionMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TwoPaneViewMode> = L"Microsoft.UI.Xaml.Controls.TwoPaneViewMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TwoPaneViewPriority> = L"Microsoft.UI.Xaml.Controls.TwoPaneViewPriority";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration> = L"Microsoft.UI.Xaml.Controls.TwoPaneViewTallModeConfiguration";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration> = L"Microsoft.UI.Xaml.Controls.TwoPaneViewWideModeConfiguration";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsJustification> = L"Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsStretch> = L"Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::VirtualizationMode> = L"Microsoft.UI.Xaml.Controls.VirtualizationMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ZoomMode> = L"Microsoft.UI.Xaml.Controls.ZoomMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnchorRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.IAnchorRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIcon> = L"Microsoft.UI.Xaml.Controls.IAnimatedIcon";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconFactory> = L"Microsoft.UI.Xaml.Controls.IAnimatedIconFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSource> = L"Microsoft.UI.Xaml.Controls.IAnimatedIconSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSourceFactory> = L"Microsoft.UI.Xaml.Controls.IAnimatedIconSourceFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSourceStatics> = L"Microsoft.UI.Xaml.Controls.IAnimatedIconSourceStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconStatics> = L"Microsoft.UI.Xaml.Controls.IAnimatedIconStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual> = L"Microsoft.UI.Xaml.Controls.IAnimatedVisual";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual2> = L"Microsoft.UI.Xaml.Controls.IAnimatedVisual2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer> = L"Microsoft.UI.Xaml.Controls.IAnimatedVisualPlayer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer2> = L"Microsoft.UI.Xaml.Controls.IAnimatedVisualPlayer2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerFactory> = L"Microsoft.UI.Xaml.Controls.IAnimatedVisualPlayerFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics> = L"Microsoft.UI.Xaml.Controls.IAnimatedVisualPlayerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics2> = L"Microsoft.UI.Xaml.Controls.IAnimatedVisualPlayerStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource> = L"Microsoft.UI.Xaml.Controls.IAnimatedVisualSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource2> = L"Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource3> = L"Microsoft.UI.Xaml.Controls.IAnimatedVisualSource3";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBar> = L"Microsoft.UI.Xaml.Controls.IAnnotatedScrollBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarDetailLabelRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.IAnnotatedScrollBarDetailLabelRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarFactory> = L"Microsoft.UI.Xaml.Controls.IAnnotatedScrollBarFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarLabel> = L"Microsoft.UI.Xaml.Controls.IAnnotatedScrollBarLabel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarLabelFactory> = L"Microsoft.UI.Xaml.Controls.IAnnotatedScrollBarLabelFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarScrollingEventArgs> = L"Microsoft.UI.Xaml.Controls.IAnnotatedScrollBarScrollingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarStatics> = L"Microsoft.UI.Xaml.Controls.IAnnotatedScrollBarStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAppBar> = L"Microsoft.UI.Xaml.Controls.IAppBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarButton> = L"Microsoft.UI.Xaml.Controls.IAppBarButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarButtonFactory> = L"Microsoft.UI.Xaml.Controls.IAppBarButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarButtonStatics> = L"Microsoft.UI.Xaml.Controls.IAppBarButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainer> = L"Microsoft.UI.Xaml.Controls.IAppBarElementContainer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainerFactory> = L"Microsoft.UI.Xaml.Controls.IAppBarElementContainerFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainerStatics> = L"Microsoft.UI.Xaml.Controls.IAppBarElementContainerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarFactory> = L"Microsoft.UI.Xaml.Controls.IAppBarFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarOverrides> = L"Microsoft.UI.Xaml.Controls.IAppBarOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparator> = L"Microsoft.UI.Xaml.Controls.IAppBarSeparator";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparatorFactory> = L"Microsoft.UI.Xaml.Controls.IAppBarSeparatorFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparatorStatics> = L"Microsoft.UI.Xaml.Controls.IAppBarSeparatorStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarStatics> = L"Microsoft.UI.Xaml.Controls.IAppBarStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButton> = L"Microsoft.UI.Xaml.Controls.IAppBarToggleButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButtonFactory> = L"Microsoft.UI.Xaml.Controls.IAppBarToggleButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButtonStatics> = L"Microsoft.UI.Xaml.Controls.IAppBarToggleButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBox> = L"Microsoft.UI.Xaml.Controls.IAutoSuggestBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs> = L"Microsoft.UI.Xaml.Controls.IAutoSuggestBoxQuerySubmittedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxStatics> = L"Microsoft.UI.Xaml.Controls.IAutoSuggestBoxStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs> = L"Microsoft.UI.Xaml.Controls.IAutoSuggestBoxSuggestionChosenEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IAutoSuggestBoxTextChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics> = L"Microsoft.UI.Xaml.Controls.IAutoSuggestBoxTextChangedEventArgsStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IBitmapIcon> = L"Microsoft.UI.Xaml.Controls.IBitmapIcon";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconFactory> = L"Microsoft.UI.Xaml.Controls.IBitmapIconFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSource> = L"Microsoft.UI.Xaml.Controls.IBitmapIconSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory> = L"Microsoft.UI.Xaml.Controls.IBitmapIconSourceFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics> = L"Microsoft.UI.Xaml.Controls.IBitmapIconSourceStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconStatics> = L"Microsoft.UI.Xaml.Controls.IBitmapIconStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IBorder> = L"Microsoft.UI.Xaml.Controls.IBorder";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IBorderStatics> = L"Microsoft.UI.Xaml.Controls.IBorderStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBar> = L"Microsoft.UI.Xaml.Controls.IBreadcrumbBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarFactory> = L"Microsoft.UI.Xaml.Controls.IBreadcrumbBarFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItem> = L"Microsoft.UI.Xaml.Controls.IBreadcrumbBarItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItemClickedEventArgs> = L"Microsoft.UI.Xaml.Controls.IBreadcrumbBarItemClickedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItemFactory> = L"Microsoft.UI.Xaml.Controls.IBreadcrumbBarItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarStatics> = L"Microsoft.UI.Xaml.Controls.IBreadcrumbBarStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IButton> = L"Microsoft.UI.Xaml.Controls.IButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IButtonFactory> = L"Microsoft.UI.Xaml.Controls.IButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IButtonStatics> = L"Microsoft.UI.Xaml.Controls.IButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePicker> = L"Microsoft.UI.Xaml.Controls.ICalendarDatePicker";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ICalendarDatePickerDateChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerFactory> = L"Microsoft.UI.Xaml.Controls.ICalendarDatePickerFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerStatics> = L"Microsoft.UI.Xaml.Controls.ICalendarDatePickerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarView> = L"Microsoft.UI.Xaml.Controls.ICalendarView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItem> = L"Microsoft.UI.Xaml.Controls.ICalendarViewDayItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.ICalendarViewDayItemChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemFactory> = L"Microsoft.UI.Xaml.Controls.ICalendarViewDayItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemStatics> = L"Microsoft.UI.Xaml.Controls.ICalendarViewDayItemStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewFactory> = L"Microsoft.UI.Xaml.Controls.ICalendarViewFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ICalendarViewSelectedDatesChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewStatics> = L"Microsoft.UI.Xaml.Controls.ICalendarViewStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ICandidateWindowBoundsChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICanvas> = L"Microsoft.UI.Xaml.Controls.ICanvas";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICanvasFactory> = L"Microsoft.UI.Xaml.Controls.ICanvasFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICanvasStatics> = L"Microsoft.UI.Xaml.Controls.ICanvasStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICheckBox> = L"Microsoft.UI.Xaml.Controls.ICheckBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICheckBoxFactory> = L"Microsoft.UI.Xaml.Controls.ICheckBoxFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs> = L"Microsoft.UI.Xaml.Controls.IChoosingGroupHeaderContainerEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IChoosingItemContainerEventArgs> = L"Microsoft.UI.Xaml.Controls.IChoosingItemContainerEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs> = L"Microsoft.UI.Xaml.Controls.ICleanUpVirtualizedItemEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IColorChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IColorChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IColorPicker> = L"Microsoft.UI.Xaml.Controls.IColorPicker";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IColorPicker2> = L"Microsoft.UI.Xaml.Controls.IColorPicker2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IColorPickerFactory> = L"Microsoft.UI.Xaml.Controls.IColorPickerFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IColorPickerStatics> = L"Microsoft.UI.Xaml.Controls.IColorPickerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IColorPickerStatics2> = L"Microsoft.UI.Xaml.Controls.IColorPickerStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IColumnDefinition> = L"Microsoft.UI.Xaml.Controls.IColumnDefinition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IColumnDefinitionStatics> = L"Microsoft.UI.Xaml.Controls.IColumnDefinitionStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IComboBox> = L"Microsoft.UI.Xaml.Controls.IComboBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IComboBoxFactory> = L"Microsoft.UI.Xaml.Controls.IComboBoxFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IComboBoxItem> = L"Microsoft.UI.Xaml.Controls.IComboBoxItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IComboBoxItemFactory> = L"Microsoft.UI.Xaml.Controls.IComboBoxItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IComboBoxOverrides> = L"Microsoft.UI.Xaml.Controls.IComboBoxOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IComboBoxStatics> = L"Microsoft.UI.Xaml.Controls.IComboBoxStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IComboBoxTextSubmittedEventArgs> = L"Microsoft.UI.Xaml.Controls.IComboBoxTextSubmittedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBar> = L"Microsoft.UI.Xaml.Controls.ICommandBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBarElement> = L"Microsoft.UI.Xaml.Controls.ICommandBarElement";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFactory> = L"Microsoft.UI.Xaml.Controls.ICommandBarFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout> = L"Microsoft.UI.Xaml.Controls.ICommandBarFlyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout2> = L"Microsoft.UI.Xaml.Controls.ICommandBarFlyout2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory> = L"Microsoft.UI.Xaml.Controls.ICommandBarFlyoutFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBarOverflowPresenter> = L"Microsoft.UI.Xaml.Controls.ICommandBarOverflowPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory> = L"Microsoft.UI.Xaml.Controls.ICommandBarOverflowPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBarStatics> = L"Microsoft.UI.Xaml.Controls.ICommandBarStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContainerContentChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.IContainerContentChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContentControl> = L"Microsoft.UI.Xaml.Controls.IContentControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContentControlFactory> = L"Microsoft.UI.Xaml.Controls.IContentControlFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides> = L"Microsoft.UI.Xaml.Controls.IContentControlOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContentControlStatics> = L"Microsoft.UI.Xaml.Controls.IContentControlStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialog> = L"Microsoft.UI.Xaml.Controls.IContentDialog";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialogButtonClickDeferral> = L"Microsoft.UI.Xaml.Controls.IContentDialogButtonClickDeferral";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialogButtonClickEventArgs> = L"Microsoft.UI.Xaml.Controls.IContentDialogButtonClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosedEventArgs> = L"Microsoft.UI.Xaml.Controls.IContentDialogClosedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosingDeferral> = L"Microsoft.UI.Xaml.Controls.IContentDialogClosingDeferral";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosingEventArgs> = L"Microsoft.UI.Xaml.Controls.IContentDialogClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialogFactory> = L"Microsoft.UI.Xaml.Controls.IContentDialogFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialogOpenedEventArgs> = L"Microsoft.UI.Xaml.Controls.IContentDialogOpenedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialogStatics> = L"Microsoft.UI.Xaml.Controls.IContentDialogStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContentPresenter> = L"Microsoft.UI.Xaml.Controls.IContentPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContentPresenterFactory> = L"Microsoft.UI.Xaml.Controls.IContentPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContentPresenterOverrides> = L"Microsoft.UI.Xaml.Controls.IContentPresenterOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContentPresenterStatics> = L"Microsoft.UI.Xaml.Controls.IContentPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IContextMenuEventArgs> = L"Microsoft.UI.Xaml.Controls.IContextMenuEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IControl> = L"Microsoft.UI.Xaml.Controls.IControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IControlFactory> = L"Microsoft.UI.Xaml.Controls.IControlFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IControlOverrides> = L"Microsoft.UI.Xaml.Controls.IControlOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IControlProtected> = L"Microsoft.UI.Xaml.Controls.IControlProtected";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IControlStatics> = L"Microsoft.UI.Xaml.Controls.IControlStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IControlTemplate> = L"Microsoft.UI.Xaml.Controls.IControlTemplate";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ICoreWebView2InitializedEventArgs> = L"Microsoft.UI.Xaml.Controls.ICoreWebView2InitializedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelector> = L"Microsoft.UI.Xaml.Controls.IDataTemplateSelector";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelectorFactory> = L"Microsoft.UI.Xaml.Controls.IDataTemplateSelectorFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelectorOverrides> = L"Microsoft.UI.Xaml.Controls.IDataTemplateSelectorOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickedEventArgs> = L"Microsoft.UI.Xaml.Controls.IDatePickedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDatePicker> = L"Microsoft.UI.Xaml.Controls.IDatePicker";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFactory> = L"Microsoft.UI.Xaml.Controls.IDatePickerFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyout> = L"Microsoft.UI.Xaml.Controls.IDatePickerFlyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItem> = L"Microsoft.UI.Xaml.Controls.IDatePickerFlyoutItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItemStatics> = L"Microsoft.UI.Xaml.Controls.IDatePickerFlyoutItemStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenter> = L"Microsoft.UI.Xaml.Controls.IDatePickerFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenterStatics> = L"Microsoft.UI.Xaml.Controls.IDatePickerFlyoutPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutStatics> = L"Microsoft.UI.Xaml.Controls.IDatePickerFlyoutStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerSelectedValueChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IDatePickerSelectedValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerStatics> = L"Microsoft.UI.Xaml.Controls.IDatePickerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerValueChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IDatePickerValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDragItemsCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.IDragItemsCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDragItemsStartingEventArgs> = L"Microsoft.UI.Xaml.Controls.IDragItemsStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDropDownButton> = L"Microsoft.UI.Xaml.Controls.IDropDownButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDropDownButtonFactory> = L"Microsoft.UI.Xaml.Controls.IDropDownButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource> = L"Microsoft.UI.Xaml.Controls.IDynamicAnimatedVisualSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.IDynamicOverflowItemsChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IExpander> = L"Microsoft.UI.Xaml.Controls.IExpander";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IExpanderCollapsedEventArgs> = L"Microsoft.UI.Xaml.Controls.IExpanderCollapsedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IExpanderExpandingEventArgs> = L"Microsoft.UI.Xaml.Controls.IExpanderExpandingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IExpanderFactory> = L"Microsoft.UI.Xaml.Controls.IExpanderFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IExpanderStatics> = L"Microsoft.UI.Xaml.Controls.IExpanderStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IExpanderTemplateSettings> = L"Microsoft.UI.Xaml.Controls.IExpanderTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFlipView> = L"Microsoft.UI.Xaml.Controls.IFlipView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFlipViewFactory> = L"Microsoft.UI.Xaml.Controls.IFlipViewFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFlipViewItem> = L"Microsoft.UI.Xaml.Controls.IFlipViewItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFlipViewItemFactory> = L"Microsoft.UI.Xaml.Controls.IFlipViewItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFlipViewStatics> = L"Microsoft.UI.Xaml.Controls.IFlipViewStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFlyout> = L"Microsoft.UI.Xaml.Controls.IFlyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFlyoutFactory> = L"Microsoft.UI.Xaml.Controls.IFlyoutFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenter> = L"Microsoft.UI.Xaml.Controls.IFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenterFactory> = L"Microsoft.UI.Xaml.Controls.IFlyoutPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenterStatics> = L"Microsoft.UI.Xaml.Controls.IFlyoutPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFlyoutStatics> = L"Microsoft.UI.Xaml.Controls.IFlyoutStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFocusDisengagedEventArgs> = L"Microsoft.UI.Xaml.Controls.IFocusDisengagedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFocusEngagedEventArgs> = L"Microsoft.UI.Xaml.Controls.IFocusEngagedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFontIcon> = L"Microsoft.UI.Xaml.Controls.IFontIcon";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFontIconFactory> = L"Microsoft.UI.Xaml.Controls.IFontIconFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFontIconSource> = L"Microsoft.UI.Xaml.Controls.IFontIconSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFontIconSourceFactory> = L"Microsoft.UI.Xaml.Controls.IFontIconSourceFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFontIconSourceStatics> = L"Microsoft.UI.Xaml.Controls.IFontIconSourceStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFontIconStatics> = L"Microsoft.UI.Xaml.Controls.IFontIconStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFrame> = L"Microsoft.UI.Xaml.Controls.IFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFrameFactory> = L"Microsoft.UI.Xaml.Controls.IFrameFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IFrameStatics> = L"Microsoft.UI.Xaml.Controls.IFrameStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IGrid> = L"Microsoft.UI.Xaml.Controls.IGrid";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IGridFactory> = L"Microsoft.UI.Xaml.Controls.IGridFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IGridStatics> = L"Microsoft.UI.Xaml.Controls.IGridStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IGridView> = L"Microsoft.UI.Xaml.Controls.IGridView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IGridViewFactory> = L"Microsoft.UI.Xaml.Controls.IGridViewFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IGridViewHeaderItem> = L"Microsoft.UI.Xaml.Controls.IGridViewHeaderItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IGridViewHeaderItemFactory> = L"Microsoft.UI.Xaml.Controls.IGridViewHeaderItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IGridViewItem> = L"Microsoft.UI.Xaml.Controls.IGridViewItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IGridViewItemFactory> = L"Microsoft.UI.Xaml.Controls.IGridViewItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IGroupItem> = L"Microsoft.UI.Xaml.Controls.IGroupItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IGroupItemFactory> = L"Microsoft.UI.Xaml.Controls.IGroupItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IGroupStyle> = L"Microsoft.UI.Xaml.Controls.IGroupStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleFactory> = L"Microsoft.UI.Xaml.Controls.IGroupStyleFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelector> = L"Microsoft.UI.Xaml.Controls.IGroupStyleSelector";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelectorFactory> = L"Microsoft.UI.Xaml.Controls.IGroupStyleSelectorFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelectorOverrides> = L"Microsoft.UI.Xaml.Controls.IGroupStyleSelectorOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IHasValidationErrorsChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IHasValidationErrorsChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IHub> = L"Microsoft.UI.Xaml.Controls.IHub";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IHubFactory> = L"Microsoft.UI.Xaml.Controls.IHubFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IHubSection> = L"Microsoft.UI.Xaml.Controls.IHubSection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IHubSectionFactory> = L"Microsoft.UI.Xaml.Controls.IHubSectionFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs> = L"Microsoft.UI.Xaml.Controls.IHubSectionHeaderClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IHubSectionStatics> = L"Microsoft.UI.Xaml.Controls.IHubSectionStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IHubStatics> = L"Microsoft.UI.Xaml.Controls.IHubStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButton> = L"Microsoft.UI.Xaml.Controls.IHyperlinkButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButtonFactory> = L"Microsoft.UI.Xaml.Controls.IHyperlinkButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButtonStatics> = L"Microsoft.UI.Xaml.Controls.IHyperlinkButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IIconElement> = L"Microsoft.UI.Xaml.Controls.IIconElement";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IIconElementFactory> = L"Microsoft.UI.Xaml.Controls.IIconElementFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IIconElementStatics> = L"Microsoft.UI.Xaml.Controls.IIconElementStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IIconSource> = L"Microsoft.UI.Xaml.Controls.IIconSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IIconSourceElement> = L"Microsoft.UI.Xaml.Controls.IIconSourceElement";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IIconSourceElementFactory> = L"Microsoft.UI.Xaml.Controls.IIconSourceElementFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IIconSourceElementStatics> = L"Microsoft.UI.Xaml.Controls.IIconSourceElementStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IIconSourceFactory> = L"Microsoft.UI.Xaml.Controls.IIconSourceFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IIconSourceOverrides> = L"Microsoft.UI.Xaml.Controls.IIconSourceOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IIconSourceStatics> = L"Microsoft.UI.Xaml.Controls.IIconSourceStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IImage> = L"Microsoft.UI.Xaml.Controls.IImage";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IImageIcon> = L"Microsoft.UI.Xaml.Controls.IImageIcon";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IImageIconFactory> = L"Microsoft.UI.Xaml.Controls.IImageIconFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IImageIconSource> = L"Microsoft.UI.Xaml.Controls.IImageIconSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IImageIconSourceFactory> = L"Microsoft.UI.Xaml.Controls.IImageIconSourceFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IImageIconSourceStatics> = L"Microsoft.UI.Xaml.Controls.IImageIconSourceStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IImageIconStatics> = L"Microsoft.UI.Xaml.Controls.IImageIconStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IImageStatics> = L"Microsoft.UI.Xaml.Controls.IImageStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBadge> = L"Microsoft.UI.Xaml.Controls.IInfoBadge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeFactory> = L"Microsoft.UI.Xaml.Controls.IInfoBadgeFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeStatics> = L"Microsoft.UI.Xaml.Controls.IInfoBadgeStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettings> = L"Microsoft.UI.Xaml.Controls.IInfoBadgeTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettingsFactory> = L"Microsoft.UI.Xaml.Controls.IInfoBadgeTemplateSettingsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettingsStatics> = L"Microsoft.UI.Xaml.Controls.IInfoBadgeTemplateSettingsStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBar> = L"Microsoft.UI.Xaml.Controls.IInfoBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosedEventArgs> = L"Microsoft.UI.Xaml.Controls.IInfoBarClosedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosedEventArgsFactory> = L"Microsoft.UI.Xaml.Controls.IInfoBarClosedEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosingEventArgs> = L"Microsoft.UI.Xaml.Controls.IInfoBarClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosingEventArgsFactory> = L"Microsoft.UI.Xaml.Controls.IInfoBarClosingEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarFactory> = L"Microsoft.UI.Xaml.Controls.IInfoBarFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarStatics> = L"Microsoft.UI.Xaml.Controls.IInfoBarStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettings> = L"Microsoft.UI.Xaml.Controls.IInfoBarTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettingsFactory> = L"Microsoft.UI.Xaml.Controls.IInfoBarTemplateSettingsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettingsStatics> = L"Microsoft.UI.Xaml.Controls.IInfoBarTemplateSettingsStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IInsertionPanel> = L"Microsoft.UI.Xaml.Controls.IInsertionPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IIsTextTrimmedChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemClickEventArgs> = L"Microsoft.UI.Xaml.Controls.IItemClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransition> = L"Microsoft.UI.Xaml.Controls.IItemCollectionTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.IItemCollectionTransitionCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProgress> = L"Microsoft.UI.Xaml.Controls.IItemCollectionTransitionProgress";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProvider> = L"Microsoft.UI.Xaml.Controls.IItemCollectionTransitionProvider";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProviderFactory> = L"Microsoft.UI.Xaml.Controls.IItemCollectionTransitionProviderFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProviderOverrides> = L"Microsoft.UI.Xaml.Controls.IItemCollectionTransitionProviderOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemContainer> = L"Microsoft.UI.Xaml.Controls.IItemContainer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemContainerFactory> = L"Microsoft.UI.Xaml.Controls.IItemContainerFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemContainerGenerator> = L"Microsoft.UI.Xaml.Controls.IItemContainerGenerator";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemContainerMapping> = L"Microsoft.UI.Xaml.Controls.IItemContainerMapping";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemContainerStatics> = L"Microsoft.UI.Xaml.Controls.IItemContainerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsControl> = L"Microsoft.UI.Xaml.Controls.IItemsControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsControlFactory> = L"Microsoft.UI.Xaml.Controls.IItemsControlFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides> = L"Microsoft.UI.Xaml.Controls.IItemsControlOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsControlStatics> = L"Microsoft.UI.Xaml.Controls.IItemsControlStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsPanelTemplate> = L"Microsoft.UI.Xaml.Controls.IItemsPanelTemplate";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsPickedEventArgs> = L"Microsoft.UI.Xaml.Controls.IItemsPickedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsPresenter> = L"Microsoft.UI.Xaml.Controls.IItemsPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsPresenterStatics> = L"Microsoft.UI.Xaml.Controls.IItemsPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater> = L"Microsoft.UI.Xaml.Controls.IItemsRepeater";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater2> = L"Microsoft.UI.Xaml.Controls.IItemsRepeater2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs> = L"Microsoft.UI.Xaml.Controls.IItemsRepeaterElementClearingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IItemsRepeaterElementIndexChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs> = L"Microsoft.UI.Xaml.Controls.IItemsRepeaterElementPreparedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterFactory> = L"Microsoft.UI.Xaml.Controls.IItemsRepeaterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterScrollHost> = L"Microsoft.UI.Xaml.Controls.IItemsRepeaterScrollHost";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics> = L"Microsoft.UI.Xaml.Controls.IItemsRepeaterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics2> = L"Microsoft.UI.Xaml.Controls.IItemsRepeaterStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsSourceView> = L"Microsoft.UI.Xaml.Controls.IItemsSourceView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsSourceViewFactory> = L"Microsoft.UI.Xaml.Controls.IItemsSourceViewFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsStackPanel> = L"Microsoft.UI.Xaml.Controls.IItemsStackPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsStackPanelStatics> = L"Microsoft.UI.Xaml.Controls.IItemsStackPanelStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsView> = L"Microsoft.UI.Xaml.Controls.IItemsView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsViewFactory> = L"Microsoft.UI.Xaml.Controls.IItemsViewFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsViewItemInvokedEventArgs> = L"Microsoft.UI.Xaml.Controls.IItemsViewItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsViewSelectionChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IItemsViewSelectionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsViewStatics> = L"Microsoft.UI.Xaml.Controls.IItemsViewStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsWrapGrid> = L"Microsoft.UI.Xaml.Controls.IItemsWrapGrid";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IItemsWrapGridStatics> = L"Microsoft.UI.Xaml.Controls.IItemsWrapGridStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IKeyIndexMapping> = L"Microsoft.UI.Xaml.Controls.IKeyIndexMapping";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ILayout> = L"Microsoft.UI.Xaml.Controls.ILayout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ILayout2> = L"Microsoft.UI.Xaml.Controls.ILayout2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ILayoutContext> = L"Microsoft.UI.Xaml.Controls.ILayoutContext";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ILayoutContextFactory> = L"Microsoft.UI.Xaml.Controls.ILayoutContextFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ILayoutContextOverrides> = L"Microsoft.UI.Xaml.Controls.ILayoutContextOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ILayoutFactory> = L"Microsoft.UI.Xaml.Controls.ILayoutFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ILayoutOverrides> = L"Microsoft.UI.Xaml.Controls.ILayoutOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected> = L"Microsoft.UI.Xaml.Controls.ILayoutProtected";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected2> = L"Microsoft.UI.Xaml.Controls.ILayoutProtected2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayout> = L"Microsoft.UI.Xaml.Controls.ILinedFlowLayout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutFactory> = L"Microsoft.UI.Xaml.Controls.ILinedFlowLayoutFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemCollectionTransitionProvider> = L"Microsoft.UI.Xaml.Controls.ILinedFlowLayoutItemCollectionTransitionProvider";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemCollectionTransitionProviderFactory> = L"Microsoft.UI.Xaml.Controls.ILinedFlowLayoutItemCollectionTransitionProviderFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemsInfoRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.ILinedFlowLayoutItemsInfoRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutStatics> = L"Microsoft.UI.Xaml.Controls.ILinedFlowLayoutStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListBox> = L"Microsoft.UI.Xaml.Controls.IListBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListBoxFactory> = L"Microsoft.UI.Xaml.Controls.IListBoxFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListBoxItem> = L"Microsoft.UI.Xaml.Controls.IListBoxItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListBoxItemFactory> = L"Microsoft.UI.Xaml.Controls.IListBoxItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListBoxStatics> = L"Microsoft.UI.Xaml.Controls.IListBoxStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyout> = L"Microsoft.UI.Xaml.Controls.IListPickerFlyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyoutPresenter> = L"Microsoft.UI.Xaml.Controls.IListPickerFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyoutStatics> = L"Microsoft.UI.Xaml.Controls.IListPickerFlyoutStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListView> = L"Microsoft.UI.Xaml.Controls.IListView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListViewBase> = L"Microsoft.UI.Xaml.Controls.IListViewBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseFactory> = L"Microsoft.UI.Xaml.Controls.IListViewBaseFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItem> = L"Microsoft.UI.Xaml.Controls.IListViewBaseHeaderItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItemFactory> = L"Microsoft.UI.Xaml.Controls.IListViewBaseHeaderItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseStatics> = L"Microsoft.UI.Xaml.Controls.IListViewBaseStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListViewFactory> = L"Microsoft.UI.Xaml.Controls.IListViewFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListViewHeaderItem> = L"Microsoft.UI.Xaml.Controls.IListViewHeaderItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListViewHeaderItemFactory> = L"Microsoft.UI.Xaml.Controls.IListViewHeaderItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListViewItem> = L"Microsoft.UI.Xaml.Controls.IListViewItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListViewItemFactory> = L"Microsoft.UI.Xaml.Controls.IListViewItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListViewPersistenceHelper> = L"Microsoft.UI.Xaml.Controls.IListViewPersistenceHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IListViewPersistenceHelperStatics> = L"Microsoft.UI.Xaml.Controls.IListViewPersistenceHelperStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMapControl> = L"Microsoft.UI.Xaml.Controls.IMapControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMapControlFactory> = L"Microsoft.UI.Xaml.Controls.IMapControlFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMapControlMapServiceErrorOccurredEventArgs> = L"Microsoft.UI.Xaml.Controls.IMapControlMapServiceErrorOccurredEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMapControlStatics> = L"Microsoft.UI.Xaml.Controls.IMapControlStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMapElement> = L"Microsoft.UI.Xaml.Controls.IMapElement";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMapElementClickEventArgs> = L"Microsoft.UI.Xaml.Controls.IMapElementClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMapElementFactory> = L"Microsoft.UI.Xaml.Controls.IMapElementFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayer> = L"Microsoft.UI.Xaml.Controls.IMapElementsLayer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayerFactory> = L"Microsoft.UI.Xaml.Controls.IMapElementsLayerFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayerStatics> = L"Microsoft.UI.Xaml.Controls.IMapElementsLayerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMapIcon> = L"Microsoft.UI.Xaml.Controls.IMapIcon";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMapIconFactory> = L"Microsoft.UI.Xaml.Controls.IMapIconFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMapIconStatics> = L"Microsoft.UI.Xaml.Controls.IMapIconStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMapLayer> = L"Microsoft.UI.Xaml.Controls.IMapLayer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMapLayerFactory> = L"Microsoft.UI.Xaml.Controls.IMapLayerFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElement> = L"Microsoft.UI.Xaml.Controls.IMediaPlayerElement";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElementFactory> = L"Microsoft.UI.Xaml.Controls.IMediaPlayerElementFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElementStatics> = L"Microsoft.UI.Xaml.Controls.IMediaPlayerElementStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenter> = L"Microsoft.UI.Xaml.Controls.IMediaPlayerPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenterFactory> = L"Microsoft.UI.Xaml.Controls.IMediaPlayerPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenterStatics> = L"Microsoft.UI.Xaml.Controls.IMediaPlayerPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControls> = L"Microsoft.UI.Xaml.Controls.IMediaTransportControls";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsFactory> = L"Microsoft.UI.Xaml.Controls.IMediaTransportControlsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsHelper> = L"Microsoft.UI.Xaml.Controls.IMediaTransportControlsHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsHelperStatics> = L"Microsoft.UI.Xaml.Controls.IMediaTransportControlsHelperStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsStatics> = L"Microsoft.UI.Xaml.Controls.IMediaTransportControlsStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuBar> = L"Microsoft.UI.Xaml.Controls.IMenuBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuBarFactory> = L"Microsoft.UI.Xaml.Controls.IMenuBarFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItem> = L"Microsoft.UI.Xaml.Controls.IMenuBarItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFactory> = L"Microsoft.UI.Xaml.Controls.IMenuBarItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout> = L"Microsoft.UI.Xaml.Controls.IMenuBarItemFlyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory> = L"Microsoft.UI.Xaml.Controls.IMenuBarItemFlyoutFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemStatics> = L"Microsoft.UI.Xaml.Controls.IMenuBarItemStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuBarStatics> = L"Microsoft.UI.Xaml.Controls.IMenuBarStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyout> = L"Microsoft.UI.Xaml.Controls.IMenuFlyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutFactory> = L"Microsoft.UI.Xaml.Controls.IMenuFlyoutFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItem> = L"Microsoft.UI.Xaml.Controls.IMenuFlyoutItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBase> = L"Microsoft.UI.Xaml.Controls.IMenuFlyoutItemBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory> = L"Microsoft.UI.Xaml.Controls.IMenuFlyoutItemBaseFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemFactory> = L"Microsoft.UI.Xaml.Controls.IMenuFlyoutItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemStatics> = L"Microsoft.UI.Xaml.Controls.IMenuFlyoutItemStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenter> = L"Microsoft.UI.Xaml.Controls.IMenuFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenter2> = L"Microsoft.UI.Xaml.Controls.IMenuFlyoutPresenter2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenterFactory> = L"Microsoft.UI.Xaml.Controls.IMenuFlyoutPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenterStatics> = L"Microsoft.UI.Xaml.Controls.IMenuFlyoutPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenterStatics2> = L"Microsoft.UI.Xaml.Controls.IMenuFlyoutPresenterStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSeparator> = L"Microsoft.UI.Xaml.Controls.IMenuFlyoutSeparator";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory> = L"Microsoft.UI.Xaml.Controls.IMenuFlyoutSeparatorFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutStatics> = L"Microsoft.UI.Xaml.Controls.IMenuFlyoutStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSubItem> = L"Microsoft.UI.Xaml.Controls.IMenuFlyoutSubItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSubItemStatics> = L"Microsoft.UI.Xaml.Controls.IMenuFlyoutSubItemStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigate> = L"Microsoft.UI.Xaml.Controls.INavigate";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationView> = L"Microsoft.UI.Xaml.Controls.INavigationView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationView2> = L"Microsoft.UI.Xaml.Controls.INavigationView2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.INavigationViewBackRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.INavigationViewDisplayModeChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewFactory> = L"Microsoft.UI.Xaml.Controls.INavigationViewFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem> = L"Microsoft.UI.Xaml.Controls.INavigationViewItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem2> = L"Microsoft.UI.Xaml.Controls.INavigationViewItem2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem3> = L"Microsoft.UI.Xaml.Controls.INavigationViewItem3";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase2> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemBase2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemBaseFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBaseStatics> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemBaseStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemCollapsedEventArgs> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemCollapsedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemExpandingEventArgs> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemExpandingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemFactory> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemHeader> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemHeader";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemHeaderFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs2> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemInvokedEventArgs2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemSeparator";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemSeparatorFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemStatics> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemStatics2> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemStatics3> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemStatics3";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs> = L"Microsoft.UI.Xaml.Controls.INavigationViewPaneClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.INavigationViewSelectionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs2> = L"Microsoft.UI.Xaml.Controls.INavigationViewSelectionChangedEventArgs2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewStatics> = L"Microsoft.UI.Xaml.Controls.INavigationViewStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewStatics2> = L"Microsoft.UI.Xaml.Controls.INavigationViewStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings> = L"Microsoft.UI.Xaml.Controls.INavigationViewTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings2> = L"Microsoft.UI.Xaml.Controls.INavigationViewTemplateSettings2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory> = L"Microsoft.UI.Xaml.Controls.INavigationViewTemplateSettingsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics> = L"Microsoft.UI.Xaml.Controls.INavigationViewTemplateSettingsStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics2> = L"Microsoft.UI.Xaml.Controls.INavigationViewTemplateSettingsStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayout> = L"Microsoft.UI.Xaml.Controls.INonVirtualizingLayout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext> = L"Microsoft.UI.Xaml.Controls.INonVirtualizingLayoutContext";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextFactory> = L"Microsoft.UI.Xaml.Controls.INonVirtualizingLayoutContextFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides> = L"Microsoft.UI.Xaml.Controls.INonVirtualizingLayoutContextOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutFactory> = L"Microsoft.UI.Xaml.Controls.INonVirtualizingLayoutFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides> = L"Microsoft.UI.Xaml.Controls.INonVirtualizingLayoutOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INumberBox> = L"Microsoft.UI.Xaml.Controls.INumberBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INumberBoxFactory> = L"Microsoft.UI.Xaml.Controls.INumberBoxFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INumberBoxStatics> = L"Microsoft.UI.Xaml.Controls.INumberBoxStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::INumberBoxValueChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.INumberBoxValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPage> = L"Microsoft.UI.Xaml.Controls.IPage";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPageFactory> = L"Microsoft.UI.Xaml.Controls.IPageFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPageOverrides> = L"Microsoft.UI.Xaml.Controls.IPageOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPageStatics> = L"Microsoft.UI.Xaml.Controls.IPageStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPanel> = L"Microsoft.UI.Xaml.Controls.IPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPanelFactory> = L"Microsoft.UI.Xaml.Controls.IPanelFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPanelStatics> = L"Microsoft.UI.Xaml.Controls.IPanelStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IParallaxView> = L"Microsoft.UI.Xaml.Controls.IParallaxView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IParallaxViewFactory> = L"Microsoft.UI.Xaml.Controls.IParallaxViewFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IParallaxViewStatics> = L"Microsoft.UI.Xaml.Controls.IParallaxViewStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPasswordBox> = L"Microsoft.UI.Xaml.Controls.IPasswordBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.IPasswordBoxPasswordChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPasswordBoxStatics> = L"Microsoft.UI.Xaml.Controls.IPasswordBoxStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPathIcon> = L"Microsoft.UI.Xaml.Controls.IPathIcon";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPathIconFactory> = L"Microsoft.UI.Xaml.Controls.IPathIconFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPathIconSource> = L"Microsoft.UI.Xaml.Controls.IPathIconSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPathIconSourceFactory> = L"Microsoft.UI.Xaml.Controls.IPathIconSourceFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPathIconSourceStatics> = L"Microsoft.UI.Xaml.Controls.IPathIconSourceStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPathIconStatics> = L"Microsoft.UI.Xaml.Controls.IPathIconStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPersonPicture> = L"Microsoft.UI.Xaml.Controls.IPersonPicture";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureFactory> = L"Microsoft.UI.Xaml.Controls.IPersonPictureFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureStatics> = L"Microsoft.UI.Xaml.Controls.IPersonPictureStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings> = L"Microsoft.UI.Xaml.Controls.IPersonPictureTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPickerConfirmedEventArgs> = L"Microsoft.UI.Xaml.Controls.IPickerConfirmedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPickerFlyout> = L"Microsoft.UI.Xaml.Controls.IPickerFlyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPickerFlyoutPresenter> = L"Microsoft.UI.Xaml.Controls.IPickerFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPickerFlyoutStatics> = L"Microsoft.UI.Xaml.Controls.IPickerFlyoutStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPipsPager> = L"Microsoft.UI.Xaml.Controls.IPipsPager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerFactory> = L"Microsoft.UI.Xaml.Controls.IPipsPagerFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerSelectedIndexChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IPipsPagerSelectedIndexChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerStatics> = L"Microsoft.UI.Xaml.Controls.IPipsPagerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerTemplateSettings> = L"Microsoft.UI.Xaml.Controls.IPipsPagerTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPivot> = L"Microsoft.UI.Xaml.Controls.IPivot";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPivotFactory> = L"Microsoft.UI.Xaml.Controls.IPivotFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPivotItem> = L"Microsoft.UI.Xaml.Controls.IPivotItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPivotItemEventArgs> = L"Microsoft.UI.Xaml.Controls.IPivotItemEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPivotItemFactory> = L"Microsoft.UI.Xaml.Controls.IPivotItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPivotItemStatics> = L"Microsoft.UI.Xaml.Controls.IPivotItemStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IPivotStatics> = L"Microsoft.UI.Xaml.Controls.IPivotStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IProgressBar> = L"Microsoft.UI.Xaml.Controls.IProgressBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IProgressBarFactory> = L"Microsoft.UI.Xaml.Controls.IProgressBarFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IProgressBarStatics> = L"Microsoft.UI.Xaml.Controls.IProgressBarStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IProgressBarTemplateSettings> = L"Microsoft.UI.Xaml.Controls.IProgressBarTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IProgressRing> = L"Microsoft.UI.Xaml.Controls.IProgressRing";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IProgressRingFactory> = L"Microsoft.UI.Xaml.Controls.IProgressRingFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IProgressRingStatics> = L"Microsoft.UI.Xaml.Controls.IProgressRingStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IProgressRingTemplateSettings> = L"Microsoft.UI.Xaml.Controls.IProgressRingTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRadioButton> = L"Microsoft.UI.Xaml.Controls.IRadioButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonFactory> = L"Microsoft.UI.Xaml.Controls.IRadioButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonStatics> = L"Microsoft.UI.Xaml.Controls.IRadioButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRadioButtons> = L"Microsoft.UI.Xaml.Controls.IRadioButtons";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonsFactory> = L"Microsoft.UI.Xaml.Controls.IRadioButtonsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonsStatics> = L"Microsoft.UI.Xaml.Controls.IRadioButtonsStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem> = L"Microsoft.UI.Xaml.Controls.IRadioMenuFlyoutItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemFactory> = L"Microsoft.UI.Xaml.Controls.IRadioMenuFlyoutItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics> = L"Microsoft.UI.Xaml.Controls.IRadioMenuFlyoutItemStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics2> = L"Microsoft.UI.Xaml.Controls.IRadioMenuFlyoutItemStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRatingControl> = L"Microsoft.UI.Xaml.Controls.IRatingControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRatingControlFactory> = L"Microsoft.UI.Xaml.Controls.IRatingControlFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRatingControlStatics> = L"Microsoft.UI.Xaml.Controls.IRatingControlStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfo> = L"Microsoft.UI.Xaml.Controls.IRatingItemFontInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory> = L"Microsoft.UI.Xaml.Controls.IRatingItemFontInfoFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics> = L"Microsoft.UI.Xaml.Controls.IRatingItemFontInfoStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfo> = L"Microsoft.UI.Xaml.Controls.IRatingItemImageInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory> = L"Microsoft.UI.Xaml.Controls.IRatingItemImageInfoFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics> = L"Microsoft.UI.Xaml.Controls.IRatingItemImageInfoStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfo> = L"Microsoft.UI.Xaml.Controls.IRatingItemInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory> = L"Microsoft.UI.Xaml.Controls.IRatingItemInfoFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainer> = L"Microsoft.UI.Xaml.Controls.IRefreshContainer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainerFactory> = L"Microsoft.UI.Xaml.Controls.IRefreshContainerFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainerStatics> = L"Microsoft.UI.Xaml.Controls.IRefreshContainerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IRefreshInteractionRatioChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.IRefreshRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IRefreshStateChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizer> = L"Microsoft.UI.Xaml.Controls.IRefreshVisualizer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory> = L"Microsoft.UI.Xaml.Controls.IRefreshVisualizerFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics> = L"Microsoft.UI.Xaml.Controls.IRefreshVisualizerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRelativePanel> = L"Microsoft.UI.Xaml.Controls.IRelativePanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRelativePanelFactory> = L"Microsoft.UI.Xaml.Controls.IRelativePanelFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRelativePanelStatics> = L"Microsoft.UI.Xaml.Controls.IRelativePanelStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter> = L"Microsoft.UI.Xaml.Controls.IRevealListViewItemPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenterFactory> = L"Microsoft.UI.Xaml.Controls.IRevealListViewItemPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox> = L"Microsoft.UI.Xaml.Controls.IRichEditBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxFactory> = L"Microsoft.UI.Xaml.Controls.IRichEditBoxFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxSelectionChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.IRichEditBoxSelectionChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxStatics> = L"Microsoft.UI.Xaml.Controls.IRichEditBoxStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.IRichEditBoxTextChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlock> = L"Microsoft.UI.Xaml.Controls.IRichTextBlock";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow> = L"Microsoft.UI.Xaml.Controls.IRichTextBlockOverflow";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflowStatics> = L"Microsoft.UI.Xaml.Controls.IRichTextBlockOverflowStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockStatics> = L"Microsoft.UI.Xaml.Controls.IRichTextBlockStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRowDefinition> = L"Microsoft.UI.Xaml.Controls.IRowDefinition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IRowDefinitionStatics> = L"Microsoft.UI.Xaml.Controls.IRowDefinitionStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollAnchorProvider> = L"Microsoft.UI.Xaml.Controls.IScrollAnchorProvider";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollContentPresenter> = L"Microsoft.UI.Xaml.Controls.IScrollContentPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollContentPresenterStatics> = L"Microsoft.UI.Xaml.Controls.IScrollContentPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollView> = L"Microsoft.UI.Xaml.Controls.IScrollView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollViewFactory> = L"Microsoft.UI.Xaml.Controls.IScrollViewFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollViewStatics> = L"Microsoft.UI.Xaml.Controls.IScrollViewStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollViewer> = L"Microsoft.UI.Xaml.Controls.IScrollViewer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerStatics> = L"Microsoft.UI.Xaml.Controls.IScrollViewerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerView> = L"Microsoft.UI.Xaml.Controls.IScrollViewerView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IScrollViewerViewChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.IScrollViewerViewChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingAnchorRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.IScrollingAnchorRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingBringingIntoViewEventArgs> = L"Microsoft.UI.Xaml.Controls.IScrollingBringingIntoViewEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollAnimationStartingEventArgs> = L"Microsoft.UI.Xaml.Controls.IScrollingScrollAnimationStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.IScrollingScrollCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollOptions> = L"Microsoft.UI.Xaml.Controls.IScrollingScrollOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollOptionsFactory> = L"Microsoft.UI.Xaml.Controls.IScrollingScrollOptionsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomAnimationStartingEventArgs> = L"Microsoft.UI.Xaml.Controls.IScrollingZoomAnimationStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.IScrollingZoomCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomOptions> = L"Microsoft.UI.Xaml.Controls.IScrollingZoomOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomOptionsFactory> = L"Microsoft.UI.Xaml.Controls.IScrollingZoomOptionsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ISectionsInViewChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory> = L"Microsoft.UI.Xaml.Controls.ISectionsInViewChangedEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ISelectionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgsFactory> = L"Microsoft.UI.Xaml.Controls.ISelectionChangedEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISelectorBar> = L"Microsoft.UI.Xaml.Controls.ISelectorBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarFactory> = L"Microsoft.UI.Xaml.Controls.ISelectorBarFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarItem> = L"Microsoft.UI.Xaml.Controls.ISelectorBarItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarItemFactory> = L"Microsoft.UI.Xaml.Controls.ISelectorBarItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarItemStatics> = L"Microsoft.UI.Xaml.Controls.ISelectorBarItemStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarSelectionChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ISelectorBarSelectionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarStatics> = L"Microsoft.UI.Xaml.Controls.ISelectorBarStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoom> = L"Microsoft.UI.Xaml.Controls.ISemanticZoom";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomInformation> = L"Microsoft.UI.Xaml.Controls.ISemanticZoomInformation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation> = L"Microsoft.UI.Xaml.Controls.ISemanticZoomLocation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomStatics> = L"Microsoft.UI.Xaml.Controls.ISemanticZoomStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ISemanticZoomViewChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISlider> = L"Microsoft.UI.Xaml.Controls.ISlider";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISliderFactory> = L"Microsoft.UI.Xaml.Controls.ISliderFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISliderStatics> = L"Microsoft.UI.Xaml.Controls.ISliderStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISplitButton> = L"Microsoft.UI.Xaml.Controls.ISplitButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs> = L"Microsoft.UI.Xaml.Controls.ISplitButtonClickEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonFactory> = L"Microsoft.UI.Xaml.Controls.ISplitButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonStatics> = L"Microsoft.UI.Xaml.Controls.ISplitButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISplitView> = L"Microsoft.UI.Xaml.Controls.ISplitView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISplitViewFactory> = L"Microsoft.UI.Xaml.Controls.ISplitViewFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs> = L"Microsoft.UI.Xaml.Controls.ISplitViewPaneClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISplitViewStatics> = L"Microsoft.UI.Xaml.Controls.ISplitViewStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IStackLayout> = L"Microsoft.UI.Xaml.Controls.IStackLayout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutFactory> = L"Microsoft.UI.Xaml.Controls.IStackLayoutFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutStatics> = L"Microsoft.UI.Xaml.Controls.IStackLayoutStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IStackPanel> = L"Microsoft.UI.Xaml.Controls.IStackPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IStackPanelFactory> = L"Microsoft.UI.Xaml.Controls.IStackPanelFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IStackPanelStatics> = L"Microsoft.UI.Xaml.Controls.IStackPanelStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IStyleSelector> = L"Microsoft.UI.Xaml.Controls.IStyleSelector";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IStyleSelectorFactory> = L"Microsoft.UI.Xaml.Controls.IStyleSelectorFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IStyleSelectorOverrides> = L"Microsoft.UI.Xaml.Controls.IStyleSelectorOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISwapChainBackgroundPanel> = L"Microsoft.UI.Xaml.Controls.ISwapChainBackgroundPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory> = L"Microsoft.UI.Xaml.Controls.ISwapChainBackgroundPanelFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanel> = L"Microsoft.UI.Xaml.Controls.ISwapChainPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanelFactory> = L"Microsoft.UI.Xaml.Controls.ISwapChainPanelFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanelStatics> = L"Microsoft.UI.Xaml.Controls.ISwapChainPanelStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeControl> = L"Microsoft.UI.Xaml.Controls.ISwipeControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeControlFactory> = L"Microsoft.UI.Xaml.Controls.ISwipeControlFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeControlStatics> = L"Microsoft.UI.Xaml.Controls.ISwipeControlStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeItem> = L"Microsoft.UI.Xaml.Controls.ISwipeItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemFactory> = L"Microsoft.UI.Xaml.Controls.ISwipeItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs> = L"Microsoft.UI.Xaml.Controls.ISwipeItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemStatics> = L"Microsoft.UI.Xaml.Controls.ISwipeItemStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeItems> = L"Microsoft.UI.Xaml.Controls.ISwipeItems";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemsFactory> = L"Microsoft.UI.Xaml.Controls.ISwipeItemsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemsStatics> = L"Microsoft.UI.Xaml.Controls.ISwipeItemsStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISymbolIcon> = L"Microsoft.UI.Xaml.Controls.ISymbolIcon";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconFactory> = L"Microsoft.UI.Xaml.Controls.ISymbolIconFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSource> = L"Microsoft.UI.Xaml.Controls.ISymbolIconSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory> = L"Microsoft.UI.Xaml.Controls.ISymbolIconSourceFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics> = L"Microsoft.UI.Xaml.Controls.ISymbolIconSourceStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconStatics> = L"Microsoft.UI.Xaml.Controls.ISymbolIconStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITabView> = L"Microsoft.UI.Xaml.Controls.ITabView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewFactory> = L"Microsoft.UI.Xaml.Controls.ITabViewFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewItem> = L"Microsoft.UI.Xaml.Controls.ITabViewItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemFactory> = L"Microsoft.UI.Xaml.Controls.ITabViewItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemStatics> = L"Microsoft.UI.Xaml.Controls.ITabViewItemStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings> = L"Microsoft.UI.Xaml.Controls.ITabViewItemTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings2> = L"Microsoft.UI.Xaml.Controls.ITabViewItemTemplateSettings2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsFactory> = L"Microsoft.UI.Xaml.Controls.ITabViewItemTemplateSettingsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsStatics> = L"Microsoft.UI.Xaml.Controls.ITabViewItemTemplateSettingsStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsStatics2> = L"Microsoft.UI.Xaml.Controls.ITabViewItemTemplateSettingsStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewStatics> = L"Microsoft.UI.Xaml.Controls.ITabViewStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabCloseRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITabViewTabCloseRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDragCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITabViewTabDragCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDragStartingEventArgs> = L"Microsoft.UI.Xaml.Controls.ITabViewTabDragStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDroppedOutsideEventArgs> = L"Microsoft.UI.Xaml.Controls.ITabViewTabDroppedOutsideEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITeachingTip> = L"Microsoft.UI.Xaml.Controls.ITeachingTip";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITeachingTipClosedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs> = L"Microsoft.UI.Xaml.Controls.ITeachingTipClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipFactory> = L"Microsoft.UI.Xaml.Controls.ITeachingTipFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipStatics> = L"Microsoft.UI.Xaml.Controls.ITeachingTipStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings> = L"Microsoft.UI.Xaml.Controls.ITeachingTipTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsFactory> = L"Microsoft.UI.Xaml.Controls.ITeachingTipTemplateSettingsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics> = L"Microsoft.UI.Xaml.Controls.ITeachingTipTemplateSettingsStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITextBlock> = L"Microsoft.UI.Xaml.Controls.ITextBlock";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITextBlockStatics> = L"Microsoft.UI.Xaml.Controls.ITextBlockStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITextBox> = L"Microsoft.UI.Xaml.Controls.ITextBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.ITextBoxBeforeTextChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITextBoxFactory> = L"Microsoft.UI.Xaml.Controls.ITextBoxFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITextBoxSelectionChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.ITextBoxSelectionChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITextBoxStatics> = L"Microsoft.UI.Xaml.Controls.ITextBoxStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITextBoxTextChangingEventArgs> = L"Microsoft.UI.Xaml.Controls.ITextBoxTextChangingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITextChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITextChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout> = L"Microsoft.UI.Xaml.Controls.ITextCommandBarFlyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory> = L"Microsoft.UI.Xaml.Controls.ITextCommandBarFlyoutFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITextCompositionChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITextCompositionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITextCompositionEndedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITextCompositionEndedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITextCompositionStartedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITextCompositionStartedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs> = L"Microsoft.UI.Xaml.Controls.ITextControlCopyingToClipboardEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs> = L"Microsoft.UI.Xaml.Controls.ITextControlCuttingToClipboardEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITextControlPasteEventArgs> = L"Microsoft.UI.Xaml.Controls.ITextControlPasteEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITimePickedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITimePicker> = L"Microsoft.UI.Xaml.Controls.ITimePicker";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFactory> = L"Microsoft.UI.Xaml.Controls.ITimePickerFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyout> = L"Microsoft.UI.Xaml.Controls.ITimePickerFlyout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenter> = L"Microsoft.UI.Xaml.Controls.ITimePickerFlyoutPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenterStatics> = L"Microsoft.UI.Xaml.Controls.ITimePickerFlyoutPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutStatics> = L"Microsoft.UI.Xaml.Controls.ITimePickerFlyoutStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickerSelectedValueChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITimePickerSelectedValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickerStatics> = L"Microsoft.UI.Xaml.Controls.ITimePickerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickerValueChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITimePickerValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItem> = L"Microsoft.UI.Xaml.Controls.IToggleMenuFlyoutItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory> = L"Microsoft.UI.Xaml.Controls.IToggleMenuFlyoutItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics> = L"Microsoft.UI.Xaml.Controls.IToggleMenuFlyoutItemStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButton> = L"Microsoft.UI.Xaml.Controls.IToggleSplitButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory> = L"Microsoft.UI.Xaml.Controls.IToggleSplitButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IToggleSplitButtonIsCheckedChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonStatics> = L"Microsoft.UI.Xaml.Controls.IToggleSplitButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IToggleSwitch> = L"Microsoft.UI.Xaml.Controls.IToggleSwitch";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IToggleSwitchOverrides> = L"Microsoft.UI.Xaml.Controls.IToggleSwitchOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IToggleSwitchStatics> = L"Microsoft.UI.Xaml.Controls.IToggleSwitchStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IToolTip> = L"Microsoft.UI.Xaml.Controls.IToolTip";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IToolTipFactory> = L"Microsoft.UI.Xaml.Controls.IToolTipFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IToolTipService> = L"Microsoft.UI.Xaml.Controls.IToolTipService";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IToolTipServiceStatics> = L"Microsoft.UI.Xaml.Controls.IToolTipServiceStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IToolTipStatics> = L"Microsoft.UI.Xaml.Controls.IToolTipStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeView> = L"Microsoft.UI.Xaml.Controls.ITreeView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeView2> = L"Microsoft.UI.Xaml.Controls.ITreeView2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeView3> = L"Microsoft.UI.Xaml.Controls.ITreeView3";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITreeViewCollapsedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs2> = L"Microsoft.UI.Xaml.Controls.ITreeViewCollapsedEventArgs2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITreeViewDragItemsCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs2> = L"Microsoft.UI.Xaml.Controls.ITreeViewDragItemsCompletedEventArgs2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs> = L"Microsoft.UI.Xaml.Controls.ITreeViewDragItemsStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs> = L"Microsoft.UI.Xaml.Controls.ITreeViewExpandingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs2> = L"Microsoft.UI.Xaml.Controls.ITreeViewExpandingEventArgs2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewFactory> = L"Microsoft.UI.Xaml.Controls.ITreeViewFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItem> = L"Microsoft.UI.Xaml.Controls.ITreeViewItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItem2> = L"Microsoft.UI.Xaml.Controls.ITreeViewItem2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemFactory> = L"Microsoft.UI.Xaml.Controls.ITreeViewItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITreeViewItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemStatics> = L"Microsoft.UI.Xaml.Controls.ITreeViewItemStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemStatics2> = L"Microsoft.UI.Xaml.Controls.ITreeViewItemStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings> = L"Microsoft.UI.Xaml.Controls.ITreeViewItemTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory> = L"Microsoft.UI.Xaml.Controls.ITreeViewItemTemplateSettingsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics> = L"Microsoft.UI.Xaml.Controls.ITreeViewItemTemplateSettingsStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewList> = L"Microsoft.UI.Xaml.Controls.ITreeViewList";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewListFactory> = L"Microsoft.UI.Xaml.Controls.ITreeViewListFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNode> = L"Microsoft.UI.Xaml.Controls.ITreeViewNode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory> = L"Microsoft.UI.Xaml.Controls.ITreeViewNodeFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics> = L"Microsoft.UI.Xaml.Controls.ITreeViewNodeStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewSelectionChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITreeViewSelectionChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewStatics> = L"Microsoft.UI.Xaml.Controls.ITreeViewStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewStatics2> = L"Microsoft.UI.Xaml.Controls.ITreeViewStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneView> = L"Microsoft.UI.Xaml.Controls.ITwoPaneView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneViewFactory> = L"Microsoft.UI.Xaml.Controls.ITwoPaneViewFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics> = L"Microsoft.UI.Xaml.Controls.ITwoPaneViewStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IUIElementCollection> = L"Microsoft.UI.Xaml.Controls.IUIElementCollection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayout> = L"Microsoft.UI.Xaml.Controls.IUniformGridLayout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutFactory> = L"Microsoft.UI.Xaml.Controls.IUniformGridLayoutFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics> = L"Microsoft.UI.Xaml.Controls.IUniformGridLayoutStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IUserControl> = L"Microsoft.UI.Xaml.Controls.IUserControl";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IUserControlFactory> = L"Microsoft.UI.Xaml.Controls.IUserControlFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IUserControlStatics> = L"Microsoft.UI.Xaml.Controls.IUserControlStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IVariableSizedWrapGrid> = L"Microsoft.UI.Xaml.Controls.IVariableSizedWrapGrid";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IVariableSizedWrapGridStatics> = L"Microsoft.UI.Xaml.Controls.IVariableSizedWrapGridStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IViewbox> = L"Microsoft.UI.Xaml.Controls.IViewbox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IViewboxStatics> = L"Microsoft.UI.Xaml.Controls.IViewboxStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayout> = L"Microsoft.UI.Xaml.Controls.IVirtualizingLayout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext> = L"Microsoft.UI.Xaml.Controls.IVirtualizingLayoutContext";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext2> = L"Microsoft.UI.Xaml.Controls.IVirtualizingLayoutContext2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextFactory> = L"Microsoft.UI.Xaml.Controls.IVirtualizingLayoutContextFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides> = L"Microsoft.UI.Xaml.Controls.IVirtualizingLayoutContextOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides2> = L"Microsoft.UI.Xaml.Controls.IVirtualizingLayoutContextOverrides2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutFactory> = L"Microsoft.UI.Xaml.Controls.IVirtualizingLayoutFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides> = L"Microsoft.UI.Xaml.Controls.IVirtualizingLayoutOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanel> = L"Microsoft.UI.Xaml.Controls.IVirtualizingPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelFactory> = L"Microsoft.UI.Xaml.Controls.IVirtualizingPanelFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelOverrides> = L"Microsoft.UI.Xaml.Controls.IVirtualizingPanelOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelProtected> = L"Microsoft.UI.Xaml.Controls.IVirtualizingPanelProtected";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanel> = L"Microsoft.UI.Xaml.Controls.IVirtualizingStackPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanelOverrides> = L"Microsoft.UI.Xaml.Controls.IVirtualizingStackPanelOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanelStatics> = L"Microsoft.UI.Xaml.Controls.IVirtualizingStackPanelStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IWebView2> = L"Microsoft.UI.Xaml.Controls.IWebView2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IWebView22> = L"Microsoft.UI.Xaml.Controls.IWebView22";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IWebView2Factory> = L"Microsoft.UI.Xaml.Controls.IWebView2Factory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IWebView2Statics> = L"Microsoft.UI.Xaml.Controls.IWebView2Statics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IWrapGrid> = L"Microsoft.UI.Xaml.Controls.IWrapGrid";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IWrapGridStatics> = L"Microsoft.UI.Xaml.Controls.IWrapGridStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IXamlControlsResources> = L"Microsoft.UI.Xaml.Controls.IXamlControlsResources";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics> = L"Microsoft.UI.Xaml.Controls.IXamlControlsResourcesStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler> = L"Microsoft.UI.Xaml.Controls.CalendarViewDayItemChangingEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler> = L"Microsoft.UI.Xaml.Controls.CleanUpVirtualizedItemEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ContextMenuOpeningEventHandler> = L"Microsoft.UI.Xaml.Controls.ContextMenuOpeningEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::DragItemsStartingEventHandler> = L"Microsoft.UI.Xaml.Controls.DragItemsStartingEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventHandler> = L"Microsoft.UI.Xaml.Controls.HubSectionHeaderClickEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ItemClickEventHandler> = L"Microsoft.UI.Xaml.Controls.ItemClickEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ListViewItemToKeyHandler> = L"Microsoft.UI.Xaml.Controls.ListViewItemToKeyHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::ListViewKeyToItemHandler> = L"Microsoft.UI.Xaml.Controls.ListViewKeyToItemHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SectionsInViewChangedEventHandler> = L"Microsoft.UI.Xaml.Controls.SectionsInViewChangedEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventHandler> = L"Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler> = L"Microsoft.UI.Xaml.Controls.SemanticZoomViewChangedEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TextChangedEventHandler> = L"Microsoft.UI.Xaml.Controls.TextChangedEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::TextControlPasteEventHandler> = L"Microsoft.UI.Xaml.Controls.TextControlPasteEventHandler";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnchorRequestedEventArgs>{ 0xD5645E80,0xD4D3,0x5DF8,{ 0xA3,0xAC,0x1F,0x9B,0xEE,0xB2,0xBC,0xEF } }; // D5645E80-D4D3-5DF8-A3AC-1F9BEEB2BCEF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIcon>{ 0xF705DFDA,0x8196,0x56D0,{ 0x8D,0xCF,0x2B,0x66,0xC2,0xAE,0xD7,0x91 } }; // F705DFDA-8196-56D0-8DCF-2B66C2AED791
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconFactory>{ 0x3356E0D1,0xD82F,0x5FC1,{ 0x81,0x65,0x9B,0x9D,0x1B,0x9D,0x95,0x14 } }; // 3356E0D1-D82F-5FC1-8165-9B9D1B9D9514
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSource>{ 0x2846A198,0x731B,0x5379,{ 0x85,0xAC,0x8F,0x28,0x02,0x7F,0x71,0x83 } }; // 2846A198-731B-5379-85AC-8F28027F7183
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSourceFactory>{ 0xAE8FB7DE,0x7EC2,0x5AE2,{ 0xB4,0x61,0xBE,0xAD,0x57,0x04,0x20,0xFA } }; // AE8FB7DE-7EC2-5AE2-B461-BEAD570420FA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSourceStatics>{ 0x8E4919FC,0xE8AA,0x5428,{ 0x97,0x79,0x6F,0xE7,0x16,0x8A,0xFA,0x1C } }; // 8E4919FC-E8AA-5428-9779-6FE7168AFA1C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconStatics>{ 0x51CC5230,0xA001,0x55FF,{ 0x9F,0xC8,0xBD,0x51,0xB2,0xA3,0x27,0x7B } }; // 51CC5230-A001-55FF-9FC8-BD51B2A3277B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual>{ 0x645FF609,0xFD6B,0x5FEF,{ 0xBD,0xC0,0x9C,0x34,0xEF,0xF3,0x3C,0x64 } }; // 645FF609-FD6B-5FEF-BDC0-9C34EFF33C64
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual2>{ 0x763A3F0B,0x95CC,0x59EF,{ 0x98,0x90,0x14,0x78,0x68,0x59,0x9D,0xE9 } }; // 763A3F0B-95CC-59EF-9890-147868599DE9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer>{ 0x17F024F0,0x1692,0x51DD,{ 0xA4,0xDA,0xF4,0xED,0x64,0x8D,0x61,0x4C } }; // 17F024F0-1692-51DD-A4DA-F4ED648D614C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer2>{ 0xDB33DB95,0x9404,0x5385,{ 0xAE,0x32,0x67,0x3E,0x7C,0x35,0x8A,0xD3 } }; // DB33DB95-9404-5385-AE32-673E7C358AD3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerFactory>{ 0xEBC0C6E6,0xC91A,0x5025,{ 0xB4,0xA4,0xE7,0x86,0xD8,0x3B,0xE1,0xD8 } }; // EBC0C6E6-C91A-5025-B4A4-E786D83BE1D8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>{ 0xE3D18D97,0xC98B,0x5B91,{ 0x80,0xDB,0xD7,0x0C,0x43,0x6A,0xA4,0x4A } }; // E3D18D97-C98B-5B91-80DB-D70C436AA44A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics2>{ 0x559A4F35,0xAA2D,0x54E3,{ 0xA7,0xFF,0x9E,0x83,0x57,0xC1,0x02,0x54 } }; // 559A4F35-AA2D-54E3-A7FF-9E8357C10254
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource>{ 0x294765C3,0x70E3,0x555C,{ 0x96,0x57,0x01,0xFC,0x40,0x51,0x16,0x9D } }; // 294765C3-70E3-555C-9657-01FC4051169D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource2>{ 0x1A3B53A7,0xA8FE,0x59A1,{ 0xB5,0x44,0x43,0xA4,0xD9,0xC8,0x1E,0xF2 } }; // 1A3B53A7-A8FE-59A1-B544-43A4D9C81EF2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource3>{ 0xA152F00D,0xB7CF,0x5A8F,{ 0xAE,0xE7,0xEA,0x1B,0x97,0xC2,0x16,0x39 } }; // A152F00D-B7CF-5A8F-AEE7-EA1B97C21639
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBar>{ 0x0F4904A9,0xB6F9,0x5834,{ 0x8D,0x5D,0x59,0xBC,0x3B,0x7B,0x7E,0xE2 } }; // 0F4904A9-B6F9-5834-8D5D-59BC3B7B7EE2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarDetailLabelRequestedEventArgs>{ 0x43275B82,0xF594,0x590D,{ 0x90,0xFF,0x76,0xFD,0x21,0x9F,0xEA,0xA8 } }; // 43275B82-F594-590D-90FF-76FD219FEAA8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarFactory>{ 0x3F64C40F,0xB879,0x5020,{ 0xB6,0x7C,0xB7,0x89,0xE1,0x73,0xC7,0x98 } }; // 3F64C40F-B879-5020-B67C-B789E173C798
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarLabel>{ 0x238AC07F,0x59FB,0x574F,{ 0xBF,0x5C,0x61,0xC4,0x4A,0xB3,0x86,0xDC } }; // 238AC07F-59FB-574F-BF5C-61C44AB386DC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarLabelFactory>{ 0xB6169805,0xC01C,0x54C6,{ 0x80,0xE8,0xC6,0xC9,0x8F,0x9A,0xAA,0x53 } }; // B6169805-C01C-54C6-80E8-C6C98F9AAA53
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarScrollingEventArgs>{ 0xA7466A60,0xE55E,0x58AE,{ 0x9F,0xC1,0x87,0xFE,0xF4,0x0E,0x52,0x1A } }; // A7466A60-E55E-58AE-9FC1-87FEF40E521A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarStatics>{ 0xDAACD0F4,0x4912,0x5934,{ 0x8D,0x5B,0xF2,0x41,0xC2,0xE9,0x0E,0x30 } }; // DAACD0F4-4912-5934-8D5B-F241C2E90E30
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAppBar>{ 0x3D8C2927,0x5AC5,0x51BB,{ 0x8B,0xEC,0x13,0xFF,0x4C,0x1B,0xD6,0xC8 } }; // 3D8C2927-5AC5-51BB-8BEC-13FF4C1BD6C8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarButton>{ 0x8AB0E278,0xB6AE,0x569E,{ 0x8D,0xCD,0xD2,0x93,0x55,0x2F,0xE4,0xD5 } }; // 8AB0E278-B6AE-569E-8DCD-D293552FE4D5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarButtonFactory>{ 0x4168A40A,0xD11F,0x5AEB,{ 0x97,0x4E,0xBB,0x43,0xA6,0xE7,0xF9,0xB2 } }; // 4168A40A-D11F-5AEB-974E-BB43A6E7F9B2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarButtonStatics>{ 0x74327A2A,0x18FA,0x59C3,{ 0x82,0x68,0xEC,0x37,0x32,0xA4,0xD2,0x72 } }; // 74327A2A-18FA-59C3-8268-EC3732A4D272
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainer>{ 0x55D90715,0x70BC,0x5B2B,{ 0xBD,0x12,0xA9,0x40,0x29,0x7F,0x93,0x5F } }; // 55D90715-70BC-5B2B-BD12-A940297F935F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainerFactory>{ 0x0664BF62,0x1FAB,0x5873,{ 0x96,0x08,0x11,0x7C,0x3B,0x44,0x83,0xFF } }; // 0664BF62-1FAB-5873-9608-117C3B4483FF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainerStatics>{ 0x50C068DE,0x72D0,0x52BA,{ 0xBB,0x42,0xAD,0xA6,0x52,0x7B,0x39,0x2F } }; // 50C068DE-72D0-52BA-BB42-ADA6527B392F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarFactory>{ 0x66B96B53,0x755B,0x5472,{ 0xB2,0xC4,0x86,0x24,0xE9,0x77,0xD6,0x5B } }; // 66B96B53-755B-5472-B2C4-8624E977D65B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarOverrides>{ 0x67F17798,0xE281,0x5E53,{ 0x8E,0xDF,0x42,0xC2,0x9C,0x35,0x4D,0x63 } }; // 67F17798-E281-5E53-8EDF-42C29C354D63
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparator>{ 0x57BB94A3,0x1E56,0x5EBE,{ 0x8A,0x57,0x3A,0x24,0x3C,0x49,0x1D,0x67 } }; // 57BB94A3-1E56-5EBE-8A57-3A243C491D67
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparatorFactory>{ 0x6497D326,0xFB55,0x5CF5,{ 0x8C,0xC4,0xC5,0x56,0xB1,0xA9,0x58,0xFB } }; // 6497D326-FB55-5CF5-8CC4-C556B1A958FB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparatorStatics>{ 0xDDA9A3D2,0xD3B9,0x5BE1,{ 0xAB,0xF7,0xDB,0xA1,0xEA,0xAF,0xE0,0xF7 } }; // DDA9A3D2-D3B9-5BE1-ABF7-DBA1EAAFE0F7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarStatics>{ 0x0DC7172C,0xA03D,0x5AE4,{ 0x95,0x38,0xFF,0xD8,0x04,0x82,0x3B,0xCE } }; // 0DC7172C-A03D-5AE4-9538-FFD804823BCE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButton>{ 0x9687C0B1,0xC390,0x59BE,{ 0xAC,0xDC,0x4F,0xC4,0x8F,0x55,0x28,0x23 } }; // 9687C0B1-C390-59BE-ACDC-4FC48F552823
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButtonFactory>{ 0x07BFB2D6,0x23B9,0x57A2,{ 0x91,0x22,0x00,0x62,0x94,0xBF,0xA9,0x2F } }; // 07BFB2D6-23B9-57A2-9122-006294BFA92F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButtonStatics>{ 0x70021504,0x3FE8,0x53BC,{ 0xAB,0xD6,0xD6,0x97,0x62,0xF4,0xBC,0x87 } }; // 70021504-3FE8-53BC-ABD6-D69762F4BC87
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBox>{ 0x3EEA809E,0xB2DB,0x521D,{ 0x97,0xDB,0xE0,0x64,0x8F,0xB5,0xD7,0x98 } }; // 3EEA809E-B2DB-521D-97DB-E0648FB5D798
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs>{ 0x26DA5DE4,0x57A6,0x57BF,{ 0xAC,0xC9,0xAA,0xC5,0x99,0xC0,0xB2,0x2B } }; // 26DA5DE4-57A6-57BF-ACC9-AAC599C0B22B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxStatics>{ 0x9DFA2FF9,0x1094,0x54A8,{ 0xBE,0xEE,0xB3,0x45,0xFA,0x3E,0xE0,0x89 } }; // 9DFA2FF9-1094-54A8-BEEE-B345FA3EE089
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs>{ 0x7547C7E9,0x7429,0x5045,{ 0xAD,0x98,0x33,0x8A,0x96,0xB2,0x70,0xB1 } }; // 7547C7E9-7429-5045-AD98-338A96B270B1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>{ 0xD7191D84,0xE886,0x547F,{ 0xA3,0xE2,0x12,0xF0,0xE0,0x5B,0x20,0xFA } }; // D7191D84-E886-547F-A3E2-12F0E05B20FA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics>{ 0x40155FB9,0x253B,0x5624,{ 0xA1,0x7A,0x29,0x4B,0xE7,0xA0,0x7F,0x87 } }; // 40155FB9-253B-5624-A17A-294BE7A07F87
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IBitmapIcon>{ 0xC370BC29,0x805B,0x5BAD,{ 0xB6,0x15,0xEC,0x64,0x0E,0x57,0x9D,0xBB } }; // C370BC29-805B-5BAD-B615-EC640E579DBB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconFactory>{ 0xB43B5DDC,0xCDB5,0x5AD6,{ 0x8A,0xC1,0x2F,0xCC,0xA3,0x3B,0xE3,0x9E } }; // B43B5DDC-CDB5-5AD6-8AC1-2FCCA33BE39E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSource>{ 0xA6B6CCCC,0xEA8F,0x53CA,{ 0x83,0x1F,0x2A,0xBE,0x85,0xCD,0x6D,0x8C } }; // A6B6CCCC-EA8F-53CA-831F-2ABE85CD6D8C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory>{ 0x7D484C14,0xF5F6,0x5E39,{ 0xB4,0xE4,0xB6,0x10,0x8D,0x2E,0xE0,0x95 } }; // 7D484C14-F5F6-5E39-B4E4-B6108D2EE095
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics>{ 0xF4BA77BD,0xE13F,0x583B,{ 0xB9,0xF6,0x86,0x2E,0x73,0x75,0x35,0x17 } }; // F4BA77BD-E13F-583B-B9F6-862E73753517
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconStatics>{ 0x01C67EB2,0x327E,0x5C4E,{ 0xAF,0xB4,0x38,0xB0,0x2E,0xD1,0x28,0x86 } }; // 01C67EB2-327E-5C4E-AFB4-38B02ED12886
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IBorder>{ 0x1CA13B47,0xFF5C,0x5ABC,{ 0xA4,0x11,0xA1,0x77,0xDF,0x94,0x82,0xA9 } }; // 1CA13B47-FF5C-5ABC-A411-A177DF9482A9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IBorderStatics>{ 0x9385CD66,0xC178,0x5176,{ 0xB4,0xA5,0x16,0x0E,0x00,0xE9,0x39,0x35 } }; // 9385CD66-C178-5176-B4A5-160E00E93935
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBar>{ 0x2E47B7D6,0x5FBD,0x54C7,{ 0xB0,0xB1,0xCE,0xFF,0x4A,0x19,0xC7,0x44 } }; // 2E47B7D6-5FBD-54C7-B0B1-CEFF4A19C744
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarFactory>{ 0xD5B6A6D9,0x3148,0x5CBC,{ 0xA6,0xAE,0x0F,0x44,0xCD,0xE4,0x19,0x52 } }; // D5B6A6D9-3148-5CBC-A6AE-0F44CDE41952
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItem>{ 0x34582DE4,0x6BEF,0x5BA0,{ 0x86,0xCA,0x7C,0xC1,0xA3,0xDB,0x37,0xEE } }; // 34582DE4-6BEF-5BA0-86CA-7CC1A3DB37EE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItemClickedEventArgs>{ 0x1CEEA503,0x365E,0x580D,{ 0xBC,0xD4,0xE9,0xAD,0x02,0x48,0xF6,0xB5 } }; // 1CEEA503-365E-580D-BCD4-E9AD0248F6B5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItemFactory>{ 0x186C3BD3,0x7008,0x5544,{ 0x8D,0x3A,0x65,0xAF,0x8F,0xE9,0xFE,0x69 } }; // 186C3BD3-7008-5544-8D3A-65AF8FE9FE69
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarStatics>{ 0x4ABF3FB5,0x6F69,0x54E2,{ 0xA6,0x8F,0xE5,0xF9,0x04,0xF7,0x9F,0x38 } }; // 4ABF3FB5-6F69-54E2-A68F-E5F904F79F38
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IButton>{ 0x216C183D,0xD07A,0x5AA5,{ 0xB8,0xA4,0x03,0x00,0xA2,0x68,0x3E,0x87 } }; // 216C183D-D07A-5AA5-B8A4-0300A2683E87
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IButtonFactory>{ 0xFE393422,0xD91C,0x57B1,{ 0x9A,0x9C,0x2C,0x7E,0x3F,0x41,0xF7,0x7C } }; // FE393422-D91C-57B1-9A9C-2C7E3F41F77C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IButtonStatics>{ 0x57823D25,0xB26A,0x5E0F,{ 0x94,0xF6,0xBB,0xAE,0x70,0x68,0x3D,0xC5 } }; // 57823D25-B26A-5E0F-94F6-BBAE70683DC5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePicker>{ 0xE3D9FAA1,0x0FD0,0x5932,{ 0xA6,0xDB,0xFF,0x00,0xC0,0x03,0xAC,0x21 } }; // E3D9FAA1-0FD0-5932-A6DB-FF00C003AC21
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs>{ 0x57C212D7,0xC2F2,0x54A0,{ 0x9D,0x41,0xF2,0x63,0xB1,0xE5,0x10,0x6E } }; // 57C212D7-C2F2-54A0-9D41-F263B1E5106E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerFactory>{ 0xB00C7818,0x955A,0x5524,{ 0xB4,0x51,0x93,0x86,0x82,0x30,0x89,0x2F } }; // B00C7818-955A-5524-B451-93868230892F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerStatics>{ 0xE74EB740,0x1AEB,0x591F,{ 0xB8,0x4A,0xEF,0x88,0x1C,0x3B,0x52,0x7E } }; // E74EB740-1AEB-591F-B84A-EF881C3B527E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarView>{ 0xE786081E,0xB680,0x56AB,{ 0xBF,0xBB,0x52,0xD5,0xB1,0x7C,0x36,0x5E } }; // E786081E-B680-56AB-BFBB-52D5B17C365E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItem>{ 0x947D3A07,0x6FA4,0x553C,{ 0x9B,0x12,0x57,0xCA,0x1B,0xF7,0x2E,0x9E } }; // 947D3A07-6FA4-553C-9B12-57CA1BF72E9E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>{ 0xE894FE7F,0x12F6,0x5B1A,{ 0x88,0xA2,0xA9,0x67,0x64,0xC1,0x27,0x3F } }; // E894FE7F-12F6-5B1A-88A2-A96764C1273F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemFactory>{ 0xE6159E51,0x1C48,0x5A77,{ 0xA3,0xA1,0xAE,0xF5,0x9D,0x6A,0x8C,0x4E } }; // E6159E51-1C48-5A77-A3A1-AEF59D6A8C4E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemStatics>{ 0x2B2C4006,0x57FA,0x5F0F,{ 0xB8,0xED,0x26,0xE2,0x1F,0x91,0x0E,0x3A } }; // 2B2C4006-57FA-5F0F-B8ED-26E21F910E3A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewFactory>{ 0x2F31D1EB,0x8229,0x517C,{ 0xB3,0xA6,0x5A,0x5F,0x28,0x72,0x4E,0x8F } }; // 2F31D1EB-8229-517C-B3A6-5A5F28724E8F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs>{ 0x675F688F,0xBC30,0x59F6,{ 0x83,0xC4,0x14,0x0B,0xD0,0x53,0xA0,0x9A } }; // 675F688F-BC30-59F6-83C4-140BD053A09A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewStatics>{ 0x9553E6FC,0xE4DA,0x57D4,{ 0x94,0x72,0x7F,0x8E,0xD5,0xFF,0x72,0x19 } }; // 9553E6FC-E4DA-57D4-9472-7F8ED5FF7219
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs>{ 0xB76FAF94,0x3172,0x5C50,{ 0x95,0x07,0x26,0xCD,0x87,0x38,0x15,0xA1 } }; // B76FAF94-3172-5C50-9507-26CD873815A1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICanvas>{ 0x457BA139,0x1146,0x51D2,{ 0x80,0x7E,0xD9,0xD6,0x5C,0x92,0x70,0x60 } }; // 457BA139-1146-51D2-807E-D9D65C927060
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICanvasFactory>{ 0x374C5050,0x3481,0x5557,{ 0x99,0x48,0x80,0x4C,0x0B,0x8E,0xEA,0x89 } }; // 374C5050-3481-5557-9948-804C0B8EEA89
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICanvasStatics>{ 0xC00D5E0F,0x77E3,0x5C59,{ 0x8F,0xCD,0x86,0x76,0x1F,0x0C,0x66,0x07 } }; // C00D5E0F-77E3-5C59-8FCD-86761F0C6607
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICheckBox>{ 0xC5830000,0x4C9D,0x5FDD,{ 0x93,0x46,0x67,0x4C,0x71,0xCD,0x80,0xC5 } }; // C5830000-4C9D-5FDD-9346-674C71CD80C5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICheckBoxFactory>{ 0xF43FF58D,0x31D5,0x5835,{ 0xAF,0x7B,0x37,0x5B,0xC6,0xA9,0xBC,0xF3 } }; // F43FF58D-31D5-5835-AF7B-375BC6A9BCF3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>{ 0x2DB1B0B0,0xAEE9,0x55FA,{ 0x8C,0x30,0xC9,0x8F,0x00,0x64,0x3D,0x00 } }; // 2DB1B0B0-AEE9-55FA-8C30-C98F00643D00
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IChoosingItemContainerEventArgs>{ 0xB479B9D2,0xA63F,0x5638,{ 0x94,0x86,0x8C,0xCC,0x1F,0x40,0x25,0x1E } }; // B479B9D2-A63F-5638-9486-8CCC1F40251E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>{ 0x76155AD9,0xE394,0x5313,{ 0x83,0x2F,0xE2,0x1C,0xF7,0xB7,0xFB,0x0E } }; // 76155AD9-E394-5313-832F-E21CF7B7FB0E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IColorChangedEventArgs>{ 0x148D57A2,0xB1CB,0x5F5D,{ 0xB6,0xB5,0x51,0x28,0x05,0xD7,0x17,0x61 } }; // 148D57A2-B1CB-5F5D-B6B5-512805D71761
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IColorPicker>{ 0xAE72B24B,0xF93F,0x5A19,{ 0x8C,0xE4,0xA1,0x8B,0x73,0xC3,0x35,0x6D } }; // AE72B24B-F93F-5A19-8CE4-A18B73C3356D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IColorPicker2>{ 0x802E64C9,0x4608,0x5C4C,{ 0x93,0xCF,0x6C,0x46,0x2E,0x3C,0x10,0x68 } }; // 802E64C9-4608-5C4C-93CF-6C462E3C1068
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IColorPickerFactory>{ 0x72C350E2,0x0A20,0x5B9B,{ 0xAC,0x54,0x63,0x3B,0x97,0xD7,0xFF,0xDE } }; // 72C350E2-0A20-5B9B-AC54-633B97D7FFDE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IColorPickerStatics>{ 0x920D2D62,0x172E,0x5771,{ 0xB6,0x77,0x40,0x69,0xB5,0x13,0x45,0x74 } }; // 920D2D62-172E-5771-B677-4069B5134574
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IColorPickerStatics2>{ 0x2F4AF95B,0x81CF,0x5304,{ 0x99,0x50,0x49,0xEC,0x93,0x4C,0x1B,0x35 } }; // 2F4AF95B-81CF-5304-9950-49EC934C1B35
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IColumnDefinition>{ 0x454CEA14,0x87EC,0x5890,{ 0xBB,0x62,0xF1,0xD8,0x2A,0x94,0x75,0x8E } }; // 454CEA14-87EC-5890-BB62-F1D82A94758E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IColumnDefinitionStatics>{ 0xABA4B755,0xCA63,0x5ED7,{ 0xAE,0x31,0x45,0xF9,0xF9,0x19,0x20,0xB0 } }; // ABA4B755-CA63-5ED7-AE31-45F9F91920B0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IComboBox>{ 0xC77DA58B,0x4FD7,0x51E0,{ 0xA4,0x31,0xF8,0x46,0x58,0xA8,0x3E,0x9E } }; // C77DA58B-4FD7-51E0-A431-F84658A83E9E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IComboBoxFactory>{ 0x71C1014B,0xACDF,0x5C03,{ 0xB5,0xED,0x02,0x87,0x1C,0xAA,0xEB,0x6B } }; // 71C1014B-ACDF-5C03-B5ED-02871CAAEB6B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IComboBoxItem>{ 0xDF65F6F4,0x863F,0x558D,{ 0xBC,0x4E,0x82,0xC1,0x2F,0x28,0x06,0x2F } }; // DF65F6F4-863F-558D-BC4E-82C12F28062F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IComboBoxItemFactory>{ 0x8540B906,0xC96B,0x592D,{ 0x88,0xD7,0x0C,0x23,0xA3,0x38,0x6D,0x93 } }; // 8540B906-C96B-592D-88D7-0C23A3386D93
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IComboBoxOverrides>{ 0xA6AFBC7A,0x284F,0x5B9A,{ 0x89,0xFE,0xA3,0x34,0xB6,0x13,0xF8,0x95 } }; // A6AFBC7A-284F-5B9A-89FE-A334B613F895
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IComboBoxStatics>{ 0x7DA7CD09,0xE256,0x5238,{ 0x9F,0xED,0x02,0xB2,0xF3,0xAF,0xBA,0x25 } }; // 7DA7CD09-E256-5238-9FED-02B2F3AFBA25
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IComboBoxTextSubmittedEventArgs>{ 0x0D7A9794,0x73B5,0x585E,{ 0xBF,0xBB,0xDE,0x6D,0xF7,0xEB,0x9F,0xCF } }; // 0D7A9794-73B5-585E-BFBB-DE6DF7EB9FCF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBar>{ 0xB7CA8EE3,0xA07A,0x5F69,{ 0x8A,0xB8,0xBE,0x4E,0x3E,0x4C,0xF0,0xC8 } }; // B7CA8EE3-A07A-5F69-8AB8-BE4E3E4CF0C8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBarElement>{ 0xF8EB20B4,0x373E,0x5327,{ 0x99,0x42,0x66,0xA1,0xEA,0x21,0xF5,0xF9 } }; // F8EB20B4-373E-5327-9942-66A1EA21F5F9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFactory>{ 0x8D4079C3,0xFA0A,0x5BB1,{ 0xB4,0x5D,0x49,0x9C,0x37,0x87,0x61,0xB4 } }; // 8D4079C3-FA0A-5BB1-B45D-499C378761B4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout>{ 0x18E2CC40,0x09CB,0x5F20,{ 0xA7,0x15,0xF0,0xB2,0x03,0x9C,0x5E,0x18 } }; // 18E2CC40-09CB-5F20-A715-F0B2039C5E18
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout2>{ 0x5F81EC9E,0xA9D2,0x5F04,{ 0xB5,0xB1,0x01,0x3D,0xAE,0xF0,0x26,0xDD } }; // 5F81EC9E-A9D2-5F04-B5B1-013DAEF026DD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory>{ 0xA194DBE6,0x4311,0x5BD2,{ 0xA8,0xEB,0xB4,0x9C,0x47,0x33,0xA3,0x3C } }; // A194DBE6-4311-5BD2-A8EB-B49C4733A33C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBarOverflowPresenter>{ 0x5FF69946,0x9B27,0x583B,{ 0xA3,0xC0,0xD4,0x42,0x44,0xB1,0xBD,0x38 } }; // 5FF69946-9B27-583B-A3C0-D44244B1BD38
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory>{ 0xD066ACF7,0x0EF5,0x591A,{ 0x80,0x1E,0x52,0xA0,0x84,0xEE,0xA6,0xEB } }; // D066ACF7-0EF5-591A-801E-52A084EEA6EB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICommandBarStatics>{ 0x4ED65848,0x4C67,0x588F,{ 0x96,0x66,0x11,0xFF,0x56,0xD7,0x6F,0x02 } }; // 4ED65848-4C67-588F-9666-11FF56D76F02
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContainerContentChangingEventArgs>{ 0xF4C8C937,0xB070,0x53CE,{ 0xA7,0x6C,0x07,0x4E,0xE5,0x75,0x0A,0x71 } }; // F4C8C937-B070-53CE-A76C-074EE5750A71
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContentControl>{ 0x07E81761,0x11B2,0x52AE,{ 0x8F,0x8B,0x4D,0x53,0xD2,0xB5,0x90,0x0A } }; // 07E81761-11B2-52AE-8F8B-4D53D2B5900A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContentControlFactory>{ 0x3DEA958E,0x5ACD,0x5F80,{ 0x89,0x38,0x38,0x63,0x4F,0x51,0x49,0x3A } }; // 3DEA958E-5ACD-5F80-8938-38634F51493A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides>{ 0x2504174A,0x017E,0x5A2D,{ 0x9C,0x28,0xD9,0x7C,0x66,0xAE,0x99,0x37 } }; // 2504174A-017E-5A2D-9C28-D97C66AE9937
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContentControlStatics>{ 0xF25484F4,0x2FED,0x5A0A,{ 0x88,0x64,0x7D,0x6D,0x4A,0xC4,0x3E,0xF8 } }; // F25484F4-2FED-5A0A-8864-7D6D4AC43EF8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialog>{ 0xAC2145A3,0x4A32,0x5305,{ 0xA8,0x1D,0x47,0x50,0x95,0x15,0xBF,0xCE } }; // AC2145A3-4A32-5305-A81D-47509515BFCE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialogButtonClickDeferral>{ 0xDDCA6D2E,0xA81A,0x5F61,{ 0x8B,0x87,0xE4,0xB6,0xEC,0x5F,0xA3,0x98 } }; // DDCA6D2E-A81A-5F61-8B87-E4B6EC5FA398
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>{ 0xBAE6261C,0x362F,0x5342,{ 0xBA,0x26,0x5F,0x69,0x90,0xEF,0x72,0x6C } }; // BAE6261C-362F-5342-BA26-5F6990EF726C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosedEventArgs>{ 0x9B84E681,0x1AB6,0x5485,{ 0x88,0xB2,0xD0,0xD3,0xC0,0x5B,0x29,0xF3 } }; // 9B84E681-1AB6-5485-88B2-D0D3C05B29F3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosingDeferral>{ 0x9D74ECC1,0x67D3,0x5F02,{ 0x9B,0x30,0x56,0xF3,0xB2,0xE8,0xB0,0xA6 } }; // 9D74ECC1-67D3-5F02-9B30-56F3B2E8B0A6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosingEventArgs>{ 0x12782103,0x3B80,0x511C,{ 0x91,0x28,0x12,0xCB,0x8C,0xDA,0xC4,0x44 } }; // 12782103-3B80-511C-9128-12CB8CDAC444
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialogFactory>{ 0xA05B3AD7,0xC60E,0x545A,{ 0x9E,0xE4,0xF0,0x98,0x22,0x0E,0xD8,0x16 } }; // A05B3AD7-C60E-545A-9EE4-F098220ED816
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialogOpenedEventArgs>{ 0xD1355ED8,0x64ED,0x5BBC,{ 0x94,0x11,0x5F,0x4D,0xBC,0xA7,0xD9,0x3F } }; // D1355ED8-64ED-5BBC-9411-5F4DBCA7D93F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContentDialogStatics>{ 0x397B18DD,0x6964,0x5056,{ 0x97,0xC3,0xD6,0x9C,0xD7,0x71,0x6A,0x4B } }; // 397B18DD-6964-5056-97C3-D69CD7716A4B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContentPresenter>{ 0x075E6CA8,0xDA46,0x5EC6,{ 0x8C,0x64,0x03,0xB3,0xDD,0xEA,0xF7,0x4F } }; // 075E6CA8-DA46-5EC6-8C64-03B3DDEAF74F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContentPresenterFactory>{ 0x730B1D5E,0x2540,0x5A3D,{ 0xA6,0xC7,0x88,0x8A,0xA8,0x61,0x46,0x10 } }; // 730B1D5E-2540-5A3D-A6C7-888AA8614610
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContentPresenterOverrides>{ 0x00E96954,0xD6E0,0x510F,{ 0xA2,0xD2,0x38,0xA0,0x32,0xB9,0x62,0x36 } }; // 00E96954-D6E0-510F-A2D2-38A032B96236
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContentPresenterStatics>{ 0xC3E55F6C,0x7ABE,0x568F,{ 0xB6,0x7B,0x8E,0xBD,0x32,0x74,0xF3,0x3E } }; // C3E55F6C-7ABE-568F-B67B-8EBD3274F33E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IContextMenuEventArgs>{ 0x65637BB3,0xE279,0x5507,{ 0xBD,0x16,0x6F,0x7B,0xA6,0x70,0x5F,0x31 } }; // 65637BB3-E279-5507-BD16-6F7BA6705F31
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IControl>{ 0x857D6E8A,0xD45A,0x5C69,{ 0xA9,0x9C,0xBF,0x6A,0x5C,0x54,0xFB,0x38 } }; // 857D6E8A-D45A-5C69-A99C-BF6A5C54FB38
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IControlFactory>{ 0x25159233,0x9438,0x5534,{ 0xAE,0xB9,0x00,0xEB,0x05,0x9C,0xF7,0x3F } }; // 25159233-9438-5534-AEB9-00EB059CF73F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IControlOverrides>{ 0x5F644395,0x2177,0x5161,{ 0x9F,0x87,0xC6,0xC7,0x49,0xC7,0x3A,0x03 } }; // 5F644395-2177-5161-9F87-C6C749C73A03
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IControlProtected>{ 0x5C750339,0x1789,0x5095,{ 0xA2,0x14,0xDD,0x9D,0x05,0x64,0xE5,0x79 } }; // 5C750339-1789-5095-A214-DD9D0564E579
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IControlStatics>{ 0xC3AE388D,0xAA36,0x5E10,{ 0xAC,0xAC,0x98,0x41,0x5F,0x47,0xBC,0xC7 } }; // C3AE388D-AA36-5E10-ACAC-98415F47BCC7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IControlTemplate>{ 0x3A192751,0x2106,0x547A,{ 0xAC,0xA0,0xF1,0x5A,0xE8,0x92,0x6E,0xA0 } }; // 3A192751-2106-547A-ACA0-F15AE8926EA0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ICoreWebView2InitializedEventArgs>{ 0xEE59D277,0x8B2E,0x57AB,{ 0x86,0x31,0x91,0xD2,0x7B,0x12,0xEB,0xD9 } }; // EE59D277-8B2E-57AB-8631-91D27B12EBD9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelector>{ 0x86CA4FA4,0x7DE0,0x5049,{ 0x82,0xF5,0x39,0xEC,0x78,0x56,0x90,0x28 } }; // 86CA4FA4-7DE0-5049-82F5-39EC78569028
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelectorFactory>{ 0x43217EDA,0x6F7F,0x5B80,{ 0xA7,0x0B,0x94,0x45,0x11,0xB3,0x54,0xAB } }; // 43217EDA-6F7F-5B80-A70B-944511B354AB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelectorOverrides>{ 0x980448CC,0xC114,0x5B89,{ 0x8E,0x09,0x61,0xB0,0xF2,0x64,0xE5,0x92 } }; // 980448CC-C114-5B89-8E09-61B0F264E592
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickedEventArgs>{ 0x001F5D4C,0x4AC2,0x5E0C,{ 0x96,0x73,0xE4,0x13,0xC4,0xBD,0x60,0xF3 } }; // 001F5D4C-4AC2-5E0C-9673-E413C4BD60F3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDatePicker>{ 0xCA1DC351,0x3AE3,0x5247,{ 0x82,0x63,0x16,0xBD,0x51,0x6C,0x6E,0x72 } }; // CA1DC351-3AE3-5247-8263-16BD516C6E72
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFactory>{ 0xA16BEA02,0xB3E0,0x5FDC,{ 0xB5,0xBB,0x25,0xF7,0x94,0xDC,0x48,0x3B } }; // A16BEA02-B3E0-5FDC-B5BB-25F794DC483B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyout>{ 0xBA7ECF3C,0xEDB1,0x593B,{ 0xA4,0xAC,0xC0,0x98,0x02,0xEA,0xCE,0x99 } }; // BA7ECF3C-EDB1-593B-A4AC-C09802EACE99
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItem>{ 0xEB7D591E,0x1314,0x5409,{ 0x92,0x31,0x5B,0x8E,0x3B,0xE1,0x87,0xA7 } }; // EB7D591E-1314-5409-9231-5B8E3BE187A7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItemStatics>{ 0xDA7140FC,0x5613,0x5AB2,{ 0x9A,0xAB,0x36,0xCF,0x39,0x6E,0xF5,0x6C } }; // DA7140FC-5613-5AB2-9AAB-36CF396EF56C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenter>{ 0x1ADFDA34,0x60F5,0x501B,{ 0xB8,0xE2,0x73,0xA4,0x9C,0xAD,0x67,0x12 } }; // 1ADFDA34-60F5-501B-B8E2-73A49CAD6712
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenterStatics>{ 0x611359B5,0x1AA8,0x528C,{ 0x8E,0x57,0x03,0x78,0xA9,0xE7,0x1C,0x57 } }; // 611359B5-1AA8-528C-8E57-0378A9E71C57
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutStatics>{ 0x6A22EF58,0x7A7C,0x5883,{ 0x88,0x34,0xA6,0x58,0x45,0x85,0xAF,0x03 } }; // 6A22EF58-7A7C-5883-8834-A6584585AF03
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerSelectedValueChangedEventArgs>{ 0x305ED436,0x370F,0x5E82,{ 0xAC,0xF2,0xF1,0x41,0x3E,0x8F,0x9E,0xC4 } }; // 305ED436-370F-5E82-ACF2-F1413E8F9EC4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerStatics>{ 0x4D810253,0xAAE7,0x5BE1,{ 0xB7,0xA8,0xAF,0x45,0x1C,0xA4,0x33,0xE1 } }; // 4D810253-AAE7-5BE1-B7A8-AF451CA433E1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>{ 0xBD4E36CA,0xF6AB,0x57CF,{ 0x84,0xF0,0x75,0xD0,0x24,0x08,0x4F,0x20 } }; // BD4E36CA-F6AB-57CF-84F0-75D024084F20
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDragItemsCompletedEventArgs>{ 0xC0138552,0xF467,0x5C3E,{ 0x8A,0xF4,0x59,0x36,0x07,0x76,0x28,0x44 } }; // C0138552-F467-5C3E-8AF4-593607762844
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDragItemsStartingEventArgs>{ 0xA6938886,0x20DF,0x558E,{ 0xAC,0x74,0xBB,0x5B,0x7F,0x2F,0x7E,0x90 } }; // A6938886-20DF-558E-AC74-BB5B7F2F7E90
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDropDownButton>{ 0xC1E9FA91,0x4F95,0x5796,{ 0x8A,0x7B,0x3B,0x75,0x94,0xA1,0x2C,0x69 } }; // C1E9FA91-4F95-5796-8A7B-3B7594A12C69
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDropDownButtonFactory>{ 0x7CF3E13B,0x668D,0x57E7,{ 0xB5,0xD6,0xF5,0xCA,0x3D,0xBC,0x80,0xBD } }; // 7CF3E13B-668D-57E7-B5D6-F5CA3DBC80BD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource>{ 0xAB00E5CF,0x1BE6,0x559C,{ 0xAD,0x5B,0x02,0x53,0xBB,0x17,0xC0,0xF7 } }; // AB00E5CF-1BE6-559C-AD5B-0253BB17C0F7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs>{ 0xBF64C37F,0x6332,0x541D,{ 0x80,0xF1,0x87,0x6C,0x5B,0xB9,0xB1,0x96 } }; // BF64C37F-6332-541D-80F1-876C5BB9B196
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IExpander>{ 0xCA633942,0xE584,0x55C2,{ 0xB7,0xEE,0xCF,0xFC,0x73,0xC8,0x12,0x7A } }; // CA633942-E584-55C2-B7EE-CFFC73C8127A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IExpanderCollapsedEventArgs>{ 0x968A6870,0x7426,0x535E,{ 0xA5,0x26,0x27,0x9E,0x6E,0xED,0xEC,0xD0 } }; // 968A6870-7426-535E-A526-279E6EEDECD0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IExpanderExpandingEventArgs>{ 0x433F2E36,0x19E7,0x579C,{ 0xB4,0xCE,0x9C,0xE5,0xD5,0x10,0xD0,0x01 } }; // 433F2E36-19E7-579C-B4CE-9CE5D510D001
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IExpanderFactory>{ 0x51A5AFC2,0xB16D,0x516E,{ 0x83,0xAE,0x5A,0x10,0x47,0x6B,0x13,0xAF } }; // 51A5AFC2-B16D-516E-83AE-5A10476B13AF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IExpanderStatics>{ 0xB742C27B,0xC023,0x5096,{ 0x8C,0x2A,0x71,0x7D,0x32,0x4A,0xFB,0x7E } }; // B742C27B-C023-5096-8C2A-717D324AFB7E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IExpanderTemplateSettings>{ 0x8F959018,0xF6B8,0x5C02,{ 0xBE,0x08,0xCD,0x19,0x6C,0x9F,0xCD,0x2D } }; // 8F959018-F6B8-5C02-BE08-CD196C9FCD2D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFlipView>{ 0x96C35E7F,0xCC48,0x5ACC,{ 0xB3,0xB4,0x8A,0xB4,0xBD,0xF1,0xFE,0x17 } }; // 96C35E7F-CC48-5ACC-B3B4-8AB4BDF1FE17
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFlipViewFactory>{ 0xF3A89BE6,0x81E3,0x53C4,{ 0x9D,0xC9,0x98,0xA5,0xA4,0xE7,0x9B,0x13 } }; // F3A89BE6-81E3-53C4-9DC9-98A5A4E79B13
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFlipViewItem>{ 0x516F2058,0xAF67,0x5EB3,{ 0xB7,0x96,0xE7,0x5B,0x34,0xF3,0xFD,0x92 } }; // 516F2058-AF67-5EB3-B796-E75B34F3FD92
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFlipViewItemFactory>{ 0xDEB2CD5F,0x9D76,0x5678,{ 0xB1,0xCA,0x02,0x67,0x75,0x7C,0x4F,0xED } }; // DEB2CD5F-9D76-5678-B1CA-0267757C4FED
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFlipViewStatics>{ 0x1E98FC86,0x2BC1,0x5C89,{ 0x83,0x05,0x25,0x1A,0xD5,0x6A,0x9C,0xDB } }; // 1E98FC86-2BC1-5C89-8305-251AD56A9CDB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFlyout>{ 0xD4A1EB7D,0x59B8,0x5DF9,{ 0x87,0xC3,0xBD,0x5E,0x38,0x56,0x92,0x3F } }; // D4A1EB7D-59B8-5DF9-87C3-BD5E3856923F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFlyoutFactory>{ 0xFD19002E,0x66B3,0x5656,{ 0xB4,0x9C,0xB2,0xAC,0xA1,0x1E,0x96,0x02 } }; // FD19002E-66B3-5656-B49C-B2ACA11E9602
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenter>{ 0x70259825,0x7F56,0x5107,{ 0x91,0x7E,0x71,0x94,0xB1,0xEF,0x1B,0x81 } }; // 70259825-7F56-5107-917E-7194B1EF1B81
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenterFactory>{ 0xE9539A80,0x74ED,0x5158,{ 0x9F,0x93,0x89,0x36,0x69,0xCB,0x04,0x6F } }; // E9539A80-74ED-5158-9F93-893669CB046F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenterStatics>{ 0xB415A2EC,0x1BDD,0x5F94,{ 0x95,0x00,0x25,0x72,0x23,0x64,0x64,0x69 } }; // B415A2EC-1BDD-5F94-9500-257223646469
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFlyoutStatics>{ 0x23AE001A,0xAAA6,0x5D19,{ 0x99,0x47,0x91,0x7E,0xCB,0xD8,0x83,0xCA } }; // 23AE001A-AAA6-5D19-9947-917ECBD883CA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFocusDisengagedEventArgs>{ 0xC0B4B88C,0xC195,0x5064,{ 0x84,0xC7,0x33,0xCB,0x26,0x2C,0xB2,0x40 } }; // C0B4B88C-C195-5064-84C7-33CB262CB240
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFocusEngagedEventArgs>{ 0x1E71E8E4,0x74B2,0x50A1,{ 0x8F,0x2B,0x42,0xC0,0x11,0x8A,0xB0,0xEA } }; // 1E71E8E4-74B2-50A1-8F2B-42C0118AB0EA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFontIcon>{ 0x6EBA5ED9,0xD233,0x5F5E,{ 0x91,0xA8,0xF5,0x13,0x42,0x92,0x65,0x8A } }; // 6EBA5ED9-D233-5F5E-91A8-F5134292658A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFontIconFactory>{ 0xAA9A24FE,0xBEF8,0x564A,{ 0xB2,0x00,0x69,0x4C,0xD6,0xF6,0xBA,0x4E } }; // AA9A24FE-BEF8-564A-B200-694CD6F6BA4E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFontIconSource>{ 0xB89D614C,0xE9B5,0x5B6A,{ 0x9B,0xEC,0xAD,0x78,0xB1,0xA1,0x4B,0x74 } }; // B89D614C-E9B5-5B6A-9BEC-AD78B1A14B74
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFontIconSourceFactory>{ 0xBB40EEEE,0x64D1,0x5133,{ 0xB1,0xD6,0xAE,0x13,0xC2,0x1B,0x66,0x78 } }; // BB40EEEE-64D1-5133-B1D6-AE13C21B6678
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>{ 0xC309C231,0xF7BF,0x5C06,{ 0xA2,0xD2,0x56,0x50,0x2C,0xFD,0x33,0xE5 } }; // C309C231-F7BF-5C06-A2D2-56502CFD33E5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFontIconStatics>{ 0x55564030,0x2F80,0x5BE5,{ 0x8C,0x2A,0xEB,0xB6,0xEC,0xBA,0x07,0xE8 } }; // 55564030-2F80-5BE5-8C2A-EBB6ECBA07E8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFrame>{ 0xE6D50443,0x621E,0x5360,{ 0x85,0x6A,0x75,0xB0,0x1E,0x1F,0xCD,0x22 } }; // E6D50443-621E-5360-856A-75B01E1FCD22
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFrameFactory>{ 0x53A3070F,0x19D9,0x59BC,{ 0xBD,0xD6,0x4D,0xBF,0x13,0x9E,0x7D,0xA5 } }; // 53A3070F-19D9-59BC-BDD6-4DBF139E7DA5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IFrameStatics>{ 0x8A974D00,0x8DA2,0x588A,{ 0xA1,0x82,0x1F,0x76,0x21,0xEE,0x65,0x0B } }; // 8A974D00-8DA2-588A-A182-1F7621EE650B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IGrid>{ 0xC4496219,0x9014,0x58A1,{ 0xB4,0xAD,0xC5,0x04,0x49,0x13,0xA5,0xBB } }; // C4496219-9014-58A1-B4AD-C5044913A5BB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IGridFactory>{ 0xB16BF561,0xFC6C,0x57C6,{ 0x8E,0xBC,0x0B,0x06,0xCE,0x45,0x13,0xAA } }; // B16BF561-FC6C-57C6-8EBC-0B06CE4513AA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IGridStatics>{ 0xEF9CF81D,0xA431,0x50F4,{ 0xAB,0xF5,0x30,0x23,0xFE,0x44,0x77,0x04 } }; // EF9CF81D-A431-50F4-ABF5-3023FE447704
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IGridView>{ 0xD495F2FA,0x594D,0x5170,{ 0xB1,0xE8,0x86,0x29,0xA1,0x79,0xF9,0xFB } }; // D495F2FA-594D-5170-B1E8-8629A179F9FB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IGridViewFactory>{ 0x892947EA,0x6B86,0x5F17,{ 0xA9,0xB8,0x21,0x21,0xB2,0x25,0x12,0x71 } }; // 892947EA-6B86-5F17-A9B8-2121B2251271
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IGridViewHeaderItem>{ 0x2C90C3E0,0x3245,0x55D6,{ 0x9D,0x98,0x0F,0xD9,0x54,0x0E,0x92,0x0F } }; // 2C90C3E0-3245-55D6-9D98-0FD9540E920F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IGridViewHeaderItemFactory>{ 0x2518F012,0x54DF,0x587E,{ 0x92,0xB3,0xBD,0x86,0x07,0x5B,0x71,0xCF } }; // 2518F012-54DF-587E-92B3-BD86075B71CF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IGridViewItem>{ 0x9DEBB4A5,0xE7B7,0x5A41,{ 0xA1,0xEE,0xF7,0x7D,0x8A,0x7B,0x00,0x23 } }; // 9DEBB4A5-E7B7-5A41-A1EE-F77D8A7B0023
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IGridViewItemFactory>{ 0x96A56215,0x230C,0x5EFB,{ 0x84,0x01,0x0C,0xE0,0x16,0x17,0xC6,0x57 } }; // 96A56215-230C-5EFB-8401-0CE01617C657
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IGroupItem>{ 0x60E5A62B,0x9DF9,0x5DBD,{ 0x95,0x51,0x1D,0x9E,0x0F,0x6C,0xC3,0xC3 } }; // 60E5A62B-9DF9-5DBD-9551-1D9E0F6CC3C3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IGroupItemFactory>{ 0x7C1D5F85,0x12A6,0x5E54,{ 0x8C,0x3D,0xEF,0x44,0xDD,0x40,0xF1,0xBD } }; // 7C1D5F85-12A6-5E54-8C3D-EF44DD40F1BD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IGroupStyle>{ 0xA77D937E,0x0188,0x584C,{ 0xAB,0x1D,0x9D,0xF1,0x91,0x6E,0xDC,0x75 } }; // A77D937E-0188-584C-AB1D-9DF1916EDC75
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleFactory>{ 0xDC884AA2,0xE2A8,0x57AB,{ 0x8C,0xBC,0xB1,0xD8,0xEC,0x54,0x0B,0x0C } }; // DC884AA2-E2A8-57AB-8CBC-B1D8EC540B0C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelector>{ 0x524F5086,0x3E02,0x5B71,{ 0xBE,0x7C,0x8A,0x8F,0xA0,0xFE,0xAA,0x2C } }; // 524F5086-3E02-5B71-BE7C-8A8FA0FEAA2C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelectorFactory>{ 0x0E0699BE,0x50C2,0x5C15,{ 0xAE,0xD3,0xE7,0xBD,0x66,0x3E,0x5F,0xAD } }; // 0E0699BE-50C2-5C15-AED3-E7BD663E5FAD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelectorOverrides>{ 0x80594304,0xEBEB,0x5A5D,{ 0xA7,0x94,0xAC,0xDC,0x21,0x4C,0xBC,0x94 } }; // 80594304-EBEB-5A5D-A794-ACDC214CBC94
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IHasValidationErrorsChangedEventArgs>{ 0xE1F0F2CF,0xB0EF,0x5F56,{ 0xB5,0x97,0xF0,0x77,0x1F,0x5C,0xFF,0xD2 } }; // E1F0F2CF-B0EF-5F56-B597-F0771F5CFFD2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IHub>{ 0xB867E995,0x0F2E,0x51A6,{ 0xA0,0x90,0xE0,0xBE,0x2E,0x7C,0xF3,0xEC } }; // B867E995-0F2E-51A6-A090-E0BE2E7CF3EC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IHubFactory>{ 0x520D3572,0xF141,0x58BD,{ 0xB2,0xA7,0x33,0x52,0x63,0x0F,0xC1,0xE2 } }; // 520D3572-F141-58BD-B2A7-3352630FC1E2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IHubSection>{ 0x9904A65B,0x89FF,0x5644,{ 0x89,0x61,0x9A,0xDB,0xD0,0x13,0x53,0x24 } }; // 9904A65B-89FF-5644-8961-9ADBD0135324
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IHubSectionFactory>{ 0x63CE16F2,0xFB52,0x5818,{ 0x83,0x6F,0xC0,0x97,0xAA,0x9C,0x07,0x2D } }; // 63CE16F2-FB52-5818-836F-C097AA9C072D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs>{ 0xB5343AAB,0x37B2,0x5CDC,{ 0x95,0x43,0x11,0x8E,0x3A,0xCE,0x48,0xB2 } }; // B5343AAB-37B2-5CDC-9543-118E3ACE48B2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IHubSectionStatics>{ 0xD22016D3,0xFB4A,0x5BD8,{ 0xA1,0x08,0xE5,0x9F,0x7C,0x47,0x59,0x27 } }; // D22016D3-FB4A-5BD8-A108-E59F7C475927
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IHubStatics>{ 0x2834E932,0xABF1,0x5E07,{ 0xAE,0xAE,0x63,0x3B,0x72,0x6B,0x78,0xCB } }; // 2834E932-ABF1-5E07-AEAE-633B726B78CB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButton>{ 0x6DBEE605,0x8DF0,0x50CC,{ 0x9A,0x42,0x25,0x0E,0xB1,0x38,0xF0,0xC6 } }; // 6DBEE605-8DF0-50CC-9A42-250EB138F0C6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButtonFactory>{ 0x01F775EA,0xC5ED,0x514A,{ 0xA2,0x3D,0x89,0xC4,0x94,0xA8,0xF0,0x9D } }; // 01F775EA-C5ED-514A-A23D-89C494A8F09D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButtonStatics>{ 0xAB5C7B77,0x7C4C,0x5B26,{ 0x9C,0x7C,0x76,0x3F,0x8D,0x95,0x25,0x8E } }; // AB5C7B77-7C4C-5B26-9C7C-763F8D95258E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IIconElement>{ 0x18F69350,0x279E,0x50EA,{ 0x8D,0x23,0x13,0x8E,0x71,0x7E,0xD9,0x39 } }; // 18F69350-279E-50EA-8D23-138E717ED939
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IIconElementFactory>{ 0x7161EEFF,0x2CC3,0x59C9,{ 0xB3,0x55,0xF7,0x52,0xEF,0x20,0x30,0xFB } }; // 7161EEFF-2CC3-59C9-B355-F752EF2030FB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IIconElementStatics>{ 0x4CCFDC81,0x9D9D,0x5A02,{ 0xB9,0x5B,0xAD,0x1A,0xDD,0x92,0x17,0x50 } }; // 4CCFDC81-9D9D-5A02-B95B-AD1ADD921750
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IIconSource>{ 0x39E6B320,0xA2AF,0x5EE3,{ 0xB7,0xE9,0x4B,0xA4,0xAA,0x80,0x54,0x1A } }; // 39E6B320-A2AF-5EE3-B7E9-4BA4AA80541A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IIconSourceElement>{ 0xAB6F4473,0x1F6B,0x5B24,{ 0x82,0x59,0x1D,0x38,0xE9,0x0A,0x11,0x0A } }; // AB6F4473-1F6B-5B24-8259-1D38E90A110A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IIconSourceElementFactory>{ 0x13E1A240,0xAD47,0x51AE,{ 0x96,0x32,0x71,0x5F,0x4B,0x7E,0xA5,0x2E } }; // 13E1A240-AD47-51AE-9632-715F4B7EA52E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IIconSourceElementStatics>{ 0x2CC2539F,0x69FC,0x5160,{ 0xAB,0x84,0x37,0xE7,0xE0,0x4E,0x26,0x91 } }; // 2CC2539F-69FC-5160-AB84-37E7E04E2691
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IIconSourceFactory>{ 0xE8BC19C6,0x9A64,0x5C54,{ 0x93,0x38,0xE1,0x8E,0x07,0x68,0x75,0xBF } }; // E8BC19C6-9A64-5C54-9338-E18E076875BF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IIconSourceOverrides>{ 0x9A02D369,0x1C79,0x5A81,{ 0x87,0x1B,0x0B,0x90,0x94,0x6B,0xA7,0xF0 } }; // 9A02D369-1C79-5A81-871B-0B90946BA7F0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IIconSourceStatics>{ 0xEED55973,0x7E15,0x575F,{ 0xAF,0x8E,0xAE,0x2B,0x9B,0x97,0x5D,0xD7 } }; // EED55973-7E15-575F-AF8E-AE2B9B975DD7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IImage>{ 0x220D3D8D,0x66DE,0x53A1,{ 0xA2,0x15,0xBA,0x9C,0x16,0x55,0x65,0xAB } }; // 220D3D8D-66DE-53A1-A215-BA9C165565AB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IImageIcon>{ 0x78A7B526,0xE635,0x59C6,{ 0x93,0xA1,0xD7,0xE3,0xC2,0xFA,0xC6,0xD5 } }; // 78A7B526-E635-59C6-93A1-D7E3C2FAC6D5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IImageIconFactory>{ 0x235E0279,0xA7D0,0x5FDA,{ 0xA3,0x08,0x9B,0x7C,0xB9,0xC4,0xC9,0x12 } }; // 235E0279-A7D0-5FDA-A308-9B7CB9C4C912
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IImageIconSource>{ 0x67F75BE0,0xC84D,0x57FF,{ 0x9F,0x68,0x03,0x9C,0x81,0xEA,0x78,0x96 } }; // 67F75BE0-C84D-57FF-9F68-039C81EA7896
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IImageIconSourceFactory>{ 0x24F76321,0x71BD,0x530A,{ 0x8C,0xC8,0x3F,0x61,0x5C,0xD1,0x43,0x7A } }; // 24F76321-71BD-530A-8CC8-3F615CD1437A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IImageIconSourceStatics>{ 0x3AAE805C,0xC128,0x5F0D,{ 0xAE,0x43,0x1B,0x15,0x88,0x91,0xA1,0xDD } }; // 3AAE805C-C128-5F0D-AE43-1B158891A1DD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IImageIconStatics>{ 0x6BD31828,0xF8F9,0x5D86,{ 0x80,0xD5,0xE7,0x42,0x35,0x46,0xDA,0x7D } }; // 6BD31828-F8F9-5D86-80D5-E7423546DA7D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IImageStatics>{ 0xCB5378A8,0x996B,0x547E,{ 0x9C,0x4C,0x7B,0xBF,0xD9,0xDB,0xE7,0xDC } }; // CB5378A8-996B-547E-9C4C-7BBFD9DBE7DC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBadge>{ 0x82104D7F,0x03D4,0x5EA4,{ 0x87,0x2E,0xF9,0xEC,0xAB,0x75,0x86,0x01 } }; // 82104D7F-03D4-5EA4-872E-F9ECAB758601
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeFactory>{ 0xFB498205,0x2DE0,0x5986,{ 0x8A,0xEC,0x2C,0x46,0xAC,0x23,0x50,0x87 } }; // FB498205-2DE0-5986-8AEC-2C46AC235087
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeStatics>{ 0xB0160061,0xB463,0x54DE,{ 0x81,0xAC,0x64,0xF3,0x90,0xD4,0xF2,0x5D } }; // B0160061-B463-54DE-81AC-64F390D4F25D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettings>{ 0xCE810F86,0xD4BB,0x51BD,{ 0xBF,0x7D,0xDF,0xD1,0xE6,0xC8,0x5F,0x4A } }; // CE810F86-D4BB-51BD-BF7D-DFD1E6C85F4A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettingsFactory>{ 0x5D366775,0x1F6E,0x558C,{ 0xAA,0xB4,0x66,0x77,0x04,0xB3,0x07,0x0C } }; // 5D366775-1F6E-558C-AAB4-667704B3070C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettingsStatics>{ 0x10959133,0x64CE,0x586F,{ 0xA2,0x52,0x9E,0x26,0xFC,0x1A,0xD9,0xBA } }; // 10959133-64CE-586F-A252-9E26FC1AD9BA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBar>{ 0xC1C3A438,0xDD79,0x5D22,{ 0x9E,0x42,0x5A,0x3C,0xDF,0x81,0x13,0xA9 } }; // C1C3A438-DD79-5D22-9E42-5A3CDF8113A9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosedEventArgs>{ 0x593AF0B3,0xBDED,0x53DA,{ 0x8F,0x56,0x80,0xED,0x3C,0x64,0x32,0x2C } }; // 593AF0B3-BDED-53DA-8F56-80ED3C64322C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosedEventArgsFactory>{ 0x42FE1F7E,0x6D68,0x5A85,{ 0x8A,0x5C,0xAB,0xB7,0xEF,0xFC,0xDF,0x26 } }; // 42FE1F7E-6D68-5A85-8A5C-ABB7EFFCDF26
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosingEventArgs>{ 0x062D01D6,0x61AF,0x5435,{ 0x8C,0x4B,0xC5,0x11,0x06,0x58,0x3B,0x5B } }; // 062D01D6-61AF-5435-8C4B-C51106583B5B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosingEventArgsFactory>{ 0xD6CFCC14,0x5206,0x5C9D,{ 0x80,0x1C,0x3A,0x90,0xB4,0xE2,0xEB,0xE4 } }; // D6CFCC14-5206-5C9D-801C-3A90B4E2EBE4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarFactory>{ 0x60618A60,0x9BE7,0x5DF5,{ 0xBE,0x0D,0x93,0x3D,0x34,0xDD,0xB4,0x4C } }; // 60618A60-9BE7-5DF5-BE0D-933D34DDB44C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarStatics>{ 0x5FB1E80D,0xEA5D,0x57BA,{ 0x99,0x15,0xB6,0x78,0x2B,0x98,0x2A,0xCA } }; // 5FB1E80D-EA5D-57BA-9915-B6782B982ACA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettings>{ 0x926F7292,0x9882,0x5056,{ 0x80,0x97,0x6D,0xA2,0xA7,0xEA,0x27,0xCD } }; // 926F7292-9882-5056-8097-6DA2A7EA27CD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettingsFactory>{ 0x29517DAF,0xC763,0x56CE,{ 0x8D,0x54,0xEE,0xFC,0xAF,0x7F,0x2E,0x01 } }; // 29517DAF-C763-56CE-8D54-EEFCAF7F2E01
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettingsStatics>{ 0x57671639,0x43E8,0x506D,{ 0xB9,0xA7,0x53,0x9A,0x60,0x5A,0x1C,0x67 } }; // 57671639-43E8-506D-B9A7-539A605A1C67
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IInsertionPanel>{ 0x84E13E27,0x2D24,0x59C4,{ 0xA0,0x0E,0x16,0xC7,0x25,0x59,0x01,0xE2 } }; // 84E13E27-2D24-59C4-A00E-16C7255901E2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs>{ 0x3C709B2F,0x16BA,0x55D2,{ 0xB6,0xF6,0xDF,0xC5,0x4A,0x1E,0xD0,0x21 } }; // 3C709B2F-16BA-55D2-B6F6-DFC54A1ED021
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemClickEventArgs>{ 0x1CF87A70,0x6348,0x57EC,{ 0x9E,0xAC,0xFA,0x05,0x65,0xAD,0xC6,0x0F } }; // 1CF87A70-6348-57EC-9EAC-FA0565ADC60F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransition>{ 0x63A8D310,0x4D8A,0x515E,{ 0xA9,0x00,0x04,0x16,0xD9,0x37,0x45,0x75 } }; // 63A8D310-4D8A-515E-A900-0416D9374575
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionCompletedEventArgs>{ 0xB43CA4F6,0x7AE5,0x576F,{ 0xB7,0x4D,0xEC,0x70,0xB1,0xC5,0x84,0x88 } }; // B43CA4F6-7AE5-576F-B74D-EC70B1C58488
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProgress>{ 0x4DA82DDE,0xC778,0x57F6,{ 0xA0,0xE7,0xA7,0x67,0xEF,0x08,0x59,0x1D } }; // 4DA82DDE-C778-57F6-A0E7-A767EF08591D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProvider>{ 0x32132262,0xE07D,0x51F7,{ 0xA6,0x88,0x95,0x28,0x04,0x2F,0x7E,0x0B } }; // 32132262-E07D-51F7-A688-9528042F7E0B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProviderFactory>{ 0xF1B53104,0x24BE,0x510D,{ 0x9E,0xB1,0x34,0x01,0xDE,0x36,0x1D,0xBC } }; // F1B53104-24BE-510D-9EB1-3401DE361DBC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProviderOverrides>{ 0x6935222B,0xEF83,0x5872,{ 0xA9,0xD4,0x83,0x19,0xBC,0xD6,0x7A,0x67 } }; // 6935222B-EF83-5872-A9D4-8319BCD67A67
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemContainer>{ 0x6332A67F,0x7FD9,0x53C7,{ 0xAF,0xD8,0xCF,0xA1,0x23,0x7C,0xF6,0xD1 } }; // 6332A67F-7FD9-53C7-AFD8-CFA1237CF6D1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemContainerFactory>{ 0xEE1CC57C,0x6BF2,0x5EE9,{ 0xA9,0x43,0xC9,0x5C,0xA7,0x75,0xED,0xB4 } }; // EE1CC57C-6BF2-5EE9-A943-C95CA775EDB4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemContainerGenerator>{ 0xC4C5D5AE,0xED98,0x510F,{ 0xAF,0xAE,0x8A,0x0A,0xC6,0x06,0x7A,0x3B } }; // C4C5D5AE-ED98-510F-AFAE-8A0AC6067A3B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemContainerMapping>{ 0xB3E03A32,0xEA83,0x5626,{ 0xBF,0xDA,0xD3,0x27,0xA1,0xC7,0x55,0x0C } }; // B3E03A32-EA83-5626-BFDA-D327A1C7550C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemContainerStatics>{ 0xE26E121D,0xB7BF,0x5632,{ 0x85,0xA2,0xF3,0x60,0x40,0xE6,0x49,0xF8 } }; // E26E121D-B7BF-5632-85A2-F36040E649F8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsControl>{ 0xBF1CCB54,0x83E2,0x5B98,{ 0xAC,0xBC,0x73,0x6F,0x87,0x6C,0x3D,0x35 } }; // BF1CCB54-83E2-5B98-ACBC-736F876C3D35
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsControlFactory>{ 0xB2686273,0x2DD3,0x5454,{ 0x9F,0x25,0x24,0x7E,0x66,0x27,0x03,0x36 } }; // B2686273-2DD3-5454-9F25-247E66270336
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides>{ 0x285C215F,0x64B2,0x5F7D,{ 0x88,0xD2,0x56,0xC6,0x65,0x8F,0x73,0xEE } }; // 285C215F-64B2-5F7D-88D2-56C6658F73EE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsControlStatics>{ 0x4FB961E1,0x5F91,0x5585,{ 0xA6,0x92,0x68,0x25,0xCD,0xE3,0xED,0x1E } }; // 4FB961E1-5F91-5585-A692-6825CDE3ED1E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsPanelTemplate>{ 0x6153AF2F,0xF095,0x5E8C,{ 0x89,0xD4,0x9E,0x03,0x20,0x3B,0x9C,0xC2 } }; // 6153AF2F-F095-5E8C-89D4-9E03203B9CC2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsPickedEventArgs>{ 0xC6E93908,0xE20D,0x5614,{ 0x98,0x8A,0x36,0x2D,0x79,0x37,0xD2,0x76 } }; // C6E93908-E20D-5614-988A-362D7937D276
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsPresenter>{ 0x0B0FBB88,0x6CB3,0x5F4E,{ 0x99,0xBD,0x87,0x99,0x16,0xB4,0x60,0xDF } }; // 0B0FBB88-6CB3-5F4E-99BD-879916B460DF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsPresenterStatics>{ 0x6FA047C0,0xE510,0x52B0,{ 0x8D,0xA2,0xC7,0x6E,0xED,0xC8,0x64,0xA0 } }; // 6FA047C0-E510-52B0-8DA2-C76EEDC864A0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater>{ 0x9DABAC84,0xFE81,0x53D1,{ 0xA0,0x41,0x7A,0x3B,0xEF,0xEA,0x50,0x5F } }; // 9DABAC84-FE81-53D1-A041-7A3BEFEA505F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater2>{ 0x265E249A,0x2812,0x55B6,{ 0xA1,0x91,0xCB,0x96,0x08,0x9B,0x51,0xAC } }; // 265E249A-2812-55B6-A191-CB96089B51AC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs>{ 0x8F394A59,0x07C6,0x54CE,{ 0x80,0xD1,0xBB,0x0B,0x71,0xDA,0xEF,0xA0 } }; // 8F394A59-07C6-54CE-80D1-BB0B71DAEFA0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs>{ 0x38E3D613,0x48FB,0x5906,{ 0xBF,0x18,0xF7,0x13,0x03,0x01,0xFC,0xC3 } }; // 38E3D613-48FB-5906-BF18-F7130301FCC3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs>{ 0x612DB572,0xC2E7,0x58FC,{ 0x94,0x8A,0xB7,0xDC,0x0E,0x1F,0xC1,0x3A } }; // 612DB572-C2E7-58FC-948A-B7DC0E1FC13A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterFactory>{ 0xC3C1F244,0x67A8,0x568F,{ 0xA6,0xF7,0x5D,0xA8,0xB0,0xEA,0xDD,0x49 } }; // C3C1F244-67A8-568F-A6F7-5DA8B0EADD49
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterScrollHost>{ 0x6F3CEE8E,0x078A,0x59B4,{ 0x93,0x1F,0xFA,0xA8,0x91,0xC8,0xC0,0x73 } }; // 6F3CEE8E-078A-59B4-931F-FAA891C8C073
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics>{ 0xED8C4CB7,0x2EDC,0x5416,{ 0xAF,0xBF,0x87,0xA9,0xAA,0x2A,0xF2,0x6E } }; // ED8C4CB7-2EDC-5416-AFBF-87A9AA2AF26E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics2>{ 0x83D8B5EA,0xCA31,0x5192,{ 0xB9,0xA9,0x2A,0x62,0xE6,0x01,0x94,0xE7 } }; // 83D8B5EA-CA31-5192-B9A9-2A62E60194E7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsSourceView>{ 0xF7F802DE,0xE79C,0x5C5F,{ 0xAB,0xF8,0xCC,0xBD,0x48,0x6B,0x89,0xD6 } }; // F7F802DE-E79C-5C5F-ABF8-CCBD486B89D6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsSourceViewFactory>{ 0xAADC6FDD,0xEB00,0x5E58,{ 0xB9,0x5D,0x12,0x0F,0x89,0x1D,0x73,0x3F } }; // AADC6FDD-EB00-5E58-B95D-120F891D733F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsStackPanel>{ 0xF7E52FDF,0x4779,0x5F63,{ 0x99,0x99,0x7D,0x67,0x7E,0x3F,0xD2,0xC1 } }; // F7E52FDF-4779-5F63-9999-7D677E3FD2C1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsStackPanelStatics>{ 0x7CA08D59,0xBE10,0x5D61,{ 0xAB,0xE2,0x08,0x9A,0xD4,0x4D,0xB1,0xD6 } }; // 7CA08D59-BE10-5D61-ABE2-089AD44DB1D6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsView>{ 0xBBB195D8,0x6A7F,0x5A42,{ 0x98,0x66,0x25,0xFD,0x5A,0x44,0x73,0xAB } }; // BBB195D8-6A7F-5A42-9866-25FD5A4473AB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsViewFactory>{ 0xAEEEC7B9,0x3CC8,0x52DF,{ 0x8E,0x2E,0x99,0xA2,0x95,0xC2,0x53,0xAA } }; // AEEEC7B9-3CC8-52DF-8E2E-99A295C253AA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsViewItemInvokedEventArgs>{ 0x5A2386E8,0x15B8,0x5F25,{ 0x87,0x4B,0x79,0x12,0xF6,0x33,0xCE,0x21 } }; // 5A2386E8-15B8-5F25-874B-7912F633CE21
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsViewSelectionChangedEventArgs>{ 0x9CD1690F,0x6C9D,0x543C,{ 0x82,0xF2,0x30,0xCD,0x37,0xD7,0x65,0xB3 } }; // 9CD1690F-6C9D-543C-82F2-30CD37D765B3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsViewStatics>{ 0xC64F1948,0x77D3,0x5DF5,{ 0x8D,0x33,0xC5,0x86,0x02,0xD4,0xCF,0xB9 } }; // C64F1948-77D3-5DF5-8D33-C58602D4CFB9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsWrapGrid>{ 0x29910BC5,0xB305,0x5529,{ 0xB8,0x8C,0x77,0x6C,0x66,0xE1,0xB3,0xBA } }; // 29910BC5-B305-5529-B88C-776C66E1B3BA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IItemsWrapGridStatics>{ 0xF757D5CB,0x3BF2,0x5A23,{ 0x96,0x8F,0x04,0x5B,0xC8,0x0D,0x57,0xCE } }; // F757D5CB-3BF2-5A23-968F-045BC80D57CE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IKeyIndexMapping>{ 0xB1F3BBA0,0x108E,0x560D,{ 0x96,0x81,0x26,0x39,0x1B,0x4B,0xC3,0x0D } }; // B1F3BBA0-108E-560D-9681-26391B4BC30D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ILayout>{ 0x24E50C1C,0x9C51,0x5144,{ 0x9D,0xDC,0x3F,0x50,0x01,0x91,0xC2,0x62 } }; // 24E50C1C-9C51-5144-9DDC-3F500191C262
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ILayout2>{ 0xCC545FF5,0x0C41,0x5C14,{ 0x95,0x65,0x25,0x57,0xCC,0xC8,0x41,0x32 } }; // CC545FF5-0C41-5C14-9565-2557CCC84132
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ILayoutContext>{ 0xB45A2E55,0x2ECC,0x5462,{ 0xBB,0x26,0xD4,0x7C,0x45,0x5B,0xB4,0x8E } }; // B45A2E55-2ECC-5462-BB26-D47C455BB48E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ILayoutContextFactory>{ 0xF7664771,0x9242,0x599E,{ 0xA7,0xDD,0x07,0x05,0x56,0x5D,0xEF,0x98 } }; // F7664771-9242-599E-A7DD-0705565DEF98
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ILayoutContextOverrides>{ 0xFDA70E44,0x6526,0x5535,{ 0xBE,0x2B,0xEC,0x27,0x43,0x67,0x0A,0xE2 } }; // FDA70E44-6526-5535-BE2B-EC2743670AE2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ILayoutFactory>{ 0xEAF956B4,0x59C9,0x5E13,{ 0xA4,0x9D,0xF3,0x5B,0x17,0x1D,0x8F,0xC9 } }; // EAF956B4-59C9-5E13-A49D-F35B171D8FC9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ILayoutOverrides>{ 0x441D00C3,0xDD50,0x5348,{ 0x85,0x2D,0x85,0x60,0x8C,0xC7,0xDC,0xE1 } }; // 441D00C3-DD50-5348-852D-85608CC7DCE1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected>{ 0xE46FF416,0x741E,0x5176,{ 0xA1,0xD4,0x57,0x18,0xD2,0x34,0x22,0x43 } }; // E46FF416-741E-5176-A1D4-5718D2342243
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected2>{ 0x3FFFE35F,0x6F2E,0x501F,{ 0xA2,0xAD,0xE7,0x5A,0x4E,0x1C,0xD5,0x92 } }; // 3FFFE35F-6F2E-501F-A2AD-E75A4E1CD592
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayout>{ 0xF887A64B,0xB146,0x540C,{ 0x89,0x53,0xD8,0x18,0x4B,0x79,0xBA,0x6E } }; // F887A64B-B146-540C-8953-D8184B79BA6E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutFactory>{ 0x507B841E,0xFCDF,0x5CEA,{ 0xB2,0x71,0x94,0xD7,0xA6,0xAF,0x35,0x5F } }; // 507B841E-FCDF-5CEA-B271-94D7A6AF355F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemCollectionTransitionProvider>{ 0xA7C000DE,0x2543,0x5DC2,{ 0xA3,0x6D,0x5D,0x69,0xF4,0xF5,0x5D,0x61 } }; // A7C000DE-2543-5DC2-A36D-5D69F4F55D61
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemCollectionTransitionProviderFactory>{ 0xE915C9FC,0xBA75,0x581E,{ 0x9B,0x96,0x20,0xED,0xD8,0xBE,0xFC,0xC4 } }; // E915C9FC-BA75-581E-9B96-20EDD8BEFCC4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemsInfoRequestedEventArgs>{ 0xD69A3096,0xC1D3,0x57E5,{ 0x8A,0xF7,0x3F,0x70,0x88,0xB1,0x95,0x8B } }; // D69A3096-C1D3-57E5-8AF7-3F7088B1958B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutStatics>{ 0xE5ED0928,0x228F,0x5A4E,{ 0x80,0x11,0xBD,0x9C,0xDA,0x24,0xDC,0xA2 } }; // E5ED0928-228F-5A4E-8011-BD9CDA24DCA2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListBox>{ 0xF3E7DEDF,0x7A3C,0x59F1,{ 0x9E,0x05,0xAE,0x50,0x26,0xB5,0x42,0x93 } }; // F3E7DEDF-7A3C-59F1-9E05-AE5026B54293
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListBoxFactory>{ 0xD048E0BC,0x4692,0x5C60,{ 0xB2,0xE9,0x07,0xC4,0x43,0x3C,0xE0,0x50 } }; // D048E0BC-4692-5C60-B2E9-07C4433CE050
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListBoxItem>{ 0xCC67FB35,0x04F1,0x5EAD,{ 0x96,0xC5,0xB2,0xEA,0x67,0xB2,0x25,0xC6 } }; // CC67FB35-04F1-5EAD-96C5-B2EA67B225C6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListBoxItemFactory>{ 0x8E9E0E6D,0x4597,0x5EFA,{ 0x94,0xBC,0x7F,0xFA,0xDC,0x26,0x4C,0x28 } }; // 8E9E0E6D-4597-5EFA-94BC-7FFADC264C28
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListBoxStatics>{ 0x763A4986,0xDB3A,0x5A94,{ 0x85,0x05,0xAE,0xE2,0xF2,0x29,0xAF,0x85 } }; // 763A4986-DB3A-5A94-8505-AEE2F229AF85
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyout>{ 0xB0154A37,0x07C1,0x50ED,{ 0x83,0x4C,0x32,0xD3,0xFB,0xDA,0x5C,0x5F } }; // B0154A37-07C1-50ED-834C-32D3FBDA5C5F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyoutPresenter>{ 0x7DCC91AB,0x8694,0x517B,{ 0xA4,0xE6,0x04,0x76,0x74,0x10,0xC6,0x0B } }; // 7DCC91AB-8694-517B-A4E6-04767410C60B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyoutStatics>{ 0x9E485154,0x489D,0x5542,{ 0x8E,0x62,0x3C,0x91,0xA1,0x18,0x14,0xB5 } }; // 9E485154-489D-5542-8E62-3C91A11814B5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListView>{ 0xF6015DB1,0xDF63,0x52FD,{ 0xA1,0x64,0x0D,0xF4,0x47,0x15,0xEE,0x0A } }; // F6015DB1-DF63-52FD-A164-0DF44715EE0A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListViewBase>{ 0x775C57AC,0xABCE,0x5BEB,{ 0x8E,0x34,0x3B,0x81,0x58,0xAE,0xDD,0x80 } }; // 775C57AC-ABCE-5BEB-8E34-3B8158AEDD80
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseFactory>{ 0x44092863,0xC09E,0x551E,{ 0x85,0xBF,0x95,0x1B,0x55,0x29,0x50,0xC8 } }; // 44092863-C09E-551E-85BF-951B552950C8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItem>{ 0x9220C4FF,0x1974,0x53FD,{ 0xAD,0x74,0xC2,0x9E,0x7B,0x36,0x0A,0x06 } }; // 9220C4FF-1974-53FD-AD74-C29E7B360A06
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItemFactory>{ 0x228FC10A,0xB86F,0x5B57,{ 0x96,0xF4,0x34,0xD9,0xF9,0xFB,0x87,0x11 } }; // 228FC10A-B86F-5B57-96F4-34D9F9FB8711
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseStatics>{ 0xB8487E94,0x010F,0x56D4,{ 0x9F,0x76,0x94,0xBF,0x8C,0x46,0x27,0x45 } }; // B8487E94-010F-56D4-9F76-94BF8C462745
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListViewFactory>{ 0x03EBEFB8,0xF64A,0x5BF9,{ 0x95,0x70,0xCB,0x09,0xEE,0xEA,0x23,0x35 } }; // 03EBEFB8-F64A-5BF9-9570-CB09EEEA2335
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListViewHeaderItem>{ 0xE94366C8,0x64F5,0x5930,{ 0xA3,0x25,0xB2,0x3A,0xAC,0xDB,0xCE,0x89 } }; // E94366C8-64F5-5930-A325-B23AACDBCE89
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListViewHeaderItemFactory>{ 0x78F29D6A,0xC5A4,0x5D86,{ 0x99,0x62,0x91,0x02,0x0C,0xE6,0x13,0x13 } }; // 78F29D6A-C5A4-5D86-9962-91020CE61313
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListViewItem>{ 0x05FE41C2,0x0451,0x5D38,{ 0x9C,0x55,0x5D,0x10,0xCF,0xD0,0x88,0x89 } }; // 05FE41C2-0451-5D38-9C55-5D10CFD08889
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListViewItemFactory>{ 0xD9F4D0B8,0xEE59,0x5036,{ 0xBD,0x7A,0x7C,0x89,0xCF,0x0B,0xC2,0xAC } }; // D9F4D0B8-EE59-5036-BD7A-7C89CF0BC2AC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListViewPersistenceHelper>{ 0x07DE9AD4,0xED8E,0x5E05,{ 0x90,0x39,0x03,0x1B,0x4D,0xDF,0x72,0x37 } }; // 07DE9AD4-ED8E-5E05-9039-031B4DDF7237
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IListViewPersistenceHelperStatics>{ 0x36B862BB,0x3882,0x59D8,{ 0x91,0x18,0x90,0x4D,0xE3,0xFE,0x00,0xC2 } }; // 36B862BB-3882-59D8-9118-904DE3FE00C2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMapControl>{ 0x85C67AF2,0x2B9C,0x55AB,{ 0xAE,0x1F,0x63,0x5D,0xA7,0x13,0xD6,0x8F } }; // 85C67AF2-2B9C-55AB-AE1F-635DA713D68F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMapControlFactory>{ 0xEDF8C301,0x8E9A,0x59B1,{ 0x91,0x79,0x99,0xD4,0x1B,0xEC,0x90,0xD9 } }; // EDF8C301-8E9A-59B1-9179-99D41BEC90D9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMapControlMapServiceErrorOccurredEventArgs>{ 0xB5493C70,0x799C,0x59C0,{ 0xB8,0x23,0xAE,0xD5,0x26,0x81,0x94,0xA9 } }; // B5493C70-799C-59C0-B823-AED5268194A9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMapControlStatics>{ 0x56E19652,0x9C6A,0x5DCD,{ 0x85,0x0E,0x97,0xD3,0x72,0x5E,0x74,0x23 } }; // 56E19652-9C6A-5DCD-850E-97D3725E7423
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMapElement>{ 0x106FE452,0x6421,0x5F74,{ 0xB9,0x4B,0xDF,0x95,0xB5,0xD4,0x44,0x74 } }; // 106FE452-6421-5F74-B94B-DF95B5D44474
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMapElementClickEventArgs>{ 0x24A3FD85,0xFDEA,0x591E,{ 0x92,0xEF,0x3D,0x56,0x17,0x9B,0x1B,0x19 } }; // 24A3FD85-FDEA-591E-92EF-3D56179B1B19
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMapElementFactory>{ 0x3688073B,0xC481,0x5254,{ 0xAF,0x83,0x4B,0x92,0x8F,0x3B,0x58,0x06 } }; // 3688073B-C481-5254-AF83-4B928F3B5806
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayer>{ 0x623E70E1,0xD55D,0x594A,{ 0xA3,0xE2,0x97,0xB6,0xC8,0x97,0xD6,0xC0 } }; // 623E70E1-D55D-594A-A3E2-97B6C897D6C0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayerFactory>{ 0xBFF4C348,0xEE22,0x56B0,{ 0xB8,0x9F,0xA1,0xA1,0x25,0x39,0x85,0x0E } }; // BFF4C348-EE22-56B0-B89F-A1A12539850E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayerStatics>{ 0x0F07C4B8,0xF7D8,0x5AC9,{ 0xB2,0x3B,0x6C,0x19,0xC4,0x95,0x41,0xDC } }; // 0F07C4B8-F7D8-5AC9-B23B-6C19C49541DC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMapIcon>{ 0xE54FCFCA,0x360B,0x5BEF,{ 0xA7,0xF5,0xB1,0xBA,0xA4,0x3F,0x12,0xF4 } }; // E54FCFCA-360B-5BEF-A7F5-B1BAA43F12F4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMapIconFactory>{ 0xDAEE9683,0x7218,0x548F,{ 0xAE,0xAC,0xA1,0x36,0x10,0xE0,0x91,0x29 } }; // DAEE9683-7218-548F-AEAC-A13610E09129
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMapIconStatics>{ 0xB8B61BE8,0xE767,0x50A5,{ 0x8D,0xE8,0x6F,0x3A,0xC2,0xDE,0xCD,0xA7 } }; // B8B61BE8-E767-50A5-8DE8-6F3AC2DECDA7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMapLayer>{ 0x88DCE7F9,0xDF75,0x5549,{ 0x8A,0xB8,0x03,0x76,0x5C,0x34,0xB4,0x49 } }; // 88DCE7F9-DF75-5549-8AB8-03765C34B449
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMapLayerFactory>{ 0x2B44C746,0xD7BA,0x583E,{ 0xA2,0x38,0x78,0x56,0x4C,0x1D,0xD3,0x29 } }; // 2B44C746-D7BA-583E-A238-78564C1DD329
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElement>{ 0xC314A38C,0x780C,0x558A,{ 0x98,0xCD,0x0A,0x8D,0xEB,0x46,0x7F,0xCF } }; // C314A38C-780C-558A-98CD-0A8DEB467FCF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElementFactory>{ 0x51ACA342,0x65A0,0x5DB6,{ 0x80,0x82,0xBD,0x54,0xA8,0xD1,0x49,0x99 } }; // 51ACA342-65A0-5DB6-8082-BD54A8D14999
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElementStatics>{ 0x6F77BBA8,0xFB23,0x5E27,{ 0x97,0xC1,0x16,0xD4,0x37,0xD0,0x70,0x2F } }; // 6F77BBA8-FB23-5E27-97C1-16D437D0702F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenter>{ 0xB6A01245,0xA73C,0x51BA,{ 0x8E,0x1A,0x34,0x47,0xBB,0x27,0x7E,0x40 } }; // B6A01245-A73C-51BA-8E1A-3447BB277E40
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenterFactory>{ 0x3A96E3F8,0xEC04,0x5922,{ 0x90,0x1C,0x11,0xBA,0x36,0x07,0xCF,0x93 } }; // 3A96E3F8-EC04-5922-901C-11BA3607CF93
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenterStatics>{ 0x5A14B68F,0x1E03,0x5604,{ 0xBC,0xD6,0x7C,0x74,0x03,0x61,0x95,0x13 } }; // 5A14B68F-1E03-5604-BCD6-7C7403619513
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControls>{ 0xC99C110B,0x9DEE,0x5A6B,{ 0xBB,0x9E,0x61,0xBF,0xCA,0xAA,0xFA,0x3E } }; // C99C110B-9DEE-5A6B-BB9E-61BFCAAAFA3E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsFactory>{ 0xA3F9A254,0x1BCF,0x57B5,{ 0x94,0x81,0xC1,0x9C,0x45,0x83,0xAC,0x0E } }; // A3F9A254-1BCF-57B5-9481-C19C4583AC0E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsHelper>{ 0x89D393BA,0x0E04,0x5E24,{ 0xB4,0x56,0xAB,0x05,0x42,0x95,0x91,0xE4 } }; // 89D393BA-0E04-5E24-B456-AB05429591E4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsHelperStatics>{ 0xF1BF86F5,0xBC62,0x5722,{ 0xBE,0xBD,0xA0,0x01,0x02,0xD8,0x57,0xD3 } }; // F1BF86F5-BC62-5722-BEBD-A00102D857D3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsStatics>{ 0xF497067E,0x7C41,0x5083,{ 0x96,0xC5,0xB6,0x88,0x1D,0x88,0xB1,0x87 } }; // F497067E-7C41-5083-96C5-B6881D88B187
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuBar>{ 0xBA97F337,0x8F1E,0x5141,{ 0xB5,0x3F,0xE7,0x7A,0x8B,0xA3,0xEB,0xBD } }; // BA97F337-8F1E-5141-B53F-E77A8BA3EBBD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuBarFactory>{ 0x76AA8759,0x04EE,0x5A4C,{ 0xB9,0x8C,0xD0,0x37,0x42,0xD4,0x7C,0xDB } }; // 76AA8759-04EE-5A4C-B98C-D03742D47CDB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItem>{ 0xA7900980,0x51CC,0x531D,{ 0x97,0xC5,0x35,0x6B,0x13,0x57,0x33,0x98 } }; // A7900980-51CC-531D-97C5-356B13573398
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFactory>{ 0x87D02172,0x83CB,0x5459,{ 0x94,0x0F,0x17,0x3F,0x75,0x01,0xB3,0x00 } }; // 87D02172-83CB-5459-940F-173F7501B300
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout>{ 0xA412AE4F,0xC3BC,0x5679,{ 0x8D,0x5F,0x86,0x5E,0xB9,0x7E,0x83,0xCD } }; // A412AE4F-C3BC-5679-8D5F-865EB97E83CD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>{ 0xF895123E,0xED54,0x5A96,{ 0x84,0x18,0xF3,0x5E,0x48,0x50,0x5D,0x43 } }; // F895123E-ED54-5A96-8418-F35E48505D43
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemStatics>{ 0xC8A33F46,0x2E1C,0x5CE0,{ 0xBC,0x09,0x45,0x24,0xE6,0x89,0x41,0xC8 } }; // C8A33F46-2E1C-5CE0-BC09-4524E68941C8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuBarStatics>{ 0x79AA0B84,0x5554,0x5F7C,{ 0x80,0xD9,0x79,0x70,0xAA,0x03,0x01,0x25 } }; // 79AA0B84-5554-5F7C-80D9-7970AA030125
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyout>{ 0xF4C77C6C,0x1FA5,0x5D85,{ 0x85,0x59,0x5D,0x02,0xB7,0xD4,0xE5,0xE7 } }; // F4C77C6C-1FA5-5D85-8559-5D02B7D4E5E7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutFactory>{ 0xA3D225DE,0x6B35,0x5442,{ 0xB6,0xC9,0x06,0xFD,0x24,0x13,0x9A,0x63 } }; // A3D225DE-6B35-5442-B6C9-06FD24139A63
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItem>{ 0x4252DF5A,0x44F9,0x5EE8,{ 0xB1,0xCC,0x53,0xDE,0x9A,0xAA,0x40,0x95 } }; // 4252DF5A-44F9-5EE8-B1CC-53DE9AAA4095
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBase>{ 0x4BEE2715,0x44A1,0x5F94,{ 0x86,0xE8,0x02,0xDD,0xBE,0x3D,0xC6,0xB9 } }; // 4BEE2715-44A1-5F94-86E8-02DDBE3DC6B9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory>{ 0x33F4EAD3,0xAB54,0x505D,{ 0xBC,0x5F,0x45,0xE7,0xC3,0x5F,0x20,0xF8 } }; // 33F4EAD3-AB54-505D-BC5F-45E7C35F20F8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemFactory>{ 0x9C3C9A1F,0x89AF,0x521A,{ 0x81,0xA5,0x8A,0x01,0xDB,0x7A,0x79,0xAF } }; // 9C3C9A1F-89AF-521A-81A5-8A01DB7A79AF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemStatics>{ 0x9D7953D6,0xE6A6,0x5154,{ 0x91,0xF4,0x67,0xF4,0xD6,0x04,0x2A,0x4F } }; // 9D7953D6-E6A6-5154-91F4-67F4D6042A4F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenter>{ 0x5C9B4644,0xE292,0x5436,{ 0x86,0xEC,0x1C,0x0E,0x29,0xF9,0x4C,0x2D } }; // 5C9B4644-E292-5436-86EC-1C0E29F94C2D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenter2>{ 0x3E3AAF6B,0x0CC9,0x5D5C,{ 0x86,0xC1,0x05,0xF5,0x3F,0xAB,0x67,0xE8 } }; // 3E3AAF6B-0CC9-5D5C-86C1-05F53FAB67E8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenterFactory>{ 0x0DFB684D,0xC60D,0x5771,{ 0xB4,0x90,0x2C,0x86,0x12,0xC4,0x84,0x00 } }; // 0DFB684D-C60D-5771-B490-2C8612C48400
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenterStatics>{ 0x7DE3D28D,0xBD8B,0x5FED,{ 0xA2,0xE2,0xB9,0xBE,0xAE,0x56,0xFF,0x24 } }; // 7DE3D28D-BD8B-5FED-A2E2-B9BEAE56FF24
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenterStatics2>{ 0x61153DDF,0x024D,0x50B8,{ 0x96,0x84,0xB1,0x5B,0x8B,0x75,0x69,0x43 } }; // 61153DDF-024D-50B8-9684-B15B8B756943
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSeparator>{ 0x3EAF5FD5,0x935E,0x5ED7,{ 0x8D,0x05,0xF6,0xBA,0xFA,0x93,0x6D,0x25 } }; // 3EAF5FD5-935E-5ED7-8D05-F6BAFA936D25
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory>{ 0x26156C9C,0x95EF,0x5E55,{ 0x83,0x42,0x77,0x3F,0xC4,0x3B,0xAA,0xC3 } }; // 26156C9C-95EF-5E55-8342-773FC43BAAC3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutStatics>{ 0x6959E683,0x16F6,0x5208,{ 0x84,0xE0,0xB0,0xBE,0x92,0xD9,0xF6,0xDD } }; // 6959E683-16F6-5208-84E0-B0BE92D9F6DD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSubItem>{ 0x6B0688C1,0x47B0,0x53B5,{ 0xB6,0xF9,0x5E,0xC5,0xD6,0x62,0x3B,0x84 } }; // 6B0688C1-47B0-53B5-B6F9-5EC5D6623B84
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSubItemStatics>{ 0xF59A8DDF,0x804B,0x5F56,{ 0xBC,0x42,0xF2,0x7F,0x98,0x7D,0xB2,0x91 } }; // F59A8DDF-804B-5F56-BC42-F27F987DB291
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigate>{ 0xDD06F030,0x5D47,0x533C,{ 0x95,0xCF,0xDE,0x25,0x6A,0x0F,0x37,0x3A } }; // DD06F030-5D47-533C-95CF-DE256A0F373A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationView>{ 0xE77A4B36,0x3DD1,0x53D9,{ 0x9F,0x97,0x65,0xDC,0xCA,0xA7,0x4A,0x5C } }; // E77A4B36-3DD1-53D9-9F97-65DCCAA74A5C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationView2>{ 0x05B428CF,0x014C,0x56DD,{ 0x89,0x6A,0xA3,0xE7,0x08,0x9D,0x73,0xB5 } }; // 05B428CF-014C-56DD-896A-A3E7089D73B5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>{ 0xAE752207,0xBD1B,0x5AFA,{ 0xA8,0x72,0xE9,0xBB,0xAE,0xEA,0x0E,0xDE } }; // AE752207-BD1B-5AFA-A872-E9BBAEEA0EDE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>{ 0x58DCF1EA,0x9E56,0x522C,{ 0xB3,0xF8,0x34,0xBD,0x55,0xEC,0xAC,0xA4 } }; // 58DCF1EA-9E56-522C-B3F8-34BD55ECACA4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewFactory>{ 0xFFEA1ADA,0x9232,0x5507,{ 0xA3,0x20,0xED,0x2F,0xAD,0xBE,0x61,0x27 } }; // FFEA1ADA-9232-5507-A320-ED2FADBE6127
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem>{ 0x3AB3D503,0xA37C,0x5836,{ 0x8A,0xDB,0x28,0x82,0x06,0x2E,0x73,0xA1 } }; // 3AB3D503-A37C-5836-8ADB-2882062E73A1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem2>{ 0x2D5BD889,0x9DAC,0x5675,{ 0xB2,0x54,0x68,0x22,0x6F,0x07,0x7A,0x61 } }; // 2D5BD889-9DAC-5675-B254-68226F077A61
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem3>{ 0xC6AA3120,0xD888,0x5C32,{ 0x8B,0xB7,0x49,0x0E,0xC9,0x1B,0x1A,0xEC } }; // C6AA3120-D888-5C32-8BB7-490EC91B1AEC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase>{ 0x33586494,0xAF48,0x513F,{ 0xBE,0x4D,0xF6,0x45,0xE8,0xC8,0x90,0x05 } }; // 33586494-AF48-513F-BE4D-F645E8C89005
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase2>{ 0xD94EE683,0xD437,0x5523,{ 0x9C,0x5C,0x11,0xD4,0x80,0x4E,0x47,0x1E } }; // D94EE683-D437-5523-9C5C-11D4804E471E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory>{ 0x31B9D7B1,0x7C38,0x5916,{ 0x99,0xC6,0xC7,0x1F,0x6B,0x01,0x2B,0x1B } }; // 31B9D7B1-7C38-5916-99C6-C71F6B012B1B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBaseStatics>{ 0x71A0C438,0xF0C2,0x5093,{ 0x89,0x06,0xC1,0xC3,0xC0,0x2D,0xE7,0x91 } }; // 71A0C438-F0C2-5093-8906-C1C3C02DE791
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemCollapsedEventArgs>{ 0xB546F6A1,0xC66F,0x5DED,{ 0xB5,0xD7,0xBE,0xD0,0xA2,0x61,0x97,0xE3 } }; // B546F6A1-C66F-5DED-B5D7-BED0A26197E3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemExpandingEventArgs>{ 0x6F0941BE,0xE991,0x52F8,{ 0x83,0x15,0xF0,0x83,0x89,0x49,0x79,0x76 } }; // 6F0941BE-E991-52F8-8315-F08389497976
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemFactory>{ 0xDE60A001,0x9385,0x5535,{ 0x80,0xE1,0x2B,0x68,0xF4,0xBF,0xDE,0x26 } }; // DE60A001-9385-5535-80E1-2B68F4BFDE26
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemHeader>{ 0x432BC062,0x45BC,0x57EF,{ 0xA2,0xD3,0x11,0x85,0x1A,0x56,0xA8,0x82 } }; // 432BC062-45BC-57EF-A2D3-11851A56A882
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory>{ 0x6A5447CD,0x2918,0x5FE3,{ 0x89,0x9B,0x93,0xD6,0x96,0x12,0x85,0xE6 } }; // 6A5447CD-2918-5FE3-899B-93D6961285E6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>{ 0x074CEBAA,0x5D05,0x547B,{ 0x8C,0xD6,0xD1,0x9A,0xC2,0xD9,0xBB,0x3B } }; // 074CEBAA-5D05-547B-8CD6-D19AC2D9BB3B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs2>{ 0xE1CBB99F,0x19EB,0x5C7B,{ 0xB9,0x82,0x85,0x4B,0xB0,0x8D,0x5E,0xB7 } }; // E1CBB99F-19EB-5C7B-B982-854BB08D5EB7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator>{ 0xE3C35630,0x1D5F,0x5689,{ 0xA0,0xCB,0x87,0x94,0x48,0x5C,0xAA,0xCF } }; // E3C35630-1D5F-5689-A0CB-8794485CAACF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>{ 0x181266A1,0xD4F8,0x5AF7,{ 0x81,0x0B,0xAE,0xE8,0xA1,0xD4,0x52,0xED } }; // 181266A1-D4F8-5AF7-810B-AEE8A1D452ED
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemStatics>{ 0x7B6198E5,0x0714,0x531C,{ 0xA0,0x56,0x21,0xB3,0xCA,0x40,0xEC,0x1A } }; // 7B6198E5-0714-531C-A056-21B3CA40EC1A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemStatics2>{ 0xD49D016F,0xABD0,0x51F3,{ 0xAC,0xF0,0x11,0x8E,0xCC,0xEE,0xA7,0x60 } }; // D49D016F-ABD0-51F3-ACF0-118ECCEEA760
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemStatics3>{ 0x957BEB66,0xD33A,0x53AA,{ 0xA5,0x18,0x7D,0x42,0x6B,0xB9,0xB1,0x77 } }; // 957BEB66-D33A-53AA-A518-7D426BB9B177
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>{ 0xE8643304,0x6DB4,0x5AF5,{ 0xBA,0xC2,0x62,0x73,0x3C,0xA0,0x37,0xDA } }; // E8643304-6DB4-5AF5-BAC2-62733CA037DA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>{ 0x14A064A5,0xC79D,0x5F63,{ 0xAC,0x6E,0x1C,0x31,0x3F,0xE6,0x35,0x66 } }; // 14A064A5-C79D-5F63-AC6E-1C313FE63566
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs2>{ 0xE9B5191F,0x1AD1,0x5366,{ 0xBC,0x1A,0x90,0xB9,0x60,0x76,0xD4,0x9E } }; // E9B5191F-1AD1-5366-BC1A-90B96076D49E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewStatics>{ 0xDCD04CAF,0x1904,0x564B,{ 0xB0,0xDE,0xBA,0xBA,0xFF,0x99,0x62,0xF5 } }; // DCD04CAF-1904-564B-B0DE-BABAFF9962F5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewStatics2>{ 0x79588150,0x4A1B,0x5E7C,{ 0x9F,0x8A,0xEB,0xC8,0x14,0xCE,0x77,0x3D } }; // 79588150-4A1B-5E7C-9F8A-EBC814CE773D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings>{ 0xBBD25FA5,0x9C08,0x5F10,{ 0xBE,0x20,0xCB,0x4C,0x18,0x99,0xBD,0x9D } }; // BBD25FA5-9C08-5F10-BE20-CB4C1899BD9D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings2>{ 0x56BEC72F,0x1DE1,0x5060,{ 0xA4,0x4C,0x18,0x78,0x85,0xDF,0x29,0x73 } }; // 56BEC72F-1DE1-5060-A44C-187885DF2973
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>{ 0x34FF6C94,0x6465,0x5F3E,{ 0xB0,0xA5,0x4F,0x1E,0xEA,0x48,0xE7,0x43 } }; // 34FF6C94-6465-5F3E-B0A5-4F1EEA48E743
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>{ 0xBE3A88D6,0xD19B,0x5543,{ 0x8B,0x72,0xD4,0x2B,0x45,0x9E,0x72,0xED } }; // BE3A88D6-D19B-5543-8B72-D42B459E72ED
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics2>{ 0xC0C06BE3,0x9203,0x5EEA,{ 0x91,0xDC,0x5D,0x81,0x2A,0x97,0x02,0xA6 } }; // C0C06BE3-9203-5EEA-91DC-5D812A9702A6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayout>{ 0x0C24DEFD,0xF68F,0x51D9,{ 0x99,0x8E,0x4C,0xBA,0xD4,0x8B,0xE0,0x12 } }; // 0C24DEFD-F68F-51D9-998E-4CBAD48BE012
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext>{ 0x1E378538,0xF33C,0x5410,{ 0x82,0xCC,0xCA,0x6F,0x06,0xD5,0xE2,0x59 } }; // 1E378538-F33C-5410-82CC-CA6F06D5E259
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextFactory>{ 0xDABAC020,0x189C,0x5BBF,{ 0xA4,0xDC,0x97,0xDA,0x11,0x99,0xF5,0x77 } }; // DABAC020-189C-5BBF-A4DC-97DA1199F577
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides>{ 0x995CF544,0x5D3F,0x5F44,{ 0xB5,0x37,0xFD,0x13,0x65,0x0C,0x74,0x5C } }; // 995CF544-5D3F-5F44-B537-FD13650C745C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutFactory>{ 0xA16D2D12,0xDBAC,0x5CE0,{ 0xAE,0xF5,0x09,0x17,0x1A,0x4D,0x35,0x71 } }; // A16D2D12-DBAC-5CE0-AEF5-09171A4D3571
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides>{ 0x3C28B831,0x35C1,0x5182,{ 0xA8,0x43,0xA4,0x3F,0x33,0x9B,0x66,0x87 } }; // 3C28B831-35C1-5182-A843-A43F339B6687
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INumberBox>{ 0xC18EB0E9,0x29FB,0x525D,{ 0xAB,0xBC,0xD6,0xB2,0x11,0x0F,0x54,0x2E } }; // C18EB0E9-29FB-525D-ABBC-D6B2110F542E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INumberBoxFactory>{ 0x6B81F3CB,0x45A4,0x5D19,{ 0x9B,0xBB,0xA9,0xFE,0x46,0x56,0xAC,0x4D } }; // 6B81F3CB-45A4-5D19-9BBB-A9FE4656AC4D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INumberBoxStatics>{ 0x251EC05C,0xA77C,0x5540,{ 0xBE,0x39,0x60,0x53,0xF7,0x97,0xCD,0xE7 } }; // 251EC05C-A77C-5540-BE39-6053F797CDE7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::INumberBoxValueChangedEventArgs>{ 0xC66CF16E,0x7C8A,0x532E,{ 0x9D,0x23,0x05,0x8C,0x1C,0x98,0xDD,0x50 } }; // C66CF16E-7C8A-532E-9D23-058C1C98DD50
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPage>{ 0xEB42988E,0x6CB5,0x5DD6,{ 0x9E,0x59,0x4C,0x04,0xE5,0xCA,0xEC,0x6D } }; // EB42988E-6CB5-5DD6-9E59-4C04E5CAEC6D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPageFactory>{ 0xFF4357D5,0xDDCD,0x5129,{ 0x9D,0x0F,0xD8,0xAE,0xD2,0xAD,0xC1,0xA9 } }; // FF4357D5-DDCD-5129-9D0F-D8AED2ADC1A9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPageOverrides>{ 0x9B8445F7,0xD938,0x5626,{ 0x85,0x0A,0x86,0xE9,0x1C,0xA8,0x9E,0x98 } }; // 9B8445F7-D938-5626-850A-86E91CA89E98
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPageStatics>{ 0xB6241486,0xA374,0x5D09,{ 0xA0,0x1F,0x9A,0xBE,0x31,0x1C,0x08,0x84 } }; // B6241486-A374-5D09-A01F-9ABE311C0884
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPanel>{ 0x27A1B418,0x56F3,0x525E,{ 0xB8,0x83,0xCE,0xFE,0xD9,0x05,0xEE,0xD3 } }; // 27A1B418-56F3-525E-B883-CEFED905EED3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPanelFactory>{ 0xF5E7E21C,0x4C97,0x5D20,{ 0xBE,0xE6,0x3E,0x4F,0xC6,0xAB,0x14,0xE9 } }; // F5E7E21C-4C97-5D20-BEE6-3E4FC6AB14E9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPanelStatics>{ 0x76A9CAA7,0xA5D4,0x5061,{ 0xA3,0x25,0x17,0xC7,0x6F,0x66,0xDE,0x51 } }; // 76A9CAA7-A5D4-5061-A325-17C76F66DE51
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IParallaxView>{ 0xE6F4A919,0x1116,0x53AE,{ 0x96,0xC6,0xEF,0xDD,0xC5,0x97,0x86,0xF3 } }; // E6F4A919-1116-53AE-96C6-EFDDC59786F3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IParallaxViewFactory>{ 0x61DC973D,0xC595,0x5261,{ 0xA9,0xB7,0x35,0xF4,0x10,0x42,0xEB,0x00 } }; // 61DC973D-C595-5261-A9B7-35F41042EB00
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IParallaxViewStatics>{ 0x69211861,0x40BA,0x5083,{ 0x88,0x35,0x41,0x6F,0x40,0xD4,0xC5,0xEB } }; // 69211861-40BA-5083-8835-416F40D4C5EB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPasswordBox>{ 0x6D3CCFF7,0xAAEE,0x5ADC,{ 0x82,0x98,0x33,0x30,0x0F,0xA1,0x19,0xDA } }; // 6D3CCFF7-AAEE-5ADC-8298-33300FA119DA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs>{ 0x9A2F3B79,0xC00C,0x5D27,{ 0xBB,0x67,0x92,0xCA,0xB3,0xDB,0x04,0x77 } }; // 9A2F3B79-C00C-5D27-BB67-92CAB3DB0477
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPasswordBoxStatics>{ 0x90E6559C,0x5F74,0x5CD1,{ 0x87,0xB6,0xC0,0x51,0x40,0x85,0xAB,0x42 } }; // 90E6559C-5F74-5CD1-87B6-C0514085AB42
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPathIcon>{ 0x5C8229DB,0x51CD,0x5A3B,{ 0x88,0xEF,0x1D,0x9A,0x8A,0xC9,0x76,0x83 } }; // 5C8229DB-51CD-5A3B-88EF-1D9A8AC97683
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPathIconFactory>{ 0x8E88F087,0xF2CD,0x581C,{ 0x91,0xCA,0xA9,0x93,0x35,0xCA,0x95,0x99 } }; // 8E88F087-F2CD-581C-91CA-A99335CA9599
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPathIconSource>{ 0x7ACDC6A5,0xF9AA,0x5D7E,{ 0x86,0x45,0x3C,0x48,0x98,0x94,0x33,0xA0 } }; // 7ACDC6A5-F9AA-5D7E-8645-3C48989433A0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPathIconSourceFactory>{ 0x9FEFE31E,0x5AB6,0x5394,{ 0xA6,0xEF,0x67,0x2F,0x17,0x4D,0x33,0x3B } }; // 9FEFE31E-5AB6-5394-A6EF-672F174D333B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPathIconSourceStatics>{ 0x95DF636B,0x0DC3,0x5C94,{ 0xBA,0x43,0x89,0x80,0xFD,0x03,0x08,0x40 } }; // 95DF636B-0DC3-5C94-BA43-8980FD030840
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPathIconStatics>{ 0x72BBA29A,0x0595,0x5F6D,{ 0xA8,0xDF,0x2A,0x05,0x80,0xA2,0xCD,0x78 } }; // 72BBA29A-0595-5F6D-A8DF-2A0580A2CD78
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPersonPicture>{ 0x30EC982C,0x0EFA,0x5538,{ 0xA3,0x56,0xE9,0xEB,0xD5,0xAA,0x36,0x3C } }; // 30EC982C-0EFA-5538-A356-E9EBD5AA363C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureFactory>{ 0x7EC0794C,0xF2CC,0x5282,{ 0xA8,0x9D,0xCD,0x3B,0xB7,0x65,0xB7,0x1A } }; // 7EC0794C-F2CC-5282-A89D-CD3BB765B71A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureStatics>{ 0x3C769423,0x9B05,0x56C1,{ 0xA1,0x69,0x09,0x84,0x93,0xC2,0x1F,0x91 } }; // 3C769423-9B05-56C1-A169-098493C21F91
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings>{ 0xE16DF12F,0xC3C0,0x5F26,{ 0xA3,0x81,0x08,0xF2,0xDF,0x05,0x2F,0x29 } }; // E16DF12F-C3C0-5F26-A381-08F2DF052F29
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPickerConfirmedEventArgs>{ 0x002AC84D,0x4CB1,0x5A84,{ 0x94,0x60,0x7B,0x9F,0xB7,0x16,0x50,0x0B } }; // 002AC84D-4CB1-5A84-9460-7B9FB716500B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPickerFlyout>{ 0xF73F69A0,0x92D3,0x5144,{ 0x84,0x59,0xA7,0xA0,0x5A,0x53,0xBC,0xD2 } }; // F73F69A0-92D3-5144-8459-A7A05A53BCD2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPickerFlyoutPresenter>{ 0x2181B3F9,0x9F94,0x5EBE,{ 0x9B,0x56,0xAA,0x10,0x6B,0x7E,0x02,0xCD } }; // 2181B3F9-9F94-5EBE-9B56-AA106B7E02CD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPickerFlyoutStatics>{ 0xA8D33E85,0xAEAA,0x5079,{ 0x98,0x3B,0xCE,0x45,0xE4,0x68,0x67,0x2A } }; // A8D33E85-AEAA-5079-983B-CE45E468672A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPipsPager>{ 0xDE7FC5D5,0x9446,0x5693,{ 0xBB,0xF3,0xFD,0x7F,0x94,0x3A,0x56,0x7C } }; // DE7FC5D5-9446-5693-BBF3-FD7F943A567C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerFactory>{ 0x020722CD,0x813A,0x5165,{ 0xA8,0x99,0x3D,0xF9,0xAD,0xCD,0x80,0x5E } }; // 020722CD-813A-5165-A899-3DF9ADCD805E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerSelectedIndexChangedEventArgs>{ 0x6C2CE4FC,0xBF52,0x5CA6,{ 0x9D,0xA4,0xB0,0xBD,0x5B,0x92,0x8D,0x97 } }; // 6C2CE4FC-BF52-5CA6-9DA4-B0BD5B928D97
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerStatics>{ 0x37714CD8,0xFBA6,0x5D98,{ 0xA3,0x95,0x0A,0x7A,0x3E,0xA6,0x48,0x67 } }; // 37714CD8-FBA6-5D98-A395-0A7A3EA64867
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerTemplateSettings>{ 0x9D8C1252,0x56C5,0x57AF,{ 0x9A,0x3A,0x08,0xE9,0xB9,0x47,0xE5,0xFA } }; // 9D8C1252-56C5-57AF-9A3A-08E9B947E5FA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPivot>{ 0x1C6438E5,0xECAC,0x5FB6,{ 0x8E,0x8E,0x00,0xDE,0x7E,0x92,0x23,0x03 } }; // 1C6438E5-ECAC-5FB6-8E8E-00DE7E922303
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPivotFactory>{ 0xDA9D033C,0x4782,0x5A69,{ 0x90,0xAF,0x07,0x6C,0xCD,0xF0,0x71,0xAE } }; // DA9D033C-4782-5A69-90AF-076CCDF071AE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPivotItem>{ 0x8108C195,0x63F5,0x5DF9,{ 0xAB,0xCF,0x41,0x8F,0xA2,0xDB,0xFB,0xEC } }; // 8108C195-63F5-5DF9-ABCF-418FA2DBFBEC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPivotItemEventArgs>{ 0xE42C62C2,0x0CB9,0x5E5B,{ 0x81,0x48,0x8D,0x80,0xA3,0x83,0x8D,0xE9 } }; // E42C62C2-0CB9-5E5B-8148-8D80A3838DE9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPivotItemFactory>{ 0x9149A2AB,0x606C,0x55A9,{ 0x87,0x86,0x80,0x1D,0x55,0xCA,0x8E,0xD6 } }; // 9149A2AB-606C-55A9-8786-801D55CA8ED6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPivotItemStatics>{ 0xE2EBE630,0x6629,0x5B7B,{ 0x86,0x66,0xFD,0xEB,0x9B,0x98,0xDB,0x2C } }; // E2EBE630-6629-5B7B-8666-FDEB9B98DB2C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IPivotStatics>{ 0x619CC35F,0xB97B,0x5E32,{ 0x88,0x5E,0x70,0x94,0x9E,0xD9,0x7E,0xEB } }; // 619CC35F-B97B-5E32-885E-70949ED97EEB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IProgressBar>{ 0x87555C8C,0x0AAF,0x52C1,{ 0x83,0x90,0x0D,0xB1,0x7F,0x40,0x43,0x8E } }; // 87555C8C-0AAF-52C1-8390-0DB17F40438E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IProgressBarFactory>{ 0x189826AD,0xF6F2,0x533E,{ 0x9D,0xDB,0xB6,0x60,0x0E,0x88,0x67,0x5B } }; // 189826AD-F6F2-533E-9DDB-B6600E88675B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IProgressBarStatics>{ 0x61BBB127,0xE4C4,0x5E22,{ 0xA8,0xDC,0xCF,0xCF,0x95,0x72,0x36,0xD0 } }; // 61BBB127-E4C4-5E22-A8DC-CFCF957236D0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IProgressBarTemplateSettings>{ 0xFBEA95C9,0x9EF9,0x5E79,{ 0xAF,0x54,0x44,0xDE,0xD2,0x80,0x35,0xD5 } }; // FBEA95C9-9EF9-5E79-AF54-44DED28035D5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IProgressRing>{ 0x2670D03F,0xE28C,0x5652,{ 0xBE,0xE2,0xB5,0x21,0x2E,0xBD,0xF7,0xFF } }; // 2670D03F-E28C-5652-BEE2-B5212EBDF7FF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IProgressRingFactory>{ 0x092FA98C,0x62A7,0x5DBC,{ 0x9A,0x85,0x3E,0x55,0x6B,0xA8,0x1F,0x79 } }; // 092FA98C-62A7-5DBC-9A85-3E556BA81F79
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IProgressRingStatics>{ 0x4BA1166A,0xCEC2,0x50E2,{ 0xB2,0x6B,0x66,0xB6,0x9D,0xC2,0xE3,0x71 } }; // 4BA1166A-CEC2-50E2-B26B-66B69DC2E371
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IProgressRingTemplateSettings>{ 0x34020D86,0xE1C1,0x5D7C,{ 0xB2,0x23,0xAC,0xD7,0xF8,0x62,0xFF,0xD5 } }; // 34020D86-E1C1-5D7C-B223-ACD7F862FFD5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRadioButton>{ 0x38F30CEE,0xE75A,0x5BA1,{ 0xAE,0x64,0x44,0x74,0xA3,0xAB,0xEA,0xC7 } }; // 38F30CEE-E75A-5BA1-AE64-4474A3ABEAC7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonFactory>{ 0x5772C79A,0xB3EB,0x5719,{ 0x80,0x05,0x2A,0x51,0x34,0x29,0x49,0x5A } }; // 5772C79A-B3EB-5719-8005-2A513429495A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonStatics>{ 0xA8BCE4D4,0x68FE,0x53D9,{ 0xA3,0x17,0x74,0xAB,0x40,0x9C,0xD4,0xEE } }; // A8BCE4D4-68FE-53D9-A317-74AB409CD4EE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRadioButtons>{ 0x966DAF80,0xEE85,0x5D90,{ 0xB6,0xB3,0x80,0xBE,0xC9,0x13,0x46,0x73 } }; // 966DAF80-EE85-5D90-B6B3-80BEC9134673
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonsFactory>{ 0x2CF95EFB,0xA7A2,0x5D85,{ 0x8E,0xAD,0xEA,0x22,0x2B,0xAA,0x3C,0x55 } }; // 2CF95EFB-A7A2-5D85-8EAD-EA222BAA3C55
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonsStatics>{ 0xDE0BF0CA,0x9AE8,0x5B8A,{ 0x97,0x38,0x7D,0x98,0xB3,0x44,0xC0,0x39 } }; // DE0BF0CA-9AE8-5B8A-9738-7D98B344C039
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem>{ 0x9D6F45F5,0x5532,0x5669,{ 0x8F,0x02,0x05,0x73,0x59,0x53,0x02,0x6A } }; // 9D6F45F5-5532-5669-8F02-05735953026A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemFactory>{ 0x113822D2,0x35A3,0x5B0D,{ 0x9D,0x0D,0xC3,0x83,0x0E,0xC1,0x97,0x3B } }; // 113822D2-35A3-5B0D-9D0D-C3830EC1973B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics>{ 0x47117E20,0xE03D,0x53F0,{ 0x93,0x8E,0xEC,0xCB,0xFF,0xFB,0x54,0x21 } }; // 47117E20-E03D-53F0-938E-ECCBFFFB5421
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics2>{ 0x2040FFBF,0x947F,0x58ED,{ 0x96,0x9F,0x5D,0x8D,0x89,0x67,0xB9,0xA0 } }; // 2040FFBF-947F-58ED-969F-5D8D8967B9A0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRatingControl>{ 0x5488193B,0xEA4B,0x52C6,{ 0x85,0x44,0xC0,0x63,0x21,0x9B,0xCD,0x90 } }; // 5488193B-EA4B-52C6-8544-C063219BCD90
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRatingControlFactory>{ 0xA53B9B73,0xBFF9,0x548D,{ 0xA2,0x94,0xAC,0x63,0xD8,0x19,0xF7,0x8A } }; // A53B9B73-BFF9-548D-A294-AC63D819F78A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRatingControlStatics>{ 0xDAC61D65,0xE8F9,0x5E4D,{ 0x81,0x3D,0x05,0xC9,0x80,0xB2,0xF1,0x18 } }; // DAC61D65-E8F9-5E4D-813D-05C980B2F118
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfo>{ 0x995A16DC,0x3A0F,0x5727,{ 0x9F,0x38,0x52,0xCF,0xC8,0x14,0x36,0x54 } }; // 995A16DC-3A0F-5727-9F38-52CFC8143654
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory>{ 0x109C6541,0x706E,0x5FD7,{ 0xBA,0xAE,0x02,0x0B,0x24,0x89,0x9F,0x61 } }; // 109C6541-706E-5FD7-BAAE-020B24899F61
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>{ 0xF600F780,0xA5ED,0x537F,{ 0x90,0xC2,0xEA,0xEE,0x8A,0x61,0xF8,0xA5 } }; // F600F780-A5ED-537F-90C2-EAEE8A61F8A5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfo>{ 0xFCDAEBD2,0x6FB5,0x523F,{ 0x95,0x9E,0x35,0x16,0xBC,0x0B,0x72,0xB7 } }; // FCDAEBD2-6FB5-523F-959E-3516BC0B72B7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory>{ 0x4ACC8CAC,0xBCA8,0x5380,{ 0x95,0xE4,0x34,0x5C,0x1B,0xE2,0x56,0xB2 } }; // 4ACC8CAC-BCA8-5380-95E4-345C1BE256B2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>{ 0xF582921D,0x0431,0x5E52,{ 0x96,0xD9,0x28,0x4D,0x82,0xDC,0x7C,0xBA } }; // F582921D-0431-5E52-96D9-284D82DC7CBA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfo>{ 0x801E924E,0x3613,0x55DD,{ 0x83,0x21,0x9E,0xBA,0xBB,0xED,0x0B,0x8A } }; // 801E924E-3613-55DD-8321-9EBABBED0B8A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory>{ 0x61F13480,0xCD0C,0x556A,{ 0xB5,0x32,0xA0,0xCF,0x53,0xE3,0xCD,0xA0 } }; // 61F13480-CD0C-556A-B532-A0CF53E3CDA0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainer>{ 0x1C9778E8,0xA427,0x5F86,{ 0x9D,0x5E,0x02,0xDB,0x9B,0x2C,0x40,0x93 } }; // 1C9778E8-A427-5F86-9D5E-02DB9B2C4093
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainerFactory>{ 0x5F228FA1,0x2EA2,0x52B5,{ 0xB7,0x8A,0x0C,0x13,0x3F,0x86,0xF0,0x20 } }; // 5F228FA1-2EA2-52B5-B78A-0C133F86F020
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainerStatics>{ 0x875EF8A0,0x74C2,0x5201,{ 0xB7,0x08,0x50,0xA4,0x8E,0x7E,0x76,0x01 } }; // 875EF8A0-74C2-5201-B708-50A48E7E7601
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>{ 0x790B70E0,0xF199,0x552B,{ 0xB1,0x26,0x6C,0xB4,0x5C,0x2D,0xE8,0xF9 } }; // 790B70E0-F199-552B-B126-6CB45C2DE8F9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs>{ 0xED97A956,0x6019,0x5329,{ 0x93,0x12,0xF8,0x85,0xB5,0xC7,0x74,0xCD } }; // ED97A956-6019-5329-9312-F885B5C774CD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs>{ 0x7BE897CE,0x17C4,0x5FDF,{ 0xB4,0x41,0xC6,0xEF,0x33,0x01,0xE0,0xF6 } }; // 7BE897CE-17C4-5FDF-B441-C6EF3301E0F6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizer>{ 0xD6C55DB6,0xD82D,0x5B68,{ 0xBA,0x1D,0x28,0x59,0x3F,0xB0,0xAB,0x12 } }; // D6C55DB6-D82D-5B68-BA1D-28593FB0AB12
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory>{ 0x9D6F2BF2,0x6628,0x582A,{ 0x89,0x2B,0x68,0xC2,0x77,0x0C,0x17,0x3C } }; // 9D6F2BF2-6628-582A-892B-68C2770C173C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics>{ 0x3540FE79,0x590D,0x546F,{ 0xBF,0x2A,0xA3,0x0D,0x46,0xE8,0xCD,0xFA } }; // 3540FE79-590D-546F-BF2A-A30D46E8CDFA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRelativePanel>{ 0xC432FCC4,0x88F2,0x59D8,{ 0x9D,0x0E,0xA2,0x37,0xBE,0xAE,0xB0,0x7F } }; // C432FCC4-88F2-59D8-9D0E-A237BEAEB07F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRelativePanelFactory>{ 0xC85F1443,0xD973,0x50FD,{ 0x94,0x97,0xB8,0x67,0xF4,0x92,0x46,0x8F } }; // C85F1443-D973-50FD-9497-B867F492468F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRelativePanelStatics>{ 0xBDD929A2,0x76CC,0x59C4,{ 0x82,0xC1,0xF1,0x4B,0x5D,0xA4,0x22,0x1A } }; // BDD929A2-76CC-59C4-82C1-F14B5DA4221A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter>{ 0x365FDBAC,0x3989,0x559C,{ 0xBE,0xA9,0x76,0x45,0x61,0x88,0x1C,0x96 } }; // 365FDBAC-3989-559C-BEA9-764561881C96
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenterFactory>{ 0xE730C53B,0x8F94,0x55B3,{ 0x8B,0xC1,0x98,0xF7,0x7C,0x57,0x66,0xBD } }; // E730C53B-8F94-55B3-8BC1-98F77C5766BD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox>{ 0x699163DB,0x723D,0x5514,{ 0xA8,0xC9,0x2C,0x64,0xD9,0x9E,0x1E,0xA6 } }; // 699163DB-723D-5514-A8C9-2C64D99E1EA6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxFactory>{ 0x7C993C60,0xF5B6,0x589F,{ 0xBB,0xA8,0xB6,0x8B,0x97,0x13,0xE4,0xAE } }; // 7C993C60-F5B6-589F-BBA8-B68B9713E4AE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxSelectionChangingEventArgs>{ 0x5DBADBE1,0x0515,0x5045,{ 0x9A,0x6F,0x68,0x59,0x23,0x73,0x01,0xAC } }; // 5DBADBE1-0515-5045-9A6F-6859237301AC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxStatics>{ 0xB3F59239,0xEFD1,0x5129,{ 0xBF,0x80,0x28,0x41,0xA3,0x31,0xB2,0x4A } }; // B3F59239-EFD1-5129-BF80-2841A331B24A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs>{ 0xE887B29A,0x1551,0x5868,{ 0xA5,0xDC,0x3F,0xCF,0xE7,0x45,0x2E,0x6B } }; // E887B29A-1551-5868-A5DC-3FCFE7452E6B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlock>{ 0xD766E4DB,0xA684,0x50B7,{ 0xA2,0x02,0xC8,0xE9,0x1F,0xA2,0x6F,0xF3 } }; // D766E4DB-A684-50B7-A202-C8E91FA26FF3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow>{ 0x015C2522,0x0646,0x5C71,{ 0x9F,0x54,0x3C,0x38,0xC7,0x23,0x5A,0x62 } }; // 015C2522-0646-5C71-9F54-3C38C7235A62
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflowStatics>{ 0x6DB6EE42,0xA333,0x5E5B,{ 0x9C,0xE8,0xF5,0xE2,0xF4,0x6F,0x4D,0x66 } }; // 6DB6EE42-A333-5E5B-9CE8-F5E2F46F4D66
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockStatics>{ 0x65DCA245,0xB4FC,0x5718,{ 0xB6,0x28,0xA4,0x95,0x3F,0x61,0xD6,0xA3 } }; // 65DCA245-B4FC-5718-B628-A4953F61D6A3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRowDefinition>{ 0xFE870F2F,0x89EF,0x5DAC,{ 0x9F,0x33,0x96,0x8D,0x0D,0xC5,0x77,0xC3 } }; // FE870F2F-89EF-5DAC-9F33-968D0DC577C3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IRowDefinitionStatics>{ 0x7317C7C5,0xFD6F,0x58D9,{ 0x9B,0x53,0x49,0x78,0xDB,0xAC,0xDE,0x23 } }; // 7317C7C5-FD6F-58D9-9B53-4978DBACDE23
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollAnchorProvider>{ 0x885DF41F,0xF240,0x5B7B,{ 0xA7,0x03,0xBF,0xAF,0x39,0xC6,0xA2,0xCD } }; // 885DF41F-F240-5B7B-A703-BFAF39C6A2CD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollContentPresenter>{ 0x9A896EB9,0x3189,0x5C53,{ 0x91,0x2F,0xC4,0x70,0x89,0x63,0x31,0xB8 } }; // 9A896EB9-3189-5C53-912F-C470896331B8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollContentPresenterStatics>{ 0x4E93F295,0xEF2E,0x517B,{ 0xBB,0xF9,0xDE,0xDB,0x85,0x48,0x49,0xC8 } }; // 4E93F295-EF2E-517B-BBF9-DEDB854849C8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollView>{ 0x8C98C86D,0x378A,0x5102,{ 0xA1,0xE3,0x33,0x52,0x28,0x0F,0xA0,0x10 } }; // 8C98C86D-378A-5102-A1E3-3352280FA010
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollViewFactory>{ 0xF3547344,0x22E4,0x5E6C,{ 0x9E,0xCE,0x66,0x50,0x4E,0xF7,0x33,0xED } }; // F3547344-22E4-5E6C-9ECE-66504EF733ED
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollViewStatics>{ 0xAC966C50,0x31F1,0x5485,{ 0x8E,0x08,0xEE,0x7A,0x7E,0x9A,0x6F,0xD0 } }; // AC966C50-31F1-5485-8E08-EE7A7E9A6FD0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollViewer>{ 0x1DC28C2E,0x996C,0x5394,{ 0x89,0xC3,0x4D,0xC6,0x56,0xB4,0xAD,0x46 } }; // 1DC28C2E-996C-5394-89C3-4DC656B4AD46
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerStatics>{ 0xD971FD86,0x0A96,0x50C4,{ 0xA6,0xE1,0x99,0x75,0xFA,0xA2,0xA1,0x42 } }; // D971FD86-0A96-50C4-A6E1-9975FAA2A142
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerView>{ 0x1E9F68EE,0x6CE5,0x5CBF,{ 0xBB,0xFE,0xB8,0xCD,0x28,0x4B,0x9C,0x23 } }; // 1E9F68EE-6CE5-5CBF-BBFE-B8CD284B9C23
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs>{ 0xBF7BB85B,0x1D46,0x5004,{ 0xA3,0x70,0xEC,0xB6,0x26,0x63,0x05,0x88 } }; // BF7BB85B-1D46-5004-A370-ECB626630588
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>{ 0xAEE37D7C,0x4696,0x55F1,{ 0x96,0xCA,0x65,0x68,0x32,0xFC,0x0F,0xD2 } }; // AEE37D7C-4696-55F1-96CA-656832FC0FD2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingAnchorRequestedEventArgs>{ 0x6A46CB4B,0xAB26,0x55B2,{ 0xAA,0x76,0x9B,0x33,0x7A,0x4F,0x8E,0x8E } }; // 6A46CB4B-AB26-55B2-AA76-9B337A4F8E8E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingBringingIntoViewEventArgs>{ 0x09760D99,0xD60C,0x5C76,{ 0x80,0x33,0x12,0x7B,0x20,0x85,0x35,0x8C } }; // 09760D99-D60C-5C76-8033-127B2085358C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollAnimationStartingEventArgs>{ 0x7ACB0423,0x6FC7,0x516B,{ 0xAB,0x67,0x03,0xA4,0xA4,0x28,0x5A,0x90 } }; // 7ACB0423-6FC7-516B-AB67-03A4A4285A90
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollCompletedEventArgs>{ 0x9BDEAE9C,0x972C,0x54AE,{ 0x9C,0x62,0xFC,0x1A,0x03,0xFF,0x3F,0xA8 } }; // 9BDEAE9C-972C-54AE-9C62-FC1A03FF3FA8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollOptions>{ 0x30B2E77B,0x2553,0x5B09,{ 0xB3,0x08,0xB4,0xB0,0x6F,0xC8,0xF9,0xAF } }; // 30B2E77B-2553-5B09-B308-B4B06FC8F9AF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollOptionsFactory>{ 0x31EB58FE,0x0F6A,0x51EC,{ 0x90,0xDB,0x5C,0xCA,0xA0,0xA2,0x88,0xA6 } }; // 31EB58FE-0F6A-51EC-90DB-5CCAA0A288A6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomAnimationStartingEventArgs>{ 0x59BFB77B,0x47C9,0x5691,{ 0xBD,0xCD,0x53,0x6F,0xBE,0x8E,0xB8,0xC1 } }; // 59BFB77B-47C9-5691-BDCD-536FBE8EB8C1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomCompletedEventArgs>{ 0xC821207E,0xAB2A,0x5F6C,{ 0x90,0x74,0x41,0x18,0x40,0xA6,0x8D,0x55 } }; // C821207E-AB2A-5F6C-9074-411840A68D55
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomOptions>{ 0xE4ACE0B2,0x9B0C,0x5EDA,{ 0x88,0xA2,0xC3,0x1B,0x1B,0x84,0xF8,0x29 } }; // E4ACE0B2-9B0C-5EDA-88A2-C31B1B84F829
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomOptionsFactory>{ 0xD1C82E57,0xD5E8,0x58F5,{ 0xA2,0xC0,0xEE,0x70,0xC6,0x41,0x43,0xBE } }; // D1C82E57-D5E8-58F5-A2C0-EE70C64143BE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>{ 0x5E727DA0,0xB909,0x536C,{ 0x86,0x56,0x28,0x01,0x7B,0x48,0xF5,0xA5 } }; // 5E727DA0-B909-536C-8656-28017B48F5A5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory>{ 0xDF5AB91F,0xE316,0x53CF,{ 0x96,0x36,0xA8,0x5B,0xDC,0x24,0xE8,0x5E } }; // DF5AB91F-E316-53CF-9636-A85BDC24E85E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgs>{ 0xB6C18076,0x4B76,0x5416,{ 0xAD,0x29,0xE2,0xDC,0x20,0xC4,0x62,0x46 } }; // B6C18076-4B76-5416-AD29-E2DC20C46246
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgsFactory>{ 0x0FCD041D,0x465F,0x5745,{ 0x98,0x82,0x0C,0x83,0x48,0xE4,0x13,0x5D } }; // 0FCD041D-465F-5745-9882-0C8348E4135D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISelectorBar>{ 0x7F4AD191,0x55EA,0x508E,{ 0xBF,0x47,0x70,0x47,0xD8,0x67,0x73,0x70 } }; // 7F4AD191-55EA-508E-BF47-7047D8677370
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarFactory>{ 0x71243DC7,0xB46C,0x5A04,{ 0x98,0x94,0xE4,0x20,0xE4,0x62,0x70,0x3F } }; // 71243DC7-B46C-5A04-9894-E420E462703F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarItem>{ 0x3CDBA1F9,0xA13A,0x56A2,{ 0xB9,0xA9,0xF9,0x54,0x99,0x8D,0x36,0x58 } }; // 3CDBA1F9-A13A-56A2-B9A9-F954998D3658
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarItemFactory>{ 0xE46B62EA,0xE60D,0x5989,{ 0xBE,0xA7,0x54,0x70,0xDA,0x32,0x68,0x16 } }; // E46B62EA-E60D-5989-BEA7-5470DA326816
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarItemStatics>{ 0x08B5BDFC,0x54DE,0x5D4C,{ 0xAA,0xE3,0x37,0x63,0xA6,0xB4,0xE7,0x5B } }; // 08B5BDFC-54DE-5D4C-AAE3-3763A6B4E75B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarSelectionChangedEventArgs>{ 0x73B3F6C5,0x5050,0x5C5A,{ 0x89,0x9C,0x4E,0x6E,0x04,0x74,0xCB,0x63 } }; // 73B3F6C5-5050-5C5A-899C-4E6E0474CB63
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarStatics>{ 0x672B4E72,0x728A,0x53EA,{ 0xB6,0x6A,0x96,0x8B,0xC8,0x02,0xDC,0x24 } }; // 672B4E72-728A-53EA-B66A-968BC802DC24
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoom>{ 0x7E14616D,0x55EF,0x548C,{ 0xA9,0x97,0xC9,0x23,0xE3,0x02,0x71,0x8F } }; // 7E14616D-55EF-548C-A997-C923E302718F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomInformation>{ 0x12D62B04,0xBB13,0x50F2,{ 0x9D,0x8B,0xE5,0x7C,0x02,0xB4,0xBD,0xE4 } }; // 12D62B04-BB13-50F2-9D8B-E57C02B4BDE4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation>{ 0x41C1DEC7,0xF34F,0x51DB,{ 0x95,0x25,0x5C,0x14,0x9B,0x05,0xA5,0x27 } }; // 41C1DEC7-F34F-51DB-9525-5C149B05A527
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomStatics>{ 0xE4FBD358,0x9342,0x56D3,{ 0xB5,0xC2,0xBF,0x80,0xDE,0x6F,0x47,0xED } }; // E4FBD358-9342-56D3-B5C2-BF80DE6F47ED
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>{ 0xCF62D53D,0x97D3,0x5CEF,{ 0x96,0xF3,0x1C,0x41,0x3F,0x52,0x4E,0xCA } }; // CF62D53D-97D3-5CEF-96F3-1C413F524ECA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISlider>{ 0xF7418ECF,0x7C35,0x5216,{ 0x8B,0xF1,0xD8,0x2D,0x47,0xCC,0xE5,0xDF } }; // F7418ECF-7C35-5216-8BF1-D82D47CCE5DF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISliderFactory>{ 0x06604D71,0x34CA,0x5F39,{ 0x96,0x56,0x29,0xD8,0x1D,0x3C,0x11,0x0C } }; // 06604D71-34CA-5F39-9656-29D81D3C110C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISliderStatics>{ 0xF0541F7B,0x6D81,0x59E2,{ 0x99,0x7A,0x2E,0x65,0xFB,0xCC,0xCD,0x21 } }; // F0541F7B-6D81-59E2-997A-2E65FBCCCD21
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISplitButton>{ 0xF627202D,0xD2D7,0x5FF6,{ 0xBB,0x05,0x8C,0x48,0xEB,0x6B,0x1F,0xC6 } }; // F627202D-D2D7-5FF6-BB05-8C48EB6B1FC6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs>{ 0x6AF896C2,0xE65A,0x5998,{ 0x9C,0x82,0x2A,0xF8,0xF3,0xE0,0x74,0x1F } }; // 6AF896C2-E65A-5998-9C82-2AF8F3E0741F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonFactory>{ 0x07510092,0x2612,0x55E7,{ 0x98,0x1C,0xA5,0x36,0xDD,0xD4,0x57,0x0E } }; // 07510092-2612-55E7-981C-A536DDD4570E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonStatics>{ 0xD54DDD05,0x73E7,0x55A1,{ 0xA1,0x19,0xAA,0x34,0x2E,0x5F,0x9F,0xEB } }; // D54DDD05-73E7-55A1-A119-AA342E5F9FEB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISplitView>{ 0x10AE18F7,0x1666,0x5897,{ 0xBB,0xCE,0x1E,0x68,0x7E,0x77,0x84,0xA8 } }; // 10AE18F7-1666-5897-BBCE-1E687E7784A8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISplitViewFactory>{ 0x389ECE72,0x75CE,0x561B,{ 0xAA,0xD3,0xC5,0x21,0x25,0xCA,0x6A,0x50 } }; // 389ECE72-75CE-561B-AAD3-C52125CA6A50
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs>{ 0x9138965B,0x8499,0x5F9C,{ 0x93,0xE0,0x34,0xBE,0xDA,0x44,0x1E,0x6D } }; // 9138965B-8499-5F9C-93E0-34BEDA441E6D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISplitViewStatics>{ 0x1C69A263,0x552C,0x5505,{ 0xAC,0x81,0x49,0xE2,0x47,0xFE,0xE9,0xDB } }; // 1C69A263-552C-5505-AC81-49E247FEE9DB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IStackLayout>{ 0x3EA9C3DD,0x8103,0x571F,{ 0x9E,0x07,0x44,0xEA,0x76,0xC9,0x1A,0x10 } }; // 3EA9C3DD-8103-571F-9E07-44EA76C91A10
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutFactory>{ 0xEA606F86,0x21A1,0x5C35,{ 0x91,0x1E,0x4A,0x1D,0xE8,0xBC,0x69,0xD9 } }; // EA606F86-21A1-5C35-911E-4A1DE8BC69D9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutStatics>{ 0x5610AECF,0xFB2A,0x5726,{ 0xAC,0x3A,0x16,0x47,0x9B,0xA2,0xEC,0xAD } }; // 5610AECF-FB2A-5726-AC3A-16479BA2ECAD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IStackPanel>{ 0x493AB00B,0x3A6A,0x5E4A,{ 0x94,0x52,0x40,0x7C,0xD5,0x19,0x74,0x06 } }; // 493AB00B-3A6A-5E4A-9452-407CD5197406
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IStackPanelFactory>{ 0x64C1D388,0x47A2,0x5A74,{ 0xA7,0x5B,0x55,0x9D,0x15,0x1E,0xE5,0xAC } }; // 64C1D388-47A2-5A74-A75B-559D151EE5AC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IStackPanelStatics>{ 0x10BB04E3,0xEB01,0x5EA8,{ 0x9F,0x96,0x69,0x50,0x84,0x79,0xDE,0xF9 } }; // 10BB04E3-EB01-5EA8-9F96-69508479DEF9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IStyleSelector>{ 0x7F9CF759,0x785B,0x5EF9,{ 0x9E,0xA7,0x15,0x55,0x67,0x3A,0x47,0x5A } }; // 7F9CF759-785B-5EF9-9EA7-1555673A475A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IStyleSelectorFactory>{ 0x2A033206,0xA4FB,0x5F11,{ 0x8C,0x2D,0x61,0xE1,0xDF,0x78,0xFB,0xC3 } }; // 2A033206-A4FB-5F11-8C2D-61E1DF78FBC3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IStyleSelectorOverrides>{ 0x26015D75,0xEF00,0x5C78,{ 0x8E,0x58,0x16,0x3D,0xA1,0x0F,0x69,0x4F } }; // 26015D75-EF00-5C78-8E58-163DA10F694F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISwapChainBackgroundPanel>{ 0x095A213F,0xFFEA,0x55FF,{ 0xB8,0x75,0xE6,0x98,0x25,0x4B,0xA6,0xDF } }; // 095A213F-FFEA-55FF-B875-E698254BA6DF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory>{ 0x83ABAA33,0x6D13,0x5B13,{ 0x8E,0x92,0xEA,0x95,0x57,0x9B,0x6F,0xF3 } }; // 83ABAA33-6D13-5B13-8E92-EA95579B6FF3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanel>{ 0x08844F85,0xAA1B,0x540D,{ 0xBE,0xF2,0xB2,0xBB,0x7B,0x25,0x7F,0x8C } }; // 08844F85-AA1B-540D-BEF2-B2BB7B257F8C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanelFactory>{ 0x38D00B69,0x5759,0x5F37,{ 0x9E,0x1C,0x3A,0xE0,0xD4,0x28,0x8B,0x26 } }; // 38D00B69-5759-5F37-9E1C-3AE0D4288B26
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanelStatics>{ 0xD83B0621,0xAACA,0x534B,{ 0xAF,0xDE,0x53,0x70,0x16,0x71,0x76,0xB5 } }; // D83B0621-AACA-534B-AFDE-5370167176B5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeControl>{ 0x337800FE,0xF51D,0x5F6B,{ 0x9D,0x35,0xE7,0xF5,0xDE,0x10,0xA9,0x7C } }; // 337800FE-F51D-5F6B-9D35-E7F5DE10A97C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeControlFactory>{ 0x6E9213F4,0x30C1,0x56CA,{ 0x99,0x05,0x46,0xAA,0x1A,0x83,0xDF,0xC1 } }; // 6E9213F4-30C1-56CA-9905-46AA1A83DFC1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeControlStatics>{ 0xFB216C88,0xC1B1,0x56AC,{ 0xA5,0xDD,0x67,0x06,0x4D,0x1E,0x47,0xBC } }; // FB216C88-C1B1-56AC-A5DD-67064D1E47BC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeItem>{ 0x5E8D4950,0xB826,0x510A,{ 0xB3,0x09,0x77,0xAF,0xCD,0xC6,0x5B,0x1F } }; // 5E8D4950-B826-510A-B309-77AFCDC65B1F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemFactory>{ 0x011513E1,0x1ADC,0x5A69,{ 0xA7,0x4F,0x62,0x3F,0xCC,0x18,0xA5,0x1C } }; // 011513E1-1ADC-5A69-A74F-623FCC18A51C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>{ 0x7BF51C95,0x53A2,0x5A0D,{ 0xBB,0x32,0x2B,0x4B,0x1F,0x7D,0x2F,0x20 } }; // 7BF51C95-53A2-5A0D-BB32-2B4B1F7D2F20
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemStatics>{ 0x7898CF24,0x7A54,0x586A,{ 0x82,0xD5,0xBB,0xD5,0x4E,0x59,0x65,0x10 } }; // 7898CF24-7A54-586A-82D5-BBD54E596510
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeItems>{ 0x40D3022B,0xC82B,0x5565,{ 0xA4,0xE4,0xAD,0x9D,0x7A,0x66,0xB1,0xA9 } }; // 40D3022B-C82B-5565-A4E4-AD9D7A66B1A9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemsFactory>{ 0x9A5D7D77,0x39BD,0x5B81,{ 0xAB,0x4E,0xF4,0x4A,0xCA,0x6E,0xDE,0x3F } }; // 9A5D7D77-39BD-5B81-AB4E-F44ACA6EDE3F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemsStatics>{ 0xDB32C3B0,0xA93F,0x5797,{ 0xA1,0x8D,0xD9,0x46,0xB0,0x61,0x59,0x06 } }; // DB32C3B0-A93F-5797-A18D-D946B0615906
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISymbolIcon>{ 0xA4322906,0x0DBE,0x5EB7,{ 0x8B,0x64,0x3E,0x83,0x22,0x46,0xEB,0x7F } }; // A4322906-0DBE-5EB7-8B64-3E832246EB7F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconFactory>{ 0xD4430447,0x567C,0x5AAD,{ 0x99,0x6A,0xA5,0x47,0x77,0x4E,0x2C,0x3C } }; // D4430447-567C-5AAD-996A-A547774E2C3C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSource>{ 0x45120D6B,0xE868,0x59F2,{ 0xA3,0x0A,0xB1,0x91,0x5C,0xE3,0x74,0xBD } }; // 45120D6B-E868-59F2-A30A-B1915CE374BD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory>{ 0xAFBF55FA,0xFF79,0x552A,{ 0xA3,0xA1,0x48,0xE2,0xEF,0x17,0x15,0x2A } }; // AFBF55FA-FF79-552A-A3A1-48E2EF17152A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics>{ 0xFDB6B1C7,0x33D9,0x56D0,{ 0x98,0xE5,0x87,0x76,0xAA,0x1B,0xB7,0x9A } }; // FDB6B1C7-33D9-56D0-98E5-8776AA1BB79A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconStatics>{ 0xCCAA0C34,0x31F2,0x50F1,{ 0xB3,0x28,0xBE,0x6E,0xDC,0x29,0x1A,0xAA } }; // CCAA0C34-31F2-50F1-B328-BE6EDC291AAA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITabView>{ 0x07B509E1,0x1D38,0x551B,{ 0x95,0xF4,0x47,0x32,0xB0,0x49,0xF6,0xA6 } }; // 07B509E1-1D38-551B-95F4-4732B049F6A6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewFactory>{ 0xE7E83685,0xEEDF,0x5106,{ 0x94,0x29,0x88,0x44,0x35,0xAB,0x16,0x6B } }; // E7E83685-EEDF-5106-9429-884435AB166B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewItem>{ 0x64980AFA,0x97AF,0x5190,{ 0x90,0xB3,0x4B,0xA2,0x77,0xB1,0x11,0x3D } }; // 64980AFA-97AF-5190-90B3-4BA277B1113D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemFactory>{ 0xB64C2423,0x7E56,0x5D41,{ 0x8A,0x84,0x1E,0xE2,0x8F,0x98,0x26,0xA4 } }; // B64C2423-7E56-5D41-8A84-1EE28F9826A4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemStatics>{ 0x4CFC7EAB,0x2EFF,0x5457,{ 0x82,0x51,0xC1,0x9D,0x37,0x4A,0xB3,0x4D } }; // 4CFC7EAB-2EFF-5457-8251-C19D374AB34D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings>{ 0xCC5C99EC,0xC9D1,0x55F5,{ 0xBC,0x81,0x76,0x12,0xFF,0x4E,0x2B,0x77 } }; // CC5C99EC-C9D1-55F5-BC81-7612FF4E2B77
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings2>{ 0x9E2780D3,0x7056,0x5AAF,{ 0x9A,0x7A,0x40,0x4A,0x2C,0x09,0x4C,0xED } }; // 9E2780D3-7056-5AAF-9A7A-404A2C094CED
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsFactory>{ 0xCBA3E467,0x4C98,0x5885,{ 0xBA,0x24,0x6F,0xA6,0x99,0xCC,0x8E,0xDD } }; // CBA3E467-4C98-5885-BA24-6FA699CC8EDD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsStatics>{ 0xEB62DD88,0xFC12,0x5338,{ 0x8E,0x88,0x78,0x8B,0xE7,0x2D,0x07,0xD6 } }; // EB62DD88-FC12-5338-8E88-788BE72D07D6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsStatics2>{ 0xD31AB42B,0x3842,0x5E4D,{ 0x88,0x45,0x62,0x32,0xEE,0xA8,0xEE,0x1D } }; // D31AB42B-3842-5E4D-8845-6232EEA8EE1D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewStatics>{ 0xF4326C08,0x1B94,0x53D7,{ 0x93,0x4F,0xE6,0xAE,0x0D,0x3D,0x18,0xAB } }; // F4326C08-1B94-53D7-934F-E6AE0D3D18AB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabCloseRequestedEventArgs>{ 0xD56AB9B2,0xE264,0x5C7E,{ 0xA1,0xCB,0xE4,0x1A,0x16,0xA6,0xC6,0xC6 } }; // D56AB9B2-E264-5C7E-A1CB-E41A16A6C6C6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDragCompletedEventArgs>{ 0x791FC623,0xC8F6,0x5102,{ 0x81,0xBD,0x18,0x69,0xCD,0xE8,0x22,0x84 } }; // 791FC623-C8F6-5102-81BD-1869CDE82284
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDragStartingEventArgs>{ 0x97682812,0x1A7B,0x53FD,{ 0x8B,0x4E,0xC2,0xF7,0x0D,0x2A,0xD2,0x50 } }; // 97682812-1A7B-53FD-8B4E-C2F70D2AD250
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDroppedOutsideEventArgs>{ 0x1F1F4D5D,0x0FB1,0x51AB,{ 0xB6,0x6F,0xF7,0xA3,0x22,0xBF,0x2D,0x13 } }; // 1F1F4D5D-0FB1-51AB-B66F-F7A322BF2D13
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITeachingTip>{ 0xDAEBD5F7,0x3B47,0x5B12,{ 0xB8,0x04,0xF4,0xE1,0x44,0x2B,0x21,0x13 } }; // DAEBD5F7-3B47-5B12-B804-F4E1442B2113
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs>{ 0x2536F506,0x4038,0x59DB,{ 0x9E,0x35,0xA9,0x25,0x2F,0xB5,0xAD,0xB2 } }; // 2536F506-4038-59DB-9E35-A9252FB5ADB2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs>{ 0x16F53512,0x3C55,0x5636,{ 0xA8,0x56,0x22,0x9D,0x97,0x68,0xD6,0x4E } }; // 16F53512-3C55-5636-A856-229D9768D64E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipFactory>{ 0xA3ECD47D,0x2972,0x5D19,{ 0xA6,0x2E,0xDD,0xFB,0xC5,0xE1,0xAD,0x57 } }; // A3ECD47D-2972-5D19-A62E-DDFBC5E1AD57
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipStatics>{ 0x7C3ECDDB,0x0B4D,0x51C2,{ 0xA2,0x7F,0x89,0x18,0x0A,0xFD,0x45,0xA8 } }; // 7C3ECDDB-0B4D-51C2-A27F-89180AFD45A8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings>{ 0xB081E1E9,0xC1A5,0x590A,{ 0x80,0x49,0x69,0xEA,0x00,0x3B,0x6C,0xF7 } }; // B081E1E9-C1A5-590A-8049-69EA003B6CF7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsFactory>{ 0x63210545,0xE195,0x56CD,{ 0xBC,0xCD,0x16,0x92,0x55,0xE1,0x34,0xE3 } }; // 63210545-E195-56CD-BCCD-169255E134E3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics>{ 0xFA9ACF9A,0x9743,0x51EE,{ 0x8D,0xB9,0x8A,0xBD,0x06,0x3E,0xDF,0xEA } }; // FA9ACF9A-9743-51EE-8DB9-8ABD063EDFEA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITextBlock>{ 0x1AC8D84F,0x392C,0x5C7E,{ 0x83,0xF5,0xA5,0x3E,0x3B,0xF0,0xAB,0xB0 } }; // 1AC8D84F-392C-5C7E-83F5-A53E3BF0ABB0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITextBlockStatics>{ 0x3187104B,0x65C2,0x5E53,{ 0xB8,0x89,0xC8,0x27,0x2B,0x13,0x14,0xCD } }; // 3187104B-65C2-5E53-B889-C8272B1314CD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITextBox>{ 0x873AF7C2,0xAB89,0x5D76,{ 0x8D,0xBE,0x3D,0x63,0x25,0x66,0x9D,0xF5 } }; // 873AF7C2-AB89-5D76-8DBE-3D6325669DF5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs>{ 0xBA46105B,0x9A16,0x5237,{ 0xA2,0x0F,0x5D,0xF7,0x50,0x99,0x2A,0x05 } }; // BA46105B-9A16-5237-A20F-5DF750992A05
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITextBoxFactory>{ 0xE1D8B82E,0xBC60,0x5D27,{ 0xB6,0x46,0x5C,0xA4,0xC4,0xA6,0x94,0x32 } }; // E1D8B82E-BC60-5D27-B646-5CA4C4A69432
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITextBoxSelectionChangingEventArgs>{ 0x6DCE20DB,0x894E,0x5FF6,{ 0x82,0x5B,0xF9,0x89,0x1A,0xF7,0x95,0x16 } }; // 6DCE20DB-894E-5FF6-825B-F9891AF79516
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITextBoxStatics>{ 0xA41CF38F,0x712A,0x5599,{ 0xBB,0xED,0x5A,0x3D,0x9B,0x6B,0xD4,0x6E } }; // A41CF38F-712A-5599-BBED-5A3D9B6BD46E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITextBoxTextChangingEventArgs>{ 0xA1A08D48,0xE8C0,0x5379,{ 0xB1,0x38,0x7E,0xB3,0xF8,0xD5,0xF5,0xE6 } }; // A1A08D48-E8C0-5379-B138-7EB3F8D5F5E6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITextChangedEventArgs>{ 0x71C37E43,0x7BE7,0x52FC,{ 0xBF,0x8C,0x98,0x67,0xF4,0x4B,0xE5,0xF4 } }; // 71C37E43-7BE7-52FC-BF8C-9867F44BE5F4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout>{ 0x6D0F38A5,0x0EB3,0x5D73,{ 0x81,0x95,0xD2,0xD8,0x9B,0x76,0xB0,0xF7 } }; // 6D0F38A5-0EB3-5D73-8195-D2D89B76B0F7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>{ 0x5C56A34F,0x621F,0x55F2,{ 0x8D,0x71,0x3E,0x3A,0x6E,0x69,0x06,0xBD } }; // 5C56A34F-621F-55F2-8D71-3E3A6E6906BD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITextCompositionChangedEventArgs>{ 0x04F420D2,0xBA9C,0x5F59,{ 0xB8,0xAC,0x0D,0x8A,0xA5,0x0A,0x92,0x40 } }; // 04F420D2-BA9C-5F59-B8AC-0D8AA50A9240
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITextCompositionEndedEventArgs>{ 0x19D0A5C5,0x8D0F,0x5118,{ 0x8C,0x30,0xE7,0x09,0x32,0x6F,0x12,0x83 } }; // 19D0A5C5-8D0F-5118-8C30-E709326F1283
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITextCompositionStartedEventArgs>{ 0xA604FF71,0x5D44,0x5859,{ 0x8D,0x71,0x72,0x03,0x0E,0xD7,0x8B,0xC8 } }; // A604FF71-5D44-5859-8D71-72030ED78BC8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs>{ 0x1DAAC6D5,0x8DB5,0x5D9F,{ 0x93,0x82,0x1E,0x64,0x4F,0x9A,0xA4,0x37 } }; // 1DAAC6D5-8DB5-5D9F-9382-1E644F9AA437
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs>{ 0x9D73671F,0xEA30,0x555D,{ 0x81,0x29,0x5A,0x96,0xAE,0xC7,0x3A,0x14 } }; // 9D73671F-EA30-555D-8129-5A96AEC73A14
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITextControlPasteEventArgs>{ 0xFC5E567E,0x3AA9,0x5C57,{ 0x88,0xD4,0x83,0x4A,0xD3,0xB6,0x2E,0x9E } }; // FC5E567E-3AA9-5C57-88D4-834AD3B62E9E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickedEventArgs>{ 0x9F85D661,0xA9E0,0x5E08,{ 0xA9,0x04,0x11,0x3B,0x74,0xCA,0x3C,0x59 } }; // 9F85D661-A9E0-5E08-A904-113B74CA3C59
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITimePicker>{ 0xED4BAA33,0xC240,0x5934,{ 0x92,0x29,0x82,0xD3,0x7B,0x26,0xF8,0x46 } }; // ED4BAA33-C240-5934-9229-82D37B26F846
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFactory>{ 0x1584429E,0xAAFE,0x5C65,{ 0x89,0xE9,0x8C,0x06,0x6E,0x56,0x90,0xE7 } }; // 1584429E-AAFE-5C65-89E9-8C066E5690E7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyout>{ 0x479799DC,0x700A,0x5A9C,{ 0xBA,0x0B,0x9A,0xB2,0x58,0x7E,0xD2,0xE8 } }; // 479799DC-700A-5A9C-BA0B-9AB2587ED2E8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenter>{ 0xA7439B37,0x7A77,0x5AEB,{ 0x80,0x6B,0xBC,0x72,0x60,0x05,0xDE,0x20 } }; // A7439B37-7A77-5AEB-806B-BC726005DE20
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenterStatics>{ 0x0CD9D57D,0x970F,0x5DF3,{ 0xB2,0xAF,0x49,0xCF,0xF4,0x89,0x67,0x5E } }; // 0CD9D57D-970F-5DF3-B2AF-49CFF489675E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutStatics>{ 0x085A6A2D,0x68F4,0x5D4E,{ 0xB8,0x9C,0x47,0xCC,0x0D,0xD5,0x20,0xA8 } }; // 085A6A2D-68F4-5D4E-B89C-47CC0DD520A8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickerSelectedValueChangedEventArgs>{ 0x6ED7EDF1,0x9B0B,0x5E7B,{ 0x9E,0x10,0xF3,0x56,0x60,0xA2,0x9F,0xD2 } }; // 6ED7EDF1-9B0B-5E7B-9E10-F35660A29FD2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickerStatics>{ 0x12BEF59E,0x4222,0x507B,{ 0x90,0x1E,0xEF,0xFD,0x04,0x62,0x0C,0x4F } }; // 12BEF59E-4222-507B-901E-EFFD04620C4F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>{ 0x7B98953F,0xC24A,0x53C6,{ 0x8A,0x3A,0x52,0x05,0x58,0x50,0x8B,0x08 } }; // 7B98953F-C24A-53C6-8A3A-520558508B08
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItem>{ 0x1803F260,0x67E4,0x5BC1,{ 0xA6,0x3A,0x12,0x35,0x10,0x16,0x7B,0xB8 } }; // 1803F260-67E4-5BC1-A63A-123510167BB8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory>{ 0x426DFD57,0x6CC9,0x570F,{ 0x95,0x0D,0x37,0x43,0x72,0x35,0xDC,0x89 } }; // 426DFD57-6CC9-570F-950D-37437235DC89
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics>{ 0x7411E854,0xC59A,0x5463,{ 0xBE,0xAB,0x64,0xDD,0xB0,0x52,0xC6,0xDC } }; // 7411E854-C59A-5463-BEAB-64DDB052C6DC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButton>{ 0x5C0F247B,0xBD00,0x5509,{ 0x88,0xA8,0xB0,0x90,0x07,0xAE,0x22,0xB0 } }; // 5C0F247B-BD00-5509-88A8-B09007AE22B0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory>{ 0x25459D02,0x0FFC,0x5C7C,{ 0xAF,0x56,0xF5,0x5A,0xAD,0x6D,0xB5,0xE7 } }; // 25459D02-0FFC-5C7C-AF56-F55AAD6DB5E7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs>{ 0x6CAB1E15,0xC017,0x5760,{ 0x82,0x8B,0xDA,0xFC,0x21,0xD5,0x4E,0xB2 } }; // 6CAB1E15-C017-5760-828B-DAFC21D54EB2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonStatics>{ 0x801C9CA9,0x5B24,0x5B9E,{ 0xA8,0xD1,0xCF,0xF4,0xB6,0xE6,0x85,0x7F } }; // 801C9CA9-5B24-5B9E-A8D1-CFF4B6E6857F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IToggleSwitch>{ 0x1B17EEB1,0x74BF,0x5A83,{ 0x81,0x61,0xA8,0x6F,0x0F,0xDC,0xDF,0x24 } }; // 1B17EEB1-74BF-5A83-8161-A86F0FDCDF24
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IToggleSwitchOverrides>{ 0x772682DB,0xE3D4,0x5242,{ 0xB6,0xDE,0x36,0x70,0x57,0x25,0xEE,0xB8 } }; // 772682DB-E3D4-5242-B6DE-36705725EEB8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IToggleSwitchStatics>{ 0xC9C203D6,0x0619,0x504D,{ 0x9E,0xD8,0x50,0x54,0xFE,0x3C,0xA5,0x1E } }; // C9C203D6-0619-504D-9ED8-5054FE3CA51E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IToolTip>{ 0x67E93D74,0x5E93,0x59A1,{ 0x91,0xBF,0x41,0x3E,0xFB,0xEB,0x90,0x4C } }; // 67E93D74-5E93-59A1-91BF-413EFBEB904C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IToolTipFactory>{ 0xBCBB3720,0x2DB8,0x54E1,{ 0x88,0x06,0xFC,0xBE,0xD3,0x89,0x49,0xA9 } }; // BCBB3720-2DB8-54E1-8806-FCBED38949A9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IToolTipService>{ 0x01140768,0x2727,0x5F89,{ 0x80,0xE0,0x52,0x10,0x32,0x6A,0x34,0x31 } }; // 01140768-2727-5F89-80E0-5210326A3431
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IToolTipServiceStatics>{ 0x5AA38ADC,0x9874,0x5E0A,{ 0x8D,0x8E,0x15,0x74,0xEF,0xC0,0xB8,0x8F } }; // 5AA38ADC-9874-5E0A-8D8E-1574EFC0B88F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IToolTipStatics>{ 0x88EB60D4,0xCD54,0x5E23,{ 0xBD,0x1A,0x22,0x37,0x02,0x44,0x2B,0xA4 } }; // 88EB60D4-CD54-5E23-BD1A-223702442BA4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeView>{ 0x1BEF9AF4,0x712C,0x50EF,{ 0x9B,0xB4,0x88,0x1B,0x97,0x52,0x32,0xAB } }; // 1BEF9AF4-712C-50EF-9BB4-881B975232AB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeView2>{ 0xB947CA7D,0x0F6F,0x594C,{ 0x83,0xEC,0x14,0x15,0x3D,0x34,0x32,0x25 } }; // B947CA7D-0F6F-594C-83EC-14153D343225
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeView3>{ 0xA1B5538E,0x7956,0x5671,{ 0xAF,0xD0,0x4C,0x0F,0x38,0x12,0x2B,0x70 } }; // A1B5538E-7956-5671-AFD0-4C0F38122B70
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>{ 0x8EE00B59,0x42C6,0x5D73,{ 0x80,0x9F,0x68,0x71,0x00,0x88,0xE5,0xA5 } }; // 8EE00B59-42C6-5D73-809F-68710088E5A5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs2>{ 0x77804A23,0x9FEB,0x5C57,{ 0x9C,0x95,0x4D,0xD9,0x84,0x26,0x72,0x17 } }; // 77804A23-9FEB-5C57-9C95-4DD984267217
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs>{ 0xE5B8547E,0xF839,0x55DB,{ 0x9C,0x26,0x2A,0x95,0xF5,0x7A,0x60,0xDC } }; // E5B8547E-F839-55DB-9C26-2A95F57A60DC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs2>{ 0x060D3921,0x57A0,0x5BC5,{ 0xBE,0x26,0x32,0x0B,0xD9,0xC1,0xA6,0xE8 } }; // 060D3921-57A0-5BC5-BE26-320BD9C1A6E8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs>{ 0x1B6C4FFC,0xCD32,0x5E06,{ 0xB7,0x82,0xDF,0x9F,0x07,0x75,0x46,0xC7 } }; // 1B6C4FFC-CD32-5E06-B782-DF9F077546C7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs>{ 0xBD769EF7,0xCADC,0x5334,{ 0x93,0xAD,0xC9,0xBB,0xE8,0x20,0x64,0x3D } }; // BD769EF7-CADC-5334-93AD-C9BBE820643D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs2>{ 0xED7840E5,0xDBF5,0x5937,{ 0x89,0xDD,0x99,0x7A,0x6F,0xDE,0x0D,0x5C } }; // ED7840E5-DBF5-5937-89DD-997A6FDE0D5C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewFactory>{ 0x9C6220BE,0xF9EB,0x518A,{ 0xB3,0x0E,0x7E,0x41,0xDE,0x5E,0xFD,0xA9 } }; // 9C6220BE-F9EB-518A-B30E-7E41DE5EFDA9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItem>{ 0x70437A49,0x2999,0x5A97,{ 0xB1,0x9D,0x35,0x4E,0xF5,0x9D,0x4F,0x5C } }; // 70437A49-2999-5A97-B19D-354EF59D4F5C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItem2>{ 0xB1B70143,0x3F5B,0x54F4,{ 0x8B,0xD7,0x41,0xDC,0x15,0xCF,0x45,0xA9 } }; // B1B70143-3F5B-54F4-8BD7-41DC15CF45A9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemFactory>{ 0x878FD918,0xE77E,0x5BE8,{ 0x8C,0x8A,0xB7,0x9B,0x27,0xB0,0x8D,0x9B } }; // 878FD918-E77E-5BE8-8C8A-B79B27B08D9B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>{ 0x1A05853C,0xB101,0x542C,{ 0x9A,0x1E,0x77,0x5A,0x04,0x4C,0x46,0x52 } }; // 1A05853C-B101-542C-9A1E-775A044C4652
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>{ 0xEFDB238D,0x2CCA,0x589C,{ 0xAE,0xDF,0x8E,0x29,0x7B,0x5A,0xA2,0x48 } }; // EFDB238D-2CCA-589C-AEDF-8E297B5AA248
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemStatics2>{ 0x431BEF52,0xD60D,0x5CE3,{ 0xB8,0x12,0xAE,0xE4,0xA2,0xFB,0x7E,0xD3 } }; // 431BEF52-D60D-5CE3-B812-AEE4A2FB7ED3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings>{ 0x29B5DD9C,0x2BFB,0x5E1C,{ 0x97,0xCB,0xCD,0xC3,0xC3,0x4A,0x36,0x5D } }; // 29B5DD9C-2BFB-5E1C-97CB-CDC3C34A365D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>{ 0x1D1A66E3,0xF56D,0x5D7F,{ 0x94,0x2C,0xF3,0xA8,0x7F,0x5C,0x55,0x2E } }; // 1D1A66E3-F56D-5D7F-942C-F3A87F5C552E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>{ 0x67817566,0x6528,0x5F4A,{ 0xB1,0xE1,0x71,0x0A,0xB0,0x94,0xC7,0x4F } }; // 67817566-6528-5F4A-B1E1-710AB094C74F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewList>{ 0x94CEE57B,0x7085,0x5A6A,{ 0xAA,0xC3,0x18,0x45,0x09,0xB8,0xEC,0xE0 } }; // 94CEE57B-7085-5A6A-AAC3-184509B8ECE0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewListFactory>{ 0x461499A0,0x68CF,0x5B81,{ 0xB0,0xE4,0xB1,0xAF,0x92,0x9B,0x0B,0x12 } }; // 461499A0-68CF-5B81-B0E4-B1AF929B0B12
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNode>{ 0x00378A74,0x790B,0x5328,{ 0x8A,0xFA,0x7D,0x65,0xE2,0x2D,0xA4,0x26 } }; // 00378A74-790B-5328-8AFA-7D65E22DA426
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory>{ 0xC105A5E5,0xCEA8,0x5EFD,{ 0x8B,0xE8,0x3D,0x89,0xB5,0x4C,0xBD,0x5F } }; // C105A5E5-CEA8-5EFD-8BE8-3D89B54CBD5F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics>{ 0xF5BB217C,0x66B9,0x5B62,{ 0xB2,0xD6,0xFB,0x47,0x84,0x3C,0x8F,0x6F } }; // F5BB217C-66B9-5B62-B2D6-FB47843C8F6F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewSelectionChangedEventArgs>{ 0x664190F3,0x7133,0x5599,{ 0xB4,0x1C,0x1D,0x54,0xCD,0x2C,0xB9,0x30 } }; // 664190F3-7133-5599-B41C-1D54CD2CB930
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewStatics>{ 0x71EFAF86,0x4D73,0x5F5F,{ 0x8E,0xA6,0xA4,0x2D,0xFE,0x04,0x49,0x17 } }; // 71EFAF86-4D73-5F5F-8EA6-A42DFE044917
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITreeViewStatics2>{ 0xDDD01C44,0xA883,0x583B,{ 0x91,0x81,0xDC,0xA5,0x83,0xDA,0x0A,0xD9 } }; // DDD01C44-A883-583B-9181-DCA583DA0AD9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneView>{ 0x8D2E56D9,0xC333,0x5F15,{ 0x81,0xD1,0xB8,0xB2,0x7E,0x07,0x65,0x22 } }; // 8D2E56D9-C333-5F15-81D1-B8B27E076522
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneViewFactory>{ 0x0F1AF0CD,0xF3DC,0x52F6,{ 0xB6,0x32,0x39,0x67,0x42,0x53,0x32,0x31 } }; // 0F1AF0CD-F3DC-52F6-B632-396742533231
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>{ 0x4FBD51C3,0xCEE6,0x58DE,{ 0xA5,0xE4,0x99,0xAB,0xAD,0x87,0x30,0x16 } }; // 4FBD51C3-CEE6-58DE-A5E4-99ABAD873016
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IUIElementCollection>{ 0x23050CB1,0xDB88,0x54ED,{ 0x90,0x83,0x5E,0xCF,0xB1,0x25,0x12,0xFD } }; // 23050CB1-DB88-54ED-9083-5ECFB12512FD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayout>{ 0x8A164CBC,0x2A5E,0x56E5,{ 0xA0,0x11,0xFB,0x76,0x33,0x4A,0xAB,0xDF } }; // 8A164CBC-2A5E-56E5-A011-FB76334AABDF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutFactory>{ 0x0D9ED808,0xF3F9,0x5034,{ 0x96,0x27,0x15,0x2B,0x91,0xE9,0x1B,0x4B } }; // 0D9ED808-F3F9-5034-9627-152B91E91B4B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics>{ 0x19BE9A3E,0x37E1,0x5A6D,{ 0x8B,0x62,0x41,0x93,0x25,0xEA,0x70,0x5A } }; // 19BE9A3E-37E1-5A6D-8B62-419325EA705A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IUserControl>{ 0xAB8A0A51,0x44CF,0x5337,{ 0xAD,0x77,0x8E,0xDA,0x17,0x95,0xE9,0xF6 } }; // AB8A0A51-44CF-5337-AD77-8EDA1795E9F6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IUserControlFactory>{ 0x61AC9074,0xAAB3,0x50B8,{ 0x8B,0x18,0xD4,0xD2,0x57,0x3A,0x52,0x35 } }; // 61AC9074-AAB3-50B8-8B18-D4D2573A5235
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IUserControlStatics>{ 0x575E8FA1,0x2E2D,0x5857,{ 0x9A,0x93,0x6B,0x11,0xE5,0x43,0x16,0xBA } }; // 575E8FA1-2E2D-5857-9A93-6B11E54316BA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IVariableSizedWrapGrid>{ 0xBFECD12B,0xE16A,0x58A0,{ 0xAF,0x5F,0x46,0x72,0x62,0x74,0x62,0xD5 } }; // BFECD12B-E16A-58A0-AF5F-4672627462D5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IVariableSizedWrapGridStatics>{ 0x0D979FE6,0x64AF,0x5AF5,{ 0x91,0x4A,0xDD,0x38,0xF2,0xCC,0xF2,0xD7 } }; // 0D979FE6-64AF-5AF5-914A-DD38F2CCF2D7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IViewbox>{ 0x510683E8,0xD0FE,0x5EF4,{ 0x85,0xBD,0xE1,0x13,0x10,0x76,0xAC,0x22 } }; // 510683E8-D0FE-5EF4-85BD-E1131076AC22
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IViewboxStatics>{ 0x0466C103,0x1E17,0x5E83,{ 0xA2,0x62,0x88,0x55,0xF2,0x16,0xB5,0x9F } }; // 0466C103-1E17-5E83-A262-8855F216B59F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayout>{ 0x54857CE0,0xB9E6,0x51A3,{ 0xBF,0xA8,0xDC,0xD8,0xEE,0x30,0x6D,0x5C } }; // 54857CE0-B9E6-51A3-BFA8-DCD8EE306D5C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext>{ 0x5B5B186A,0xA7F9,0x5A2E,{ 0xB1,0xF0,0x89,0x50,0xCC,0xD9,0x73,0x50 } }; // 5B5B186A-A7F9-5A2E-B1F0-8950CCD97350
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext2>{ 0xC34E5864,0xA883,0x59BE,{ 0x8C,0xE0,0x4A,0x77,0xE8,0x7B,0x03,0x43 } }; // C34E5864-A883-59BE-8CE0-4A77E87B0343
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextFactory>{ 0x3F790B67,0xFDFB,0x505A,{ 0x8B,0x85,0x62,0x10,0x50,0x6D,0xF3,0x11 } }; // 3F790B67-FDFB-505A-8B85-6210506DF311
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides>{ 0x78633B2A,0x9633,0x5086,{ 0x89,0xA7,0x0E,0x96,0x0A,0x95,0xA3,0xB2 } }; // 78633B2A-9633-5086-89A7-0E960A95A3B2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides2>{ 0xDA384C25,0x5D8F,0x5EDE,{ 0xAE,0x54,0xC3,0x18,0x81,0x3A,0xE7,0x84 } }; // DA384C25-5D8F-5EDE-AE54-C318813AE784
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutFactory>{ 0xC7C128E1,0x5DF7,0x5345,{ 0xB5,0xCD,0x43,0xAF,0xDF,0xA9,0x48,0xB4 } }; // C7C128E1-5DF7-5345-B5CD-43AFDFA948B4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides>{ 0x4357A35B,0x3703,0x5819,{ 0xA7,0x76,0xD1,0x39,0x84,0x8E,0x9E,0xD9 } }; // 4357A35B-3703-5819-A776-D139848E9ED9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanel>{ 0x2B216A2D,0x5079,0x51BA,{ 0x83,0x8A,0x90,0x86,0x90,0x36,0x36,0xB4 } }; // 2B216A2D-5079-51BA-838A-9086903636B4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelFactory>{ 0x32E8C71B,0xB58C,0x5F19,{ 0x9B,0xD5,0xEE,0xCA,0x58,0x60,0xF3,0x87 } }; // 32E8C71B-B58C-5F19-9BD5-EECA5860F387
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelOverrides>{ 0x3FFE2108,0x0382,0x50C8,{ 0xB2,0x95,0x21,0xBD,0x8B,0xEE,0x04,0xD7 } }; // 3FFE2108-0382-50C8-B295-21BD8BEE04D7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelProtected>{ 0xBC4579F5,0xFDC8,0x5DA2,{ 0xA9,0x8A,0xF4,0x4C,0x13,0xC0,0x73,0xD3 } }; // BC4579F5-FDC8-5DA2-A98A-F44C13C073D3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanel>{ 0x7D6103DC,0x2427,0x5576,{ 0x9A,0x69,0xBF,0x53,0xE2,0xD7,0x18,0x0B } }; // 7D6103DC-2427-5576-9A69-BF53E2D7180B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanelOverrides>{ 0x8FEE3E46,0x6E2F,0x5C0A,{ 0x9A,0x3B,0xC0,0xB6,0x59,0x81,0x88,0x01 } }; // 8FEE3E46-6E2F-5C0A-9A3B-C0B659818801
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanelStatics>{ 0x731CC881,0xA71A,0x5AF9,{ 0x98,0x5E,0x1E,0xDE,0x3D,0x88,0xC2,0x74 } }; // 731CC881-A71A-5AF9-985E-1EDE3D88C274
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IWebView2>{ 0x2B2C76C2,0x997C,0x5069,{ 0xA8,0xF0,0x9B,0x84,0xCD,0x7E,0x62,0x4B } }; // 2B2C76C2-997C-5069-A8F0-9B84CD7E624B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IWebView22>{ 0x560C5EED,0x3E7A,0x51E4,{ 0xB1,0x4F,0x10,0x7B,0xA0,0x2B,0x89,0xBE } }; // 560C5EED-3E7A-51E4-B14F-107BA02B89BE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IWebView2Factory>{ 0xFB4EC2CE,0x3074,0x5C42,{ 0xB6,0x55,0x64,0xFB,0x81,0xFB,0xD0,0x40 } }; // FB4EC2CE-3074-5C42-B655-64FB81FBD040
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IWebView2Statics>{ 0x7F3226D0,0xF6D5,0x5AA7,{ 0xB1,0x75,0x64,0x54,0x51,0xCA,0x3C,0x85 } }; // 7F3226D0-F6D5-5AA7-B175-645451CA3C85
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IWrapGrid>{ 0x2E570B6A,0xFF97,0x53B8,{ 0xA8,0x87,0x34,0x8F,0x59,0xEE,0x05,0x44 } }; // 2E570B6A-FF97-53B8-A887-348F59EE0544
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IWrapGridStatics>{ 0x2FE223A8,0x018A,0x5D2F,{ 0x93,0x3B,0xA7,0x56,0x9F,0x82,0x4F,0x19 } }; // 2FE223A8-018A-5D2F-933B-A7569F824F19
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IXamlControlsResources>{ 0x918CA043,0xF42C,0x5805,{ 0x86,0x1B,0x62,0xD6,0xD1,0xD0,0xC1,0x62 } }; // 918CA043-F42C-5805-861B-62D6D1D0C162
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics>{ 0xCB49196C,0x1458,0x5E92,{ 0xB7,0x01,0xD0,0x8D,0x3E,0x81,0x6B,0xC5 } }; // CB49196C-1458-5E92-B701-D08D3E816BC5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler>{ 0xAB8075FD,0x7A4B,0x504E,{ 0x8A,0x63,0xD7,0xF3,0x55,0x70,0xBD,0x86 } }; // AB8075FD-7A4B-504E-8A63-D7F35570BD86
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler>{ 0xDA6960DE,0x89FF,0x575F,{ 0x93,0x2F,0x02,0x3F,0x6F,0xC1,0xF9,0x92 } }; // DA6960DE-89FF-575F-932F-023F6FC1F992
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ContextMenuOpeningEventHandler>{ 0xD010FF61,0x4067,0x526A,{ 0x95,0xA3,0x51,0x75,0x77,0xBC,0x52,0x73 } }; // D010FF61-4067-526A-95A3-517577BC5273
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::DragItemsStartingEventHandler>{ 0x55532800,0x7617,0x5D67,{ 0x80,0xBF,0xB9,0x8C,0x0A,0x41,0xB9,0xD6 } }; // 55532800-7617-5D67-80BF-B98C0A41B9D6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventHandler>{ 0xF69971DA,0x162F,0x51EC,{ 0x9F,0xD9,0x37,0xF9,0xB5,0x7A,0x68,0xF9 } }; // F69971DA-162F-51EC-9FD9-37F9B57A68F9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ItemClickEventHandler>{ 0xA3903624,0x3393,0x566C,{ 0xA6,0xB9,0xA6,0xB4,0xB3,0xE3,0x01,0xC3 } }; // A3903624-3393-566C-A6B9-A6B4B3E301C3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ListViewItemToKeyHandler>{ 0x2A47F009,0x91FC,0x54CE,{ 0x98,0x61,0x34,0x4E,0x80,0xF7,0xE9,0xD7 } }; // 2A47F009-91FC-54CE-9861-344E80F7E9D7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::ListViewKeyToItemHandler>{ 0x46C8E78E,0xB948,0x5EF3,{ 0xB8,0x45,0xB2,0x78,0xB5,0x91,0x8B,0xA9 } }; // 46C8E78E-B948-5EF3-B845-B278B5918BA9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::SectionsInViewChangedEventHandler>{ 0x830D582C,0x80FB,0x5AEA,{ 0xBC,0xB2,0xF1,0x51,0x74,0x0F,0xF7,0x92 } }; // 830D582C-80FB-5AEA-BCB2-F151740FF792
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventHandler>{ 0xA232390D,0x0E34,0x595E,{ 0x89,0x31,0xFA,0x92,0x8A,0x99,0x09,0xF4 } }; // A232390D-0E34-595E-8931-FA928A9909F4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler>{ 0x4CC95C52,0x8A54,0x53B7,{ 0x92,0x51,0x0B,0x3E,0xFA,0x60,0x53,0x98 } }; // 4CC95C52-8A54-53B7-9251-0B3EFA605398
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::TextChangedEventHandler>{ 0x5D8DDCFF,0x45D8,0x5E7C,{ 0x9B,0x8B,0xC4,0x1D,0x28,0x93,0xC6,0xA1 } }; // 5D8DDCFF-45D8-5E7C-9B8B-C41D2893C6A1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::TextControlPasteEventHandler>{ 0xDDF3A6C0,0x5AB1,0x5D74,{ 0x82,0x89,0x89,0x2C,0x06,0x14,0x65,0x8F } }; // DDF3A6C0-5AB1-5D74-8289-892C0614658F
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::AnchorRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IAnchorRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::AnimatedIcon>{ using type = winrt::Microsoft::UI::Xaml::Controls::IAnimatedIcon; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::AnimatedIconSource>{ using type = winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSource; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::AnimatedVisualPlayer>{ using type = winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBar>{ using type = winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBar; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBarDetailLabelRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarDetailLabelRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBarLabel>{ using type = winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarLabel; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarScrollingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::AppBar>{ using type = winrt::Microsoft::UI::Xaml::Controls::IAppBar; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::AppBarButton>{ using type = winrt::Microsoft::UI::Xaml::Controls::IAppBarButton; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::AppBarElementContainer>{ using type = winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainer; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::AppBarSeparator>{ using type = winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparator; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::AppBarToggleButton>{ using type = winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButton; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBox>{ using type = winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBox; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::BitmapIcon>{ using type = winrt::Microsoft::UI::Xaml::Controls::IBitmapIcon; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::BitmapIconSource>{ using type = winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSource; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Border>{ using type = winrt::Microsoft::UI::Xaml::Controls::IBorder; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::BreadcrumbBar>{ using type = winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBar; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::BreadcrumbBarItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::BreadcrumbBarItemClickedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItemClickedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Button>{ using type = winrt::Microsoft::UI::Xaml::Controls::IButton; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::CalendarDatePicker>{ using type = winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePicker; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::CalendarView>{ using type = winrt::Microsoft::UI::Xaml::Controls::ICalendarView; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::CalendarViewDayItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Canvas>{ using type = winrt::Microsoft::UI::Xaml::Controls::ICanvas; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::CheckBox>{ using type = winrt::Microsoft::UI::Xaml::Controls::ICheckBox; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ChoosingItemContainerEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IChoosingItemContainerEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ColorChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IColorChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ColorPicker>{ using type = winrt::Microsoft::UI::Xaml::Controls::IColorPicker; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ColumnDefinition>{ using type = winrt::Microsoft::UI::Xaml::Controls::IColumnDefinition; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ColumnDefinitionCollection>{ using type = winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Controls::ColumnDefinition>; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ComboBox>{ using type = winrt::Microsoft::UI::Xaml::Controls::IComboBox; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ComboBoxItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::IComboBoxItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IComboBoxTextSubmittedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::CommandBar>{ using type = winrt::Microsoft::UI::Xaml::Controls::ICommandBar; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::CommandBarFlyout>{ using type = winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::CommandBarOverflowPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::ICommandBarOverflowPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IContainerContentChangingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ContentControl>{ using type = winrt::Microsoft::UI::Xaml::Controls::IContentControl; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ContentDialog>{ using type = winrt::Microsoft::UI::Xaml::Controls::IContentDialog; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickDeferral>{ using type = winrt::Microsoft::UI::Xaml::Controls::IContentDialogButtonClickDeferral; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IContentDialogButtonClickEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ContentDialogClosedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ContentDialogClosingDeferral>{ using type = winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosingDeferral; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ContentDialogOpenedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IContentDialogOpenedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ContentPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::IContentPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ContextMenuEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IContextMenuEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Control>{ using type = winrt::Microsoft::UI::Xaml::Controls::IControl; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ControlTemplate>{ using type = winrt::Microsoft::UI::Xaml::Controls::IControlTemplate; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::CoreWebView2InitializedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ICoreWebView2InitializedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector>{ using type = winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelector; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::DatePickedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IDatePickedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::DatePicker>{ using type = winrt::Microsoft::UI::Xaml::Controls::IDatePicker; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::DatePickerFlyout>{ using type = winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyout; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::DatePickerFlyoutItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::DatePickerFlyoutPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IDatePickerSelectedValueChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::DatePickerValueChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IDatePickerValueChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::DragItemsCompletedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IDragItemsCompletedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::DragItemsStartingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IDragItemsStartingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::DropDownButton>{ using type = winrt::Microsoft::UI::Xaml::Controls::IDropDownButton; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Expander>{ using type = winrt::Microsoft::UI::Xaml::Controls::IExpander; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ExpanderCollapsedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IExpanderCollapsedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ExpanderExpandingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IExpanderExpandingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ExpanderTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::IExpanderTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::FlipView>{ using type = winrt::Microsoft::UI::Xaml::Controls::IFlipView; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::FlipViewItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::IFlipViewItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Flyout>{ using type = winrt::Microsoft::UI::Xaml::Controls::IFlyout; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::FlyoutPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::FocusDisengagedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IFocusDisengagedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::FocusEngagedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IFocusEngagedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::FontIcon>{ using type = winrt::Microsoft::UI::Xaml::Controls::IFontIcon; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::FontIconSource>{ using type = winrt::Microsoft::UI::Xaml::Controls::IFontIconSource; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Frame>{ using type = winrt::Microsoft::UI::Xaml::Controls::IFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Grid>{ using type = winrt::Microsoft::UI::Xaml::Controls::IGrid; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::GridView>{ using type = winrt::Microsoft::UI::Xaml::Controls::IGridView; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::GridViewHeaderItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::IGridViewHeaderItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::GridViewItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::IGridViewItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::GroupItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::IGroupItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::GroupStyle>{ using type = winrt::Microsoft::UI::Xaml::Controls::IGroupStyle; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::GroupStyleSelector>{ using type = winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelector; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::HasValidationErrorsChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IHasValidationErrorsChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Hub>{ using type = winrt::Microsoft::UI::Xaml::Controls::IHub; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::HubSection>{ using type = winrt::Microsoft::UI::Xaml::Controls::IHubSection; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::HubSectionCollection>{ using type = winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Controls::HubSection>; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::HyperlinkButton>{ using type = winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButton; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::IconElement>{ using type = winrt::Microsoft::UI::Xaml::Controls::IIconElement; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::IconSource>{ using type = winrt::Microsoft::UI::Xaml::Controls::IIconSource; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::IconSourceElement>{ using type = winrt::Microsoft::UI::Xaml::Controls::IIconSourceElement; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Image>{ using type = winrt::Microsoft::UI::Xaml::Controls::IImage; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ImageIcon>{ using type = winrt::Microsoft::UI::Xaml::Controls::IImageIcon; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ImageIconSource>{ using type = winrt::Microsoft::UI::Xaml::Controls::IImageIconSource; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::InfoBadge>{ using type = winrt::Microsoft::UI::Xaml::Controls::IInfoBadge; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::InfoBadgeTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::InfoBar>{ using type = winrt::Microsoft::UI::Xaml::Controls::IInfoBar; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::InfoBarClosedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::InfoBarTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemClickEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemClickEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemCollection>{ using type = winrt::Windows::Foundation::Collections::IObservableVector<winrt::Windows::Foundation::IInspectable>; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransition>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransition; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionCompletedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionCompletedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionProgress>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProgress; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionProvider>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProvider; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemContainer>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemContainer; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemContainerGenerator>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemContainerGenerator; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemsControl>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemsControl; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemsPanelTemplate>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemsPanelTemplate; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemsPickedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemsPickedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemsPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemsPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeater>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementClearingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementIndexChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementPreparedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterScrollHost>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterScrollHost; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemsSourceView>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemsSourceView; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemsStackPanel>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemsStackPanel; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemsView>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemsView; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemsViewItemInvokedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemsViewItemInvokedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemsViewSelectionChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemsViewSelectionChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ItemsWrapGrid>{ using type = winrt::Microsoft::UI::Xaml::Controls::IItemsWrapGrid; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Layout>{ using type = winrt::Microsoft::UI::Xaml::Controls::ILayout; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::LayoutContext>{ using type = winrt::Microsoft::UI::Xaml::Controls::ILayoutContext; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayout>{ using type = winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayout; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayoutItemCollectionTransitionProvider>{ using type = winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemCollectionTransitionProvider; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayoutItemsInfoRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemsInfoRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ListBox>{ using type = winrt::Microsoft::UI::Xaml::Controls::IListBox; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ListBoxItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::IListBoxItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ListPickerFlyout>{ using type = winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyout; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ListPickerFlyoutPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyoutPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ListView>{ using type = winrt::Microsoft::UI::Xaml::Controls::IListView; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ListViewBase>{ using type = winrt::Microsoft::UI::Xaml::Controls::IListViewBase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ListViewHeaderItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::IListViewHeaderItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ListViewItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::IListViewItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ListViewPersistenceHelper>{ using type = winrt::Microsoft::UI::Xaml::Controls::IListViewPersistenceHelper; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MapControl>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMapControl; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MapControlMapServiceErrorOccurredEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMapControlMapServiceErrorOccurredEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MapElement>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMapElement; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MapElementClickEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMapElementClickEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MapElementsLayer>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayer; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MapIcon>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMapIcon; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MapLayer>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMapLayer; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MediaPlayerElement>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElement; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MediaPlayerPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MediaTransportControls>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControls; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MediaTransportControlsHelper>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsHelper; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MenuBar>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMenuBar; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MenuBarItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMenuBarItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MenuBarItemFlyout>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MenuFlyout>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMenuFlyout; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutSeparator>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSeparator; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSubItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::NavigationView>{ using type = winrt::Microsoft::UI::Xaml::Controls::INavigationView; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemBase>{ using type = winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemCollapsedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemCollapsedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemExpandingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemExpandingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemHeader>{ using type = winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemHeader; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator>{ using type = winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayout>{ using type = winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayout; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext>{ using type = winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::NumberBox>{ using type = winrt::Microsoft::UI::Xaml::Controls::INumberBox; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::NumberBoxValueChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::INumberBoxValueChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Page>{ using type = winrt::Microsoft::UI::Xaml::Controls::IPage; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Panel>{ using type = winrt::Microsoft::UI::Xaml::Controls::IPanel; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ParallaxView>{ using type = winrt::Microsoft::UI::Xaml::Controls::IParallaxView; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::PasswordBox>{ using type = winrt::Microsoft::UI::Xaml::Controls::IPasswordBox; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::PathIcon>{ using type = winrt::Microsoft::UI::Xaml::Controls::IPathIcon; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::PathIconSource>{ using type = winrt::Microsoft::UI::Xaml::Controls::IPathIconSource; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::PersonPicture>{ using type = winrt::Microsoft::UI::Xaml::Controls::IPersonPicture; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::PersonPictureTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::PickerConfirmedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IPickerConfirmedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::PickerFlyout>{ using type = winrt::Microsoft::UI::Xaml::Controls::IPickerFlyout; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::PickerFlyoutPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::IPickerFlyoutPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::PipsPager>{ using type = winrt::Microsoft::UI::Xaml::Controls::IPipsPager; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::PipsPagerSelectedIndexChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IPipsPagerSelectedIndexChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::PipsPagerTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::IPipsPagerTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Pivot>{ using type = winrt::Microsoft::UI::Xaml::Controls::IPivot; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::PivotItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::IPivotItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::PivotItemEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IPivotItemEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ProgressBar>{ using type = winrt::Microsoft::UI::Xaml::Controls::IProgressBar; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ProgressBarTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::IProgressBarTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ProgressRing>{ using type = winrt::Microsoft::UI::Xaml::Controls::IProgressRing; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ProgressRingTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::IProgressRingTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RadioButton>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRadioButton; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RadioButtons>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRadioButtons; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RatingControl>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRatingControl; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RatingItemFontInfo>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfo; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RatingItemImageInfo>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfo; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RatingItemInfo>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfo; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RefreshContainer>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRefreshContainer; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RefreshVisualizer>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizer; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RelativePanel>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRelativePanel; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RevealListViewItemPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RichEditBox>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRichEditBox; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RichEditBoxSelectionChangingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxSelectionChangingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RichTextBlock>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRichTextBlock; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RichTextBlockOverflow>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RowDefinition>{ using type = winrt::Microsoft::UI::Xaml::Controls::IRowDefinition; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::RowDefinitionCollection>{ using type = winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Controls::RowDefinition>; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ScrollContentPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::IScrollContentPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ScrollView>{ using type = winrt::Microsoft::UI::Xaml::Controls::IScrollView; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ScrollViewer>{ using type = winrt::Microsoft::UI::Xaml::Controls::IScrollViewer; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ScrollViewerView>{ using type = winrt::Microsoft::UI::Xaml::Controls::IScrollViewerView; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ScrollingAnchorRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IScrollingAnchorRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ScrollingBringingIntoViewEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IScrollingBringingIntoViewEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollAnimationStartingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollAnimationStartingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollCompletedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollCompletedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollOptions>{ using type = winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollOptions; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomAnimationStartingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomAnimationStartingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomCompletedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomCompletedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomOptions>{ using type = winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomOptions; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SectionsInViewChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SelectorBar>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISelectorBar; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SelectorBarItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISelectorBarItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SelectorBarSelectionChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISelectorBarSelectionChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SemanticZoom>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISemanticZoom; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SemanticZoomLocation>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SemanticZoomViewChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Slider>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISlider; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SplitButton>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISplitButton; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SplitView>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISplitView; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SplitViewPaneClosingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::StackLayout>{ using type = winrt::Microsoft::UI::Xaml::Controls::IStackLayout; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::StackPanel>{ using type = winrt::Microsoft::UI::Xaml::Controls::IStackPanel; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::StyleSelector>{ using type = winrt::Microsoft::UI::Xaml::Controls::IStyleSelector; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SwapChainBackgroundPanel>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISwapChainBackgroundPanel; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SwapChainPanel>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanel; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SwipeControl>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISwipeControl; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SwipeItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISwipeItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SwipeItems>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISwipeItems; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SymbolIcon>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISymbolIcon; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::SymbolIconSource>{ using type = winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSource; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TabView>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITabView; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TabViewItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITabViewItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TabViewItemTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TabViewTabCloseRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITabViewTabCloseRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TabViewTabDragCompletedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDragCompletedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TabViewTabDragStartingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDragStartingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TabViewTabDroppedOutsideEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDroppedOutsideEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TeachingTip>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITeachingTip; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TeachingTipClosedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TeachingTipClosingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TextBlock>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITextBlock; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TextBox>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITextBox; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITextBoxSelectionChangingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TextBoxTextChangingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITextBoxTextChangingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TextChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITextChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TextCommandBarFlyout>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITextCompositionChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITextCompositionEndedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITextCompositionStartedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TextControlPasteEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITextControlPasteEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TimePickedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITimePickedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TimePicker>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITimePicker; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TimePickerFlyout>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyout; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TimePickerFlyoutPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TimePickerSelectedValueChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITimePickerSelectedValueChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TimePickerValueChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITimePickerValueChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ToggleMenuFlyoutItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ToggleSplitButton>{ using type = winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButton; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ToggleSwitch>{ using type = winrt::Microsoft::UI::Xaml::Controls::IToggleSwitch; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ToolTip>{ using type = winrt::Microsoft::UI::Xaml::Controls::IToolTip; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::ToolTipService>{ using type = winrt::Microsoft::UI::Xaml::Controls::IToolTipService; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TreeView>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITreeView; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TreeViewItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITreeViewItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TreeViewList>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITreeViewList; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TreeViewNode>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITreeViewNode; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TreeViewSelectionChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITreeViewSelectionChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::TwoPaneView>{ using type = winrt::Microsoft::UI::Xaml::Controls::ITwoPaneView; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::UIElementCollection>{ using type = winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::UIElement>; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::UniformGridLayout>{ using type = winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayout; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::UserControl>{ using type = winrt::Microsoft::UI::Xaml::Controls::IUserControl; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::VariableSizedWrapGrid>{ using type = winrt::Microsoft::UI::Xaml::Controls::IVariableSizedWrapGrid; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Viewbox>{ using type = winrt::Microsoft::UI::Xaml::Controls::IViewbox; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayout>{ using type = winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayout; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext>{ using type = winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::VirtualizingPanel>{ using type = winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanel; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::VirtualizingStackPanel>{ using type = winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanel; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::WebView2>{ using type = winrt::Microsoft::UI::Xaml::Controls::IWebView2; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::WrapGrid>{ using type = winrt::Microsoft::UI::Xaml::Controls::IWrapGrid; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::XamlControlsResources>{ using type = winrt::Microsoft::UI::Xaml::Controls::IXamlControlsResources; };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnchorRequestedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Anchor(void**) noexcept = 0;
            virtual int32_t __stdcall put_Anchor(void*) noexcept = 0;
            virtual int32_t __stdcall get_AnchorCandidates(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIcon>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall put_Source(void*) noexcept = 0;
            virtual int32_t __stdcall get_FallbackIconSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_FallbackIconSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_MirroredWhenRightToLeft(bool*) noexcept = 0;
            virtual int32_t __stdcall put_MirroredWhenRightToLeft(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall put_Source(void*) noexcept = 0;
            virtual int32_t __stdcall get_FallbackIconSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_FallbackIconSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_MirroredWhenRightToLeft(bool*) noexcept = 0;
            virtual int32_t __stdcall put_MirroredWhenRightToLeft(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSourceFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSourceStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FallbackIconSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MirroredWhenRightToLeftProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_StateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall SetState(void*, void*) noexcept = 0;
            virtual int32_t __stdcall GetState(void*, void**) noexcept = 0;
            virtual int32_t __stdcall get_SourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FallbackIconSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MirroredWhenRightToLeftProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_RootVisual(void**) noexcept = 0;
            virtual int32_t __stdcall get_Size(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall get_Duration(int64_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateAnimations() noexcept = 0;
            virtual int32_t __stdcall DestroyAnimations() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Diagnostics(void**) noexcept = 0;
            virtual int32_t __stdcall get_Duration(int64_t*) noexcept = 0;
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall put_Source(void*) noexcept = 0;
            virtual int32_t __stdcall get_FallbackContent(void**) noexcept = 0;
            virtual int32_t __stdcall put_FallbackContent(void*) noexcept = 0;
            virtual int32_t __stdcall get_AutoPlay(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AutoPlay(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsAnimatedVisualLoaded(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsPlaying(bool*) noexcept = 0;
            virtual int32_t __stdcall get_PlaybackRate(double*) noexcept = 0;
            virtual int32_t __stdcall put_PlaybackRate(double) noexcept = 0;
            virtual int32_t __stdcall get_ProgressObject(void**) noexcept = 0;
            virtual int32_t __stdcall get_Stretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Stretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall Pause() noexcept = 0;
            virtual int32_t __stdcall PlayAsync(double, double, bool, void**) noexcept = 0;
            virtual int32_t __stdcall Resume() noexcept = 0;
            virtual int32_t __stdcall SetProgress(double) noexcept = 0;
            virtual int32_t __stdcall Stop() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AnimationOptimization(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_AnimationOptimization(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AutoPlayProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DiagnosticsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DurationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FallbackContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsAnimatedVisualLoadedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPlayingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaybackRateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StretchProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AnimationOptimizationProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall TryCreateAnimatedVisual(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Markers(void**) noexcept = 0;
            virtual int32_t __stdcall SetColorProperty(void*, struct struct_Windows_UI_Color) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource3>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall TryCreateAnimatedVisual(void*, void**, bool, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBar>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ScrollController(void**) noexcept = 0;
            virtual int32_t __stdcall get_Labels(void**) noexcept = 0;
            virtual int32_t __stdcall put_Labels(void*) noexcept = 0;
            virtual int32_t __stdcall get_LabelTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_LabelTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_DetailLabelTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_DetailLabelTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_SmallChange(double*) noexcept = 0;
            virtual int32_t __stdcall put_SmallChange(double) noexcept = 0;
            virtual int32_t __stdcall add_Scrolling(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Scrolling(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DetailLabelRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DetailLabelRequested(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarDetailLabelRequestedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollOffset(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarLabel>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall get_ScrollOffset(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarLabelFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, double, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarScrollingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ScrollOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollingEventKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_LabelsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LabelTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DetailLabelTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SmallChangeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAppBar>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSticky(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSticky(bool) noexcept = 0;
            virtual int32_t __stdcall get_ClosedDisplayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ClosedDisplayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LightDismissOverlayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_Opening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Opening(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Opened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Opened(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closing(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closing(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closed(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAppBarButton>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Label(void**) noexcept = 0;
            virtual int32_t __stdcall put_Label(void*) noexcept = 0;
            virtual int32_t __stdcall get_Icon(void**) noexcept = 0;
            virtual int32_t __stdcall put_Icon(void*) noexcept = 0;
            virtual int32_t __stdcall get_LabelPosition(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LabelPosition(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_KeyboardAcceleratorTextOverride(void**) noexcept = 0;
            virtual int32_t __stdcall put_KeyboardAcceleratorTextOverride(void*) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAppBarButtonFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAppBarButtonStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_LabelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LabelPositionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_KeyboardAcceleratorTextOverrideProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsCompactProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsInOverflowProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DynamicOverflowOrderProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainer>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainerFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsCompactProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsInOverflowProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DynamicOverflowOrderProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAppBarFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAppBarOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall OnClosed(void*) noexcept = 0;
            virtual int32_t __stdcall OnOpened(void*) noexcept = 0;
            virtual int32_t __stdcall OnClosing(void*) noexcept = 0;
            virtual int32_t __stdcall OnOpening(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparator>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparatorFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparatorStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsCompactProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsInOverflowProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DynamicOverflowOrderProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAppBarStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsStickyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ClosedDisplayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButton>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Label(void**) noexcept = 0;
            virtual int32_t __stdcall put_Label(void*) noexcept = 0;
            virtual int32_t __stdcall get_Icon(void**) noexcept = 0;
            virtual int32_t __stdcall put_Icon(void*) noexcept = 0;
            virtual int32_t __stdcall get_LabelPosition(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LabelPosition(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_KeyboardAcceleratorTextOverride(void**) noexcept = 0;
            virtual int32_t __stdcall put_KeyboardAcceleratorTextOverride(void*) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButtonFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButtonStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_LabelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LabelPositionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_KeyboardAcceleratorTextOverrideProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsCompactProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsInOverflowProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DynamicOverflowOrderProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBox>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_MaxSuggestionListHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxSuggestionListHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_IsSuggestionListOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSuggestionListOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_TextMemberPath(void**) noexcept = 0;
            virtual int32_t __stdcall put_TextMemberPath(void*) noexcept = 0;
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall get_UpdateTextOnSelect(bool*) noexcept = 0;
            virtual int32_t __stdcall put_UpdateTextOnSelect(bool) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderText(void*) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_AutoMaximizeSuggestionArea(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AutoMaximizeSuggestionArea(bool) noexcept = 0;
            virtual int32_t __stdcall get_TextBoxStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_TextBoxStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_QueryIcon(void**) noexcept = 0;
            virtual int32_t __stdcall put_QueryIcon(void*) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LightDismissOverlayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Description(void**) noexcept = 0;
            virtual int32_t __stdcall put_Description(void*) noexcept = 0;
            virtual int32_t __stdcall add_SuggestionChosen(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SuggestionChosen(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_QuerySubmitted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_QuerySubmitted(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_QueryText(void**) noexcept = 0;
            virtual int32_t __stdcall get_ChosenSuggestion(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_MaxSuggestionListHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSuggestionListOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextMemberPathProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_UpdateTextOnSelectProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AutoMaximizeSuggestionAreaProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextBoxStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_QueryIconProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DescriptionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Reason(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Reason(int32_t) noexcept = 0;
            virtual int32_t __stdcall CheckCurrent(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ReasonProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IBitmapIcon>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_UriSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_UriSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_ShowAsMonochrome(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShowAsMonochrome(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_UriSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_UriSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_ShowAsMonochrome(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShowAsMonochrome(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_UriSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShowAsMonochromeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_UriSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShowAsMonochromeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IBorder>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_BorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_BorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_BorderThickness(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_BorderThickness(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_Background(void**) noexcept = 0;
            virtual int32_t __stdcall put_Background(void*) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundSizing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundSizing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius*) noexcept = 0;
            virtual int32_t __stdcall put_CornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_Child(void**) noexcept = 0;
            virtual int32_t __stdcall put_Child(void*) noexcept = 0;
            virtual int32_t __stdcall get_ChildTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_ChildTransitions(void*) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundTransition(void**) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundTransition(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IBorderStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_BorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundSizingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadiusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ChildTransitionsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBar>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall add_ItemClicked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ItemClicked(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItemClickedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Index(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IButton>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Flyout(void**) noexcept = 0;
            virtual int32_t __stdcall put_Flyout(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IButtonFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IButtonStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FlyoutProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePicker>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Date(void**) noexcept = 0;
            virtual int32_t __stdcall put_Date(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsCalendarOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsCalendarOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_DateFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_DateFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderText(void*) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_CalendarViewStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarViewStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LightDismissOverlayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Description(void**) noexcept = 0;
            virtual int32_t __stdcall put_Description(void*) noexcept = 0;
            virtual int32_t __stdcall get_MinDate(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinDate(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxDate(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxDate(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_IsTodayHighlighted(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTodayHighlighted(bool) noexcept = 0;
            virtual int32_t __stdcall get_DisplayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DisplayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FirstDayOfWeek(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FirstDayOfWeek(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DayOfWeekFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_DayOfWeekFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_CalendarIdentifier(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarIdentifier(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsOutOfScopeEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsOutOfScopeEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsGroupLabelVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsGroupLabelVisible(bool) noexcept = 0;
            virtual int32_t __stdcall add_CalendarViewDayItemChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CalendarViewDayItemChanging(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DateChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Opened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Opened(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall SetDisplayDate(int64_t) noexcept = 0;
            virtual int32_t __stdcall SetYearDecadeDisplayDimensions(int32_t, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_NewDate(void**) noexcept = 0;
            virtual int32_t __stdcall get_OldDate(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsCalendarOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DateFormatProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarViewStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DescriptionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinDateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxDateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTodayHighlightedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstDayOfWeekProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayOfWeekFormatProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarIdentifierProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsOutOfScopeEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsGroupLabelVisibleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICalendarView>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CalendarIdentifier(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarIdentifier(void*) noexcept = 0;
            virtual int32_t __stdcall get_DayOfWeekFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_DayOfWeekFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsGroupLabelVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsGroupLabelVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_DisplayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DisplayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FirstDayOfWeek(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FirstDayOfWeek(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsOutOfScopeEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsOutOfScopeEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsTodayHighlighted(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTodayHighlighted(bool) noexcept = 0;
            virtual int32_t __stdcall get_MaxDate(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxDate(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_MinDate(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinDate(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_NumberOfWeeksInView(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_NumberOfWeeksInView(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedDates(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall get_FocusBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_FocusBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedHoverBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedHoverBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPressedBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedPressedBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedDisabledBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedDisabledBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_HoverBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_HoverBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_PressedBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_PressedBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_TodaySelectedInnerBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_TodaySelectedInnerBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_BlackoutStrikethroughBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_BlackoutStrikethroughBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarItemBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_BlackoutBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_BlackoutBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_OutOfScopeBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_OutOfScopeBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarItemBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemHoverBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarItemHoverBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemPressedBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarItemPressedBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemDisabledBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarItemDisabledBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_TodayBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_TodayBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_TodayBlackoutBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_TodayBlackoutBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_TodayHoverBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_TodayHoverBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_TodayPressedBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_TodayPressedBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_TodayDisabledBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_TodayDisabledBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_PressedForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_PressedForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_TodayForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_TodayForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_BlackoutForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_BlackoutForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_TodayBlackoutForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_TodayBlackoutForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedHoverForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedHoverForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPressedForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedPressedForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedDisabledForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedDisabledForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_OutOfScopeForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_OutOfScopeForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_OutOfScopeHoverForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_OutOfScopeHoverForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_OutOfScopePressedForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_OutOfScopePressedForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarItemForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_DisabledForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_DisabledForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_DayItemFontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_DayItemFontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_DayItemFontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_DayItemFontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_DayItemFontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DayItemFontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DayItemFontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_DayItemFontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_TodayFontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_TodayFontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelFontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfMonthLabelFontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelFontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfMonthLabelFontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelFontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfMonthLabelFontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelFontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfMonthLabelFontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemFontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_MonthYearItemFontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemFontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_MonthYearItemFontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemFontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MonthYearItemFontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemFontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_MonthYearItemFontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelFontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfYearDecadeLabelFontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelFontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfYearDecadeLabelFontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelFontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfYearDecadeLabelFontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelFontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfYearDecadeLabelFontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_DayItemMargin(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_DayItemMargin(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemMargin(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_MonthYearItemMargin(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelMargin(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfMonthLabelMargin(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelMargin(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_FirstOfYearDecadeLabelMargin(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalDayItemAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalDayItemAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalDayItemAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalDayItemAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalFirstOfMonthLabelAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalFirstOfMonthLabelAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalFirstOfMonthLabelAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalFirstOfMonthLabelAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemBorderThickness(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_CalendarItemBorderThickness(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_CalendarViewDayItemStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarViewDayItemStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemCornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius*) noexcept = 0;
            virtual int32_t __stdcall put_CalendarItemCornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius) noexcept = 0;
            virtual int32_t __stdcall add_CalendarViewDayItemChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CalendarViewDayItemChanging(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SelectedDatesChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectedDatesChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall SetDisplayDate(int64_t) noexcept = 0;
            virtual int32_t __stdcall SetYearDecadeDisplayDimensions(int32_t, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsBlackout(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsBlackout(bool) noexcept = 0;
            virtual int32_t __stdcall get_Date(int64_t*) noexcept = 0;
            virtual int32_t __stdcall SetDensityColors(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_InRecycleQueue(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall get_Phase(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall RegisterUpdateCallback(void*) noexcept = 0;
            virtual int32_t __stdcall RegisterUpdateCallbackWithPhase(uint32_t, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsBlackoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AddedDates(void**) noexcept = 0;
            virtual int32_t __stdcall get_RemovedDates(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CalendarIdentifierProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayOfWeekFormatProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsGroupLabelVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstDayOfWeekProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsOutOfScopeEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTodayHighlightedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxDateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinDateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_NumberOfWeeksInViewProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedDatesProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettingsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FocusBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedHoverBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPressedBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedDisabledBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HoverBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PressedBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TodaySelectedInnerBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BlackoutStrikethroughBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BlackoutBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OutOfScopeBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemHoverBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemPressedBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemDisabledBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TodayBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TodayBlackoutBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TodayHoverBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TodayPressedBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TodayDisabledBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PressedForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TodayForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BlackoutForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TodayBlackoutForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedHoverForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPressedForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedDisabledForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OutOfScopeForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OutOfScopeHoverForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OutOfScopePressedForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisabledForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayItemFontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayItemFontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayItemFontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayItemFontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TodayFontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelFontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelFontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelFontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelFontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemFontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemFontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemFontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemFontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelFontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelFontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelFontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelFontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayItemMarginProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MonthYearItemMarginProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfMonthLabelMarginProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FirstOfYearDecadeLabelMarginProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalDayItemAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalDayItemAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalFirstOfMonthLabelAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalFirstOfMonthLabelAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemBorderThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarViewDayItemStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarItemCornerRadiusProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Bounds(winrt::Windows::Foundation::Rect*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICanvas>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICanvasFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICanvasStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_LeftProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetLeft(void*, double*) noexcept = 0;
            virtual int32_t __stdcall SetLeft(void*, double) noexcept = 0;
            virtual int32_t __stdcall get_TopProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetTop(void*, double*) noexcept = 0;
            virtual int32_t __stdcall SetTop(void*, double) noexcept = 0;
            virtual int32_t __stdcall get_ZIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetZIndex(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetZIndex(void*, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICheckBox>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICheckBoxFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_GroupHeaderContainer(void**) noexcept = 0;
            virtual int32_t __stdcall put_GroupHeaderContainer(void*) noexcept = 0;
            virtual int32_t __stdcall get_GroupIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Group(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IChoosingItemContainerEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainer(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemContainer(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsContainerPrepared(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsContainerPrepared(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Value(void**) noexcept = 0;
            virtual int32_t __stdcall get_UIElement(void**) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IColorChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldColor(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall get_NewColor(struct struct_Windows_UI_Color*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IColorPicker>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Color(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_Color(struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall get_PreviousColor(void**) noexcept = 0;
            virtual int32_t __stdcall put_PreviousColor(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsAlphaEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsColorSpectrumVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorSpectrumVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsColorPreviewVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorPreviewVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsColorSliderVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorSliderVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaSliderVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsAlphaSliderVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsMoreButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsMoreButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsColorChannelTextInputVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorChannelTextInputVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaTextInputVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsAlphaTextInputVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsHexInputVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHexInputVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_MinHue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinHue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxHue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxHue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinSaturation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinSaturation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxSaturation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxSaturation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinValue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxValue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ColorSpectrumShape(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ColorSpectrumShape(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ColorSpectrumComponents(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ColorSpectrumComponents(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_ColorChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ColorChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IColorPicker2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IColorPickerFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IColorPickerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreviousColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorSpectrumVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorPreviewVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorSliderVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaSliderVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsMoreButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorChannelTextInputVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaTextInputVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsHexInputVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinHueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxHueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinSaturationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxSaturationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ColorSpectrumShapeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ColorSpectrumComponentsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IColorPickerStatics2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IColumnDefinition>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Width(struct struct_Microsoft_UI_Xaml_GridLength*) noexcept = 0;
            virtual int32_t __stdcall put_Width(struct struct_Microsoft_UI_Xaml_GridLength) noexcept = 0;
            virtual int32_t __stdcall get_MaxWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_MinWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_ActualWidth(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IColumnDefinitionStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_WidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinWidthProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IComboBox>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDropDownOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsDropDownOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsEditable(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsEditable(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSelectionBoxHighlighted(bool*) noexcept = 0;
            virtual int32_t __stdcall get_MaxDropDownHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxDropDownHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_SelectionBoxItem(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionBoxItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderText(void*) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LightDismissOverlayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsTextSearchEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextSearchEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_SelectionChangedTrigger(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionChangedTrigger(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall get_TextBoxStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_TextBoxStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_Description(void**) noexcept = 0;
            virtual int32_t __stdcall put_Description(void*) noexcept = 0;
            virtual int32_t __stdcall add_DropDownClosed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DropDownClosed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DropDownOpened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DropDownOpened(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextSubmitted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextSubmitted(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IComboBoxFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IComboBoxItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IComboBoxItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IComboBoxOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall OnDropDownClosed(void*) noexcept = 0;
            virtual int32_t __stdcall OnDropDownOpened(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IComboBoxStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsEditableProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsDropDownOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxDropDownHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextSearchEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionChangedTriggerProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextBoxStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DescriptionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IComboBoxTextSubmittedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICommandBar>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PrimaryCommands(void**) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryCommands(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandBarOverflowPresenterStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_CommandBarOverflowPresenterStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_CommandBarTemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall get_DefaultLabelPosition(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DefaultLabelPosition(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_OverflowButtonVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_OverflowButtonVisibility(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsDynamicOverflowEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsDynamicOverflowEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall add_DynamicOverflowItemsChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DynamicOverflowItemsChanging(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICommandBarElement>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsCompact(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsCompact(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsInOverflow(bool*) noexcept = 0;
            virtual int32_t __stdcall get_DynamicOverflowOrder(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DynamicOverflowOrder(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PrimaryCommands(void**) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryCommands(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AlwaysExpanded(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AlwaysExpanded(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICommandBarOverflowPresenter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICommandBarStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PrimaryCommandsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryCommandsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandBarOverflowPresenterStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DefaultLabelPositionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OverflowButtonVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsDynamicOverflowEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContainerContentChangingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemContainer(void**) noexcept = 0;
            virtual int32_t __stdcall get_InRecycleQueue(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ItemIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall get_Phase(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall RegisterUpdateCallback(void*) noexcept = 0;
            virtual int32_t __stdcall RegisterUpdateCallbackWithPhase(uint32_t, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContentControl>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplateSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTemplateSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTransitions(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplateRoot(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContentControlFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall OnContentChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnContentTemplateChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnContentTemplateSelectorChanged(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContentControlStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplateSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTransitionsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContentDialog>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Title(void**) noexcept = 0;
            virtual int32_t __stdcall put_Title(void*) noexcept = 0;
            virtual int32_t __stdcall get_TitleTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_TitleTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_FullSizeDesired(bool*) noexcept = 0;
            virtual int32_t __stdcall put_FullSizeDesired(bool) noexcept = 0;
            virtual int32_t __stdcall get_PrimaryButtonText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PrimaryButtonText(void*) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryButtonText(void**) noexcept = 0;
            virtual int32_t __stdcall put_SecondaryButtonText(void*) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonText(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonText(void*) noexcept = 0;
            virtual int32_t __stdcall get_PrimaryButtonCommand(void**) noexcept = 0;
            virtual int32_t __stdcall put_PrimaryButtonCommand(void*) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryButtonCommand(void**) noexcept = 0;
            virtual int32_t __stdcall put_SecondaryButtonCommand(void*) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommand(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonCommand(void*) noexcept = 0;
            virtual int32_t __stdcall get_PrimaryButtonCommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_PrimaryButtonCommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryButtonCommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_SecondaryButtonCommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonCommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsPrimaryButtonEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPrimaryButtonEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSecondaryButtonEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSecondaryButtonEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_PrimaryButtonStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_PrimaryButtonStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryButtonStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_SecondaryButtonStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_DefaultButton(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DefaultButton(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_Closing(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closing(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Opened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Opened(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PrimaryButtonClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PrimaryButtonClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SecondaryButtonClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SecondaryButtonClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_CloseButtonClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CloseButtonClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall Hide() noexcept = 0;
            virtual int32_t __stdcall ShowAsync(void**) noexcept = 0;
            virtual int32_t __stdcall ShowAsyncWithPlacement(int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContentDialogButtonClickDeferral>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Complete() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
            virtual int32_t __stdcall GetDeferral(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Result(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosingDeferral>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Complete() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Result(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
            virtual int32_t __stdcall GetDeferral(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContentDialogFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContentDialogOpenedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContentDialogStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TitleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TitleTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FullSizeDesiredProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PrimaryButtonTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryButtonTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PrimaryButtonCommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryButtonCommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PrimaryButtonCommandParameterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryButtonCommandParameterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommandParameterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPrimaryButtonEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSecondaryButtonEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PrimaryButtonStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryButtonStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DefaultButtonProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContentPresenter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplateSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTemplateSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTransitions(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_FontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_FontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_FontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_FontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FontStretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CharacterSpacing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CharacterSpacing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Foreground(void**) noexcept = 0;
            virtual int32_t __stdcall put_Foreground(void*) noexcept = 0;
            virtual int32_t __stdcall get_OpticalMarginAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_OpticalMarginAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextLineBounds(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextLineBounds(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsTextScaleFactorEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextScaleFactorEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundTransition(void**) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundTransition(void*) noexcept = 0;
            virtual int32_t __stdcall get_TextWrapping(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextWrapping(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxLines(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxLines(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_LineStackingStrategy(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LineStackingStrategy(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_LineHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_LineHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_BorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_BorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_BorderThickness(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_BorderThickness(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius*) noexcept = 0;
            virtual int32_t __stdcall put_CornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_Background(void**) noexcept = 0;
            virtual int32_t __stdcall put_Background(void*) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundSizing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundSizing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalContentAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalContentAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalContentAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalContentAlignment(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContentPresenterFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContentPresenterOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall OnContentTemplateChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnContentTemplateSelectorChanged(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContentPresenterStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplateSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTransitionsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CharacterSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OpticalMarginAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextLineBoundsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextScaleFactorEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextWrappingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxLinesProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LineStackingStrategyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LineHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadiusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundSizingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalContentAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalContentAlignmentProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IContextMenuEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_CursorLeft(double*) noexcept = 0;
            virtual int32_t __stdcall get_CursorTop(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IControl>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsFocusEngagementEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFocusEngagementEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsFocusEngaged(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFocusEngaged(bool) noexcept = 0;
            virtual int32_t __stdcall get_RequiresPointer(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_RequiresPointer(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_FontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_FontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_FontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_FontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FontStretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CharacterSpacing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CharacterSpacing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Foreground(void**) noexcept = 0;
            virtual int32_t __stdcall put_Foreground(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsTextScaleFactorEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextScaleFactorEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_TabNavigation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TabNavigation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Template(void**) noexcept = 0;
            virtual int32_t __stdcall put_Template(void*) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalContentAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalContentAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalContentAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalContentAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Background(void**) noexcept = 0;
            virtual int32_t __stdcall put_Background(void*) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundSizing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundSizing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_BorderThickness(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_BorderThickness(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_BorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_BorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_DefaultStyleResourceUri(void**) noexcept = 0;
            virtual int32_t __stdcall put_DefaultStyleResourceUri(void*) noexcept = 0;
            virtual int32_t __stdcall get_ElementSoundMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ElementSoundMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius*) noexcept = 0;
            virtual int32_t __stdcall put_CornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius) noexcept = 0;
            virtual int32_t __stdcall add_FocusEngaged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_FocusEngaged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_FocusDisengaged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_FocusDisengaged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_IsEnabledChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_IsEnabledChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall RemoveFocusEngagement() noexcept = 0;
            virtual int32_t __stdcall ApplyTemplate(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IControlFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IControlOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall OnPointerEntered(void*) noexcept = 0;
            virtual int32_t __stdcall OnPointerPressed(void*) noexcept = 0;
            virtual int32_t __stdcall OnPointerMoved(void*) noexcept = 0;
            virtual int32_t __stdcall OnPointerReleased(void*) noexcept = 0;
            virtual int32_t __stdcall OnPointerExited(void*) noexcept = 0;
            virtual int32_t __stdcall OnPointerCaptureLost(void*) noexcept = 0;
            virtual int32_t __stdcall OnPointerCanceled(void*) noexcept = 0;
            virtual int32_t __stdcall OnPointerWheelChanged(void*) noexcept = 0;
            virtual int32_t __stdcall OnTapped(void*) noexcept = 0;
            virtual int32_t __stdcall OnDoubleTapped(void*) noexcept = 0;
            virtual int32_t __stdcall OnHolding(void*) noexcept = 0;
            virtual int32_t __stdcall OnRightTapped(void*) noexcept = 0;
            virtual int32_t __stdcall OnManipulationStarting(void*) noexcept = 0;
            virtual int32_t __stdcall OnManipulationInertiaStarting(void*) noexcept = 0;
            virtual int32_t __stdcall OnManipulationStarted(void*) noexcept = 0;
            virtual int32_t __stdcall OnManipulationDelta(void*) noexcept = 0;
            virtual int32_t __stdcall OnManipulationCompleted(void*) noexcept = 0;
            virtual int32_t __stdcall OnKeyUp(void*) noexcept = 0;
            virtual int32_t __stdcall OnKeyDown(void*) noexcept = 0;
            virtual int32_t __stdcall OnPreviewKeyDown(void*) noexcept = 0;
            virtual int32_t __stdcall OnPreviewKeyUp(void*) noexcept = 0;
            virtual int32_t __stdcall OnGotFocus(void*) noexcept = 0;
            virtual int32_t __stdcall OnLostFocus(void*) noexcept = 0;
            virtual int32_t __stdcall OnCharacterReceived(void*) noexcept = 0;
            virtual int32_t __stdcall OnDragEnter(void*) noexcept = 0;
            virtual int32_t __stdcall OnDragLeave(void*) noexcept = 0;
            virtual int32_t __stdcall OnDragOver(void*) noexcept = 0;
            virtual int32_t __stdcall OnDrop(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IControlProtected>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DefaultStyleKey(void**) noexcept = 0;
            virtual int32_t __stdcall put_DefaultStyleKey(void*) noexcept = 0;
            virtual int32_t __stdcall GetTemplateChild(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IControlStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsFocusEngagementEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsFocusEngagedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RequiresPointerProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CharacterSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextScaleFactorEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabNavigationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalContentAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalContentAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundSizingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DefaultStyleKeyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DefaultStyleResourceUriProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ElementSoundModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadiusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTemplateFocusTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsTemplateFocusTarget(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsTemplateFocusTarget(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_IsTemplateKeyTipTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsTemplateKeyTipTarget(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsTemplateKeyTipTarget(void*, bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IControlTemplate>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetType(struct struct_Windows_UI_Xaml_Interop_TypeName*) noexcept = 0;
            virtual int32_t __stdcall put_TargetType(struct struct_Windows_UI_Xaml_Interop_TypeName) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ICoreWebView2InitializedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Exception(winrt::hresult*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelector>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall SelectTemplate(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall SelectTemplateForItem(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelectorFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelectorOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall SelectTemplateCore(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall SelectTemplateForItemCore(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDatePickedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldDate(int64_t*) noexcept = 0;
            virtual int32_t __stdcall get_NewDate(int64_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDatePicker>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_CalendarIdentifier(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarIdentifier(void*) noexcept = 0;
            virtual int32_t __stdcall get_Date(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_Date(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_DayVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_DayVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_MonthVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_MonthVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_YearVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_YearVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_DayFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_DayFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_MonthFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_MonthFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_YearFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_YearFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_MinYear(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinYear(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxYear(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxYear(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LightDismissOverlayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedDate(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedDate(void*) noexcept = 0;
            virtual int32_t __stdcall add_DateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DateChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SelectedDateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectedDateChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyout>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CalendarIdentifier(void**) noexcept = 0;
            virtual int32_t __stdcall put_CalendarIdentifier(void*) noexcept = 0;
            virtual int32_t __stdcall get_Date(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_Date(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_DayVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_DayVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_MonthVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_MonthVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_YearVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_YearVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_MinYear(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinYear(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxYear(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxYear(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_DayFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_DayFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_MonthFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_MonthFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_YearFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_YearFormat(void*) noexcept = 0;
            virtual int32_t __stdcall add_DatePicked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DatePicked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ShowAtAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PrimaryText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PrimaryText(void*) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryText(void**) noexcept = 0;
            virtual int32_t __stdcall put_SecondaryText(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItemStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PrimaryTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryTextProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDefaultShadowEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsDefaultShadowEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenterStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDefaultShadowEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CalendarIdentifierProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MonthVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_YearVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinYearProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxYearProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayFormatProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MonthFormatProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_YearFormatProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDatePickerSelectedValueChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldDate(void**) noexcept = 0;
            virtual int32_t __stdcall get_NewDate(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDatePickerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CalendarIdentifierProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MonthVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_YearVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DayFormatProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MonthFormatProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_YearFormatProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinYearProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxYearProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedDateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldDate(int64_t*) noexcept = 0;
            virtual int32_t __stdcall get_NewDate(int64_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDragItemsCompletedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
            virtual int32_t __stdcall get_DropResult(uint32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDragItemsStartingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
            virtual int32_t __stdcall get_Data(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDropDownButton>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDropDownButtonFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall add_AnimatedVisualInvalidated(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_AnimatedVisualInvalidated(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Action(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IExpander>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplateSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsExpanded(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsExpanded(bool) noexcept = 0;
            virtual int32_t __stdcall get_ExpandDirection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ExpandDirection(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_Expanding(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Expanding(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Collapsed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Collapsed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IExpanderCollapsedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IExpanderExpandingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IExpanderFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IExpanderStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsExpandedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExpandDirectionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IExpanderTemplateSettings>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_NegativeContentHeight(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFlipView>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_UseTouchAnimationsForAllNavigation(bool*) noexcept = 0;
            virtual int32_t __stdcall put_UseTouchAnimationsForAllNavigation(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFlipViewFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFlipViewItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFlipViewItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFlipViewStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_UseTouchAnimationsForAllNavigationProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFlyout>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_FlyoutPresenterStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_FlyoutPresenterStyle(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFlyoutFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDefaultShadowEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsDefaultShadowEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenterFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenterStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDefaultShadowEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFlyoutStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FlyoutPresenterStyleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFocusDisengagedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFocusEngagedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFontIcon>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Glyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_Glyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_FontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_FontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_FontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_FontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsTextScaleFactorEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextScaleFactorEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_MirroredWhenRightToLeft(bool*) noexcept = 0;
            virtual int32_t __stdcall put_MirroredWhenRightToLeft(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFontIconFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFontIconSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Glyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_Glyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_FontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_FontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_FontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_FontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsTextScaleFactorEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextScaleFactorEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_MirroredWhenRightToLeft(bool*) noexcept = 0;
            virtual int32_t __stdcall put_MirroredWhenRightToLeft(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFontIconSourceFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_GlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextScaleFactorEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MirroredWhenRightToLeftProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFontIconStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_GlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextScaleFactorEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MirroredWhenRightToLeftProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CacheSize(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CacheSize(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CanGoBack(bool*) noexcept = 0;
            virtual int32_t __stdcall get_CanGoForward(bool*) noexcept = 0;
            virtual int32_t __stdcall get_CurrentSourcePageType(struct struct_Windows_UI_Xaml_Interop_TypeName*) noexcept = 0;
            virtual int32_t __stdcall get_SourcePageType(struct struct_Windows_UI_Xaml_Interop_TypeName*) noexcept = 0;
            virtual int32_t __stdcall put_SourcePageType(struct struct_Windows_UI_Xaml_Interop_TypeName) noexcept = 0;
            virtual int32_t __stdcall get_BackStackDepth(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_BackStack(void**) noexcept = 0;
            virtual int32_t __stdcall get_ForwardStack(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsNavigationStackEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsNavigationStackEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall add_Navigated(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Navigated(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Navigating(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Navigating(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_NavigationFailed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_NavigationFailed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_NavigationStopped(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_NavigationStopped(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall GoBack() noexcept = 0;
            virtual int32_t __stdcall GoBackWithTransitionInfo(void*) noexcept = 0;
            virtual int32_t __stdcall GoForward() noexcept = 0;
            virtual int32_t __stdcall Navigate(struct struct_Windows_UI_Xaml_Interop_TypeName, void*, bool*) noexcept = 0;
            virtual int32_t __stdcall NavigateWithTransitionInfo(struct struct_Windows_UI_Xaml_Interop_TypeName, void*, void*, bool*) noexcept = 0;
            virtual int32_t __stdcall NavigateToType(struct struct_Windows_UI_Xaml_Interop_TypeName, void*, void*, bool*) noexcept = 0;
            virtual int32_t __stdcall GetNavigationState(void**) noexcept = 0;
            virtual int32_t __stdcall SetNavigationState(void*) noexcept = 0;
            virtual int32_t __stdcall SetNavigationStateWithNavigationControl(void*, bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFrameFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IFrameStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CacheSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanGoBackProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanGoForwardProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CurrentSourcePageTypeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SourcePageTypeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackStackDepthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackStackProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ForwardStackProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsNavigationStackEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IGrid>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_RowDefinitions(void**) noexcept = 0;
            virtual int32_t __stdcall get_ColumnDefinitions(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundSizing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundSizing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_BorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_BorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_BorderThickness(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_BorderThickness(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius*) noexcept = 0;
            virtual int32_t __stdcall put_CornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_RowSpacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_RowSpacing(double) noexcept = 0;
            virtual int32_t __stdcall get_ColumnSpacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_ColumnSpacing(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IGridFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IGridStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundSizingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadiusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RowSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ColumnSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RowProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetRow(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetRow(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ColumnProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetColumn(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetColumn(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_RowSpanProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetRowSpan(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetRowSpan(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ColumnSpanProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetColumnSpan(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetColumnSpan(void*, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IGridView>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IGridViewFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IGridViewHeaderItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IGridViewHeaderItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IGridViewItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IGridViewItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IGroupItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IGroupItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IGroupStyle>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Panel(void**) noexcept = 0;
            virtual int32_t __stdcall put_Panel(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContainerStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContainerStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderContainerStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderContainerStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContainerStyleSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContainerStyleSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplateSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_HidesIfEmpty(bool*) noexcept = 0;
            virtual int32_t __stdcall put_HidesIfEmpty(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelector>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall SelectGroupStyle(void*, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelectorFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelectorOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall SelectGroupStyleCore(void*, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IHasValidationErrorsChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_NewValue(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IHub>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DefaultSectionIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DefaultSectionIndex(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Sections(void**) noexcept = 0;
            virtual int32_t __stdcall get_SectionsInView(void**) noexcept = 0;
            virtual int32_t __stdcall get_SectionHeaders(void**) noexcept = 0;
            virtual int32_t __stdcall add_SectionHeaderClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SectionHeaderClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SectionsInViewChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SectionsInViewChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ScrollToSection(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IHubFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IHubSection>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsHeaderInteractive(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHeaderInteractive(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IHubSectionFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Section(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IHubSectionStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsHeaderInteractiveProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IHubStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DefaultSectionIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SemanticZoomOwnerProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsActiveViewProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomedInViewProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButton>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_NavigateUri(void**) noexcept = 0;
            virtual int32_t __stdcall put_NavigateUri(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButtonFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButtonStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_NavigateUriProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IIconElement>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Foreground(void**) noexcept = 0;
            virtual int32_t __stdcall put_Foreground(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IIconElementFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IIconElementStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ForegroundProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IIconSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Foreground(void**) noexcept = 0;
            virtual int32_t __stdcall put_Foreground(void*) noexcept = 0;
            virtual int32_t __stdcall CreateIconElement(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IIconSourceElement>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconSource(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IIconSourceElementFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IIconSourceElementStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconSourceProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IIconSourceFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IIconSourceOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateIconElementCore(void**) noexcept = 0;
            virtual int32_t __stdcall GetIconElementPropertyCore(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IIconSourceStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ForegroundProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IImage>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall put_Source(void*) noexcept = 0;
            virtual int32_t __stdcall get_Stretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Stretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_NineGrid(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_NineGrid(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall add_ImageFailed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ImageFailed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ImageOpened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ImageOpened(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall GetAsCastingSource(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlphaMask(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IImageIcon>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall put_Source(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IImageIconFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IImageIconSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ImageSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_ImageSource(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IImageIconSourceFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IImageIconSourceStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ImageSourceProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IImageIconStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SourceProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IImageStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_NineGridProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IInfoBadge>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Value(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Value(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IconSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettingsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettings>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_InfoBadgeCornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius*) noexcept = 0;
            virtual int32_t __stdcall put_InfoBadgeCornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius) noexcept = 0;
            virtual int32_t __stdcall get_IconElement(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconElement(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettingsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettingsStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_InfoBadgeCornerRadiusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconElementProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IInfoBar>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_Title(void**) noexcept = 0;
            virtual int32_t __stdcall put_Title(void*) noexcept = 0;
            virtual int32_t __stdcall get_Message(void**) noexcept = 0;
            virtual int32_t __stdcall put_Message(void*) noexcept = 0;
            virtual int32_t __stdcall get_Severity(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Severity(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IconSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsIconVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsIconVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsClosable(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsClosable(bool) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommand(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonCommand(void*) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonCommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall get_ActionButton(void**) noexcept = 0;
            virtual int32_t __stdcall put_ActionButton(void*) noexcept = 0;
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall add_CloseButtonClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CloseButtonClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closing(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closing(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closed(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Reason(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosedEventArgsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Reason(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosingEventArgsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IInfoBarFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IInfoBarStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TitleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MessageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SeverityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsIconVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsClosableProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommandParameterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ActionButtonProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettingsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettings>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconElement(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconElement(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettingsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettingsStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconElementProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IInsertionPanel>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetInsertionIndexes(winrt::Windows::Foundation::Point, int32_t*, int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemClickEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ClickedItem(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransition>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Operation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Triggers(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_OldBounds(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall get_NewBounds(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall get_HasStarted(bool*) noexcept = 0;
            virtual int32_t __stdcall Start(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionCompletedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Transition(void**) noexcept = 0;
            virtual int32_t __stdcall get_Element(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProgress>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Transition(void**) noexcept = 0;
            virtual int32_t __stdcall get_Element(void**) noexcept = 0;
            virtual int32_t __stdcall Complete() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProvider>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall ShouldAnimate(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall QueueTransition(void*) noexcept = 0;
            virtual int32_t __stdcall add_TransitionCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TransitionCompleted(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProviderFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProviderOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall ShouldAnimateCore(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall StartTransitions(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemContainer>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Child(void**) noexcept = 0;
            virtual int32_t __stdcall put_Child(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsSelected(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSelected(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemContainerFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemContainerGenerator>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall add_ItemsChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ItemsChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ItemFromContainer(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ContainerFromItem(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IndexFromContainer(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ContainerFromIndex(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetItemContainerGeneratorForPanel(void*, void**) noexcept = 0;
            virtual int32_t __stdcall StartAt(struct struct_Microsoft_UI_Xaml_Controls_Primitives_GeneratorPosition, int32_t, bool) noexcept = 0;
            virtual int32_t __stdcall Stop() noexcept = 0;
            virtual int32_t __stdcall GenerateNext(bool*, void**) noexcept = 0;
            virtual int32_t __stdcall PrepareItemContainer(void*) noexcept = 0;
            virtual int32_t __stdcall RemoveAll() noexcept = 0;
            virtual int32_t __stdcall Remove(struct struct_Microsoft_UI_Xaml_Controls_Primitives_GeneratorPosition, int32_t) noexcept = 0;
            virtual int32_t __stdcall GeneratorPositionFromIndex(int32_t, struct struct_Microsoft_UI_Xaml_Controls_Primitives_GeneratorPosition*) noexcept = 0;
            virtual int32_t __stdcall IndexFromGeneratorPosition(struct struct_Microsoft_UI_Xaml_Controls_Primitives_GeneratorPosition, int32_t*) noexcept = 0;
            virtual int32_t __stdcall Recycle(struct struct_Microsoft_UI_Xaml_Controls_Primitives_GeneratorPosition, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemContainerMapping>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall ItemFromContainer(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ContainerFromItem(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IndexFromContainer(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ContainerFromIndex(int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemContainerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ChildProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSelectedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsControl>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplateSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemsPanel(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsPanel(void*) noexcept = 0;
            virtual int32_t __stdcall get_DisplayMemberPath(void**) noexcept = 0;
            virtual int32_t __stdcall put_DisplayMemberPath(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemsPanelRoot(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemContainerStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyleSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemContainerStyleSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerGenerator(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemContainerTransitions(void*) noexcept = 0;
            virtual int32_t __stdcall get_GroupStyle(void**) noexcept = 0;
            virtual int32_t __stdcall get_GroupStyleSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_GroupStyleSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsGrouping(bool*) noexcept = 0;
            virtual int32_t __stdcall GroupHeaderContainerFromItemContainer(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsControlFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall IsItemItsOwnContainerOverride(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall GetContainerForItemOverride(void**) noexcept = 0;
            virtual int32_t __stdcall ClearContainerForItemOverride(void*, void*) noexcept = 0;
            virtual int32_t __stdcall PrepareContainerForItemOverride(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnItemsChanged(void*) noexcept = 0;
            virtual int32_t __stdcall OnItemContainerStyleChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnItemContainerStyleSelectorChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnItemTemplateChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnItemTemplateSelectorChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnGroupStyleSelectorChanged(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsControlStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsPanelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayMemberPathProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyleSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerTransitionsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GroupStyleSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsGroupingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetItemsOwner(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ItemsControlFromItemContainer(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsPanelTemplate>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsPickedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AddedItems(void**) noexcept = 0;
            virtual int32_t __stdcall get_RemovedItems(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsPresenter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTransitions(void*) noexcept = 0;
            virtual int32_t __stdcall get_Footer(void**) noexcept = 0;
            virtual int32_t __stdcall put_Footer(void*) noexcept = 0;
            virtual int32_t __stdcall get_FooterTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_FooterTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_FooterTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_FooterTransitions(void*) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsPresenterStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTransitionsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FooterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FooterTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FooterTransitionsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemsSourceView(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_Layout(void**) noexcept = 0;
            virtual int32_t __stdcall put_Layout(void*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalCacheLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalCacheLength(double) noexcept = 0;
            virtual int32_t __stdcall get_VerticalCacheLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalCacheLength(double) noexcept = 0;
            virtual int32_t __stdcall get_Background(void**) noexcept = 0;
            virtual int32_t __stdcall put_Background(void*) noexcept = 0;
            virtual int32_t __stdcall GetElementIndex(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall TryGetElement(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetOrCreateElement(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall add_ElementPrepared(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ElementPrepared(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ElementClearing(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ElementClearing(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ElementIndexChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ElementIndexChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemTransitionProvider(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTransitionProvider(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Element(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Element(void**) noexcept = 0;
            virtual int32_t __stdcall get_OldIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_NewIndex(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Element(void**) noexcept = 0;
            virtual int32_t __stdcall get_Index(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterScrollHost>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ScrollViewer(void**) noexcept = 0;
            virtual int32_t __stdcall put_ScrollViewer(void*) noexcept = 0;
            virtual int32_t __stdcall get_CurrentAnchor(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalAnchorRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalAnchorRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_VerticalAnchorRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalAnchorRatio(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LayoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalCacheLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalCacheLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemTransitionProviderProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsSourceView>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Count(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetAt(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall get_HasKeyIndexMapping(bool*) noexcept = 0;
            virtual int32_t __stdcall KeyFromIndex(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall IndexFromKey(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall IndexOf(void*, int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsSourceViewFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsStackPanel>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_GroupPadding(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_GroupPadding(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FirstCacheIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_FirstVisibleIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_LastVisibleIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_LastCacheIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollingDirection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_GroupHeaderPlacement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_GroupHeaderPlacement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ItemsUpdatingScrollMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ItemsUpdatingScrollMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CacheLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_CacheLength(double) noexcept = 0;
            virtual int32_t __stdcall get_AreStickyGroupHeadersEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreStickyGroupHeadersEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsStackPanelStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_GroupPaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GroupHeaderPlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CacheLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AreStickyGroupHeadersEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsView>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollView(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollController(void**) noexcept = 0;
            virtual int32_t __stdcall put_VerticalScrollController(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_Layout(void**) noexcept = 0;
            virtual int32_t __stdcall put_Layout(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsItemInvokedEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsItemInvokedEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_SelectionMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ItemTransitionProvider(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTransitionProvider(void*) noexcept = 0;
            virtual int32_t __stdcall get_CurrentItemIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItems(void**) noexcept = 0;
            virtual int32_t __stdcall TryGetItemIndex(double, double, int32_t*, bool*) noexcept = 0;
            virtual int32_t __stdcall StartBringItemIntoView(int32_t, void*) noexcept = 0;
            virtual int32_t __stdcall Select(int32_t) noexcept = 0;
            virtual int32_t __stdcall Deselect(int32_t) noexcept = 0;
            virtual int32_t __stdcall IsSelected(int32_t, bool*) noexcept = 0;
            virtual int32_t __stdcall SelectAll() noexcept = 0;
            virtual int32_t __stdcall DeselectAll() noexcept = 0;
            virtual int32_t __stdcall InvertSelection() noexcept = 0;
            virtual int32_t __stdcall add_ItemInvoked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ItemInvoked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsViewFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsViewItemInvokedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_InvokedItem(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsViewSelectionChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsViewStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsItemInvokedEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LayoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTransitionProviderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CurrentItemIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItemProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ScrollViewProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollControllerProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsWrapGrid>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_GroupPadding(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_GroupPadding(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaximumRowsOrColumns(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaximumRowsOrColumns(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ItemWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_ItemWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_ItemHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_ItemHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_FirstCacheIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_FirstVisibleIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_LastVisibleIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_LastCacheIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollingDirection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_GroupHeaderPlacement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_GroupHeaderPlacement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CacheLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_CacheLength(double) noexcept = 0;
            virtual int32_t __stdcall get_AreStickyGroupHeadersEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreStickyGroupHeadersEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IItemsWrapGridStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_GroupPaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaximumRowsOrColumnsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GroupHeaderPlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CacheLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AreStickyGroupHeadersEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IKeyIndexMapping>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall KeyFromIndex(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall IndexFromKey(void*, int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ILayout>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall InitializeForContext(void*) noexcept = 0;
            virtual int32_t __stdcall UninitializeForContext(void*) noexcept = 0;
            virtual int32_t __stdcall Measure(void*, winrt::Windows::Foundation::Size, winrt::Windows::Foundation::Size*) noexcept = 0;
            virtual int32_t __stdcall Arrange(void*, winrt::Windows::Foundation::Size, winrt::Windows::Foundation::Size*) noexcept = 0;
            virtual int32_t __stdcall add_MeasureInvalidated(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_MeasureInvalidated(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ArrangeInvalidated(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ArrangeInvalidated(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ILayout2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IndexBasedLayoutOrientation(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ILayoutContext>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_LayoutState(void**) noexcept = 0;
            virtual int32_t __stdcall put_LayoutState(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ILayoutContextFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ILayoutContextOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_LayoutStateCore(void**) noexcept = 0;
            virtual int32_t __stdcall put_LayoutStateCore(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ILayoutFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ILayoutOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateDefaultItemTransitionProvider(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall InvalidateMeasure() noexcept = 0;
            virtual int32_t __stdcall InvalidateArrange() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall SetIndexBasedLayoutOrientation(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayout>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall add_ItemsInfoRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ItemsInfoRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ItemsUnlocked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ItemsUnlocked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_ItemsJustification(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ItemsJustification(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ItemsStretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ItemsStretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinItemSpacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinItemSpacing(double) noexcept = 0;
            virtual int32_t __stdcall get_LineSpacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_LineSpacing(double) noexcept = 0;
            virtual int32_t __stdcall get_LineHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_LineHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_ActualLineHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_RequestedRangeStartIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_RequestedRangeLength(int32_t*) noexcept = 0;
            virtual int32_t __stdcall InvalidateItemsInfo() noexcept = 0;
            virtual int32_t __stdcall LockItemToLine(int32_t, int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemCollectionTransitionProvider>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemCollectionTransitionProviderFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemsInfoRequestedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsRangeStartIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ItemsRangeStartIndex(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ItemsRangeRequestedLength(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_MinWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_MaxWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxWidth(double) noexcept = 0;
            virtual int32_t __stdcall SetDesiredAspectRatios(uint32_t, double*) noexcept = 0;
            virtual int32_t __stdcall SetMinWidths(uint32_t, double*) noexcept = 0;
            virtual int32_t __stdcall SetMaxWidths(uint32_t, double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsJustificationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsStretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinItemSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LineSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LineHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ActualLineHeightProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListBox>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedItems(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SingleSelectionFollowsFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall put_SingleSelectionFollowsFocus(bool) noexcept = 0;
            virtual int32_t __stdcall ScrollIntoView(void*) noexcept = 0;
            virtual int32_t __stdcall SelectAll() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListBoxFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListBoxItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListBoxItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListBoxStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SingleSelectionFollowsFocusProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyout>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_DisplayMemberPath(void**) noexcept = 0;
            virtual int32_t __stdcall put_DisplayMemberPath(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectedIndex(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedItem(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedValue(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedValue(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedValuePath(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedValuePath(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItems(void**) noexcept = 0;
            virtual int32_t __stdcall add_ItemsPicked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ItemsPicked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ShowAtAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyoutPresenter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyoutStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayMemberPathProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItemProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedValuePathProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListView>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListViewBase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedItems(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsSwipeEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSwipeEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_CanDragItems(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanDragItems(bool) noexcept = 0;
            virtual int32_t __stdcall get_CanReorderItems(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanReorderItems(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsItemClickEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsItemClickEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_DataFetchSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_DataFetchSize(double) noexcept = 0;
            virtual int32_t __stdcall get_IncrementalLoadingThreshold(double*) noexcept = 0;
            virtual int32_t __stdcall put_IncrementalLoadingThreshold(double) noexcept = 0;
            virtual int32_t __stdcall get_IncrementalLoadingTrigger(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_IncrementalLoadingTrigger(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ShowsScrollingPlaceholders(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShowsScrollingPlaceholders(bool) noexcept = 0;
            virtual int32_t __stdcall get_ReorderMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ReorderMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedRanges(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsMultiSelectCheckBoxEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsMultiSelectCheckBoxEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_SingleSelectionFollowsFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall put_SingleSelectionFollowsFocus(bool) noexcept = 0;
            virtual int32_t __stdcall add_ItemClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ItemClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DragItemsStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DragItemsStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DragItemsCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DragItemsCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ContainerContentChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContainerContentChanging(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ChoosingItemContainer(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ChoosingItemContainer(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ChoosingGroupHeaderContainer(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ChoosingGroupHeaderContainer(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ScrollIntoView(void*) noexcept = 0;
            virtual int32_t __stdcall SelectAll() noexcept = 0;
            virtual int32_t __stdcall LoadMoreItemsAsync(void**) noexcept = 0;
            virtual int32_t __stdcall ScrollIntoViewWithAlignment(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall SetDesiredContainerUpdateDuration(int64_t) noexcept = 0;
            virtual int32_t __stdcall SelectRange(void*) noexcept = 0;
            virtual int32_t __stdcall DeselectRange(void*) noexcept = 0;
            virtual int32_t __stdcall IsDragSource(bool*) noexcept = 0;
            virtual int32_t __stdcall TryStartConnectedAnimationAsync(void*, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall PrepareConnectedAnimation(void*, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTransitions(void*) noexcept = 0;
            virtual int32_t __stdcall get_Footer(void**) noexcept = 0;
            virtual int32_t __stdcall put_Footer(void*) noexcept = 0;
            virtual int32_t __stdcall get_FooterTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_FooterTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_FooterTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_FooterTransitions(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSwipeEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanDragItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanReorderItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsItemClickEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DataFetchSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IncrementalLoadingThresholdProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IncrementalLoadingTriggerProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShowsScrollingPlaceholdersProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ReorderModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsMultiSelectCheckBoxEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SingleSelectionFollowsFocusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SemanticZoomOwnerProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsActiveViewProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomedInViewProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTransitionsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FooterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FooterTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FooterTransitionsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListViewFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListViewHeaderItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListViewHeaderItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListViewItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListViewItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListViewPersistenceHelper>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IListViewPersistenceHelperStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetRelativeScrollPosition(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetRelativeScrollPositionAsync(void*, void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMapControl>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_MapServiceToken(void**) noexcept = 0;
            virtual int32_t __stdcall put_MapServiceToken(void*) noexcept = 0;
            virtual int32_t __stdcall get_Center(void**) noexcept = 0;
            virtual int32_t __stdcall put_Center(void*) noexcept = 0;
            virtual int32_t __stdcall get_Layers(void**) noexcept = 0;
            virtual int32_t __stdcall put_Layers(void*) noexcept = 0;
            virtual int32_t __stdcall get_ZoomLevel(double*) noexcept = 0;
            virtual int32_t __stdcall put_ZoomLevel(double) noexcept = 0;
            virtual int32_t __stdcall get_InteractiveControlsVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_InteractiveControlsVisible(bool) noexcept = 0;
            virtual int32_t __stdcall add_MapElementClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_MapElementClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_MapServiceErrorOccurred(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_MapServiceErrorOccurred(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMapControlFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMapControlMapServiceErrorOccurredEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DiagnosticMessage(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMapControlStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_LayersProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MapServiceTokenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CenterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ZoomLevelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_InteractiveControlsVisibleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMapElement>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMapElementClickEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Location(void**) noexcept = 0;
            virtual int32_t __stdcall get_Element(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMapElementFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayer>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_MapElements(void**) noexcept = 0;
            virtual int32_t __stdcall put_MapElements(void*) noexcept = 0;
            virtual int32_t __stdcall add_MapElementClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_MapElementClick(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayerFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_MapElementsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMapIcon>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Location(void**) noexcept = 0;
            virtual int32_t __stdcall put_Location(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMapIconFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMapIconStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_LocationProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMapLayer>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMapLayerFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElement>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall put_Source(void*) noexcept = 0;
            virtual int32_t __stdcall get_TransportControls(void**) noexcept = 0;
            virtual int32_t __stdcall put_TransportControls(void*) noexcept = 0;
            virtual int32_t __stdcall get_AreTransportControlsEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreTransportControlsEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_PosterSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_PosterSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_Stretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Stretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_AutoPlay(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AutoPlay(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsFullWindow(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFullWindow(bool) noexcept = 0;
            virtual int32_t __stdcall get_MediaPlayer(void**) noexcept = 0;
            virtual int32_t __stdcall SetMediaPlayer(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElementFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElementStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AreTransportControlsEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PosterSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AutoPlayProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsFullWindowProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MediaPlayerProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_MediaPlayer(void**) noexcept = 0;
            virtual int32_t __stdcall put_MediaPlayer(void*) noexcept = 0;
            virtual int32_t __stdcall get_Stretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Stretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsFullWindow(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFullWindow(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenterFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenterStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_MediaPlayerProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsFullWindowProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControls>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsZoomButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsZoomButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsZoomEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsFastForwardButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFastForwardButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsFastForwardEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFastForwardEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsFastRewindButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFastRewindButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsFastRewindEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsFastRewindEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsStopButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsStopButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsStopEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsStopEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsVolumeButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsVolumeButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsVolumeEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsVolumeEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsPlaybackRateButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPlaybackRateButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsPlaybackRateEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPlaybackRateEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSeekBarVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSeekBarVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSeekEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSeekEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsCompact(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsCompact(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSkipForwardButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSkipForwardButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSkipForwardEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSkipForwardEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSkipBackwardButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSkipBackwardButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSkipBackwardEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSkipBackwardEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsNextTrackButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsNextTrackButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsPreviousTrackButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPreviousTrackButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_FastPlayFallbackBehaviour(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FastPlayFallbackBehaviour(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ShowAndHideAutomatically(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShowAndHideAutomatically(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsRepeatEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsRepeatEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsRepeatButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsRepeatButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall add_ThumbnailRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ThumbnailRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall Show() noexcept = 0;
            virtual int32_t __stdcall Hide() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsHelper>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsHelperStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DropoutOrderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetDropoutOrder(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetDropoutOrder(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsZoomButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsFastForwardButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsFastForwardEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsFastRewindButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsFastRewindEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsStopButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsStopEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsVolumeButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsVolumeEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPlaybackRateButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPlaybackRateEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSeekBarVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSeekEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsCompactProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSkipForwardButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSkipForwardEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSkipBackwardButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSkipBackwardEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsNextTrackButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPreviousTrackButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FastPlayFallbackBehaviourProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShowAndHideAutomaticallyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsRepeatEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsRepeatButtonVisibleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuBar>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuBarFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Title(void**) noexcept = 0;
            virtual int32_t __stdcall put_Title(void*) noexcept = 0;
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TitleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuBarStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyout>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuFlyoutPresenterStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuFlyoutPresenterStyle(void*) noexcept = 0;
            virtual int32_t __stdcall ShowAt(void*, winrt::Windows::Foundation::Point) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall get_Command(void**) noexcept = 0;
            virtual int32_t __stdcall put_Command(void*) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_CommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall get_Icon(void**) noexcept = 0;
            virtual int32_t __stdcall put_Icon(void*) noexcept = 0;
            virtual int32_t __stdcall get_KeyboardAcceleratorTextOverride(void**) noexcept = 0;
            virtual int32_t __stdcall put_KeyboardAcceleratorTextOverride(void*) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall add_Click(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Click(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_KeyboardAcceleratorTextOverrideProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsDefaultShadowEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsDefaultShadowEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenter2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SystemBackdrop(void**) noexcept = 0;
            virtual int32_t __stdcall put_SystemBackdrop(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenterFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenterStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDefaultShadowEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenterStatics2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SystemBackdropProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSeparator>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_MenuFlyoutPresenterStyleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSubItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall get_Icon(void**) noexcept = 0;
            virtual int32_t __stdcall put_Icon(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSubItemStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigate>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Navigate(struct struct_Windows_UI_Xaml_Interop_TypeName, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationView>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsPaneOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPaneOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_CompactModeThresholdWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_CompactModeThresholdWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_ExpandedModeThresholdWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_ExpandedModeThresholdWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_FooterMenuItems(void**) noexcept = 0;
            virtual int32_t __stdcall get_FooterMenuItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_FooterMenuItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_PaneFooter(void**) noexcept = 0;
            virtual int32_t __stdcall put_PaneFooter(void*) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_DisplayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_IsSettingsVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSettingsVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsPaneToggleButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPaneToggleButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_AlwaysShowHeader(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AlwaysShowHeader(bool) noexcept = 0;
            virtual int32_t __stdcall get_CompactPaneLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_CompactPaneLength(double) noexcept = 0;
            virtual int32_t __stdcall get_OpenPaneLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_OpenPaneLength(double) noexcept = 0;
            virtual int32_t __stdcall get_PaneToggleButtonStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_PaneToggleButtonStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedItem(void*) noexcept = 0;
            virtual int32_t __stdcall get_MenuItems(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_SettingsItem(void**) noexcept = 0;
            virtual int32_t __stdcall get_AutoSuggestBox(void**) noexcept = 0;
            virtual int32_t __stdcall put_AutoSuggestBox(void*) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemTemplateSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuItemTemplateSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemContainerStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuItemContainerStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemContainerStyleSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuItemContainerStyleSelector(void*) noexcept = 0;
            virtual int32_t __stdcall MenuItemFromContainer(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ContainerFromMenuItem(void*, void**) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ItemInvoked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ItemInvoked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DisplayModeChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DisplayModeChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_IsTitleBarAutoPaddingEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTitleBarAutoPaddingEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationView2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsBackButtonVisible(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_IsBackButtonVisible(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsBackEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsBackEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_PaneTitle(void**) noexcept = 0;
            virtual int32_t __stdcall put_PaneTitle(void*) noexcept = 0;
            virtual int32_t __stdcall add_BackRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_BackRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PaneClosed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneClosed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PaneClosing(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneClosing(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PaneOpened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneOpened(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PaneOpening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneOpening(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_PaneDisplayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PaneDisplayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PaneHeader(void**) noexcept = 0;
            virtual int32_t __stdcall put_PaneHeader(void*) noexcept = 0;
            virtual int32_t __stdcall get_PaneCustomContent(void**) noexcept = 0;
            virtual int32_t __stdcall put_PaneCustomContent(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentOverlay(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentOverlay(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsPaneVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPaneVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFollowsFocus(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionFollowsFocus(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShoulderNavigationEnabled(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ShoulderNavigationEnabled(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_OverflowLabelMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_OverflowLabelMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_Expanding(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Expanding(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Collapsed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Collapsed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall Expand(void*) noexcept = 0;
            virtual int32_t __stdcall Collapse(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DisplayMode(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Icon(void**) noexcept = 0;
            virtual int32_t __stdcall put_Icon(void*) noexcept = 0;
            virtual int32_t __stdcall get_CompactPaneLength(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectsOnInvoked(bool*) noexcept = 0;
            virtual int32_t __stdcall put_SelectsOnInvoked(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsExpanded(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsExpanded(bool) noexcept = 0;
            virtual int32_t __stdcall get_HasUnrealizedChildren(bool*) noexcept = 0;
            virtual int32_t __stdcall put_HasUnrealizedChildren(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsChildSelected(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsChildSelected(bool) noexcept = 0;
            virtual int32_t __stdcall get_MenuItems(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuItemsSource(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem3>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_InfoBadge(void**) noexcept = 0;
            virtual int32_t __stdcall put_InfoBadge(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsSelected(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSelected(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBaseStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsSelectedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemCollapsedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CollapsedItemContainer(void**) noexcept = 0;
            virtual int32_t __stdcall get_CollapsedItem(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemExpandingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ExpandingItemContainer(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExpandingItem(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemHeader>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_InvokedItem(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSettingsInvoked(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_InvokedItemContainer(void**) noexcept = 0;
            virtual int32_t __stdcall get_RecommendedNavigationTransitionInfo(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CompactPaneLengthProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemStatics2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectsOnInvokedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsExpandedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasUnrealizedChildrenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsChildSelectedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemsSourceProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemStatics3>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_InfoBadgeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSettingsSelected(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedItemContainer(void**) noexcept = 0;
            virtual int32_t __stdcall get_RecommendedNavigationTransitionInfo(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsPaneOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CompactModeThresholdWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExpandedModeThresholdWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FooterMenuItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FooterMenuItemsSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneFooterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSettingsVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPaneToggleButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AlwaysShowHeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CompactPaneLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OpenPaneLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneToggleButtonStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemsSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItemProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SettingsItemProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AutoSuggestBoxProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemTemplateSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemContainerStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemContainerStyleSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTitleBarAutoPaddingEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewStatics2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsBackButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsBackEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneTitleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneDisplayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneHeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneCustomContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentOverlayProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPaneVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFollowsFocusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettingsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShoulderNavigationEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OverflowLabelModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TopPadding(double*) noexcept = 0;
            virtual int32_t __stdcall get_OverflowButtonVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_PaneToggleButtonVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_BackButtonVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_TopPaneVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_LeftPaneVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_SingleSelectionFollowsFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall get_PaneToggleButtonWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_SmallerPaneToggleButtonWidth(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OpenPaneLength(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TopPaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OverflowButtonVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneToggleButtonVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackButtonVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TopPaneVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LeftPaneVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SingleSelectionFollowsFocusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneToggleButtonWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SmallerPaneToggleButtonWidthProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OpenPaneLengthProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayout>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Children(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ChildrenCore(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall InitializeForContextCore(void*) noexcept = 0;
            virtual int32_t __stdcall UninitializeForContextCore(void*) noexcept = 0;
            virtual int32_t __stdcall MeasureOverride(void*, winrt::Windows::Foundation::Size, winrt::Windows::Foundation::Size*) noexcept = 0;
            virtual int32_t __stdcall ArrangeOverride(void*, winrt::Windows::Foundation::Size, winrt::Windows::Foundation::Size*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INumberBox>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Minimum(double*) noexcept = 0;
            virtual int32_t __stdcall put_Minimum(double) noexcept = 0;
            virtual int32_t __stdcall get_Maximum(double*) noexcept = 0;
            virtual int32_t __stdcall put_Maximum(double) noexcept = 0;
            virtual int32_t __stdcall get_Value(double*) noexcept = 0;
            virtual int32_t __stdcall put_Value(double) noexcept = 0;
            virtual int32_t __stdcall get_SmallChange(double*) noexcept = 0;
            virtual int32_t __stdcall put_SmallChange(double) noexcept = 0;
            virtual int32_t __stdcall get_LargeChange(double*) noexcept = 0;
            virtual int32_t __stdcall put_LargeChange(double) noexcept = 0;
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderText(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyout(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionFlyout(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColor(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionHighlightColor(void*) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrder(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextReadingOrder(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PreventKeyboardDisplayOnProgrammaticFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall put_PreventKeyboardDisplayOnProgrammaticFocus(bool) noexcept = 0;
            virtual int32_t __stdcall get_Description(void**) noexcept = 0;
            virtual int32_t __stdcall put_Description(void*) noexcept = 0;
            virtual int32_t __stdcall get_ValidationMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ValidationMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SpinButtonPlacementMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SpinButtonPlacementMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsWrapEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsWrapEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_AcceptsExpression(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AcceptsExpression(bool) noexcept = 0;
            virtual int32_t __stdcall get_NumberFormatter(void**) noexcept = 0;
            virtual int32_t __stdcall put_NumberFormatter(void*) noexcept = 0;
            virtual int32_t __stdcall add_ValueChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ValueChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INumberBoxFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INumberBoxStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_MinimumProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaximumProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SmallChangeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LargeChangeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreventKeyboardDisplayOnProgrammaticFocusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DescriptionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ValidationModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SpinButtonPlacementModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsWrapEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AcceptsExpressionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_NumberFormatterProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::INumberBoxValueChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldValue(double*) noexcept = 0;
            virtual int32_t __stdcall get_NewValue(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPage>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Frame(void**) noexcept = 0;
            virtual int32_t __stdcall get_NavigationCacheMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_NavigationCacheMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TopAppBar(void**) noexcept = 0;
            virtual int32_t __stdcall put_TopAppBar(void*) noexcept = 0;
            virtual int32_t __stdcall get_BottomAppBar(void**) noexcept = 0;
            virtual int32_t __stdcall put_BottomAppBar(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPageFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPageOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall OnNavigatedFrom(void*) noexcept = 0;
            virtual int32_t __stdcall OnNavigatedTo(void*) noexcept = 0;
            virtual int32_t __stdcall OnNavigatingFrom(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPageStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FrameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TopAppBarProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BottomAppBarProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPanel>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Children(void**) noexcept = 0;
            virtual int32_t __stdcall get_Background(void**) noexcept = 0;
            virtual int32_t __stdcall put_Background(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsItemsHost(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ChildrenTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_ChildrenTransitions(void*) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundTransition(void**) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundTransition(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPanelFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPanelStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsItemsHostProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ChildrenTransitionsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IParallaxView>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Child(void**) noexcept = 0;
            virtual int32_t __stdcall put_Child(void*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalShift(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalShift(double) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceEndOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalSourceEndOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceOffsetKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalSourceOffsetKind(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceStartOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalSourceStartOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_IsHorizontalShiftClamped(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHorizontalShiftClamped(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsVerticalShiftClamped(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsVerticalShiftClamped(bool) noexcept = 0;
            virtual int32_t __stdcall get_MaxHorizontalShiftRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxHorizontalShiftRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_MaxVerticalShiftRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxVerticalShiftRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall put_Source(void*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalShift(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalShift(double) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceEndOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalSourceEndOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceOffsetKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalSourceOffsetKind(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceStartOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalSourceStartOffset(double) noexcept = 0;
            virtual int32_t __stdcall RefreshAutomaticHorizontalOffsets() noexcept = 0;
            virtual int32_t __stdcall RefreshAutomaticVerticalOffsets() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IParallaxViewFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IParallaxViewStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ChildProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceEndOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceOffsetKindProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceStartOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxHorizontalShiftRatioProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalShiftProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsHorizontalShiftClampedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsVerticalShiftClampedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceEndOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceOffsetKindProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceStartOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxVerticalShiftRatioProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalShiftProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPasswordBox>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Password(void**) noexcept = 0;
            virtual int32_t __stdcall put_Password(void*) noexcept = 0;
            virtual int32_t __stdcall get_PasswordChar(void**) noexcept = 0;
            virtual int32_t __stdcall put_PasswordChar(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsPasswordRevealButtonEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPasswordRevealButtonEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_MaxLength(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxLength(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderText(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColor(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionHighlightColor(void*) noexcept = 0;
            virtual int32_t __stdcall get_PreventKeyboardDisplayOnProgrammaticFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall put_PreventKeyboardDisplayOnProgrammaticFocus(bool) noexcept = 0;
            virtual int32_t __stdcall get_PasswordRevealMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PasswordRevealMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrder(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextReadingOrder(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_InputScope(void**) noexcept = 0;
            virtual int32_t __stdcall put_InputScope(void*) noexcept = 0;
            virtual int32_t __stdcall get_CanPasteClipboardContent(bool*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyout(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionFlyout(void*) noexcept = 0;
            virtual int32_t __stdcall get_Description(void**) noexcept = 0;
            virtual int32_t __stdcall put_Description(void*) noexcept = 0;
            virtual int32_t __stdcall add_PasswordChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PasswordChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ContextMenuOpening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContextMenuOpening(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Paste(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Paste(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PasswordChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PasswordChanging(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall SelectAll() noexcept = 0;
            virtual int32_t __stdcall PasteFromClipboard() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsContentChanging(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPasswordBoxStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PasswordProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PasswordCharProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPasswordRevealButtonEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreventKeyboardDisplayOnProgrammaticFocusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PasswordRevealModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_InputScopeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanPasteClipboardContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DescriptionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPathIcon>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Data(void**) noexcept = 0;
            virtual int32_t __stdcall put_Data(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPathIconFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPathIconSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Data(void**) noexcept = 0;
            virtual int32_t __stdcall put_Data(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPathIconSourceFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPathIconSourceStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DataProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPathIconStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DataProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPersonPicture>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_BadgeNumber(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BadgeNumber(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_BadgeGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_BadgeGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_BadgeImageSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_BadgeImageSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_BadgeText(void**) noexcept = 0;
            virtual int32_t __stdcall put_BadgeText(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsGroup(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsGroup(bool) noexcept = 0;
            virtual int32_t __stdcall get_Contact(void**) noexcept = 0;
            virtual int32_t __stdcall put_Contact(void*) noexcept = 0;
            virtual int32_t __stdcall get_DisplayName(void**) noexcept = 0;
            virtual int32_t __stdcall put_DisplayName(void*) noexcept = 0;
            virtual int32_t __stdcall get_Initials(void**) noexcept = 0;
            virtual int32_t __stdcall put_Initials(void*) noexcept = 0;
            virtual int32_t __stdcall get_PreferSmallImage(bool*) noexcept = 0;
            virtual int32_t __stdcall put_PreferSmallImage(bool) noexcept = 0;
            virtual int32_t __stdcall get_ProfilePicture(void**) noexcept = 0;
            virtual int32_t __stdcall put_ProfilePicture(void*) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_BadgeNumberProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BadgeGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BadgeImageSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BadgeTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsGroupProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContactProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_InitialsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreferSmallImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ProfilePictureProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ActualInitials(void**) noexcept = 0;
            virtual int32_t __stdcall get_ActualImageBrush(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPickerConfirmedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPickerFlyout>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_ConfirmationButtonsVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ConfirmationButtonsVisible(bool) noexcept = 0;
            virtual int32_t __stdcall add_Confirmed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Confirmed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ShowAtAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPickerFlyoutPresenter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPickerFlyoutStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ConfirmationButtonsVisibleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPipsPager>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_NumberOfPages(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_NumberOfPages(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPageIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectedPageIndex(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxVisiblePips(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxVisiblePips(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PreviousButtonVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PreviousButtonVisibility(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_NextButtonVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_NextButtonVisibility(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PreviousButtonStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_PreviousButtonStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_NextButtonStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_NextButtonStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPipStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedPipStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_NormalPipStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_NormalPipStyle(void*) noexcept = 0;
            virtual int32_t __stdcall add_SelectedIndexChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectedIndexChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerSelectedIndexChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_NumberOfPagesProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPageIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxVisiblePipsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreviousButtonVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_NextButtonVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreviousButtonStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_NextButtonStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPipStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_NormalPipStyleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerTemplateSettings>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PipsPagerItems(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPivot>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Title(void**) noexcept = 0;
            virtual int32_t __stdcall put_Title(void*) noexcept = 0;
            virtual int32_t __stdcall get_TitleTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_TitleTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_LeftHeader(void**) noexcept = 0;
            virtual int32_t __stdcall put_LeftHeader(void*) noexcept = 0;
            virtual int32_t __stdcall get_LeftHeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_LeftHeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_RightHeader(void**) noexcept = 0;
            virtual int32_t __stdcall put_RightHeader(void*) noexcept = 0;
            virtual int32_t __stdcall get_RightHeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_RightHeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectedIndex(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedItem(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsLocked(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsLocked(bool) noexcept = 0;
            virtual int32_t __stdcall get_HeaderFocusVisualPlacement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HeaderFocusVisualPlacement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsHeaderItemsCarouselEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHeaderItemsCarouselEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PivotItemLoading(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PivotItemLoading(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PivotItemLoaded(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PivotItemLoaded(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PivotItemUnloading(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PivotItemUnloading(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PivotItemUnloaded(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PivotItemUnloaded(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPivotFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPivotItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPivotItemEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall put_Item(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPivotItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPivotItemStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IPivotStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TitleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TitleTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LeftHeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LeftHeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RightHeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RightHeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItemProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsLockedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderFocusVisualPlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsHeaderItemsCarouselEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SlideInAnimationGroupProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetSlideInAnimationGroup(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetSlideInAnimationGroup(void*, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IProgressBar>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsIndeterminate(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsIndeterminate(bool) noexcept = 0;
            virtual int32_t __stdcall get_ShowError(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShowError(bool) noexcept = 0;
            virtual int32_t __stdcall get_ShowPaused(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShowPaused(bool) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IProgressBarFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IProgressBarStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsIndeterminateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShowErrorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShowPausedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IProgressBarTemplateSettings>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContainerAnimationStartPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ContainerAnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_Container2AnimationStartPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_Container2AnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ContainerAnimationMidPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_IndicatorLengthDelta(double*) noexcept = 0;
            virtual int32_t __stdcall get_ClipRect(void**) noexcept = 0;
            virtual int32_t __stdcall get_EllipseAnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_EllipseAnimationWellPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_EllipseDiameter(double*) noexcept = 0;
            virtual int32_t __stdcall get_EllipseOffset(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IProgressRing>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsActive(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsActive(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsIndeterminate(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsIndeterminate(bool) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall get_Value(double*) noexcept = 0;
            virtual int32_t __stdcall put_Value(double) noexcept = 0;
            virtual int32_t __stdcall get_Minimum(double*) noexcept = 0;
            virtual int32_t __stdcall put_Minimum(double) noexcept = 0;
            virtual int32_t __stdcall get_Maximum(double*) noexcept = 0;
            virtual int32_t __stdcall put_Maximum(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IProgressRingFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IProgressRingStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsActiveProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsIndeterminateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinimumProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaximumProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IProgressRingTemplateSettings>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EllipseDiameter(double*) noexcept = 0;
            virtual int32_t __stdcall get_EllipseOffset(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall get_MaxSideLength(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRadioButton>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_GroupName(void**) noexcept = 0;
            virtual int32_t __stdcall put_GroupName(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_GroupNameProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRadioButtons>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall ContainerFromIndex(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectedIndex(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedItem(void*) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_MaxColumns(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxColumns(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonsStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItemProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxColumnsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsChecked(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsChecked(bool) noexcept = 0;
            virtual int32_t __stdcall get_GroupName(void**) noexcept = 0;
            virtual int32_t __stdcall put_GroupName(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsCheckedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GroupNameProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AreCheckStatesEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall SetAreCheckStatesEnabled(void*, bool) noexcept = 0;
            virtual int32_t __stdcall GetAreCheckStatesEnabled(void*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRatingControl>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Caption(void**) noexcept = 0;
            virtual int32_t __stdcall put_Caption(void*) noexcept = 0;
            virtual int32_t __stdcall get_InitialSetValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_InitialSetValue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsClearEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsClearEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsReadOnly(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsReadOnly(bool) noexcept = 0;
            virtual int32_t __stdcall get_MaxRating(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxRating(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderValue(double*) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderValue(double) noexcept = 0;
            virtual int32_t __stdcall get_ItemInfo(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemInfo(void*) noexcept = 0;
            virtual int32_t __stdcall get_Value(double*) noexcept = 0;
            virtual int32_t __stdcall put_Value(double) noexcept = 0;
            virtual int32_t __stdcall add_ValueChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ValueChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRatingControlFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRatingControlStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CaptionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_InitialSetValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsClearEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsReadOnlyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxRatingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemInfoProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ValueProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfo>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DisabledGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_DisabledGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_Glyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_Glyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverPlaceholderGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverPlaceholderGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_UnsetGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_UnsetGlyph(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DisabledGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverPlaceholderGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_UnsetGlyphProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfo>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DisabledImage(void**) noexcept = 0;
            virtual int32_t __stdcall put_DisabledImage(void*) noexcept = 0;
            virtual int32_t __stdcall get_Image(void**) noexcept = 0;
            virtual int32_t __stdcall put_Image(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderImage(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderImage(void*) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverImage(void**) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverImage(void*) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverPlaceholderImage(void**) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverPlaceholderImage(void*) noexcept = 0;
            virtual int32_t __stdcall get_UnsetImage(void**) noexcept = 0;
            virtual int32_t __stdcall put_UnsetImage(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DisabledImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverPlaceholderImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_UnsetImageProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfo>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainer>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Visualizer(void**) noexcept = 0;
            virtual int32_t __stdcall put_Visualizer(void*) noexcept = 0;
            virtual int32_t __stdcall get_PullDirection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PullDirection(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_RefreshRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RefreshRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall RequestRefresh() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainerFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_VisualizerProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PullDirectionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_InteractionRatio(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetDeferral(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_NewState(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizer>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall RequestRefresh() noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_State(int32_t*) noexcept = 0;
            virtual int32_t __stdcall add_RefreshRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RefreshRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_RefreshStateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RefreshStateChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_InfoProviderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRelativePanel>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundSizing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundSizing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_BorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_BorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_BorderThickness(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_BorderThickness(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius*) noexcept = 0;
            virtual int32_t __stdcall put_CornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRelativePanelFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRelativePanelStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundSizingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LeftOfProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetLeftOf(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetLeftOf(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_AboveProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAbove(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetAbove(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_RightOfProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetRightOf(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetRightOf(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_BelowProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetBelow(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetBelow(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_AlignHorizontalCenterWithProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignHorizontalCenterWith(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetAlignHorizontalCenterWith(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_AlignVerticalCenterWithProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignVerticalCenterWith(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetAlignVerticalCenterWith(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_AlignLeftWithProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignLeftWith(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetAlignLeftWith(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_AlignTopWithProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignTopWith(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetAlignTopWith(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_AlignRightWithProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignRightWith(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetAlignRightWith(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_AlignBottomWithProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignBottomWith(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetAlignBottomWith(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_AlignLeftWithPanelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignLeftWithPanel(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetAlignLeftWithPanel(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_AlignTopWithPanelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignTopWithPanel(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetAlignTopWithPanel(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_AlignRightWithPanelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignRightWithPanel(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetAlignRightWithPanel(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_AlignBottomWithPanelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignBottomWithPanel(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetAlignBottomWithPanel(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_AlignHorizontalCenterWithPanelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignHorizontalCenterWithPanel(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetAlignHorizontalCenterWithPanel(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_AlignVerticalCenterWithPanelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlignVerticalCenterWithPanel(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetAlignVerticalCenterWithPanel(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_BorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadiusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenterFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsReadOnly(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsReadOnly(bool) noexcept = 0;
            virtual int32_t __stdcall get_AcceptsReturn(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AcceptsReturn(bool) noexcept = 0;
            virtual int32_t __stdcall get_TextAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextWrapping(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextWrapping(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsSpellCheckEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSpellCheckEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsTextPredictionEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextPredictionEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_Document(void**) noexcept = 0;
            virtual int32_t __stdcall get_InputScope(void**) noexcept = 0;
            virtual int32_t __stdcall put_InputScope(void*) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderText(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColor(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionHighlightColor(void*) noexcept = 0;
            virtual int32_t __stdcall get_PreventKeyboardDisplayOnProgrammaticFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall put_PreventKeyboardDisplayOnProgrammaticFocus(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsColorFontEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorFontEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColorWhenNotFocused(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionHighlightColorWhenNotFocused(void*) noexcept = 0;
            virtual int32_t __stdcall get_MaxLength(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxLength(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalTextAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalTextAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CharacterCasing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CharacterCasing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DisabledFormattingAccelerators(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DisabledFormattingAccelerators(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextDocument(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyout(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionFlyout(void*) noexcept = 0;
            virtual int32_t __stdcall get_ProofingMenuFlyout(void**) noexcept = 0;
            virtual int32_t __stdcall get_Description(void**) noexcept = 0;
            virtual int32_t __stdcall put_Description(void*) noexcept = 0;
            virtual int32_t __stdcall add_TextChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ContextMenuOpening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContextMenuOpening(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Paste(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Paste(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextCompositionStarted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextCompositionStarted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextCompositionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextCompositionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextCompositionEnded(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextCompositionEnded(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_CopyingToClipboard(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CopyingToClipboard(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_CuttingToClipboard(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CuttingToClipboard(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanging(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall GetLinguisticAlternativesAsync(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrder(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextReadingOrder(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ClipboardCopyFormat(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ClipboardCopyFormat(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DesiredCandidateWindowAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DesiredCandidateWindowAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_CandidateWindowBoundsChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CandidateWindowBoundsChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextChanging(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxSelectionChangingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionStart(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionLength(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsReadOnlyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AcceptsReturnProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextWrappingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSpellCheckEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextPredictionEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_InputScopeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreventKeyboardDisplayOnProgrammaticFocusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorFontEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColorWhenNotFocusedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalTextAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CharacterCasingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisabledFormattingAcceleratorsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ProofingMenuFlyoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DescriptionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DesiredCandidateWindowAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ClipboardCopyFormatProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsContentChanging(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlock>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_FontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_FontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_FontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_FontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FontStretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Foreground(void**) noexcept = 0;
            virtual int32_t __stdcall put_Foreground(void*) noexcept = 0;
            virtual int32_t __stdcall get_TextWrapping(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextWrapping(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextTrimming(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextTrimming(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Blocks(void**) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_LineHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_LineHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_LineStackingStrategy(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LineStackingStrategy(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CharacterSpacing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CharacterSpacing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_OverflowContentTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_OverflowContentTarget(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsTextSelectionEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextSelectionEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_HasOverflowContent(bool*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedText(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentStart(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentEnd(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionStart(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionEnd(void**) noexcept = 0;
            virtual int32_t __stdcall get_BaselineOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_MaxLines(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxLines(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextLineBounds(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextLineBounds(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColor(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionHighlightColor(void*) noexcept = 0;
            virtual int32_t __stdcall get_OpticalMarginAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_OpticalMarginAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsColorFontEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorFontEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrder(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextReadingOrder(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsTextScaleFactorEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextScaleFactorEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_TextDecorations(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextDecorations(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsTextTrimmed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalTextAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalTextAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextHighlighters(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyout(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionFlyout(void*) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ContextMenuOpening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContextMenuOpening(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_IsTextTrimmedChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_IsTextTrimmedChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall SelectAll() noexcept = 0;
            virtual int32_t __stdcall Select(void*, void*) noexcept = 0;
            virtual int32_t __stdcall GetPositionFromPoint(winrt::Windows::Foundation::Point, void**) noexcept = 0;
            virtual int32_t __stdcall CopySelectionToClipboard() noexcept = 0;
            virtual int32_t __stdcall get_TextIndent(double*) noexcept = 0;
            virtual int32_t __stdcall put_TextIndent(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OverflowContentTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_OverflowContentTarget(void*) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_ContentSource(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasOverflowContent(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ContentStart(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentEnd(void**) noexcept = 0;
            virtual int32_t __stdcall get_BaselineOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_MaxLines(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxLines(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsTextTrimmed(bool*) noexcept = 0;
            virtual int32_t __stdcall add_IsTextTrimmedChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_IsTextTrimmedChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall GetPositionFromPoint(winrt::Windows::Foundation::Point, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflowStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OverflowContentTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasOverflowContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxLinesProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextTrimmedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextWrappingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextTrimmingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LineHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LineStackingStrategyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CharacterSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OverflowContentTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextSelectionEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasOverflowContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxLinesProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextLineBoundsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OpticalMarginAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorFontEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextScaleFactorEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextDecorationsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextTrimmedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalTextAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextIndentProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRowDefinition>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Height(struct struct_Microsoft_UI_Xaml_GridLength*) noexcept = 0;
            virtual int32_t __stdcall put_Height(struct struct_Microsoft_UI_Xaml_GridLength) noexcept = 0;
            virtual int32_t __stdcall get_MaxHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_MinHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_ActualHeight(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IRowDefinitionStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinHeightProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollAnchorProvider>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CurrentAnchor(void**) noexcept = 0;
            virtual int32_t __stdcall RegisterAnchorCandidate(void*) noexcept = 0;
            virtual int32_t __stdcall UnregisterAnchorCandidate(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollContentPresenter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CanVerticallyScroll(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanVerticallyScroll(bool) noexcept = 0;
            virtual int32_t __stdcall get_CanHorizontallyScroll(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanHorizontallyScroll(bool) noexcept = 0;
            virtual int32_t __stdcall get_ExtentWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExtentHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollOwner(void**) noexcept = 0;
            virtual int32_t __stdcall put_ScrollOwner(void*) noexcept = 0;
            virtual int32_t __stdcall get_CanContentRenderOutsideBounds(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanContentRenderOutsideBounds(bool) noexcept = 0;
            virtual int32_t __stdcall get_SizesContentToTemplatedParent(bool*) noexcept = 0;
            virtual int32_t __stdcall put_SizesContentToTemplatedParent(bool) noexcept = 0;
            virtual int32_t __stdcall LineUp() noexcept = 0;
            virtual int32_t __stdcall LineDown() noexcept = 0;
            virtual int32_t __stdcall LineLeft() noexcept = 0;
            virtual int32_t __stdcall LineRight() noexcept = 0;
            virtual int32_t __stdcall PageUp() noexcept = 0;
            virtual int32_t __stdcall PageDown() noexcept = 0;
            virtual int32_t __stdcall PageLeft() noexcept = 0;
            virtual int32_t __stdcall PageRight() noexcept = 0;
            virtual int32_t __stdcall MouseWheelUp() noexcept = 0;
            virtual int32_t __stdcall MouseWheelDown() noexcept = 0;
            virtual int32_t __stdcall MouseWheelLeft() noexcept = 0;
            virtual int32_t __stdcall MouseWheelRight() noexcept = 0;
            virtual int32_t __stdcall SetHorizontalOffset(double) noexcept = 0;
            virtual int32_t __stdcall SetVerticalOffset(double) noexcept = 0;
            virtual int32_t __stdcall MakeVisible(void*, winrt::Windows::Foundation::Rect, winrt::Windows::Foundation::Rect*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollContentPresenterStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CanContentRenderOutsideBoundsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SizesContentToTemplatedParentProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollView>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_CurrentAnchor(void**) noexcept = 0;
            virtual int32_t __stdcall get_ScrollPresenter(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExpressionAnimationSources(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_ZoomFactor(float*) noexcept = 0;
            virtual int32_t __stdcall get_ExtentWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExtentHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollableWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollableHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_State(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollBarVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalScrollBarVisibility(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollBarVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalScrollBarVisibility(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ContentOrientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ContentOrientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollChainMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalScrollChainMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollChainMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalScrollChainMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollRailMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalScrollRailMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollRailMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalScrollRailMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalScrollMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalScrollMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ComputedHorizontalScrollBarVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ComputedVerticalScrollBarVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ComputedHorizontalScrollMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ComputedVerticalScrollMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ZoomChainMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ZoomChainMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ZoomMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ZoomMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IgnoredInputKinds(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_IgnoredInputKinds(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinZoomFactor(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinZoomFactor(double) noexcept = 0;
            virtual int32_t __stdcall get_MaxZoomFactor(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxZoomFactor(double) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalAnchorRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalAnchorRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_VerticalAnchorRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalAnchorRatio(double) noexcept = 0;
            virtual int32_t __stdcall RegisterAnchorCandidate(void*) noexcept = 0;
            virtual int32_t __stdcall UnregisterAnchorCandidate(void*) noexcept = 0;
            virtual int32_t __stdcall ScrollTo(double, double, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ScrollToWithOptions(double, double, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ScrollBy(double, double, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ScrollByWithOptions(double, double, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall AddScrollVelocity(winrt::Windows::Foundation::Numerics::float2, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ZoomTo(float, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ZoomToWithOptions(float, void*, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ZoomBy(float, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ZoomByWithOptions(float, void*, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall AddZoomVelocity(float, void*, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall add_ExtentChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ExtentChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_StateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_StateChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ViewChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ViewChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ScrollAnimationStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ScrollAnimationStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ZoomAnimationStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ZoomAnimationStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ScrollCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ScrollCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ZoomCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ZoomCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_BringingIntoView(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_BringingIntoView(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_AnchorRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_AnchorRequested(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollViewFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollViewStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ScrollPresenterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollBarVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollBarVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentOrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollChainModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollChainModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollRailModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollRailModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ComputedHorizontalScrollBarVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ComputedVerticalScrollBarVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ComputedHorizontalScrollModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ComputedVerticalScrollModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ZoomChainModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ZoomModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IgnoredInputKindsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinZoomFactorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxZoomFactorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalAnchorRatioProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalAnchorRatioProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollViewer>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalScrollBarVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalScrollBarVisibility(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollBarVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalScrollBarVisibility(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsHorizontalRailEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHorizontalRailEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsVerticalRailEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsVerticalRailEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsHorizontalScrollChainingEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHorizontalScrollChainingEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsVerticalScrollChainingEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsVerticalScrollChainingEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomChainingEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsZoomChainingEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsScrollInertiaEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsScrollInertiaEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomInertiaEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsZoomInertiaEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalScrollMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalScrollMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ZoomMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ZoomMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSnapPointsAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalSnapPointsAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSnapPointsAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalSnapPointsAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSnapPointsType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalSnapPointsType(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSnapPointsType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalSnapPointsType(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ZoomSnapPointsType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ZoomSnapPointsType(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollableWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ComputedHorizontalScrollBarVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ExtentWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollableHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_ComputedVerticalScrollBarVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ExtentHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_MinZoomFactor(float*) noexcept = 0;
            virtual int32_t __stdcall put_MinZoomFactor(float) noexcept = 0;
            virtual int32_t __stdcall get_MaxZoomFactor(float*) noexcept = 0;
            virtual int32_t __stdcall put_MaxZoomFactor(float) noexcept = 0;
            virtual int32_t __stdcall get_ZoomFactor(float*) noexcept = 0;
            virtual int32_t __stdcall get_ZoomSnapPoints(void**) noexcept = 0;
            virtual int32_t __stdcall get_TopLeftHeader(void**) noexcept = 0;
            virtual int32_t __stdcall put_TopLeftHeader(void*) noexcept = 0;
            virtual int32_t __stdcall get_LeftHeader(void**) noexcept = 0;
            virtual int32_t __stdcall put_LeftHeader(void*) noexcept = 0;
            virtual int32_t __stdcall get_TopHeader(void**) noexcept = 0;
            virtual int32_t __stdcall put_TopHeader(void*) noexcept = 0;
            virtual int32_t __stdcall get_ReduceViewportForCoreInputViewOcclusions(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ReduceViewportForCoreInputViewOcclusions(bool) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalAnchorRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalAnchorRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_VerticalAnchorRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalAnchorRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_CanContentRenderOutsideBounds(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanContentRenderOutsideBounds(bool) noexcept = 0;
            virtual int32_t __stdcall add_AnchorRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_AnchorRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ViewChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ViewChanging(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ViewChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ViewChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DirectManipulationStarted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DirectManipulationStarted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DirectManipulationCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DirectManipulationCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ScrollToHorizontalOffset(double) noexcept = 0;
            virtual int32_t __stdcall ScrollToVerticalOffset(double) noexcept = 0;
            virtual int32_t __stdcall ZoomToFactor(float) noexcept = 0;
            virtual int32_t __stdcall ChangeView(void*, void*, void*, bool*) noexcept = 0;
            virtual int32_t __stdcall ChangeViewWithOptionalAnimation(void*, void*, void*, bool, bool*) noexcept = 0;
            virtual int32_t __stdcall InvalidateScrollInfo() noexcept = 0;
            virtual int32_t __stdcall get_IsDeferredScrollingEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsDeferredScrollingEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_BringIntoViewOnFocusChange(bool*) noexcept = 0;
            virtual int32_t __stdcall put_BringIntoViewOnFocusChange(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalSnapPointsAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSnapPointsAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSnapPointsTypeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSnapPointsTypeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ZoomSnapPointsTypeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ViewportWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ScrollableWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ComputedHorizontalScrollBarVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExtentWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ViewportHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ScrollableHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ComputedVerticalScrollBarVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExtentHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinZoomFactorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxZoomFactorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ZoomFactorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ZoomSnapPointsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TopLeftHeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LeftHeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TopHeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ReduceViewportForCoreInputViewOcclusionsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalAnchorRatioProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalAnchorRatioProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollBarVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetHorizontalScrollBarVisibility(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetHorizontalScrollBarVisibility(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollBarVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetVerticalScrollBarVisibility(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetVerticalScrollBarVisibility(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsHorizontalRailEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsHorizontalRailEnabled(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsHorizontalRailEnabled(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_IsVerticalRailEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsVerticalRailEnabled(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsVerticalRailEnabled(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_IsHorizontalScrollChainingEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsHorizontalScrollChainingEnabled(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsHorizontalScrollChainingEnabled(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_IsVerticalScrollChainingEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsVerticalScrollChainingEnabled(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsVerticalScrollChainingEnabled(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomChainingEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsZoomChainingEnabled(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsZoomChainingEnabled(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_IsScrollInertiaEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsScrollInertiaEnabled(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsScrollInertiaEnabled(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomInertiaEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsZoomInertiaEnabled(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsZoomInertiaEnabled(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetHorizontalScrollMode(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetHorizontalScrollMode(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetVerticalScrollMode(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetVerticalScrollMode(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ZoomModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetZoomMode(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetZoomMode(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CanContentRenderOutsideBoundsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetCanContentRenderOutsideBounds(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetCanContentRenderOutsideBounds(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_IsDeferredScrollingEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsDeferredScrollingEnabled(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsDeferredScrollingEnabled(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_BringIntoViewOnFocusChangeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetBringIntoViewOnFocusChange(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetBringIntoViewOnFocusChange(void*, bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerView>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_ZoomFactor(float*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsIntermediate(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_NextView(void**) noexcept = 0;
            virtual int32_t __stdcall get_FinalView(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsInertial(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollingAnchorRequestedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AnchorCandidates(void**) noexcept = 0;
            virtual int32_t __stdcall get_AnchorElement(void**) noexcept = 0;
            virtual int32_t __stdcall put_AnchorElement(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollingBringingIntoViewEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SnapPointsMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SnapPointsMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_RequestEventArgs(void**) noexcept = 0;
            virtual int32_t __stdcall get_TargetHorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_TargetVerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_CorrelationId(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollAnimationStartingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Animation(void**) noexcept = 0;
            virtual int32_t __stdcall put_Animation(void*) noexcept = 0;
            virtual int32_t __stdcall get_StartPosition(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall get_EndPosition(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall get_CorrelationId(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollCompletedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CorrelationId(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollOptions>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AnimationMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_AnimationMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SnapPointsMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SnapPointsMode(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollOptionsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(int32_t, void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstance2(int32_t, int32_t, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomAnimationStartingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CenterPoint(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall get_StartZoomFactor(float*) noexcept = 0;
            virtual int32_t __stdcall get_EndZoomFactor(float*) noexcept = 0;
            virtual int32_t __stdcall get_Animation(void**) noexcept = 0;
            virtual int32_t __stdcall put_Animation(void*) noexcept = 0;
            virtual int32_t __stdcall get_CorrelationId(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomCompletedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CorrelationId(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomOptions>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AnimationMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_AnimationMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SnapPointsMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SnapPointsMode(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomOptionsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(int32_t, void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstance2(int32_t, int32_t, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AddedSections(void**) noexcept = 0;
            virtual int32_t __stdcall get_RemovedSections(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AddedItems(void**) noexcept = 0;
            virtual int32_t __stdcall get_RemovedItems(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstanceWithRemovedItemsAndAddedItems(void*, void*, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISelectorBar>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedItem(void*) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall get_Icon(void**) noexcept = 0;
            virtual int32_t __stdcall put_Icon(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarItemStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarSelectionChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItemProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoom>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ZoomedInView(void**) noexcept = 0;
            virtual int32_t __stdcall put_ZoomedInView(void*) noexcept = 0;
            virtual int32_t __stdcall get_ZoomedOutView(void**) noexcept = 0;
            virtual int32_t __stdcall put_ZoomedOutView(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomedInViewActive(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsZoomedInViewActive(bool) noexcept = 0;
            virtual int32_t __stdcall get_CanChangeViews(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanChangeViews(bool) noexcept = 0;
            virtual int32_t __stdcall add_ViewChangeStarted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ViewChangeStarted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ViewChangeCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ViewChangeCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ToggleActiveView() noexcept = 0;
            virtual int32_t __stdcall get_IsZoomOutButtonEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsZoomOutButtonEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomInformation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SemanticZoomOwner(void**) noexcept = 0;
            virtual int32_t __stdcall put_SemanticZoomOwner(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsActiveView(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsActiveView(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomedInView(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsZoomedInView(bool) noexcept = 0;
            virtual int32_t __stdcall InitializeViewChange() noexcept = 0;
            virtual int32_t __stdcall CompleteViewChange() noexcept = 0;
            virtual int32_t __stdcall MakeVisible(void*) noexcept = 0;
            virtual int32_t __stdcall StartViewChangeFrom(void*, void*) noexcept = 0;
            virtual int32_t __stdcall StartViewChangeTo(void*, void*) noexcept = 0;
            virtual int32_t __stdcall CompleteViewChangeFrom(void*, void*) noexcept = 0;
            virtual int32_t __stdcall CompleteViewChangeTo(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall put_Item(void*) noexcept = 0;
            virtual int32_t __stdcall get_Bounds(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall put_Bounds(winrt::Windows::Foundation::Rect) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ZoomedInViewProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ZoomedOutViewProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomedInViewActiveProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanChangeViewsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomOutButtonEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsSourceZoomedInView(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSourceZoomedInView(bool) noexcept = 0;
            virtual int32_t __stdcall get_SourceItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SourceItem(void*) noexcept = 0;
            virtual int32_t __stdcall get_DestinationItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_DestinationItem(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISlider>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IntermediateValue(double*) noexcept = 0;
            virtual int32_t __stdcall put_IntermediateValue(double) noexcept = 0;
            virtual int32_t __stdcall get_StepFrequency(double*) noexcept = 0;
            virtual int32_t __stdcall put_StepFrequency(double) noexcept = 0;
            virtual int32_t __stdcall get_SnapsTo(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SnapsTo(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TickFrequency(double*) noexcept = 0;
            virtual int32_t __stdcall put_TickFrequency(double) noexcept = 0;
            virtual int32_t __stdcall get_TickPlacement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TickPlacement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsDirectionReversed(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsDirectionReversed(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsThumbToolTipEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsThumbToolTipEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_ThumbToolTipValueConverter(void**) noexcept = 0;
            virtual int32_t __stdcall put_ThumbToolTipValueConverter(void*) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISliderFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISliderStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IntermediateValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StepFrequencyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SnapsToProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TickFrequencyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TickPlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsDirectionReversedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsThumbToolTipEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ThumbToolTipValueConverterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISplitButton>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Flyout(void**) noexcept = 0;
            virtual int32_t __stdcall put_Flyout(void*) noexcept = 0;
            virtual int32_t __stdcall get_Command(void**) noexcept = 0;
            virtual int32_t __stdcall put_Command(void*) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_CommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall add_Click(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Click(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FlyoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameterProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISplitView>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_Pane(void**) noexcept = 0;
            virtual int32_t __stdcall put_Pane(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsPaneOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPaneOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_OpenPaneLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_OpenPaneLength(double) noexcept = 0;
            virtual int32_t __stdcall get_CompactPaneLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_CompactPaneLength(double) noexcept = 0;
            virtual int32_t __stdcall get_PanePlacement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PanePlacement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DisplayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DisplayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_PaneBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LightDismissOverlayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_PaneClosing(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneClosing(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PaneClosed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneClosed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PaneOpening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneOpening(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PaneOpened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneOpened(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISplitViewFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISplitViewStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPaneOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OpenPaneLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CompactPaneLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PanePlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettingsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IStackLayout>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Spacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_Spacing(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SpacingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IStackPanel>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AreScrollSnapPointsRegular(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreScrollSnapPointsRegular(bool) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundSizing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundSizing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_BorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_BorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_BorderThickness(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_BorderThickness(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius*) noexcept = 0;
            virtual int32_t __stdcall put_CornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_Spacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_Spacing(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IStackPanelFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IStackPanelStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AreScrollSnapPointsRegularProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundSizingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BorderThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CornerRadiusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SpacingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IStyleSelector>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall SelectStyle(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IStyleSelectorFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IStyleSelectorOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall SelectStyleCore(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISwapChainBackgroundPanel>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanel>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CompositionScaleX(float*) noexcept = 0;
            virtual int32_t __stdcall get_CompositionScaleY(float*) noexcept = 0;
            virtual int32_t __stdcall add_CompositionScaleChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CompositionScaleChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall CreateCoreIndependentInputSource(uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanelFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanelStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CompositionScaleXProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CompositionScaleYProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISwipeControl>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_LeftItems(void**) noexcept = 0;
            virtual int32_t __stdcall put_LeftItems(void*) noexcept = 0;
            virtual int32_t __stdcall get_RightItems(void**) noexcept = 0;
            virtual int32_t __stdcall put_RightItems(void*) noexcept = 0;
            virtual int32_t __stdcall get_TopItems(void**) noexcept = 0;
            virtual int32_t __stdcall put_TopItems(void*) noexcept = 0;
            virtual int32_t __stdcall get_BottomItems(void**) noexcept = 0;
            virtual int32_t __stdcall put_BottomItems(void*) noexcept = 0;
            virtual int32_t __stdcall Close() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISwipeControlFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISwipeControlStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_LeftItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RightItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TopItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BottomItemsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISwipeItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall get_IconSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_Background(void**) noexcept = 0;
            virtual int32_t __stdcall put_Background(void*) noexcept = 0;
            virtual int32_t __stdcall get_Foreground(void**) noexcept = 0;
            virtual int32_t __stdcall put_Foreground(void*) noexcept = 0;
            virtual int32_t __stdcall get_Command(void**) noexcept = 0;
            virtual int32_t __stdcall put_Command(void*) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_CommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall get_BehaviorOnInvoked(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BehaviorOnInvoked(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_Invoked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Invoked(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SwipeControl(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BehaviorOnInvokedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISwipeItems>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Mode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Mode(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemsStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISymbolIcon>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Symbol(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Symbol(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstanceWithSymbol(int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Symbol(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Symbol(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SymbolProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SymbolProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITabView>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TabWidthMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TabWidthMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonOverlayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TabStripHeader(void**) noexcept = 0;
            virtual int32_t __stdcall put_TabStripHeader(void*) noexcept = 0;
            virtual int32_t __stdcall get_TabStripHeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_TabStripHeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_TabStripFooter(void**) noexcept = 0;
            virtual int32_t __stdcall put_TabStripFooter(void*) noexcept = 0;
            virtual int32_t __stdcall get_TabStripFooterTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_TabStripFooterTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsAddTabButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsAddTabButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_AddTabButtonCommand(void**) noexcept = 0;
            virtual int32_t __stdcall put_AddTabButtonCommand(void*) noexcept = 0;
            virtual int32_t __stdcall get_AddTabButtonCommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_AddTabButtonCommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall add_TabCloseRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TabCloseRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TabDroppedOutside(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TabDroppedOutside(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_AddTabButtonClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_AddTabButtonClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TabItemsChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TabItemsChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_TabItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_TabItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_TabItems(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_TabItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_TabItemTemplateSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_TabItemTemplateSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_CanDragTabs(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanDragTabs(bool) noexcept = 0;
            virtual int32_t __stdcall get_CanReorderTabs(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanReorderTabs(bool) noexcept = 0;
            virtual int32_t __stdcall get_AllowDropTabs(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AllowDropTabs(bool) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectedIndex(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedItem(void*) noexcept = 0;
            virtual int32_t __stdcall ContainerFromItem(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ContainerFromIndex(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TabDragStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TabDragStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TabDragCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TabDragCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TabStripDragOver(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TabStripDragOver(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TabStripDrop(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TabStripDrop(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITabViewFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITabViewItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_IconSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsClosable(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsClosable(bool) noexcept = 0;
            virtual int32_t __stdcall get_TabViewTemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall add_CloseRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CloseRequested(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsClosableProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabViewTemplateSettingsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconElement(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconElement(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TabGeometry(void**) noexcept = 0;
            virtual int32_t __stdcall put_TabGeometry(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconElementProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsStatics2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TabGeometryProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITabViewStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TabWidthModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabStripHeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabStripHeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabStripFooterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabStripFooterTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsAddTabButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AddTabButtonCommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AddTabButtonCommandParameterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabItemsSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabItemTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabItemTemplateSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonOverlayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanDragTabsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanReorderTabsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AllowDropTabsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItemProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabCloseRequestedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall get_Tab(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDragCompletedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DropResult(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall get_Tab(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDragStartingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
            virtual int32_t __stdcall get_Data(void**) noexcept = 0;
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall get_Tab(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDroppedOutsideEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall get_Tab(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITeachingTip>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Title(void**) noexcept = 0;
            virtual int32_t __stdcall put_Title(void*) noexcept = 0;
            virtual int32_t __stdcall get_Subtitle(void**) noexcept = 0;
            virtual int32_t __stdcall put_Subtitle(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_Target(void**) noexcept = 0;
            virtual int32_t __stdcall put_Target(void*) noexcept = 0;
            virtual int32_t __stdcall get_TailVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TailVisibility(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ActionButtonContent(void**) noexcept = 0;
            virtual int32_t __stdcall put_ActionButtonContent(void*) noexcept = 0;
            virtual int32_t __stdcall get_ActionButtonStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_ActionButtonStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_ActionButtonCommand(void**) noexcept = 0;
            virtual int32_t __stdcall put_ActionButtonCommand(void*) noexcept = 0;
            virtual int32_t __stdcall get_ActionButtonCommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_ActionButtonCommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonContent(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonContent(void*) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommand(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonCommand(void*) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonCommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlacementMargin(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_PlacementMargin(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_ShouldConstrainToRootBounds(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShouldConstrainToRootBounds(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsLightDismissEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsLightDismissEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_PreferredPlacement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PreferredPlacement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HeroContentPlacement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HeroContentPlacement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HeroContent(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeroContent(void*) noexcept = 0;
            virtual int32_t __stdcall get_IconSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall add_ActionButtonClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ActionButtonClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_CloseButtonClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CloseButtonClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closing(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closing(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closed(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Reason(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Reason(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
            virtual int32_t __stdcall GetDeferral(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TailVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TitleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SubtitleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ActionButtonContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ActionButtonStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ActionButtonCommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ActionButtonCommandParameterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommandParameterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlacementMarginProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShouldConstrainToRootBoundsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsLightDismissEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreferredPlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeroContentPlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeroContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettingsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TopRightHighlightMargin(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_TopRightHighlightMargin(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_TopLeftHighlightMargin(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_TopLeftHighlightMargin(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_IconElement(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconElement(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TopRightHighlightMarginProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TopLeftHighlightMarginProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconElementProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITextBlock>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_FontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_FontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_FontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_FontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FontStretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CharacterSpacing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CharacterSpacing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Foreground(void**) noexcept = 0;
            virtual int32_t __stdcall put_Foreground(void*) noexcept = 0;
            virtual int32_t __stdcall get_TextWrapping(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextWrapping(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextTrimming(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextTrimming(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall get_Inlines(void**) noexcept = 0;
            virtual int32_t __stdcall get_Padding(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_Padding(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_LineHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_LineHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_LineStackingStrategy(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LineStackingStrategy(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsTextSelectionEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextSelectionEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_SelectedText(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentStart(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentEnd(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionStart(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionEnd(void**) noexcept = 0;
            virtual int32_t __stdcall get_BaselineOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColor(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionHighlightColor(void*) noexcept = 0;
            virtual int32_t __stdcall get_MaxLines(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxLines(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextLineBounds(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextLineBounds(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_OpticalMarginAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_OpticalMarginAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsColorFontEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorFontEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrder(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextReadingOrder(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsTextScaleFactorEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextScaleFactorEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_TextDecorations(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextDecorations(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsTextTrimmed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalTextAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalTextAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextHighlighters(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyout(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionFlyout(void*) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ContextMenuOpening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContextMenuOpening(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_IsTextTrimmedChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_IsTextTrimmedChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall SelectAll() noexcept = 0;
            virtual int32_t __stdcall Select(void*, void*) noexcept = 0;
            virtual int32_t __stdcall GetAlphaMask(void**) noexcept = 0;
            virtual int32_t __stdcall CopySelectionToClipboard() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITextBlockStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CharacterSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextWrappingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextTrimmingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LineHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LineStackingStrategyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextSelectionEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxLinesProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextLineBoundsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OpticalMarginAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorFontEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextScaleFactorEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextDecorationsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextTrimmedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalTextAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyoutProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITextBox>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedText(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedText(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionLength(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionLength(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectionStart(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionStart(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxLength(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxLength(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsReadOnly(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsReadOnly(bool) noexcept = 0;
            virtual int32_t __stdcall get_AcceptsReturn(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AcceptsReturn(bool) noexcept = 0;
            virtual int32_t __stdcall get_TextAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextWrapping(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextWrapping(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsSpellCheckEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSpellCheckEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsTextPredictionEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextPredictionEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_InputScope(void**) noexcept = 0;
            virtual int32_t __stdcall put_InputScope(void*) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderText(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColor(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionHighlightColor(void*) noexcept = 0;
            virtual int32_t __stdcall get_PreventKeyboardDisplayOnProgrammaticFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall put_PreventKeyboardDisplayOnProgrammaticFocus(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsColorFontEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorFontEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColorWhenNotFocused(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionHighlightColorWhenNotFocused(void*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalTextAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalTextAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CharacterCasing(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CharacterCasing(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_CanPasteClipboardContent(bool*) noexcept = 0;
            virtual int32_t __stdcall get_CanUndo(bool*) noexcept = 0;
            virtual int32_t __stdcall get_CanRedo(bool*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyout(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionFlyout(void*) noexcept = 0;
            virtual int32_t __stdcall get_ProofingMenuFlyout(void**) noexcept = 0;
            virtual int32_t __stdcall get_Description(void**) noexcept = 0;
            virtual int32_t __stdcall put_Description(void*) noexcept = 0;
            virtual int32_t __stdcall add_TextChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ContextMenuOpening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContextMenuOpening(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Paste(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Paste(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextCompositionStarted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextCompositionStarted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextCompositionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextCompositionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextCompositionEnded(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextCompositionEnded(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_CopyingToClipboard(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CopyingToClipboard(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_CuttingToClipboard(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CuttingToClipboard(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_BeforeTextChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_BeforeTextChanging(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanging(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall Select(int32_t, int32_t) noexcept = 0;
            virtual int32_t __stdcall SelectAll() noexcept = 0;
            virtual int32_t __stdcall GetRectFromCharacterIndex(int32_t, bool, winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall GetLinguisticAlternativesAsync(void**) noexcept = 0;
            virtual int32_t __stdcall Undo() noexcept = 0;
            virtual int32_t __stdcall Redo() noexcept = 0;
            virtual int32_t __stdcall PasteFromClipboard() noexcept = 0;
            virtual int32_t __stdcall CopySelectionToClipboard() noexcept = 0;
            virtual int32_t __stdcall CutSelectionToClipboard() noexcept = 0;
            virtual int32_t __stdcall ClearUndoRedoHistory() noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrder(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextReadingOrder(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DesiredCandidateWindowAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DesiredCandidateWindowAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_CandidateWindowBoundsChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CandidateWindowBoundsChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TextChanging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TextChanging(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_NewText(void**) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITextBoxFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITextBoxSelectionChangingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionStart(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionLength(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITextBoxStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsReadOnlyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AcceptsReturnProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextWrappingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSpellCheckEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextPredictionEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_InputScopeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreventKeyboardDisplayOnProgrammaticFocusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorFontEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColorWhenNotFocusedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalTextAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CharacterCasingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanPasteClipboardContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanUndoProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanRedoProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ProofingMenuFlyoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DescriptionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DesiredCandidateWindowAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrderProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITextBoxTextChangingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsContentChanging(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITextChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITextCompositionChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_StartIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Length(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITextCompositionEndedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_StartIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Length(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITextCompositionStartedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_StartIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Length(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITextControlPasteEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITimePickedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldTime(int64_t*) noexcept = 0;
            virtual int32_t __stdcall get_NewTime(int64_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITimePicker>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_ClockIdentifier(void**) noexcept = 0;
            virtual int32_t __stdcall put_ClockIdentifier(void*) noexcept = 0;
            virtual int32_t __stdcall get_MinuteIncrement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinuteIncrement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Time(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_Time(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LightDismissOverlayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedTime(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedTime(void*) noexcept = 0;
            virtual int32_t __stdcall add_TimeChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TimeChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SelectedTimeChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectedTimeChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyout>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ClockIdentifier(void**) noexcept = 0;
            virtual int32_t __stdcall put_ClockIdentifier(void*) noexcept = 0;
            virtual int32_t __stdcall get_Time(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_Time(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_MinuteIncrement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinuteIncrement(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_TimePicked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TimePicked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ShowAtAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDefaultShadowEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsDefaultShadowEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenterStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDefaultShadowEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ClockIdentifierProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TimeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinuteIncrementProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITimePickerSelectedValueChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldTime(void**) noexcept = 0;
            virtual int32_t __stdcall get_NewTime(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITimePickerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ClockIdentifierProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinuteIncrementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TimeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedTimeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldTime(int64_t*) noexcept = 0;
            virtual int32_t __stdcall get_NewTime(int64_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsChecked(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsChecked(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsCheckedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButton>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsChecked(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsChecked(bool) noexcept = 0;
            virtual int32_t __stdcall add_IsCheckedChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_IsCheckedChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsCheckedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IToggleSwitch>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsOn(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsOn(bool) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_OnContent(void**) noexcept = 0;
            virtual int32_t __stdcall put_OnContent(void*) noexcept = 0;
            virtual int32_t __stdcall get_OnContentTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_OnContentTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_OffContent(void**) noexcept = 0;
            virtual int32_t __stdcall put_OffContent(void*) noexcept = 0;
            virtual int32_t __stdcall get_OffContentTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_OffContentTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall add_Toggled(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Toggled(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IToggleSwitchOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall OnToggled() noexcept = 0;
            virtual int32_t __stdcall OnOnContentChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnOffContentChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnHeaderChanged(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IToggleSwitchStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsOnProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OnContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OnContentTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OffContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OffContentTemplateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IToolTip>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_IsOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_Placement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Placement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PlacementTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlacementTarget(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlacementRect(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlacementRect(void*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall add_Closed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Opened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Opened(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IToolTipFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IToolTipService>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IToolTipServiceStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetPlacement(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetPlacement(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PlacementTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetPlacementTarget(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetPlacementTarget(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_ToolTipProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetToolTip(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetToolTip(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IToolTipStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlacementTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlacementRectProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffsetProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeView>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_RootNodes(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedNodes(void**) noexcept = 0;
            virtual int32_t __stdcall Expand(void*) noexcept = 0;
            virtual int32_t __stdcall Collapse(void*) noexcept = 0;
            virtual int32_t __stdcall SelectAll() noexcept = 0;
            virtual int32_t __stdcall add_ItemInvoked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ItemInvoked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Expanding(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Expanding(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Collapsed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Collapsed(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeView2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall NodeFromContainer(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ContainerFromNode(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ItemFromContainer(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ContainerFromItem(void*, void**) noexcept = 0;
            virtual int32_t __stdcall get_CanDragItems(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanDragItems(bool) noexcept = 0;
            virtual int32_t __stdcall get_CanReorderItems(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanReorderItems(bool) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplateSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemContainerStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyleSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemContainerStyleSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemContainerTransitions(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall add_DragItemsStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DragItemsStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DragItemsCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DragItemsCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_SelectedNode(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedNode(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedItem(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItems(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeView3>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Node(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DropResult(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_NewParentItem(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
            virtual int32_t __stdcall get_Data(void**) noexcept = 0;
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Node(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItem>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_GlyphOpacity(double*) noexcept = 0;
            virtual int32_t __stdcall put_GlyphOpacity(double) noexcept = 0;
            virtual int32_t __stdcall get_GlyphBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_GlyphBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandedGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_ExpandedGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_CollapsedGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_CollapsedGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_GlyphSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_GlyphSize(double) noexcept = 0;
            virtual int32_t __stdcall get_IsExpanded(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsExpanded(bool) noexcept = 0;
            virtual int32_t __stdcall get_TreeViewItemTemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItem2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HasUnrealizedChildren(bool*) noexcept = 0;
            virtual int32_t __stdcall put_HasUnrealizedChildren(bool) noexcept = 0;
            virtual int32_t __stdcall get_ItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsSource(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_InvokedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_GlyphOpacityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GlyphBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExpandedGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CollapsedGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GlyphSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsExpandedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TreeViewItemTemplateSettingsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemStatics2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HasUnrealizedChildrenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsSourceProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ExpandedGlyphVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_CollapsedGlyphVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Indentation(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall get_DragItemsCount(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ExpandedGlyphVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CollapsedGlyphVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IndentationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DragItemsCountProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewList>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewListFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNode>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_Parent(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsExpanded(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsExpanded(bool) noexcept = 0;
            virtual int32_t __stdcall get_HasChildren(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Depth(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_HasUnrealizedChildren(bool*) noexcept = 0;
            virtual int32_t __stdcall put_HasUnrealizedChildren(bool) noexcept = 0;
            virtual int32_t __stdcall get_Children(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DepthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsExpandedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasChildrenProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewSelectionChangedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AddedItems(void**) noexcept = 0;
            virtual int32_t __stdcall get_RemovedItems(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedItemProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITreeViewStatics2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CanDragItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanReorderItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyleSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerTransitionsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsSourceProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneView>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Pane1(void**) noexcept = 0;
            virtual int32_t __stdcall put_Pane1(void*) noexcept = 0;
            virtual int32_t __stdcall get_Pane2(void**) noexcept = 0;
            virtual int32_t __stdcall put_Pane2(void*) noexcept = 0;
            virtual int32_t __stdcall get_Pane1Length(struct struct_Microsoft_UI_Xaml_GridLength*) noexcept = 0;
            virtual int32_t __stdcall put_Pane1Length(struct struct_Microsoft_UI_Xaml_GridLength) noexcept = 0;
            virtual int32_t __stdcall get_Pane2Length(struct struct_Microsoft_UI_Xaml_GridLength*) noexcept = 0;
            virtual int32_t __stdcall put_Pane2Length(struct struct_Microsoft_UI_Xaml_GridLength) noexcept = 0;
            virtual int32_t __stdcall get_PanePriority(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PanePriority(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Mode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_WideModeConfiguration(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_WideModeConfiguration(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TallModeConfiguration(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TallModeConfiguration(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinWideModeWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinWideModeWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_MinTallModeHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinTallModeHeight(double) noexcept = 0;
            virtual int32_t __stdcall add_ModeChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ModeChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneViewFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Pane1Property(void**) noexcept = 0;
            virtual int32_t __stdcall get_Pane2Property(void**) noexcept = 0;
            virtual int32_t __stdcall get_Pane1LengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_Pane2LengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PanePriorityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_WideModeConfigurationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TallModeConfigurationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinWideModeWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinTallModeHeightProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IUIElementCollection>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Move(uint32_t, uint32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayout>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinItemWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinItemWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_MinItemHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinItemHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_MinRowSpacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinRowSpacing(double) noexcept = 0;
            virtual int32_t __stdcall get_MinColumnSpacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinColumnSpacing(double) noexcept = 0;
            virtual int32_t __stdcall get_ItemsJustification(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ItemsJustification(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ItemsStretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ItemsStretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaximumRowsOrColumns(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaximumRowsOrColumns(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinItemWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinItemHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinRowSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinColumnSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsJustificationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsStretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaximumRowsOrColumnsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IUserControl>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IUserControlFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IUserControlStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IVariableSizedWrapGrid>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_ItemHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_ItemWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_ItemWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalChildrenAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalChildrenAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalChildrenAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalChildrenAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaximumRowsOrColumns(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaximumRowsOrColumns(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IVariableSizedWrapGridStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalChildrenAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalChildrenAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaximumRowsOrColumnsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RowSpanProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetRowSpan(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetRowSpan(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ColumnSpanProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetColumnSpan(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetColumnSpan(void*, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IViewbox>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Child(void**) noexcept = 0;
            virtual int32_t __stdcall put_Child(void*) noexcept = 0;
            virtual int32_t __stdcall get_Stretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Stretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_StretchDirection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_StretchDirection(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IViewboxStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_StretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StretchDirectionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayout>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemCount(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetItemAt(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall get_RealizationRect(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall GetOrCreateElementAt(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetOrCreateElementAt2(int32_t, uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall RecycleElement(void*) noexcept = 0;
            virtual int32_t __stdcall get_RecommendedAnchorIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_LayoutOrigin(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_LayoutOrigin(winrt::Windows::Foundation::Point) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_VisibleRect(winrt::Windows::Foundation::Rect*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall ItemCountCore(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetItemAtCore(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall RealizationRectCore(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall GetOrCreateElementAtCore(int32_t, uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall RecycleElementCore(void*) noexcept = 0;
            virtual int32_t __stdcall get_RecommendedAnchorIndexCore(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_LayoutOriginCore(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_LayoutOriginCore(winrt::Windows::Foundation::Point) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall VisibleRectCore(winrt::Windows::Foundation::Rect*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall InitializeForContextCore(void*) noexcept = 0;
            virtual int32_t __stdcall UninitializeForContextCore(void*) noexcept = 0;
            virtual int32_t __stdcall MeasureOverride(void*, winrt::Windows::Foundation::Size, winrt::Windows::Foundation::Size*) noexcept = 0;
            virtual int32_t __stdcall ArrangeOverride(void*, winrt::Windows::Foundation::Size, winrt::Windows::Foundation::Size*) noexcept = 0;
            virtual int32_t __stdcall OnItemsChangedCore(void*, void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanel>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemContainerGenerator(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall OnItemsChanged(void*, void*) noexcept = 0;
            virtual int32_t __stdcall OnClearChildren() noexcept = 0;
            virtual int32_t __stdcall BringIndexIntoView(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelProtected>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall AddInternalChild(void*) noexcept = 0;
            virtual int32_t __stdcall InsertInternalChild(int32_t, void*) noexcept = 0;
            virtual int32_t __stdcall RemoveInternalChildRange(int32_t, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanel>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AreScrollSnapPointsRegular(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreScrollSnapPointsRegular(bool) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_CleanUpVirtualizedItemEvent(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CleanUpVirtualizedItemEvent(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanelOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall OnCleanUpVirtualizedItem(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanelStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AreScrollSnapPointsRegularProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VirtualizationModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetVirtualizationMode(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetVirtualizationMode(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsVirtualizingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsVirtualizing(void*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IWebView2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CoreWebView2(void**) noexcept = 0;
            virtual int32_t __stdcall EnsureCoreWebView2Async(void**) noexcept = 0;
            virtual int32_t __stdcall ExecuteScriptAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall put_Source(void*) noexcept = 0;
            virtual int32_t __stdcall get_CanGoForward(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanGoForward(bool) noexcept = 0;
            virtual int32_t __stdcall get_CanGoBack(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanGoBack(bool) noexcept = 0;
            virtual int32_t __stdcall get_DefaultBackgroundColor(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_DefaultBackgroundColor(struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall Reload() noexcept = 0;
            virtual int32_t __stdcall GoForward() noexcept = 0;
            virtual int32_t __stdcall GoBack() noexcept = 0;
            virtual int32_t __stdcall NavigateToString(void*) noexcept = 0;
            virtual int32_t __stdcall Close() noexcept = 0;
            virtual int32_t __stdcall add_NavigationCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_NavigationCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_WebMessageReceived(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_WebMessageReceived(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_NavigationStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_NavigationStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_CoreProcessFailed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CoreProcessFailed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_CoreWebView2Initialized(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CoreWebView2Initialized(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IWebView22>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall EnsureCoreWebView2WithEnvironmentAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall EnsureCoreWebView2WithEnvironmentAndOptionsAsync(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IWebView2Factory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IWebView2Statics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanGoForwardProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanGoBackProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DefaultBackgroundColorProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IWrapGrid>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_ItemWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_ItemHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_ItemHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalChildrenAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalChildrenAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalChildrenAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalChildrenAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaximumRowsOrColumns(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaximumRowsOrColumns(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IWrapGridStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalChildrenAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalChildrenAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaximumRowsOrColumnsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IXamlControlsResources>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_UseCompactResources(bool*) noexcept = 0;
            virtual int32_t __stdcall put_UseCompactResources(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall EnsureRevealLights(void*) noexcept = 0;
            virtual int32_t __stdcall get_UseCompactResourcesProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ContextMenuOpeningEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::DragItemsStartingEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ItemClickEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ListViewItemToKeyHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::ListViewKeyToItemHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::SectionsInViewChangedEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::TextChangedEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::TextControlPasteEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnchorRequestedEventArgs
    {
        [[nodiscard]] auto Anchor() const;
        auto Anchor(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto AnchorCandidates() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnchorRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnchorRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedIcon
    {
        [[nodiscard]] auto Source() const;
        auto Source(winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource2 const& value) const;
        [[nodiscard]] auto FallbackIconSource() const;
        auto FallbackIconSource(winrt::Microsoft::UI::Xaml::Controls::IconSource const& value) const;
        [[nodiscard]] auto MirroredWhenRightToLeft() const;
        auto MirroredWhenRightToLeft(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIcon>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedIcon<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedIconFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedIconFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedIconSource
    {
        [[nodiscard]] auto Source() const;
        auto Source(winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource2 const& value) const;
        [[nodiscard]] auto FallbackIconSource() const;
        auto FallbackIconSource(winrt::Microsoft::UI::Xaml::Controls::IconSource const& value) const;
        [[nodiscard]] auto MirroredWhenRightToLeft() const;
        auto MirroredWhenRightToLeft(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedIconSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedIconSourceFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedIconSourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedIconSourceStatics
    {
        [[nodiscard]] auto SourceProperty() const;
        [[nodiscard]] auto FallbackIconSourceProperty() const;
        [[nodiscard]] auto MirroredWhenRightToLeftProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSourceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedIconSourceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedIconStatics
    {
        [[nodiscard]] auto StateProperty() const;
        auto SetState(winrt::Microsoft::UI::Xaml::DependencyObject const& object, param::hstring const& value) const;
        auto GetState(winrt::Microsoft::UI::Xaml::DependencyObject const& object) const;
        [[nodiscard]] auto SourceProperty() const;
        [[nodiscard]] auto FallbackIconSourceProperty() const;
        [[nodiscard]] auto MirroredWhenRightToLeftProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedIconStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedVisual
    {
        [[nodiscard]] auto RootVisual() const;
        [[nodiscard]] auto Size() const;
        [[nodiscard]] auto Duration() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedVisual<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedVisual2
    {
        auto CreateAnimations() const;
        auto DestroyAnimations() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedVisual2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer
    {
        [[nodiscard]] auto Diagnostics() const;
        [[nodiscard]] auto Duration() const;
        [[nodiscard]] auto Source() const;
        auto Source(winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource const& value) const;
        [[nodiscard]] auto FallbackContent() const;
        auto FallbackContent(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto AutoPlay() const;
        auto AutoPlay(bool value) const;
        [[nodiscard]] auto IsAnimatedVisualLoaded() const;
        [[nodiscard]] auto IsPlaying() const;
        [[nodiscard]] auto PlaybackRate() const;
        auto PlaybackRate(double value) const;
        [[nodiscard]] auto ProgressObject() const;
        [[nodiscard]] auto Stretch() const;
        auto Stretch(winrt::Microsoft::UI::Xaml::Media::Stretch const& value) const;
        auto Pause() const;
        auto PlayAsync(double fromProgress, double toProgress, bool looped) const;
        auto Resume() const;
        auto SetProgress(double progress) const;
        auto Stop() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer2
    {
        [[nodiscard]] auto AnimationOptimization() const;
        auto AnimationOptimization(winrt::Microsoft::UI::Xaml::Controls::PlayerAnimationOptimization const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerStatics
    {
        [[nodiscard]] auto AutoPlayProperty() const;
        [[nodiscard]] auto DiagnosticsProperty() const;
        [[nodiscard]] auto DurationProperty() const;
        [[nodiscard]] auto FallbackContentProperty() const;
        [[nodiscard]] auto IsAnimatedVisualLoadedProperty() const;
        [[nodiscard]] auto IsPlayingProperty() const;
        [[nodiscard]] auto PlaybackRateProperty() const;
        [[nodiscard]] auto SourceProperty() const;
        [[nodiscard]] auto StretchProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerStatics2
    {
        [[nodiscard]] auto AnimationOptimizationProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualSource
    {
        auto TryCreateAnimatedVisual(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Windows::Foundation::IInspectable& diagnostics) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2
    {
        [[nodiscard]] auto Markers() const;
        auto SetColorProperty(param::hstring const& propertyName, winrt::Windows::UI::Color const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualSource2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualSource3
    {
        auto TryCreateAnimatedVisual(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Windows::Foundation::IInspectable& diagnostics, bool createAnimations) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource3>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualSource3<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnnotatedScrollBar
    {
        [[nodiscard]] auto ScrollController() const;
        [[nodiscard]] auto Labels() const;
        auto Labels(param::vector<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBarLabel> const& value) const;
        [[nodiscard]] auto LabelTemplate() const;
        auto LabelTemplate(winrt::Microsoft::UI::Xaml::IElementFactory const& value) const;
        [[nodiscard]] auto DetailLabelTemplate() const;
        auto DetailLabelTemplate(winrt::Microsoft::UI::Xaml::IElementFactory const& value) const;
        [[nodiscard]] auto SmallChange() const;
        auto SmallChange(double value) const;
        auto Scrolling(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBar, winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventArgs> const& handler) const;
        using Scrolling_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBar, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBar>::remove_Scrolling>;
        [[nodiscard]] auto Scrolling(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBar, winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBarScrollingEventArgs> const& handler) const;
        auto Scrolling(winrt::event_token const& token) const noexcept;
        auto DetailLabelRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBar, winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBarDetailLabelRequestedEventArgs> const& handler) const;
        using DetailLabelRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBar, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBar>::remove_DetailLabelRequested>;
        [[nodiscard]] auto DetailLabelRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBar, winrt::Microsoft::UI::Xaml::Controls::AnnotatedScrollBarDetailLabelRequestedEventArgs> const& handler) const;
        auto DetailLabelRequested(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBar>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnnotatedScrollBar<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnnotatedScrollBarDetailLabelRequestedEventArgs
    {
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto ScrollOffset() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarDetailLabelRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnnotatedScrollBarDetailLabelRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnnotatedScrollBarFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnnotatedScrollBarFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnnotatedScrollBarLabel
    {
        [[nodiscard]] auto Content() const;
        [[nodiscard]] auto ScrollOffset() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarLabel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnnotatedScrollBarLabel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnnotatedScrollBarLabelFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& content, double scrollOffset) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarLabelFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnnotatedScrollBarLabelFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnnotatedScrollBarScrollingEventArgs
    {
        [[nodiscard]] auto ScrollOffset() const;
        [[nodiscard]] auto ScrollingEventKind() const;
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarScrollingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnnotatedScrollBarScrollingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnnotatedScrollBarStatics
    {
        [[nodiscard]] auto LabelsProperty() const;
        [[nodiscard]] auto LabelTemplateProperty() const;
        [[nodiscard]] auto DetailLabelTemplateProperty() const;
        [[nodiscard]] auto SmallChangeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnnotatedScrollBarStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAppBar
    {
        [[nodiscard]] auto IsOpen() const;
        auto IsOpen(bool value) const;
        [[nodiscard]] auto IsSticky() const;
        auto IsSticky(bool value) const;
        [[nodiscard]] auto ClosedDisplayMode() const;
        auto ClosedDisplayMode(winrt::Microsoft::UI::Xaml::Controls::AppBarClosedDisplayMode const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
        [[nodiscard]] auto LightDismissOverlayMode() const;
        auto LightDismissOverlayMode(winrt::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
        auto Opening(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Opening_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IAppBar, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IAppBar>::remove_Opening>;
        [[nodiscard]] auto Opening(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto Opening(winrt::event_token const& token) const noexcept;
        auto Opened(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Opened_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IAppBar, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IAppBar>::remove_Opened>;
        [[nodiscard]] auto Opened(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto Opened(winrt::event_token const& token) const noexcept;
        auto Closing(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Closing_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IAppBar, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IAppBar>::remove_Closing>;
        [[nodiscard]] auto Closing(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto Closing(winrt::event_token const& token) const noexcept;
        auto Closed(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Closed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IAppBar, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IAppBar>::remove_Closed>;
        [[nodiscard]] auto Closed(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto Closed(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAppBar>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAppBar<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAppBarButton
    {
        [[nodiscard]] auto Label() const;
        auto Label(param::hstring const& value) const;
        [[nodiscard]] auto Icon() const;
        auto Icon(winrt::Microsoft::UI::Xaml::Controls::IconElement const& value) const;
        [[nodiscard]] auto LabelPosition() const;
        auto LabelPosition(winrt::Microsoft::UI::Xaml::Controls::CommandBarLabelPosition const& value) const;
        [[nodiscard]] auto KeyboardAcceleratorTextOverride() const;
        auto KeyboardAcceleratorTextOverride(param::hstring const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAppBarButton>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAppBarButton<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAppBarButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAppBarButtonFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAppBarButtonFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAppBarButtonStatics
    {
        [[nodiscard]] auto LabelProperty() const;
        [[nodiscard]] auto IconProperty() const;
        [[nodiscard]] auto LabelPositionProperty() const;
        [[nodiscard]] auto KeyboardAcceleratorTextOverrideProperty() const;
        [[nodiscard]] auto IsCompactProperty() const;
        [[nodiscard]] auto IsInOverflowProperty() const;
        [[nodiscard]] auto DynamicOverflowOrderProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAppBarButtonStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAppBarButtonStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAppBarElementContainer
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainer>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAppBarElementContainer<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAppBarElementContainerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainerFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAppBarElementContainerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAppBarElementContainerStatics
    {
        [[nodiscard]] auto IsCompactProperty() const;
        [[nodiscard]] auto IsInOverflowProperty() const;
        [[nodiscard]] auto DynamicOverflowOrderProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAppBarElementContainerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAppBarFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAppBarFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAppBarFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAppBarOverrides
    {
        auto OnClosed(winrt::Windows::Foundation::IInspectable const& e) const;
        auto OnOpened(winrt::Windows::Foundation::IInspectable const& e) const;
        auto OnClosing(winrt::Windows::Foundation::IInspectable const& e) const;
        auto OnOpening(winrt::Windows::Foundation::IInspectable const& e) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAppBarOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAppBarOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAppBarSeparator
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparator>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAppBarSeparator<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAppBarSeparatorFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparatorFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAppBarSeparatorFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAppBarSeparatorStatics
    {
        [[nodiscard]] auto IsCompactProperty() const;
        [[nodiscard]] auto IsInOverflowProperty() const;
        [[nodiscard]] auto DynamicOverflowOrderProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparatorStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAppBarSeparatorStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAppBarStatics
    {
        [[nodiscard]] auto IsOpenProperty() const;
        [[nodiscard]] auto IsStickyProperty() const;
        [[nodiscard]] auto ClosedDisplayModeProperty() const;
        [[nodiscard]] auto LightDismissOverlayModeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAppBarStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAppBarStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAppBarToggleButton
    {
        [[nodiscard]] auto Label() const;
        auto Label(param::hstring const& value) const;
        [[nodiscard]] auto Icon() const;
        auto Icon(winrt::Microsoft::UI::Xaml::Controls::IconElement const& value) const;
        [[nodiscard]] auto LabelPosition() const;
        auto LabelPosition(winrt::Microsoft::UI::Xaml::Controls::CommandBarLabelPosition const& value) const;
        [[nodiscard]] auto KeyboardAcceleratorTextOverride() const;
        auto KeyboardAcceleratorTextOverride(param::hstring const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButton>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAppBarToggleButton<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAppBarToggleButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButtonFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAppBarToggleButtonFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAppBarToggleButtonStatics
    {
        [[nodiscard]] auto LabelProperty() const;
        [[nodiscard]] auto IconProperty() const;
        [[nodiscard]] auto LabelPositionProperty() const;
        [[nodiscard]] auto KeyboardAcceleratorTextOverrideProperty() const;
        [[nodiscard]] auto IsCompactProperty() const;
        [[nodiscard]] auto IsInOverflowProperty() const;
        [[nodiscard]] auto DynamicOverflowOrderProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButtonStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAppBarToggleButtonStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAutoSuggestBox
    {
        [[nodiscard]] auto MaxSuggestionListHeight() const;
        auto MaxSuggestionListHeight(double value) const;
        [[nodiscard]] auto IsSuggestionListOpen() const;
        auto IsSuggestionListOpen(bool value) const;
        [[nodiscard]] auto TextMemberPath() const;
        auto TextMemberPath(param::hstring const& value) const;
        [[nodiscard]] auto Text() const;
        auto Text(param::hstring const& value) const;
        [[nodiscard]] auto UpdateTextOnSelect() const;
        auto UpdateTextOnSelect(bool value) const;
        [[nodiscard]] auto PlaceholderText() const;
        auto PlaceholderText(param::hstring const& value) const;
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AutoMaximizeSuggestionArea() const;
        auto AutoMaximizeSuggestionArea(bool value) const;
        [[nodiscard]] auto TextBoxStyle() const;
        auto TextBoxStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto QueryIcon() const;
        auto QueryIcon(winrt::Microsoft::UI::Xaml::Controls::IconElement const& value) const;
        [[nodiscard]] auto LightDismissOverlayMode() const;
        auto LightDismissOverlayMode(winrt::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
        [[nodiscard]] auto Description() const;
        auto Description(winrt::Windows::Foundation::IInspectable const& value) const;
        auto SuggestionChosen(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBox, winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs> const& handler) const;
        using SuggestionChosen_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBox>::remove_SuggestionChosen>;
        [[nodiscard]] auto SuggestionChosen(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBox, winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs> const& handler) const;
        auto SuggestionChosen(winrt::event_token const& token) const noexcept;
        auto TextChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBox, winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs> const& handler) const;
        using TextChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBox>::remove_TextChanged>;
        [[nodiscard]] auto TextChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBox, winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs> const& handler) const;
        auto TextChanged(winrt::event_token const& token) const noexcept;
        auto QuerySubmitted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBox, winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs> const& handler) const;
        using QuerySubmitted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBox>::remove_QuerySubmitted>;
        [[nodiscard]] auto QuerySubmitted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBox, winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs> const& handler) const;
        auto QuerySubmitted(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBox>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAutoSuggestBox<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAutoSuggestBoxQuerySubmittedEventArgs
    {
        [[nodiscard]] auto QueryText() const;
        [[nodiscard]] auto ChosenSuggestion() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAutoSuggestBoxQuerySubmittedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAutoSuggestBoxStatics
    {
        [[nodiscard]] auto MaxSuggestionListHeightProperty() const;
        [[nodiscard]] auto IsSuggestionListOpenProperty() const;
        [[nodiscard]] auto TextMemberPathProperty() const;
        [[nodiscard]] auto TextProperty() const;
        [[nodiscard]] auto UpdateTextOnSelectProperty() const;
        [[nodiscard]] auto PlaceholderTextProperty() const;
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto AutoMaximizeSuggestionAreaProperty() const;
        [[nodiscard]] auto TextBoxStyleProperty() const;
        [[nodiscard]] auto QueryIconProperty() const;
        [[nodiscard]] auto LightDismissOverlayModeProperty() const;
        [[nodiscard]] auto DescriptionProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAutoSuggestBoxStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAutoSuggestBoxSuggestionChosenEventArgs
    {
        [[nodiscard]] auto SelectedItem() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAutoSuggestBoxSuggestionChosenEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAutoSuggestBoxTextChangedEventArgs
    {
        [[nodiscard]] auto Reason() const;
        auto Reason(winrt::Microsoft::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason const& value) const;
        auto CheckCurrent() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAutoSuggestBoxTextChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAutoSuggestBoxTextChangedEventArgsStatics
    {
        [[nodiscard]] auto ReasonProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAutoSuggestBoxTextChangedEventArgsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IBitmapIcon
    {
        [[nodiscard]] auto UriSource() const;
        auto UriSource(winrt::Windows::Foundation::Uri const& value) const;
        [[nodiscard]] auto ShowAsMonochrome() const;
        auto ShowAsMonochrome(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IBitmapIcon>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBitmapIcon<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IBitmapIconFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBitmapIconFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IBitmapIconSource
    {
        [[nodiscard]] auto UriSource() const;
        auto UriSource(winrt::Windows::Foundation::Uri const& value) const;
        [[nodiscard]] auto ShowAsMonochrome() const;
        auto ShowAsMonochrome(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBitmapIconSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IBitmapIconSourceFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBitmapIconSourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IBitmapIconSourceStatics
    {
        [[nodiscard]] auto UriSourceProperty() const;
        [[nodiscard]] auto ShowAsMonochromeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBitmapIconSourceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IBitmapIconStatics
    {
        [[nodiscard]] auto UriSourceProperty() const;
        [[nodiscard]] auto ShowAsMonochromeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBitmapIconStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IBorder
    {
        [[nodiscard]] auto BorderBrush() const;
        auto BorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BorderThickness() const;
        auto BorderThickness(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto Background() const;
        auto Background(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BackgroundSizing() const;
        auto BackgroundSizing(winrt::Microsoft::UI::Xaml::Controls::BackgroundSizing const& value) const;
        [[nodiscard]] auto CornerRadius() const;
        auto CornerRadius(winrt::Microsoft::UI::Xaml::CornerRadius const& value) const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto Child() const;
        auto Child(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto ChildTransitions() const;
        auto ChildTransitions(winrt::Microsoft::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
        [[nodiscard]] auto BackgroundTransition() const;
        auto BackgroundTransition(winrt::Microsoft::UI::Xaml::BrushTransition const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IBorder>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBorder<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IBorderStatics
    {
        [[nodiscard]] auto BorderBrushProperty() const;
        [[nodiscard]] auto BorderThicknessProperty() const;
        [[nodiscard]] auto BackgroundProperty() const;
        [[nodiscard]] auto BackgroundSizingProperty() const;
        [[nodiscard]] auto CornerRadiusProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
        [[nodiscard]] auto ChildTransitionsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IBorderStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBorderStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IBreadcrumbBar
    {
        [[nodiscard]] auto ItemsSource() const;
        auto ItemsSource(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto ItemTemplate() const;
        auto ItemTemplate(winrt::Windows::Foundation::IInspectable const& value) const;
        auto ItemClicked(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::BreadcrumbBar, winrt::Microsoft::UI::Xaml::Controls::BreadcrumbBarItemClickedEventArgs> const& handler) const;
        using ItemClicked_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBar, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBar>::remove_ItemClicked>;
        [[nodiscard]] auto ItemClicked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::BreadcrumbBar, winrt::Microsoft::UI::Xaml::Controls::BreadcrumbBarItemClickedEventArgs> const& handler) const;
        auto ItemClicked(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBar>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBreadcrumbBar<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IBreadcrumbBarFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBreadcrumbBarFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IBreadcrumbBarItem
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBreadcrumbBarItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IBreadcrumbBarItemClickedEventArgs
    {
        [[nodiscard]] auto Index() const;
        [[nodiscard]] auto Item() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItemClickedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBreadcrumbBarItemClickedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IBreadcrumbBarItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBreadcrumbBarItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IBreadcrumbBarStatics
    {
        [[nodiscard]] auto ItemsSourceProperty() const;
        [[nodiscard]] auto ItemTemplateProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBreadcrumbBarStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IButton
    {
        [[nodiscard]] auto Flyout() const;
        auto Flyout(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IButton>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IButton<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IButtonFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IButtonFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IButtonStatics
    {
        [[nodiscard]] auto FlyoutProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IButtonStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IButtonStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICalendarDatePicker
    {
        [[nodiscard]] auto Date() const;
        auto Date(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const& value) const;
        [[nodiscard]] auto IsCalendarOpen() const;
        auto IsCalendarOpen(bool value) const;
        [[nodiscard]] auto DateFormat() const;
        auto DateFormat(param::hstring const& value) const;
        [[nodiscard]] auto PlaceholderText() const;
        auto PlaceholderText(param::hstring const& value) const;
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto CalendarViewStyle() const;
        auto CalendarViewStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto LightDismissOverlayMode() const;
        auto LightDismissOverlayMode(winrt::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
        [[nodiscard]] auto Description() const;
        auto Description(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto MinDate() const;
        auto MinDate(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto MaxDate() const;
        auto MaxDate(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto IsTodayHighlighted() const;
        auto IsTodayHighlighted(bool value) const;
        [[nodiscard]] auto DisplayMode() const;
        auto DisplayMode(winrt::Microsoft::UI::Xaml::Controls::CalendarViewDisplayMode const& value) const;
        [[nodiscard]] auto FirstDayOfWeek() const;
        auto FirstDayOfWeek(winrt::Windows::Globalization::DayOfWeek const& value) const;
        [[nodiscard]] auto DayOfWeekFormat() const;
        auto DayOfWeekFormat(param::hstring const& value) const;
        [[nodiscard]] auto CalendarIdentifier() const;
        auto CalendarIdentifier(param::hstring const& value) const;
        [[nodiscard]] auto IsOutOfScopeEnabled() const;
        auto IsOutOfScopeEnabled(bool value) const;
        [[nodiscard]] auto IsGroupLabelVisible() const;
        auto IsGroupLabelVisible(bool value) const;
        auto CalendarViewDayItemChanging(winrt::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler const& handler) const;
        using CalendarViewDayItemChanging_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePicker, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePicker>::remove_CalendarViewDayItemChanging>;
        [[nodiscard]] auto CalendarViewDayItemChanging(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler const& handler) const;
        auto CalendarViewDayItemChanging(winrt::event_token const& token) const noexcept;
        auto DateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::CalendarDatePicker, winrt::Microsoft::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs> const& handler) const;
        using DateChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePicker, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePicker>::remove_DateChanged>;
        [[nodiscard]] auto DateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::CalendarDatePicker, winrt::Microsoft::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs> const& handler) const;
        auto DateChanged(winrt::event_token const& token) const noexcept;
        auto Opened(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Opened_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePicker, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePicker>::remove_Opened>;
        [[nodiscard]] auto Opened(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto Opened(winrt::event_token const& token) const noexcept;
        auto Closed(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Closed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePicker, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePicker>::remove_Closed>;
        [[nodiscard]] auto Closed(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto Closed(winrt::event_token const& token) const noexcept;
        auto SetDisplayDate(winrt::Windows::Foundation::DateTime const& date) const;
        auto SetYearDecadeDisplayDimensions(int32_t columns, int32_t rows) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePicker>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICalendarDatePicker<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICalendarDatePickerDateChangedEventArgs
    {
        [[nodiscard]] auto NewDate() const;
        [[nodiscard]] auto OldDate() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICalendarDatePickerDateChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICalendarDatePickerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICalendarDatePickerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICalendarDatePickerStatics
    {
        [[nodiscard]] auto DateProperty() const;
        [[nodiscard]] auto IsCalendarOpenProperty() const;
        [[nodiscard]] auto DateFormatProperty() const;
        [[nodiscard]] auto PlaceholderTextProperty() const;
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto CalendarViewStyleProperty() const;
        [[nodiscard]] auto LightDismissOverlayModeProperty() const;
        [[nodiscard]] auto DescriptionProperty() const;
        [[nodiscard]] auto MinDateProperty() const;
        [[nodiscard]] auto MaxDateProperty() const;
        [[nodiscard]] auto IsTodayHighlightedProperty() const;
        [[nodiscard]] auto DisplayModeProperty() const;
        [[nodiscard]] auto FirstDayOfWeekProperty() const;
        [[nodiscard]] auto DayOfWeekFormatProperty() const;
        [[nodiscard]] auto CalendarIdentifierProperty() const;
        [[nodiscard]] auto IsOutOfScopeEnabledProperty() const;
        [[nodiscard]] auto IsGroupLabelVisibleProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICalendarDatePickerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICalendarView
    {
        [[nodiscard]] auto CalendarIdentifier() const;
        auto CalendarIdentifier(param::hstring const& value) const;
        [[nodiscard]] auto DayOfWeekFormat() const;
        auto DayOfWeekFormat(param::hstring const& value) const;
        [[nodiscard]] auto IsGroupLabelVisible() const;
        auto IsGroupLabelVisible(bool value) const;
        [[nodiscard]] auto DisplayMode() const;
        auto DisplayMode(winrt::Microsoft::UI::Xaml::Controls::CalendarViewDisplayMode const& value) const;
        [[nodiscard]] auto FirstDayOfWeek() const;
        auto FirstDayOfWeek(winrt::Windows::Globalization::DayOfWeek const& value) const;
        [[nodiscard]] auto IsOutOfScopeEnabled() const;
        auto IsOutOfScopeEnabled(bool value) const;
        [[nodiscard]] auto IsTodayHighlighted() const;
        auto IsTodayHighlighted(bool value) const;
        [[nodiscard]] auto MaxDate() const;
        auto MaxDate(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto MinDate() const;
        auto MinDate(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto NumberOfWeeksInView() const;
        auto NumberOfWeeksInView(int32_t value) const;
        [[nodiscard]] auto SelectedDates() const;
        [[nodiscard]] auto SelectionMode() const;
        auto SelectionMode(winrt::Microsoft::UI::Xaml::Controls::CalendarViewSelectionMode const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
        [[nodiscard]] auto FocusBorderBrush() const;
        auto FocusBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto SelectedHoverBorderBrush() const;
        auto SelectedHoverBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto SelectedPressedBorderBrush() const;
        auto SelectedPressedBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto SelectedDisabledBorderBrush() const;
        auto SelectedDisabledBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto SelectedBorderBrush() const;
        auto SelectedBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto HoverBorderBrush() const;
        auto HoverBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto PressedBorderBrush() const;
        auto PressedBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto TodaySelectedInnerBorderBrush() const;
        auto TodaySelectedInnerBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BlackoutStrikethroughBrush() const;
        auto BlackoutStrikethroughBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto CalendarItemBorderBrush() const;
        auto CalendarItemBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BlackoutBackground() const;
        auto BlackoutBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto OutOfScopeBackground() const;
        auto OutOfScopeBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto CalendarItemBackground() const;
        auto CalendarItemBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto CalendarItemHoverBackground() const;
        auto CalendarItemHoverBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto CalendarItemPressedBackground() const;
        auto CalendarItemPressedBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto CalendarItemDisabledBackground() const;
        auto CalendarItemDisabledBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto TodayBackground() const;
        auto TodayBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto TodayBlackoutBackground() const;
        auto TodayBlackoutBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto TodayHoverBackground() const;
        auto TodayHoverBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto TodayPressedBackground() const;
        auto TodayPressedBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto TodayDisabledBackground() const;
        auto TodayDisabledBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto PressedForeground() const;
        auto PressedForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto TodayForeground() const;
        auto TodayForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BlackoutForeground() const;
        auto BlackoutForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto TodayBlackoutForeground() const;
        auto TodayBlackoutForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto SelectedForeground() const;
        auto SelectedForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto SelectedHoverForeground() const;
        auto SelectedHoverForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto SelectedPressedForeground() const;
        auto SelectedPressedForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto SelectedDisabledForeground() const;
        auto SelectedDisabledForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto OutOfScopeForeground() const;
        auto OutOfScopeForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto OutOfScopeHoverForeground() const;
        auto OutOfScopeHoverForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto OutOfScopePressedForeground() const;
        auto OutOfScopePressedForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto CalendarItemForeground() const;
        auto CalendarItemForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto DisabledForeground() const;
        auto DisabledForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto DayItemFontFamily() const;
        auto DayItemFontFamily(winrt::Microsoft::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto DayItemFontSize() const;
        auto DayItemFontSize(double value) const;
        [[nodiscard]] auto DayItemFontStyle() const;
        auto DayItemFontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto DayItemFontWeight() const;
        auto DayItemFontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto TodayFontWeight() const;
        auto TodayFontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto FirstOfMonthLabelFontFamily() const;
        auto FirstOfMonthLabelFontFamily(winrt::Microsoft::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto FirstOfMonthLabelFontSize() const;
        auto FirstOfMonthLabelFontSize(double value) const;
        [[nodiscard]] auto FirstOfMonthLabelFontStyle() const;
        auto FirstOfMonthLabelFontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto FirstOfMonthLabelFontWeight() const;
        auto FirstOfMonthLabelFontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto MonthYearItemFontFamily() const;
        auto MonthYearItemFontFamily(winrt::Microsoft::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto MonthYearItemFontSize() const;
        auto MonthYearItemFontSize(double value) const;
        [[nodiscard]] auto MonthYearItemFontStyle() const;
        auto MonthYearItemFontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto MonthYearItemFontWeight() const;
        auto MonthYearItemFontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto FirstOfYearDecadeLabelFontFamily() const;
        auto FirstOfYearDecadeLabelFontFamily(winrt::Microsoft::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto FirstOfYearDecadeLabelFontSize() const;
        auto FirstOfYearDecadeLabelFontSize(double value) const;
        [[nodiscard]] auto FirstOfYearDecadeLabelFontStyle() const;
        auto FirstOfYearDecadeLabelFontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto FirstOfYearDecadeLabelFontWeight() const;
        auto FirstOfYearDecadeLabelFontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto DayItemMargin() const;
        auto DayItemMargin(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto MonthYearItemMargin() const;
        auto MonthYearItemMargin(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto FirstOfMonthLabelMargin() const;
        auto FirstOfMonthLabelMargin(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto FirstOfYearDecadeLabelMargin() const;
        auto FirstOfYearDecadeLabelMargin(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto HorizontalDayItemAlignment() const;
        auto HorizontalDayItemAlignment(winrt::Microsoft::UI::Xaml::HorizontalAlignment const& value) const;
        [[nodiscard]] auto VerticalDayItemAlignment() const;
        auto VerticalDayItemAlignment(winrt::Microsoft::UI::Xaml::VerticalAlignment const& value) const;
        [[nodiscard]] auto HorizontalFirstOfMonthLabelAlignment() const;
        auto HorizontalFirstOfMonthLabelAlignment(winrt::Microsoft::UI::Xaml::HorizontalAlignment const& value) const;
        [[nodiscard]] auto VerticalFirstOfMonthLabelAlignment() const;
        auto VerticalFirstOfMonthLabelAlignment(winrt::Microsoft::UI::Xaml::VerticalAlignment const& value) const;
        [[nodiscard]] auto CalendarItemBorderThickness() const;
        auto CalendarItemBorderThickness(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto CalendarViewDayItemStyle() const;
        auto CalendarViewDayItemStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto CalendarItemCornerRadius() const;
        auto CalendarItemCornerRadius(winrt::Microsoft::UI::Xaml::CornerRadius const& value) const;
        auto CalendarViewDayItemChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::CalendarView, winrt::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> const& handler) const;
        using CalendarViewDayItemChanging_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ICalendarView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ICalendarView>::remove_CalendarViewDayItemChanging>;
        [[nodiscard]] auto CalendarViewDayItemChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::CalendarView, winrt::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> const& handler) const;
        auto CalendarViewDayItemChanging(winrt::event_token const& token) const noexcept;
        auto SelectedDatesChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::CalendarView, winrt::Microsoft::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs> const& handler) const;
        using SelectedDatesChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ICalendarView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ICalendarView>::remove_SelectedDatesChanged>;
        [[nodiscard]] auto SelectedDatesChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::CalendarView, winrt::Microsoft::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs> const& handler) const;
        auto SelectedDatesChanged(winrt::event_token const& token) const noexcept;
        auto SetDisplayDate(winrt::Windows::Foundation::DateTime const& date) const;
        auto SetYearDecadeDisplayDimensions(int32_t columns, int32_t rows) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICalendarView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICalendarView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICalendarViewDayItem
    {
        [[nodiscard]] auto IsBlackout() const;
        auto IsBlackout(bool value) const;
        [[nodiscard]] auto Date() const;
        auto SetDensityColors(param::iterable<winrt::Windows::UI::Color> const& colors) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICalendarViewDayItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICalendarViewDayItemChangingEventArgs
    {
        [[nodiscard]] auto InRecycleQueue() const;
        [[nodiscard]] auto Item() const;
        [[nodiscard]] auto Phase() const;
        auto RegisterUpdateCallback(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::CalendarView, winrt::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> const& callback) const;
        auto RegisterUpdateCallback(uint32_t callbackPhase, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::CalendarView, winrt::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> const& callback) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICalendarViewDayItemChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICalendarViewDayItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICalendarViewDayItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICalendarViewDayItemStatics
    {
        [[nodiscard]] auto IsBlackoutProperty() const;
        [[nodiscard]] auto DateProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICalendarViewDayItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICalendarViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICalendarViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICalendarViewSelectedDatesChangedEventArgs
    {
        [[nodiscard]] auto AddedDates() const;
        [[nodiscard]] auto RemovedDates() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICalendarViewSelectedDatesChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICalendarViewStatics
    {
        [[nodiscard]] auto CalendarIdentifierProperty() const;
        [[nodiscard]] auto DayOfWeekFormatProperty() const;
        [[nodiscard]] auto IsGroupLabelVisibleProperty() const;
        [[nodiscard]] auto DisplayModeProperty() const;
        [[nodiscard]] auto FirstDayOfWeekProperty() const;
        [[nodiscard]] auto IsOutOfScopeEnabledProperty() const;
        [[nodiscard]] auto IsTodayHighlightedProperty() const;
        [[nodiscard]] auto MaxDateProperty() const;
        [[nodiscard]] auto MinDateProperty() const;
        [[nodiscard]] auto NumberOfWeeksInViewProperty() const;
        [[nodiscard]] auto SelectedDatesProperty() const;
        [[nodiscard]] auto SelectionModeProperty() const;
        [[nodiscard]] auto TemplateSettingsProperty() const;
        [[nodiscard]] auto FocusBorderBrushProperty() const;
        [[nodiscard]] auto SelectedHoverBorderBrushProperty() const;
        [[nodiscard]] auto SelectedPressedBorderBrushProperty() const;
        [[nodiscard]] auto SelectedDisabledBorderBrushProperty() const;
        [[nodiscard]] auto SelectedBorderBrushProperty() const;
        [[nodiscard]] auto HoverBorderBrushProperty() const;
        [[nodiscard]] auto PressedBorderBrushProperty() const;
        [[nodiscard]] auto TodaySelectedInnerBorderBrushProperty() const;
        [[nodiscard]] auto BlackoutStrikethroughBrushProperty() const;
        [[nodiscard]] auto CalendarItemBorderBrushProperty() const;
        [[nodiscard]] auto BlackoutBackgroundProperty() const;
        [[nodiscard]] auto OutOfScopeBackgroundProperty() const;
        [[nodiscard]] auto CalendarItemBackgroundProperty() const;
        [[nodiscard]] auto CalendarItemHoverBackgroundProperty() const;
        [[nodiscard]] auto CalendarItemPressedBackgroundProperty() const;
        [[nodiscard]] auto CalendarItemDisabledBackgroundProperty() const;
        [[nodiscard]] auto TodayBackgroundProperty() const;
        [[nodiscard]] auto TodayBlackoutBackgroundProperty() const;
        [[nodiscard]] auto TodayHoverBackgroundProperty() const;
        [[nodiscard]] auto TodayPressedBackgroundProperty() const;
        [[nodiscard]] auto TodayDisabledBackgroundProperty() const;
        [[nodiscard]] auto PressedForegroundProperty() const;
        [[nodiscard]] auto TodayForegroundProperty() const;
        [[nodiscard]] auto BlackoutForegroundProperty() const;
        [[nodiscard]] auto TodayBlackoutForegroundProperty() const;
        [[nodiscard]] auto SelectedForegroundProperty() const;
        [[nodiscard]] auto SelectedHoverForegroundProperty() const;
        [[nodiscard]] auto SelectedPressedForegroundProperty() const;
        [[nodiscard]] auto SelectedDisabledForegroundProperty() const;
        [[nodiscard]] auto OutOfScopeForegroundProperty() const;
        [[nodiscard]] auto OutOfScopeHoverForegroundProperty() const;
        [[nodiscard]] auto OutOfScopePressedForegroundProperty() const;
        [[nodiscard]] auto CalendarItemForegroundProperty() const;
        [[nodiscard]] auto DisabledForegroundProperty() const;
        [[nodiscard]] auto DayItemFontFamilyProperty() const;
        [[nodiscard]] auto DayItemFontSizeProperty() const;
        [[nodiscard]] auto DayItemFontStyleProperty() const;
        [[nodiscard]] auto DayItemFontWeightProperty() const;
        [[nodiscard]] auto TodayFontWeightProperty() const;
        [[nodiscard]] auto FirstOfMonthLabelFontFamilyProperty() const;
        [[nodiscard]] auto FirstOfMonthLabelFontSizeProperty() const;
        [[nodiscard]] auto FirstOfMonthLabelFontStyleProperty() const;
        [[nodiscard]] auto FirstOfMonthLabelFontWeightProperty() const;
        [[nodiscard]] auto MonthYearItemFontFamilyProperty() const;
        [[nodiscard]] auto MonthYearItemFontSizeProperty() const;
        [[nodiscard]] auto MonthYearItemFontStyleProperty() const;
        [[nodiscard]] auto MonthYearItemFontWeightProperty() const;
        [[nodiscard]] auto FirstOfYearDecadeLabelFontFamilyProperty() const;
        [[nodiscard]] auto FirstOfYearDecadeLabelFontSizeProperty() const;
        [[nodiscard]] auto FirstOfYearDecadeLabelFontStyleProperty() const;
        [[nodiscard]] auto FirstOfYearDecadeLabelFontWeightProperty() const;
        [[nodiscard]] auto DayItemMarginProperty() const;
        [[nodiscard]] auto MonthYearItemMarginProperty() const;
        [[nodiscard]] auto FirstOfMonthLabelMarginProperty() const;
        [[nodiscard]] auto FirstOfYearDecadeLabelMarginProperty() const;
        [[nodiscard]] auto HorizontalDayItemAlignmentProperty() const;
        [[nodiscard]] auto VerticalDayItemAlignmentProperty() const;
        [[nodiscard]] auto HorizontalFirstOfMonthLabelAlignmentProperty() const;
        [[nodiscard]] auto VerticalFirstOfMonthLabelAlignmentProperty() const;
        [[nodiscard]] auto CalendarItemBorderThicknessProperty() const;
        [[nodiscard]] auto CalendarViewDayItemStyleProperty() const;
        [[nodiscard]] auto CalendarItemCornerRadiusProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICalendarViewStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICalendarViewStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICandidateWindowBoundsChangedEventArgs
    {
        [[nodiscard]] auto Bounds() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICandidateWindowBoundsChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICanvas
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICanvas>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICanvas<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICanvasFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICanvasFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICanvasFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICanvasStatics
    {
        [[nodiscard]] auto LeftProperty() const;
        auto GetLeft(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetLeft(winrt::Microsoft::UI::Xaml::UIElement const& element, double length) const;
        [[nodiscard]] auto TopProperty() const;
        auto GetTop(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetTop(winrt::Microsoft::UI::Xaml::UIElement const& element, double length) const;
        [[nodiscard]] auto ZIndexProperty() const;
        auto GetZIndex(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetZIndex(winrt::Microsoft::UI::Xaml::UIElement const& element, int32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICanvasStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICanvasStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICheckBox
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICheckBox>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICheckBox<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICheckBoxFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICheckBoxFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICheckBoxFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IChoosingGroupHeaderContainerEventArgs
    {
        [[nodiscard]] auto GroupHeaderContainer() const;
        auto GroupHeaderContainer(winrt::Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem const& value) const;
        [[nodiscard]] auto GroupIndex() const;
        [[nodiscard]] auto Group() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IChoosingGroupHeaderContainerEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IChoosingItemContainerEventArgs
    {
        [[nodiscard]] auto ItemIndex() const;
        [[nodiscard]] auto Item() const;
        [[nodiscard]] auto ItemContainer() const;
        auto ItemContainer(winrt::Microsoft::UI::Xaml::Controls::Primitives::SelectorItem const& value) const;
        [[nodiscard]] auto IsContainerPrepared() const;
        auto IsContainerPrepared(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IChoosingItemContainerEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IChoosingItemContainerEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICleanUpVirtualizedItemEventArgs
    {
        [[nodiscard]] auto Value() const;
        [[nodiscard]] auto UIElement() const;
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICleanUpVirtualizedItemEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IColorChangedEventArgs
    {
        [[nodiscard]] auto OldColor() const;
        [[nodiscard]] auto NewColor() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IColorChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IColorChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IColorPicker
    {
        [[nodiscard]] auto Color() const;
        auto Color(winrt::Windows::UI::Color const& value) const;
        [[nodiscard]] auto PreviousColor() const;
        auto PreviousColor(winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color> const& value) const;
        [[nodiscard]] auto IsAlphaEnabled() const;
        auto IsAlphaEnabled(bool value) const;
        [[nodiscard]] auto IsColorSpectrumVisible() const;
        auto IsColorSpectrumVisible(bool value) const;
        [[nodiscard]] auto IsColorPreviewVisible() const;
        auto IsColorPreviewVisible(bool value) const;
        [[nodiscard]] auto IsColorSliderVisible() const;
        auto IsColorSliderVisible(bool value) const;
        [[nodiscard]] auto IsAlphaSliderVisible() const;
        auto IsAlphaSliderVisible(bool value) const;
        [[nodiscard]] auto IsMoreButtonVisible() const;
        auto IsMoreButtonVisible(bool value) const;
        [[nodiscard]] auto IsColorChannelTextInputVisible() const;
        auto IsColorChannelTextInputVisible(bool value) const;
        [[nodiscard]] auto IsAlphaTextInputVisible() const;
        auto IsAlphaTextInputVisible(bool value) const;
        [[nodiscard]] auto IsHexInputVisible() const;
        auto IsHexInputVisible(bool value) const;
        [[nodiscard]] auto MinHue() const;
        auto MinHue(int32_t value) const;
        [[nodiscard]] auto MaxHue() const;
        auto MaxHue(int32_t value) const;
        [[nodiscard]] auto MinSaturation() const;
        auto MinSaturation(int32_t value) const;
        [[nodiscard]] auto MaxSaturation() const;
        auto MaxSaturation(int32_t value) const;
        [[nodiscard]] auto MinValue() const;
        auto MinValue(int32_t value) const;
        [[nodiscard]] auto MaxValue() const;
        auto MaxValue(int32_t value) const;
        [[nodiscard]] auto ColorSpectrumShape() const;
        auto ColorSpectrumShape(winrt::Microsoft::UI::Xaml::Controls::ColorSpectrumShape const& value) const;
        [[nodiscard]] auto ColorSpectrumComponents() const;
        auto ColorSpectrumComponents(winrt::Microsoft::UI::Xaml::Controls::ColorSpectrumComponents const& value) const;
        auto ColorChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ColorPicker, winrt::Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const;
        using ColorChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IColorPicker, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IColorPicker>::remove_ColorChanged>;
        [[nodiscard]] auto ColorChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ColorPicker, winrt::Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const;
        auto ColorChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IColorPicker>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IColorPicker2
    {
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Microsoft::UI::Xaml::Controls::Orientation const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IColorPicker2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IColorPicker2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IColorPickerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IColorPickerFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IColorPickerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics
    {
        [[nodiscard]] auto ColorProperty() const;
        [[nodiscard]] auto PreviousColorProperty() const;
        [[nodiscard]] auto IsAlphaEnabledProperty() const;
        [[nodiscard]] auto IsColorSpectrumVisibleProperty() const;
        [[nodiscard]] auto IsColorPreviewVisibleProperty() const;
        [[nodiscard]] auto IsColorSliderVisibleProperty() const;
        [[nodiscard]] auto IsAlphaSliderVisibleProperty() const;
        [[nodiscard]] auto IsMoreButtonVisibleProperty() const;
        [[nodiscard]] auto IsColorChannelTextInputVisibleProperty() const;
        [[nodiscard]] auto IsAlphaTextInputVisibleProperty() const;
        [[nodiscard]] auto IsHexInputVisibleProperty() const;
        [[nodiscard]] auto MinHueProperty() const;
        [[nodiscard]] auto MaxHueProperty() const;
        [[nodiscard]] auto MinSaturationProperty() const;
        [[nodiscard]] auto MaxSaturationProperty() const;
        [[nodiscard]] auto MinValueProperty() const;
        [[nodiscard]] auto MaxValueProperty() const;
        [[nodiscard]] auto ColorSpectrumShapeProperty() const;
        [[nodiscard]] auto ColorSpectrumComponentsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IColorPickerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics2
    {
        [[nodiscard]] auto OrientationProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IColorPickerStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IColumnDefinition
    {
        [[nodiscard]] auto Width() const;
        auto Width(winrt::Microsoft::UI::Xaml::GridLength const& value) const;
        [[nodiscard]] auto MaxWidth() const;
        auto MaxWidth(double value) const;
        [[nodiscard]] auto MinWidth() const;
        auto MinWidth(double value) const;
        [[nodiscard]] auto ActualWidth() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IColumnDefinition>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IColumnDefinition<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IColumnDefinitionStatics
    {
        [[nodiscard]] auto WidthProperty() const;
        [[nodiscard]] auto MaxWidthProperty() const;
        [[nodiscard]] auto MinWidthProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IColumnDefinitionStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IColumnDefinitionStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IComboBox
    {
        [[nodiscard]] auto IsDropDownOpen() const;
        auto IsDropDownOpen(bool value) const;
        [[nodiscard]] auto IsEditable() const;
        auto IsEditable(bool value) const;
        [[nodiscard]] auto IsSelectionBoxHighlighted() const;
        [[nodiscard]] auto MaxDropDownHeight() const;
        auto MaxDropDownHeight(double value) const;
        [[nodiscard]] auto SelectionBoxItem() const;
        [[nodiscard]] auto SelectionBoxItemTemplate() const;
        [[nodiscard]] auto TemplateSettings() const;
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto PlaceholderText() const;
        auto PlaceholderText(param::hstring const& value) const;
        [[nodiscard]] auto LightDismissOverlayMode() const;
        auto LightDismissOverlayMode(winrt::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
        [[nodiscard]] auto IsTextSearchEnabled() const;
        auto IsTextSearchEnabled(bool value) const;
        [[nodiscard]] auto SelectionChangedTrigger() const;
        auto SelectionChangedTrigger(winrt::Microsoft::UI::Xaml::Controls::ComboBoxSelectionChangedTrigger const& value) const;
        [[nodiscard]] auto PlaceholderForeground() const;
        auto PlaceholderForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto Text() const;
        auto Text(param::hstring const& value) const;
        [[nodiscard]] auto TextBoxStyle() const;
        auto TextBoxStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto Description() const;
        auto Description(winrt::Windows::Foundation::IInspectable const& value) const;
        auto DropDownClosed(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using DropDownClosed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IComboBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IComboBox>::remove_DropDownClosed>;
        [[nodiscard]] auto DropDownClosed(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto DropDownClosed(winrt::event_token const& token) const noexcept;
        auto DropDownOpened(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using DropDownOpened_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IComboBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IComboBox>::remove_DropDownOpened>;
        [[nodiscard]] auto DropDownOpened(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto DropDownOpened(winrt::event_token const& token) const noexcept;
        auto TextSubmitted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ComboBox, winrt::Microsoft::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs> const& handler) const;
        using TextSubmitted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IComboBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IComboBox>::remove_TextSubmitted>;
        [[nodiscard]] auto TextSubmitted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ComboBox, winrt::Microsoft::UI::Xaml::Controls::ComboBoxTextSubmittedEventArgs> const& handler) const;
        auto TextSubmitted(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IComboBox>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IComboBox<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IComboBoxFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IComboBoxFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IComboBoxFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IComboBoxItem
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IComboBoxItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IComboBoxItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IComboBoxItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IComboBoxItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IComboBoxItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IComboBoxOverrides
    {
        auto OnDropDownClosed(winrt::Windows::Foundation::IInspectable const& e) const;
        auto OnDropDownOpened(winrt::Windows::Foundation::IInspectable const& e) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IComboBoxOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IComboBoxOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IComboBoxStatics
    {
        [[nodiscard]] auto IsEditableProperty() const;
        [[nodiscard]] auto IsDropDownOpenProperty() const;
        [[nodiscard]] auto MaxDropDownHeightProperty() const;
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto PlaceholderTextProperty() const;
        [[nodiscard]] auto LightDismissOverlayModeProperty() const;
        [[nodiscard]] auto IsTextSearchEnabledProperty() const;
        [[nodiscard]] auto SelectionChangedTriggerProperty() const;
        [[nodiscard]] auto PlaceholderForegroundProperty() const;
        [[nodiscard]] auto TextProperty() const;
        [[nodiscard]] auto TextBoxStyleProperty() const;
        [[nodiscard]] auto DescriptionProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IComboBoxStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IComboBoxStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IComboBoxTextSubmittedEventArgs
    {
        [[nodiscard]] auto Text() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IComboBoxTextSubmittedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IComboBoxTextSubmittedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICommandBar
    {
        [[nodiscard]] auto PrimaryCommands() const;
        [[nodiscard]] auto SecondaryCommands() const;
        [[nodiscard]] auto CommandBarOverflowPresenterStyle() const;
        auto CommandBarOverflowPresenterStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto CommandBarTemplateSettings() const;
        [[nodiscard]] auto DefaultLabelPosition() const;
        auto DefaultLabelPosition(winrt::Microsoft::UI::Xaml::Controls::CommandBarDefaultLabelPosition const& value) const;
        [[nodiscard]] auto OverflowButtonVisibility() const;
        auto OverflowButtonVisibility(winrt::Microsoft::UI::Xaml::Controls::CommandBarOverflowButtonVisibility const& value) const;
        [[nodiscard]] auto IsDynamicOverflowEnabled() const;
        auto IsDynamicOverflowEnabled(bool value) const;
        auto DynamicOverflowItemsChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::CommandBar, winrt::Microsoft::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs> const& handler) const;
        using DynamicOverflowItemsChanging_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ICommandBar, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ICommandBar>::remove_DynamicOverflowItemsChanging>;
        [[nodiscard]] auto DynamicOverflowItemsChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::CommandBar, winrt::Microsoft::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs> const& handler) const;
        auto DynamicOverflowItemsChanging(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICommandBar>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICommandBar<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICommandBarElement
    {
        [[nodiscard]] auto IsCompact() const;
        auto IsCompact(bool value) const;
        [[nodiscard]] auto IsInOverflow() const;
        [[nodiscard]] auto DynamicOverflowOrder() const;
        auto DynamicOverflowOrder(int32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICommandBarElement>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICommandBarElement<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICommandBarFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICommandBarFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICommandBarFlyout
    {
        [[nodiscard]] auto PrimaryCommands() const;
        [[nodiscard]] auto SecondaryCommands() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICommandBarFlyout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICommandBarFlyout2
    {
        [[nodiscard]] auto AlwaysExpanded() const;
        auto AlwaysExpanded(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICommandBarFlyout2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICommandBarFlyoutFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICommandBarFlyoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICommandBarOverflowPresenter
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICommandBarOverflowPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICommandBarOverflowPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICommandBarOverflowPresenterFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICommandBarOverflowPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICommandBarStatics
    {
        [[nodiscard]] auto PrimaryCommandsProperty() const;
        [[nodiscard]] auto SecondaryCommandsProperty() const;
        [[nodiscard]] auto CommandBarOverflowPresenterStyleProperty() const;
        [[nodiscard]] auto DefaultLabelPositionProperty() const;
        [[nodiscard]] auto OverflowButtonVisibilityProperty() const;
        [[nodiscard]] auto IsDynamicOverflowEnabledProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICommandBarStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICommandBarStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContainerContentChangingEventArgs
    {
        [[nodiscard]] auto ItemContainer() const;
        [[nodiscard]] auto InRecycleQueue() const;
        [[nodiscard]] auto ItemIndex() const;
        [[nodiscard]] auto Item() const;
        [[nodiscard]] auto Phase() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        auto RegisterUpdateCallback(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ListViewBase, winrt::Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs> const& callback) const;
        auto RegisterUpdateCallback(uint32_t callbackPhase, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ListViewBase, winrt::Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs> const& callback) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContainerContentChangingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContainerContentChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContentControl
    {
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto ContentTemplate() const;
        auto ContentTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto ContentTemplateSelector() const;
        auto ContentTemplateSelector(winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& value) const;
        [[nodiscard]] auto ContentTransitions() const;
        auto ContentTransitions(winrt::Microsoft::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
        [[nodiscard]] auto ContentTemplateRoot() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContentControl>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContentControl<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContentControlFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContentControlFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContentControlFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContentControlOverrides
    {
        auto OnContentChanged(winrt::Windows::Foundation::IInspectable const& oldContent, winrt::Windows::Foundation::IInspectable const& newContent) const;
        auto OnContentTemplateChanged(winrt::Microsoft::UI::Xaml::DataTemplate const& oldContentTemplate, winrt::Microsoft::UI::Xaml::DataTemplate const& newContentTemplate) const;
        auto OnContentTemplateSelectorChanged(winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& oldContentTemplateSelector, winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& newContentTemplateSelector) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContentControlOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContentControlStatics
    {
        [[nodiscard]] auto ContentProperty() const;
        [[nodiscard]] auto ContentTemplateProperty() const;
        [[nodiscard]] auto ContentTemplateSelectorProperty() const;
        [[nodiscard]] auto ContentTransitionsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContentControlStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContentControlStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContentDialog
    {
        [[nodiscard]] auto Title() const;
        auto Title(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto TitleTemplate() const;
        auto TitleTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto FullSizeDesired() const;
        auto FullSizeDesired(bool value) const;
        [[nodiscard]] auto PrimaryButtonText() const;
        auto PrimaryButtonText(param::hstring const& value) const;
        [[nodiscard]] auto SecondaryButtonText() const;
        auto SecondaryButtonText(param::hstring const& value) const;
        [[nodiscard]] auto CloseButtonText() const;
        auto CloseButtonText(param::hstring const& value) const;
        [[nodiscard]] auto PrimaryButtonCommand() const;
        auto PrimaryButtonCommand(winrt::Microsoft::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] auto SecondaryButtonCommand() const;
        auto SecondaryButtonCommand(winrt::Microsoft::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] auto CloseButtonCommand() const;
        auto CloseButtonCommand(winrt::Microsoft::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] auto PrimaryButtonCommandParameter() const;
        auto PrimaryButtonCommandParameter(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto SecondaryButtonCommandParameter() const;
        auto SecondaryButtonCommandParameter(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto CloseButtonCommandParameter() const;
        auto CloseButtonCommandParameter(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto IsPrimaryButtonEnabled() const;
        auto IsPrimaryButtonEnabled(bool value) const;
        [[nodiscard]] auto IsSecondaryButtonEnabled() const;
        auto IsSecondaryButtonEnabled(bool value) const;
        [[nodiscard]] auto PrimaryButtonStyle() const;
        auto PrimaryButtonStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto SecondaryButtonStyle() const;
        auto SecondaryButtonStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto CloseButtonStyle() const;
        auto CloseButtonStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto DefaultButton() const;
        auto DefaultButton(winrt::Microsoft::UI::Xaml::Controls::ContentDialogButton const& value) const;
        auto Closing(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ContentDialog, winrt::Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs> const& handler) const;
        using Closing_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IContentDialog, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IContentDialog>::remove_Closing>;
        [[nodiscard]] auto Closing(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ContentDialog, winrt::Microsoft::UI::Xaml::Controls::ContentDialogClosingEventArgs> const& handler) const;
        auto Closing(winrt::event_token const& token) const noexcept;
        auto Closed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ContentDialog, winrt::Microsoft::UI::Xaml::Controls::ContentDialogClosedEventArgs> const& handler) const;
        using Closed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IContentDialog, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IContentDialog>::remove_Closed>;
        [[nodiscard]] auto Closed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ContentDialog, winrt::Microsoft::UI::Xaml::Controls::ContentDialogClosedEventArgs> const& handler) const;
        auto Closed(winrt::event_token const& token) const noexcept;
        auto Opened(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ContentDialog, winrt::Microsoft::UI::Xaml::Controls::ContentDialogOpenedEventArgs> const& handler) const;
        using Opened_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IContentDialog, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IContentDialog>::remove_Opened>;
        [[nodiscard]] auto Opened(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ContentDialog, winrt::Microsoft::UI::Xaml::Controls::ContentDialogOpenedEventArgs> const& handler) const;
        auto Opened(winrt::event_token const& token) const noexcept;
        auto PrimaryButtonClick(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ContentDialog, winrt::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& handler) const;
        using PrimaryButtonClick_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IContentDialog, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IContentDialog>::remove_PrimaryButtonClick>;
        [[nodiscard]] auto PrimaryButtonClick(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ContentDialog, winrt::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& handler) const;
        auto PrimaryButtonClick(winrt::event_token const& token) const noexcept;
        auto SecondaryButtonClick(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ContentDialog, winrt::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& handler) const;
        using SecondaryButtonClick_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IContentDialog, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IContentDialog>::remove_SecondaryButtonClick>;
        [[nodiscard]] auto SecondaryButtonClick(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ContentDialog, winrt::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& handler) const;
        auto SecondaryButtonClick(winrt::event_token const& token) const noexcept;
        auto CloseButtonClick(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ContentDialog, winrt::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& handler) const;
        using CloseButtonClick_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IContentDialog, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IContentDialog>::remove_CloseButtonClick>;
        [[nodiscard]] auto CloseButtonClick(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ContentDialog, winrt::Microsoft::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> const& handler) const;
        auto CloseButtonClick(winrt::event_token const& token) const noexcept;
        auto Hide() const;
        auto ShowAsync() const;
        auto ShowAsync(winrt::Microsoft::UI::Xaml::Controls::ContentDialogPlacement const& placement) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContentDialog>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContentDialog<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContentDialogButtonClickDeferral
    {
        auto Complete() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContentDialogButtonClickDeferral>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContentDialogButtonClickDeferral<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContentDialogButtonClickEventArgs
    {
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
        auto GetDeferral() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContentDialogButtonClickEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContentDialogClosedEventArgs
    {
        [[nodiscard]] auto Result() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContentDialogClosedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContentDialogClosingDeferral
    {
        auto Complete() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosingDeferral>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContentDialogClosingDeferral<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContentDialogClosingEventArgs
    {
        [[nodiscard]] auto Result() const;
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
        auto GetDeferral() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContentDialogClosingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContentDialogFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContentDialogFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContentDialogFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContentDialogOpenedEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContentDialogOpenedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContentDialogOpenedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContentDialogStatics
    {
        [[nodiscard]] auto TitleProperty() const;
        [[nodiscard]] auto TitleTemplateProperty() const;
        [[nodiscard]] auto FullSizeDesiredProperty() const;
        [[nodiscard]] auto PrimaryButtonTextProperty() const;
        [[nodiscard]] auto SecondaryButtonTextProperty() const;
        [[nodiscard]] auto CloseButtonTextProperty() const;
        [[nodiscard]] auto PrimaryButtonCommandProperty() const;
        [[nodiscard]] auto SecondaryButtonCommandProperty() const;
        [[nodiscard]] auto CloseButtonCommandProperty() const;
        [[nodiscard]] auto PrimaryButtonCommandParameterProperty() const;
        [[nodiscard]] auto SecondaryButtonCommandParameterProperty() const;
        [[nodiscard]] auto CloseButtonCommandParameterProperty() const;
        [[nodiscard]] auto IsPrimaryButtonEnabledProperty() const;
        [[nodiscard]] auto IsSecondaryButtonEnabledProperty() const;
        [[nodiscard]] auto PrimaryButtonStyleProperty() const;
        [[nodiscard]] auto SecondaryButtonStyleProperty() const;
        [[nodiscard]] auto CloseButtonStyleProperty() const;
        [[nodiscard]] auto DefaultButtonProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContentDialogStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContentDialogStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContentPresenter
    {
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto ContentTemplate() const;
        auto ContentTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto ContentTemplateSelector() const;
        auto ContentTemplateSelector(winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& value) const;
        [[nodiscard]] auto ContentTransitions() const;
        auto ContentTransitions(winrt::Microsoft::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
        [[nodiscard]] auto FontSize() const;
        auto FontSize(double value) const;
        [[nodiscard]] auto FontFamily() const;
        auto FontFamily(winrt::Microsoft::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto FontWeight() const;
        auto FontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto FontStyle() const;
        auto FontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto FontStretch() const;
        auto FontStretch(winrt::Windows::UI::Text::FontStretch const& value) const;
        [[nodiscard]] auto CharacterSpacing() const;
        auto CharacterSpacing(int32_t value) const;
        [[nodiscard]] auto Foreground() const;
        auto Foreground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto OpticalMarginAlignment() const;
        auto OpticalMarginAlignment(winrt::Microsoft::UI::Xaml::OpticalMarginAlignment const& value) const;
        [[nodiscard]] auto TextLineBounds() const;
        auto TextLineBounds(winrt::Microsoft::UI::Xaml::TextLineBounds const& value) const;
        [[nodiscard]] auto IsTextScaleFactorEnabled() const;
        auto IsTextScaleFactorEnabled(bool value) const;
        [[nodiscard]] auto BackgroundTransition() const;
        auto BackgroundTransition(winrt::Microsoft::UI::Xaml::BrushTransition const& value) const;
        [[nodiscard]] auto TextWrapping() const;
        auto TextWrapping(winrt::Microsoft::UI::Xaml::TextWrapping const& value) const;
        [[nodiscard]] auto MaxLines() const;
        auto MaxLines(int32_t value) const;
        [[nodiscard]] auto LineStackingStrategy() const;
        auto LineStackingStrategy(winrt::Microsoft::UI::Xaml::LineStackingStrategy const& value) const;
        [[nodiscard]] auto LineHeight() const;
        auto LineHeight(double value) const;
        [[nodiscard]] auto BorderBrush() const;
        auto BorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BorderThickness() const;
        auto BorderThickness(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto CornerRadius() const;
        auto CornerRadius(winrt::Microsoft::UI::Xaml::CornerRadius const& value) const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto Background() const;
        auto Background(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BackgroundSizing() const;
        auto BackgroundSizing(winrt::Microsoft::UI::Xaml::Controls::BackgroundSizing const& value) const;
        [[nodiscard]] auto HorizontalContentAlignment() const;
        auto HorizontalContentAlignment(winrt::Microsoft::UI::Xaml::HorizontalAlignment const& value) const;
        [[nodiscard]] auto VerticalContentAlignment() const;
        auto VerticalContentAlignment(winrt::Microsoft::UI::Xaml::VerticalAlignment const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContentPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContentPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContentPresenterFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContentPresenterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContentPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContentPresenterOverrides
    {
        auto OnContentTemplateChanged(winrt::Microsoft::UI::Xaml::DataTemplate const& oldContentTemplate, winrt::Microsoft::UI::Xaml::DataTemplate const& newContentTemplate) const;
        auto OnContentTemplateSelectorChanged(winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& oldContentTemplateSelector, winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& newContentTemplateSelector) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContentPresenterOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContentPresenterOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContentPresenterStatics
    {
        [[nodiscard]] auto ContentProperty() const;
        [[nodiscard]] auto ContentTemplateProperty() const;
        [[nodiscard]] auto ContentTemplateSelectorProperty() const;
        [[nodiscard]] auto ContentTransitionsProperty() const;
        [[nodiscard]] auto FontSizeProperty() const;
        [[nodiscard]] auto FontFamilyProperty() const;
        [[nodiscard]] auto FontWeightProperty() const;
        [[nodiscard]] auto FontStyleProperty() const;
        [[nodiscard]] auto FontStretchProperty() const;
        [[nodiscard]] auto CharacterSpacingProperty() const;
        [[nodiscard]] auto ForegroundProperty() const;
        [[nodiscard]] auto OpticalMarginAlignmentProperty() const;
        [[nodiscard]] auto TextLineBoundsProperty() const;
        [[nodiscard]] auto IsTextScaleFactorEnabledProperty() const;
        [[nodiscard]] auto TextWrappingProperty() const;
        [[nodiscard]] auto MaxLinesProperty() const;
        [[nodiscard]] auto LineStackingStrategyProperty() const;
        [[nodiscard]] auto LineHeightProperty() const;
        [[nodiscard]] auto BorderBrushProperty() const;
        [[nodiscard]] auto BorderThicknessProperty() const;
        [[nodiscard]] auto CornerRadiusProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
        [[nodiscard]] auto BackgroundProperty() const;
        [[nodiscard]] auto BackgroundSizingProperty() const;
        [[nodiscard]] auto HorizontalContentAlignmentProperty() const;
        [[nodiscard]] auto VerticalContentAlignmentProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContentPresenterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContentPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IContextMenuEventArgs
    {
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        [[nodiscard]] auto CursorLeft() const;
        [[nodiscard]] auto CursorTop() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IContextMenuEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IContextMenuEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IControl
    {
        [[nodiscard]] auto IsFocusEngagementEnabled() const;
        auto IsFocusEngagementEnabled(bool value) const;
        [[nodiscard]] auto IsFocusEngaged() const;
        auto IsFocusEngaged(bool value) const;
        [[nodiscard]] auto RequiresPointer() const;
        auto RequiresPointer(winrt::Microsoft::UI::Xaml::Controls::RequiresPointer const& value) const;
        [[nodiscard]] auto FontSize() const;
        auto FontSize(double value) const;
        [[nodiscard]] auto FontFamily() const;
        auto FontFamily(winrt::Microsoft::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto FontWeight() const;
        auto FontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto FontStyle() const;
        auto FontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto FontStretch() const;
        auto FontStretch(winrt::Windows::UI::Text::FontStretch const& value) const;
        [[nodiscard]] auto CharacterSpacing() const;
        auto CharacterSpacing(int32_t value) const;
        [[nodiscard]] auto Foreground() const;
        auto Foreground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto IsTextScaleFactorEnabled() const;
        auto IsTextScaleFactorEnabled(bool value) const;
        [[nodiscard]] auto IsEnabled() const;
        auto IsEnabled(bool value) const;
        [[nodiscard]] auto TabNavigation() const;
        auto TabNavigation(winrt::Microsoft::UI::Xaml::Input::KeyboardNavigationMode const& value) const;
        [[nodiscard]] auto Template() const;
        auto Template(winrt::Microsoft::UI::Xaml::Controls::ControlTemplate const& value) const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto HorizontalContentAlignment() const;
        auto HorizontalContentAlignment(winrt::Microsoft::UI::Xaml::HorizontalAlignment const& value) const;
        [[nodiscard]] auto VerticalContentAlignment() const;
        auto VerticalContentAlignment(winrt::Microsoft::UI::Xaml::VerticalAlignment const& value) const;
        [[nodiscard]] auto Background() const;
        auto Background(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BackgroundSizing() const;
        auto BackgroundSizing(winrt::Microsoft::UI::Xaml::Controls::BackgroundSizing const& value) const;
        [[nodiscard]] auto BorderThickness() const;
        auto BorderThickness(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto BorderBrush() const;
        auto BorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto DefaultStyleResourceUri() const;
        auto DefaultStyleResourceUri(winrt::Windows::Foundation::Uri const& value) const;
        [[nodiscard]] auto ElementSoundMode() const;
        auto ElementSoundMode(winrt::Microsoft::UI::Xaml::ElementSoundMode const& value) const;
        [[nodiscard]] auto CornerRadius() const;
        auto CornerRadius(winrt::Microsoft::UI::Xaml::CornerRadius const& value) const;
        auto FocusEngaged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::Controls::FocusEngagedEventArgs> const& handler) const;
        using FocusEngaged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IControl, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IControl>::remove_FocusEngaged>;
        [[nodiscard]] auto FocusEngaged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::Controls::FocusEngagedEventArgs> const& handler) const;
        auto FocusEngaged(winrt::event_token const& token) const noexcept;
        auto FocusDisengaged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::Controls::FocusDisengagedEventArgs> const& handler) const;
        using FocusDisengaged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IControl, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IControl>::remove_FocusDisengaged>;
        [[nodiscard]] auto FocusDisengaged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::Controls::FocusDisengagedEventArgs> const& handler) const;
        auto FocusDisengaged(winrt::event_token const& token) const noexcept;
        auto IsEnabledChanged(winrt::Microsoft::UI::Xaml::DependencyPropertyChangedEventHandler const& handler) const;
        using IsEnabledChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IControl, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IControl>::remove_IsEnabledChanged>;
        [[nodiscard]] auto IsEnabledChanged(auto_revoke_t, winrt::Microsoft::UI::Xaml::DependencyPropertyChangedEventHandler const& handler) const;
        auto IsEnabledChanged(winrt::event_token const& token) const noexcept;
        auto RemoveFocusEngagement() const;
        auto ApplyTemplate() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IControl>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IControl<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IControlFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IControlFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IControlFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IControlOverrides
    {
        auto OnPointerEntered(winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerPressed(winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerMoved(winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerReleased(winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerExited(winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerCaptureLost(winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerCanceled(winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerWheelChanged(winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnTapped(winrt::Microsoft::UI::Xaml::Input::TappedRoutedEventArgs const& e) const;
        auto OnDoubleTapped(winrt::Microsoft::UI::Xaml::Input::DoubleTappedRoutedEventArgs const& e) const;
        auto OnHolding(winrt::Microsoft::UI::Xaml::Input::HoldingRoutedEventArgs const& e) const;
        auto OnRightTapped(winrt::Microsoft::UI::Xaml::Input::RightTappedRoutedEventArgs const& e) const;
        auto OnManipulationStarting(winrt::Microsoft::UI::Xaml::Input::ManipulationStartingRoutedEventArgs const& e) const;
        auto OnManipulationInertiaStarting(winrt::Microsoft::UI::Xaml::Input::ManipulationInertiaStartingRoutedEventArgs const& e) const;
        auto OnManipulationStarted(winrt::Microsoft::UI::Xaml::Input::ManipulationStartedRoutedEventArgs const& e) const;
        auto OnManipulationDelta(winrt::Microsoft::UI::Xaml::Input::ManipulationDeltaRoutedEventArgs const& e) const;
        auto OnManipulationCompleted(winrt::Microsoft::UI::Xaml::Input::ManipulationCompletedRoutedEventArgs const& e) const;
        auto OnKeyUp(winrt::Microsoft::UI::Xaml::Input::KeyRoutedEventArgs const& e) const;
        auto OnKeyDown(winrt::Microsoft::UI::Xaml::Input::KeyRoutedEventArgs const& e) const;
        auto OnPreviewKeyDown(winrt::Microsoft::UI::Xaml::Input::KeyRoutedEventArgs const& e) const;
        auto OnPreviewKeyUp(winrt::Microsoft::UI::Xaml::Input::KeyRoutedEventArgs const& e) const;
        auto OnGotFocus(winrt::Microsoft::UI::Xaml::RoutedEventArgs const& e) const;
        auto OnLostFocus(winrt::Microsoft::UI::Xaml::RoutedEventArgs const& e) const;
        auto OnCharacterReceived(winrt::Microsoft::UI::Xaml::Input::CharacterReceivedRoutedEventArgs const& e) const;
        auto OnDragEnter(winrt::Microsoft::UI::Xaml::DragEventArgs const& e) const;
        auto OnDragLeave(winrt::Microsoft::UI::Xaml::DragEventArgs const& e) const;
        auto OnDragOver(winrt::Microsoft::UI::Xaml::DragEventArgs const& e) const;
        auto OnDrop(winrt::Microsoft::UI::Xaml::DragEventArgs const& e) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IControlOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IControlOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IControlProtected
    {
        [[nodiscard]] auto DefaultStyleKey() const;
        auto DefaultStyleKey(winrt::Windows::Foundation::IInspectable const& value) const;
        auto GetTemplateChild(param::hstring const& childName) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IControlProtected>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IControlProtected<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IControlStatics
    {
        [[nodiscard]] auto IsFocusEngagementEnabledProperty() const;
        [[nodiscard]] auto IsFocusEngagedProperty() const;
        [[nodiscard]] auto RequiresPointerProperty() const;
        [[nodiscard]] auto FontSizeProperty() const;
        [[nodiscard]] auto FontFamilyProperty() const;
        [[nodiscard]] auto FontWeightProperty() const;
        [[nodiscard]] auto FontStyleProperty() const;
        [[nodiscard]] auto FontStretchProperty() const;
        [[nodiscard]] auto CharacterSpacingProperty() const;
        [[nodiscard]] auto ForegroundProperty() const;
        [[nodiscard]] auto IsTextScaleFactorEnabledProperty() const;
        [[nodiscard]] auto IsEnabledProperty() const;
        [[nodiscard]] auto TabNavigationProperty() const;
        [[nodiscard]] auto TemplateProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
        [[nodiscard]] auto HorizontalContentAlignmentProperty() const;
        [[nodiscard]] auto VerticalContentAlignmentProperty() const;
        [[nodiscard]] auto BackgroundProperty() const;
        [[nodiscard]] auto BackgroundSizingProperty() const;
        [[nodiscard]] auto BorderThicknessProperty() const;
        [[nodiscard]] auto BorderBrushProperty() const;
        [[nodiscard]] auto DefaultStyleKeyProperty() const;
        [[nodiscard]] auto DefaultStyleResourceUriProperty() const;
        [[nodiscard]] auto ElementSoundModeProperty() const;
        [[nodiscard]] auto CornerRadiusProperty() const;
        [[nodiscard]] auto IsTemplateFocusTargetProperty() const;
        auto GetIsTemplateFocusTarget(winrt::Microsoft::UI::Xaml::FrameworkElement const& element) const;
        auto SetIsTemplateFocusTarget(winrt::Microsoft::UI::Xaml::FrameworkElement const& element, bool value) const;
        [[nodiscard]] auto IsTemplateKeyTipTargetProperty() const;
        auto GetIsTemplateKeyTipTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetIsTemplateKeyTipTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IControlStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IControlStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IControlTemplate
    {
        [[nodiscard]] auto TargetType() const;
        auto TargetType(winrt::Windows::UI::Xaml::Interop::TypeName const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IControlTemplate>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IControlTemplate<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICoreWebView2InitializedEventArgs
    {
        [[nodiscard]] auto Exception() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ICoreWebView2InitializedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICoreWebView2InitializedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDataTemplateSelector
    {
        auto SelectTemplate(winrt::Windows::Foundation::IInspectable const& item, winrt::Microsoft::UI::Xaml::DependencyObject const& container) const;
        auto SelectTemplate(winrt::Windows::Foundation::IInspectable const& item) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelector>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDataTemplateSelector<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDataTemplateSelectorFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelectorFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDataTemplateSelectorFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDataTemplateSelectorOverrides
    {
        auto SelectTemplateCore(winrt::Windows::Foundation::IInspectable const& item, winrt::Microsoft::UI::Xaml::DependencyObject const& container) const;
        auto SelectTemplateCore(winrt::Windows::Foundation::IInspectable const& item) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelectorOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDataTemplateSelectorOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDatePickedEventArgs
    {
        [[nodiscard]] auto OldDate() const;
        [[nodiscard]] auto NewDate() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDatePickedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDatePickedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDatePicker
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto CalendarIdentifier() const;
        auto CalendarIdentifier(param::hstring const& value) const;
        [[nodiscard]] auto Date() const;
        auto Date(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto DayVisible() const;
        auto DayVisible(bool value) const;
        [[nodiscard]] auto MonthVisible() const;
        auto MonthVisible(bool value) const;
        [[nodiscard]] auto YearVisible() const;
        auto YearVisible(bool value) const;
        [[nodiscard]] auto DayFormat() const;
        auto DayFormat(param::hstring const& value) const;
        [[nodiscard]] auto MonthFormat() const;
        auto MonthFormat(param::hstring const& value) const;
        [[nodiscard]] auto YearFormat() const;
        auto YearFormat(param::hstring const& value) const;
        [[nodiscard]] auto MinYear() const;
        auto MinYear(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto MaxYear() const;
        auto MaxYear(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Microsoft::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] auto LightDismissOverlayMode() const;
        auto LightDismissOverlayMode(winrt::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
        [[nodiscard]] auto SelectedDate() const;
        auto SelectedDate(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const& value) const;
        auto DateChanged(winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Xaml::Controls::DatePickerValueChangedEventArgs> const& handler) const;
        using DateChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IDatePicker, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IDatePicker>::remove_DateChanged>;
        [[nodiscard]] auto DateChanged(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Xaml::Controls::DatePickerValueChangedEventArgs> const& handler) const;
        auto DateChanged(winrt::event_token const& token) const noexcept;
        auto SelectedDateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::DatePicker, winrt::Microsoft::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs> const& handler) const;
        using SelectedDateChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IDatePicker, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IDatePicker>::remove_SelectedDateChanged>;
        [[nodiscard]] auto SelectedDateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::DatePicker, winrt::Microsoft::UI::Xaml::Controls::DatePickerSelectedValueChangedEventArgs> const& handler) const;
        auto SelectedDateChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDatePicker>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDatePicker<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDatePickerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDatePickerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDatePickerFlyout
    {
        [[nodiscard]] auto CalendarIdentifier() const;
        auto CalendarIdentifier(param::hstring const& value) const;
        [[nodiscard]] auto Date() const;
        auto Date(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto DayVisible() const;
        auto DayVisible(bool value) const;
        [[nodiscard]] auto MonthVisible() const;
        auto MonthVisible(bool value) const;
        [[nodiscard]] auto YearVisible() const;
        auto YearVisible(bool value) const;
        [[nodiscard]] auto MinYear() const;
        auto MinYear(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto MaxYear() const;
        auto MaxYear(winrt::Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] auto DayFormat() const;
        auto DayFormat(param::hstring const& value) const;
        [[nodiscard]] auto MonthFormat() const;
        auto MonthFormat(param::hstring const& value) const;
        [[nodiscard]] auto YearFormat() const;
        auto YearFormat(param::hstring const& value) const;
        auto DatePicked(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::DatePickerFlyout, winrt::Microsoft::UI::Xaml::Controls::DatePickedEventArgs> const& handler) const;
        using DatePicked_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyout, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyout>::remove_DatePicked>;
        [[nodiscard]] auto DatePicked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::DatePickerFlyout, winrt::Microsoft::UI::Xaml::Controls::DatePickedEventArgs> const& handler) const;
        auto DatePicked(winrt::event_token const& token) const noexcept;
        auto ShowAtAsync(winrt::Microsoft::UI::Xaml::FrameworkElement const& target) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDatePickerFlyout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDatePickerFlyoutItem
    {
        [[nodiscard]] auto PrimaryText() const;
        auto PrimaryText(param::hstring const& value) const;
        [[nodiscard]] auto SecondaryText() const;
        auto SecondaryText(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDatePickerFlyoutItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDatePickerFlyoutItemStatics
    {
        [[nodiscard]] auto PrimaryTextProperty() const;
        [[nodiscard]] auto SecondaryTextProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDatePickerFlyoutItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDatePickerFlyoutPresenter
    {
        [[nodiscard]] auto IsDefaultShadowEnabled() const;
        auto IsDefaultShadowEnabled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDatePickerFlyoutPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDatePickerFlyoutPresenterStatics
    {
        [[nodiscard]] auto IsDefaultShadowEnabledProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDatePickerFlyoutPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDatePickerFlyoutStatics
    {
        [[nodiscard]] auto CalendarIdentifierProperty() const;
        [[nodiscard]] auto DateProperty() const;
        [[nodiscard]] auto DayVisibleProperty() const;
        [[nodiscard]] auto MonthVisibleProperty() const;
        [[nodiscard]] auto YearVisibleProperty() const;
        [[nodiscard]] auto MinYearProperty() const;
        [[nodiscard]] auto MaxYearProperty() const;
        [[nodiscard]] auto DayFormatProperty() const;
        [[nodiscard]] auto MonthFormatProperty() const;
        [[nodiscard]] auto YearFormatProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDatePickerFlyoutStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDatePickerSelectedValueChangedEventArgs
    {
        [[nodiscard]] auto OldDate() const;
        [[nodiscard]] auto NewDate() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDatePickerSelectedValueChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDatePickerSelectedValueChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDatePickerStatics
    {
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto CalendarIdentifierProperty() const;
        [[nodiscard]] auto DateProperty() const;
        [[nodiscard]] auto DayVisibleProperty() const;
        [[nodiscard]] auto MonthVisibleProperty() const;
        [[nodiscard]] auto YearVisibleProperty() const;
        [[nodiscard]] auto DayFormatProperty() const;
        [[nodiscard]] auto MonthFormatProperty() const;
        [[nodiscard]] auto YearFormatProperty() const;
        [[nodiscard]] auto MinYearProperty() const;
        [[nodiscard]] auto MaxYearProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto LightDismissOverlayModeProperty() const;
        [[nodiscard]] auto SelectedDateProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDatePickerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDatePickerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDatePickerValueChangedEventArgs
    {
        [[nodiscard]] auto OldDate() const;
        [[nodiscard]] auto NewDate() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDatePickerValueChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDragItemsCompletedEventArgs
    {
        [[nodiscard]] auto Items() const;
        [[nodiscard]] auto DropResult() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDragItemsCompletedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDragItemsCompletedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDragItemsStartingEventArgs
    {
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
        [[nodiscard]] auto Items() const;
        [[nodiscard]] auto Data() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDragItemsStartingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDragItemsStartingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDropDownButton
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDropDownButton>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDropDownButton<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDropDownButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDropDownButtonFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDropDownButtonFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDynamicAnimatedVisualSource
    {
        auto AnimatedVisualInvalidated(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using AnimatedVisualInvalidated_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource>::remove_AnimatedVisualInvalidated>;
        [[nodiscard]] auto AnimatedVisualInvalidated(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto AnimatedVisualInvalidated(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDynamicAnimatedVisualSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDynamicOverflowItemsChangingEventArgs
    {
        [[nodiscard]] auto Action() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDynamicOverflowItemsChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IExpander
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto HeaderTemplateSelector() const;
        auto HeaderTemplateSelector(winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& value) const;
        [[nodiscard]] auto IsExpanded() const;
        auto IsExpanded(bool value) const;
        [[nodiscard]] auto ExpandDirection() const;
        auto ExpandDirection(winrt::Microsoft::UI::Xaml::Controls::ExpandDirection const& value) const;
        auto Expanding(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Expander, winrt::Microsoft::UI::Xaml::Controls::ExpanderExpandingEventArgs> const& handler) const;
        using Expanding_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IExpander, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IExpander>::remove_Expanding>;
        [[nodiscard]] auto Expanding(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Expander, winrt::Microsoft::UI::Xaml::Controls::ExpanderExpandingEventArgs> const& handler) const;
        auto Expanding(winrt::event_token const& token) const noexcept;
        auto Collapsed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Expander, winrt::Microsoft::UI::Xaml::Controls::ExpanderCollapsedEventArgs> const& handler) const;
        using Collapsed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IExpander, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IExpander>::remove_Collapsed>;
        [[nodiscard]] auto Collapsed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Expander, winrt::Microsoft::UI::Xaml::Controls::ExpanderCollapsedEventArgs> const& handler) const;
        auto Collapsed(winrt::event_token const& token) const noexcept;
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IExpander>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IExpander<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IExpanderCollapsedEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IExpanderCollapsedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IExpanderCollapsedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IExpanderExpandingEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IExpanderExpandingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IExpanderExpandingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IExpanderFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IExpanderFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IExpanderFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IExpanderStatics
    {
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto HeaderTemplateSelectorProperty() const;
        [[nodiscard]] auto IsExpandedProperty() const;
        [[nodiscard]] auto ExpandDirectionProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IExpanderStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IExpanderStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IExpanderTemplateSettings
    {
        [[nodiscard]] auto ContentHeight() const;
        [[nodiscard]] auto NegativeContentHeight() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IExpanderTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IExpanderTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFlipView
    {
        [[nodiscard]] auto UseTouchAnimationsForAllNavigation() const;
        auto UseTouchAnimationsForAllNavigation(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFlipView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFlipView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFlipViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFlipViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFlipViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFlipViewItem
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFlipViewItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFlipViewItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFlipViewItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFlipViewItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFlipViewItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFlipViewStatics
    {
        [[nodiscard]] auto UseTouchAnimationsForAllNavigationProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFlipViewStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFlipViewStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFlyout
    {
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto FlyoutPresenterStyle() const;
        auto FlyoutPresenterStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFlyout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFlyout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFlyoutFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFlyoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFlyoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFlyoutPresenter
    {
        [[nodiscard]] auto IsDefaultShadowEnabled() const;
        auto IsDefaultShadowEnabled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFlyoutPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFlyoutPresenterFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFlyoutPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFlyoutPresenterStatics
    {
        [[nodiscard]] auto IsDefaultShadowEnabledProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFlyoutPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFlyoutStatics
    {
        [[nodiscard]] auto ContentProperty() const;
        [[nodiscard]] auto FlyoutPresenterStyleProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFlyoutStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFlyoutStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFocusDisengagedEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFocusDisengagedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFocusDisengagedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFocusEngagedEventArgs
    {
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFocusEngagedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFocusEngagedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFontIcon
    {
        [[nodiscard]] auto Glyph() const;
        auto Glyph(param::hstring const& value) const;
        [[nodiscard]] auto FontSize() const;
        auto FontSize(double value) const;
        [[nodiscard]] auto FontFamily() const;
        auto FontFamily(winrt::Microsoft::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto FontWeight() const;
        auto FontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto FontStyle() const;
        auto FontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto IsTextScaleFactorEnabled() const;
        auto IsTextScaleFactorEnabled(bool value) const;
        [[nodiscard]] auto MirroredWhenRightToLeft() const;
        auto MirroredWhenRightToLeft(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFontIcon>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFontIcon<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFontIconFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFontIconFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFontIconFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFontIconSource
    {
        [[nodiscard]] auto Glyph() const;
        auto Glyph(param::hstring const& value) const;
        [[nodiscard]] auto FontSize() const;
        auto FontSize(double value) const;
        [[nodiscard]] auto FontFamily() const;
        auto FontFamily(winrt::Microsoft::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto FontWeight() const;
        auto FontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto FontStyle() const;
        auto FontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto IsTextScaleFactorEnabled() const;
        auto IsTextScaleFactorEnabled(bool value) const;
        [[nodiscard]] auto MirroredWhenRightToLeft() const;
        auto MirroredWhenRightToLeft(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFontIconSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFontIconSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFontIconSourceFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFontIconSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFontIconSourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFontIconSourceStatics
    {
        [[nodiscard]] auto GlyphProperty() const;
        [[nodiscard]] auto FontSizeProperty() const;
        [[nodiscard]] auto FontFamilyProperty() const;
        [[nodiscard]] auto FontWeightProperty() const;
        [[nodiscard]] auto FontStyleProperty() const;
        [[nodiscard]] auto IsTextScaleFactorEnabledProperty() const;
        [[nodiscard]] auto MirroredWhenRightToLeftProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFontIconSourceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFontIconStatics
    {
        [[nodiscard]] auto GlyphProperty() const;
        [[nodiscard]] auto FontSizeProperty() const;
        [[nodiscard]] auto FontFamilyProperty() const;
        [[nodiscard]] auto FontWeightProperty() const;
        [[nodiscard]] auto FontStyleProperty() const;
        [[nodiscard]] auto IsTextScaleFactorEnabledProperty() const;
        [[nodiscard]] auto MirroredWhenRightToLeftProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFontIconStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFontIconStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFrame
    {
        [[nodiscard]] auto CacheSize() const;
        auto CacheSize(int32_t value) const;
        [[nodiscard]] auto CanGoBack() const;
        [[nodiscard]] auto CanGoForward() const;
        [[nodiscard]] auto CurrentSourcePageType() const;
        [[nodiscard]] auto SourcePageType() const;
        auto SourcePageType(winrt::Windows::UI::Xaml::Interop::TypeName const& value) const;
        [[nodiscard]] auto BackStackDepth() const;
        [[nodiscard]] auto BackStack() const;
        [[nodiscard]] auto ForwardStack() const;
        [[nodiscard]] auto IsNavigationStackEnabled() const;
        auto IsNavigationStackEnabled(bool value) const;
        auto Navigated(winrt::Microsoft::UI::Xaml::Navigation::NavigatedEventHandler const& handler) const;
        using Navigated_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IFrame, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IFrame>::remove_Navigated>;
        [[nodiscard]] auto Navigated(auto_revoke_t, winrt::Microsoft::UI::Xaml::Navigation::NavigatedEventHandler const& handler) const;
        auto Navigated(winrt::event_token const& token) const noexcept;
        auto Navigating(winrt::Microsoft::UI::Xaml::Navigation::NavigatingCancelEventHandler const& handler) const;
        using Navigating_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IFrame, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IFrame>::remove_Navigating>;
        [[nodiscard]] auto Navigating(auto_revoke_t, winrt::Microsoft::UI::Xaml::Navigation::NavigatingCancelEventHandler const& handler) const;
        auto Navigating(winrt::event_token const& token) const noexcept;
        auto NavigationFailed(winrt::Microsoft::UI::Xaml::Navigation::NavigationFailedEventHandler const& handler) const;
        using NavigationFailed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IFrame, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IFrame>::remove_NavigationFailed>;
        [[nodiscard]] auto NavigationFailed(auto_revoke_t, winrt::Microsoft::UI::Xaml::Navigation::NavigationFailedEventHandler const& handler) const;
        auto NavigationFailed(winrt::event_token const& token) const noexcept;
        auto NavigationStopped(winrt::Microsoft::UI::Xaml::Navigation::NavigationStoppedEventHandler const& handler) const;
        using NavigationStopped_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IFrame, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IFrame>::remove_NavigationStopped>;
        [[nodiscard]] auto NavigationStopped(auto_revoke_t, winrt::Microsoft::UI::Xaml::Navigation::NavigationStoppedEventHandler const& handler) const;
        auto NavigationStopped(winrt::event_token const& token) const noexcept;
        auto GoBack() const;
        auto GoBack(winrt::Microsoft::UI::Xaml::Media::Animation::NavigationTransitionInfo const& transitionInfoOverride) const;
        auto GoForward() const;
        auto Navigate(winrt::Windows::UI::Xaml::Interop::TypeName const& sourcePageType, winrt::Windows::Foundation::IInspectable const& parameter) const;
        auto Navigate(winrt::Windows::UI::Xaml::Interop::TypeName const& sourcePageType, winrt::Windows::Foundation::IInspectable const& parameter, winrt::Microsoft::UI::Xaml::Media::Animation::NavigationTransitionInfo const& infoOverride) const;
        auto NavigateToType(winrt::Windows::UI::Xaml::Interop::TypeName const& sourcePageType, winrt::Windows::Foundation::IInspectable const& parameter, winrt::Microsoft::UI::Xaml::Navigation::FrameNavigationOptions const& navigationOptions) const;
        auto GetNavigationState() const;
        auto SetNavigationState(param::hstring const& navigationState) const;
        auto SetNavigationState(param::hstring const& navigationState, bool suppressNavigate) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFrameFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFrameFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFrameFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFrameStatics
    {
        [[nodiscard]] auto CacheSizeProperty() const;
        [[nodiscard]] auto CanGoBackProperty() const;
        [[nodiscard]] auto CanGoForwardProperty() const;
        [[nodiscard]] auto CurrentSourcePageTypeProperty() const;
        [[nodiscard]] auto SourcePageTypeProperty() const;
        [[nodiscard]] auto BackStackDepthProperty() const;
        [[nodiscard]] auto BackStackProperty() const;
        [[nodiscard]] auto ForwardStackProperty() const;
        [[nodiscard]] auto IsNavigationStackEnabledProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IFrameStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFrameStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IGrid
    {
        [[nodiscard]] auto RowDefinitions() const;
        [[nodiscard]] auto ColumnDefinitions() const;
        [[nodiscard]] auto BackgroundSizing() const;
        auto BackgroundSizing(winrt::Microsoft::UI::Xaml::Controls::BackgroundSizing const& value) const;
        [[nodiscard]] auto BorderBrush() const;
        auto BorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BorderThickness() const;
        auto BorderThickness(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto CornerRadius() const;
        auto CornerRadius(winrt::Microsoft::UI::Xaml::CornerRadius const& value) const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto RowSpacing() const;
        auto RowSpacing(double value) const;
        [[nodiscard]] auto ColumnSpacing() const;
        auto ColumnSpacing(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IGrid>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IGrid<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IGridFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IGridFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IGridFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IGridStatics
    {
        [[nodiscard]] auto BackgroundSizingProperty() const;
        [[nodiscard]] auto BorderBrushProperty() const;
        [[nodiscard]] auto BorderThicknessProperty() const;
        [[nodiscard]] auto CornerRadiusProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
        [[nodiscard]] auto RowSpacingProperty() const;
        [[nodiscard]] auto ColumnSpacingProperty() const;
        [[nodiscard]] auto RowProperty() const;
        auto GetRow(winrt::Microsoft::UI::Xaml::FrameworkElement const& element) const;
        auto SetRow(winrt::Microsoft::UI::Xaml::FrameworkElement const& element, int32_t value) const;
        [[nodiscard]] auto ColumnProperty() const;
        auto GetColumn(winrt::Microsoft::UI::Xaml::FrameworkElement const& element) const;
        auto SetColumn(winrt::Microsoft::UI::Xaml::FrameworkElement const& element, int32_t value) const;
        [[nodiscard]] auto RowSpanProperty() const;
        auto GetRowSpan(winrt::Microsoft::UI::Xaml::FrameworkElement const& element) const;
        auto SetRowSpan(winrt::Microsoft::UI::Xaml::FrameworkElement const& element, int32_t value) const;
        [[nodiscard]] auto ColumnSpanProperty() const;
        auto GetColumnSpan(winrt::Microsoft::UI::Xaml::FrameworkElement const& element) const;
        auto SetColumnSpan(winrt::Microsoft::UI::Xaml::FrameworkElement const& element, int32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IGridStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IGridStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IGridView
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IGridView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IGridView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IGridViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IGridViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IGridViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IGridViewHeaderItem
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IGridViewHeaderItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IGridViewHeaderItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IGridViewHeaderItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IGridViewHeaderItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IGridViewHeaderItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IGridViewItem
    {
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IGridViewItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IGridViewItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IGridViewItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IGridViewItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IGridViewItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IGroupItem
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IGroupItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IGroupItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IGroupItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IGroupItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IGroupItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IGroupStyle
    {
        [[nodiscard]] auto Panel() const;
        auto Panel(winrt::Microsoft::UI::Xaml::Controls::ItemsPanelTemplate const& value) const;
        [[nodiscard]] auto ContainerStyle() const;
        auto ContainerStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto HeaderContainerStyle() const;
        auto HeaderContainerStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto ContainerStyleSelector() const;
        auto ContainerStyleSelector(winrt::Microsoft::UI::Xaml::Controls::StyleSelector const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto HeaderTemplateSelector() const;
        auto HeaderTemplateSelector(winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& value) const;
        [[nodiscard]] auto HidesIfEmpty() const;
        auto HidesIfEmpty(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IGroupStyle>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IGroupStyle<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IGroupStyleFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IGroupStyleFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IGroupStyleSelector
    {
        auto SelectGroupStyle(winrt::Windows::Foundation::IInspectable const& group, uint32_t level) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelector>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IGroupStyleSelector<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IGroupStyleSelectorFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelectorFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IGroupStyleSelectorFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IGroupStyleSelectorOverrides
    {
        auto SelectGroupStyleCore(winrt::Windows::Foundation::IInspectable const& group, uint32_t level) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelectorOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IGroupStyleSelectorOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IHasValidationErrorsChangedEventArgs
    {
        [[nodiscard]] auto NewValue() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IHasValidationErrorsChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IHasValidationErrorsChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IHub
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Microsoft::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] auto DefaultSectionIndex() const;
        auto DefaultSectionIndex(int32_t value) const;
        [[nodiscard]] auto Sections() const;
        [[nodiscard]] auto SectionsInView() const;
        [[nodiscard]] auto SectionHeaders() const;
        auto SectionHeaderClick(winrt::Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventHandler const& handler) const;
        using SectionHeaderClick_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IHub, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IHub>::remove_SectionHeaderClick>;
        [[nodiscard]] auto SectionHeaderClick(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventHandler const& handler) const;
        auto SectionHeaderClick(winrt::event_token const& token) const noexcept;
        auto SectionsInViewChanged(winrt::Microsoft::UI::Xaml::Controls::SectionsInViewChangedEventHandler const& handler) const;
        using SectionsInViewChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IHub, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IHub>::remove_SectionsInViewChanged>;
        [[nodiscard]] auto SectionsInViewChanged(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::SectionsInViewChangedEventHandler const& handler) const;
        auto SectionsInViewChanged(winrt::event_token const& token) const noexcept;
        auto ScrollToSection(winrt::Microsoft::UI::Xaml::Controls::HubSection const& section) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IHub>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IHub<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IHubFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IHubFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IHubFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IHubSection
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto ContentTemplate() const;
        auto ContentTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto IsHeaderInteractive() const;
        auto IsHeaderInteractive(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IHubSection>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IHubSection<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IHubSectionFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IHubSectionFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IHubSectionFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IHubSectionHeaderClickEventArgs
    {
        [[nodiscard]] auto Section() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IHubSectionHeaderClickEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IHubSectionStatics
    {
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto ContentTemplateProperty() const;
        [[nodiscard]] auto IsHeaderInteractiveProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IHubSectionStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IHubSectionStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IHubStatics
    {
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto DefaultSectionIndexProperty() const;
        [[nodiscard]] auto SemanticZoomOwnerProperty() const;
        [[nodiscard]] auto IsActiveViewProperty() const;
        [[nodiscard]] auto IsZoomedInViewProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IHubStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IHubStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IHyperlinkButton
    {
        [[nodiscard]] auto NavigateUri() const;
        auto NavigateUri(winrt::Windows::Foundation::Uri const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButton>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IHyperlinkButton<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IHyperlinkButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButtonFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IHyperlinkButtonFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IHyperlinkButtonStatics
    {
        [[nodiscard]] auto NavigateUriProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButtonStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IHyperlinkButtonStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IIconElement
    {
        [[nodiscard]] auto Foreground() const;
        auto Foreground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IIconElement>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IIconElement<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IIconElementFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IIconElementFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IIconElementFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IIconElementStatics
    {
        [[nodiscard]] auto ForegroundProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IIconElementStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IIconElementStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IIconSource
    {
        [[nodiscard]] auto Foreground() const;
        auto Foreground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        auto CreateIconElement() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IIconSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IIconSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IIconSourceElement
    {
        [[nodiscard]] auto IconSource() const;
        auto IconSource(winrt::Microsoft::UI::Xaml::Controls::IconSource const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IIconSourceElement>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IIconSourceElement<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IIconSourceElementFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IIconSourceElementFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IIconSourceElementFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IIconSourceElementStatics
    {
        [[nodiscard]] auto IconSourceProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IIconSourceElementStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IIconSourceElementStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IIconSourceFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IIconSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IIconSourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IIconSourceOverrides
    {
        auto CreateIconElementCore() const;
        auto GetIconElementPropertyCore(winrt::Microsoft::UI::Xaml::DependencyProperty const& iconSourceProperty) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IIconSourceOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IIconSourceOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IIconSourceStatics
    {
        [[nodiscard]] auto ForegroundProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IIconSourceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IIconSourceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IImage
    {
        [[nodiscard]] auto Source() const;
        auto Source(winrt::Microsoft::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto Stretch() const;
        auto Stretch(winrt::Microsoft::UI::Xaml::Media::Stretch const& value) const;
        [[nodiscard]] auto NineGrid() const;
        auto NineGrid(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        auto ImageFailed(winrt::Microsoft::UI::Xaml::ExceptionRoutedEventHandler const& handler) const;
        using ImageFailed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IImage, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IImage>::remove_ImageFailed>;
        [[nodiscard]] auto ImageFailed(auto_revoke_t, winrt::Microsoft::UI::Xaml::ExceptionRoutedEventHandler const& handler) const;
        auto ImageFailed(winrt::event_token const& token) const noexcept;
        auto ImageOpened(winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        using ImageOpened_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IImage, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IImage>::remove_ImageOpened>;
        [[nodiscard]] auto ImageOpened(auto_revoke_t, winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        auto ImageOpened(winrt::event_token const& token) const noexcept;
        auto GetAsCastingSource() const;
        auto GetAlphaMask() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IImage>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IImage<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IImageIcon
    {
        [[nodiscard]] auto Source() const;
        auto Source(winrt::Microsoft::UI::Xaml::Media::ImageSource const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IImageIcon>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IImageIcon<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IImageIconFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IImageIconFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IImageIconFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IImageIconSource
    {
        [[nodiscard]] auto ImageSource() const;
        auto ImageSource(winrt::Microsoft::UI::Xaml::Media::ImageSource const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IImageIconSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IImageIconSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IImageIconSourceFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IImageIconSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IImageIconSourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IImageIconSourceStatics
    {
        [[nodiscard]] auto ImageSourceProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IImageIconSourceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IImageIconSourceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IImageIconStatics
    {
        [[nodiscard]] auto SourceProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IImageIconStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IImageIconStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IImageStatics
    {
        [[nodiscard]] auto SourceProperty() const;
        [[nodiscard]] auto StretchProperty() const;
        [[nodiscard]] auto NineGridProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IImageStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IImageStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IInfoBadge
    {
        [[nodiscard]] auto Value() const;
        auto Value(int32_t value) const;
        [[nodiscard]] auto IconSource() const;
        auto IconSource(winrt::Microsoft::UI::Xaml::Controls::IconSource const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IInfoBadge>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IInfoBadge<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IInfoBadgeFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IInfoBadgeFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IInfoBadgeStatics
    {
        [[nodiscard]] auto ValueProperty() const;
        [[nodiscard]] auto IconSourceProperty() const;
        [[nodiscard]] auto TemplateSettingsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IInfoBadgeStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IInfoBadgeTemplateSettings
    {
        [[nodiscard]] auto InfoBadgeCornerRadius() const;
        auto InfoBadgeCornerRadius(winrt::Microsoft::UI::Xaml::CornerRadius const& value) const;
        [[nodiscard]] auto IconElement() const;
        auto IconElement(winrt::Microsoft::UI::Xaml::Controls::IconElement const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IInfoBadgeTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IInfoBadgeTemplateSettingsFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettingsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IInfoBadgeTemplateSettingsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IInfoBadgeTemplateSettingsStatics
    {
        [[nodiscard]] auto InfoBadgeCornerRadiusProperty() const;
        [[nodiscard]] auto IconElementProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettingsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IInfoBadgeTemplateSettingsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IInfoBar
    {
        [[nodiscard]] auto IsOpen() const;
        auto IsOpen(bool value) const;
        [[nodiscard]] auto Title() const;
        auto Title(param::hstring const& value) const;
        [[nodiscard]] auto Message() const;
        auto Message(param::hstring const& value) const;
        [[nodiscard]] auto Severity() const;
        auto Severity(winrt::Microsoft::UI::Xaml::Controls::InfoBarSeverity const& value) const;
        [[nodiscard]] auto IconSource() const;
        auto IconSource(winrt::Microsoft::UI::Xaml::Controls::IconSource const& value) const;
        [[nodiscard]] auto IsIconVisible() const;
        auto IsIconVisible(bool value) const;
        [[nodiscard]] auto IsClosable() const;
        auto IsClosable(bool value) const;
        [[nodiscard]] auto CloseButtonStyle() const;
        auto CloseButtonStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto CloseButtonCommand() const;
        auto CloseButtonCommand(winrt::Microsoft::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] auto CloseButtonCommandParameter() const;
        auto CloseButtonCommandParameter(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto ActionButton() const;
        auto ActionButton(winrt::Microsoft::UI::Xaml::Controls::Primitives::ButtonBase const& value) const;
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto ContentTemplate() const;
        auto ContentTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
        auto CloseButtonClick(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::InfoBar, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using CloseButtonClick_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IInfoBar, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IInfoBar>::remove_CloseButtonClick>;
        [[nodiscard]] auto CloseButtonClick(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::InfoBar, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto CloseButtonClick(winrt::event_token const& token) const noexcept;
        auto Closing(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::InfoBar, winrt::Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs> const& handler) const;
        using Closing_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IInfoBar, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IInfoBar>::remove_Closing>;
        [[nodiscard]] auto Closing(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::InfoBar, winrt::Microsoft::UI::Xaml::Controls::InfoBarClosingEventArgs> const& handler) const;
        auto Closing(winrt::event_token const& token) const noexcept;
        auto Closed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::InfoBar, winrt::Microsoft::UI::Xaml::Controls::InfoBarClosedEventArgs> const& handler) const;
        using Closed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IInfoBar, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IInfoBar>::remove_Closed>;
        [[nodiscard]] auto Closed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::InfoBar, winrt::Microsoft::UI::Xaml::Controls::InfoBarClosedEventArgs> const& handler) const;
        auto Closed(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IInfoBar>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IInfoBar<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IInfoBarClosedEventArgs
    {
        [[nodiscard]] auto Reason() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IInfoBarClosedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IInfoBarClosedEventArgsFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosedEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IInfoBarClosedEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IInfoBarClosingEventArgs
    {
        [[nodiscard]] auto Reason() const;
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IInfoBarClosingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IInfoBarClosingEventArgsFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosingEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IInfoBarClosingEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IInfoBarFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IInfoBarFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IInfoBarFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IInfoBarStatics
    {
        [[nodiscard]] auto IsOpenProperty() const;
        [[nodiscard]] auto TitleProperty() const;
        [[nodiscard]] auto MessageProperty() const;
        [[nodiscard]] auto SeverityProperty() const;
        [[nodiscard]] auto IconSourceProperty() const;
        [[nodiscard]] auto IsIconVisibleProperty() const;
        [[nodiscard]] auto IsClosableProperty() const;
        [[nodiscard]] auto CloseButtonStyleProperty() const;
        [[nodiscard]] auto CloseButtonCommandProperty() const;
        [[nodiscard]] auto CloseButtonCommandParameterProperty() const;
        [[nodiscard]] auto ActionButtonProperty() const;
        [[nodiscard]] auto ContentProperty() const;
        [[nodiscard]] auto ContentTemplateProperty() const;
        [[nodiscard]] auto TemplateSettingsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IInfoBarStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IInfoBarStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IInfoBarTemplateSettings
    {
        [[nodiscard]] auto IconElement() const;
        auto IconElement(winrt::Microsoft::UI::Xaml::Controls::IconElement const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IInfoBarTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IInfoBarTemplateSettingsFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettingsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IInfoBarTemplateSettingsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IInfoBarTemplateSettingsStatics
    {
        [[nodiscard]] auto IconElementProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettingsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IInfoBarTemplateSettingsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IInsertionPanel
    {
        auto GetInsertionIndexes(winrt::Windows::Foundation::Point const& position, int32_t& first, int32_t& second) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IInsertionPanel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IInsertionPanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IIsTextTrimmedChangedEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IIsTextTrimmedChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemClickEventArgs
    {
        [[nodiscard]] auto ClickedItem() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemClickEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemClickEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemCollectionTransition
    {
        [[nodiscard]] auto Operation() const;
        [[nodiscard]] auto Triggers() const;
        [[nodiscard]] auto OldBounds() const;
        [[nodiscard]] auto NewBounds() const;
        [[nodiscard]] auto HasStarted() const;
        auto Start() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransition>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemCollectionTransition<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemCollectionTransitionCompletedEventArgs
    {
        [[nodiscard]] auto Transition() const;
        [[nodiscard]] auto Element() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionCompletedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemCollectionTransitionCompletedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemCollectionTransitionProgress
    {
        [[nodiscard]] auto Transition() const;
        [[nodiscard]] auto Element() const;
        auto Complete() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProgress>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemCollectionTransitionProgress<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemCollectionTransitionProvider
    {
        auto ShouldAnimate(winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransition const& transition) const;
        auto QueueTransition(winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransition const& transition) const;
        auto TransitionCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionProvider, winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionCompletedEventArgs> const& handler) const;
        using TransitionCompleted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProvider, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProvider>::remove_TransitionCompleted>;
        [[nodiscard]] auto TransitionCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionProvider, winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionCompletedEventArgs> const& handler) const;
        auto TransitionCompleted(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProvider>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemCollectionTransitionProvider<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemCollectionTransitionProviderFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProviderFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemCollectionTransitionProviderFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemCollectionTransitionProviderOverrides
    {
        auto ShouldAnimateCore(winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransition const& transition) const;
        auto StartTransitions(param::vector<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransition> const& transitions) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProviderOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemCollectionTransitionProviderOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemContainer
    {
        [[nodiscard]] auto Child() const;
        auto Child(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto IsSelected() const;
        auto IsSelected(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemContainer>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemContainer<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemContainerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemContainerFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemContainerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemContainerGenerator
    {
        auto ItemsChanged(winrt::Microsoft::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler const& handler) const;
        using ItemsChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IItemContainerGenerator, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IItemContainerGenerator>::remove_ItemsChanged>;
        [[nodiscard]] auto ItemsChanged(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler const& handler) const;
        auto ItemsChanged(winrt::event_token const& token) const noexcept;
        auto ItemFromContainer(winrt::Microsoft::UI::Xaml::DependencyObject const& container) const;
        auto ContainerFromItem(winrt::Windows::Foundation::IInspectable const& item) const;
        auto IndexFromContainer(winrt::Microsoft::UI::Xaml::DependencyObject const& container) const;
        auto ContainerFromIndex(int32_t index) const;
        auto GetItemContainerGeneratorForPanel(winrt::Microsoft::UI::Xaml::Controls::Panel const& panel) const;
        auto StartAt(winrt::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition const& position, winrt::Microsoft::UI::Xaml::Controls::Primitives::GeneratorDirection const& direction, bool allowStartAtRealizedItem) const;
        auto Stop() const;
        auto GenerateNext(bool& isNewlyRealized) const;
        auto PrepareItemContainer(winrt::Microsoft::UI::Xaml::DependencyObject const& container) const;
        auto RemoveAll() const;
        auto Remove(winrt::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition const& position, int32_t count) const;
        auto GeneratorPositionFromIndex(int32_t itemIndex) const;
        auto IndexFromGeneratorPosition(winrt::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition const& position) const;
        auto Recycle(winrt::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition const& position, int32_t count) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemContainerGenerator>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemContainerGenerator<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemContainerMapping
    {
        auto ItemFromContainer(winrt::Microsoft::UI::Xaml::DependencyObject const& container) const;
        auto ContainerFromItem(winrt::Windows::Foundation::IInspectable const& item) const;
        auto IndexFromContainer(winrt::Microsoft::UI::Xaml::DependencyObject const& container) const;
        auto ContainerFromIndex(int32_t index) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemContainerMapping>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemContainerMapping<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemContainerStatics
    {
        [[nodiscard]] auto ChildProperty() const;
        [[nodiscard]] auto IsSelectedProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemContainerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemContainerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsControl
    {
        [[nodiscard]] auto ItemsSource() const;
        auto ItemsSource(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto Items() const;
        [[nodiscard]] auto ItemTemplate() const;
        auto ItemTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto ItemTemplateSelector() const;
        auto ItemTemplateSelector(winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& value) const;
        [[nodiscard]] auto ItemsPanel() const;
        auto ItemsPanel(winrt::Microsoft::UI::Xaml::Controls::ItemsPanelTemplate const& value) const;
        [[nodiscard]] auto DisplayMemberPath() const;
        auto DisplayMemberPath(param::hstring const& value) const;
        [[nodiscard]] auto ItemsPanelRoot() const;
        [[nodiscard]] auto ItemContainerStyle() const;
        auto ItemContainerStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto ItemContainerStyleSelector() const;
        auto ItemContainerStyleSelector(winrt::Microsoft::UI::Xaml::Controls::StyleSelector const& value) const;
        [[nodiscard]] auto ItemContainerGenerator() const;
        [[nodiscard]] auto ItemContainerTransitions() const;
        auto ItemContainerTransitions(winrt::Microsoft::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
        [[nodiscard]] auto GroupStyle() const;
        [[nodiscard]] auto GroupStyleSelector() const;
        auto GroupStyleSelector(winrt::Microsoft::UI::Xaml::Controls::GroupStyleSelector const& value) const;
        [[nodiscard]] auto IsGrouping() const;
        auto GroupHeaderContainerFromItemContainer(winrt::Microsoft::UI::Xaml::DependencyObject const& itemContainer) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsControl>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsControl<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsControlFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsControlFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsControlFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsControlOverrides
    {
        auto IsItemItsOwnContainerOverride(winrt::Windows::Foundation::IInspectable const& item) const;
        auto GetContainerForItemOverride() const;
        auto ClearContainerForItemOverride(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Windows::Foundation::IInspectable const& item) const;
        auto PrepareContainerForItemOverride(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Windows::Foundation::IInspectable const& item) const;
        auto OnItemsChanged(winrt::Windows::Foundation::IInspectable const& e) const;
        auto OnItemContainerStyleChanged(winrt::Microsoft::UI::Xaml::Style const& oldItemContainerStyle, winrt::Microsoft::UI::Xaml::Style const& newItemContainerStyle) const;
        auto OnItemContainerStyleSelectorChanged(winrt::Microsoft::UI::Xaml::Controls::StyleSelector const& oldItemContainerStyleSelector, winrt::Microsoft::UI::Xaml::Controls::StyleSelector const& newItemContainerStyleSelector) const;
        auto OnItemTemplateChanged(winrt::Microsoft::UI::Xaml::DataTemplate const& oldItemTemplate, winrt::Microsoft::UI::Xaml::DataTemplate const& newItemTemplate) const;
        auto OnItemTemplateSelectorChanged(winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& oldItemTemplateSelector, winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& newItemTemplateSelector) const;
        auto OnGroupStyleSelectorChanged(winrt::Microsoft::UI::Xaml::Controls::GroupStyleSelector const& oldGroupStyleSelector, winrt::Microsoft::UI::Xaml::Controls::GroupStyleSelector const& newGroupStyleSelector) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsControlOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsControlStatics
    {
        [[nodiscard]] auto ItemsSourceProperty() const;
        [[nodiscard]] auto ItemTemplateProperty() const;
        [[nodiscard]] auto ItemTemplateSelectorProperty() const;
        [[nodiscard]] auto ItemsPanelProperty() const;
        [[nodiscard]] auto DisplayMemberPathProperty() const;
        [[nodiscard]] auto ItemContainerStyleProperty() const;
        [[nodiscard]] auto ItemContainerStyleSelectorProperty() const;
        [[nodiscard]] auto ItemContainerTransitionsProperty() const;
        [[nodiscard]] auto GroupStyleSelectorProperty() const;
        [[nodiscard]] auto IsGroupingProperty() const;
        auto GetItemsOwner(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto ItemsControlFromItemContainer(winrt::Microsoft::UI::Xaml::DependencyObject const& container) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsControlStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsControlStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsPanelTemplate
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsPanelTemplate>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsPanelTemplate<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsPickedEventArgs
    {
        [[nodiscard]] auto AddedItems() const;
        [[nodiscard]] auto RemovedItems() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsPickedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsPickedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsPresenter
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto HeaderTransitions() const;
        auto HeaderTransitions(winrt::Microsoft::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
        [[nodiscard]] auto Footer() const;
        auto Footer(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto FooterTemplate() const;
        auto FooterTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto FooterTransitions() const;
        auto FooterTransitions(winrt::Microsoft::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsPresenterStatics
    {
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto HeaderTransitionsProperty() const;
        [[nodiscard]] auto FooterProperty() const;
        [[nodiscard]] auto FooterTemplateProperty() const;
        [[nodiscard]] auto FooterTransitionsProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsPresenterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsRepeater
    {
        [[nodiscard]] auto ItemsSource() const;
        auto ItemsSource(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto ItemsSourceView() const;
        [[nodiscard]] auto ItemTemplate() const;
        auto ItemTemplate(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto Layout() const;
        auto Layout(winrt::Microsoft::UI::Xaml::Controls::Layout const& value) const;
        [[nodiscard]] auto HorizontalCacheLength() const;
        auto HorizontalCacheLength(double value) const;
        [[nodiscard]] auto VerticalCacheLength() const;
        auto VerticalCacheLength(double value) const;
        [[nodiscard]] auto Background() const;
        auto Background(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        auto GetElementIndex(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto TryGetElement(int32_t index) const;
        auto GetOrCreateElement(int32_t index) const;
        auto ElementPrepared(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeater, winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementPreparedEventArgs> const& handler) const;
        using ElementPrepared_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater>::remove_ElementPrepared>;
        [[nodiscard]] auto ElementPrepared(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeater, winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementPreparedEventArgs> const& handler) const;
        auto ElementPrepared(winrt::event_token const& token) const noexcept;
        auto ElementClearing(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeater, winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementClearingEventArgs> const& handler) const;
        using ElementClearing_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater>::remove_ElementClearing>;
        [[nodiscard]] auto ElementClearing(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeater, winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementClearingEventArgs> const& handler) const;
        auto ElementClearing(winrt::event_token const& token) const noexcept;
        auto ElementIndexChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeater, winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementIndexChangedEventArgs> const& handler) const;
        using ElementIndexChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater>::remove_ElementIndexChanged>;
        [[nodiscard]] auto ElementIndexChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeater, winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementIndexChangedEventArgs> const& handler) const;
        auto ElementIndexChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsRepeater2
    {
        [[nodiscard]] auto ItemTransitionProvider() const;
        auto ItemTransitionProvider(winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionProvider const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsRepeater2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementClearingEventArgs
    {
        [[nodiscard]] auto Element() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementClearingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementIndexChangedEventArgs
    {
        [[nodiscard]] auto Element() const;
        [[nodiscard]] auto OldIndex() const;
        [[nodiscard]] auto NewIndex() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementIndexChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementPreparedEventArgs
    {
        [[nodiscard]] auto Element() const;
        [[nodiscard]] auto Index() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementPreparedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterScrollHost
    {
        [[nodiscard]] auto ScrollViewer() const;
        auto ScrollViewer(winrt::Microsoft::UI::Xaml::Controls::ScrollViewer const& value) const;
        [[nodiscard]] auto CurrentAnchor() const;
        [[nodiscard]] auto HorizontalAnchorRatio() const;
        auto HorizontalAnchorRatio(double value) const;
        [[nodiscard]] auto VerticalAnchorRatio() const;
        auto VerticalAnchorRatio(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterScrollHost>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterScrollHost<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterStatics
    {
        [[nodiscard]] auto ItemsSourceProperty() const;
        [[nodiscard]] auto ItemTemplateProperty() const;
        [[nodiscard]] auto LayoutProperty() const;
        [[nodiscard]] auto HorizontalCacheLengthProperty() const;
        [[nodiscard]] auto VerticalCacheLengthProperty() const;
        [[nodiscard]] auto BackgroundProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterStatics2
    {
        [[nodiscard]] auto ItemTransitionProviderProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsSourceView
    {
        [[nodiscard]] auto Count() const;
        auto GetAt(int32_t index) const;
        [[nodiscard]] auto HasKeyIndexMapping() const;
        auto KeyFromIndex(int32_t index) const;
        auto IndexFromKey(param::hstring const& key) const;
        auto IndexOf(winrt::Windows::Foundation::IInspectable const& item) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsSourceView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsSourceView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsSourceViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& source, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsSourceViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsSourceViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsStackPanel
    {
        [[nodiscard]] auto GroupPadding() const;
        auto GroupPadding(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Microsoft::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] auto FirstCacheIndex() const;
        [[nodiscard]] auto FirstVisibleIndex() const;
        [[nodiscard]] auto LastVisibleIndex() const;
        [[nodiscard]] auto LastCacheIndex() const;
        [[nodiscard]] auto ScrollingDirection() const;
        [[nodiscard]] auto GroupHeaderPlacement() const;
        auto GroupHeaderPlacement(winrt::Microsoft::UI::Xaml::Controls::Primitives::GroupHeaderPlacement const& value) const;
        [[nodiscard]] auto ItemsUpdatingScrollMode() const;
        auto ItemsUpdatingScrollMode(winrt::Microsoft::UI::Xaml::Controls::ItemsUpdatingScrollMode const& value) const;
        [[nodiscard]] auto CacheLength() const;
        auto CacheLength(double value) const;
        [[nodiscard]] auto AreStickyGroupHeadersEnabled() const;
        auto AreStickyGroupHeadersEnabled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsStackPanel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsStackPanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsStackPanelStatics
    {
        [[nodiscard]] auto GroupPaddingProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto GroupHeaderPlacementProperty() const;
        [[nodiscard]] auto CacheLengthProperty() const;
        [[nodiscard]] auto AreStickyGroupHeadersEnabledProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsStackPanelStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsStackPanelStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsView
    {
        [[nodiscard]] auto ItemsSource() const;
        auto ItemsSource(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto ScrollView() const;
        [[nodiscard]] auto VerticalScrollController() const;
        auto VerticalScrollController(winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController const& value) const;
        [[nodiscard]] auto ItemTemplate() const;
        auto ItemTemplate(winrt::Microsoft::UI::Xaml::IElementFactory const& value) const;
        [[nodiscard]] auto Layout() const;
        auto Layout(winrt::Microsoft::UI::Xaml::Controls::Layout const& value) const;
        [[nodiscard]] auto IsItemInvokedEnabled() const;
        auto IsItemInvokedEnabled(bool value) const;
        [[nodiscard]] auto SelectionMode() const;
        auto SelectionMode(winrt::Microsoft::UI::Xaml::Controls::ItemsViewSelectionMode const& value) const;
        [[nodiscard]] auto ItemTransitionProvider() const;
        auto ItemTransitionProvider(winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionProvider const& value) const;
        [[nodiscard]] auto CurrentItemIndex() const;
        [[nodiscard]] auto SelectedItem() const;
        [[nodiscard]] auto SelectedItems() const;
        auto TryGetItemIndex(double horizontalViewportRatio, double verticalViewportRatio, int32_t& index) const;
        auto StartBringItemIntoView(int32_t index, winrt::Microsoft::UI::Xaml::BringIntoViewOptions const& options) const;
        auto Select(int32_t itemIndex) const;
        auto Deselect(int32_t itemIndex) const;
        auto IsSelected(int32_t itemIndex) const;
        auto SelectAll() const;
        auto DeselectAll() const;
        auto InvertSelection() const;
        auto ItemInvoked(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ItemsView, winrt::Microsoft::UI::Xaml::Controls::ItemsViewItemInvokedEventArgs> const& handler) const;
        using ItemInvoked_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IItemsView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IItemsView>::remove_ItemInvoked>;
        [[nodiscard]] auto ItemInvoked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ItemsView, winrt::Microsoft::UI::Xaml::Controls::ItemsViewItemInvokedEventArgs> const& handler) const;
        auto ItemInvoked(winrt::event_token const& token) const noexcept;
        auto SelectionChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ItemsView, winrt::Microsoft::UI::Xaml::Controls::ItemsViewSelectionChangedEventArgs> const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IItemsView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IItemsView>::remove_SelectionChanged>;
        [[nodiscard]] auto SelectionChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ItemsView, winrt::Microsoft::UI::Xaml::Controls::ItemsViewSelectionChangedEventArgs> const& handler) const;
        auto SelectionChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsViewItemInvokedEventArgs
    {
        [[nodiscard]] auto InvokedItem() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsViewItemInvokedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsViewItemInvokedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsViewSelectionChangedEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsViewSelectionChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsViewSelectionChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsViewStatics
    {
        [[nodiscard]] auto IsItemInvokedEnabledProperty() const;
        [[nodiscard]] auto ItemsSourceProperty() const;
        [[nodiscard]] auto ItemTemplateProperty() const;
        [[nodiscard]] auto LayoutProperty() const;
        [[nodiscard]] auto SelectionModeProperty() const;
        [[nodiscard]] auto ItemTransitionProviderProperty() const;
        [[nodiscard]] auto CurrentItemIndexProperty() const;
        [[nodiscard]] auto SelectedItemProperty() const;
        [[nodiscard]] auto ScrollViewProperty() const;
        [[nodiscard]] auto VerticalScrollControllerProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsViewStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsViewStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsWrapGrid
    {
        [[nodiscard]] auto GroupPadding() const;
        auto GroupPadding(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Microsoft::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] auto MaximumRowsOrColumns() const;
        auto MaximumRowsOrColumns(int32_t value) const;
        [[nodiscard]] auto ItemWidth() const;
        auto ItemWidth(double value) const;
        [[nodiscard]] auto ItemHeight() const;
        auto ItemHeight(double value) const;
        [[nodiscard]] auto FirstCacheIndex() const;
        [[nodiscard]] auto FirstVisibleIndex() const;
        [[nodiscard]] auto LastVisibleIndex() const;
        [[nodiscard]] auto LastCacheIndex() const;
        [[nodiscard]] auto ScrollingDirection() const;
        [[nodiscard]] auto GroupHeaderPlacement() const;
        auto GroupHeaderPlacement(winrt::Microsoft::UI::Xaml::Controls::Primitives::GroupHeaderPlacement const& value) const;
        [[nodiscard]] auto CacheLength() const;
        auto CacheLength(double value) const;
        [[nodiscard]] auto AreStickyGroupHeadersEnabled() const;
        auto AreStickyGroupHeadersEnabled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsWrapGrid>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsWrapGrid<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsWrapGridStatics
    {
        [[nodiscard]] auto GroupPaddingProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto MaximumRowsOrColumnsProperty() const;
        [[nodiscard]] auto ItemWidthProperty() const;
        [[nodiscard]] auto ItemHeightProperty() const;
        [[nodiscard]] auto GroupHeaderPlacementProperty() const;
        [[nodiscard]] auto CacheLengthProperty() const;
        [[nodiscard]] auto AreStickyGroupHeadersEnabledProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IItemsWrapGridStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsWrapGridStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IKeyIndexMapping
    {
        auto KeyFromIndex(int32_t index) const;
        auto IndexFromKey(param::hstring const& key) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IKeyIndexMapping>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IKeyIndexMapping<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILayout
    {
        auto InitializeForContext(winrt::Microsoft::UI::Xaml::Controls::LayoutContext const& context) const;
        auto UninitializeForContext(winrt::Microsoft::UI::Xaml::Controls::LayoutContext const& context) const;
        auto Measure(winrt::Microsoft::UI::Xaml::Controls::LayoutContext const& context, winrt::Windows::Foundation::Size const& availableSize) const;
        auto Arrange(winrt::Microsoft::UI::Xaml::Controls::LayoutContext const& context, winrt::Windows::Foundation::Size const& finalSize) const;
        auto MeasureInvalidated(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Layout, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using MeasureInvalidated_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ILayout, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ILayout>::remove_MeasureInvalidated>;
        [[nodiscard]] auto MeasureInvalidated(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Layout, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto MeasureInvalidated(winrt::event_token const& token) const noexcept;
        auto ArrangeInvalidated(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Layout, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ArrangeInvalidated_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ILayout, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ILayout>::remove_ArrangeInvalidated>;
        [[nodiscard]] auto ArrangeInvalidated(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Layout, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto ArrangeInvalidated(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ILayout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILayout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILayout2
    {
        [[nodiscard]] auto IndexBasedLayoutOrientation() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ILayout2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILayout2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILayoutContext
    {
        [[nodiscard]] auto LayoutState() const;
        auto LayoutState(winrt::Windows::Foundation::IInspectable const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ILayoutContext>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILayoutContext<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILayoutContextFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ILayoutContextFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILayoutContextFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILayoutContextOverrides
    {
        [[nodiscard]] auto LayoutStateCore() const;
        auto LayoutStateCore(winrt::Windows::Foundation::IInspectable const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ILayoutContextOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILayoutContextOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILayoutFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ILayoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILayoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILayoutOverrides
    {
        auto CreateDefaultItemTransitionProvider() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ILayoutOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILayoutOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILayoutProtected
    {
        auto InvalidateMeasure() const;
        auto InvalidateArrange() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILayoutProtected<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILayoutProtected2
    {
        auto SetIndexBasedLayoutOrientation(winrt::Microsoft::UI::Xaml::Controls::IndexBasedLayoutOrientation const& orientation) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILayoutProtected2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILinedFlowLayout
    {
        auto ItemsInfoRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayout, winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayoutItemsInfoRequestedEventArgs> const& handler) const;
        using ItemsInfoRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayout, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayout>::remove_ItemsInfoRequested>;
        [[nodiscard]] auto ItemsInfoRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayout, winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayoutItemsInfoRequestedEventArgs> const& handler) const;
        auto ItemsInfoRequested(winrt::event_token const& token) const noexcept;
        auto ItemsUnlocked(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayout, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ItemsUnlocked_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayout, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayout>::remove_ItemsUnlocked>;
        [[nodiscard]] auto ItemsUnlocked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayout, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto ItemsUnlocked(winrt::event_token const& token) const noexcept;
        [[nodiscard]] auto ItemsJustification() const;
        auto ItemsJustification(winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayoutItemsJustification const& value) const;
        [[nodiscard]] auto ItemsStretch() const;
        auto ItemsStretch(winrt::Microsoft::UI::Xaml::Controls::LinedFlowLayoutItemsStretch const& value) const;
        [[nodiscard]] auto MinItemSpacing() const;
        auto MinItemSpacing(double value) const;
        [[nodiscard]] auto LineSpacing() const;
        auto LineSpacing(double value) const;
        [[nodiscard]] auto LineHeight() const;
        auto LineHeight(double value) const;
        [[nodiscard]] auto ActualLineHeight() const;
        [[nodiscard]] auto RequestedRangeStartIndex() const;
        [[nodiscard]] auto RequestedRangeLength() const;
        auto InvalidateItemsInfo() const;
        auto LockItemToLine(int32_t itemIndex) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILinedFlowLayout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILinedFlowLayoutFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILinedFlowLayoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILinedFlowLayoutItemCollectionTransitionProvider
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemCollectionTransitionProvider>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILinedFlowLayoutItemCollectionTransitionProvider<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILinedFlowLayoutItemCollectionTransitionProviderFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemCollectionTransitionProviderFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILinedFlowLayoutItemCollectionTransitionProviderFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILinedFlowLayoutItemsInfoRequestedEventArgs
    {
        [[nodiscard]] auto ItemsRangeStartIndex() const;
        auto ItemsRangeStartIndex(int32_t value) const;
        [[nodiscard]] auto ItemsRangeRequestedLength() const;
        [[nodiscard]] auto MinWidth() const;
        auto MinWidth(double value) const;
        [[nodiscard]] auto MaxWidth() const;
        auto MaxWidth(double value) const;
        auto SetDesiredAspectRatios(array_view<double const> values) const;
        auto SetMinWidths(array_view<double const> values) const;
        auto SetMaxWidths(array_view<double const> values) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemsInfoRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILinedFlowLayoutItemsInfoRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILinedFlowLayoutStatics
    {
        [[nodiscard]] auto ItemsJustificationProperty() const;
        [[nodiscard]] auto ItemsStretchProperty() const;
        [[nodiscard]] auto MinItemSpacingProperty() const;
        [[nodiscard]] auto LineSpacingProperty() const;
        [[nodiscard]] auto LineHeightProperty() const;
        [[nodiscard]] auto ActualLineHeightProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILinedFlowLayoutStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListBox
    {
        [[nodiscard]] auto SelectedItems() const;
        [[nodiscard]] auto SelectionMode() const;
        auto SelectionMode(winrt::Microsoft::UI::Xaml::Controls::SelectionMode const& value) const;
        [[nodiscard]] auto SingleSelectionFollowsFocus() const;
        auto SingleSelectionFollowsFocus(bool value) const;
        auto ScrollIntoView(winrt::Windows::Foundation::IInspectable const& item) const;
        auto SelectAll() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListBox>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListBox<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListBoxFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListBoxFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListBoxFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListBoxItem
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListBoxItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListBoxItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListBoxItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListBoxItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListBoxItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListBoxStatics
    {
        [[nodiscard]] auto SelectionModeProperty() const;
        [[nodiscard]] auto SingleSelectionFollowsFocusProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListBoxStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListBoxStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListPickerFlyout
    {
        [[nodiscard]] auto ItemsSource() const;
        auto ItemsSource(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto ItemTemplate() const;
        auto ItemTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto DisplayMemberPath() const;
        auto DisplayMemberPath(param::hstring const& value) const;
        [[nodiscard]] auto SelectionMode() const;
        auto SelectionMode(winrt::Microsoft::UI::Xaml::Controls::ListPickerFlyoutSelectionMode const& value) const;
        [[nodiscard]] auto SelectedIndex() const;
        auto SelectedIndex(int32_t value) const;
        [[nodiscard]] auto SelectedItem() const;
        auto SelectedItem(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto SelectedValue() const;
        auto SelectedValue(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto SelectedValuePath() const;
        auto SelectedValuePath(param::hstring const& value) const;
        [[nodiscard]] auto SelectedItems() const;
        auto ItemsPicked(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ListPickerFlyout, winrt::Microsoft::UI::Xaml::Controls::ItemsPickedEventArgs> const& handler) const;
        using ItemsPicked_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyout, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyout>::remove_ItemsPicked>;
        [[nodiscard]] auto ItemsPicked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ListPickerFlyout, winrt::Microsoft::UI::Xaml::Controls::ItemsPickedEventArgs> const& handler) const;
        auto ItemsPicked(winrt::event_token const& token) const noexcept;
        auto ShowAtAsync(winrt::Microsoft::UI::Xaml::FrameworkElement const& target) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListPickerFlyout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListPickerFlyoutPresenter
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyoutPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListPickerFlyoutPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListPickerFlyoutStatics
    {
        [[nodiscard]] auto ItemsSourceProperty() const;
        [[nodiscard]] auto ItemTemplateProperty() const;
        [[nodiscard]] auto DisplayMemberPathProperty() const;
        [[nodiscard]] auto SelectionModeProperty() const;
        [[nodiscard]] auto SelectedIndexProperty() const;
        [[nodiscard]] auto SelectedItemProperty() const;
        [[nodiscard]] auto SelectedValueProperty() const;
        [[nodiscard]] auto SelectedValuePathProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyoutStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListPickerFlyoutStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListView
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListViewBase
    {
        [[nodiscard]] auto SelectedItems() const;
        [[nodiscard]] auto SelectionMode() const;
        auto SelectionMode(winrt::Microsoft::UI::Xaml::Controls::ListViewSelectionMode const& value) const;
        [[nodiscard]] auto IsSwipeEnabled() const;
        auto IsSwipeEnabled(bool value) const;
        [[nodiscard]] auto CanDragItems() const;
        auto CanDragItems(bool value) const;
        [[nodiscard]] auto CanReorderItems() const;
        auto CanReorderItems(bool value) const;
        [[nodiscard]] auto IsItemClickEnabled() const;
        auto IsItemClickEnabled(bool value) const;
        [[nodiscard]] auto DataFetchSize() const;
        auto DataFetchSize(double value) const;
        [[nodiscard]] auto IncrementalLoadingThreshold() const;
        auto IncrementalLoadingThreshold(double value) const;
        [[nodiscard]] auto IncrementalLoadingTrigger() const;
        auto IncrementalLoadingTrigger(winrt::Microsoft::UI::Xaml::Controls::IncrementalLoadingTrigger const& value) const;
        [[nodiscard]] auto ShowsScrollingPlaceholders() const;
        auto ShowsScrollingPlaceholders(bool value) const;
        [[nodiscard]] auto ReorderMode() const;
        auto ReorderMode(winrt::Microsoft::UI::Xaml::Controls::ListViewReorderMode const& value) const;
        [[nodiscard]] auto SelectedRanges() const;
        [[nodiscard]] auto IsMultiSelectCheckBoxEnabled() const;
        auto IsMultiSelectCheckBoxEnabled(bool value) const;
        [[nodiscard]] auto SingleSelectionFollowsFocus() const;
        auto SingleSelectionFollowsFocus(bool value) const;
        auto ItemClick(winrt::Microsoft::UI::Xaml::Controls::ItemClickEventHandler const& handler) const;
        using ItemClick_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IListViewBase, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IListViewBase>::remove_ItemClick>;
        [[nodiscard]] auto ItemClick(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::ItemClickEventHandler const& handler) const;
        auto ItemClick(winrt::event_token const& token) const noexcept;
        auto DragItemsStarting(winrt::Microsoft::UI::Xaml::Controls::DragItemsStartingEventHandler const& handler) const;
        using DragItemsStarting_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IListViewBase, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IListViewBase>::remove_DragItemsStarting>;
        [[nodiscard]] auto DragItemsStarting(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::DragItemsStartingEventHandler const& handler) const;
        auto DragItemsStarting(winrt::event_token const& token) const noexcept;
        auto DragItemsCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ListViewBase, winrt::Microsoft::UI::Xaml::Controls::DragItemsCompletedEventArgs> const& handler) const;
        using DragItemsCompleted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IListViewBase, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IListViewBase>::remove_DragItemsCompleted>;
        [[nodiscard]] auto DragItemsCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ListViewBase, winrt::Microsoft::UI::Xaml::Controls::DragItemsCompletedEventArgs> const& handler) const;
        auto DragItemsCompleted(winrt::event_token const& token) const noexcept;
        auto ContainerContentChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ListViewBase, winrt::Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs> const& handler) const;
        using ContainerContentChanging_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IListViewBase, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IListViewBase>::remove_ContainerContentChanging>;
        [[nodiscard]] auto ContainerContentChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ListViewBase, winrt::Microsoft::UI::Xaml::Controls::ContainerContentChangingEventArgs> const& handler) const;
        auto ContainerContentChanging(winrt::event_token const& token) const noexcept;
        auto ChoosingItemContainer(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ListViewBase, winrt::Microsoft::UI::Xaml::Controls::ChoosingItemContainerEventArgs> const& handler) const;
        using ChoosingItemContainer_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IListViewBase, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IListViewBase>::remove_ChoosingItemContainer>;
        [[nodiscard]] auto ChoosingItemContainer(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ListViewBase, winrt::Microsoft::UI::Xaml::Controls::ChoosingItemContainerEventArgs> const& handler) const;
        auto ChoosingItemContainer(winrt::event_token const& token) const noexcept;
        auto ChoosingGroupHeaderContainer(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ListViewBase, winrt::Microsoft::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs> const& handler) const;
        using ChoosingGroupHeaderContainer_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IListViewBase, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IListViewBase>::remove_ChoosingGroupHeaderContainer>;
        [[nodiscard]] auto ChoosingGroupHeaderContainer(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ListViewBase, winrt::Microsoft::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs> const& handler) const;
        auto ChoosingGroupHeaderContainer(winrt::event_token const& token) const noexcept;
        auto ScrollIntoView(winrt::Windows::Foundation::IInspectable const& item) const;
        auto SelectAll() const;
        auto LoadMoreItemsAsync() const;
        auto ScrollIntoView(winrt::Windows::Foundation::IInspectable const& item, winrt::Microsoft::UI::Xaml::Controls::ScrollIntoViewAlignment const& alignment) const;
        auto SetDesiredContainerUpdateDuration(winrt::Windows::Foundation::TimeSpan const& duration) const;
        auto SelectRange(winrt::Microsoft::UI::Xaml::Data::ItemIndexRange const& itemIndexRange) const;
        auto DeselectRange(winrt::Microsoft::UI::Xaml::Data::ItemIndexRange const& itemIndexRange) const;
        auto IsDragSource() const;
        auto TryStartConnectedAnimationAsync(winrt::Microsoft::UI::Xaml::Media::Animation::ConnectedAnimation const& animation, winrt::Windows::Foundation::IInspectable const& item, param::hstring const& elementName) const;
        auto PrepareConnectedAnimation(param::hstring const& key, winrt::Windows::Foundation::IInspectable const& item, param::hstring const& elementName) const;
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto HeaderTransitions() const;
        auto HeaderTransitions(winrt::Microsoft::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
        [[nodiscard]] auto Footer() const;
        auto Footer(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto FooterTemplate() const;
        auto FooterTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto FooterTransitions() const;
        auto FooterTransitions(winrt::Microsoft::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListViewBase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListViewBase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListViewBaseFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListViewBaseFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListViewBaseHeaderItem
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListViewBaseHeaderItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListViewBaseHeaderItemFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListViewBaseHeaderItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListViewBaseStatics
    {
        [[nodiscard]] auto SelectionModeProperty() const;
        [[nodiscard]] auto IsSwipeEnabledProperty() const;
        [[nodiscard]] auto CanDragItemsProperty() const;
        [[nodiscard]] auto CanReorderItemsProperty() const;
        [[nodiscard]] auto IsItemClickEnabledProperty() const;
        [[nodiscard]] auto DataFetchSizeProperty() const;
        [[nodiscard]] auto IncrementalLoadingThresholdProperty() const;
        [[nodiscard]] auto IncrementalLoadingTriggerProperty() const;
        [[nodiscard]] auto ShowsScrollingPlaceholdersProperty() const;
        [[nodiscard]] auto ReorderModeProperty() const;
        [[nodiscard]] auto IsMultiSelectCheckBoxEnabledProperty() const;
        [[nodiscard]] auto SingleSelectionFollowsFocusProperty() const;
        [[nodiscard]] auto SemanticZoomOwnerProperty() const;
        [[nodiscard]] auto IsActiveViewProperty() const;
        [[nodiscard]] auto IsZoomedInViewProperty() const;
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto HeaderTransitionsProperty() const;
        [[nodiscard]] auto FooterProperty() const;
        [[nodiscard]] auto FooterTemplateProperty() const;
        [[nodiscard]] auto FooterTransitionsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListViewBaseStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListViewBaseStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListViewHeaderItem
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListViewHeaderItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListViewHeaderItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListViewHeaderItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListViewHeaderItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListViewHeaderItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListViewItem
    {
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListViewItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListViewItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListViewItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListViewItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListViewItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListViewPersistenceHelper
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListViewPersistenceHelper>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListViewPersistenceHelper<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IListViewPersistenceHelperStatics
    {
        auto GetRelativeScrollPosition(winrt::Microsoft::UI::Xaml::Controls::ListViewBase const& listViewBase, winrt::Microsoft::UI::Xaml::Controls::ListViewItemToKeyHandler const& itemToKeyHandler) const;
        auto SetRelativeScrollPositionAsync(winrt::Microsoft::UI::Xaml::Controls::ListViewBase const& listViewBase, param::hstring const& relativeScrollPosition, winrt::Microsoft::UI::Xaml::Controls::ListViewKeyToItemHandler const& keyToItemHandler) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IListViewPersistenceHelperStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IListViewPersistenceHelperStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMapControl
    {
        [[nodiscard]] auto MapServiceToken() const;
        auto MapServiceToken(param::hstring const& value) const;
        [[nodiscard]] auto Center() const;
        auto Center(winrt::Windows::Devices::Geolocation::Geopoint const& value) const;
        [[nodiscard]] auto Layers() const;
        auto Layers(param::vector<winrt::Microsoft::UI::Xaml::Controls::MapLayer> const& value) const;
        [[nodiscard]] auto ZoomLevel() const;
        auto ZoomLevel(double value) const;
        [[nodiscard]] auto InteractiveControlsVisible() const;
        auto InteractiveControlsVisible(bool value) const;
        auto MapElementClick(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::MapControl, winrt::Microsoft::UI::Xaml::Controls::MapElementClickEventArgs> const& handler) const;
        using MapElementClick_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IMapControl, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IMapControl>::remove_MapElementClick>;
        [[nodiscard]] auto MapElementClick(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::MapControl, winrt::Microsoft::UI::Xaml::Controls::MapElementClickEventArgs> const& handler) const;
        auto MapElementClick(winrt::event_token const& token) const noexcept;
        auto MapServiceErrorOccurred(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::MapControl, winrt::Microsoft::UI::Xaml::Controls::MapControlMapServiceErrorOccurredEventArgs> const& handler) const;
        using MapServiceErrorOccurred_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IMapControl, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IMapControl>::remove_MapServiceErrorOccurred>;
        [[nodiscard]] auto MapServiceErrorOccurred(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::MapControl, winrt::Microsoft::UI::Xaml::Controls::MapControlMapServiceErrorOccurredEventArgs> const& handler) const;
        auto MapServiceErrorOccurred(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMapControl>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMapControl<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMapControlFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMapControlFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMapControlFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMapControlMapServiceErrorOccurredEventArgs
    {
        [[nodiscard]] auto DiagnosticMessage() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMapControlMapServiceErrorOccurredEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMapControlMapServiceErrorOccurredEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMapControlStatics
    {
        [[nodiscard]] auto LayersProperty() const;
        [[nodiscard]] auto MapServiceTokenProperty() const;
        [[nodiscard]] auto CenterProperty() const;
        [[nodiscard]] auto ZoomLevelProperty() const;
        [[nodiscard]] auto InteractiveControlsVisibleProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMapControlStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMapControlStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMapElement
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMapElement>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMapElement<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMapElementClickEventArgs
    {
        [[nodiscard]] auto Location() const;
        [[nodiscard]] auto Element() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMapElementClickEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMapElementClickEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMapElementFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMapElementFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMapElementFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMapElementsLayer
    {
        [[nodiscard]] auto MapElements() const;
        auto MapElements(param::vector<winrt::Microsoft::UI::Xaml::Controls::MapElement> const& value) const;
        auto MapElementClick(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::MapElementsLayer, winrt::Microsoft::UI::Xaml::Controls::MapElementClickEventArgs> const& handler) const;
        using MapElementClick_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayer, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayer>::remove_MapElementClick>;
        [[nodiscard]] auto MapElementClick(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::MapElementsLayer, winrt::Microsoft::UI::Xaml::Controls::MapElementClickEventArgs> const& handler) const;
        auto MapElementClick(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayer>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMapElementsLayer<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMapElementsLayerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayerFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMapElementsLayerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMapElementsLayerStatics
    {
        [[nodiscard]] auto MapElementsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMapElementsLayerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMapElementsLayerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMapIcon
    {
        [[nodiscard]] auto Location() const;
        auto Location(winrt::Windows::Devices::Geolocation::Geopoint const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMapIcon>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMapIcon<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMapIconFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMapIconFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMapIconFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMapIconStatics
    {
        [[nodiscard]] auto LocationProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMapIconStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMapIconStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMapLayer
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMapLayer>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMapLayer<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMapLayerFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMapLayerFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMapLayerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMediaPlayerElement
    {
        [[nodiscard]] auto Source() const;
        auto Source(winrt::Windows::Media::Playback::IMediaPlaybackSource const& value) const;
        [[nodiscard]] auto TransportControls() const;
        auto TransportControls(winrt::Microsoft::UI::Xaml::Controls::MediaTransportControls const& value) const;
        [[nodiscard]] auto AreTransportControlsEnabled() const;
        auto AreTransportControlsEnabled(bool value) const;
        [[nodiscard]] auto PosterSource() const;
        auto PosterSource(winrt::Microsoft::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto Stretch() const;
        auto Stretch(winrt::Microsoft::UI::Xaml::Media::Stretch const& value) const;
        [[nodiscard]] auto AutoPlay() const;
        auto AutoPlay(bool value) const;
        [[nodiscard]] auto IsFullWindow() const;
        auto IsFullWindow(bool value) const;
        [[nodiscard]] auto MediaPlayer() const;
        auto SetMediaPlayer(winrt::Windows::Media::Playback::MediaPlayer const& mediaPlayer) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElement>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMediaPlayerElement<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMediaPlayerElementFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElementFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMediaPlayerElementFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMediaPlayerElementStatics
    {
        [[nodiscard]] auto SourceProperty() const;
        [[nodiscard]] auto AreTransportControlsEnabledProperty() const;
        [[nodiscard]] auto PosterSourceProperty() const;
        [[nodiscard]] auto StretchProperty() const;
        [[nodiscard]] auto AutoPlayProperty() const;
        [[nodiscard]] auto IsFullWindowProperty() const;
        [[nodiscard]] auto MediaPlayerProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElementStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMediaPlayerElementStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMediaPlayerPresenter
    {
        [[nodiscard]] auto MediaPlayer() const;
        auto MediaPlayer(winrt::Windows::Media::Playback::MediaPlayer const& value) const;
        [[nodiscard]] auto Stretch() const;
        auto Stretch(winrt::Microsoft::UI::Xaml::Media::Stretch const& value) const;
        [[nodiscard]] auto IsFullWindow() const;
        auto IsFullWindow(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMediaPlayerPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMediaPlayerPresenterFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMediaPlayerPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMediaPlayerPresenterStatics
    {
        [[nodiscard]] auto MediaPlayerProperty() const;
        [[nodiscard]] auto StretchProperty() const;
        [[nodiscard]] auto IsFullWindowProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMediaPlayerPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMediaTransportControls
    {
        [[nodiscard]] auto IsZoomButtonVisible() const;
        auto IsZoomButtonVisible(bool value) const;
        [[nodiscard]] auto IsZoomEnabled() const;
        auto IsZoomEnabled(bool value) const;
        [[nodiscard]] auto IsFastForwardButtonVisible() const;
        auto IsFastForwardButtonVisible(bool value) const;
        [[nodiscard]] auto IsFastForwardEnabled() const;
        auto IsFastForwardEnabled(bool value) const;
        [[nodiscard]] auto IsFastRewindButtonVisible() const;
        auto IsFastRewindButtonVisible(bool value) const;
        [[nodiscard]] auto IsFastRewindEnabled() const;
        auto IsFastRewindEnabled(bool value) const;
        [[nodiscard]] auto IsStopButtonVisible() const;
        auto IsStopButtonVisible(bool value) const;
        [[nodiscard]] auto IsStopEnabled() const;
        auto IsStopEnabled(bool value) const;
        [[nodiscard]] auto IsVolumeButtonVisible() const;
        auto IsVolumeButtonVisible(bool value) const;
        [[nodiscard]] auto IsVolumeEnabled() const;
        auto IsVolumeEnabled(bool value) const;
        [[nodiscard]] auto IsPlaybackRateButtonVisible() const;
        auto IsPlaybackRateButtonVisible(bool value) const;
        [[nodiscard]] auto IsPlaybackRateEnabled() const;
        auto IsPlaybackRateEnabled(bool value) const;
        [[nodiscard]] auto IsSeekBarVisible() const;
        auto IsSeekBarVisible(bool value) const;
        [[nodiscard]] auto IsSeekEnabled() const;
        auto IsSeekEnabled(bool value) const;
        [[nodiscard]] auto IsCompact() const;
        auto IsCompact(bool value) const;
        [[nodiscard]] auto IsSkipForwardButtonVisible() const;
        auto IsSkipForwardButtonVisible(bool value) const;
        [[nodiscard]] auto IsSkipForwardEnabled() const;
        auto IsSkipForwardEnabled(bool value) const;
        [[nodiscard]] auto IsSkipBackwardButtonVisible() const;
        auto IsSkipBackwardButtonVisible(bool value) const;
        [[nodiscard]] auto IsSkipBackwardEnabled() const;
        auto IsSkipBackwardEnabled(bool value) const;
        [[nodiscard]] auto IsNextTrackButtonVisible() const;
        auto IsNextTrackButtonVisible(bool value) const;
        [[nodiscard]] auto IsPreviousTrackButtonVisible() const;
        auto IsPreviousTrackButtonVisible(bool value) const;
        [[nodiscard]] auto FastPlayFallbackBehaviour() const;
        auto FastPlayFallbackBehaviour(winrt::Microsoft::UI::Xaml::Media::FastPlayFallbackBehaviour const& value) const;
        [[nodiscard]] auto ShowAndHideAutomatically() const;
        auto ShowAndHideAutomatically(bool value) const;
        [[nodiscard]] auto IsRepeatEnabled() const;
        auto IsRepeatEnabled(bool value) const;
        [[nodiscard]] auto IsRepeatButtonVisible() const;
        auto IsRepeatButtonVisible(bool value) const;
        auto ThumbnailRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::MediaTransportControls, winrt::Microsoft::UI::Xaml::Media::MediaTransportControlsThumbnailRequestedEventArgs> const& handler) const;
        using ThumbnailRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControls, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControls>::remove_ThumbnailRequested>;
        [[nodiscard]] auto ThumbnailRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::MediaTransportControls, winrt::Microsoft::UI::Xaml::Media::MediaTransportControlsThumbnailRequestedEventArgs> const& handler) const;
        auto ThumbnailRequested(winrt::event_token const& token) const noexcept;
        auto Show() const;
        auto Hide() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControls>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMediaTransportControls<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMediaTransportControlsFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMediaTransportControlsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMediaTransportControlsHelper
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsHelper>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMediaTransportControlsHelper<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMediaTransportControlsHelperStatics
    {
        [[nodiscard]] auto DropoutOrderProperty() const;
        auto GetDropoutOrder(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetDropoutOrder(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IReference<int32_t> const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsHelperStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMediaTransportControlsHelperStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMediaTransportControlsStatics
    {
        [[nodiscard]] auto IsZoomButtonVisibleProperty() const;
        [[nodiscard]] auto IsZoomEnabledProperty() const;
        [[nodiscard]] auto IsFastForwardButtonVisibleProperty() const;
        [[nodiscard]] auto IsFastForwardEnabledProperty() const;
        [[nodiscard]] auto IsFastRewindButtonVisibleProperty() const;
        [[nodiscard]] auto IsFastRewindEnabledProperty() const;
        [[nodiscard]] auto IsStopButtonVisibleProperty() const;
        [[nodiscard]] auto IsStopEnabledProperty() const;
        [[nodiscard]] auto IsVolumeButtonVisibleProperty() const;
        [[nodiscard]] auto IsVolumeEnabledProperty() const;
        [[nodiscard]] auto IsPlaybackRateButtonVisibleProperty() const;
        [[nodiscard]] auto IsPlaybackRateEnabledProperty() const;
        [[nodiscard]] auto IsSeekBarVisibleProperty() const;
        [[nodiscard]] auto IsSeekEnabledProperty() const;
        [[nodiscard]] auto IsCompactProperty() const;
        [[nodiscard]] auto IsSkipForwardButtonVisibleProperty() const;
        [[nodiscard]] auto IsSkipForwardEnabledProperty() const;
        [[nodiscard]] auto IsSkipBackwardButtonVisibleProperty() const;
        [[nodiscard]] auto IsSkipBackwardEnabledProperty() const;
        [[nodiscard]] auto IsNextTrackButtonVisibleProperty() const;
        [[nodiscard]] auto IsPreviousTrackButtonVisibleProperty() const;
        [[nodiscard]] auto FastPlayFallbackBehaviourProperty() const;
        [[nodiscard]] auto ShowAndHideAutomaticallyProperty() const;
        [[nodiscard]] auto IsRepeatEnabledProperty() const;
        [[nodiscard]] auto IsRepeatButtonVisibleProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMediaTransportControlsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuBar
    {
        [[nodiscard]] auto Items() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuBar>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBar<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuBarFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuBarFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuBarItem
    {
        [[nodiscard]] auto Title() const;
        auto Title(param::hstring const& value) const;
        [[nodiscard]] auto Items() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFlyout
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFlyout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFlyoutFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFlyoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuBarItemStatics
    {
        [[nodiscard]] auto TitleProperty() const;
        [[nodiscard]] auto ItemsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuBarStatics
    {
        [[nodiscard]] auto ItemsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuBarStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuFlyout
    {
        [[nodiscard]] auto Items() const;
        [[nodiscard]] auto MenuFlyoutPresenterStyle() const;
        auto MenuFlyoutPresenterStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        auto ShowAt(winrt::Microsoft::UI::Xaml::UIElement const& targetElement, winrt::Windows::Foundation::Point const& point) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuFlyout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutItem
    {
        [[nodiscard]] auto Text() const;
        auto Text(param::hstring const& value) const;
        [[nodiscard]] auto Command() const;
        auto Command(winrt::Microsoft::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] auto CommandParameter() const;
        auto CommandParameter(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto Icon() const;
        auto Icon(winrt::Microsoft::UI::Xaml::Controls::IconElement const& value) const;
        [[nodiscard]] auto KeyboardAcceleratorTextOverride() const;
        auto KeyboardAcceleratorTextOverride(param::hstring const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
        auto Click(winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        using Click_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItem, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItem>::remove_Click>;
        [[nodiscard]] auto Click(auto_revoke_t, winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        auto Click(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutItemBase
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutItemBase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutItemBaseFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutItemBaseFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutItemStatics
    {
        [[nodiscard]] auto TextProperty() const;
        [[nodiscard]] auto CommandProperty() const;
        [[nodiscard]] auto CommandParameterProperty() const;
        [[nodiscard]] auto IconProperty() const;
        [[nodiscard]] auto KeyboardAcceleratorTextOverrideProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutPresenter
    {
        [[nodiscard]] auto TemplateSettings() const;
        [[nodiscard]] auto IsDefaultShadowEnabled() const;
        auto IsDefaultShadowEnabled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutPresenter2
    {
        [[nodiscard]] auto SystemBackdrop() const;
        auto SystemBackdrop(winrt::Microsoft::UI::Xaml::Media::SystemBackdrop const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenter2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutPresenter2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutPresenterFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutPresenterStatics
    {
        [[nodiscard]] auto IsDefaultShadowEnabledProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutPresenterStatics2
    {
        [[nodiscard]] auto SystemBackdropProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenterStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutPresenterStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutSeparator
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSeparator>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutSeparator<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutSeparatorFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutSeparatorFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutStatics
    {
        [[nodiscard]] auto MenuFlyoutPresenterStyleProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutSubItem
    {
        [[nodiscard]] auto Items() const;
        [[nodiscard]] auto Text() const;
        auto Text(param::hstring const& value) const;
        [[nodiscard]] auto Icon() const;
        auto Icon(winrt::Microsoft::UI::Xaml::Controls::IconElement const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSubItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutSubItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutSubItemStatics
    {
        [[nodiscard]] auto TextProperty() const;
        [[nodiscard]] auto IconProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSubItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuFlyoutSubItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigate
    {
        auto Navigate(winrt::Windows::UI::Xaml::Interop::TypeName const& sourcePageType) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigate>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigate<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationView
    {
        [[nodiscard]] auto IsPaneOpen() const;
        auto IsPaneOpen(bool value) const;
        [[nodiscard]] auto CompactModeThresholdWidth() const;
        auto CompactModeThresholdWidth(double value) const;
        [[nodiscard]] auto ExpandedModeThresholdWidth() const;
        auto ExpandedModeThresholdWidth(double value) const;
        [[nodiscard]] auto FooterMenuItems() const;
        [[nodiscard]] auto FooterMenuItemsSource() const;
        auto FooterMenuItemsSource(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto PaneFooter() const;
        auto PaneFooter(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto DisplayMode() const;
        [[nodiscard]] auto IsSettingsVisible() const;
        auto IsSettingsVisible(bool value) const;
        [[nodiscard]] auto IsPaneToggleButtonVisible() const;
        auto IsPaneToggleButtonVisible(bool value) const;
        [[nodiscard]] auto AlwaysShowHeader() const;
        auto AlwaysShowHeader(bool value) const;
        [[nodiscard]] auto CompactPaneLength() const;
        auto CompactPaneLength(double value) const;
        [[nodiscard]] auto OpenPaneLength() const;
        auto OpenPaneLength(double value) const;
        [[nodiscard]] auto PaneToggleButtonStyle() const;
        auto PaneToggleButtonStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto SelectedItem() const;
        auto SelectedItem(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto MenuItems() const;
        [[nodiscard]] auto MenuItemsSource() const;
        auto MenuItemsSource(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto SettingsItem() const;
        [[nodiscard]] auto AutoSuggestBox() const;
        auto AutoSuggestBox(winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBox const& value) const;
        [[nodiscard]] auto MenuItemTemplate() const;
        auto MenuItemTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto MenuItemTemplateSelector() const;
        auto MenuItemTemplateSelector(winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& value) const;
        [[nodiscard]] auto MenuItemContainerStyle() const;
        auto MenuItemContainerStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto MenuItemContainerStyleSelector() const;
        auto MenuItemContainerStyleSelector(winrt::Microsoft::UI::Xaml::Controls::StyleSelector const& value) const;
        auto MenuItemFromContainer(winrt::Microsoft::UI::Xaml::DependencyObject const& container) const;
        auto ContainerFromMenuItem(winrt::Windows::Foundation::IInspectable const& item) const;
        auto SelectionChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::INavigationView>::remove_SelectionChanged>;
        [[nodiscard]] auto SelectionChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> const& handler) const;
        auto SelectionChanged(winrt::event_token const& token) const noexcept;
        auto ItemInvoked(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> const& handler) const;
        using ItemInvoked_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::INavigationView>::remove_ItemInvoked>;
        [[nodiscard]] auto ItemInvoked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> const& handler) const;
        auto ItemInvoked(winrt::event_token const& token) const noexcept;
        auto DisplayModeChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> const& handler) const;
        using DisplayModeChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::INavigationView>::remove_DisplayModeChanged>;
        [[nodiscard]] auto DisplayModeChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> const& handler) const;
        auto DisplayModeChanged(winrt::event_token const& token) const noexcept;
        [[nodiscard]] auto IsTitleBarAutoPaddingEnabled() const;
        auto IsTitleBarAutoPaddingEnabled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationView2
    {
        [[nodiscard]] auto IsBackButtonVisible() const;
        auto IsBackButtonVisible(winrt::Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible const& value) const;
        [[nodiscard]] auto IsBackEnabled() const;
        auto IsBackEnabled(bool value) const;
        [[nodiscard]] auto PaneTitle() const;
        auto PaneTitle(param::hstring const& value) const;
        auto BackRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> const& handler) const;
        using BackRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::INavigationView2, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::INavigationView2>::remove_BackRequested>;
        [[nodiscard]] auto BackRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> const& handler) const;
        auto BackRequested(winrt::event_token const& token) const noexcept;
        auto PaneClosed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using PaneClosed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::INavigationView2, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::INavigationView2>::remove_PaneClosed>;
        [[nodiscard]] auto PaneClosed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto PaneClosed(winrt::event_token const& token) const noexcept;
        auto PaneClosing(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> const& handler) const;
        using PaneClosing_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::INavigationView2, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::INavigationView2>::remove_PaneClosing>;
        [[nodiscard]] auto PaneClosing(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> const& handler) const;
        auto PaneClosing(winrt::event_token const& token) const noexcept;
        auto PaneOpened(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using PaneOpened_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::INavigationView2, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::INavigationView2>::remove_PaneOpened>;
        [[nodiscard]] auto PaneOpened(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto PaneOpened(winrt::event_token const& token) const noexcept;
        auto PaneOpening(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using PaneOpening_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::INavigationView2, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::INavigationView2>::remove_PaneOpening>;
        [[nodiscard]] auto PaneOpening(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto PaneOpening(winrt::event_token const& token) const noexcept;
        [[nodiscard]] auto PaneDisplayMode() const;
        auto PaneDisplayMode(winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode const& value) const;
        [[nodiscard]] auto PaneHeader() const;
        auto PaneHeader(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto PaneCustomContent() const;
        auto PaneCustomContent(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto ContentOverlay() const;
        auto ContentOverlay(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto IsPaneVisible() const;
        auto IsPaneVisible(bool value) const;
        [[nodiscard]] auto SelectionFollowsFocus() const;
        auto SelectionFollowsFocus(winrt::Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
        [[nodiscard]] auto ShoulderNavigationEnabled() const;
        auto ShoulderNavigationEnabled(winrt::Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled const& value) const;
        [[nodiscard]] auto OverflowLabelMode() const;
        auto OverflowLabelMode(winrt::Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode const& value) const;
        auto Expanding(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemExpandingEventArgs> const& handler) const;
        using Expanding_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::INavigationView2, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::INavigationView2>::remove_Expanding>;
        [[nodiscard]] auto Expanding(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemExpandingEventArgs> const& handler) const;
        auto Expanding(winrt::event_token const& token) const noexcept;
        auto Collapsed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemCollapsedEventArgs> const& handler) const;
        using Collapsed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::INavigationView2, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::INavigationView2>::remove_Collapsed>;
        [[nodiscard]] auto Collapsed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NavigationView, winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemCollapsedEventArgs> const& handler) const;
        auto Collapsed(winrt::event_token const& token) const noexcept;
        auto Expand(winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem const& item) const;
        auto Collapse(winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem const& item) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationView2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationView2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewBackRequestedEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewBackRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewDisplayModeChangedEventArgs
    {
        [[nodiscard]] auto DisplayMode() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewDisplayModeChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItem
    {
        [[nodiscard]] auto Icon() const;
        auto Icon(winrt::Microsoft::UI::Xaml::Controls::IconElement const& value) const;
        [[nodiscard]] auto CompactPaneLength() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItem2
    {
        [[nodiscard]] auto SelectsOnInvoked() const;
        auto SelectsOnInvoked(bool value) const;
        [[nodiscard]] auto IsExpanded() const;
        auto IsExpanded(bool value) const;
        [[nodiscard]] auto HasUnrealizedChildren() const;
        auto HasUnrealizedChildren(bool value) const;
        [[nodiscard]] auto IsChildSelected() const;
        auto IsChildSelected(bool value) const;
        [[nodiscard]] auto MenuItems() const;
        [[nodiscard]] auto MenuItemsSource() const;
        auto MenuItemsSource(winrt::Windows::Foundation::IInspectable const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItem2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItem3
    {
        [[nodiscard]] auto InfoBadge() const;
        auto InfoBadge(winrt::Microsoft::UI::Xaml::Controls::InfoBadge const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem3>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItem3<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBase
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBase2
    {
        [[nodiscard]] auto IsSelected() const;
        auto IsSelected(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBase2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBaseFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBaseFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBaseStatics
    {
        [[nodiscard]] auto IsSelectedProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBaseStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBaseStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemCollapsedEventArgs
    {
        [[nodiscard]] auto CollapsedItemContainer() const;
        [[nodiscard]] auto CollapsedItem() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemCollapsedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemCollapsedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemExpandingEventArgs
    {
        [[nodiscard]] auto ExpandingItemContainer() const;
        [[nodiscard]] auto ExpandingItem() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemExpandingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemExpandingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemHeader
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemHeader>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemHeader<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemHeaderFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemHeaderFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs
    {
        [[nodiscard]] auto InvokedItem() const;
        [[nodiscard]] auto IsSettingsInvoked() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs2
    {
        [[nodiscard]] auto InvokedItemContainer() const;
        [[nodiscard]] auto RecommendedNavigationTransitionInfo() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemSeparator
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemSeparator<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemSeparatorFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemSeparatorFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemStatics
    {
        [[nodiscard]] auto IconProperty() const;
        [[nodiscard]] auto CompactPaneLengthProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemStatics2
    {
        [[nodiscard]] auto SelectsOnInvokedProperty() const;
        [[nodiscard]] auto IsExpandedProperty() const;
        [[nodiscard]] auto HasUnrealizedChildrenProperty() const;
        [[nodiscard]] auto IsChildSelectedProperty() const;
        [[nodiscard]] auto MenuItemsProperty() const;
        [[nodiscard]] auto MenuItemsSourceProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemStatics3
    {
        [[nodiscard]] auto InfoBadgeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemStatics3>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemStatics3<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewPaneClosingEventArgs
    {
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewPaneClosingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs
    {
        [[nodiscard]] auto SelectedItem() const;
        [[nodiscard]] auto IsSettingsSelected() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs2
    {
        [[nodiscard]] auto SelectedItemContainer() const;
        [[nodiscard]] auto RecommendedNavigationTransitionInfo() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics
    {
        [[nodiscard]] auto IsPaneOpenProperty() const;
        [[nodiscard]] auto CompactModeThresholdWidthProperty() const;
        [[nodiscard]] auto ExpandedModeThresholdWidthProperty() const;
        [[nodiscard]] auto FooterMenuItemsProperty() const;
        [[nodiscard]] auto FooterMenuItemsSourceProperty() const;
        [[nodiscard]] auto PaneFooterProperty() const;
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto DisplayModeProperty() const;
        [[nodiscard]] auto IsSettingsVisibleProperty() const;
        [[nodiscard]] auto IsPaneToggleButtonVisibleProperty() const;
        [[nodiscard]] auto AlwaysShowHeaderProperty() const;
        [[nodiscard]] auto CompactPaneLengthProperty() const;
        [[nodiscard]] auto OpenPaneLengthProperty() const;
        [[nodiscard]] auto PaneToggleButtonStyleProperty() const;
        [[nodiscard]] auto MenuItemsProperty() const;
        [[nodiscard]] auto MenuItemsSourceProperty() const;
        [[nodiscard]] auto SelectedItemProperty() const;
        [[nodiscard]] auto SettingsItemProperty() const;
        [[nodiscard]] auto AutoSuggestBoxProperty() const;
        [[nodiscard]] auto MenuItemTemplateProperty() const;
        [[nodiscard]] auto MenuItemTemplateSelectorProperty() const;
        [[nodiscard]] auto MenuItemContainerStyleProperty() const;
        [[nodiscard]] auto MenuItemContainerStyleSelectorProperty() const;
        [[nodiscard]] auto IsTitleBarAutoPaddingEnabledProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics2
    {
        [[nodiscard]] auto IsBackButtonVisibleProperty() const;
        [[nodiscard]] auto IsBackEnabledProperty() const;
        [[nodiscard]] auto PaneTitleProperty() const;
        [[nodiscard]] auto PaneDisplayModeProperty() const;
        [[nodiscard]] auto PaneHeaderProperty() const;
        [[nodiscard]] auto PaneCustomContentProperty() const;
        [[nodiscard]] auto ContentOverlayProperty() const;
        [[nodiscard]] auto IsPaneVisibleProperty() const;
        [[nodiscard]] auto SelectionFollowsFocusProperty() const;
        [[nodiscard]] auto TemplateSettingsProperty() const;
        [[nodiscard]] auto ShoulderNavigationEnabledProperty() const;
        [[nodiscard]] auto OverflowLabelModeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettings
    {
        [[nodiscard]] auto TopPadding() const;
        [[nodiscard]] auto OverflowButtonVisibility() const;
        [[nodiscard]] auto PaneToggleButtonVisibility() const;
        [[nodiscard]] auto BackButtonVisibility() const;
        [[nodiscard]] auto TopPaneVisibility() const;
        [[nodiscard]] auto LeftPaneVisibility() const;
        [[nodiscard]] auto SingleSelectionFollowsFocus() const;
        [[nodiscard]] auto PaneToggleButtonWidth() const;
        [[nodiscard]] auto SmallerPaneToggleButtonWidth() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettings2
    {
        [[nodiscard]] auto OpenPaneLength() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettings2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsStatics
    {
        [[nodiscard]] auto TopPaddingProperty() const;
        [[nodiscard]] auto OverflowButtonVisibilityProperty() const;
        [[nodiscard]] auto PaneToggleButtonVisibilityProperty() const;
        [[nodiscard]] auto BackButtonVisibilityProperty() const;
        [[nodiscard]] auto TopPaneVisibilityProperty() const;
        [[nodiscard]] auto LeftPaneVisibilityProperty() const;
        [[nodiscard]] auto SingleSelectionFollowsFocusProperty() const;
        [[nodiscard]] auto PaneToggleButtonWidthProperty() const;
        [[nodiscard]] auto SmallerPaneToggleButtonWidthProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsStatics2
    {
        [[nodiscard]] auto OpenPaneLengthProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayout
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutContext
    {
        [[nodiscard]] auto Children() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutContext<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutContextFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutContextFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutContextOverrides
    {
        [[nodiscard]] auto ChildrenCore() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutContextOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutOverrides
    {
        auto InitializeForContextCore(winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context) const;
        auto UninitializeForContextCore(winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context) const;
        auto MeasureOverride(winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context, winrt::Windows::Foundation::Size const& availableSize) const;
        auto ArrangeOverride(winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context, winrt::Windows::Foundation::Size const& finalSize) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INumberBox
    {
        [[nodiscard]] auto Minimum() const;
        auto Minimum(double value) const;
        [[nodiscard]] auto Maximum() const;
        auto Maximum(double value) const;
        [[nodiscard]] auto Value() const;
        auto Value(double value) const;
        [[nodiscard]] auto SmallChange() const;
        auto SmallChange(double value) const;
        [[nodiscard]] auto LargeChange() const;
        auto LargeChange(double value) const;
        [[nodiscard]] auto Text() const;
        auto Text(param::hstring const& value) const;
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto PlaceholderText() const;
        auto PlaceholderText(param::hstring const& value) const;
        [[nodiscard]] auto SelectionFlyout() const;
        auto SelectionFlyout(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
        [[nodiscard]] auto SelectionHighlightColor() const;
        auto SelectionHighlightColor(winrt::Microsoft::UI::Xaml::Media::SolidColorBrush const& value) const;
        [[nodiscard]] auto TextReadingOrder() const;
        auto TextReadingOrder(winrt::Microsoft::UI::Xaml::TextReadingOrder const& value) const;
        [[nodiscard]] auto PreventKeyboardDisplayOnProgrammaticFocus() const;
        auto PreventKeyboardDisplayOnProgrammaticFocus(bool value) const;
        [[nodiscard]] auto Description() const;
        auto Description(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto ValidationMode() const;
        auto ValidationMode(winrt::Microsoft::UI::Xaml::Controls::NumberBoxValidationMode const& value) const;
        [[nodiscard]] auto SpinButtonPlacementMode() const;
        auto SpinButtonPlacementMode(winrt::Microsoft::UI::Xaml::Controls::NumberBoxSpinButtonPlacementMode const& value) const;
        [[nodiscard]] auto IsWrapEnabled() const;
        auto IsWrapEnabled(bool value) const;
        [[nodiscard]] auto AcceptsExpression() const;
        auto AcceptsExpression(bool value) const;
        [[nodiscard]] auto NumberFormatter() const;
        auto NumberFormatter(winrt::Windows::Globalization::NumberFormatting::INumberFormatter2 const& value) const;
        auto ValueChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NumberBox, winrt::Microsoft::UI::Xaml::Controls::NumberBoxValueChangedEventArgs> const& handler) const;
        using ValueChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::INumberBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::INumberBox>::remove_ValueChanged>;
        [[nodiscard]] auto ValueChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::NumberBox, winrt::Microsoft::UI::Xaml::Controls::NumberBoxValueChangedEventArgs> const& handler) const;
        auto ValueChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INumberBox>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INumberBox<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INumberBoxFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INumberBoxFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INumberBoxFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INumberBoxStatics
    {
        [[nodiscard]] auto MinimumProperty() const;
        [[nodiscard]] auto MaximumProperty() const;
        [[nodiscard]] auto ValueProperty() const;
        [[nodiscard]] auto SmallChangeProperty() const;
        [[nodiscard]] auto LargeChangeProperty() const;
        [[nodiscard]] auto TextProperty() const;
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto PlaceholderTextProperty() const;
        [[nodiscard]] auto SelectionFlyoutProperty() const;
        [[nodiscard]] auto SelectionHighlightColorProperty() const;
        [[nodiscard]] auto TextReadingOrderProperty() const;
        [[nodiscard]] auto PreventKeyboardDisplayOnProgrammaticFocusProperty() const;
        [[nodiscard]] auto DescriptionProperty() const;
        [[nodiscard]] auto ValidationModeProperty() const;
        [[nodiscard]] auto SpinButtonPlacementModeProperty() const;
        [[nodiscard]] auto IsWrapEnabledProperty() const;
        [[nodiscard]] auto AcceptsExpressionProperty() const;
        [[nodiscard]] auto NumberFormatterProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INumberBoxStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INumberBoxStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INumberBoxValueChangedEventArgs
    {
        [[nodiscard]] auto OldValue() const;
        [[nodiscard]] auto NewValue() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::INumberBoxValueChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INumberBoxValueChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPage
    {
        [[nodiscard]] auto Frame() const;
        [[nodiscard]] auto NavigationCacheMode() const;
        auto NavigationCacheMode(winrt::Microsoft::UI::Xaml::Navigation::NavigationCacheMode const& value) const;
        [[nodiscard]] auto TopAppBar() const;
        auto TopAppBar(winrt::Microsoft::UI::Xaml::Controls::AppBar const& value) const;
        [[nodiscard]] auto BottomAppBar() const;
        auto BottomAppBar(winrt::Microsoft::UI::Xaml::Controls::AppBar const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPage>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPage<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPageFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPageFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPageFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPageOverrides
    {
        auto OnNavigatedFrom(winrt::Microsoft::UI::Xaml::Navigation::NavigationEventArgs const& e) const;
        auto OnNavigatedTo(winrt::Microsoft::UI::Xaml::Navigation::NavigationEventArgs const& e) const;
        auto OnNavigatingFrom(winrt::Microsoft::UI::Xaml::Navigation::NavigatingCancelEventArgs const& e) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPageOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPageOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPageStatics
    {
        [[nodiscard]] auto FrameProperty() const;
        [[nodiscard]] auto TopAppBarProperty() const;
        [[nodiscard]] auto BottomAppBarProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPageStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPageStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPanel
    {
        [[nodiscard]] auto Children() const;
        [[nodiscard]] auto Background() const;
        auto Background(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto IsItemsHost() const;
        [[nodiscard]] auto ChildrenTransitions() const;
        auto ChildrenTransitions(winrt::Microsoft::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
        [[nodiscard]] auto BackgroundTransition() const;
        auto BackgroundTransition(winrt::Microsoft::UI::Xaml::BrushTransition const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPanel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPanelFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPanelFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPanelFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPanelStatics
    {
        [[nodiscard]] auto BackgroundProperty() const;
        [[nodiscard]] auto IsItemsHostProperty() const;
        [[nodiscard]] auto ChildrenTransitionsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPanelStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPanelStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IParallaxView
    {
        [[nodiscard]] auto Child() const;
        auto Child(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto HorizontalShift() const;
        auto HorizontalShift(double value) const;
        [[nodiscard]] auto HorizontalSourceEndOffset() const;
        auto HorizontalSourceEndOffset(double value) const;
        [[nodiscard]] auto HorizontalSourceOffsetKind() const;
        auto HorizontalSourceOffsetKind(winrt::Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind const& value) const;
        [[nodiscard]] auto HorizontalSourceStartOffset() const;
        auto HorizontalSourceStartOffset(double value) const;
        [[nodiscard]] auto IsHorizontalShiftClamped() const;
        auto IsHorizontalShiftClamped(bool value) const;
        [[nodiscard]] auto IsVerticalShiftClamped() const;
        auto IsVerticalShiftClamped(bool value) const;
        [[nodiscard]] auto MaxHorizontalShiftRatio() const;
        auto MaxHorizontalShiftRatio(double value) const;
        [[nodiscard]] auto MaxVerticalShiftRatio() const;
        auto MaxVerticalShiftRatio(double value) const;
        [[nodiscard]] auto Source() const;
        auto Source(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto VerticalShift() const;
        auto VerticalShift(double value) const;
        [[nodiscard]] auto VerticalSourceEndOffset() const;
        auto VerticalSourceEndOffset(double value) const;
        [[nodiscard]] auto VerticalSourceOffsetKind() const;
        auto VerticalSourceOffsetKind(winrt::Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind const& value) const;
        [[nodiscard]] auto VerticalSourceStartOffset() const;
        auto VerticalSourceStartOffset(double value) const;
        auto RefreshAutomaticHorizontalOffsets() const;
        auto RefreshAutomaticVerticalOffsets() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IParallaxView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IParallaxViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IParallaxViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IParallaxViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics
    {
        [[nodiscard]] auto ChildProperty() const;
        [[nodiscard]] auto HorizontalSourceEndOffsetProperty() const;
        [[nodiscard]] auto HorizontalSourceOffsetKindProperty() const;
        [[nodiscard]] auto HorizontalSourceStartOffsetProperty() const;
        [[nodiscard]] auto MaxHorizontalShiftRatioProperty() const;
        [[nodiscard]] auto HorizontalShiftProperty() const;
        [[nodiscard]] auto IsHorizontalShiftClampedProperty() const;
        [[nodiscard]] auto IsVerticalShiftClampedProperty() const;
        [[nodiscard]] auto SourceProperty() const;
        [[nodiscard]] auto VerticalSourceEndOffsetProperty() const;
        [[nodiscard]] auto VerticalSourceOffsetKindProperty() const;
        [[nodiscard]] auto VerticalSourceStartOffsetProperty() const;
        [[nodiscard]] auto MaxVerticalShiftRatioProperty() const;
        [[nodiscard]] auto VerticalShiftProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IParallaxViewStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPasswordBox
    {
        [[nodiscard]] auto Password() const;
        auto Password(param::hstring const& value) const;
        [[nodiscard]] auto PasswordChar() const;
        auto PasswordChar(param::hstring const& value) const;
        [[nodiscard]] auto IsPasswordRevealButtonEnabled() const;
        auto IsPasswordRevealButtonEnabled(bool value) const;
        [[nodiscard]] auto MaxLength() const;
        auto MaxLength(int32_t value) const;
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto PlaceholderText() const;
        auto PlaceholderText(param::hstring const& value) const;
        [[nodiscard]] auto SelectionHighlightColor() const;
        auto SelectionHighlightColor(winrt::Microsoft::UI::Xaml::Media::SolidColorBrush const& value) const;
        [[nodiscard]] auto PreventKeyboardDisplayOnProgrammaticFocus() const;
        auto PreventKeyboardDisplayOnProgrammaticFocus(bool value) const;
        [[nodiscard]] auto PasswordRevealMode() const;
        auto PasswordRevealMode(winrt::Microsoft::UI::Xaml::Controls::PasswordRevealMode const& value) const;
        [[nodiscard]] auto TextReadingOrder() const;
        auto TextReadingOrder(winrt::Microsoft::UI::Xaml::TextReadingOrder const& value) const;
        [[nodiscard]] auto InputScope() const;
        auto InputScope(winrt::Microsoft::UI::Xaml::Input::InputScope const& value) const;
        [[nodiscard]] auto CanPasteClipboardContent() const;
        [[nodiscard]] auto SelectionFlyout() const;
        auto SelectionFlyout(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
        [[nodiscard]] auto Description() const;
        auto Description(winrt::Windows::Foundation::IInspectable const& value) const;
        auto PasswordChanged(winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        using PasswordChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IPasswordBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IPasswordBox>::remove_PasswordChanged>;
        [[nodiscard]] auto PasswordChanged(auto_revoke_t, winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        auto PasswordChanged(winrt::event_token const& token) const noexcept;
        auto ContextMenuOpening(winrt::Microsoft::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        using ContextMenuOpening_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IPasswordBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IPasswordBox>::remove_ContextMenuOpening>;
        [[nodiscard]] auto ContextMenuOpening(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        auto ContextMenuOpening(winrt::event_token const& token) const noexcept;
        auto Paste(winrt::Microsoft::UI::Xaml::Controls::TextControlPasteEventHandler const& handler) const;
        using Paste_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IPasswordBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IPasswordBox>::remove_Paste>;
        [[nodiscard]] auto Paste(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::TextControlPasteEventHandler const& handler) const;
        auto Paste(winrt::event_token const& token) const noexcept;
        auto PasswordChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::PasswordBox, winrt::Microsoft::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs> const& handler) const;
        using PasswordChanging_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IPasswordBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IPasswordBox>::remove_PasswordChanging>;
        [[nodiscard]] auto PasswordChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::PasswordBox, winrt::Microsoft::UI::Xaml::Controls::PasswordBoxPasswordChangingEventArgs> const& handler) const;
        auto PasswordChanging(winrt::event_token const& token) const noexcept;
        auto SelectAll() const;
        auto PasteFromClipboard() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPasswordBox>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPasswordBox<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPasswordBoxPasswordChangingEventArgs
    {
        [[nodiscard]] auto IsContentChanging() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPasswordBoxPasswordChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPasswordBoxStatics
    {
        [[nodiscard]] auto PasswordProperty() const;
        [[nodiscard]] auto PasswordCharProperty() const;
        [[nodiscard]] auto IsPasswordRevealButtonEnabledProperty() const;
        [[nodiscard]] auto MaxLengthProperty() const;
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto PlaceholderTextProperty() const;
        [[nodiscard]] auto SelectionHighlightColorProperty() const;
        [[nodiscard]] auto PreventKeyboardDisplayOnProgrammaticFocusProperty() const;
        [[nodiscard]] auto PasswordRevealModeProperty() const;
        [[nodiscard]] auto TextReadingOrderProperty() const;
        [[nodiscard]] auto InputScopeProperty() const;
        [[nodiscard]] auto CanPasteClipboardContentProperty() const;
        [[nodiscard]] auto SelectionFlyoutProperty() const;
        [[nodiscard]] auto DescriptionProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPasswordBoxStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPasswordBoxStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPathIcon
    {
        [[nodiscard]] auto Data() const;
        auto Data(winrt::Microsoft::UI::Xaml::Media::Geometry const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPathIcon>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPathIcon<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPathIconFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPathIconFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPathIconFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPathIconSource
    {
        [[nodiscard]] auto Data() const;
        auto Data(winrt::Microsoft::UI::Xaml::Media::Geometry const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPathIconSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPathIconSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPathIconSourceFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPathIconSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPathIconSourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPathIconSourceStatics
    {
        [[nodiscard]] auto DataProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPathIconSourceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPathIconSourceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPathIconStatics
    {
        [[nodiscard]] auto DataProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPathIconStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPathIconStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPersonPicture
    {
        [[nodiscard]] auto BadgeNumber() const;
        auto BadgeNumber(int32_t value) const;
        [[nodiscard]] auto BadgeGlyph() const;
        auto BadgeGlyph(param::hstring const& value) const;
        [[nodiscard]] auto BadgeImageSource() const;
        auto BadgeImageSource(winrt::Microsoft::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto BadgeText() const;
        auto BadgeText(param::hstring const& value) const;
        [[nodiscard]] auto IsGroup() const;
        auto IsGroup(bool value) const;
        [[nodiscard]] auto Contact() const;
        auto Contact(winrt::Windows::ApplicationModel::Contacts::Contact const& value) const;
        [[nodiscard]] auto DisplayName() const;
        auto DisplayName(param::hstring const& value) const;
        [[nodiscard]] auto Initials() const;
        auto Initials(param::hstring const& value) const;
        [[nodiscard]] auto PreferSmallImage() const;
        auto PreferSmallImage(bool value) const;
        [[nodiscard]] auto ProfilePicture() const;
        auto ProfilePicture(winrt::Microsoft::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPersonPicture>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPersonPictureFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPersonPictureFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPersonPictureStatics
    {
        [[nodiscard]] auto BadgeNumberProperty() const;
        [[nodiscard]] auto BadgeGlyphProperty() const;
        [[nodiscard]] auto BadgeImageSourceProperty() const;
        [[nodiscard]] auto BadgeTextProperty() const;
        [[nodiscard]] auto IsGroupProperty() const;
        [[nodiscard]] auto ContactProperty() const;
        [[nodiscard]] auto DisplayNameProperty() const;
        [[nodiscard]] auto InitialsProperty() const;
        [[nodiscard]] auto PreferSmallImageProperty() const;
        [[nodiscard]] auto ProfilePictureProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPersonPictureStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPersonPictureTemplateSettings
    {
        [[nodiscard]] auto ActualInitials() const;
        [[nodiscard]] auto ActualImageBrush() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPersonPictureTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPickerConfirmedEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPickerConfirmedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPickerConfirmedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPickerFlyout
    {
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto ConfirmationButtonsVisible() const;
        auto ConfirmationButtonsVisible(bool value) const;
        auto Confirmed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::PickerFlyout, winrt::Microsoft::UI::Xaml::Controls::PickerConfirmedEventArgs> const& handler) const;
        using Confirmed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IPickerFlyout, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IPickerFlyout>::remove_Confirmed>;
        [[nodiscard]] auto Confirmed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::PickerFlyout, winrt::Microsoft::UI::Xaml::Controls::PickerConfirmedEventArgs> const& handler) const;
        auto Confirmed(winrt::event_token const& token) const noexcept;
        auto ShowAtAsync(winrt::Microsoft::UI::Xaml::FrameworkElement const& target) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPickerFlyout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPickerFlyout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPickerFlyoutPresenter
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPickerFlyoutPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPickerFlyoutPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPickerFlyoutStatics
    {
        [[nodiscard]] auto ContentProperty() const;
        [[nodiscard]] auto ConfirmationButtonsVisibleProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPickerFlyoutStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPickerFlyoutStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPipsPager
    {
        [[nodiscard]] auto NumberOfPages() const;
        auto NumberOfPages(int32_t value) const;
        [[nodiscard]] auto SelectedPageIndex() const;
        auto SelectedPageIndex(int32_t value) const;
        [[nodiscard]] auto MaxVisiblePips() const;
        auto MaxVisiblePips(int32_t value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Microsoft::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] auto PreviousButtonVisibility() const;
        auto PreviousButtonVisibility(winrt::Microsoft::UI::Xaml::Controls::PipsPagerButtonVisibility const& value) const;
        [[nodiscard]] auto NextButtonVisibility() const;
        auto NextButtonVisibility(winrt::Microsoft::UI::Xaml::Controls::PipsPagerButtonVisibility const& value) const;
        [[nodiscard]] auto PreviousButtonStyle() const;
        auto PreviousButtonStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto NextButtonStyle() const;
        auto NextButtonStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto SelectedPipStyle() const;
        auto SelectedPipStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto NormalPipStyle() const;
        auto NormalPipStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        auto SelectedIndexChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::PipsPager, winrt::Microsoft::UI::Xaml::Controls::PipsPagerSelectedIndexChangedEventArgs> const& handler) const;
        using SelectedIndexChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IPipsPager, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IPipsPager>::remove_SelectedIndexChanged>;
        [[nodiscard]] auto SelectedIndexChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::PipsPager, winrt::Microsoft::UI::Xaml::Controls::PipsPagerSelectedIndexChangedEventArgs> const& handler) const;
        auto SelectedIndexChanged(winrt::event_token const& token) const noexcept;
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPipsPager>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPipsPager<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPipsPagerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPipsPagerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPipsPagerSelectedIndexChangedEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerSelectedIndexChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPipsPagerSelectedIndexChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPipsPagerStatics
    {
        [[nodiscard]] auto NumberOfPagesProperty() const;
        [[nodiscard]] auto SelectedPageIndexProperty() const;
        [[nodiscard]] auto MaxVisiblePipsProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto PreviousButtonVisibilityProperty() const;
        [[nodiscard]] auto NextButtonVisibilityProperty() const;
        [[nodiscard]] auto PreviousButtonStyleProperty() const;
        [[nodiscard]] auto NextButtonStyleProperty() const;
        [[nodiscard]] auto SelectedPipStyleProperty() const;
        [[nodiscard]] auto NormalPipStyleProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPipsPagerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPipsPagerTemplateSettings
    {
        [[nodiscard]] auto PipsPagerItems() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPipsPagerTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPipsPagerTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPivot
    {
        [[nodiscard]] auto Title() const;
        auto Title(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto TitleTemplate() const;
        auto TitleTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto LeftHeader() const;
        auto LeftHeader(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto LeftHeaderTemplate() const;
        auto LeftHeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto RightHeader() const;
        auto RightHeader(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto RightHeaderTemplate() const;
        auto RightHeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto SelectedIndex() const;
        auto SelectedIndex(int32_t value) const;
        [[nodiscard]] auto SelectedItem() const;
        auto SelectedItem(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto IsLocked() const;
        auto IsLocked(bool value) const;
        [[nodiscard]] auto HeaderFocusVisualPlacement() const;
        auto HeaderFocusVisualPlacement(winrt::Microsoft::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement const& value) const;
        [[nodiscard]] auto IsHeaderItemsCarouselEnabled() const;
        auto IsHeaderItemsCarouselEnabled(bool value) const;
        auto SelectionChanged(winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IPivot, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IPivot>::remove_SelectionChanged>;
        [[nodiscard]] auto SelectionChanged(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const;
        auto SelectionChanged(winrt::event_token const& token) const noexcept;
        auto PivotItemLoading(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Pivot, winrt::Microsoft::UI::Xaml::Controls::PivotItemEventArgs> const& handler) const;
        using PivotItemLoading_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IPivot, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IPivot>::remove_PivotItemLoading>;
        [[nodiscard]] auto PivotItemLoading(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Pivot, winrt::Microsoft::UI::Xaml::Controls::PivotItemEventArgs> const& handler) const;
        auto PivotItemLoading(winrt::event_token const& token) const noexcept;
        auto PivotItemLoaded(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Pivot, winrt::Microsoft::UI::Xaml::Controls::PivotItemEventArgs> const& handler) const;
        using PivotItemLoaded_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IPivot, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IPivot>::remove_PivotItemLoaded>;
        [[nodiscard]] auto PivotItemLoaded(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Pivot, winrt::Microsoft::UI::Xaml::Controls::PivotItemEventArgs> const& handler) const;
        auto PivotItemLoaded(winrt::event_token const& token) const noexcept;
        auto PivotItemUnloading(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Pivot, winrt::Microsoft::UI::Xaml::Controls::PivotItemEventArgs> const& handler) const;
        using PivotItemUnloading_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IPivot, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IPivot>::remove_PivotItemUnloading>;
        [[nodiscard]] auto PivotItemUnloading(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Pivot, winrt::Microsoft::UI::Xaml::Controls::PivotItemEventArgs> const& handler) const;
        auto PivotItemUnloading(winrt::event_token const& token) const noexcept;
        auto PivotItemUnloaded(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Pivot, winrt::Microsoft::UI::Xaml::Controls::PivotItemEventArgs> const& handler) const;
        using PivotItemUnloaded_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IPivot, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IPivot>::remove_PivotItemUnloaded>;
        [[nodiscard]] auto PivotItemUnloaded(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Pivot, winrt::Microsoft::UI::Xaml::Controls::PivotItemEventArgs> const& handler) const;
        auto PivotItemUnloaded(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPivot>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPivot<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPivotFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPivotFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPivotFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPivotItem
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPivotItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPivotItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPivotItemEventArgs
    {
        [[nodiscard]] auto Item() const;
        auto Item(winrt::Microsoft::UI::Xaml::Controls::PivotItem const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPivotItemEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPivotItemEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPivotItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPivotItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPivotItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPivotItemStatics
    {
        [[nodiscard]] auto HeaderProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPivotItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPivotItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPivotStatics
    {
        [[nodiscard]] auto TitleProperty() const;
        [[nodiscard]] auto TitleTemplateProperty() const;
        [[nodiscard]] auto LeftHeaderProperty() const;
        [[nodiscard]] auto LeftHeaderTemplateProperty() const;
        [[nodiscard]] auto RightHeaderProperty() const;
        [[nodiscard]] auto RightHeaderTemplateProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto SelectedIndexProperty() const;
        [[nodiscard]] auto SelectedItemProperty() const;
        [[nodiscard]] auto IsLockedProperty() const;
        [[nodiscard]] auto HeaderFocusVisualPlacementProperty() const;
        [[nodiscard]] auto IsHeaderItemsCarouselEnabledProperty() const;
        [[nodiscard]] auto SlideInAnimationGroupProperty() const;
        auto GetSlideInAnimationGroup(winrt::Microsoft::UI::Xaml::FrameworkElement const& element) const;
        auto SetSlideInAnimationGroup(winrt::Microsoft::UI::Xaml::FrameworkElement const& element, winrt::Microsoft::UI::Xaml::Controls::PivotSlideInAnimationGroup const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IPivotStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPivotStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IProgressBar
    {
        [[nodiscard]] auto IsIndeterminate() const;
        auto IsIndeterminate(bool value) const;
        [[nodiscard]] auto ShowError() const;
        auto ShowError(bool value) const;
        [[nodiscard]] auto ShowPaused() const;
        auto ShowPaused(bool value) const;
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IProgressBar>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IProgressBar<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IProgressBarFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IProgressBarFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IProgressBarFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IProgressBarStatics
    {
        [[nodiscard]] auto IsIndeterminateProperty() const;
        [[nodiscard]] auto ShowErrorProperty() const;
        [[nodiscard]] auto ShowPausedProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IProgressBarStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IProgressBarStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IProgressBarTemplateSettings
    {
        [[nodiscard]] auto ContainerAnimationStartPosition() const;
        [[nodiscard]] auto ContainerAnimationEndPosition() const;
        [[nodiscard]] auto Container2AnimationStartPosition() const;
        [[nodiscard]] auto Container2AnimationEndPosition() const;
        [[nodiscard]] auto ContainerAnimationMidPosition() const;
        [[nodiscard]] auto IndicatorLengthDelta() const;
        [[nodiscard]] auto ClipRect() const;
        [[nodiscard]] auto EllipseAnimationEndPosition() const;
        [[nodiscard]] auto EllipseAnimationWellPosition() const;
        [[nodiscard]] auto EllipseDiameter() const;
        [[nodiscard]] auto EllipseOffset() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IProgressBarTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IProgressBarTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IProgressRing
    {
        [[nodiscard]] auto IsActive() const;
        auto IsActive(bool value) const;
        [[nodiscard]] auto IsIndeterminate() const;
        auto IsIndeterminate(bool value) const;
        [[nodiscard]] auto TemplateSettings() const;
        [[nodiscard]] auto Value() const;
        auto Value(double value) const;
        [[nodiscard]] auto Minimum() const;
        auto Minimum(double value) const;
        [[nodiscard]] auto Maximum() const;
        auto Maximum(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IProgressRing>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IProgressRing<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IProgressRingFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IProgressRingFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IProgressRingFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IProgressRingStatics
    {
        [[nodiscard]] auto IsActiveProperty() const;
        [[nodiscard]] auto IsIndeterminateProperty() const;
        [[nodiscard]] auto ValueProperty() const;
        [[nodiscard]] auto MinimumProperty() const;
        [[nodiscard]] auto MaximumProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IProgressRingStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IProgressRingStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IProgressRingTemplateSettings
    {
        [[nodiscard]] auto EllipseDiameter() const;
        [[nodiscard]] auto EllipseOffset() const;
        [[nodiscard]] auto MaxSideLength() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IProgressRingTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IProgressRingTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRadioButton
    {
        [[nodiscard]] auto GroupName() const;
        auto GroupName(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRadioButton>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRadioButton<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRadioButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRadioButtonFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRadioButtonStatics
    {
        [[nodiscard]] auto GroupNameProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRadioButtonStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRadioButtons
    {
        [[nodiscard]] auto ItemsSource() const;
        auto ItemsSource(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto Items() const;
        [[nodiscard]] auto ItemTemplate() const;
        auto ItemTemplate(winrt::Windows::Foundation::IInspectable const& value) const;
        auto ContainerFromIndex(int32_t index) const;
        [[nodiscard]] auto SelectedIndex() const;
        auto SelectedIndex(int32_t value) const;
        [[nodiscard]] auto SelectedItem() const;
        auto SelectedItem(winrt::Windows::Foundation::IInspectable const& value) const;
        auto SelectionChanged(winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRadioButtons, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRadioButtons>::remove_SelectionChanged>;
        [[nodiscard]] auto SelectionChanged(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const;
        auto SelectionChanged(winrt::event_token const& token) const noexcept;
        [[nodiscard]] auto MaxColumns() const;
        auto MaxColumns(int32_t value) const;
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRadioButtons>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRadioButtonsFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRadioButtonsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRadioButtonsStatics
    {
        [[nodiscard]] auto ItemsSourceProperty() const;
        [[nodiscard]] auto ItemsProperty() const;
        [[nodiscard]] auto ItemTemplateProperty() const;
        [[nodiscard]] auto SelectedIndexProperty() const;
        [[nodiscard]] auto SelectedItemProperty() const;
        [[nodiscard]] auto MaxColumnsProperty() const;
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRadioButtonsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItem
    {
        [[nodiscard]] auto IsChecked() const;
        auto IsChecked(bool value) const;
        [[nodiscard]] auto GroupName() const;
        auto GroupName(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItemStatics
    {
        [[nodiscard]] auto IsCheckedProperty() const;
        [[nodiscard]] auto GroupNameProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItemStatics2
    {
        [[nodiscard]] auto AreCheckStatesEnabledProperty() const;
        auto SetAreCheckStatesEnabled(winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem const& object, bool value) const;
        auto GetAreCheckStatesEnabled(winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem const& object) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItemStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingControl
    {
        [[nodiscard]] auto Caption() const;
        auto Caption(param::hstring const& value) const;
        [[nodiscard]] auto InitialSetValue() const;
        auto InitialSetValue(int32_t value) const;
        [[nodiscard]] auto IsClearEnabled() const;
        auto IsClearEnabled(bool value) const;
        [[nodiscard]] auto IsReadOnly() const;
        auto IsReadOnly(bool value) const;
        [[nodiscard]] auto MaxRating() const;
        auto MaxRating(int32_t value) const;
        [[nodiscard]] auto PlaceholderValue() const;
        auto PlaceholderValue(double value) const;
        [[nodiscard]] auto ItemInfo() const;
        auto ItemInfo(winrt::Microsoft::UI::Xaml::Controls::RatingItemInfo const& value) const;
        [[nodiscard]] auto Value() const;
        auto Value(double value) const;
        auto ValueChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RatingControl, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ValueChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRatingControl, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRatingControl>::remove_ValueChanged>;
        [[nodiscard]] auto ValueChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RatingControl, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto ValueChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRatingControl>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingControlFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRatingControlFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingControlFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingControlStatics
    {
        [[nodiscard]] auto CaptionProperty() const;
        [[nodiscard]] auto InitialSetValueProperty() const;
        [[nodiscard]] auto IsClearEnabledProperty() const;
        [[nodiscard]] auto IsReadOnlyProperty() const;
        [[nodiscard]] auto MaxRatingProperty() const;
        [[nodiscard]] auto PlaceholderValueProperty() const;
        [[nodiscard]] auto ItemInfoProperty() const;
        [[nodiscard]] auto ValueProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRatingControlStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingControlStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo
    {
        [[nodiscard]] auto DisabledGlyph() const;
        auto DisabledGlyph(param::hstring const& value) const;
        [[nodiscard]] auto Glyph() const;
        auto Glyph(param::hstring const& value) const;
        [[nodiscard]] auto PointerOverGlyph() const;
        auto PointerOverGlyph(param::hstring const& value) const;
        [[nodiscard]] auto PointerOverPlaceholderGlyph() const;
        auto PointerOverPlaceholderGlyph(param::hstring const& value) const;
        [[nodiscard]] auto PlaceholderGlyph() const;
        auto PlaceholderGlyph(param::hstring const& value) const;
        [[nodiscard]] auto UnsetGlyph() const;
        auto UnsetGlyph(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfo>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoStatics
    {
        [[nodiscard]] auto DisabledGlyphProperty() const;
        [[nodiscard]] auto GlyphProperty() const;
        [[nodiscard]] auto PlaceholderGlyphProperty() const;
        [[nodiscard]] auto PointerOverGlyphProperty() const;
        [[nodiscard]] auto PointerOverPlaceholderGlyphProperty() const;
        [[nodiscard]] auto UnsetGlyphProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo
    {
        [[nodiscard]] auto DisabledImage() const;
        auto DisabledImage(winrt::Microsoft::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto Image() const;
        auto Image(winrt::Microsoft::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto PlaceholderImage() const;
        auto PlaceholderImage(winrt::Microsoft::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto PointerOverImage() const;
        auto PointerOverImage(winrt::Microsoft::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto PointerOverPlaceholderImage() const;
        auto PointerOverPlaceholderImage(winrt::Microsoft::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] auto UnsetImage() const;
        auto UnsetImage(winrt::Microsoft::UI::Xaml::Media::ImageSource const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfo>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoStatics
    {
        [[nodiscard]] auto DisabledImageProperty() const;
        [[nodiscard]] auto ImageProperty() const;
        [[nodiscard]] auto PlaceholderImageProperty() const;
        [[nodiscard]] auto PointerOverImageProperty() const;
        [[nodiscard]] auto PointerOverPlaceholderImageProperty() const;
        [[nodiscard]] auto UnsetImageProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingItemInfo
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfo>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemInfo<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingItemInfoFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemInfoFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshContainer
    {
        [[nodiscard]] auto Visualizer() const;
        auto Visualizer(winrt::Microsoft::UI::Xaml::Controls::RefreshVisualizer const& value) const;
        [[nodiscard]] auto PullDirection() const;
        auto PullDirection(winrt::Microsoft::UI::Xaml::Controls::RefreshPullDirection const& value) const;
        auto RefreshRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RefreshContainer, winrt::Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const;
        using RefreshRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainer, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainer>::remove_RefreshRequested>;
        [[nodiscard]] auto RefreshRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RefreshContainer, winrt::Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const;
        auto RefreshRequested(winrt::event_token const& token) const noexcept;
        auto RequestRefresh() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainer>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshContainer<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshContainerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainerFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshContainerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshContainerStatics
    {
        [[nodiscard]] auto VisualizerProperty() const;
        [[nodiscard]] auto PullDirectionProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshContainerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshInteractionRatioChangedEventArgs
    {
        [[nodiscard]] auto InteractionRatio() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshInteractionRatioChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshRequestedEventArgs
    {
        auto GetDeferral() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshStateChangedEventArgs
    {
        [[nodiscard]] auto OldState() const;
        [[nodiscard]] auto NewState() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshStateChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer
    {
        auto RequestRefresh() const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation const& value) const;
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto State() const;
        auto RefreshRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RefreshVisualizer, winrt::Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const;
        using RefreshRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizer, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizer>::remove_RefreshRequested>;
        [[nodiscard]] auto RefreshRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RefreshVisualizer, winrt::Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const;
        auto RefreshRequested(winrt::event_token const& token) const noexcept;
        auto RefreshStateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RefreshVisualizer, winrt::Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs> const& handler) const;
        using RefreshStateChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizer, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizer>::remove_RefreshStateChanged>;
        [[nodiscard]] auto RefreshStateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RefreshVisualizer, winrt::Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs> const& handler) const;
        auto RefreshStateChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizer>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizerStatics
    {
        [[nodiscard]] auto InfoProviderProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto ContentProperty() const;
        [[nodiscard]] auto StateProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRelativePanel
    {
        [[nodiscard]] auto BackgroundSizing() const;
        auto BackgroundSizing(winrt::Microsoft::UI::Xaml::Controls::BackgroundSizing const& value) const;
        [[nodiscard]] auto BorderBrush() const;
        auto BorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BorderThickness() const;
        auto BorderThickness(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto CornerRadius() const;
        auto CornerRadius(winrt::Microsoft::UI::Xaml::CornerRadius const& value) const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRelativePanel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRelativePanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRelativePanelFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRelativePanelFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRelativePanelFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRelativePanelStatics
    {
        [[nodiscard]] auto BackgroundSizingProperty() const;
        [[nodiscard]] auto LeftOfProperty() const;
        auto GetLeftOf(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetLeftOf(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AboveProperty() const;
        auto GetAbove(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetAbove(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto RightOfProperty() const;
        auto GetRightOf(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetRightOf(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto BelowProperty() const;
        auto GetBelow(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetBelow(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AlignHorizontalCenterWithProperty() const;
        auto GetAlignHorizontalCenterWith(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetAlignHorizontalCenterWith(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AlignVerticalCenterWithProperty() const;
        auto GetAlignVerticalCenterWith(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetAlignVerticalCenterWith(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AlignLeftWithProperty() const;
        auto GetAlignLeftWith(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetAlignLeftWith(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AlignTopWithProperty() const;
        auto GetAlignTopWith(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetAlignTopWith(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AlignRightWithProperty() const;
        auto GetAlignRightWith(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetAlignRightWith(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AlignBottomWithProperty() const;
        auto GetAlignBottomWith(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetAlignBottomWith(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto AlignLeftWithPanelProperty() const;
        auto GetAlignLeftWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetAlignLeftWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element, bool value) const;
        [[nodiscard]] auto AlignTopWithPanelProperty() const;
        auto GetAlignTopWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetAlignTopWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element, bool value) const;
        [[nodiscard]] auto AlignRightWithPanelProperty() const;
        auto GetAlignRightWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetAlignRightWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element, bool value) const;
        [[nodiscard]] auto AlignBottomWithPanelProperty() const;
        auto GetAlignBottomWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetAlignBottomWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element, bool value) const;
        [[nodiscard]] auto AlignHorizontalCenterWithPanelProperty() const;
        auto GetAlignHorizontalCenterWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetAlignHorizontalCenterWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element, bool value) const;
        [[nodiscard]] auto AlignVerticalCenterWithPanelProperty() const;
        auto GetAlignVerticalCenterWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetAlignVerticalCenterWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element, bool value) const;
        [[nodiscard]] auto BorderBrushProperty() const;
        [[nodiscard]] auto BorderThicknessProperty() const;
        [[nodiscard]] auto CornerRadiusProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRelativePanelStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRelativePanelStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRevealListViewItemPresenter
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRevealListViewItemPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRevealListViewItemPresenterFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRevealListViewItemPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRichEditBox
    {
        [[nodiscard]] auto IsReadOnly() const;
        auto IsReadOnly(bool value) const;
        [[nodiscard]] auto AcceptsReturn() const;
        auto AcceptsReturn(bool value) const;
        [[nodiscard]] auto TextAlignment() const;
        auto TextAlignment(winrt::Microsoft::UI::Xaml::TextAlignment const& value) const;
        [[nodiscard]] auto TextWrapping() const;
        auto TextWrapping(winrt::Microsoft::UI::Xaml::TextWrapping const& value) const;
        [[nodiscard]] auto IsSpellCheckEnabled() const;
        auto IsSpellCheckEnabled(bool value) const;
        [[nodiscard]] auto IsTextPredictionEnabled() const;
        auto IsTextPredictionEnabled(bool value) const;
        [[nodiscard]] auto Document() const;
        [[nodiscard]] auto InputScope() const;
        auto InputScope(winrt::Microsoft::UI::Xaml::Input::InputScope const& value) const;
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto PlaceholderText() const;
        auto PlaceholderText(param::hstring const& value) const;
        [[nodiscard]] auto SelectionHighlightColor() const;
        auto SelectionHighlightColor(winrt::Microsoft::UI::Xaml::Media::SolidColorBrush const& value) const;
        [[nodiscard]] auto PreventKeyboardDisplayOnProgrammaticFocus() const;
        auto PreventKeyboardDisplayOnProgrammaticFocus(bool value) const;
        [[nodiscard]] auto IsColorFontEnabled() const;
        auto IsColorFontEnabled(bool value) const;
        [[nodiscard]] auto SelectionHighlightColorWhenNotFocused() const;
        auto SelectionHighlightColorWhenNotFocused(winrt::Microsoft::UI::Xaml::Media::SolidColorBrush const& value) const;
        [[nodiscard]] auto MaxLength() const;
        auto MaxLength(int32_t value) const;
        [[nodiscard]] auto HorizontalTextAlignment() const;
        auto HorizontalTextAlignment(winrt::Microsoft::UI::Xaml::TextAlignment const& value) const;
        [[nodiscard]] auto CharacterCasing() const;
        auto CharacterCasing(winrt::Microsoft::UI::Xaml::Controls::CharacterCasing const& value) const;
        [[nodiscard]] auto DisabledFormattingAccelerators() const;
        auto DisabledFormattingAccelerators(winrt::Microsoft::UI::Xaml::Controls::DisabledFormattingAccelerators const& value) const;
        [[nodiscard]] auto TextDocument() const;
        [[nodiscard]] auto SelectionFlyout() const;
        auto SelectionFlyout(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
        [[nodiscard]] auto ProofingMenuFlyout() const;
        [[nodiscard]] auto Description() const;
        auto Description(winrt::Windows::Foundation::IInspectable const& value) const;
        auto TextChanged(winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        using TextChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox>::remove_TextChanged>;
        [[nodiscard]] auto TextChanged(auto_revoke_t, winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        auto TextChanged(winrt::event_token const& token) const noexcept;
        auto SelectionChanged(winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox>::remove_SelectionChanged>;
        [[nodiscard]] auto SelectionChanged(auto_revoke_t, winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        auto SelectionChanged(winrt::event_token const& token) const noexcept;
        auto ContextMenuOpening(winrt::Microsoft::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        using ContextMenuOpening_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox>::remove_ContextMenuOpening>;
        [[nodiscard]] auto ContextMenuOpening(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        auto ContextMenuOpening(winrt::event_token const& token) const noexcept;
        auto Paste(winrt::Microsoft::UI::Xaml::Controls::TextControlPasteEventHandler const& handler) const;
        using Paste_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox>::remove_Paste>;
        [[nodiscard]] auto Paste(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::TextControlPasteEventHandler const& handler) const;
        auto Paste(winrt::event_token const& token) const noexcept;
        auto TextCompositionStarted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichEditBox, winrt::Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs> const& handler) const;
        using TextCompositionStarted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox>::remove_TextCompositionStarted>;
        [[nodiscard]] auto TextCompositionStarted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichEditBox, winrt::Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs> const& handler) const;
        auto TextCompositionStarted(winrt::event_token const& token) const noexcept;
        auto TextCompositionChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichEditBox, winrt::Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs> const& handler) const;
        using TextCompositionChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox>::remove_TextCompositionChanged>;
        [[nodiscard]] auto TextCompositionChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichEditBox, winrt::Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs> const& handler) const;
        auto TextCompositionChanged(winrt::event_token const& token) const noexcept;
        auto TextCompositionEnded(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichEditBox, winrt::Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs> const& handler) const;
        using TextCompositionEnded_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox>::remove_TextCompositionEnded>;
        [[nodiscard]] auto TextCompositionEnded(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichEditBox, winrt::Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs> const& handler) const;
        auto TextCompositionEnded(winrt::event_token const& token) const noexcept;
        auto CopyingToClipboard(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichEditBox, winrt::Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs> const& handler) const;
        using CopyingToClipboard_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox>::remove_CopyingToClipboard>;
        [[nodiscard]] auto CopyingToClipboard(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichEditBox, winrt::Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs> const& handler) const;
        auto CopyingToClipboard(winrt::event_token const& token) const noexcept;
        auto CuttingToClipboard(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichEditBox, winrt::Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs> const& handler) const;
        using CuttingToClipboard_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox>::remove_CuttingToClipboard>;
        [[nodiscard]] auto CuttingToClipboard(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichEditBox, winrt::Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs> const& handler) const;
        auto CuttingToClipboard(winrt::event_token const& token) const noexcept;
        auto SelectionChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichEditBox, winrt::Microsoft::UI::Xaml::Controls::RichEditBoxSelectionChangingEventArgs> const& handler) const;
        using SelectionChanging_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox>::remove_SelectionChanging>;
        [[nodiscard]] auto SelectionChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichEditBox, winrt::Microsoft::UI::Xaml::Controls::RichEditBoxSelectionChangingEventArgs> const& handler) const;
        auto SelectionChanging(winrt::event_token const& token) const noexcept;
        auto GetLinguisticAlternativesAsync() const;
        [[nodiscard]] auto TextReadingOrder() const;
        auto TextReadingOrder(winrt::Microsoft::UI::Xaml::TextReadingOrder const& value) const;
        [[nodiscard]] auto ClipboardCopyFormat() const;
        auto ClipboardCopyFormat(winrt::Microsoft::UI::Xaml::Controls::RichEditClipboardFormat const& value) const;
        [[nodiscard]] auto DesiredCandidateWindowAlignment() const;
        auto DesiredCandidateWindowAlignment(winrt::Microsoft::UI::Xaml::Controls::CandidateWindowAlignment const& value) const;
        auto CandidateWindowBoundsChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichEditBox, winrt::Microsoft::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> const& handler) const;
        using CandidateWindowBoundsChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox>::remove_CandidateWindowBoundsChanged>;
        [[nodiscard]] auto CandidateWindowBoundsChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichEditBox, winrt::Microsoft::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> const& handler) const;
        auto CandidateWindowBoundsChanged(winrt::event_token const& token) const noexcept;
        auto TextChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichEditBox, winrt::Microsoft::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs> const& handler) const;
        using TextChanging_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox>::remove_TextChanging>;
        [[nodiscard]] auto TextChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichEditBox, winrt::Microsoft::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs> const& handler) const;
        auto TextChanging(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRichEditBox>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRichEditBox<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRichEditBoxFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRichEditBoxFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRichEditBoxSelectionChangingEventArgs
    {
        [[nodiscard]] auto SelectionStart() const;
        [[nodiscard]] auto SelectionLength() const;
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxSelectionChangingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRichEditBoxSelectionChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRichEditBoxStatics
    {
        [[nodiscard]] auto IsReadOnlyProperty() const;
        [[nodiscard]] auto AcceptsReturnProperty() const;
        [[nodiscard]] auto TextAlignmentProperty() const;
        [[nodiscard]] auto TextWrappingProperty() const;
        [[nodiscard]] auto IsSpellCheckEnabledProperty() const;
        [[nodiscard]] auto IsTextPredictionEnabledProperty() const;
        [[nodiscard]] auto InputScopeProperty() const;
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto PlaceholderTextProperty() const;
        [[nodiscard]] auto SelectionHighlightColorProperty() const;
        [[nodiscard]] auto PreventKeyboardDisplayOnProgrammaticFocusProperty() const;
        [[nodiscard]] auto IsColorFontEnabledProperty() const;
        [[nodiscard]] auto SelectionHighlightColorWhenNotFocusedProperty() const;
        [[nodiscard]] auto MaxLengthProperty() const;
        [[nodiscard]] auto HorizontalTextAlignmentProperty() const;
        [[nodiscard]] auto CharacterCasingProperty() const;
        [[nodiscard]] auto DisabledFormattingAcceleratorsProperty() const;
        [[nodiscard]] auto SelectionFlyoutProperty() const;
        [[nodiscard]] auto ProofingMenuFlyoutProperty() const;
        [[nodiscard]] auto DescriptionProperty() const;
        [[nodiscard]] auto DesiredCandidateWindowAlignmentProperty() const;
        [[nodiscard]] auto TextReadingOrderProperty() const;
        [[nodiscard]] auto ClipboardCopyFormatProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRichEditBoxStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRichEditBoxTextChangingEventArgs
    {
        [[nodiscard]] auto IsContentChanging() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRichEditBoxTextChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRichTextBlock
    {
        [[nodiscard]] auto FontSize() const;
        auto FontSize(double value) const;
        [[nodiscard]] auto FontFamily() const;
        auto FontFamily(winrt::Microsoft::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto FontWeight() const;
        auto FontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto FontStyle() const;
        auto FontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto FontStretch() const;
        auto FontStretch(winrt::Windows::UI::Text::FontStretch const& value) const;
        [[nodiscard]] auto Foreground() const;
        auto Foreground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto TextWrapping() const;
        auto TextWrapping(winrt::Microsoft::UI::Xaml::TextWrapping const& value) const;
        [[nodiscard]] auto TextTrimming() const;
        auto TextTrimming(winrt::Microsoft::UI::Xaml::TextTrimming const& value) const;
        [[nodiscard]] auto TextAlignment() const;
        auto TextAlignment(winrt::Microsoft::UI::Xaml::TextAlignment const& value) const;
        [[nodiscard]] auto Blocks() const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto LineHeight() const;
        auto LineHeight(double value) const;
        [[nodiscard]] auto LineStackingStrategy() const;
        auto LineStackingStrategy(winrt::Microsoft::UI::Xaml::LineStackingStrategy const& value) const;
        [[nodiscard]] auto CharacterSpacing() const;
        auto CharacterSpacing(int32_t value) const;
        [[nodiscard]] auto OverflowContentTarget() const;
        auto OverflowContentTarget(winrt::Microsoft::UI::Xaml::Controls::RichTextBlockOverflow const& value) const;
        [[nodiscard]] auto IsTextSelectionEnabled() const;
        auto IsTextSelectionEnabled(bool value) const;
        [[nodiscard]] auto HasOverflowContent() const;
        [[nodiscard]] auto SelectedText() const;
        [[nodiscard]] auto ContentStart() const;
        [[nodiscard]] auto ContentEnd() const;
        [[nodiscard]] auto SelectionStart() const;
        [[nodiscard]] auto SelectionEnd() const;
        [[nodiscard]] auto BaselineOffset() const;
        [[nodiscard]] auto MaxLines() const;
        auto MaxLines(int32_t value) const;
        [[nodiscard]] auto TextLineBounds() const;
        auto TextLineBounds(winrt::Microsoft::UI::Xaml::TextLineBounds const& value) const;
        [[nodiscard]] auto SelectionHighlightColor() const;
        auto SelectionHighlightColor(winrt::Microsoft::UI::Xaml::Media::SolidColorBrush const& value) const;
        [[nodiscard]] auto OpticalMarginAlignment() const;
        auto OpticalMarginAlignment(winrt::Microsoft::UI::Xaml::OpticalMarginAlignment const& value) const;
        [[nodiscard]] auto IsColorFontEnabled() const;
        auto IsColorFontEnabled(bool value) const;
        [[nodiscard]] auto TextReadingOrder() const;
        auto TextReadingOrder(winrt::Microsoft::UI::Xaml::TextReadingOrder const& value) const;
        [[nodiscard]] auto IsTextScaleFactorEnabled() const;
        auto IsTextScaleFactorEnabled(bool value) const;
        [[nodiscard]] auto TextDecorations() const;
        auto TextDecorations(winrt::Windows::UI::Text::TextDecorations const& value) const;
        [[nodiscard]] auto IsTextTrimmed() const;
        [[nodiscard]] auto HorizontalTextAlignment() const;
        auto HorizontalTextAlignment(winrt::Microsoft::UI::Xaml::TextAlignment const& value) const;
        [[nodiscard]] auto TextHighlighters() const;
        [[nodiscard]] auto SelectionFlyout() const;
        auto SelectionFlyout(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
        auto SelectionChanged(winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlock, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlock>::remove_SelectionChanged>;
        [[nodiscard]] auto SelectionChanged(auto_revoke_t, winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        auto SelectionChanged(winrt::event_token const& token) const noexcept;
        auto ContextMenuOpening(winrt::Microsoft::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        using ContextMenuOpening_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlock, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlock>::remove_ContextMenuOpening>;
        [[nodiscard]] auto ContextMenuOpening(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        auto ContextMenuOpening(winrt::event_token const& token) const noexcept;
        auto IsTextTrimmedChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichTextBlock, winrt::Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& handler) const;
        using IsTextTrimmedChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlock, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlock>::remove_IsTextTrimmedChanged>;
        [[nodiscard]] auto IsTextTrimmedChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichTextBlock, winrt::Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& handler) const;
        auto IsTextTrimmedChanged(winrt::event_token const& token) const noexcept;
        auto SelectAll() const;
        auto Select(winrt::Microsoft::UI::Xaml::Documents::TextPointer const& start, winrt::Microsoft::UI::Xaml::Documents::TextPointer const& end) const;
        auto GetPositionFromPoint(winrt::Windows::Foundation::Point const& point) const;
        auto CopySelectionToClipboard() const;
        [[nodiscard]] auto TextIndent() const;
        auto TextIndent(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlock>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRichTextBlock<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRichTextBlockOverflow
    {
        [[nodiscard]] auto OverflowContentTarget() const;
        auto OverflowContentTarget(winrt::Microsoft::UI::Xaml::Controls::RichTextBlockOverflow const& value) const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto ContentSource() const;
        [[nodiscard]] auto HasOverflowContent() const;
        [[nodiscard]] auto ContentStart() const;
        [[nodiscard]] auto ContentEnd() const;
        [[nodiscard]] auto BaselineOffset() const;
        [[nodiscard]] auto MaxLines() const;
        auto MaxLines(int32_t value) const;
        [[nodiscard]] auto IsTextTrimmed() const;
        auto IsTextTrimmedChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichTextBlockOverflow, winrt::Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& handler) const;
        using IsTextTrimmedChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow>::remove_IsTextTrimmedChanged>;
        [[nodiscard]] auto IsTextTrimmedChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::RichTextBlockOverflow, winrt::Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& handler) const;
        auto IsTextTrimmedChanged(winrt::event_token const& token) const noexcept;
        auto GetPositionFromPoint(winrt::Windows::Foundation::Point const& point) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRichTextBlockOverflow<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRichTextBlockOverflowStatics
    {
        [[nodiscard]] auto OverflowContentTargetProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
        [[nodiscard]] auto HasOverflowContentProperty() const;
        [[nodiscard]] auto MaxLinesProperty() const;
        [[nodiscard]] auto IsTextTrimmedProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflowStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRichTextBlockOverflowStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRichTextBlockStatics
    {
        [[nodiscard]] auto FontSizeProperty() const;
        [[nodiscard]] auto FontFamilyProperty() const;
        [[nodiscard]] auto FontWeightProperty() const;
        [[nodiscard]] auto FontStyleProperty() const;
        [[nodiscard]] auto FontStretchProperty() const;
        [[nodiscard]] auto ForegroundProperty() const;
        [[nodiscard]] auto TextWrappingProperty() const;
        [[nodiscard]] auto TextTrimmingProperty() const;
        [[nodiscard]] auto TextAlignmentProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
        [[nodiscard]] auto LineHeightProperty() const;
        [[nodiscard]] auto LineStackingStrategyProperty() const;
        [[nodiscard]] auto CharacterSpacingProperty() const;
        [[nodiscard]] auto OverflowContentTargetProperty() const;
        [[nodiscard]] auto IsTextSelectionEnabledProperty() const;
        [[nodiscard]] auto HasOverflowContentProperty() const;
        [[nodiscard]] auto SelectedTextProperty() const;
        [[nodiscard]] auto MaxLinesProperty() const;
        [[nodiscard]] auto TextLineBoundsProperty() const;
        [[nodiscard]] auto SelectionHighlightColorProperty() const;
        [[nodiscard]] auto OpticalMarginAlignmentProperty() const;
        [[nodiscard]] auto IsColorFontEnabledProperty() const;
        [[nodiscard]] auto TextReadingOrderProperty() const;
        [[nodiscard]] auto IsTextScaleFactorEnabledProperty() const;
        [[nodiscard]] auto TextDecorationsProperty() const;
        [[nodiscard]] auto IsTextTrimmedProperty() const;
        [[nodiscard]] auto HorizontalTextAlignmentProperty() const;
        [[nodiscard]] auto SelectionFlyoutProperty() const;
        [[nodiscard]] auto TextIndentProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRichTextBlockStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRowDefinition
    {
        [[nodiscard]] auto Height() const;
        auto Height(winrt::Microsoft::UI::Xaml::GridLength const& value) const;
        [[nodiscard]] auto MaxHeight() const;
        auto MaxHeight(double value) const;
        [[nodiscard]] auto MinHeight() const;
        auto MinHeight(double value) const;
        [[nodiscard]] auto ActualHeight() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRowDefinition>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRowDefinition<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRowDefinitionStatics
    {
        [[nodiscard]] auto HeightProperty() const;
        [[nodiscard]] auto MaxHeightProperty() const;
        [[nodiscard]] auto MinHeightProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IRowDefinitionStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRowDefinitionStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollAnchorProvider
    {
        [[nodiscard]] auto CurrentAnchor() const;
        auto RegisterAnchorCandidate(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto UnregisterAnchorCandidate(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollAnchorProvider>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollAnchorProvider<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollContentPresenter
    {
        [[nodiscard]] auto CanVerticallyScroll() const;
        auto CanVerticallyScroll(bool value) const;
        [[nodiscard]] auto CanHorizontallyScroll() const;
        auto CanHorizontallyScroll(bool value) const;
        [[nodiscard]] auto ExtentWidth() const;
        [[nodiscard]] auto ExtentHeight() const;
        [[nodiscard]] auto ViewportWidth() const;
        [[nodiscard]] auto ViewportHeight() const;
        [[nodiscard]] auto HorizontalOffset() const;
        [[nodiscard]] auto VerticalOffset() const;
        [[nodiscard]] auto ScrollOwner() const;
        auto ScrollOwner(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto CanContentRenderOutsideBounds() const;
        auto CanContentRenderOutsideBounds(bool value) const;
        [[nodiscard]] auto SizesContentToTemplatedParent() const;
        auto SizesContentToTemplatedParent(bool value) const;
        auto LineUp() const;
        auto LineDown() const;
        auto LineLeft() const;
        auto LineRight() const;
        auto PageUp() const;
        auto PageDown() const;
        auto PageLeft() const;
        auto PageRight() const;
        auto MouseWheelUp() const;
        auto MouseWheelDown() const;
        auto MouseWheelLeft() const;
        auto MouseWheelRight() const;
        auto SetHorizontalOffset(double offset) const;
        auto SetVerticalOffset(double offset) const;
        auto MakeVisible(winrt::Microsoft::UI::Xaml::UIElement const& visual, winrt::Windows::Foundation::Rect const& rectangle) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollContentPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollContentPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollContentPresenterStatics
    {
        [[nodiscard]] auto CanContentRenderOutsideBoundsProperty() const;
        [[nodiscard]] auto SizesContentToTemplatedParentProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollContentPresenterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollContentPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollView
    {
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto CurrentAnchor() const;
        [[nodiscard]] auto ScrollPresenter() const;
        [[nodiscard]] auto ExpressionAnimationSources() const;
        [[nodiscard]] auto HorizontalOffset() const;
        [[nodiscard]] auto VerticalOffset() const;
        [[nodiscard]] auto ZoomFactor() const;
        [[nodiscard]] auto ExtentWidth() const;
        [[nodiscard]] auto ExtentHeight() const;
        [[nodiscard]] auto ViewportWidth() const;
        [[nodiscard]] auto ViewportHeight() const;
        [[nodiscard]] auto ScrollableWidth() const;
        [[nodiscard]] auto ScrollableHeight() const;
        [[nodiscard]] auto State() const;
        [[nodiscard]] auto HorizontalScrollBarVisibility() const;
        auto HorizontalScrollBarVisibility(winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollBarVisibility const& value) const;
        [[nodiscard]] auto VerticalScrollBarVisibility() const;
        auto VerticalScrollBarVisibility(winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollBarVisibility const& value) const;
        [[nodiscard]] auto ContentOrientation() const;
        auto ContentOrientation(winrt::Microsoft::UI::Xaml::Controls::ScrollingContentOrientation const& value) const;
        [[nodiscard]] auto HorizontalScrollChainMode() const;
        auto HorizontalScrollChainMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingChainMode const& value) const;
        [[nodiscard]] auto VerticalScrollChainMode() const;
        auto VerticalScrollChainMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingChainMode const& value) const;
        [[nodiscard]] auto HorizontalScrollRailMode() const;
        auto HorizontalScrollRailMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingRailMode const& value) const;
        [[nodiscard]] auto VerticalScrollRailMode() const;
        auto VerticalScrollRailMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingRailMode const& value) const;
        [[nodiscard]] auto HorizontalScrollMode() const;
        auto HorizontalScrollMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollMode const& value) const;
        [[nodiscard]] auto VerticalScrollMode() const;
        auto VerticalScrollMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollMode const& value) const;
        [[nodiscard]] auto ComputedHorizontalScrollBarVisibility() const;
        [[nodiscard]] auto ComputedVerticalScrollBarVisibility() const;
        [[nodiscard]] auto ComputedHorizontalScrollMode() const;
        [[nodiscard]] auto ComputedVerticalScrollMode() const;
        [[nodiscard]] auto ZoomChainMode() const;
        auto ZoomChainMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingChainMode const& value) const;
        [[nodiscard]] auto ZoomMode() const;
        auto ZoomMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomMode const& value) const;
        [[nodiscard]] auto IgnoredInputKinds() const;
        auto IgnoredInputKinds(winrt::Microsoft::UI::Xaml::Controls::ScrollingInputKinds const& value) const;
        [[nodiscard]] auto MinZoomFactor() const;
        auto MinZoomFactor(double value) const;
        [[nodiscard]] auto MaxZoomFactor() const;
        auto MaxZoomFactor(double value) const;
        [[nodiscard]] auto HorizontalAnchorRatio() const;
        auto HorizontalAnchorRatio(double value) const;
        [[nodiscard]] auto VerticalAnchorRatio() const;
        auto VerticalAnchorRatio(double value) const;
        auto RegisterAnchorCandidate(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto UnregisterAnchorCandidate(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto ScrollTo(double horizontalOffset, double verticalOffset) const;
        auto ScrollTo(double horizontalOffset, double verticalOffset, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollOptions const& options) const;
        auto ScrollBy(double horizontalOffsetDelta, double verticalOffsetDelta) const;
        auto ScrollBy(double horizontalOffsetDelta, double verticalOffsetDelta, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollOptions const& options) const;
        auto AddScrollVelocity(winrt::Windows::Foundation::Numerics::float2 const& offsetsVelocity, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& inertiaDecayRate) const;
        auto ZoomTo(float zoomFactor, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& centerPoint) const;
        auto ZoomTo(float zoomFactor, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& centerPoint, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomOptions const& options) const;
        auto ZoomBy(float zoomFactorDelta, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& centerPoint) const;
        auto ZoomBy(float zoomFactorDelta, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& centerPoint, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomOptions const& options) const;
        auto AddZoomVelocity(float zoomFactorVelocity, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& centerPoint, winrt::Windows::Foundation::IReference<float> const& inertiaDecayRate) const;
        auto ExtentChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ExtentChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IScrollView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IScrollView>::remove_ExtentChanged>;
        [[nodiscard]] auto ExtentChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto ExtentChanged(winrt::event_token const& token) const noexcept;
        auto StateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using StateChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IScrollView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IScrollView>::remove_StateChanged>;
        [[nodiscard]] auto StateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto StateChanged(winrt::event_token const& token) const noexcept;
        auto ViewChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ViewChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IScrollView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IScrollView>::remove_ViewChanged>;
        [[nodiscard]] auto ViewChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto ViewChanged(winrt::event_token const& token) const noexcept;
        auto ScrollAnimationStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollAnimationStartingEventArgs> const& handler) const;
        using ScrollAnimationStarting_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IScrollView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IScrollView>::remove_ScrollAnimationStarting>;
        [[nodiscard]] auto ScrollAnimationStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollAnimationStartingEventArgs> const& handler) const;
        auto ScrollAnimationStarting(winrt::event_token const& token) const noexcept;
        auto ZoomAnimationStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomAnimationStartingEventArgs> const& handler) const;
        using ZoomAnimationStarting_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IScrollView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IScrollView>::remove_ZoomAnimationStarting>;
        [[nodiscard]] auto ZoomAnimationStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomAnimationStartingEventArgs> const& handler) const;
        auto ZoomAnimationStarting(winrt::event_token const& token) const noexcept;
        auto ScrollCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollCompletedEventArgs> const& handler) const;
        using ScrollCompleted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IScrollView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IScrollView>::remove_ScrollCompleted>;
        [[nodiscard]] auto ScrollCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollCompletedEventArgs> const& handler) const;
        auto ScrollCompleted(winrt::event_token const& token) const noexcept;
        auto ZoomCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomCompletedEventArgs> const& handler) const;
        using ZoomCompleted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IScrollView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IScrollView>::remove_ZoomCompleted>;
        [[nodiscard]] auto ZoomCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomCompletedEventArgs> const& handler) const;
        auto ZoomCompleted(winrt::event_token const& token) const noexcept;
        auto BringingIntoView(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Microsoft::UI::Xaml::Controls::ScrollingBringingIntoViewEventArgs> const& handler) const;
        using BringingIntoView_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IScrollView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IScrollView>::remove_BringingIntoView>;
        [[nodiscard]] auto BringingIntoView(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Microsoft::UI::Xaml::Controls::ScrollingBringingIntoViewEventArgs> const& handler) const;
        auto BringingIntoView(winrt::event_token const& token) const noexcept;
        auto AnchorRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Microsoft::UI::Xaml::Controls::ScrollingAnchorRequestedEventArgs> const& handler) const;
        using AnchorRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IScrollView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IScrollView>::remove_AnchorRequested>;
        [[nodiscard]] auto AnchorRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollView, winrt::Microsoft::UI::Xaml::Controls::ScrollingAnchorRequestedEventArgs> const& handler) const;
        auto AnchorRequested(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollViewStatics
    {
        [[nodiscard]] auto ContentProperty() const;
        [[nodiscard]] auto ScrollPresenterProperty() const;
        [[nodiscard]] auto HorizontalScrollBarVisibilityProperty() const;
        [[nodiscard]] auto VerticalScrollBarVisibilityProperty() const;
        [[nodiscard]] auto ContentOrientationProperty() const;
        [[nodiscard]] auto HorizontalScrollChainModeProperty() const;
        [[nodiscard]] auto VerticalScrollChainModeProperty() const;
        [[nodiscard]] auto HorizontalScrollRailModeProperty() const;
        [[nodiscard]] auto VerticalScrollRailModeProperty() const;
        [[nodiscard]] auto HorizontalScrollModeProperty() const;
        [[nodiscard]] auto VerticalScrollModeProperty() const;
        [[nodiscard]] auto ComputedHorizontalScrollBarVisibilityProperty() const;
        [[nodiscard]] auto ComputedVerticalScrollBarVisibilityProperty() const;
        [[nodiscard]] auto ComputedHorizontalScrollModeProperty() const;
        [[nodiscard]] auto ComputedVerticalScrollModeProperty() const;
        [[nodiscard]] auto ZoomChainModeProperty() const;
        [[nodiscard]] auto ZoomModeProperty() const;
        [[nodiscard]] auto IgnoredInputKindsProperty() const;
        [[nodiscard]] auto MinZoomFactorProperty() const;
        [[nodiscard]] auto MaxZoomFactorProperty() const;
        [[nodiscard]] auto HorizontalAnchorRatioProperty() const;
        [[nodiscard]] auto VerticalAnchorRatioProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollViewStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollViewStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollViewer
    {
        [[nodiscard]] auto HorizontalScrollBarVisibility() const;
        auto HorizontalScrollBarVisibility(winrt::Microsoft::UI::Xaml::Controls::ScrollBarVisibility const& value) const;
        [[nodiscard]] auto VerticalScrollBarVisibility() const;
        auto VerticalScrollBarVisibility(winrt::Microsoft::UI::Xaml::Controls::ScrollBarVisibility const& value) const;
        [[nodiscard]] auto IsHorizontalRailEnabled() const;
        auto IsHorizontalRailEnabled(bool value) const;
        [[nodiscard]] auto IsVerticalRailEnabled() const;
        auto IsVerticalRailEnabled(bool value) const;
        [[nodiscard]] auto IsHorizontalScrollChainingEnabled() const;
        auto IsHorizontalScrollChainingEnabled(bool value) const;
        [[nodiscard]] auto IsVerticalScrollChainingEnabled() const;
        auto IsVerticalScrollChainingEnabled(bool value) const;
        [[nodiscard]] auto IsZoomChainingEnabled() const;
        auto IsZoomChainingEnabled(bool value) const;
        [[nodiscard]] auto IsScrollInertiaEnabled() const;
        auto IsScrollInertiaEnabled(bool value) const;
        [[nodiscard]] auto IsZoomInertiaEnabled() const;
        auto IsZoomInertiaEnabled(bool value) const;
        [[nodiscard]] auto HorizontalScrollMode() const;
        auto HorizontalScrollMode(winrt::Microsoft::UI::Xaml::Controls::ScrollMode const& value) const;
        [[nodiscard]] auto VerticalScrollMode() const;
        auto VerticalScrollMode(winrt::Microsoft::UI::Xaml::Controls::ScrollMode const& value) const;
        [[nodiscard]] auto ZoomMode() const;
        auto ZoomMode(winrt::Microsoft::UI::Xaml::Controls::ZoomMode const& value) const;
        [[nodiscard]] auto HorizontalSnapPointsAlignment() const;
        auto HorizontalSnapPointsAlignment(winrt::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment const& value) const;
        [[nodiscard]] auto VerticalSnapPointsAlignment() const;
        auto VerticalSnapPointsAlignment(winrt::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment const& value) const;
        [[nodiscard]] auto HorizontalSnapPointsType() const;
        auto HorizontalSnapPointsType(winrt::Microsoft::UI::Xaml::Controls::SnapPointsType const& value) const;
        [[nodiscard]] auto VerticalSnapPointsType() const;
        auto VerticalSnapPointsType(winrt::Microsoft::UI::Xaml::Controls::SnapPointsType const& value) const;
        [[nodiscard]] auto ZoomSnapPointsType() const;
        auto ZoomSnapPointsType(winrt::Microsoft::UI::Xaml::Controls::SnapPointsType const& value) const;
        [[nodiscard]] auto HorizontalOffset() const;
        [[nodiscard]] auto ViewportWidth() const;
        [[nodiscard]] auto ScrollableWidth() const;
        [[nodiscard]] auto ComputedHorizontalScrollBarVisibility() const;
        [[nodiscard]] auto ExtentWidth() const;
        [[nodiscard]] auto VerticalOffset() const;
        [[nodiscard]] auto ViewportHeight() const;
        [[nodiscard]] auto ScrollableHeight() const;
        [[nodiscard]] auto ComputedVerticalScrollBarVisibility() const;
        [[nodiscard]] auto ExtentHeight() const;
        [[nodiscard]] auto MinZoomFactor() const;
        auto MinZoomFactor(float value) const;
        [[nodiscard]] auto MaxZoomFactor() const;
        auto MaxZoomFactor(float value) const;
        [[nodiscard]] auto ZoomFactor() const;
        [[nodiscard]] auto ZoomSnapPoints() const;
        [[nodiscard]] auto TopLeftHeader() const;
        auto TopLeftHeader(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto LeftHeader() const;
        auto LeftHeader(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto TopHeader() const;
        auto TopHeader(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto ReduceViewportForCoreInputViewOcclusions() const;
        auto ReduceViewportForCoreInputViewOcclusions(bool value) const;
        [[nodiscard]] auto HorizontalAnchorRatio() const;
        auto HorizontalAnchorRatio(double value) const;
        [[nodiscard]] auto VerticalAnchorRatio() const;
        auto VerticalAnchorRatio(double value) const;
        [[nodiscard]] auto CanContentRenderOutsideBounds() const;
        auto CanContentRenderOutsideBounds(bool value) const;
        auto AnchorRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollViewer, winrt::Microsoft::UI::Xaml::Controls::AnchorRequestedEventArgs> const& handler) const;
        using AnchorRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IScrollViewer, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IScrollViewer>::remove_AnchorRequested>;
        [[nodiscard]] auto AnchorRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollViewer, winrt::Microsoft::UI::Xaml::Controls::AnchorRequestedEventArgs> const& handler) const;
        auto AnchorRequested(winrt::event_token const& token) const noexcept;
        auto ViewChanging(winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs> const& handler) const;
        using ViewChanging_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IScrollViewer, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IScrollViewer>::remove_ViewChanging>;
        [[nodiscard]] auto ViewChanging(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs> const& handler) const;
        auto ViewChanging(winrt::event_token const& token) const noexcept;
        auto ViewChanged(winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs> const& handler) const;
        using ViewChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IScrollViewer, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IScrollViewer>::remove_ViewChanged>;
        [[nodiscard]] auto ViewChanged(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs> const& handler) const;
        auto ViewChanged(winrt::event_token const& token) const noexcept;
        auto DirectManipulationStarted(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using DirectManipulationStarted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IScrollViewer, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IScrollViewer>::remove_DirectManipulationStarted>;
        [[nodiscard]] auto DirectManipulationStarted(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto DirectManipulationStarted(winrt::event_token const& token) const noexcept;
        auto DirectManipulationCompleted(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using DirectManipulationCompleted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IScrollViewer, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IScrollViewer>::remove_DirectManipulationCompleted>;
        [[nodiscard]] auto DirectManipulationCompleted(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto DirectManipulationCompleted(winrt::event_token const& token) const noexcept;
        auto ScrollToHorizontalOffset(double offset) const;
        auto ScrollToVerticalOffset(double offset) const;
        auto ZoomToFactor(float factor) const;
        auto ChangeView(winrt::Windows::Foundation::IReference<double> const& horizontalOffset, winrt::Windows::Foundation::IReference<double> const& verticalOffset, winrt::Windows::Foundation::IReference<float> const& zoomFactor) const;
        auto ChangeView(winrt::Windows::Foundation::IReference<double> const& horizontalOffset, winrt::Windows::Foundation::IReference<double> const& verticalOffset, winrt::Windows::Foundation::IReference<float> const& zoomFactor, bool disableAnimation) const;
        auto InvalidateScrollInfo() const;
        [[nodiscard]] auto IsDeferredScrollingEnabled() const;
        auto IsDeferredScrollingEnabled(bool value) const;
        [[nodiscard]] auto BringIntoViewOnFocusChange() const;
        auto BringIntoViewOnFocusChange(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollViewer>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics
    {
        [[nodiscard]] auto HorizontalSnapPointsAlignmentProperty() const;
        [[nodiscard]] auto VerticalSnapPointsAlignmentProperty() const;
        [[nodiscard]] auto HorizontalSnapPointsTypeProperty() const;
        [[nodiscard]] auto VerticalSnapPointsTypeProperty() const;
        [[nodiscard]] auto ZoomSnapPointsTypeProperty() const;
        [[nodiscard]] auto HorizontalOffsetProperty() const;
        [[nodiscard]] auto ViewportWidthProperty() const;
        [[nodiscard]] auto ScrollableWidthProperty() const;
        [[nodiscard]] auto ComputedHorizontalScrollBarVisibilityProperty() const;
        [[nodiscard]] auto ExtentWidthProperty() const;
        [[nodiscard]] auto VerticalOffsetProperty() const;
        [[nodiscard]] auto ViewportHeightProperty() const;
        [[nodiscard]] auto ScrollableHeightProperty() const;
        [[nodiscard]] auto ComputedVerticalScrollBarVisibilityProperty() const;
        [[nodiscard]] auto ExtentHeightProperty() const;
        [[nodiscard]] auto MinZoomFactorProperty() const;
        [[nodiscard]] auto MaxZoomFactorProperty() const;
        [[nodiscard]] auto ZoomFactorProperty() const;
        [[nodiscard]] auto ZoomSnapPointsProperty() const;
        [[nodiscard]] auto TopLeftHeaderProperty() const;
        [[nodiscard]] auto LeftHeaderProperty() const;
        [[nodiscard]] auto TopHeaderProperty() const;
        [[nodiscard]] auto ReduceViewportForCoreInputViewOcclusionsProperty() const;
        [[nodiscard]] auto HorizontalAnchorRatioProperty() const;
        [[nodiscard]] auto VerticalAnchorRatioProperty() const;
        [[nodiscard]] auto HorizontalScrollBarVisibilityProperty() const;
        auto GetHorizontalScrollBarVisibility(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetHorizontalScrollBarVisibility(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Microsoft::UI::Xaml::Controls::ScrollBarVisibility const& horizontalScrollBarVisibility) const;
        [[nodiscard]] auto VerticalScrollBarVisibilityProperty() const;
        auto GetVerticalScrollBarVisibility(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetVerticalScrollBarVisibility(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Microsoft::UI::Xaml::Controls::ScrollBarVisibility const& verticalScrollBarVisibility) const;
        [[nodiscard]] auto IsHorizontalRailEnabledProperty() const;
        auto GetIsHorizontalRailEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetIsHorizontalRailEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool isHorizontalRailEnabled) const;
        [[nodiscard]] auto IsVerticalRailEnabledProperty() const;
        auto GetIsVerticalRailEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetIsVerticalRailEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool isVerticalRailEnabled) const;
        [[nodiscard]] auto IsHorizontalScrollChainingEnabledProperty() const;
        auto GetIsHorizontalScrollChainingEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetIsHorizontalScrollChainingEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool isHorizontalScrollChainingEnabled) const;
        [[nodiscard]] auto IsVerticalScrollChainingEnabledProperty() const;
        auto GetIsVerticalScrollChainingEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetIsVerticalScrollChainingEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool isVerticalScrollChainingEnabled) const;
        [[nodiscard]] auto IsZoomChainingEnabledProperty() const;
        auto GetIsZoomChainingEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetIsZoomChainingEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool isZoomChainingEnabled) const;
        [[nodiscard]] auto IsScrollInertiaEnabledProperty() const;
        auto GetIsScrollInertiaEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetIsScrollInertiaEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool isScrollInertiaEnabled) const;
        [[nodiscard]] auto IsZoomInertiaEnabledProperty() const;
        auto GetIsZoomInertiaEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetIsZoomInertiaEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool isZoomInertiaEnabled) const;
        [[nodiscard]] auto HorizontalScrollModeProperty() const;
        auto GetHorizontalScrollMode(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetHorizontalScrollMode(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Microsoft::UI::Xaml::Controls::ScrollMode const& horizontalScrollMode) const;
        [[nodiscard]] auto VerticalScrollModeProperty() const;
        auto GetVerticalScrollMode(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetVerticalScrollMode(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Microsoft::UI::Xaml::Controls::ScrollMode const& verticalScrollMode) const;
        [[nodiscard]] auto ZoomModeProperty() const;
        auto GetZoomMode(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetZoomMode(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Microsoft::UI::Xaml::Controls::ZoomMode const& zoomMode) const;
        [[nodiscard]] auto CanContentRenderOutsideBoundsProperty() const;
        auto GetCanContentRenderOutsideBounds(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetCanContentRenderOutsideBounds(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool canContentRenderOutsideBounds) const;
        [[nodiscard]] auto IsDeferredScrollingEnabledProperty() const;
        auto GetIsDeferredScrollingEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetIsDeferredScrollingEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool isDeferredScrollingEnabled) const;
        [[nodiscard]] auto BringIntoViewOnFocusChangeProperty() const;
        auto GetBringIntoViewOnFocusChange(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetBringIntoViewOnFocusChange(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool bringIntoViewOnFocusChange) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollViewerView
    {
        [[nodiscard]] auto HorizontalOffset() const;
        [[nodiscard]] auto VerticalOffset() const;
        [[nodiscard]] auto ZoomFactor() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollViewerView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollViewerViewChangedEventArgs
    {
        [[nodiscard]] auto IsIntermediate() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollViewerViewChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollViewerViewChangingEventArgs
    {
        [[nodiscard]] auto NextView() const;
        [[nodiscard]] auto FinalView() const;
        [[nodiscard]] auto IsInertial() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollViewerViewChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollingAnchorRequestedEventArgs
    {
        [[nodiscard]] auto AnchorCandidates() const;
        [[nodiscard]] auto AnchorElement() const;
        auto AnchorElement(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollingAnchorRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollingAnchorRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollingBringingIntoViewEventArgs
    {
        [[nodiscard]] auto SnapPointsMode() const;
        auto SnapPointsMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingSnapPointsMode const& value) const;
        [[nodiscard]] auto RequestEventArgs() const;
        [[nodiscard]] auto TargetHorizontalOffset() const;
        [[nodiscard]] auto TargetVerticalOffset() const;
        [[nodiscard]] auto CorrelationId() const;
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollingBringingIntoViewEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollingBringingIntoViewEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollingScrollAnimationStartingEventArgs
    {
        [[nodiscard]] auto Animation() const;
        auto Animation(winrt::Microsoft::UI::Composition::CompositionAnimation const& value) const;
        [[nodiscard]] auto StartPosition() const;
        [[nodiscard]] auto EndPosition() const;
        [[nodiscard]] auto CorrelationId() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollAnimationStartingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollingScrollAnimationStartingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollingScrollCompletedEventArgs
    {
        [[nodiscard]] auto CorrelationId() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollCompletedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollingScrollCompletedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollingScrollOptions
    {
        [[nodiscard]] auto AnimationMode() const;
        auto AnimationMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingAnimationMode const& value) const;
        [[nodiscard]] auto SnapPointsMode() const;
        auto SnapPointsMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingSnapPointsMode const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollOptions>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollingScrollOptions<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollingScrollOptionsFactory
    {
        auto CreateInstance(winrt::Microsoft::UI::Xaml::Controls::ScrollingAnimationMode const& animationMode, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
        auto CreateInstance2(winrt::Microsoft::UI::Xaml::Controls::ScrollingAnimationMode const& animationMode, winrt::Microsoft::UI::Xaml::Controls::ScrollingSnapPointsMode const& snapPointsMode, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollOptionsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollingScrollOptionsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollingZoomAnimationStartingEventArgs
    {
        [[nodiscard]] auto CenterPoint() const;
        [[nodiscard]] auto StartZoomFactor() const;
        [[nodiscard]] auto EndZoomFactor() const;
        [[nodiscard]] auto Animation() const;
        auto Animation(winrt::Microsoft::UI::Composition::CompositionAnimation const& value) const;
        [[nodiscard]] auto CorrelationId() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomAnimationStartingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollingZoomAnimationStartingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollingZoomCompletedEventArgs
    {
        [[nodiscard]] auto CorrelationId() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomCompletedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollingZoomCompletedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollingZoomOptions
    {
        [[nodiscard]] auto AnimationMode() const;
        auto AnimationMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingAnimationMode const& value) const;
        [[nodiscard]] auto SnapPointsMode() const;
        auto SnapPointsMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingSnapPointsMode const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomOptions>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollingZoomOptions<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IScrollingZoomOptionsFactory
    {
        auto CreateInstance(winrt::Microsoft::UI::Xaml::Controls::ScrollingAnimationMode const& animationMode, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
        auto CreateInstance2(winrt::Microsoft::UI::Xaml::Controls::ScrollingAnimationMode const& animationMode, winrt::Microsoft::UI::Xaml::Controls::ScrollingSnapPointsMode const& snapPointsMode, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomOptionsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IScrollingZoomOptionsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISectionsInViewChangedEventArgs
    {
        [[nodiscard]] auto AddedSections() const;
        [[nodiscard]] auto RemovedSections() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISectionsInViewChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISectionsInViewChangedEventArgsFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISectionsInViewChangedEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISelectionChangedEventArgs
    {
        [[nodiscard]] auto AddedItems() const;
        [[nodiscard]] auto RemovedItems() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISelectionChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISelectionChangedEventArgsFactory
    {
        auto CreateInstanceWithRemovedItemsAndAddedItems(param::vector<winrt::Windows::Foundation::IInspectable> const& removedItems, param::vector<winrt::Windows::Foundation::IInspectable> const& addedItems, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISelectionChangedEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISelectorBar
    {
        [[nodiscard]] auto Items() const;
        [[nodiscard]] auto SelectedItem() const;
        auto SelectedItem(winrt::Microsoft::UI::Xaml::Controls::SelectorBarItem const& value) const;
        auto SelectionChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::SelectorBar, winrt::Microsoft::UI::Xaml::Controls::SelectorBarSelectionChangedEventArgs> const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ISelectorBar, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ISelectorBar>::remove_SelectionChanged>;
        [[nodiscard]] auto SelectionChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::SelectorBar, winrt::Microsoft::UI::Xaml::Controls::SelectorBarSelectionChangedEventArgs> const& handler) const;
        auto SelectionChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISelectorBar>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISelectorBar<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISelectorBarFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISelectorBarFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISelectorBarItem
    {
        [[nodiscard]] auto Text() const;
        auto Text(param::hstring const& value) const;
        [[nodiscard]] auto Icon() const;
        auto Icon(winrt::Microsoft::UI::Xaml::Controls::IconElement const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISelectorBarItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISelectorBarItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISelectorBarItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISelectorBarItemStatics
    {
        [[nodiscard]] auto TextProperty() const;
        [[nodiscard]] auto IconProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISelectorBarItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISelectorBarSelectionChangedEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarSelectionChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISelectorBarSelectionChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISelectorBarStatics
    {
        [[nodiscard]] auto ItemsProperty() const;
        [[nodiscard]] auto SelectedItemProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISelectorBarStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISelectorBarStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISemanticZoom
    {
        [[nodiscard]] auto ZoomedInView() const;
        auto ZoomedInView(winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomInformation const& value) const;
        [[nodiscard]] auto ZoomedOutView() const;
        auto ZoomedOutView(winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomInformation const& value) const;
        [[nodiscard]] auto IsZoomedInViewActive() const;
        auto IsZoomedInViewActive(bool value) const;
        [[nodiscard]] auto CanChangeViews() const;
        auto CanChangeViews(bool value) const;
        auto ViewChangeStarted(winrt::Microsoft::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler const& handler) const;
        using ViewChangeStarted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoom, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoom>::remove_ViewChangeStarted>;
        [[nodiscard]] auto ViewChangeStarted(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler const& handler) const;
        auto ViewChangeStarted(winrt::event_token const& token) const noexcept;
        auto ViewChangeCompleted(winrt::Microsoft::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler const& handler) const;
        using ViewChangeCompleted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoom, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoom>::remove_ViewChangeCompleted>;
        [[nodiscard]] auto ViewChangeCompleted(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler const& handler) const;
        auto ViewChangeCompleted(winrt::event_token const& token) const noexcept;
        auto ToggleActiveView() const;
        [[nodiscard]] auto IsZoomOutButtonEnabled() const;
        auto IsZoomOutButtonEnabled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoom>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISemanticZoom<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISemanticZoomInformation
    {
        [[nodiscard]] auto SemanticZoomOwner() const;
        auto SemanticZoomOwner(winrt::Microsoft::UI::Xaml::Controls::SemanticZoom const& value) const;
        [[nodiscard]] auto IsActiveView() const;
        auto IsActiveView(bool value) const;
        [[nodiscard]] auto IsZoomedInView() const;
        auto IsZoomedInView(bool value) const;
        auto InitializeViewChange() const;
        auto CompleteViewChange() const;
        auto MakeVisible(winrt::Microsoft::UI::Xaml::Controls::SemanticZoomLocation const& item) const;
        auto StartViewChangeFrom(winrt::Microsoft::UI::Xaml::Controls::SemanticZoomLocation const& source, winrt::Microsoft::UI::Xaml::Controls::SemanticZoomLocation const& destination) const;
        auto StartViewChangeTo(winrt::Microsoft::UI::Xaml::Controls::SemanticZoomLocation const& source, winrt::Microsoft::UI::Xaml::Controls::SemanticZoomLocation const& destination) const;
        auto CompleteViewChangeFrom(winrt::Microsoft::UI::Xaml::Controls::SemanticZoomLocation const& source, winrt::Microsoft::UI::Xaml::Controls::SemanticZoomLocation const& destination) const;
        auto CompleteViewChangeTo(winrt::Microsoft::UI::Xaml::Controls::SemanticZoomLocation const& source, winrt::Microsoft::UI::Xaml::Controls::SemanticZoomLocation const& destination) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomInformation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISemanticZoomInformation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISemanticZoomLocation
    {
        [[nodiscard]] auto Item() const;
        auto Item(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto Bounds() const;
        auto Bounds(winrt::Windows::Foundation::Rect const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISemanticZoomLocation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISemanticZoomStatics
    {
        [[nodiscard]] auto ZoomedInViewProperty() const;
        [[nodiscard]] auto ZoomedOutViewProperty() const;
        [[nodiscard]] auto IsZoomedInViewActiveProperty() const;
        [[nodiscard]] auto CanChangeViewsProperty() const;
        [[nodiscard]] auto IsZoomOutButtonEnabledProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISemanticZoomStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISemanticZoomViewChangedEventArgs
    {
        [[nodiscard]] auto IsSourceZoomedInView() const;
        auto IsSourceZoomedInView(bool value) const;
        [[nodiscard]] auto SourceItem() const;
        auto SourceItem(winrt::Microsoft::UI::Xaml::Controls::SemanticZoomLocation const& value) const;
        [[nodiscard]] auto DestinationItem() const;
        auto DestinationItem(winrt::Microsoft::UI::Xaml::Controls::SemanticZoomLocation const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISemanticZoomViewChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISlider
    {
        [[nodiscard]] auto IntermediateValue() const;
        auto IntermediateValue(double value) const;
        [[nodiscard]] auto StepFrequency() const;
        auto StepFrequency(double value) const;
        [[nodiscard]] auto SnapsTo() const;
        auto SnapsTo(winrt::Microsoft::UI::Xaml::Controls::Primitives::SliderSnapsTo const& value) const;
        [[nodiscard]] auto TickFrequency() const;
        auto TickFrequency(double value) const;
        [[nodiscard]] auto TickPlacement() const;
        auto TickPlacement(winrt::Microsoft::UI::Xaml::Controls::Primitives::TickPlacement const& value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Microsoft::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] auto IsDirectionReversed() const;
        auto IsDirectionReversed(bool value) const;
        [[nodiscard]] auto IsThumbToolTipEnabled() const;
        auto IsThumbToolTipEnabled(bool value) const;
        [[nodiscard]] auto ThumbToolTipValueConverter() const;
        auto ThumbToolTipValueConverter(winrt::Microsoft::UI::Xaml::Data::IValueConverter const& value) const;
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISlider>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISlider<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISliderFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISliderFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISliderFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISliderStatics
    {
        [[nodiscard]] auto IntermediateValueProperty() const;
        [[nodiscard]] auto StepFrequencyProperty() const;
        [[nodiscard]] auto SnapsToProperty() const;
        [[nodiscard]] auto TickFrequencyProperty() const;
        [[nodiscard]] auto TickPlacementProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto IsDirectionReversedProperty() const;
        [[nodiscard]] auto IsThumbToolTipEnabledProperty() const;
        [[nodiscard]] auto ThumbToolTipValueConverterProperty() const;
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISliderStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISliderStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISplitButton
    {
        [[nodiscard]] auto Flyout() const;
        auto Flyout(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
        [[nodiscard]] auto Command() const;
        auto Command(winrt::Microsoft::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] auto CommandParameter() const;
        auto CommandParameter(winrt::Windows::Foundation::IInspectable const& value) const;
        auto Click(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::SplitButton, winrt::Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs> const& handler) const;
        using Click_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ISplitButton, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ISplitButton>::remove_Click>;
        [[nodiscard]] auto Click(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::SplitButton, winrt::Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs> const& handler) const;
        auto Click(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISplitButton>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitButton<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISplitButtonClickEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitButtonClickEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISplitButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitButtonFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISplitButtonStatics
    {
        [[nodiscard]] auto FlyoutProperty() const;
        [[nodiscard]] auto CommandProperty() const;
        [[nodiscard]] auto CommandParameterProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitButtonStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISplitView
    {
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto Pane() const;
        auto Pane(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto IsPaneOpen() const;
        auto IsPaneOpen(bool value) const;
        [[nodiscard]] auto OpenPaneLength() const;
        auto OpenPaneLength(double value) const;
        [[nodiscard]] auto CompactPaneLength() const;
        auto CompactPaneLength(double value) const;
        [[nodiscard]] auto PanePlacement() const;
        auto PanePlacement(winrt::Microsoft::UI::Xaml::Controls::SplitViewPanePlacement const& value) const;
        [[nodiscard]] auto DisplayMode() const;
        auto DisplayMode(winrt::Microsoft::UI::Xaml::Controls::SplitViewDisplayMode const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
        [[nodiscard]] auto PaneBackground() const;
        auto PaneBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto LightDismissOverlayMode() const;
        auto LightDismissOverlayMode(winrt::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
        auto PaneClosing(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::SplitView, winrt::Microsoft::UI::Xaml::Controls::SplitViewPaneClosingEventArgs> const& handler) const;
        using PaneClosing_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ISplitView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ISplitView>::remove_PaneClosing>;
        [[nodiscard]] auto PaneClosing(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::SplitView, winrt::Microsoft::UI::Xaml::Controls::SplitViewPaneClosingEventArgs> const& handler) const;
        auto PaneClosing(winrt::event_token const& token) const noexcept;
        auto PaneClosed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::SplitView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using PaneClosed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ISplitView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ISplitView>::remove_PaneClosed>;
        [[nodiscard]] auto PaneClosed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::SplitView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto PaneClosed(winrt::event_token const& token) const noexcept;
        auto PaneOpening(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::SplitView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using PaneOpening_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ISplitView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ISplitView>::remove_PaneOpening>;
        [[nodiscard]] auto PaneOpening(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::SplitView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto PaneOpening(winrt::event_token const& token) const noexcept;
        auto PaneOpened(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::SplitView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using PaneOpened_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ISplitView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ISplitView>::remove_PaneOpened>;
        [[nodiscard]] auto PaneOpened(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::SplitView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto PaneOpened(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISplitView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISplitViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISplitViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISplitViewPaneClosingEventArgs
    {
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitViewPaneClosingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISplitViewStatics
    {
        [[nodiscard]] auto ContentProperty() const;
        [[nodiscard]] auto PaneProperty() const;
        [[nodiscard]] auto IsPaneOpenProperty() const;
        [[nodiscard]] auto OpenPaneLengthProperty() const;
        [[nodiscard]] auto CompactPaneLengthProperty() const;
        [[nodiscard]] auto PanePlacementProperty() const;
        [[nodiscard]] auto DisplayModeProperty() const;
        [[nodiscard]] auto TemplateSettingsProperty() const;
        [[nodiscard]] auto PaneBackgroundProperty() const;
        [[nodiscard]] auto LightDismissOverlayModeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISplitViewStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitViewStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IStackLayout
    {
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Microsoft::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] auto Spacing() const;
        auto Spacing(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IStackLayout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IStackLayout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IStackLayoutFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IStackLayoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IStackLayoutStatics
    {
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto SpacingProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IStackLayoutStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IStackPanel
    {
        [[nodiscard]] auto AreScrollSnapPointsRegular() const;
        auto AreScrollSnapPointsRegular(bool value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Microsoft::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] auto BackgroundSizing() const;
        auto BackgroundSizing(winrt::Microsoft::UI::Xaml::Controls::BackgroundSizing const& value) const;
        [[nodiscard]] auto BorderBrush() const;
        auto BorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto BorderThickness() const;
        auto BorderThickness(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto CornerRadius() const;
        auto CornerRadius(winrt::Microsoft::UI::Xaml::CornerRadius const& value) const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto Spacing() const;
        auto Spacing(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IStackPanel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IStackPanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IStackPanelFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IStackPanelFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IStackPanelFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IStackPanelStatics
    {
        [[nodiscard]] auto AreScrollSnapPointsRegularProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto BackgroundSizingProperty() const;
        [[nodiscard]] auto BorderBrushProperty() const;
        [[nodiscard]] auto BorderThicknessProperty() const;
        [[nodiscard]] auto CornerRadiusProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
        [[nodiscard]] auto SpacingProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IStackPanelStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IStackPanelStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IStyleSelector
    {
        auto SelectStyle(winrt::Windows::Foundation::IInspectable const& item, winrt::Microsoft::UI::Xaml::DependencyObject const& container) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IStyleSelector>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IStyleSelector<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IStyleSelectorFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IStyleSelectorFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IStyleSelectorFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IStyleSelectorOverrides
    {
        auto SelectStyleCore(winrt::Windows::Foundation::IInspectable const& item, winrt::Microsoft::UI::Xaml::DependencyObject const& container) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IStyleSelectorOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IStyleSelectorOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwapChainBackgroundPanel
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISwapChainBackgroundPanel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwapChainBackgroundPanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwapChainBackgroundPanelFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwapChainBackgroundPanelFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwapChainPanel
    {
        [[nodiscard]] auto CompositionScaleX() const;
        [[nodiscard]] auto CompositionScaleY() const;
        auto CompositionScaleChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::SwapChainPanel, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using CompositionScaleChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanel, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanel>::remove_CompositionScaleChanged>;
        [[nodiscard]] auto CompositionScaleChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::SwapChainPanel, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto CompositionScaleChanged(winrt::event_token const& token) const noexcept;
        auto CreateCoreIndependentInputSource(winrt::Microsoft::UI::Input::InputPointerSourceDeviceKinds const& deviceKinds) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwapChainPanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwapChainPanelFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanelFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwapChainPanelFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwapChainPanelStatics
    {
        [[nodiscard]] auto CompositionScaleXProperty() const;
        [[nodiscard]] auto CompositionScaleYProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanelStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwapChainPanelStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeControl
    {
        [[nodiscard]] auto LeftItems() const;
        auto LeftItems(winrt::Microsoft::UI::Xaml::Controls::SwipeItems const& value) const;
        [[nodiscard]] auto RightItems() const;
        auto RightItems(winrt::Microsoft::UI::Xaml::Controls::SwipeItems const& value) const;
        [[nodiscard]] auto TopItems() const;
        auto TopItems(winrt::Microsoft::UI::Xaml::Controls::SwipeItems const& value) const;
        [[nodiscard]] auto BottomItems() const;
        auto BottomItems(winrt::Microsoft::UI::Xaml::Controls::SwipeItems const& value) const;
        auto Close() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISwipeControl>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeControl<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeControlFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISwipeControlFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeControlFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeControlStatics
    {
        [[nodiscard]] auto LeftItemsProperty() const;
        [[nodiscard]] auto RightItemsProperty() const;
        [[nodiscard]] auto TopItemsProperty() const;
        [[nodiscard]] auto BottomItemsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISwipeControlStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeControlStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeItem
    {
        [[nodiscard]] auto Text() const;
        auto Text(param::hstring const& value) const;
        [[nodiscard]] auto IconSource() const;
        auto IconSource(winrt::Microsoft::UI::Xaml::Controls::IconSource const& value) const;
        [[nodiscard]] auto Background() const;
        auto Background(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto Foreground() const;
        auto Foreground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto Command() const;
        auto Command(winrt::Microsoft::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] auto CommandParameter() const;
        auto CommandParameter(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto BehaviorOnInvoked() const;
        auto BehaviorOnInvoked(winrt::Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked const& value) const;
        auto Invoked(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::SwipeItem, winrt::Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs> const& handler) const;
        using Invoked_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ISwipeItem, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ISwipeItem>::remove_Invoked>;
        [[nodiscard]] auto Invoked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::SwipeItem, winrt::Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs> const& handler) const;
        auto Invoked(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISwipeItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeItemInvokedEventArgs
    {
        [[nodiscard]] auto SwipeControl() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItemInvokedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeItemStatics
    {
        [[nodiscard]] auto IconSourceProperty() const;
        [[nodiscard]] auto TextProperty() const;
        [[nodiscard]] auto BackgroundProperty() const;
        [[nodiscard]] auto ForegroundProperty() const;
        [[nodiscard]] auto CommandProperty() const;
        [[nodiscard]] auto CommandParameterProperty() const;
        [[nodiscard]] auto BehaviorOnInvokedProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeItems
    {
        [[nodiscard]] auto Mode() const;
        auto Mode(winrt::Microsoft::UI::Xaml::Controls::SwipeMode const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISwipeItems>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItems<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeItemsFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItemsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeItemsStatics
    {
        [[nodiscard]] auto ModeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItemsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISymbolIcon
    {
        [[nodiscard]] auto Symbol() const;
        auto Symbol(winrt::Microsoft::UI::Xaml::Controls::Symbol const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISymbolIcon>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISymbolIcon<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISymbolIconFactory
    {
        auto CreateInstanceWithSymbol(winrt::Microsoft::UI::Xaml::Controls::Symbol const& symbol) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISymbolIconFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISymbolIconSource
    {
        [[nodiscard]] auto Symbol() const;
        auto Symbol(winrt::Microsoft::UI::Xaml::Controls::Symbol const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISymbolIconSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISymbolIconSourceFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISymbolIconSourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISymbolIconSourceStatics
    {
        [[nodiscard]] auto SymbolProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISymbolIconSourceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISymbolIconStatics
    {
        [[nodiscard]] auto SymbolProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISymbolIconStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabView
    {
        [[nodiscard]] auto TabWidthMode() const;
        auto TabWidthMode(winrt::Microsoft::UI::Xaml::Controls::TabViewWidthMode const& value) const;
        [[nodiscard]] auto CloseButtonOverlayMode() const;
        auto CloseButtonOverlayMode(winrt::Microsoft::UI::Xaml::Controls::TabViewCloseButtonOverlayMode const& value) const;
        [[nodiscard]] auto TabStripHeader() const;
        auto TabStripHeader(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto TabStripHeaderTemplate() const;
        auto TabStripHeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto TabStripFooter() const;
        auto TabStripFooter(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto TabStripFooterTemplate() const;
        auto TabStripFooterTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto IsAddTabButtonVisible() const;
        auto IsAddTabButtonVisible(bool value) const;
        [[nodiscard]] auto AddTabButtonCommand() const;
        auto AddTabButtonCommand(winrt::Microsoft::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] auto AddTabButtonCommandParameter() const;
        auto AddTabButtonCommandParameter(winrt::Windows::Foundation::IInspectable const& value) const;
        auto TabCloseRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TabView, winrt::Microsoft::UI::Xaml::Controls::TabViewTabCloseRequestedEventArgs> const& handler) const;
        using TabCloseRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITabView>::remove_TabCloseRequested>;
        [[nodiscard]] auto TabCloseRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TabView, winrt::Microsoft::UI::Xaml::Controls::TabViewTabCloseRequestedEventArgs> const& handler) const;
        auto TabCloseRequested(winrt::event_token const& token) const noexcept;
        auto TabDroppedOutside(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TabView, winrt::Microsoft::UI::Xaml::Controls::TabViewTabDroppedOutsideEventArgs> const& handler) const;
        using TabDroppedOutside_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITabView>::remove_TabDroppedOutside>;
        [[nodiscard]] auto TabDroppedOutside(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TabView, winrt::Microsoft::UI::Xaml::Controls::TabViewTabDroppedOutsideEventArgs> const& handler) const;
        auto TabDroppedOutside(winrt::event_token const& token) const noexcept;
        auto AddTabButtonClick(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TabView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using AddTabButtonClick_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITabView>::remove_AddTabButtonClick>;
        [[nodiscard]] auto AddTabButtonClick(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TabView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto AddTabButtonClick(winrt::event_token const& token) const noexcept;
        auto TabItemsChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TabView, winrt::Windows::Foundation::Collections::IVectorChangedEventArgs> const& handler) const;
        using TabItemsChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITabView>::remove_TabItemsChanged>;
        [[nodiscard]] auto TabItemsChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TabView, winrt::Windows::Foundation::Collections::IVectorChangedEventArgs> const& handler) const;
        auto TabItemsChanged(winrt::event_token const& token) const noexcept;
        [[nodiscard]] auto TabItemsSource() const;
        auto TabItemsSource(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto TabItems() const;
        [[nodiscard]] auto TabItemTemplate() const;
        auto TabItemTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto TabItemTemplateSelector() const;
        auto TabItemTemplateSelector(winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& value) const;
        [[nodiscard]] auto CanDragTabs() const;
        auto CanDragTabs(bool value) const;
        [[nodiscard]] auto CanReorderTabs() const;
        auto CanReorderTabs(bool value) const;
        [[nodiscard]] auto AllowDropTabs() const;
        auto AllowDropTabs(bool value) const;
        [[nodiscard]] auto SelectedIndex() const;
        auto SelectedIndex(int32_t value) const;
        [[nodiscard]] auto SelectedItem() const;
        auto SelectedItem(winrt::Windows::Foundation::IInspectable const& value) const;
        auto ContainerFromItem(winrt::Windows::Foundation::IInspectable const& item) const;
        auto ContainerFromIndex(int32_t index) const;
        auto SelectionChanged(winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITabView>::remove_SelectionChanged>;
        [[nodiscard]] auto SelectionChanged(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const;
        auto SelectionChanged(winrt::event_token const& token) const noexcept;
        auto TabDragStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TabView, winrt::Microsoft::UI::Xaml::Controls::TabViewTabDragStartingEventArgs> const& handler) const;
        using TabDragStarting_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITabView>::remove_TabDragStarting>;
        [[nodiscard]] auto TabDragStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TabView, winrt::Microsoft::UI::Xaml::Controls::TabViewTabDragStartingEventArgs> const& handler) const;
        auto TabDragStarting(winrt::event_token const& token) const noexcept;
        auto TabDragCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TabView, winrt::Microsoft::UI::Xaml::Controls::TabViewTabDragCompletedEventArgs> const& handler) const;
        using TabDragCompleted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITabView>::remove_TabDragCompleted>;
        [[nodiscard]] auto TabDragCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TabView, winrt::Microsoft::UI::Xaml::Controls::TabViewTabDragCompletedEventArgs> const& handler) const;
        auto TabDragCompleted(winrt::event_token const& token) const noexcept;
        auto TabStripDragOver(winrt::Microsoft::UI::Xaml::DragEventHandler const& handler) const;
        using TabStripDragOver_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITabView>::remove_TabStripDragOver>;
        [[nodiscard]] auto TabStripDragOver(auto_revoke_t, winrt::Microsoft::UI::Xaml::DragEventHandler const& handler) const;
        auto TabStripDragOver(winrt::event_token const& token) const noexcept;
        auto TabStripDrop(winrt::Microsoft::UI::Xaml::DragEventHandler const& handler) const;
        using TabStripDrop_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITabView>::remove_TabStripDrop>;
        [[nodiscard]] auto TabStripDrop(auto_revoke_t, winrt::Microsoft::UI::Xaml::DragEventHandler const& handler) const;
        auto TabStripDrop(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITabView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITabViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewItem
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto IconSource() const;
        auto IconSource(winrt::Microsoft::UI::Xaml::Controls::IconSource const& value) const;
        [[nodiscard]] auto IsClosable() const;
        auto IsClosable(bool value) const;
        [[nodiscard]] auto TabViewTemplateSettings() const;
        auto CloseRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TabViewItem, winrt::Microsoft::UI::Xaml::Controls::TabViewTabCloseRequestedEventArgs> const& handler) const;
        using CloseRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITabViewItem, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITabViewItem>::remove_CloseRequested>;
        [[nodiscard]] auto CloseRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TabViewItem, winrt::Microsoft::UI::Xaml::Controls::TabViewTabCloseRequestedEventArgs> const& handler) const;
        auto CloseRequested(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITabViewItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewItemStatics
    {
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto IconSourceProperty() const;
        [[nodiscard]] auto IsClosableProperty() const;
        [[nodiscard]] auto TabViewTemplateSettingsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewItemTemplateSettings
    {
        [[nodiscard]] auto IconElement() const;
        auto IconElement(winrt::Microsoft::UI::Xaml::Controls::IconElement const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewItemTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewItemTemplateSettings2
    {
        [[nodiscard]] auto TabGeometry() const;
        auto TabGeometry(winrt::Microsoft::UI::Xaml::Media::Geometry const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewItemTemplateSettings2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewItemTemplateSettingsFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewItemTemplateSettingsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewItemTemplateSettingsStatics
    {
        [[nodiscard]] auto IconElementProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewItemTemplateSettingsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewItemTemplateSettingsStatics2
    {
        [[nodiscard]] auto TabGeometryProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewItemTemplateSettingsStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewStatics
    {
        [[nodiscard]] auto TabWidthModeProperty() const;
        [[nodiscard]] auto TabStripHeaderProperty() const;
        [[nodiscard]] auto TabStripHeaderTemplateProperty() const;
        [[nodiscard]] auto TabStripFooterProperty() const;
        [[nodiscard]] auto TabStripFooterTemplateProperty() const;
        [[nodiscard]] auto IsAddTabButtonVisibleProperty() const;
        [[nodiscard]] auto AddTabButtonCommandProperty() const;
        [[nodiscard]] auto AddTabButtonCommandParameterProperty() const;
        [[nodiscard]] auto TabItemsSourceProperty() const;
        [[nodiscard]] auto TabItemsProperty() const;
        [[nodiscard]] auto TabItemTemplateProperty() const;
        [[nodiscard]] auto TabItemTemplateSelectorProperty() const;
        [[nodiscard]] auto CloseButtonOverlayModeProperty() const;
        [[nodiscard]] auto CanDragTabsProperty() const;
        [[nodiscard]] auto CanReorderTabsProperty() const;
        [[nodiscard]] auto AllowDropTabsProperty() const;
        [[nodiscard]] auto SelectedIndexProperty() const;
        [[nodiscard]] auto SelectedItemProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITabViewStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewTabCloseRequestedEventArgs
    {
        [[nodiscard]] auto Item() const;
        [[nodiscard]] auto Tab() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabCloseRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewTabCloseRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewTabDragCompletedEventArgs
    {
        [[nodiscard]] auto DropResult() const;
        [[nodiscard]] auto Item() const;
        [[nodiscard]] auto Tab() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDragCompletedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewTabDragCompletedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewTabDragStartingEventArgs
    {
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
        [[nodiscard]] auto Data() const;
        [[nodiscard]] auto Item() const;
        [[nodiscard]] auto Tab() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDragStartingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewTabDragStartingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewTabDroppedOutsideEventArgs
    {
        [[nodiscard]] auto Item() const;
        [[nodiscard]] auto Tab() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDroppedOutsideEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewTabDroppedOutsideEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITeachingTip
    {
        [[nodiscard]] auto Title() const;
        auto Title(param::hstring const& value) const;
        [[nodiscard]] auto Subtitle() const;
        auto Subtitle(param::hstring const& value) const;
        [[nodiscard]] auto IsOpen() const;
        auto IsOpen(bool value) const;
        [[nodiscard]] auto Target() const;
        auto Target(winrt::Microsoft::UI::Xaml::FrameworkElement const& value) const;
        [[nodiscard]] auto TailVisibility() const;
        auto TailVisibility(winrt::Microsoft::UI::Xaml::Controls::TeachingTipTailVisibility const& value) const;
        [[nodiscard]] auto ActionButtonContent() const;
        auto ActionButtonContent(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto ActionButtonStyle() const;
        auto ActionButtonStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto ActionButtonCommand() const;
        auto ActionButtonCommand(winrt::Microsoft::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] auto ActionButtonCommandParameter() const;
        auto ActionButtonCommandParameter(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto CloseButtonContent() const;
        auto CloseButtonContent(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto CloseButtonStyle() const;
        auto CloseButtonStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto CloseButtonCommand() const;
        auto CloseButtonCommand(winrt::Microsoft::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] auto CloseButtonCommandParameter() const;
        auto CloseButtonCommandParameter(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto PlacementMargin() const;
        auto PlacementMargin(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto ShouldConstrainToRootBounds() const;
        auto ShouldConstrainToRootBounds(bool value) const;
        [[nodiscard]] auto IsLightDismissEnabled() const;
        auto IsLightDismissEnabled(bool value) const;
        [[nodiscard]] auto PreferredPlacement() const;
        auto PreferredPlacement(winrt::Microsoft::UI::Xaml::Controls::TeachingTipPlacementMode const& value) const;
        [[nodiscard]] auto HeroContentPlacement() const;
        auto HeroContentPlacement(winrt::Microsoft::UI::Xaml::Controls::TeachingTipHeroContentPlacementMode const& value) const;
        [[nodiscard]] auto HeroContent() const;
        auto HeroContent(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto IconSource() const;
        auto IconSource(winrt::Microsoft::UI::Xaml::Controls::IconSource const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
        auto ActionButtonClick(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TeachingTip, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ActionButtonClick_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITeachingTip, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITeachingTip>::remove_ActionButtonClick>;
        [[nodiscard]] auto ActionButtonClick(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TeachingTip, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto ActionButtonClick(winrt::event_token const& token) const noexcept;
        auto CloseButtonClick(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TeachingTip, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using CloseButtonClick_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITeachingTip, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITeachingTip>::remove_CloseButtonClick>;
        [[nodiscard]] auto CloseButtonClick(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TeachingTip, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto CloseButtonClick(winrt::event_token const& token) const noexcept;
        auto Closing(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TeachingTip, winrt::Microsoft::UI::Xaml::Controls::TeachingTipClosingEventArgs> const& handler) const;
        using Closing_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITeachingTip, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITeachingTip>::remove_Closing>;
        [[nodiscard]] auto Closing(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TeachingTip, winrt::Microsoft::UI::Xaml::Controls::TeachingTipClosingEventArgs> const& handler) const;
        auto Closing(winrt::event_token const& token) const noexcept;
        auto Closed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TeachingTip, winrt::Microsoft::UI::Xaml::Controls::TeachingTipClosedEventArgs> const& handler) const;
        using Closed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITeachingTip, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITeachingTip>::remove_Closed>;
        [[nodiscard]] auto Closed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TeachingTip, winrt::Microsoft::UI::Xaml::Controls::TeachingTipClosedEventArgs> const& handler) const;
        auto Closed(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITeachingTip>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITeachingTipClosedEventArgs
    {
        [[nodiscard]] auto Reason() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITeachingTipClosedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITeachingTipClosingEventArgs
    {
        [[nodiscard]] auto Reason() const;
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
        auto GetDeferral() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITeachingTipClosingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITeachingTipFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITeachingTipFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics
    {
        [[nodiscard]] auto IsOpenProperty() const;
        [[nodiscard]] auto TargetProperty() const;
        [[nodiscard]] auto TailVisibilityProperty() const;
        [[nodiscard]] auto TitleProperty() const;
        [[nodiscard]] auto SubtitleProperty() const;
        [[nodiscard]] auto ActionButtonContentProperty() const;
        [[nodiscard]] auto ActionButtonStyleProperty() const;
        [[nodiscard]] auto ActionButtonCommandProperty() const;
        [[nodiscard]] auto ActionButtonCommandParameterProperty() const;
        [[nodiscard]] auto CloseButtonContentProperty() const;
        [[nodiscard]] auto CloseButtonStyleProperty() const;
        [[nodiscard]] auto CloseButtonCommandProperty() const;
        [[nodiscard]] auto CloseButtonCommandParameterProperty() const;
        [[nodiscard]] auto PlacementMarginProperty() const;
        [[nodiscard]] auto ShouldConstrainToRootBoundsProperty() const;
        [[nodiscard]] auto IsLightDismissEnabledProperty() const;
        [[nodiscard]] auto PreferredPlacementProperty() const;
        [[nodiscard]] auto HeroContentPlacementProperty() const;
        [[nodiscard]] auto HeroContentProperty() const;
        [[nodiscard]] auto IconSourceProperty() const;
        [[nodiscard]] auto TemplateSettingsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettings
    {
        [[nodiscard]] auto TopRightHighlightMargin() const;
        auto TopRightHighlightMargin(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto TopLeftHighlightMargin() const;
        auto TopLeftHighlightMargin(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto IconElement() const;
        auto IconElement(winrt::Microsoft::UI::Xaml::Controls::IconElement const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettingsFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettingsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettingsStatics
    {
        [[nodiscard]] auto TopRightHighlightMarginProperty() const;
        [[nodiscard]] auto TopLeftHighlightMarginProperty() const;
        [[nodiscard]] auto IconElementProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettingsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextBlock
    {
        [[nodiscard]] auto FontSize() const;
        auto FontSize(double value) const;
        [[nodiscard]] auto FontFamily() const;
        auto FontFamily(winrt::Microsoft::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] auto FontWeight() const;
        auto FontWeight(winrt::Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] auto FontStyle() const;
        auto FontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto FontStretch() const;
        auto FontStretch(winrt::Windows::UI::Text::FontStretch const& value) const;
        [[nodiscard]] auto CharacterSpacing() const;
        auto CharacterSpacing(int32_t value) const;
        [[nodiscard]] auto Foreground() const;
        auto Foreground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto TextWrapping() const;
        auto TextWrapping(winrt::Microsoft::UI::Xaml::TextWrapping const& value) const;
        [[nodiscard]] auto TextTrimming() const;
        auto TextTrimming(winrt::Microsoft::UI::Xaml::TextTrimming const& value) const;
        [[nodiscard]] auto TextAlignment() const;
        auto TextAlignment(winrt::Microsoft::UI::Xaml::TextAlignment const& value) const;
        [[nodiscard]] auto Text() const;
        auto Text(param::hstring const& value) const;
        [[nodiscard]] auto Inlines() const;
        [[nodiscard]] auto Padding() const;
        auto Padding(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto LineHeight() const;
        auto LineHeight(double value) const;
        [[nodiscard]] auto LineStackingStrategy() const;
        auto LineStackingStrategy(winrt::Microsoft::UI::Xaml::LineStackingStrategy const& value) const;
        [[nodiscard]] auto IsTextSelectionEnabled() const;
        auto IsTextSelectionEnabled(bool value) const;
        [[nodiscard]] auto SelectedText() const;
        [[nodiscard]] auto ContentStart() const;
        [[nodiscard]] auto ContentEnd() const;
        [[nodiscard]] auto SelectionStart() const;
        [[nodiscard]] auto SelectionEnd() const;
        [[nodiscard]] auto BaselineOffset() const;
        [[nodiscard]] auto SelectionHighlightColor() const;
        auto SelectionHighlightColor(winrt::Microsoft::UI::Xaml::Media::SolidColorBrush const& value) const;
        [[nodiscard]] auto MaxLines() const;
        auto MaxLines(int32_t value) const;
        [[nodiscard]] auto TextLineBounds() const;
        auto TextLineBounds(winrt::Microsoft::UI::Xaml::TextLineBounds const& value) const;
        [[nodiscard]] auto OpticalMarginAlignment() const;
        auto OpticalMarginAlignment(winrt::Microsoft::UI::Xaml::OpticalMarginAlignment const& value) const;
        [[nodiscard]] auto IsColorFontEnabled() const;
        auto IsColorFontEnabled(bool value) const;
        [[nodiscard]] auto TextReadingOrder() const;
        auto TextReadingOrder(winrt::Microsoft::UI::Xaml::TextReadingOrder const& value) const;
        [[nodiscard]] auto IsTextScaleFactorEnabled() const;
        auto IsTextScaleFactorEnabled(bool value) const;
        [[nodiscard]] auto TextDecorations() const;
        auto TextDecorations(winrt::Windows::UI::Text::TextDecorations const& value) const;
        [[nodiscard]] auto IsTextTrimmed() const;
        [[nodiscard]] auto HorizontalTextAlignment() const;
        auto HorizontalTextAlignment(winrt::Microsoft::UI::Xaml::TextAlignment const& value) const;
        [[nodiscard]] auto TextHighlighters() const;
        [[nodiscard]] auto SelectionFlyout() const;
        auto SelectionFlyout(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
        auto SelectionChanged(winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITextBlock, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITextBlock>::remove_SelectionChanged>;
        [[nodiscard]] auto SelectionChanged(auto_revoke_t, winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        auto SelectionChanged(winrt::event_token const& token) const noexcept;
        auto ContextMenuOpening(winrt::Microsoft::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        using ContextMenuOpening_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITextBlock, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITextBlock>::remove_ContextMenuOpening>;
        [[nodiscard]] auto ContextMenuOpening(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        auto ContextMenuOpening(winrt::event_token const& token) const noexcept;
        auto IsTextTrimmedChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBlock, winrt::Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& handler) const;
        using IsTextTrimmedChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITextBlock, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITextBlock>::remove_IsTextTrimmedChanged>;
        [[nodiscard]] auto IsTextTrimmedChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBlock, winrt::Microsoft::UI::Xaml::Controls::IsTextTrimmedChangedEventArgs> const& handler) const;
        auto IsTextTrimmedChanged(winrt::event_token const& token) const noexcept;
        auto SelectAll() const;
        auto Select(winrt::Microsoft::UI::Xaml::Documents::TextPointer const& start, winrt::Microsoft::UI::Xaml::Documents::TextPointer const& end) const;
        auto GetAlphaMask() const;
        auto CopySelectionToClipboard() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITextBlock>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextBlock<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextBlockStatics
    {
        [[nodiscard]] auto FontSizeProperty() const;
        [[nodiscard]] auto FontFamilyProperty() const;
        [[nodiscard]] auto FontWeightProperty() const;
        [[nodiscard]] auto FontStyleProperty() const;
        [[nodiscard]] auto FontStretchProperty() const;
        [[nodiscard]] auto CharacterSpacingProperty() const;
        [[nodiscard]] auto ForegroundProperty() const;
        [[nodiscard]] auto TextWrappingProperty() const;
        [[nodiscard]] auto TextTrimmingProperty() const;
        [[nodiscard]] auto TextAlignmentProperty() const;
        [[nodiscard]] auto TextProperty() const;
        [[nodiscard]] auto PaddingProperty() const;
        [[nodiscard]] auto LineHeightProperty() const;
        [[nodiscard]] auto LineStackingStrategyProperty() const;
        [[nodiscard]] auto IsTextSelectionEnabledProperty() const;
        [[nodiscard]] auto SelectedTextProperty() const;
        [[nodiscard]] auto SelectionHighlightColorProperty() const;
        [[nodiscard]] auto MaxLinesProperty() const;
        [[nodiscard]] auto TextLineBoundsProperty() const;
        [[nodiscard]] auto OpticalMarginAlignmentProperty() const;
        [[nodiscard]] auto IsColorFontEnabledProperty() const;
        [[nodiscard]] auto TextReadingOrderProperty() const;
        [[nodiscard]] auto IsTextScaleFactorEnabledProperty() const;
        [[nodiscard]] auto TextDecorationsProperty() const;
        [[nodiscard]] auto IsTextTrimmedProperty() const;
        [[nodiscard]] auto HorizontalTextAlignmentProperty() const;
        [[nodiscard]] auto SelectionFlyoutProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITextBlockStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextBlockStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextBox
    {
        [[nodiscard]] auto Text() const;
        auto Text(param::hstring const& value) const;
        [[nodiscard]] auto SelectedText() const;
        auto SelectedText(param::hstring const& value) const;
        [[nodiscard]] auto SelectionLength() const;
        auto SelectionLength(int32_t value) const;
        [[nodiscard]] auto SelectionStart() const;
        auto SelectionStart(int32_t value) const;
        [[nodiscard]] auto MaxLength() const;
        auto MaxLength(int32_t value) const;
        [[nodiscard]] auto IsReadOnly() const;
        auto IsReadOnly(bool value) const;
        [[nodiscard]] auto AcceptsReturn() const;
        auto AcceptsReturn(bool value) const;
        [[nodiscard]] auto TextAlignment() const;
        auto TextAlignment(winrt::Microsoft::UI::Xaml::TextAlignment const& value) const;
        [[nodiscard]] auto TextWrapping() const;
        auto TextWrapping(winrt::Microsoft::UI::Xaml::TextWrapping const& value) const;
        [[nodiscard]] auto IsSpellCheckEnabled() const;
        auto IsSpellCheckEnabled(bool value) const;
        [[nodiscard]] auto IsTextPredictionEnabled() const;
        auto IsTextPredictionEnabled(bool value) const;
        [[nodiscard]] auto InputScope() const;
        auto InputScope(winrt::Microsoft::UI::Xaml::Input::InputScope const& value) const;
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto PlaceholderText() const;
        auto PlaceholderText(param::hstring const& value) const;
        [[nodiscard]] auto SelectionHighlightColor() const;
        auto SelectionHighlightColor(winrt::Microsoft::UI::Xaml::Media::SolidColorBrush const& value) const;
        [[nodiscard]] auto PreventKeyboardDisplayOnProgrammaticFocus() const;
        auto PreventKeyboardDisplayOnProgrammaticFocus(bool value) const;
        [[nodiscard]] auto IsColorFontEnabled() const;
        auto IsColorFontEnabled(bool value) const;
        [[nodiscard]] auto SelectionHighlightColorWhenNotFocused() const;
        auto SelectionHighlightColorWhenNotFocused(winrt::Microsoft::UI::Xaml::Media::SolidColorBrush const& value) const;
        [[nodiscard]] auto HorizontalTextAlignment() const;
        auto HorizontalTextAlignment(winrt::Microsoft::UI::Xaml::TextAlignment const& value) const;
        [[nodiscard]] auto CharacterCasing() const;
        auto CharacterCasing(winrt::Microsoft::UI::Xaml::Controls::CharacterCasing const& value) const;
        [[nodiscard]] auto PlaceholderForeground() const;
        auto PlaceholderForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto CanPasteClipboardContent() const;
        [[nodiscard]] auto CanUndo() const;
        [[nodiscard]] auto CanRedo() const;
        [[nodiscard]] auto SelectionFlyout() const;
        auto SelectionFlyout(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
        [[nodiscard]] auto ProofingMenuFlyout() const;
        [[nodiscard]] auto Description() const;
        auto Description(winrt::Windows::Foundation::IInspectable const& value) const;
        auto TextChanged(winrt::Microsoft::UI::Xaml::Controls::TextChangedEventHandler const& handler) const;
        using TextChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITextBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITextBox>::remove_TextChanged>;
        [[nodiscard]] auto TextChanged(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::TextChangedEventHandler const& handler) const;
        auto TextChanged(winrt::event_token const& token) const noexcept;
        auto SelectionChanged(winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITextBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITextBox>::remove_SelectionChanged>;
        [[nodiscard]] auto SelectionChanged(auto_revoke_t, winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        auto SelectionChanged(winrt::event_token const& token) const noexcept;
        auto ContextMenuOpening(winrt::Microsoft::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        using ContextMenuOpening_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITextBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITextBox>::remove_ContextMenuOpening>;
        [[nodiscard]] auto ContextMenuOpening(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::ContextMenuOpeningEventHandler const& handler) const;
        auto ContextMenuOpening(winrt::event_token const& token) const noexcept;
        auto Paste(winrt::Microsoft::UI::Xaml::Controls::TextControlPasteEventHandler const& handler) const;
        using Paste_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITextBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITextBox>::remove_Paste>;
        [[nodiscard]] auto Paste(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::TextControlPasteEventHandler const& handler) const;
        auto Paste(winrt::event_token const& token) const noexcept;
        auto TextCompositionStarted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs> const& handler) const;
        using TextCompositionStarted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITextBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITextBox>::remove_TextCompositionStarted>;
        [[nodiscard]] auto TextCompositionStarted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::TextCompositionStartedEventArgs> const& handler) const;
        auto TextCompositionStarted(winrt::event_token const& token) const noexcept;
        auto TextCompositionChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs> const& handler) const;
        using TextCompositionChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITextBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITextBox>::remove_TextCompositionChanged>;
        [[nodiscard]] auto TextCompositionChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::TextCompositionChangedEventArgs> const& handler) const;
        auto TextCompositionChanged(winrt::event_token const& token) const noexcept;
        auto TextCompositionEnded(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs> const& handler) const;
        using TextCompositionEnded_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITextBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITextBox>::remove_TextCompositionEnded>;
        [[nodiscard]] auto TextCompositionEnded(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::TextCompositionEndedEventArgs> const& handler) const;
        auto TextCompositionEnded(winrt::event_token const& token) const noexcept;
        auto CopyingToClipboard(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs> const& handler) const;
        using CopyingToClipboard_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITextBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITextBox>::remove_CopyingToClipboard>;
        [[nodiscard]] auto CopyingToClipboard(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::TextControlCopyingToClipboardEventArgs> const& handler) const;
        auto CopyingToClipboard(winrt::event_token const& token) const noexcept;
        auto CuttingToClipboard(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs> const& handler) const;
        using CuttingToClipboard_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITextBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITextBox>::remove_CuttingToClipboard>;
        [[nodiscard]] auto CuttingToClipboard(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::TextControlCuttingToClipboardEventArgs> const& handler) const;
        auto CuttingToClipboard(winrt::event_token const& token) const noexcept;
        auto BeforeTextChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs> const& handler) const;
        using BeforeTextChanging_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITextBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITextBox>::remove_BeforeTextChanging>;
        [[nodiscard]] auto BeforeTextChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::TextBoxBeforeTextChangingEventArgs> const& handler) const;
        auto BeforeTextChanging(winrt::event_token const& token) const noexcept;
        auto SelectionChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs> const& handler) const;
        using SelectionChanging_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITextBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITextBox>::remove_SelectionChanging>;
        [[nodiscard]] auto SelectionChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::TextBoxSelectionChangingEventArgs> const& handler) const;
        auto SelectionChanging(winrt::event_token const& token) const noexcept;
        auto Select(int32_t start, int32_t length) const;
        auto SelectAll() const;
        auto GetRectFromCharacterIndex(int32_t charIndex, bool trailingEdge) const;
        auto GetLinguisticAlternativesAsync() const;
        auto Undo() const;
        auto Redo() const;
        auto PasteFromClipboard() const;
        auto CopySelectionToClipboard() const;
        auto CutSelectionToClipboard() const;
        auto ClearUndoRedoHistory() const;
        [[nodiscard]] auto TextReadingOrder() const;
        auto TextReadingOrder(winrt::Microsoft::UI::Xaml::TextReadingOrder const& value) const;
        [[nodiscard]] auto DesiredCandidateWindowAlignment() const;
        auto DesiredCandidateWindowAlignment(winrt::Microsoft::UI::Xaml::Controls::CandidateWindowAlignment const& value) const;
        auto CandidateWindowBoundsChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> const& handler) const;
        using CandidateWindowBoundsChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITextBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITextBox>::remove_CandidateWindowBoundsChanged>;
        [[nodiscard]] auto CandidateWindowBoundsChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> const& handler) const;
        auto CandidateWindowBoundsChanged(winrt::event_token const& token) const noexcept;
        auto TextChanging(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::TextBoxTextChangingEventArgs> const& handler) const;
        using TextChanging_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITextBox, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITextBox>::remove_TextChanging>;
        [[nodiscard]] auto TextChanging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TextBox, winrt::Microsoft::UI::Xaml::Controls::TextBoxTextChangingEventArgs> const& handler) const;
        auto TextChanging(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITextBox>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextBox<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextBoxBeforeTextChangingEventArgs
    {
        [[nodiscard]] auto NewText() const;
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextBoxBeforeTextChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextBoxFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITextBoxFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextBoxFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextBoxSelectionChangingEventArgs
    {
        [[nodiscard]] auto SelectionStart() const;
        [[nodiscard]] auto SelectionLength() const;
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITextBoxSelectionChangingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextBoxSelectionChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextBoxStatics
    {
        [[nodiscard]] auto TextProperty() const;
        [[nodiscard]] auto MaxLengthProperty() const;
        [[nodiscard]] auto IsReadOnlyProperty() const;
        [[nodiscard]] auto AcceptsReturnProperty() const;
        [[nodiscard]] auto TextAlignmentProperty() const;
        [[nodiscard]] auto TextWrappingProperty() const;
        [[nodiscard]] auto IsSpellCheckEnabledProperty() const;
        [[nodiscard]] auto IsTextPredictionEnabledProperty() const;
        [[nodiscard]] auto InputScopeProperty() const;
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto PlaceholderTextProperty() const;
        [[nodiscard]] auto SelectionHighlightColorProperty() const;
        [[nodiscard]] auto PreventKeyboardDisplayOnProgrammaticFocusProperty() const;
        [[nodiscard]] auto IsColorFontEnabledProperty() const;
        [[nodiscard]] auto SelectionHighlightColorWhenNotFocusedProperty() const;
        [[nodiscard]] auto HorizontalTextAlignmentProperty() const;
        [[nodiscard]] auto CharacterCasingProperty() const;
        [[nodiscard]] auto PlaceholderForegroundProperty() const;
        [[nodiscard]] auto CanPasteClipboardContentProperty() const;
        [[nodiscard]] auto CanUndoProperty() const;
        [[nodiscard]] auto CanRedoProperty() const;
        [[nodiscard]] auto SelectionFlyoutProperty() const;
        [[nodiscard]] auto ProofingMenuFlyoutProperty() const;
        [[nodiscard]] auto DescriptionProperty() const;
        [[nodiscard]] auto DesiredCandidateWindowAlignmentProperty() const;
        [[nodiscard]] auto TextReadingOrderProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITextBoxStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextBoxStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextBoxTextChangingEventArgs
    {
        [[nodiscard]] auto IsContentChanging() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITextBoxTextChangingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextBoxTextChangingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextChangedEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITextChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextCommandBarFlyout
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextCommandBarFlyout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextCommandBarFlyoutFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextCommandBarFlyoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextCompositionChangedEventArgs
    {
        [[nodiscard]] auto StartIndex() const;
        [[nodiscard]] auto Length() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITextCompositionChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextCompositionChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextCompositionEndedEventArgs
    {
        [[nodiscard]] auto StartIndex() const;
        [[nodiscard]] auto Length() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITextCompositionEndedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextCompositionEndedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextCompositionStartedEventArgs
    {
        [[nodiscard]] auto StartIndex() const;
        [[nodiscard]] auto Length() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITextCompositionStartedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextCompositionStartedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextControlCopyingToClipboardEventArgs
    {
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextControlCopyingToClipboardEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextControlCuttingToClipboardEventArgs
    {
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextControlCuttingToClipboardEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextControlPasteEventArgs
    {
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITextControlPasteEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextControlPasteEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITimePickedEventArgs
    {
        [[nodiscard]] auto OldTime() const;
        [[nodiscard]] auto NewTime() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITimePickedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITimePickedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITimePicker
    {
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto ClockIdentifier() const;
        auto ClockIdentifier(param::hstring const& value) const;
        [[nodiscard]] auto MinuteIncrement() const;
        auto MinuteIncrement(int32_t value) const;
        [[nodiscard]] auto Time() const;
        auto Time(winrt::Windows::Foundation::TimeSpan const& value) const;
        [[nodiscard]] auto LightDismissOverlayMode() const;
        auto LightDismissOverlayMode(winrt::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
        [[nodiscard]] auto SelectedTime() const;
        auto SelectedTime(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const& value) const;
        auto TimeChanged(winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Xaml::Controls::TimePickerValueChangedEventArgs> const& handler) const;
        using TimeChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITimePicker, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITimePicker>::remove_TimeChanged>;
        [[nodiscard]] auto TimeChanged(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Xaml::Controls::TimePickerValueChangedEventArgs> const& handler) const;
        auto TimeChanged(winrt::event_token const& token) const noexcept;
        auto SelectedTimeChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TimePicker, winrt::Microsoft::UI::Xaml::Controls::TimePickerSelectedValueChangedEventArgs> const& handler) const;
        using SelectedTimeChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITimePicker, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITimePicker>::remove_SelectedTimeChanged>;
        [[nodiscard]] auto SelectedTimeChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TimePicker, winrt::Microsoft::UI::Xaml::Controls::TimePickerSelectedValueChangedEventArgs> const& handler) const;
        auto SelectedTimeChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITimePicker>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITimePicker<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITimePickerFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITimePickerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITimePickerFlyout
    {
        [[nodiscard]] auto ClockIdentifier() const;
        auto ClockIdentifier(param::hstring const& value) const;
        [[nodiscard]] auto Time() const;
        auto Time(winrt::Windows::Foundation::TimeSpan const& value) const;
        [[nodiscard]] auto MinuteIncrement() const;
        auto MinuteIncrement(int32_t value) const;
        auto TimePicked(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TimePickerFlyout, winrt::Microsoft::UI::Xaml::Controls::TimePickedEventArgs> const& handler) const;
        using TimePicked_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyout, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyout>::remove_TimePicked>;
        [[nodiscard]] auto TimePicked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TimePickerFlyout, winrt::Microsoft::UI::Xaml::Controls::TimePickedEventArgs> const& handler) const;
        auto TimePicked(winrt::event_token const& token) const noexcept;
        auto ShowAtAsync(winrt::Microsoft::UI::Xaml::FrameworkElement const& target) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITimePickerFlyout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITimePickerFlyoutPresenter
    {
        [[nodiscard]] auto IsDefaultShadowEnabled() const;
        auto IsDefaultShadowEnabled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITimePickerFlyoutPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITimePickerFlyoutPresenterStatics
    {
        [[nodiscard]] auto IsDefaultShadowEnabledProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITimePickerFlyoutPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITimePickerFlyoutStatics
    {
        [[nodiscard]] auto ClockIdentifierProperty() const;
        [[nodiscard]] auto TimeProperty() const;
        [[nodiscard]] auto MinuteIncrementProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITimePickerFlyoutStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITimePickerSelectedValueChangedEventArgs
    {
        [[nodiscard]] auto OldTime() const;
        [[nodiscard]] auto NewTime() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITimePickerSelectedValueChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITimePickerSelectedValueChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITimePickerStatics
    {
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto ClockIdentifierProperty() const;
        [[nodiscard]] auto MinuteIncrementProperty() const;
        [[nodiscard]] auto TimeProperty() const;
        [[nodiscard]] auto LightDismissOverlayModeProperty() const;
        [[nodiscard]] auto SelectedTimeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITimePickerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITimePickerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITimePickerValueChangedEventArgs
    {
        [[nodiscard]] auto OldTime() const;
        [[nodiscard]] auto NewTime() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITimePickerValueChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToggleMenuFlyoutItem
    {
        [[nodiscard]] auto IsChecked() const;
        auto IsChecked(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleMenuFlyoutItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToggleMenuFlyoutItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleMenuFlyoutItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToggleMenuFlyoutItemStatics
    {
        [[nodiscard]] auto IsCheckedProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleMenuFlyoutItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToggleSplitButton
    {
        [[nodiscard]] auto IsChecked() const;
        auto IsChecked(bool value) const;
        auto IsCheckedChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ToggleSplitButton, winrt::Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs> const& handler) const;
        using IsCheckedChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButton, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButton>::remove_IsCheckedChanged>;
        [[nodiscard]] auto IsCheckedChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::ToggleSplitButton, winrt::Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs> const& handler) const;
        auto IsCheckedChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButton>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleSplitButton<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonIsCheckedChangedEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonIsCheckedChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonStatics
    {
        [[nodiscard]] auto IsCheckedProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToggleSwitch
    {
        [[nodiscard]] auto IsOn() const;
        auto IsOn(bool value) const;
        [[nodiscard]] auto Header() const;
        auto Header(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto HeaderTemplate() const;
        auto HeaderTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto OnContent() const;
        auto OnContent(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto OnContentTemplate() const;
        auto OnContentTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto OffContent() const;
        auto OffContent(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto OffContentTemplate() const;
        auto OffContentTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
        auto Toggled(winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        using Toggled_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IToggleSwitch, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IToggleSwitch>::remove_Toggled>;
        [[nodiscard]] auto Toggled(auto_revoke_t, winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        auto Toggled(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IToggleSwitch>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleSwitch<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToggleSwitchOverrides
    {
        auto OnToggled() const;
        auto OnOnContentChanged(winrt::Windows::Foundation::IInspectable const& oldContent, winrt::Windows::Foundation::IInspectable const& newContent) const;
        auto OnOffContentChanged(winrt::Windows::Foundation::IInspectable const& oldContent, winrt::Windows::Foundation::IInspectable const& newContent) const;
        auto OnHeaderChanged(winrt::Windows::Foundation::IInspectable const& oldContent, winrt::Windows::Foundation::IInspectable const& newContent) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IToggleSwitchOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleSwitchOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToggleSwitchStatics
    {
        [[nodiscard]] auto IsOnProperty() const;
        [[nodiscard]] auto HeaderProperty() const;
        [[nodiscard]] auto HeaderTemplateProperty() const;
        [[nodiscard]] auto OnContentProperty() const;
        [[nodiscard]] auto OnContentTemplateProperty() const;
        [[nodiscard]] auto OffContentProperty() const;
        [[nodiscard]] auto OffContentTemplateProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IToggleSwitchStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleSwitchStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToolTip
    {
        [[nodiscard]] auto HorizontalOffset() const;
        auto HorizontalOffset(double value) const;
        [[nodiscard]] auto IsOpen() const;
        auto IsOpen(bool value) const;
        [[nodiscard]] auto Placement() const;
        auto Placement(winrt::Microsoft::UI::Xaml::Controls::Primitives::PlacementMode const& value) const;
        [[nodiscard]] auto PlacementTarget() const;
        auto PlacementTarget(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto PlacementRect() const;
        auto PlacementRect(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Rect> const& value) const;
        [[nodiscard]] auto VerticalOffset() const;
        auto VerticalOffset(double value) const;
        [[nodiscard]] auto TemplateSettings() const;
        auto Closed(winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        using Closed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IToolTip, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IToolTip>::remove_Closed>;
        [[nodiscard]] auto Closed(auto_revoke_t, winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        auto Closed(winrt::event_token const& token) const noexcept;
        auto Opened(winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        using Opened_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IToolTip, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IToolTip>::remove_Opened>;
        [[nodiscard]] auto Opened(auto_revoke_t, winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        auto Opened(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IToolTip>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToolTip<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToolTipFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IToolTipFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToolTipFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToolTipService
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IToolTipService>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToolTipService<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToolTipServiceStatics
    {
        [[nodiscard]] auto PlacementProperty() const;
        auto GetPlacement(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetPlacement(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Microsoft::UI::Xaml::Controls::Primitives::PlacementMode const& value) const;
        [[nodiscard]] auto PlacementTargetProperty() const;
        auto GetPlacementTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetPlacementTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto ToolTipProperty() const;
        auto GetToolTip(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetToolTip(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Windows::Foundation::IInspectable const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IToolTipServiceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToolTipServiceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToolTipStatics
    {
        [[nodiscard]] auto HorizontalOffsetProperty() const;
        [[nodiscard]] auto IsOpenProperty() const;
        [[nodiscard]] auto PlacementProperty() const;
        [[nodiscard]] auto PlacementTargetProperty() const;
        [[nodiscard]] auto PlacementRectProperty() const;
        [[nodiscard]] auto VerticalOffsetProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IToolTipStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToolTipStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeView
    {
        [[nodiscard]] auto RootNodes() const;
        [[nodiscard]] auto SelectionMode() const;
        auto SelectionMode(winrt::Microsoft::UI::Xaml::Controls::TreeViewSelectionMode const& value) const;
        [[nodiscard]] auto SelectedNodes() const;
        auto Expand(winrt::Microsoft::UI::Xaml::Controls::TreeViewNode const& value) const;
        auto Collapse(winrt::Microsoft::UI::Xaml::Controls::TreeViewNode const& value) const;
        auto SelectAll() const;
        auto ItemInvoked(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TreeView, winrt::Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> const& handler) const;
        using ItemInvoked_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITreeView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITreeView>::remove_ItemInvoked>;
        [[nodiscard]] auto ItemInvoked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TreeView, winrt::Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> const& handler) const;
        auto ItemInvoked(winrt::event_token const& token) const noexcept;
        auto Expanding(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TreeView, winrt::Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs> const& handler) const;
        using Expanding_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITreeView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITreeView>::remove_Expanding>;
        [[nodiscard]] auto Expanding(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TreeView, winrt::Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs> const& handler) const;
        auto Expanding(winrt::event_token const& token) const noexcept;
        auto Collapsed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TreeView, winrt::Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs> const& handler) const;
        using Collapsed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITreeView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITreeView>::remove_Collapsed>;
        [[nodiscard]] auto Collapsed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TreeView, winrt::Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs> const& handler) const;
        auto Collapsed(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeView2
    {
        auto NodeFromContainer(winrt::Microsoft::UI::Xaml::DependencyObject const& container) const;
        auto ContainerFromNode(winrt::Microsoft::UI::Xaml::Controls::TreeViewNode const& node) const;
        auto ItemFromContainer(winrt::Microsoft::UI::Xaml::DependencyObject const& container) const;
        auto ContainerFromItem(winrt::Windows::Foundation::IInspectable const& item) const;
        [[nodiscard]] auto CanDragItems() const;
        auto CanDragItems(bool value) const;
        [[nodiscard]] auto CanReorderItems() const;
        auto CanReorderItems(bool value) const;
        [[nodiscard]] auto ItemTemplate() const;
        auto ItemTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] auto ItemTemplateSelector() const;
        auto ItemTemplateSelector(winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& value) const;
        [[nodiscard]] auto ItemContainerStyle() const;
        auto ItemContainerStyle(winrt::Microsoft::UI::Xaml::Style const& value) const;
        [[nodiscard]] auto ItemContainerStyleSelector() const;
        auto ItemContainerStyleSelector(winrt::Microsoft::UI::Xaml::Controls::StyleSelector const& value) const;
        [[nodiscard]] auto ItemContainerTransitions() const;
        auto ItemContainerTransitions(winrt::Microsoft::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
        [[nodiscard]] auto ItemsSource() const;
        auto ItemsSource(winrt::Windows::Foundation::IInspectable const& value) const;
        auto DragItemsStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TreeView, winrt::Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs> const& handler) const;
        using DragItemsStarting_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITreeView2, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITreeView2>::remove_DragItemsStarting>;
        [[nodiscard]] auto DragItemsStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TreeView, winrt::Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs> const& handler) const;
        auto DragItemsStarting(winrt::event_token const& token) const noexcept;
        auto DragItemsCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TreeView, winrt::Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs> const& handler) const;
        using DragItemsCompleted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITreeView2, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITreeView2>::remove_DragItemsCompleted>;
        [[nodiscard]] auto DragItemsCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TreeView, winrt::Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs> const& handler) const;
        auto DragItemsCompleted(winrt::event_token const& token) const noexcept;
        [[nodiscard]] auto SelectedNode() const;
        auto SelectedNode(winrt::Microsoft::UI::Xaml::Controls::TreeViewNode const& value) const;
        [[nodiscard]] auto SelectedItem() const;
        auto SelectedItem(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto SelectedItems() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeView2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeView2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeView3
    {
        auto SelectionChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TreeView, winrt::Microsoft::UI::Xaml::Controls::TreeViewSelectionChangedEventArgs> const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITreeView3, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITreeView3>::remove_SelectionChanged>;
        [[nodiscard]] auto SelectionChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TreeView, winrt::Microsoft::UI::Xaml::Controls::TreeViewSelectionChangedEventArgs> const& handler) const;
        auto SelectionChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeView3>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeView3<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewCollapsedEventArgs
    {
        [[nodiscard]] auto Node() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewCollapsedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewCollapsedEventArgs2
    {
        [[nodiscard]] auto Item() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewCollapsedEventArgs2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsCompletedEventArgs
    {
        [[nodiscard]] auto DropResult() const;
        [[nodiscard]] auto Items() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsCompletedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsCompletedEventArgs2
    {
        [[nodiscard]] auto NewParentItem() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsCompletedEventArgs2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsStartingEventArgs
    {
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
        [[nodiscard]] auto Data() const;
        [[nodiscard]] auto Items() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsStartingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewExpandingEventArgs
    {
        [[nodiscard]] auto Node() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewExpandingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewExpandingEventArgs2
    {
        [[nodiscard]] auto Item() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewExpandingEventArgs2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItem
    {
        [[nodiscard]] auto GlyphOpacity() const;
        auto GlyphOpacity(double value) const;
        [[nodiscard]] auto GlyphBrush() const;
        auto GlyphBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto ExpandedGlyph() const;
        auto ExpandedGlyph(param::hstring const& value) const;
        [[nodiscard]] auto CollapsedGlyph() const;
        auto CollapsedGlyph(param::hstring const& value) const;
        [[nodiscard]] auto GlyphSize() const;
        auto GlyphSize(double value) const;
        [[nodiscard]] auto IsExpanded() const;
        auto IsExpanded(bool value) const;
        [[nodiscard]] auto TreeViewItemTemplateSettings() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItem2
    {
        [[nodiscard]] auto HasUnrealizedChildren() const;
        auto HasUnrealizedChildren(bool value) const;
        [[nodiscard]] auto ItemsSource() const;
        auto ItemsSource(winrt::Windows::Foundation::IInspectable const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItem2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItem2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemInvokedEventArgs
    {
        [[nodiscard]] auto InvokedItem() const;
        auto Handled(bool value) const;
        [[nodiscard]] auto Handled() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemInvokedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemStatics
    {
        [[nodiscard]] auto GlyphOpacityProperty() const;
        [[nodiscard]] auto GlyphBrushProperty() const;
        [[nodiscard]] auto ExpandedGlyphProperty() const;
        [[nodiscard]] auto CollapsedGlyphProperty() const;
        [[nodiscard]] auto GlyphSizeProperty() const;
        [[nodiscard]] auto IsExpandedProperty() const;
        [[nodiscard]] auto TreeViewItemTemplateSettingsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemStatics2
    {
        [[nodiscard]] auto HasUnrealizedChildrenProperty() const;
        [[nodiscard]] auto ItemsSourceProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettings
    {
        [[nodiscard]] auto ExpandedGlyphVisibility() const;
        [[nodiscard]] auto CollapsedGlyphVisibility() const;
        [[nodiscard]] auto Indentation() const;
        [[nodiscard]] auto DragItemsCount() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettingsFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettingsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettingsStatics
    {
        [[nodiscard]] auto ExpandedGlyphVisibilityProperty() const;
        [[nodiscard]] auto CollapsedGlyphVisibilityProperty() const;
        [[nodiscard]] auto IndentationProperty() const;
        [[nodiscard]] auto DragItemsCountProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettingsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewList
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewList>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewList<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewListFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewListFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewListFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewNode
    {
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto Parent() const;
        [[nodiscard]] auto IsExpanded() const;
        auto IsExpanded(bool value) const;
        [[nodiscard]] auto HasChildren() const;
        [[nodiscard]] auto Depth() const;
        [[nodiscard]] auto HasUnrealizedChildren() const;
        auto HasUnrealizedChildren(bool value) const;
        [[nodiscard]] auto Children() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNode>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewNode<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewNodeFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewNodeFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewNodeStatics
    {
        [[nodiscard]] auto ContentProperty() const;
        [[nodiscard]] auto DepthProperty() const;
        [[nodiscard]] auto IsExpandedProperty() const;
        [[nodiscard]] auto HasChildrenProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewNodeStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewSelectionChangedEventArgs
    {
        [[nodiscard]] auto AddedItems() const;
        [[nodiscard]] auto RemovedItems() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewSelectionChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewSelectionChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewStatics
    {
        [[nodiscard]] auto SelectedItemProperty() const;
        [[nodiscard]] auto SelectionModeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewStatics2
    {
        [[nodiscard]] auto CanDragItemsProperty() const;
        [[nodiscard]] auto CanReorderItemsProperty() const;
        [[nodiscard]] auto ItemTemplateProperty() const;
        [[nodiscard]] auto ItemTemplateSelectorProperty() const;
        [[nodiscard]] auto ItemContainerStyleProperty() const;
        [[nodiscard]] auto ItemContainerStyleSelectorProperty() const;
        [[nodiscard]] auto ItemContainerTransitionsProperty() const;
        [[nodiscard]] auto ItemsSourceProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITreeViewStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITwoPaneView
    {
        [[nodiscard]] auto Pane1() const;
        auto Pane1(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto Pane2() const;
        auto Pane2(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto Pane1Length() const;
        auto Pane1Length(winrt::Microsoft::UI::Xaml::GridLength const& value) const;
        [[nodiscard]] auto Pane2Length() const;
        auto Pane2Length(winrt::Microsoft::UI::Xaml::GridLength const& value) const;
        [[nodiscard]] auto PanePriority() const;
        auto PanePriority(winrt::Microsoft::UI::Xaml::Controls::TwoPaneViewPriority const& value) const;
        [[nodiscard]] auto Mode() const;
        [[nodiscard]] auto WideModeConfiguration() const;
        auto WideModeConfiguration(winrt::Microsoft::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration const& value) const;
        [[nodiscard]] auto TallModeConfiguration() const;
        auto TallModeConfiguration(winrt::Microsoft::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration const& value) const;
        [[nodiscard]] auto MinWideModeWidth() const;
        auto MinWideModeWidth(double value) const;
        [[nodiscard]] auto MinTallModeHeight() const;
        auto MinTallModeHeight(double value) const;
        auto ModeChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TwoPaneView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ModeChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneView, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneView>::remove_ModeChanged>;
        [[nodiscard]] auto ModeChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::TwoPaneView, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto ModeChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewStatics
    {
        [[nodiscard]] auto Pane1Property() const;
        [[nodiscard]] auto Pane2Property() const;
        [[nodiscard]] auto Pane1LengthProperty() const;
        [[nodiscard]] auto Pane2LengthProperty() const;
        [[nodiscard]] auto PanePriorityProperty() const;
        [[nodiscard]] auto ModeProperty() const;
        [[nodiscard]] auto WideModeConfigurationProperty() const;
        [[nodiscard]] auto TallModeConfigurationProperty() const;
        [[nodiscard]] auto MinWideModeWidthProperty() const;
        [[nodiscard]] auto MinTallModeHeightProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IUIElementCollection
    {
        auto Move(uint32_t oldIndex, uint32_t newIndex) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IUIElementCollection>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IUIElementCollection<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout
    {
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Microsoft::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] auto MinItemWidth() const;
        auto MinItemWidth(double value) const;
        [[nodiscard]] auto MinItemHeight() const;
        auto MinItemHeight(double value) const;
        [[nodiscard]] auto MinRowSpacing() const;
        auto MinRowSpacing(double value) const;
        [[nodiscard]] auto MinColumnSpacing() const;
        auto MinColumnSpacing(double value) const;
        [[nodiscard]] auto ItemsJustification() const;
        auto ItemsJustification(winrt::Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsJustification const& value) const;
        [[nodiscard]] auto ItemsStretch() const;
        auto ItemsStretch(winrt::Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsStretch const& value) const;
        [[nodiscard]] auto MaximumRowsOrColumns() const;
        auto MaximumRowsOrColumns(int32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IUniformGridLayoutFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IUniformGridLayoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IUniformGridLayoutStatics
    {
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto MinItemWidthProperty() const;
        [[nodiscard]] auto MinItemHeightProperty() const;
        [[nodiscard]] auto MinRowSpacingProperty() const;
        [[nodiscard]] auto MinColumnSpacingProperty() const;
        [[nodiscard]] auto ItemsJustificationProperty() const;
        [[nodiscard]] auto ItemsStretchProperty() const;
        [[nodiscard]] auto MaximumRowsOrColumnsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IUniformGridLayoutStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IUserControl
    {
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IUserControl>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IUserControl<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IUserControlFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IUserControlFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IUserControlFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IUserControlStatics
    {
        [[nodiscard]] auto ContentProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IUserControlStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IUserControlStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVariableSizedWrapGrid
    {
        [[nodiscard]] auto ItemHeight() const;
        auto ItemHeight(double value) const;
        [[nodiscard]] auto ItemWidth() const;
        auto ItemWidth(double value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Microsoft::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] auto HorizontalChildrenAlignment() const;
        auto HorizontalChildrenAlignment(winrt::Microsoft::UI::Xaml::HorizontalAlignment const& value) const;
        [[nodiscard]] auto VerticalChildrenAlignment() const;
        auto VerticalChildrenAlignment(winrt::Microsoft::UI::Xaml::VerticalAlignment const& value) const;
        [[nodiscard]] auto MaximumRowsOrColumns() const;
        auto MaximumRowsOrColumns(int32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IVariableSizedWrapGrid>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVariableSizedWrapGrid<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVariableSizedWrapGridStatics
    {
        [[nodiscard]] auto ItemHeightProperty() const;
        [[nodiscard]] auto ItemWidthProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto HorizontalChildrenAlignmentProperty() const;
        [[nodiscard]] auto VerticalChildrenAlignmentProperty() const;
        [[nodiscard]] auto MaximumRowsOrColumnsProperty() const;
        [[nodiscard]] auto RowSpanProperty() const;
        auto GetRowSpan(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetRowSpan(winrt::Microsoft::UI::Xaml::UIElement const& element, int32_t value) const;
        [[nodiscard]] auto ColumnSpanProperty() const;
        auto GetColumnSpan(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetColumnSpan(winrt::Microsoft::UI::Xaml::UIElement const& element, int32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IVariableSizedWrapGridStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVariableSizedWrapGridStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IViewbox
    {
        [[nodiscard]] auto Child() const;
        auto Child(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto Stretch() const;
        auto Stretch(winrt::Microsoft::UI::Xaml::Media::Stretch const& value) const;
        [[nodiscard]] auto StretchDirection() const;
        auto StretchDirection(winrt::Microsoft::UI::Xaml::Controls::StretchDirection const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IViewbox>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IViewbox<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IViewboxStatics
    {
        [[nodiscard]] auto StretchProperty() const;
        [[nodiscard]] auto StretchDirectionProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IViewboxStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IViewboxStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayout
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContext
    {
        [[nodiscard]] auto ItemCount() const;
        auto GetItemAt(int32_t index) const;
        [[nodiscard]] auto RealizationRect() const;
        auto GetOrCreateElementAt(int32_t index) const;
        auto GetOrCreateElementAt(int32_t index, winrt::Microsoft::UI::Xaml::Controls::ElementRealizationOptions const& options) const;
        auto RecycleElement(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        [[nodiscard]] auto RecommendedAnchorIndex() const;
        [[nodiscard]] auto LayoutOrigin() const;
        auto LayoutOrigin(winrt::Windows::Foundation::Point const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContext<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContext2
    {
        [[nodiscard]] auto VisibleRect() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContext2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextOverrides
    {
        auto ItemCountCore() const;
        auto GetItemAtCore(int32_t index) const;
        auto RealizationRectCore() const;
        auto GetOrCreateElementAtCore(int32_t index, winrt::Microsoft::UI::Xaml::Controls::ElementRealizationOptions const& options) const;
        auto RecycleElementCore(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        [[nodiscard]] auto RecommendedAnchorIndexCore() const;
        [[nodiscard]] auto LayoutOriginCore() const;
        auto LayoutOriginCore(winrt::Windows::Foundation::Point const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextOverrides2
    {
        auto VisibleRectCore() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextOverrides2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutOverrides
    {
        auto InitializeForContextCore(winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const;
        auto UninitializeForContextCore(winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const;
        auto MeasureOverride(winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, winrt::Windows::Foundation::Size const& availableSize) const;
        auto ArrangeOverride(winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, winrt::Windows::Foundation::Size const& finalSize) const;
        auto OnItemsChangedCore(winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, winrt::Windows::Foundation::IInspectable const& source, winrt::Microsoft::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& args) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingPanel
    {
        [[nodiscard]] auto ItemContainerGenerator() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingPanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingPanelFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingPanelFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingPanelOverrides
    {
        auto OnItemsChanged(winrt::Windows::Foundation::IInspectable const& sender, winrt::Microsoft::UI::Xaml::Controls::Primitives::ItemsChangedEventArgs const& args) const;
        auto OnClearChildren() const;
        auto BringIndexIntoView(int32_t index) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingPanelOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingPanelProtected
    {
        auto AddInternalChild(winrt::Microsoft::UI::Xaml::UIElement const& child) const;
        auto InsertInternalChild(int32_t index, winrt::Microsoft::UI::Xaml::UIElement const& child) const;
        auto RemoveInternalChildRange(int32_t index, int32_t range) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelProtected>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingPanelProtected<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingStackPanel
    {
        [[nodiscard]] auto AreScrollSnapPointsRegular() const;
        auto AreScrollSnapPointsRegular(bool value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Microsoft::UI::Xaml::Controls::Orientation const& value) const;
        auto CleanUpVirtualizedItemEvent(winrt::Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler const& handler) const;
        using CleanUpVirtualizedItemEvent_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanel, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanel>::remove_CleanUpVirtualizedItemEvent>;
        [[nodiscard]] auto CleanUpVirtualizedItemEvent(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler const& handler) const;
        auto CleanUpVirtualizedItemEvent(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingStackPanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingStackPanelOverrides
    {
        auto OnCleanUpVirtualizedItem(winrt::Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs const& e) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanelOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingStackPanelOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingStackPanelStatics
    {
        [[nodiscard]] auto AreScrollSnapPointsRegularProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto VirtualizationModeProperty() const;
        auto GetVirtualizationMode(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        auto SetVirtualizationMode(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Microsoft::UI::Xaml::Controls::VirtualizationMode const& value) const;
        [[nodiscard]] auto IsVirtualizingProperty() const;
        auto GetIsVirtualizing(winrt::Microsoft::UI::Xaml::DependencyObject const& o) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanelStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingStackPanelStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IWebView2
    {
        [[nodiscard]] auto CoreWebView2() const;
        auto EnsureCoreWebView2Async() const;
        auto ExecuteScriptAsync(param::hstring const& javascriptCode) const;
        [[nodiscard]] auto Source() const;
        auto Source(winrt::Windows::Foundation::Uri const& value) const;
        [[nodiscard]] auto CanGoForward() const;
        auto CanGoForward(bool value) const;
        [[nodiscard]] auto CanGoBack() const;
        auto CanGoBack(bool value) const;
        [[nodiscard]] auto DefaultBackgroundColor() const;
        auto DefaultBackgroundColor(winrt::Windows::UI::Color const& value) const;
        auto Reload() const;
        auto GoForward() const;
        auto GoBack() const;
        auto NavigateToString(param::hstring const& htmlContent) const;
        auto Close() const;
        auto NavigationCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::WebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs> const& handler) const;
        using NavigationCompleted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IWebView2, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IWebView2>::remove_NavigationCompleted>;
        [[nodiscard]] auto NavigationCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::WebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs> const& handler) const;
        auto NavigationCompleted(winrt::event_token const& token) const noexcept;
        auto WebMessageReceived(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::WebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebMessageReceivedEventArgs> const& handler) const;
        using WebMessageReceived_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IWebView2, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IWebView2>::remove_WebMessageReceived>;
        [[nodiscard]] auto WebMessageReceived(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::WebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebMessageReceivedEventArgs> const& handler) const;
        auto WebMessageReceived(winrt::event_token const& token) const noexcept;
        auto NavigationStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::WebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs> const& handler) const;
        using NavigationStarting_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IWebView2, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IWebView2>::remove_NavigationStarting>;
        [[nodiscard]] auto NavigationStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::WebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs> const& handler) const;
        auto NavigationStarting(winrt::event_token const& token) const noexcept;
        auto CoreProcessFailed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::WebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedEventArgs> const& handler) const;
        using CoreProcessFailed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IWebView2, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IWebView2>::remove_CoreProcessFailed>;
        [[nodiscard]] auto CoreProcessFailed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::WebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedEventArgs> const& handler) const;
        auto CoreProcessFailed(winrt::event_token const& token) const noexcept;
        auto CoreWebView2Initialized(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::WebView2, winrt::Microsoft::UI::Xaml::Controls::CoreWebView2InitializedEventArgs> const& handler) const;
        using CoreWebView2Initialized_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::IWebView2, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::IWebView2>::remove_CoreWebView2Initialized>;
        [[nodiscard]] auto CoreWebView2Initialized(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::WebView2, winrt::Microsoft::UI::Xaml::Controls::CoreWebView2InitializedEventArgs> const& handler) const;
        auto CoreWebView2Initialized(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IWebView2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IWebView2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IWebView22
    {
        auto EnsureCoreWebView2Async(winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment const& environment) const;
        auto EnsureCoreWebView2Async(winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment const& environment, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerOptions const& controllerOptions) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IWebView22>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IWebView22<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IWebView2Factory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IWebView2Factory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IWebView2Factory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IWebView2Statics
    {
        [[nodiscard]] auto SourceProperty() const;
        [[nodiscard]] auto CanGoForwardProperty() const;
        [[nodiscard]] auto CanGoBackProperty() const;
        [[nodiscard]] auto DefaultBackgroundColorProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IWebView2Statics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IWebView2Statics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IWrapGrid
    {
        [[nodiscard]] auto ItemWidth() const;
        auto ItemWidth(double value) const;
        [[nodiscard]] auto ItemHeight() const;
        auto ItemHeight(double value) const;
        [[nodiscard]] auto Orientation() const;
        auto Orientation(winrt::Microsoft::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] auto HorizontalChildrenAlignment() const;
        auto HorizontalChildrenAlignment(winrt::Microsoft::UI::Xaml::HorizontalAlignment const& value) const;
        [[nodiscard]] auto VerticalChildrenAlignment() const;
        auto VerticalChildrenAlignment(winrt::Microsoft::UI::Xaml::VerticalAlignment const& value) const;
        [[nodiscard]] auto MaximumRowsOrColumns() const;
        auto MaximumRowsOrColumns(int32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IWrapGrid>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IWrapGrid<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IWrapGridStatics
    {
        [[nodiscard]] auto ItemWidthProperty() const;
        [[nodiscard]] auto ItemHeightProperty() const;
        [[nodiscard]] auto OrientationProperty() const;
        [[nodiscard]] auto HorizontalChildrenAlignmentProperty() const;
        [[nodiscard]] auto VerticalChildrenAlignmentProperty() const;
        [[nodiscard]] auto MaximumRowsOrColumnsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IWrapGridStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IWrapGridStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IXamlControlsResources
    {
        [[nodiscard]] auto UseCompactResources() const;
        auto UseCompactResources(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IXamlControlsResources>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IXamlControlsResources<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IXamlControlsResourcesStatics
    {
        auto EnsureRevealLights(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        [[nodiscard]] auto UseCompactResourcesProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IXamlControlsResourcesStatics<D>;
    };
}
#endif
