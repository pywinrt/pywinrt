// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#ifndef WINRT_Microsoft_UI_Xaml_Shapes_0_H
#define WINRT_Microsoft_UI_Xaml_Shapes_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition
{
    struct CompositionBrush;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml
{
    struct DependencyProperty;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Media
{
    struct Brush;
    struct DoubleCollection;
    enum class FillRule : int32_t;
    struct Geometry;
    enum class PenLineCap : int32_t;
    enum class PenLineJoin : int32_t;
    struct PointCollection;
    enum class Stretch : int32_t;
    struct Transform;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Shapes
{
    struct IEllipse;
    struct ILine;
    struct ILineStatics;
    struct IPath;
    struct IPathFactory;
    struct IPathStatics;
    struct IPolygon;
    struct IPolygonStatics;
    struct IPolyline;
    struct IPolylineStatics;
    struct IRectangle;
    struct IRectangleStatics;
    struct IShape;
    struct IShapeFactory;
    struct IShapeStatics;
    struct Ellipse;
    struct Line;
    struct Path;
    struct Polygon;
    struct Polyline;
    struct Rectangle;
    struct Shape;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::IEllipse>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::ILine>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::ILineStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::IPath>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::IPathFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::IPathStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::IPolygon>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::IPolygonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::IPolyline>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::IPolylineStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::IRectangle>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::IRectangleStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::IShape>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::IShapeFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::IShapeStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::Ellipse>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::Line>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::Path>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::Polygon>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::Polyline>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::Rectangle>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Shapes::Shape>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::Ellipse> = L"Microsoft.UI.Xaml.Shapes.Ellipse";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::Line> = L"Microsoft.UI.Xaml.Shapes.Line";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::Path> = L"Microsoft.UI.Xaml.Shapes.Path";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::Polygon> = L"Microsoft.UI.Xaml.Shapes.Polygon";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::Polyline> = L"Microsoft.UI.Xaml.Shapes.Polyline";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::Rectangle> = L"Microsoft.UI.Xaml.Shapes.Rectangle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::Shape> = L"Microsoft.UI.Xaml.Shapes.Shape";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::IEllipse> = L"Microsoft.UI.Xaml.Shapes.IEllipse";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::ILine> = L"Microsoft.UI.Xaml.Shapes.ILine";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::ILineStatics> = L"Microsoft.UI.Xaml.Shapes.ILineStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::IPath> = L"Microsoft.UI.Xaml.Shapes.IPath";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::IPathFactory> = L"Microsoft.UI.Xaml.Shapes.IPathFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::IPathStatics> = L"Microsoft.UI.Xaml.Shapes.IPathStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::IPolygon> = L"Microsoft.UI.Xaml.Shapes.IPolygon";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::IPolygonStatics> = L"Microsoft.UI.Xaml.Shapes.IPolygonStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::IPolyline> = L"Microsoft.UI.Xaml.Shapes.IPolyline";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::IPolylineStatics> = L"Microsoft.UI.Xaml.Shapes.IPolylineStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::IRectangle> = L"Microsoft.UI.Xaml.Shapes.IRectangle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::IRectangleStatics> = L"Microsoft.UI.Xaml.Shapes.IRectangleStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::IShape> = L"Microsoft.UI.Xaml.Shapes.IShape";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::IShapeFactory> = L"Microsoft.UI.Xaml.Shapes.IShapeFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Shapes::IShapeStatics> = L"Microsoft.UI.Xaml.Shapes.IShapeStatics";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Shapes::IEllipse>{ 0x805C39AA,0xFA8A,0x5E0B,{ 0x98,0x47,0x4A,0xB8,0x1B,0x42,0xA3,0xDF } }; // 805C39AA-FA8A-5E0B-9847-4AB81B42A3DF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Shapes::ILine>{ 0x507B3858,0xAF7E,0x559B,{ 0xA8,0x7E,0x4C,0xC6,0xA5,0xD8,0xBA,0x96 } }; // 507B3858-AF7E-559B-A87E-4CC6A5D8BA96
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Shapes::ILineStatics>{ 0xA425BF93,0xF1F3,0x5DCB,{ 0x99,0x7E,0xB6,0xA2,0x6F,0x7A,0xE8,0xC0 } }; // A425BF93-F1F3-5DCB-997E-B6A26F7AE8C0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Shapes::IPath>{ 0x757D1CD8,0x0EC0,0x55C5,{ 0xB4,0x00,0x66,0x65,0x7E,0x49,0x3E,0x78 } }; // 757D1CD8-0EC0-55C5-B400-66657E493E78
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Shapes::IPathFactory>{ 0x5E82E4C9,0x7502,0x5B1F,{ 0xB9,0x40,0xC3,0x34,0x6A,0x71,0x36,0x2A } }; // 5E82E4C9-7502-5B1F-B940-C3346A71362A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Shapes::IPathStatics>{ 0x2146D36F,0x721C,0x5B54,{ 0xAF,0x7D,0x60,0xF3,0xAD,0xC4,0xFB,0xCA } }; // 2146D36F-721C-5B54-AF7D-60F3ADC4FBCA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Shapes::IPolygon>{ 0xFA126347,0xD1D4,0x54DD,{ 0xB1,0xA4,0xC3,0x50,0x19,0x39,0x79,0x44 } }; // FA126347-D1D4-54DD-B1A4-C35019397944
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Shapes::IPolygonStatics>{ 0x85DDBADA,0x9E37,0x5971,{ 0xA9,0xAA,0xDC,0xE3,0x1F,0x9C,0xF6,0x7A } }; // 85DDBADA-9E37-5971-A9AA-DCE31F9CF67A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Shapes::IPolyline>{ 0xC7F0BEC6,0x184C,0x5D96,{ 0x81,0x02,0x04,0xDD,0x21,0x1E,0x10,0x0C } }; // C7F0BEC6-184C-5D96-8102-04DD211E100C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Shapes::IPolylineStatics>{ 0x48840FE7,0xD735,0x5080,{ 0x9C,0x6D,0x28,0x62,0x66,0x5C,0xDD,0xA0 } }; // 48840FE7-D735-5080-9C6D-2862665CDDA0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Shapes::IRectangle>{ 0xBF7D30B9,0x152C,0x556E,{ 0x9F,0x10,0xD0,0xB7,0xEB,0xA4,0xE5,0x2F } }; // BF7D30B9-152C-556E-9F10-D0B7EBA4E52F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Shapes::IRectangleStatics>{ 0x3CC3CC79,0xC332,0x5AD0,{ 0x87,0x43,0x1F,0x1B,0x1E,0x67,0x0A,0x86 } }; // 3CC3CC79-C332-5AD0-8743-1F1B1E670A86
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Shapes::IShape>{ 0x9941AAD3,0x6AF2,0x5BA2,{ 0x90,0x85,0x85,0x06,0xD5,0xF2,0x48,0x5E } }; // 9941AAD3-6AF2-5BA2-9085-8506D5F2485E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Shapes::IShapeFactory>{ 0x4FECAFAF,0x8265,0x5252,{ 0xBA,0x5C,0xF4,0x36,0x39,0xF9,0x74,0xA5 } }; // 4FECAFAF-8265-5252-BA5C-F43639F974A5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Shapes::IShapeStatics>{ 0xEA407C43,0x8A09,0x587A,{ 0x95,0x8A,0x4D,0xD1,0x7D,0x21,0x7C,0xE1 } }; // EA407C43-8A09-587A-958A-4DD17D217CE1
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Shapes::Ellipse>{ using type = winrt::Microsoft::UI::Xaml::Shapes::IEllipse; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Shapes::Line>{ using type = winrt::Microsoft::UI::Xaml::Shapes::ILine; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Shapes::Path>{ using type = winrt::Microsoft::UI::Xaml::Shapes::IPath; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Shapes::Polygon>{ using type = winrt::Microsoft::UI::Xaml::Shapes::IPolygon; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Shapes::Polyline>{ using type = winrt::Microsoft::UI::Xaml::Shapes::IPolyline; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Shapes::Rectangle>{ using type = winrt::Microsoft::UI::Xaml::Shapes::IRectangle; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Shapes::Shape>{ using type = winrt::Microsoft::UI::Xaml::Shapes::IShape; };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Shapes::IEllipse>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Shapes::ILine>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_X1(double*) noexcept = 0;
            virtual int32_t __stdcall put_X1(double) noexcept = 0;
            virtual int32_t __stdcall get_Y1(double*) noexcept = 0;
            virtual int32_t __stdcall put_Y1(double) noexcept = 0;
            virtual int32_t __stdcall get_X2(double*) noexcept = 0;
            virtual int32_t __stdcall put_X2(double) noexcept = 0;
            virtual int32_t __stdcall get_Y2(double*) noexcept = 0;
            virtual int32_t __stdcall put_Y2(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Shapes::ILineStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_X1Property(void**) noexcept = 0;
            virtual int32_t __stdcall get_Y1Property(void**) noexcept = 0;
            virtual int32_t __stdcall get_X2Property(void**) noexcept = 0;
            virtual int32_t __stdcall get_Y2Property(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Shapes::IPath>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Data(void**) noexcept = 0;
            virtual int32_t __stdcall put_Data(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Shapes::IPathFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Shapes::IPathStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DataProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Shapes::IPolygon>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FillRule(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FillRule(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Points(void**) noexcept = 0;
            virtual int32_t __stdcall put_Points(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Shapes::IPolygonStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FillRuleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Shapes::IPolyline>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FillRule(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FillRule(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Points(void**) noexcept = 0;
            virtual int32_t __stdcall put_Points(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Shapes::IPolylineStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FillRuleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Shapes::IRectangle>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_RadiusX(double*) noexcept = 0;
            virtual int32_t __stdcall put_RadiusX(double) noexcept = 0;
            virtual int32_t __stdcall get_RadiusY(double*) noexcept = 0;
            virtual int32_t __stdcall put_RadiusY(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Shapes::IRectangleStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_RadiusXProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RadiusYProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Shapes::IShape>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Fill(void**) noexcept = 0;
            virtual int32_t __stdcall put_Fill(void*) noexcept = 0;
            virtual int32_t __stdcall get_Stroke(void**) noexcept = 0;
            virtual int32_t __stdcall put_Stroke(void*) noexcept = 0;
            virtual int32_t __stdcall get_StrokeMiterLimit(double*) noexcept = 0;
            virtual int32_t __stdcall put_StrokeMiterLimit(double) noexcept = 0;
            virtual int32_t __stdcall get_StrokeThickness(double*) noexcept = 0;
            virtual int32_t __stdcall put_StrokeThickness(double) noexcept = 0;
            virtual int32_t __stdcall get_StrokeStartLineCap(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_StrokeStartLineCap(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_StrokeEndLineCap(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_StrokeEndLineCap(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_StrokeLineJoin(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_StrokeLineJoin(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_StrokeDashOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_StrokeDashOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_StrokeDashCap(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_StrokeDashCap(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_StrokeDashArray(void**) noexcept = 0;
            virtual int32_t __stdcall put_StrokeDashArray(void*) noexcept = 0;
            virtual int32_t __stdcall get_Stretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Stretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_GeometryTransform(void**) noexcept = 0;
            virtual int32_t __stdcall GetAlphaMask(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Shapes::IShapeFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Shapes::IShapeStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FillProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StrokeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StrokeMiterLimitProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StrokeThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StrokeStartLineCapProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StrokeEndLineCapProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StrokeLineJoinProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StrokeDashOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StrokeDashCapProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StrokeDashArrayProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StretchProperty(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Shapes_IEllipse
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Shapes::IEllipse>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Shapes_IEllipse<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Shapes_ILine
    {
        [[nodiscard]] auto X1() const;
        auto X1(double value) const;
        [[nodiscard]] auto Y1() const;
        auto Y1(double value) const;
        [[nodiscard]] auto X2() const;
        auto X2(double value) const;
        [[nodiscard]] auto Y2() const;
        auto Y2(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Shapes::ILine>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Shapes_ILine<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Shapes_ILineStatics
    {
        [[nodiscard]] auto X1Property() const;
        [[nodiscard]] auto Y1Property() const;
        [[nodiscard]] auto X2Property() const;
        [[nodiscard]] auto Y2Property() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Shapes::ILineStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Shapes_ILineStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Shapes_IPath
    {
        [[nodiscard]] auto Data() const;
        auto Data(winrt::Microsoft::UI::Xaml::Media::Geometry const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Shapes::IPath>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Shapes_IPath<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Shapes_IPathFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Shapes::IPathFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Shapes_IPathFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Shapes_IPathStatics
    {
        [[nodiscard]] auto DataProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Shapes::IPathStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Shapes_IPathStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Shapes_IPolygon
    {
        [[nodiscard]] auto FillRule() const;
        auto FillRule(winrt::Microsoft::UI::Xaml::Media::FillRule const& value) const;
        [[nodiscard]] auto Points() const;
        auto Points(winrt::Microsoft::UI::Xaml::Media::PointCollection const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Shapes::IPolygon>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Shapes_IPolygon<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Shapes_IPolygonStatics
    {
        [[nodiscard]] auto FillRuleProperty() const;
        [[nodiscard]] auto PointsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Shapes::IPolygonStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Shapes_IPolygonStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Shapes_IPolyline
    {
        [[nodiscard]] auto FillRule() const;
        auto FillRule(winrt::Microsoft::UI::Xaml::Media::FillRule const& value) const;
        [[nodiscard]] auto Points() const;
        auto Points(winrt::Microsoft::UI::Xaml::Media::PointCollection const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Shapes::IPolyline>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Shapes_IPolyline<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Shapes_IPolylineStatics
    {
        [[nodiscard]] auto FillRuleProperty() const;
        [[nodiscard]] auto PointsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Shapes::IPolylineStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Shapes_IPolylineStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Shapes_IRectangle
    {
        [[nodiscard]] auto RadiusX() const;
        auto RadiusX(double value) const;
        [[nodiscard]] auto RadiusY() const;
        auto RadiusY(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Shapes::IRectangle>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Shapes_IRectangle<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Shapes_IRectangleStatics
    {
        [[nodiscard]] auto RadiusXProperty() const;
        [[nodiscard]] auto RadiusYProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Shapes::IRectangleStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Shapes_IRectangleStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Shapes_IShape
    {
        [[nodiscard]] auto Fill() const;
        auto Fill(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto Stroke() const;
        auto Stroke(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto StrokeMiterLimit() const;
        auto StrokeMiterLimit(double value) const;
        [[nodiscard]] auto StrokeThickness() const;
        auto StrokeThickness(double value) const;
        [[nodiscard]] auto StrokeStartLineCap() const;
        auto StrokeStartLineCap(winrt::Microsoft::UI::Xaml::Media::PenLineCap const& value) const;
        [[nodiscard]] auto StrokeEndLineCap() const;
        auto StrokeEndLineCap(winrt::Microsoft::UI::Xaml::Media::PenLineCap const& value) const;
        [[nodiscard]] auto StrokeLineJoin() const;
        auto StrokeLineJoin(winrt::Microsoft::UI::Xaml::Media::PenLineJoin const& value) const;
        [[nodiscard]] auto StrokeDashOffset() const;
        auto StrokeDashOffset(double value) const;
        [[nodiscard]] auto StrokeDashCap() const;
        auto StrokeDashCap(winrt::Microsoft::UI::Xaml::Media::PenLineCap const& value) const;
        [[nodiscard]] auto StrokeDashArray() const;
        auto StrokeDashArray(winrt::Microsoft::UI::Xaml::Media::DoubleCollection const& value) const;
        [[nodiscard]] auto Stretch() const;
        auto Stretch(winrt::Microsoft::UI::Xaml::Media::Stretch const& value) const;
        [[nodiscard]] auto GeometryTransform() const;
        auto GetAlphaMask() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Shapes::IShape>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Shapes_IShape<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Shapes_IShapeFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Shapes::IShapeFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Shapes_IShapeFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Shapes_IShapeStatics
    {
        [[nodiscard]] auto FillProperty() const;
        [[nodiscard]] auto StrokeProperty() const;
        [[nodiscard]] auto StrokeMiterLimitProperty() const;
        [[nodiscard]] auto StrokeThicknessProperty() const;
        [[nodiscard]] auto StrokeStartLineCapProperty() const;
        [[nodiscard]] auto StrokeEndLineCapProperty() const;
        [[nodiscard]] auto StrokeLineJoinProperty() const;
        [[nodiscard]] auto StrokeDashOffsetProperty() const;
        [[nodiscard]] auto StrokeDashCapProperty() const;
        [[nodiscard]] auto StrokeDashArrayProperty() const;
        [[nodiscard]] auto StretchProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Shapes::IShapeStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Shapes_IShapeStatics<D>;
    };
}
#endif
