// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#ifndef WINRT_Microsoft_UI_Xaml_Input_0_H
#define WINRT_Microsoft_UI_Xaml_Input_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Input
{
    enum class HoldingState : int32_t;
    struct ManipulationDelta;
    struct ManipulationVelocities;
    enum class PointerDeviceType : int32_t;
    struct PointerPoint;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml
{
    struct DependencyObject;
    struct DependencyProperty;
    enum class FocusState : int32_t;
    struct UIElement;
    struct XamlRoot;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Controls
{
    struct IconSource;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    template <typename T> struct WINRT_IMPL_EMPTY_BASES EventHandler;
    struct EventRegistrationToken;
    struct Point;
    struct Rect;
    template <typename TSender, typename TResult> struct WINRT_IMPL_EMPTY_BASES TypedEventHandler;
}
WINRT_EXPORT namespace winrt::Windows::System
{
    enum class VirtualKey : int32_t;
    enum class VirtualKeyModifiers : uint32_t;
}
WINRT_EXPORT namespace winrt::Windows::UI::Core
{
    struct CorePhysicalKeyStatus;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Input
{
    enum class FocusInputDeviceKind : int32_t
    {
        None = 0,
        Mouse = 1,
        Touch = 2,
        Pen = 3,
        Keyboard = 4,
        GameController = 5,
    };
    enum class FocusNavigationDirection : int32_t
    {
        Next = 0,
        Previous = 1,
        Up = 2,
        Down = 3,
        Left = 4,
        Right = 5,
        None = 6,
    };
    enum class InputScopeNameValue : int32_t
    {
        Default = 0,
        Url = 1,
        EmailSmtpAddress = 5,
        PersonalFullName = 7,
        CurrencyAmountAndSymbol = 20,
        CurrencyAmount = 21,
        DateMonthNumber = 23,
        DateDayNumber = 24,
        DateYear = 25,
        Digits = 28,
        Number = 29,
        Password = 31,
        TelephoneNumber = 32,
        TelephoneCountryCode = 33,
        TelephoneAreaCode = 34,
        TelephoneLocalNumber = 35,
        TimeHour = 37,
        TimeMinutesOrSeconds = 38,
        NumberFullWidth = 39,
        AlphanumericHalfWidth = 40,
        AlphanumericFullWidth = 41,
        Hiragana = 44,
        KatakanaHalfWidth = 45,
        KatakanaFullWidth = 46,
        Hanja = 47,
        HangulHalfWidth = 48,
        HangulFullWidth = 49,
        Search = 50,
        Formula = 51,
        SearchIncremental = 52,
        ChineseHalfWidth = 53,
        ChineseFullWidth = 54,
        NativeScript = 55,
        Text = 57,
        Chat = 58,
        NameOrPhoneNumber = 59,
        EmailNameOrAddress = 60,
        Maps = 62,
        NumericPassword = 63,
        NumericPin = 64,
        AlphanumericPin = 65,
        FormulaNumber = 67,
        ChatWithoutEmoji = 68,
    };
    enum class KeyTipPlacementMode : int32_t
    {
        Auto = 0,
        Bottom = 1,
        Top = 2,
        Left = 3,
        Right = 4,
        Center = 5,
        Hidden = 6,
    };
    enum class KeyboardAcceleratorPlacementMode : int32_t
    {
        Auto = 0,
        Hidden = 1,
    };
    enum class KeyboardNavigationMode : int32_t
    {
        Local = 0,
        Cycle = 1,
        Once = 2,
    };
    enum class ManipulationModes : uint32_t
    {
        None = 0,
        TranslateX = 0x1,
        TranslateY = 0x2,
        TranslateRailsX = 0x4,
        TranslateRailsY = 0x8,
        Rotate = 0x10,
        Scale = 0x20,
        TranslateInertia = 0x40,
        RotateInertia = 0x80,
        ScaleInertia = 0x100,
        All = 0xffff,
        System = 0x10000,
    };
    enum class StandardUICommandKind : int32_t
    {
        None = 0,
        Cut = 1,
        Copy = 2,
        Paste = 3,
        SelectAll = 4,
        Delete = 5,
        Share = 6,
        Save = 7,
        Open = 8,
        Close = 9,
        Pause = 10,
        Play = 11,
        Stop = 12,
        Forward = 13,
        Backward = 14,
        Undo = 15,
        Redo = 16,
    };
    enum class XYFocusKeyboardNavigationMode : int32_t
    {
        Auto = 0,
        Enabled = 1,
        Disabled = 2,
    };
    enum class XYFocusNavigationStrategy : int32_t
    {
        Auto = 0,
        Projection = 1,
        NavigationDirectionDistance = 2,
        RectilinearDistance = 3,
    };
    enum class XYFocusNavigationStrategyOverride : int32_t
    {
        None = 0,
        Auto = 1,
        Projection = 2,
        NavigationDirectionDistance = 3,
        RectilinearDistance = 4,
    };
    struct IAccessKeyDisplayDismissedEventArgs;
    struct IAccessKeyDisplayRequestedEventArgs;
    struct IAccessKeyInvokedEventArgs;
    struct IAccessKeyManager;
    struct IAccessKeyManagerStatics;
    struct IAccessKeyManagerStatics2;
    struct ICanExecuteRequestedEventArgs;
    struct ICharacterReceivedRoutedEventArgs;
    struct ICommand;
    struct IContextRequestedEventArgs;
    struct IDoubleTappedRoutedEventArgs;
    struct IExecuteRequestedEventArgs;
    struct IFindNextElementOptions;
    struct IFocusManager;
    struct IFocusManagerGotFocusEventArgs;
    struct IFocusManagerLostFocusEventArgs;
    struct IFocusManagerStatics;
    struct IFocusMovementResult;
    struct IGettingFocusEventArgs;
    struct IHoldingRoutedEventArgs;
    struct IInertiaExpansionBehavior;
    struct IInertiaRotationBehavior;
    struct IInertiaTranslationBehavior;
    struct IInputScope;
    struct IInputScopeName;
    struct IInputScopeNameFactory;
    struct IKeyRoutedEventArgs;
    struct IKeyboardAccelerator;
    struct IKeyboardAcceleratorFactory;
    struct IKeyboardAcceleratorInvokedEventArgs;
    struct IKeyboardAcceleratorStatics;
    struct ILosingFocusEventArgs;
    struct IManipulationCompletedRoutedEventArgs;
    struct IManipulationDeltaRoutedEventArgs;
    struct IManipulationInertiaStartingRoutedEventArgs;
    struct IManipulationPivot;
    struct IManipulationPivotFactory;
    struct IManipulationStartedRoutedEventArgs;
    struct IManipulationStartedRoutedEventArgsFactory;
    struct IManipulationStartingRoutedEventArgs;
    struct INoFocusCandidateFoundEventArgs;
    struct IPointer;
    struct IPointerRoutedEventArgs;
    struct IProcessKeyboardAcceleratorEventArgs;
    struct IRightTappedRoutedEventArgs;
    struct IStandardUICommand;
    struct IStandardUICommandFactory;
    struct IStandardUICommandStatics;
    struct ITappedRoutedEventArgs;
    struct IXamlUICommand;
    struct IXamlUICommandFactory;
    struct IXamlUICommandStatics;
    struct AccessKeyDisplayDismissedEventArgs;
    struct AccessKeyDisplayRequestedEventArgs;
    struct AccessKeyInvokedEventArgs;
    struct AccessKeyManager;
    struct CanExecuteRequestedEventArgs;
    struct CharacterReceivedRoutedEventArgs;
    struct ContextRequestedEventArgs;
    struct DoubleTappedRoutedEventArgs;
    struct ExecuteRequestedEventArgs;
    struct FindNextElementOptions;
    struct FocusManager;
    struct FocusManagerGotFocusEventArgs;
    struct FocusManagerLostFocusEventArgs;
    struct FocusMovementResult;
    struct GettingFocusEventArgs;
    struct HoldingRoutedEventArgs;
    struct InertiaExpansionBehavior;
    struct InertiaRotationBehavior;
    struct InertiaTranslationBehavior;
    struct InputScope;
    struct InputScopeName;
    struct KeyRoutedEventArgs;
    struct KeyboardAccelerator;
    struct KeyboardAcceleratorInvokedEventArgs;
    struct LosingFocusEventArgs;
    struct ManipulationCompletedRoutedEventArgs;
    struct ManipulationDeltaRoutedEventArgs;
    struct ManipulationInertiaStartingRoutedEventArgs;
    struct ManipulationPivot;
    struct ManipulationStartedRoutedEventArgs;
    struct ManipulationStartingRoutedEventArgs;
    struct NoFocusCandidateFoundEventArgs;
    struct Pointer;
    struct PointerRoutedEventArgs;
    struct ProcessKeyboardAcceleratorEventArgs;
    struct RightTappedRoutedEventArgs;
    struct StandardUICommand;
    struct TappedRoutedEventArgs;
    struct XamlUICommand;
    struct DoubleTappedEventHandler;
    struct HoldingEventHandler;
    struct KeyEventHandler;
    struct ManipulationCompletedEventHandler;
    struct ManipulationDeltaEventHandler;
    struct ManipulationInertiaStartingEventHandler;
    struct ManipulationStartedEventHandler;
    struct ManipulationStartingEventHandler;
    struct PointerEventHandler;
    struct RightTappedEventHandler;
    struct TappedEventHandler;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IAccessKeyDisplayDismissedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IAccessKeyDisplayRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IAccessKeyInvokedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IAccessKeyManager>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IAccessKeyManagerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IAccessKeyManagerStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ICanExecuteRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ICommand>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IContextRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IExecuteRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IFindNextElementOptions>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IFocusManager>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IFocusManagerGotFocusEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IFocusManagerLostFocusEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IFocusManagerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IFocusMovementResult>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IGettingFocusEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IInertiaExpansionBehavior>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IInertiaRotationBehavior>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IInertiaTranslationBehavior>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IInputScope>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IInputScopeName>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IInputScopeNameFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IKeyboardAccelerator>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ILosingFocusEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IManipulationPivot>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IManipulationPivotFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::INoFocusCandidateFoundEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IPointer>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IStandardUICommand>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IStandardUICommandFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IStandardUICommandStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IXamlUICommand>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IXamlUICommandFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::IXamlUICommandStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::AccessKeyDisplayDismissedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::AccessKeyDisplayRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::AccessKeyInvokedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::AccessKeyManager>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::CanExecuteRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::CharacterReceivedRoutedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ContextRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::DoubleTappedRoutedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ExecuteRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::FindNextElementOptions>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::FocusManager>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::FocusManagerGotFocusEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::FocusManagerLostFocusEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::FocusMovementResult>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::GettingFocusEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::HoldingRoutedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::InertiaExpansionBehavior>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::InertiaRotationBehavior>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::InertiaTranslationBehavior>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::InputScope>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::InputScopeName>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::KeyRoutedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::KeyboardAccelerator>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::KeyboardAcceleratorInvokedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::LosingFocusEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ManipulationCompletedRoutedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ManipulationDeltaRoutedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ManipulationInertiaStartingRoutedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ManipulationPivot>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ManipulationStartedRoutedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ManipulationStartingRoutedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::NoFocusCandidateFoundEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::Pointer>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ProcessKeyboardAcceleratorEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::RightTappedRoutedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::StandardUICommand>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::TappedRoutedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::XamlUICommand>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::FocusInputDeviceKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::FocusNavigationDirection>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::InputScopeNameValue>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::KeyTipPlacementMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::KeyboardAcceleratorPlacementMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::KeyboardNavigationMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ManipulationModes>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::StandardUICommandKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::XYFocusKeyboardNavigationMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::XYFocusNavigationStrategy>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::XYFocusNavigationStrategyOverride>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::DoubleTappedEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::HoldingEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::KeyEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ManipulationCompletedEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ManipulationDeltaEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ManipulationInertiaStartingEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ManipulationStartedEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::ManipulationStartingEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::PointerEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::RightTappedEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Input::TappedEventHandler>{ using type = delegate_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::AccessKeyDisplayDismissedEventArgs> = L"Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::AccessKeyDisplayRequestedEventArgs> = L"Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::AccessKeyInvokedEventArgs> = L"Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::AccessKeyManager> = L"Microsoft.UI.Xaml.Input.AccessKeyManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::CanExecuteRequestedEventArgs> = L"Microsoft.UI.Xaml.Input.CanExecuteRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::CharacterReceivedRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ContextRequestedEventArgs> = L"Microsoft.UI.Xaml.Input.ContextRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::DoubleTappedRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ExecuteRequestedEventArgs> = L"Microsoft.UI.Xaml.Input.ExecuteRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::FindNextElementOptions> = L"Microsoft.UI.Xaml.Input.FindNextElementOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::FocusManager> = L"Microsoft.UI.Xaml.Input.FocusManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::FocusManagerGotFocusEventArgs> = L"Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::FocusManagerLostFocusEventArgs> = L"Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::FocusMovementResult> = L"Microsoft.UI.Xaml.Input.FocusMovementResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::GettingFocusEventArgs> = L"Microsoft.UI.Xaml.Input.GettingFocusEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::HoldingRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::InertiaExpansionBehavior> = L"Microsoft.UI.Xaml.Input.InertiaExpansionBehavior";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::InertiaRotationBehavior> = L"Microsoft.UI.Xaml.Input.InertiaRotationBehavior";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::InertiaTranslationBehavior> = L"Microsoft.UI.Xaml.Input.InertiaTranslationBehavior";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::InputScope> = L"Microsoft.UI.Xaml.Input.InputScope";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::InputScopeName> = L"Microsoft.UI.Xaml.Input.InputScopeName";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::KeyRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.KeyRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::KeyboardAccelerator> = L"Microsoft.UI.Xaml.Input.KeyboardAccelerator";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::KeyboardAcceleratorInvokedEventArgs> = L"Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::LosingFocusEventArgs> = L"Microsoft.UI.Xaml.Input.LosingFocusEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ManipulationCompletedRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ManipulationDeltaRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ManipulationInertiaStartingRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ManipulationPivot> = L"Microsoft.UI.Xaml.Input.ManipulationPivot";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ManipulationStartedRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ManipulationStartingRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::NoFocusCandidateFoundEventArgs> = L"Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::Pointer> = L"Microsoft.UI.Xaml.Input.Pointer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.PointerRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ProcessKeyboardAcceleratorEventArgs> = L"Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::RightTappedRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::StandardUICommand> = L"Microsoft.UI.Xaml.Input.StandardUICommand";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::TappedRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.TappedRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::XamlUICommand> = L"Microsoft.UI.Xaml.Input.XamlUICommand";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::FocusInputDeviceKind> = L"Microsoft.UI.Xaml.Input.FocusInputDeviceKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::FocusNavigationDirection> = L"Microsoft.UI.Xaml.Input.FocusNavigationDirection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::InputScopeNameValue> = L"Microsoft.UI.Xaml.Input.InputScopeNameValue";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::KeyTipPlacementMode> = L"Microsoft.UI.Xaml.Input.KeyTipPlacementMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::KeyboardAcceleratorPlacementMode> = L"Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::KeyboardNavigationMode> = L"Microsoft.UI.Xaml.Input.KeyboardNavigationMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ManipulationModes> = L"Microsoft.UI.Xaml.Input.ManipulationModes";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::StandardUICommandKind> = L"Microsoft.UI.Xaml.Input.StandardUICommandKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::XYFocusKeyboardNavigationMode> = L"Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::XYFocusNavigationStrategy> = L"Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::XYFocusNavigationStrategyOverride> = L"Microsoft.UI.Xaml.Input.XYFocusNavigationStrategyOverride";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IAccessKeyDisplayDismissedEventArgs> = L"Microsoft.UI.Xaml.Input.IAccessKeyDisplayDismissedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IAccessKeyDisplayRequestedEventArgs> = L"Microsoft.UI.Xaml.Input.IAccessKeyDisplayRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IAccessKeyInvokedEventArgs> = L"Microsoft.UI.Xaml.Input.IAccessKeyInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IAccessKeyManager> = L"Microsoft.UI.Xaml.Input.IAccessKeyManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IAccessKeyManagerStatics> = L"Microsoft.UI.Xaml.Input.IAccessKeyManagerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IAccessKeyManagerStatics2> = L"Microsoft.UI.Xaml.Input.IAccessKeyManagerStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ICanExecuteRequestedEventArgs> = L"Microsoft.UI.Xaml.Input.ICanExecuteRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ICommand> = L"Microsoft.UI.Xaml.Input.ICommand";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IContextRequestedEventArgs> = L"Microsoft.UI.Xaml.Input.IContextRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IExecuteRequestedEventArgs> = L"Microsoft.UI.Xaml.Input.IExecuteRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IFindNextElementOptions> = L"Microsoft.UI.Xaml.Input.IFindNextElementOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IFocusManager> = L"Microsoft.UI.Xaml.Input.IFocusManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IFocusManagerGotFocusEventArgs> = L"Microsoft.UI.Xaml.Input.IFocusManagerGotFocusEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IFocusManagerLostFocusEventArgs> = L"Microsoft.UI.Xaml.Input.IFocusManagerLostFocusEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IFocusManagerStatics> = L"Microsoft.UI.Xaml.Input.IFocusManagerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IFocusMovementResult> = L"Microsoft.UI.Xaml.Input.IFocusMovementResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IGettingFocusEventArgs> = L"Microsoft.UI.Xaml.Input.IGettingFocusEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IInertiaExpansionBehavior> = L"Microsoft.UI.Xaml.Input.IInertiaExpansionBehavior";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IInertiaRotationBehavior> = L"Microsoft.UI.Xaml.Input.IInertiaRotationBehavior";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IInertiaTranslationBehavior> = L"Microsoft.UI.Xaml.Input.IInertiaTranslationBehavior";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IInputScope> = L"Microsoft.UI.Xaml.Input.IInputScope";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IInputScopeName> = L"Microsoft.UI.Xaml.Input.IInputScopeName";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IInputScopeNameFactory> = L"Microsoft.UI.Xaml.Input.IInputScopeNameFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IKeyboardAccelerator> = L"Microsoft.UI.Xaml.Input.IKeyboardAccelerator";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorFactory> = L"Microsoft.UI.Xaml.Input.IKeyboardAcceleratorFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs> = L"Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorStatics> = L"Microsoft.UI.Xaml.Input.IKeyboardAcceleratorStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ILosingFocusEventArgs> = L"Microsoft.UI.Xaml.Input.ILosingFocusEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IManipulationPivot> = L"Microsoft.UI.Xaml.Input.IManipulationPivot";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IManipulationPivotFactory> = L"Microsoft.UI.Xaml.Input.IManipulationPivotFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgsFactory> = L"Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::INoFocusCandidateFoundEventArgs> = L"Microsoft.UI.Xaml.Input.INoFocusCandidateFoundEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IPointer> = L"Microsoft.UI.Xaml.Input.IPointer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs> = L"Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IStandardUICommand> = L"Microsoft.UI.Xaml.Input.IStandardUICommand";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IStandardUICommandFactory> = L"Microsoft.UI.Xaml.Input.IStandardUICommandFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IStandardUICommandStatics> = L"Microsoft.UI.Xaml.Input.IStandardUICommandStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs> = L"Microsoft.UI.Xaml.Input.ITappedRoutedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IXamlUICommand> = L"Microsoft.UI.Xaml.Input.IXamlUICommand";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IXamlUICommandFactory> = L"Microsoft.UI.Xaml.Input.IXamlUICommandFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::IXamlUICommandStatics> = L"Microsoft.UI.Xaml.Input.IXamlUICommandStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::DoubleTappedEventHandler> = L"Microsoft.UI.Xaml.Input.DoubleTappedEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::HoldingEventHandler> = L"Microsoft.UI.Xaml.Input.HoldingEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::KeyEventHandler> = L"Microsoft.UI.Xaml.Input.KeyEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ManipulationCompletedEventHandler> = L"Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ManipulationDeltaEventHandler> = L"Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ManipulationInertiaStartingEventHandler> = L"Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ManipulationStartedEventHandler> = L"Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::ManipulationStartingEventHandler> = L"Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::PointerEventHandler> = L"Microsoft.UI.Xaml.Input.PointerEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::RightTappedEventHandler> = L"Microsoft.UI.Xaml.Input.RightTappedEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Input::TappedEventHandler> = L"Microsoft.UI.Xaml.Input.TappedEventHandler";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IAccessKeyDisplayDismissedEventArgs>{ 0x125A83D8,0x7F86,0x5EA9,{ 0x90,0x63,0xB9,0x40,0x7E,0x64,0x45,0x87 } }; // 125A83D8-7F86-5EA9-9063-B9407E644587
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IAccessKeyDisplayRequestedEventArgs>{ 0xC4ED84D8,0x2B27,0x59B1,{ 0x9C,0xF0,0x7F,0x91,0x64,0xDE,0x58,0xCB } }; // C4ED84D8-2B27-59B1-9CF0-7F9164DE58CB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IAccessKeyInvokedEventArgs>{ 0xD00C11A4,0xF9FB,0x5707,{ 0x96,0x92,0x98,0xB8,0x0B,0xB8,0x54,0x6D } }; // D00C11A4-F9FB-5707-9692-98B80BB8546D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IAccessKeyManager>{ 0x8F2A4402,0xA635,0x53DC,{ 0xBC,0x17,0xDA,0x91,0x1E,0xAB,0xAA,0xDE } }; // 8F2A4402-A635-53DC-BC17-DA911EABAADE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IAccessKeyManagerStatics>{ 0x3375AEF7,0x742F,0x5E84,{ 0xB7,0x6F,0xC1,0x87,0xE0,0x82,0x53,0xBF } }; // 3375AEF7-742F-5E84-B76F-C187E08253BF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IAccessKeyManagerStatics2>{ 0x512C9F63,0x24AD,0x5DF2,{ 0xB8,0xED,0x47,0x24,0x06,0xDB,0x31,0xC0 } }; // 512C9F63-24AD-5DF2-B8ED-472406DB31C0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::ICanExecuteRequestedEventArgs>{ 0xE4BF6D7D,0xF6EB,0x53CA,{ 0xA2,0xD4,0xC7,0x41,0xEC,0x87,0x1E,0x38 } }; // E4BF6D7D-F6EB-53CA-A2D4-C741EC871E38
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs>{ 0xE26CA5BB,0x34C3,0x5C1E,{ 0x9A,0x16,0x00,0xB8,0x0B,0x07,0xA8,0x99 } }; // E26CA5BB-34C3-5C1E-9A16-00B80B07A899
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::ICommand>{ 0xE5AF3542,0xCA67,0x4081,{ 0x99,0x5B,0x70,0x9D,0xD1,0x37,0x92,0xDF } }; // E5AF3542-CA67-4081-995B-709DD13792DF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IContextRequestedEventArgs>{ 0xBCEDCB98,0x77B5,0x53C0,{ 0x80,0x2E,0xFD,0x52,0xF3,0x80,0x6E,0x51 } }; // BCEDCB98-77B5-53C0-802E-FD52F3806E51
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs>{ 0x32B9549D,0x11D8,0x53A5,{ 0xA9,0x53,0x02,0x40,0x95,0x37,0xA1,0x1F } }; // 32B9549D-11D8-53A5-A953-02409537A11F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IExecuteRequestedEventArgs>{ 0xE1A9FD0C,0x34D0,0x5AE2,{ 0x8F,0x5D,0x37,0x7E,0x7A,0x8A,0x27,0x08 } }; // E1A9FD0C-34D0-5AE2-8F5D-377E7A8A2708
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IFindNextElementOptions>{ 0x7F88E76B,0x7417,0x5447,{ 0xAE,0xD4,0x2F,0xAB,0xD2,0x91,0xBD,0xC6 } }; // 7F88E76B-7417-5447-AED4-2FABD291BDC6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IFocusManager>{ 0x9FD07BC5,0xD2D4,0x53FE,{ 0xA3,0x1A,0x84,0x6D,0xE8,0xB7,0xA2,0x57 } }; // 9FD07BC5-D2D4-53FE-A31A-846DE8B7A257
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IFocusManagerGotFocusEventArgs>{ 0x50ACA341,0x4519,0x59CF,{ 0x83,0xB1,0xC9,0xC4,0x5C,0xFD,0xB8,0x16 } }; // 50ACA341-4519-59CF-83B1-C9C45CFDB816
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IFocusManagerLostFocusEventArgs>{ 0xFDAF2C3F,0xA22E,0x5902,{ 0xAB,0xCE,0xB6,0x07,0x58,0xFB,0xED,0x1E } }; // FDAF2C3F-A22E-5902-ABCE-B60758FBED1E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IFocusManagerStatics>{ 0xE73DCE04,0xE23A,0x5FB3,{ 0x96,0xAB,0x7D,0xF0,0x4C,0x51,0xDF,0xF2 } }; // E73DCE04-E23A-5FB3-96AB-7DF04C51DFF2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IFocusMovementResult>{ 0xA46259FD,0x3EDD,0x554B,{ 0xA1,0x88,0x0A,0x47,0xB7,0x1E,0x4E,0x1A } }; // A46259FD-3EDD-554B-A188-0A47B71E4E1A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IGettingFocusEventArgs>{ 0x37FD3AF0,0xBD3C,0x5BF5,{ 0xA9,0xCD,0x71,0xA1,0xE8,0x7A,0xF9,0x50 } }; // 37FD3AF0-BD3C-5BF5-A9CD-71A1E87AF950
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs>{ 0x8272A4B2,0x2221,0x551E,{ 0xB0,0xBB,0x16,0xE2,0x91,0x38,0xAB,0x20 } }; // 8272A4B2-2221-551E-B0BB-16E29138AB20
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IInertiaExpansionBehavior>{ 0xD60029B7,0xF0CD,0x5AEA,{ 0xAB,0xE5,0x74,0x10,0xD0,0x91,0x18,0xC6 } }; // D60029B7-F0CD-5AEA-ABE5-7410D09118C6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IInertiaRotationBehavior>{ 0x27B4BD03,0x9149,0x5691,{ 0xBC,0xE5,0xFA,0x33,0xB3,0x2C,0x4A,0x81 } }; // 27B4BD03-9149-5691-BCE5-FA33B32C4A81
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IInertiaTranslationBehavior>{ 0xD4F91CF5,0x3317,0x5914,{ 0xB2,0x5A,0xEA,0x6E,0xE5,0x5B,0x96,0xD0 } }; // D4F91CF5-3317-5914-B25A-EA6EE55B96D0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IInputScope>{ 0x76EA58B1,0xE910,0x5176,{ 0x91,0x47,0x69,0x5C,0xC9,0x5E,0x7D,0xA2 } }; // 76EA58B1-E910-5176-9147-695CC95E7DA2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IInputScopeName>{ 0xEE99A66D,0x28D0,0x53CB,{ 0x82,0xEE,0x1B,0x6E,0xE5,0x8B,0xCC,0x35 } }; // EE99A66D-28D0-53CB-82EE-1B6EE58BCC35
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IInputScopeNameFactory>{ 0xFEEC2EFD,0xBC09,0x5CD6,{ 0x9B,0x47,0x6D,0x35,0xD1,0xD8,0x7C,0x61 } }; // FEEC2EFD-BC09-5CD6-9B47-6D35D1D87C61
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs>{ 0xEE357007,0xA2D6,0x5C75,{ 0x94,0x31,0x05,0xFD,0x66,0xEC,0x79,0x15 } }; // EE357007-A2D6-5C75-9431-05FD66EC7915
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IKeyboardAccelerator>{ 0x6F8BF1E2,0x4E91,0x5CF9,{ 0xA6,0xBE,0x47,0x70,0xCA,0xF3,0xD7,0x70 } }; // 6F8BF1E2-4E91-5CF9-A6BE-4770CAF3D770
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorFactory>{ 0xCA1D410A,0xAF2A,0x51B9,{ 0xA1,0xDE,0x6C,0x0A,0xF9,0xF3,0xB5,0x98 } }; // CA1D410A-AF2A-51B9-A1DE-6C0AF9F3B598
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs>{ 0x62C9FDB0,0xB574,0x527D,{ 0x97,0xEB,0x5C,0x7F,0x67,0x44,0x41,0xE0 } }; // 62C9FDB0-B574-527D-97EB-5C7F674441E0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorStatics>{ 0x73E674CA,0x73F4,0x5E77,{ 0xB8,0xD6,0xFF,0x78,0x52,0xA6,0x3B,0x0B } }; // 73E674CA-73F4-5E77-B8D6-FF7852A63B0B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::ILosingFocusEventArgs>{ 0xFA0E5FFA,0x2B1B,0x52F8,{ 0xBB,0x66,0xE3,0x5F,0x51,0xE7,0x3C,0xF3 } }; // FA0E5FFA-2B1B-52F8-BB66-E35F51E73CF3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs>{ 0xE3BE9E4E,0xC5FB,0x5859,{ 0xA8,0x1D,0xCE,0x12,0xFC,0x3A,0x2F,0x4D } }; // E3BE9E4E-C5FB-5859-A81D-CE12FC3A2F4D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs>{ 0x51369745,0x960F,0x54AC,{ 0x93,0xFA,0x76,0x3D,0x22,0x91,0x0D,0xEA } }; // 51369745-960F-54AC-93FA-763D22910DEA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs>{ 0x17D510BE,0x5514,0x5952,{ 0x9A,0xFD,0x95,0x9B,0x60,0xAB,0x93,0x94 } }; // 17D510BE-5514-5952-9AFD-959B60AB9394
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IManipulationPivot>{ 0x286BABA4,0x313D,0x507C,{ 0xAD,0xC5,0xF7,0x39,0x73,0x2C,0xEA,0x27 } }; // 286BABA4-313D-507C-ADC5-F739732CEA27
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IManipulationPivotFactory>{ 0x67143CCD,0xEA6C,0x5FE2,{ 0xBE,0xF2,0xAD,0xCB,0xD7,0xAF,0x52,0xFD } }; // 67143CCD-EA6C-5FE2-BEF2-ADCBD7AF52FD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs>{ 0x61857950,0x5821,0x5652,{ 0x9F,0xDF,0xC6,0x27,0x7C,0x58,0x86,0xF5 } }; // 61857950-5821-5652-9FDF-C6277C5886F5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgsFactory>{ 0x5681B0DE,0x3FA7,0x503E,{ 0x9C,0x46,0xA8,0x03,0x39,0x76,0x02,0x92 } }; // 5681B0DE-3FA7-503E-9C46-A80339760292
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs>{ 0x93A99F86,0xF5A0,0x5326,{ 0x91,0xB0,0x85,0x1C,0x89,0x7A,0xF7,0x9F } }; // 93A99F86-F5A0-5326-91B0-851C897AF79F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::INoFocusCandidateFoundEventArgs>{ 0xA2D7153A,0xCD2A,0x59CB,{ 0xA5,0x74,0xAC,0x82,0xE3,0x0B,0x92,0x01 } }; // A2D7153A-CD2A-59CB-A574-AC82E30B9201
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IPointer>{ 0x1F9AFBF5,0x11A3,0x5E68,{ 0xAA,0x1B,0x72,0xFE,0xBF,0xA0,0xAB,0x23 } }; // 1F9AFBF5-11A3-5E68-AA1B-72FEBFA0AB23
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs>{ 0x66E78A9A,0x1BEC,0x5F92,{ 0xB1,0xA1,0xEA,0x63,0x34,0xEE,0x51,0x1C } }; // 66E78A9A-1BEC-5F92-B1A1-EA6334EE511C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs>{ 0x9BE0D058,0x3D26,0x5811,{ 0xB5,0x0A,0x3B,0xB8,0x0C,0xA7,0x66,0xC9 } }; // 9BE0D058-3D26-5811-B50A-3BB80CA766C9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs>{ 0x3972FAFB,0x2915,0x5C62,{ 0xBB,0x6B,0x54,0xAD,0x84,0xFF,0x40,0x0D } }; // 3972FAFB-2915-5C62-BB6B-54AD84FF400D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IStandardUICommand>{ 0x5F395D50,0x5449,0x59AB,{ 0x9C,0xB2,0x4E,0x37,0x00,0x03,0x3F,0x03 } }; // 5F395D50-5449-59AB-9CB2-4E3700033F03
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IStandardUICommandFactory>{ 0x5800F099,0x3746,0x5BCF,{ 0xB1,0xCE,0xAF,0x3D,0x6B,0xF8,0xE8,0x3F } }; // 5800F099-3746-5BCF-B1CE-AF3D6BF8E83F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IStandardUICommandStatics>{ 0xAB80C197,0x85CC,0x5D36,{ 0x81,0xAA,0x15,0x6C,0xD6,0x3B,0xE3,0x1A } }; // AB80C197-85CC-5D36-81AA-156CD63BE31A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs>{ 0x73F74B8C,0x3709,0x547E,{ 0x8E,0x0C,0x51,0xC0,0x3C,0x89,0x12,0x6A } }; // 73F74B8C-3709-547E-8E0C-51C03C89126A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IXamlUICommand>{ 0xA457F2CB,0x51E0,0x541C,{ 0x9C,0x42,0xDD,0x1D,0xCB,0xDF,0x58,0xFB } }; // A457F2CB-51E0-541C-9C42-DD1DCBDF58FB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IXamlUICommandFactory>{ 0xF1F80A20,0x0E31,0x5505,{ 0x8B,0xC3,0xCD,0xD1,0xF0,0x94,0x7F,0x1D } }; // F1F80A20-0E31-5505-8BC3-CDD1F0947F1D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::IXamlUICommandStatics>{ 0x981DBDA6,0xCDCB,0x5E35,{ 0xB2,0x4B,0xC4,0xF6,0x0B,0xA1,0x48,0xD9 } }; // 981DBDA6-CDCB-5E35-B24B-C4F60BA148D9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::DoubleTappedEventHandler>{ 0xF7A501B9,0xE277,0x5611,{ 0x87,0xB0,0x0E,0x06,0x07,0x62,0x21,0x83 } }; // F7A501B9-E277-5611-87B0-0E0607622183
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::HoldingEventHandler>{ 0xFE23C5BD,0x4984,0x56B6,{ 0xB9,0x2B,0xFC,0x9D,0x12,0x16,0xB2,0x4E } }; // FE23C5BD-4984-56B6-B92B-FC9D1216B24E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::KeyEventHandler>{ 0xDB68E7CC,0x9A2B,0x527D,{ 0x99,0x89,0x25,0x28,0x4D,0xAC,0xCC,0x03 } }; // DB68E7CC-9A2B-527D-9989-25284DACCC03
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::ManipulationCompletedEventHandler>{ 0xD51DF8DB,0x71CD,0x5BFD,{ 0x84,0x26,0x76,0x72,0x18,0xEE,0x55,0xEC } }; // D51DF8DB-71CD-5BFD-8426-767218EE55EC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::ManipulationDeltaEventHandler>{ 0x83F2D4CE,0x105F,0x5392,{ 0xA3,0x8A,0xB7,0x46,0x7B,0x7C,0x2E,0xA5 } }; // 83F2D4CE-105F-5392-A38A-B7467B7C2EA5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::ManipulationInertiaStartingEventHandler>{ 0x5DE296BD,0x6F1C,0x5F60,{ 0x91,0x80,0x10,0x70,0x52,0x82,0x57,0x6C } }; // 5DE296BD-6F1C-5F60-9180-10705282576C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::ManipulationStartedEventHandler>{ 0x41060669,0x304C,0x53AC,{ 0x9D,0x43,0xBC,0x31,0x12,0x35,0xAA,0xE4 } }; // 41060669-304C-53AC-9D43-BC311235AAE4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::ManipulationStartingEventHandler>{ 0x44F528F1,0xF0E4,0x505C,{ 0xA0,0xBB,0x0C,0x48,0x39,0xB2,0x9D,0xF5 } }; // 44F528F1-F0E4-505C-A0BB-0C4839B29DF5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::PointerEventHandler>{ 0xA48A71E1,0x8BB4,0x5597,{ 0x9E,0x31,0x90,0x3A,0x3F,0x6A,0x04,0xFB } }; // A48A71E1-8BB4-5597-9E31-903A3F6A04FB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::RightTappedEventHandler>{ 0x5070E32F,0x3DC7,0x56CF,{ 0x8F,0xDD,0xDE,0x1B,0x40,0xD0,0xB4,0x72 } }; // 5070E32F-3DC7-56CF-8FDD-DE1B40D0B472
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Input::TappedEventHandler>{ 0xB60074F3,0x125B,0x534E,{ 0x8F,0x9C,0x97,0x69,0xBD,0x3F,0x0F,0x64 } }; // B60074F3-125B-534E-8F9C-9769BD3F0F64
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::AccessKeyDisplayDismissedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IAccessKeyDisplayDismissedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::AccessKeyDisplayRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IAccessKeyDisplayRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::AccessKeyInvokedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IAccessKeyInvokedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::AccessKeyManager>{ using type = winrt::Microsoft::UI::Xaml::Input::IAccessKeyManager; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::CanExecuteRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::ICanExecuteRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::CharacterReceivedRoutedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::ContextRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IContextRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::DoubleTappedRoutedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::ExecuteRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IExecuteRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::FindNextElementOptions>{ using type = winrt::Microsoft::UI::Xaml::Input::IFindNextElementOptions; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::FocusManager>{ using type = winrt::Microsoft::UI::Xaml::Input::IFocusManager; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::FocusManagerGotFocusEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IFocusManagerGotFocusEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::FocusManagerLostFocusEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IFocusManagerLostFocusEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::FocusMovementResult>{ using type = winrt::Microsoft::UI::Xaml::Input::IFocusMovementResult; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::GettingFocusEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IGettingFocusEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::HoldingRoutedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::InertiaExpansionBehavior>{ using type = winrt::Microsoft::UI::Xaml::Input::IInertiaExpansionBehavior; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::InertiaRotationBehavior>{ using type = winrt::Microsoft::UI::Xaml::Input::IInertiaRotationBehavior; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::InertiaTranslationBehavior>{ using type = winrt::Microsoft::UI::Xaml::Input::IInertiaTranslationBehavior; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::InputScope>{ using type = winrt::Microsoft::UI::Xaml::Input::IInputScope; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::InputScopeName>{ using type = winrt::Microsoft::UI::Xaml::Input::IInputScopeName; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::KeyRoutedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::KeyboardAccelerator>{ using type = winrt::Microsoft::UI::Xaml::Input::IKeyboardAccelerator; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::KeyboardAcceleratorInvokedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::LosingFocusEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::ILosingFocusEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::ManipulationCompletedRoutedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::ManipulationDeltaRoutedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::ManipulationInertiaStartingRoutedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::ManipulationPivot>{ using type = winrt::Microsoft::UI::Xaml::Input::IManipulationPivot; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::ManipulationStartedRoutedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::ManipulationStartingRoutedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::NoFocusCandidateFoundEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::INoFocusCandidateFoundEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::Pointer>{ using type = winrt::Microsoft::UI::Xaml::Input::IPointer; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::ProcessKeyboardAcceleratorEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::RightTappedRoutedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::StandardUICommand>{ using type = winrt::Microsoft::UI::Xaml::Input::IStandardUICommand; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::TappedRoutedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Input::XamlUICommand>{ using type = winrt::Microsoft::UI::Xaml::Input::IXamlUICommand; };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IAccessKeyDisplayDismissedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IAccessKeyDisplayRequestedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PressedKeys(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IAccessKeyInvokedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IAccessKeyManager>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IAccessKeyManagerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDisplayModeEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall get_AreKeyTipsEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreKeyTipsEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall add_IsDisplayModeEnabledChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_IsDisplayModeEnabledChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ExitDisplayMode() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IAccessKeyManagerStatics2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall EnterDisplayModeForXamlRoot(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::ICanExecuteRequestedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Parameter(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanExecute(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanExecute(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Character(char16_t*) noexcept = 0;
            virtual int32_t __stdcall get_KeyStatus(struct struct_Windows_UI_Core_CorePhysicalKeyStatus*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::ICommand>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall add_CanExecuteChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CanExecuteChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall CanExecute(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall Execute(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IContextRequestedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall TryGetPosition(void*, winrt::Windows::Foundation::Point*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall GetPosition(void*, winrt::Windows::Foundation::Point*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IExecuteRequestedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Parameter(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IFindNextElementOptions>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SearchRoot(void**) noexcept = 0;
            virtual int32_t __stdcall put_SearchRoot(void*) noexcept = 0;
            virtual int32_t __stdcall get_ExclusionRect(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall put_ExclusionRect(winrt::Windows::Foundation::Rect) noexcept = 0;
            virtual int32_t __stdcall get_HintRect(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall put_HintRect(winrt::Windows::Foundation::Rect) noexcept = 0;
            virtual int32_t __stdcall get_XYFocusNavigationStrategyOverride(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_XYFocusNavigationStrategyOverride(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IFocusManager>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IFocusManagerGotFocusEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_NewFocusedElement(void**) noexcept = 0;
            virtual int32_t __stdcall get_CorrelationId(winrt::guid*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IFocusManagerLostFocusEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldFocusedElement(void**) noexcept = 0;
            virtual int32_t __stdcall get_CorrelationId(winrt::guid*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IFocusManagerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall add_GotFocus(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_GotFocus(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_LostFocus(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_LostFocus(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_GettingFocus(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_GettingFocus(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_LosingFocus(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_LosingFocus(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall TryFocusAsync(void*, int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall TryMoveFocusAsync(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall TryMoveFocusWithOptionsAsync(int32_t, void*, void**) noexcept = 0;
            virtual int32_t __stdcall TryMoveFocusWithOptions(int32_t, void*, bool*) noexcept = 0;
            virtual int32_t __stdcall FindNextElement(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall FindFirstFocusableElement(void*, void**) noexcept = 0;
            virtual int32_t __stdcall FindLastFocusableElement(void*, void**) noexcept = 0;
            virtual int32_t __stdcall FindNextElementWithOptions(int32_t, void*, void**) noexcept = 0;
            virtual int32_t __stdcall FindNextFocusableElement(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall FindNextFocusableElementWithHint(int32_t, winrt::Windows::Foundation::Rect, void**) noexcept = 0;
            virtual int32_t __stdcall TryMoveFocus(int32_t, bool*) noexcept = 0;
            virtual int32_t __stdcall GetFocusedElement(void**) noexcept = 0;
            virtual int32_t __stdcall GetFocusedElementWithRoot(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IFocusMovementResult>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Succeeded(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IGettingFocusEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldFocusedElement(void**) noexcept = 0;
            virtual int32_t __stdcall get_NewFocusedElement(void**) noexcept = 0;
            virtual int32_t __stdcall put_NewFocusedElement(void*) noexcept = 0;
            virtual int32_t __stdcall get_FocusState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Direction(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_InputDevice(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
            virtual int32_t __stdcall get_CorrelationId(winrt::guid*) noexcept = 0;
            virtual int32_t __stdcall TryCancel(bool*) noexcept = 0;
            virtual int32_t __stdcall TrySetNewFocusedElement(void*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_HoldingState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall GetPosition(void*, winrt::Windows::Foundation::Point*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IInertiaExpansionBehavior>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DesiredDeceleration(double*) noexcept = 0;
            virtual int32_t __stdcall put_DesiredDeceleration(double) noexcept = 0;
            virtual int32_t __stdcall get_DesiredExpansion(double*) noexcept = 0;
            virtual int32_t __stdcall put_DesiredExpansion(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IInertiaRotationBehavior>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DesiredDeceleration(double*) noexcept = 0;
            virtual int32_t __stdcall put_DesiredDeceleration(double) noexcept = 0;
            virtual int32_t __stdcall get_DesiredRotation(double*) noexcept = 0;
            virtual int32_t __stdcall put_DesiredRotation(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IInertiaTranslationBehavior>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DesiredDeceleration(double*) noexcept = 0;
            virtual int32_t __stdcall put_DesiredDeceleration(double) noexcept = 0;
            virtual int32_t __stdcall get_DesiredDisplacement(double*) noexcept = 0;
            virtual int32_t __stdcall put_DesiredDisplacement(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IInputScope>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Names(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IInputScopeName>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_NameValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_NameValue(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IInputScopeNameFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Key(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_KeyStatus(struct struct_Windows_UI_Core_CorePhysicalKeyStatus*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_OriginalKey(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_DeviceId(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IKeyboardAccelerator>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Key(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Key(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Modifiers(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Modifiers(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_ScopeOwner(void**) noexcept = 0;
            virtual int32_t __stdcall put_ScopeOwner(void*) noexcept = 0;
            virtual int32_t __stdcall add_Invoked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Invoked(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_Element(void**) noexcept = 0;
            virtual int32_t __stdcall get_KeyboardAccelerator(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ModifiersProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ScopeOwnerProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::ILosingFocusEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldFocusedElement(void**) noexcept = 0;
            virtual int32_t __stdcall get_NewFocusedElement(void**) noexcept = 0;
            virtual int32_t __stdcall put_NewFocusedElement(void*) noexcept = 0;
            virtual int32_t __stdcall get_FocusState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Direction(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_InputDevice(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
            virtual int32_t __stdcall get_CorrelationId(winrt::guid*) noexcept = 0;
            virtual int32_t __stdcall TryCancel(bool*) noexcept = 0;
            virtual int32_t __stdcall TrySetNewFocusedElement(void*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Container(void**) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall get_IsInertial(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Cumulative(struct struct_Microsoft_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall get_Velocities(struct struct_Microsoft_UI_Input_ManipulationVelocities*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Container(void**) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall get_IsInertial(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Delta(struct struct_Microsoft_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall get_Cumulative(struct struct_Microsoft_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall get_Velocities(struct struct_Microsoft_UI_Input_ManipulationVelocities*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall Complete() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Container(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExpansionBehavior(void**) noexcept = 0;
            virtual int32_t __stdcall put_ExpansionBehavior(void*) noexcept = 0;
            virtual int32_t __stdcall get_RotationBehavior(void**) noexcept = 0;
            virtual int32_t __stdcall put_RotationBehavior(void*) noexcept = 0;
            virtual int32_t __stdcall get_TranslationBehavior(void**) noexcept = 0;
            virtual int32_t __stdcall put_TranslationBehavior(void*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Delta(struct struct_Microsoft_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall get_Cumulative(struct struct_Microsoft_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall get_Velocities(struct struct_Microsoft_UI_Input_ManipulationVelocities*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IManipulationPivot>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Center(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_Center(winrt::Windows::Foundation::Point) noexcept = 0;
            virtual int32_t __stdcall get_Radius(double*) noexcept = 0;
            virtual int32_t __stdcall put_Radius(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IManipulationPivotFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstanceWithCenterAndRadius(winrt::Windows::Foundation::Point, double, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Container(void**) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Cumulative(struct struct_Microsoft_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall Complete() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Mode(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Mode(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_Container(void**) noexcept = 0;
            virtual int32_t __stdcall put_Container(void*) noexcept = 0;
            virtual int32_t __stdcall get_Pivot(void**) noexcept = 0;
            virtual int32_t __stdcall put_Pivot(void*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::INoFocusCandidateFoundEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Direction(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_InputDevice(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IPointer>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PointerId(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_IsInContact(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsInRange(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Pointer(void**) noexcept = 0;
            virtual int32_t __stdcall get_KeyModifiers(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsGenerated(bool*) noexcept = 0;
            virtual int32_t __stdcall GetCurrentPoint(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetIntermediatePoints(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Key(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Modifiers(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall GetPosition(void*, winrt::Windows::Foundation::Point*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IStandardUICommand>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Kind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Kind(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IStandardUICommandFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstanceWithKind(int32_t, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IStandardUICommandStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_KindProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall GetPosition(void*, winrt::Windows::Foundation::Point*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IXamlUICommand>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Label(void**) noexcept = 0;
            virtual int32_t __stdcall put_Label(void*) noexcept = 0;
            virtual int32_t __stdcall get_IconSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_KeyboardAccelerators(void**) noexcept = 0;
            virtual int32_t __stdcall get_AccessKey(void**) noexcept = 0;
            virtual int32_t __stdcall put_AccessKey(void*) noexcept = 0;
            virtual int32_t __stdcall get_Description(void**) noexcept = 0;
            virtual int32_t __stdcall put_Description(void*) noexcept = 0;
            virtual int32_t __stdcall get_Command(void**) noexcept = 0;
            virtual int32_t __stdcall put_Command(void*) noexcept = 0;
            virtual int32_t __stdcall add_ExecuteRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ExecuteRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_CanExecuteRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CanExecuteRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall NotifyCanExecuteChanged() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IXamlUICommandFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::IXamlUICommandStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_LabelProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_KeyboardAcceleratorsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AccessKeyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DescriptionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::DoubleTappedEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::HoldingEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::KeyEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::ManipulationCompletedEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::ManipulationDeltaEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::ManipulationInertiaStartingEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::ManipulationStartedEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::ManipulationStartingEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::PointerEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::RightTappedEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Input::TappedEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IAccessKeyDisplayDismissedEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IAccessKeyDisplayDismissedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IAccessKeyDisplayDismissedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IAccessKeyDisplayRequestedEventArgs
    {
        [[nodiscard]] auto PressedKeys() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IAccessKeyDisplayRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IAccessKeyDisplayRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IAccessKeyInvokedEventArgs
    {
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IAccessKeyInvokedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IAccessKeyInvokedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IAccessKeyManager
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IAccessKeyManager>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IAccessKeyManager<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics
    {
        [[nodiscard]] auto IsDisplayModeEnabled() const;
        [[nodiscard]] auto AreKeyTipsEnabled() const;
        auto AreKeyTipsEnabled(bool value) const;
        auto IsDisplayModeEnabledChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using IsDisplayModeEnabledChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Input::IAccessKeyManagerStatics, &impl::abi_t<winrt::Microsoft::UI::Xaml::Input::IAccessKeyManagerStatics>::remove_IsDisplayModeEnabledChanged>;
        [[nodiscard]] auto IsDisplayModeEnabledChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Foundation::IInspectable, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto IsDisplayModeEnabledChanged(winrt::event_token const& token) const noexcept;
        auto ExitDisplayMode() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IAccessKeyManagerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics2
    {
        auto EnterDisplayMode(winrt::Microsoft::UI::Xaml::XamlRoot const& XamlRoot) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IAccessKeyManagerStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IAccessKeyManagerStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_ICanExecuteRequestedEventArgs
    {
        [[nodiscard]] auto Parameter() const;
        [[nodiscard]] auto CanExecute() const;
        auto CanExecute(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::ICanExecuteRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_ICanExecuteRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_ICharacterReceivedRoutedEventArgs
    {
        [[nodiscard]] auto Character() const;
        [[nodiscard]] auto KeyStatus() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::ICharacterReceivedRoutedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_ICharacterReceivedRoutedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_ICommand
    {
        auto CanExecuteChanged(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using CanExecuteChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Input::ICommand, &impl::abi_t<winrt::Microsoft::UI::Xaml::Input::ICommand>::remove_CanExecuteChanged>;
        [[nodiscard]] auto CanExecuteChanged(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto CanExecuteChanged(winrt::event_token const& token) const noexcept;
        auto CanExecute(winrt::Windows::Foundation::IInspectable const& parameter) const;
        auto Execute(winrt::Windows::Foundation::IInspectable const& parameter) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::ICommand>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_ICommand<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IContextRequestedEventArgs
    {
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        auto TryGetPosition(winrt::Microsoft::UI::Xaml::UIElement const& relativeTo, winrt::Windows::Foundation::Point& point) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IContextRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IContextRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IDoubleTappedRoutedEventArgs
    {
        [[nodiscard]] auto PointerDeviceType() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        auto GetPosition(winrt::Microsoft::UI::Xaml::UIElement const& relativeTo) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IDoubleTappedRoutedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IDoubleTappedRoutedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IExecuteRequestedEventArgs
    {
        [[nodiscard]] auto Parameter() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IExecuteRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IExecuteRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IFindNextElementOptions
    {
        [[nodiscard]] auto SearchRoot() const;
        auto SearchRoot(winrt::Microsoft::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto ExclusionRect() const;
        auto ExclusionRect(winrt::Windows::Foundation::Rect const& value) const;
        [[nodiscard]] auto HintRect() const;
        auto HintRect(winrt::Windows::Foundation::Rect const& value) const;
        [[nodiscard]] auto XYFocusNavigationStrategyOverride() const;
        auto XYFocusNavigationStrategyOverride(winrt::Microsoft::UI::Xaml::Input::XYFocusNavigationStrategyOverride const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IFindNextElementOptions>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IFindNextElementOptions<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IFocusManager
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IFocusManager>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IFocusManager<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IFocusManagerGotFocusEventArgs
    {
        [[nodiscard]] auto NewFocusedElement() const;
        [[nodiscard]] auto CorrelationId() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IFocusManagerGotFocusEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IFocusManagerGotFocusEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IFocusManagerLostFocusEventArgs
    {
        [[nodiscard]] auto OldFocusedElement() const;
        [[nodiscard]] auto CorrelationId() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IFocusManagerLostFocusEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IFocusManagerLostFocusEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IFocusManagerStatics
    {
        auto GotFocus(winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Xaml::Input::FocusManagerGotFocusEventArgs> const& handler) const;
        using GotFocus_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Input::IFocusManagerStatics, &impl::abi_t<winrt::Microsoft::UI::Xaml::Input::IFocusManagerStatics>::remove_GotFocus>;
        [[nodiscard]] auto GotFocus(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Xaml::Input::FocusManagerGotFocusEventArgs> const& handler) const;
        auto GotFocus(winrt::event_token const& token) const noexcept;
        auto LostFocus(winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Xaml::Input::FocusManagerLostFocusEventArgs> const& handler) const;
        using LostFocus_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Input::IFocusManagerStatics, &impl::abi_t<winrt::Microsoft::UI::Xaml::Input::IFocusManagerStatics>::remove_LostFocus>;
        [[nodiscard]] auto LostFocus(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Xaml::Input::FocusManagerLostFocusEventArgs> const& handler) const;
        auto LostFocus(winrt::event_token const& token) const noexcept;
        auto GettingFocus(winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Xaml::Input::GettingFocusEventArgs> const& handler) const;
        using GettingFocus_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Input::IFocusManagerStatics, &impl::abi_t<winrt::Microsoft::UI::Xaml::Input::IFocusManagerStatics>::remove_GettingFocus>;
        [[nodiscard]] auto GettingFocus(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Xaml::Input::GettingFocusEventArgs> const& handler) const;
        auto GettingFocus(winrt::event_token const& token) const noexcept;
        auto LosingFocus(winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Xaml::Input::LosingFocusEventArgs> const& handler) const;
        using LosingFocus_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Input::IFocusManagerStatics, &impl::abi_t<winrt::Microsoft::UI::Xaml::Input::IFocusManagerStatics>::remove_LosingFocus>;
        [[nodiscard]] auto LosingFocus(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Xaml::Input::LosingFocusEventArgs> const& handler) const;
        auto LosingFocus(winrt::event_token const& token) const noexcept;
        auto TryFocusAsync(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Microsoft::UI::Xaml::FocusState const& value) const;
        auto TryMoveFocusAsync(winrt::Microsoft::UI::Xaml::Input::FocusNavigationDirection const& focusNavigationDirection) const;
        auto TryMoveFocusAsync(winrt::Microsoft::UI::Xaml::Input::FocusNavigationDirection const& focusNavigationDirection, winrt::Microsoft::UI::Xaml::Input::FindNextElementOptions const& focusNavigationOptions) const;
        auto TryMoveFocus(winrt::Microsoft::UI::Xaml::Input::FocusNavigationDirection const& focusNavigationDirection, winrt::Microsoft::UI::Xaml::Input::FindNextElementOptions const& focusNavigationOptions) const;
        auto FindNextElement(winrt::Microsoft::UI::Xaml::Input::FocusNavigationDirection const& focusNavigationDirection) const;
        auto FindFirstFocusableElement(winrt::Microsoft::UI::Xaml::DependencyObject const& searchScope) const;
        auto FindLastFocusableElement(winrt::Microsoft::UI::Xaml::DependencyObject const& searchScope) const;
        auto FindNextElement(winrt::Microsoft::UI::Xaml::Input::FocusNavigationDirection const& focusNavigationDirection, winrt::Microsoft::UI::Xaml::Input::FindNextElementOptions const& focusNavigationOptions) const;
        auto FindNextFocusableElement(winrt::Microsoft::UI::Xaml::Input::FocusNavigationDirection const& focusNavigationDirection) const;
        auto FindNextFocusableElement(winrt::Microsoft::UI::Xaml::Input::FocusNavigationDirection const& focusNavigationDirection, winrt::Windows::Foundation::Rect const& hintRect) const;
        auto TryMoveFocus(winrt::Microsoft::UI::Xaml::Input::FocusNavigationDirection const& focusNavigationDirection) const;
        auto GetFocusedElement() const;
        auto GetFocusedElement(winrt::Microsoft::UI::Xaml::XamlRoot const& xamlRoot) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IFocusManagerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IFocusManagerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IFocusMovementResult
    {
        [[nodiscard]] auto Succeeded() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IFocusMovementResult>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IFocusMovementResult<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IGettingFocusEventArgs
    {
        [[nodiscard]] auto OldFocusedElement() const;
        [[nodiscard]] auto NewFocusedElement() const;
        auto NewFocusedElement(winrt::Microsoft::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto FocusState() const;
        [[nodiscard]] auto Direction() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        [[nodiscard]] auto InputDevice() const;
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
        [[nodiscard]] auto CorrelationId() const;
        auto TryCancel() const;
        auto TrySetNewFocusedElement(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IGettingFocusEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IGettingFocusEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IHoldingRoutedEventArgs
    {
        [[nodiscard]] auto PointerDeviceType() const;
        [[nodiscard]] auto HoldingState() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        auto GetPosition(winrt::Microsoft::UI::Xaml::UIElement const& relativeTo) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IHoldingRoutedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IHoldingRoutedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IInertiaExpansionBehavior
    {
        [[nodiscard]] auto DesiredDeceleration() const;
        auto DesiredDeceleration(double value) const;
        [[nodiscard]] auto DesiredExpansion() const;
        auto DesiredExpansion(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IInertiaExpansionBehavior>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IInertiaExpansionBehavior<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IInertiaRotationBehavior
    {
        [[nodiscard]] auto DesiredDeceleration() const;
        auto DesiredDeceleration(double value) const;
        [[nodiscard]] auto DesiredRotation() const;
        auto DesiredRotation(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IInertiaRotationBehavior>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IInertiaRotationBehavior<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IInertiaTranslationBehavior
    {
        [[nodiscard]] auto DesiredDeceleration() const;
        auto DesiredDeceleration(double value) const;
        [[nodiscard]] auto DesiredDisplacement() const;
        auto DesiredDisplacement(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IInertiaTranslationBehavior>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IInertiaTranslationBehavior<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IInputScope
    {
        [[nodiscard]] auto Names() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IInputScope>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IInputScope<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IInputScopeName
    {
        [[nodiscard]] auto NameValue() const;
        auto NameValue(winrt::Microsoft::UI::Xaml::Input::InputScopeNameValue const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IInputScopeName>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IInputScopeName<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IInputScopeNameFactory
    {
        auto CreateInstance(winrt::Microsoft::UI::Xaml::Input::InputScopeNameValue const& nameValue) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IInputScopeNameFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IInputScopeNameFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IKeyRoutedEventArgs
    {
        [[nodiscard]] auto Key() const;
        [[nodiscard]] auto KeyStatus() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        [[nodiscard]] auto OriginalKey() const;
        [[nodiscard]] auto DeviceId() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IKeyRoutedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IKeyRoutedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IKeyboardAccelerator
    {
        [[nodiscard]] auto Key() const;
        auto Key(winrt::Windows::System::VirtualKey const& value) const;
        [[nodiscard]] auto Modifiers() const;
        auto Modifiers(winrt::Windows::System::VirtualKeyModifiers const& value) const;
        [[nodiscard]] auto IsEnabled() const;
        auto IsEnabled(bool value) const;
        [[nodiscard]] auto ScopeOwner() const;
        auto ScopeOwner(winrt::Microsoft::UI::Xaml::DependencyObject const& value) const;
        auto Invoked(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Input::KeyboardAccelerator, winrt::Microsoft::UI::Xaml::Input::KeyboardAcceleratorInvokedEventArgs> const& handler) const;
        using Invoked_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Input::IKeyboardAccelerator, &impl::abi_t<winrt::Microsoft::UI::Xaml::Input::IKeyboardAccelerator>::remove_Invoked>;
        [[nodiscard]] auto Invoked(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Input::KeyboardAccelerator, winrt::Microsoft::UI::Xaml::Input::KeyboardAcceleratorInvokedEventArgs> const& handler) const;
        auto Invoked(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IKeyboardAccelerator>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IKeyboardAccelerator<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IKeyboardAcceleratorFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IKeyboardAcceleratorFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IKeyboardAcceleratorInvokedEventArgs
    {
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        [[nodiscard]] auto Element() const;
        [[nodiscard]] auto KeyboardAccelerator() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorInvokedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IKeyboardAcceleratorInvokedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IKeyboardAcceleratorStatics
    {
        [[nodiscard]] auto KeyProperty() const;
        [[nodiscard]] auto ModifiersProperty() const;
        [[nodiscard]] auto IsEnabledProperty() const;
        [[nodiscard]] auto ScopeOwnerProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IKeyboardAcceleratorStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IKeyboardAcceleratorStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_ILosingFocusEventArgs
    {
        [[nodiscard]] auto OldFocusedElement() const;
        [[nodiscard]] auto NewFocusedElement() const;
        auto NewFocusedElement(winrt::Microsoft::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto FocusState() const;
        [[nodiscard]] auto Direction() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        [[nodiscard]] auto InputDevice() const;
        [[nodiscard]] auto Cancel() const;
        auto Cancel(bool value) const;
        [[nodiscard]] auto CorrelationId() const;
        auto TryCancel() const;
        auto TrySetNewFocusedElement(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::ILosingFocusEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_ILosingFocusEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IManipulationCompletedRoutedEventArgs
    {
        [[nodiscard]] auto Container() const;
        [[nodiscard]] auto Position() const;
        [[nodiscard]] auto IsInertial() const;
        [[nodiscard]] auto Cumulative() const;
        [[nodiscard]] auto Velocities() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        [[nodiscard]] auto PointerDeviceType() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IManipulationCompletedRoutedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IManipulationDeltaRoutedEventArgs
    {
        [[nodiscard]] auto Container() const;
        [[nodiscard]] auto Position() const;
        [[nodiscard]] auto IsInertial() const;
        [[nodiscard]] auto Delta() const;
        [[nodiscard]] auto Cumulative() const;
        [[nodiscard]] auto Velocities() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        [[nodiscard]] auto PointerDeviceType() const;
        auto Complete() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IManipulationDeltaRoutedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IManipulationInertiaStartingRoutedEventArgs
    {
        [[nodiscard]] auto Container() const;
        [[nodiscard]] auto ExpansionBehavior() const;
        auto ExpansionBehavior(winrt::Microsoft::UI::Xaml::Input::InertiaExpansionBehavior const& value) const;
        [[nodiscard]] auto RotationBehavior() const;
        auto RotationBehavior(winrt::Microsoft::UI::Xaml::Input::InertiaRotationBehavior const& value) const;
        [[nodiscard]] auto TranslationBehavior() const;
        auto TranslationBehavior(winrt::Microsoft::UI::Xaml::Input::InertiaTranslationBehavior const& value) const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        [[nodiscard]] auto PointerDeviceType() const;
        [[nodiscard]] auto Delta() const;
        [[nodiscard]] auto Cumulative() const;
        [[nodiscard]] auto Velocities() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IManipulationInertiaStartingRoutedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IManipulationPivot
    {
        [[nodiscard]] auto Center() const;
        auto Center(winrt::Windows::Foundation::Point const& value) const;
        [[nodiscard]] auto Radius() const;
        auto Radius(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IManipulationPivot>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IManipulationPivot<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IManipulationPivotFactory
    {
        auto CreateInstanceWithCenterAndRadius(winrt::Windows::Foundation::Point const& center, double radius) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IManipulationPivotFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IManipulationPivotFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgs
    {
        [[nodiscard]] auto Container() const;
        [[nodiscard]] auto Position() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        [[nodiscard]] auto PointerDeviceType() const;
        [[nodiscard]] auto Cumulative() const;
        auto Complete() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgsFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IManipulationStartedRoutedEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IManipulationStartedRoutedEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IManipulationStartingRoutedEventArgs
    {
        [[nodiscard]] auto Mode() const;
        auto Mode(winrt::Microsoft::UI::Xaml::Input::ManipulationModes const& value) const;
        [[nodiscard]] auto Container() const;
        auto Container(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto Pivot() const;
        auto Pivot(winrt::Microsoft::UI::Xaml::Input::ManipulationPivot const& value) const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IManipulationStartingRoutedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IManipulationStartingRoutedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_INoFocusCandidateFoundEventArgs
    {
        [[nodiscard]] auto Direction() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        [[nodiscard]] auto InputDevice() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::INoFocusCandidateFoundEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_INoFocusCandidateFoundEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IPointer
    {
        [[nodiscard]] auto PointerId() const;
        [[nodiscard]] auto PointerDeviceType() const;
        [[nodiscard]] auto IsInContact() const;
        [[nodiscard]] auto IsInRange() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IPointer>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IPointer<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IPointerRoutedEventArgs
    {
        [[nodiscard]] auto Pointer() const;
        [[nodiscard]] auto KeyModifiers() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        [[nodiscard]] auto IsGenerated() const;
        auto GetCurrentPoint(winrt::Microsoft::UI::Xaml::UIElement const& relativeTo) const;
        auto GetIntermediatePoints(winrt::Microsoft::UI::Xaml::UIElement const& relativeTo) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IPointerRoutedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IPointerRoutedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IProcessKeyboardAcceleratorEventArgs
    {
        [[nodiscard]] auto Key() const;
        [[nodiscard]] auto Modifiers() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IProcessKeyboardAcceleratorEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IProcessKeyboardAcceleratorEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IRightTappedRoutedEventArgs
    {
        [[nodiscard]] auto PointerDeviceType() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        auto GetPosition(winrt::Microsoft::UI::Xaml::UIElement const& relativeTo) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IRightTappedRoutedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IRightTappedRoutedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IStandardUICommand
    {
        [[nodiscard]] auto Kind() const;
        auto Kind(winrt::Microsoft::UI::Xaml::Input::StandardUICommandKind const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IStandardUICommand>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IStandardUICommand<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IStandardUICommandFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
        auto CreateInstanceWithKind(winrt::Microsoft::UI::Xaml::Input::StandardUICommandKind const& kind, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IStandardUICommandFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IStandardUICommandFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IStandardUICommandStatics
    {
        [[nodiscard]] auto KindProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IStandardUICommandStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IStandardUICommandStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_ITappedRoutedEventArgs
    {
        [[nodiscard]] auto PointerDeviceType() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
        auto GetPosition(winrt::Microsoft::UI::Xaml::UIElement const& relativeTo) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::ITappedRoutedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_ITappedRoutedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IXamlUICommand
    {
        [[nodiscard]] auto Label() const;
        auto Label(param::hstring const& value) const;
        [[nodiscard]] auto IconSource() const;
        auto IconSource(winrt::Microsoft::UI::Xaml::Controls::IconSource const& value) const;
        [[nodiscard]] auto KeyboardAccelerators() const;
        [[nodiscard]] auto AccessKey() const;
        auto AccessKey(param::hstring const& value) const;
        [[nodiscard]] auto Description() const;
        auto Description(param::hstring const& value) const;
        [[nodiscard]] auto Command() const;
        auto Command(winrt::Microsoft::UI::Xaml::Input::ICommand const& value) const;
        auto ExecuteRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Input::XamlUICommand, winrt::Microsoft::UI::Xaml::Input::ExecuteRequestedEventArgs> const& handler) const;
        using ExecuteRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Input::IXamlUICommand, &impl::abi_t<winrt::Microsoft::UI::Xaml::Input::IXamlUICommand>::remove_ExecuteRequested>;
        [[nodiscard]] auto ExecuteRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Input::XamlUICommand, winrt::Microsoft::UI::Xaml::Input::ExecuteRequestedEventArgs> const& handler) const;
        auto ExecuteRequested(winrt::event_token const& token) const noexcept;
        auto CanExecuteRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Input::XamlUICommand, winrt::Microsoft::UI::Xaml::Input::CanExecuteRequestedEventArgs> const& handler) const;
        using CanExecuteRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Input::IXamlUICommand, &impl::abi_t<winrt::Microsoft::UI::Xaml::Input::IXamlUICommand>::remove_CanExecuteRequested>;
        [[nodiscard]] auto CanExecuteRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Input::XamlUICommand, winrt::Microsoft::UI::Xaml::Input::CanExecuteRequestedEventArgs> const& handler) const;
        auto CanExecuteRequested(winrt::event_token const& token) const noexcept;
        auto NotifyCanExecuteChanged() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IXamlUICommand>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IXamlUICommand<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IXamlUICommandFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IXamlUICommandFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IXamlUICommandFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Input_IXamlUICommandStatics
    {
        [[nodiscard]] auto LabelProperty() const;
        [[nodiscard]] auto IconSourceProperty() const;
        [[nodiscard]] auto KeyboardAcceleratorsProperty() const;
        [[nodiscard]] auto AccessKeyProperty() const;
        [[nodiscard]] auto DescriptionProperty() const;
        [[nodiscard]] auto CommandProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Input::IXamlUICommandStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Input_IXamlUICommandStatics<D>;
    };
}
#endif
