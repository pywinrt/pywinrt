// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#ifndef WINRT_Microsoft_UI_Composition_Diagnostics_0_H
#define WINRT_Microsoft_UI_Composition_Diagnostics_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition
{
    struct Compositor;
    struct Visual;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition::Diagnostics
{
    enum class CompositionDebugOverdrawContentKinds : uint32_t
    {
        None = 0,
        OffscreenRendered = 0x1,
        Colors = 0x2,
        Effects = 0x4,
        Shadows = 0x8,
        Lights = 0x10,
        Surfaces = 0x20,
        SwapChains = 0x40,
        All = 0xffffffff,
    };
    struct ICompositionDebugHeatMaps;
    struct ICompositionDebugSettings;
    struct ICompositionDebugSettingsStatics;
    struct CompositionDebugHeatMaps;
    struct CompositionDebugSettings;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Composition::Diagnostics::ICompositionDebugHeatMaps>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Diagnostics::ICompositionDebugSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Diagnostics::ICompositionDebugSettingsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Diagnostics::CompositionDebugHeatMaps>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Diagnostics::CompositionDebugSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Diagnostics::CompositionDebugOverdrawContentKinds>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Diagnostics::CompositionDebugHeatMaps> = L"Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Diagnostics::CompositionDebugSettings> = L"Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Diagnostics::CompositionDebugOverdrawContentKinds> = L"Microsoft.UI.Composition.Diagnostics.CompositionDebugOverdrawContentKinds";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Diagnostics::ICompositionDebugHeatMaps> = L"Microsoft.UI.Composition.Diagnostics.ICompositionDebugHeatMaps";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Diagnostics::ICompositionDebugSettings> = L"Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Diagnostics::ICompositionDebugSettingsStatics> = L"Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettingsStatics";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Diagnostics::ICompositionDebugHeatMaps>{ 0x815016B8,0xF645,0x5C55,{ 0x87,0xB5,0xFE,0x21,0x67,0x28,0x2B,0x6F } }; // 815016B8-F645-5C55-87B5-FE2167282B6F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Diagnostics::ICompositionDebugSettings>{ 0xF4C0C0F6,0x7F5F,0x5014,{ 0xA0,0xD6,0xC8,0xC7,0xEE,0xEC,0xAC,0xE6 } }; // F4C0C0F6-7F5F-5014-A0D6-C8C7EEECACE6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Diagnostics::ICompositionDebugSettingsStatics>{ 0xB56F8AAB,0x2B8C,0x51AA,{ 0xB9,0x74,0x10,0xE5,0xC5,0x17,0xF5,0x0E } }; // B56F8AAB-2B8C-51AA-B974-10E5C517F50E
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Diagnostics::CompositionDebugHeatMaps>{ using type = winrt::Microsoft::UI::Composition::Diagnostics::ICompositionDebugHeatMaps; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Diagnostics::CompositionDebugSettings>{ using type = winrt::Microsoft::UI::Composition::Diagnostics::ICompositionDebugSettings; };
    template <> struct abi<winrt::Microsoft::UI::Composition::Diagnostics::ICompositionDebugHeatMaps>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Hide(void*) noexcept = 0;
            virtual int32_t __stdcall ShowMemoryUsage(void*) noexcept = 0;
            virtual int32_t __stdcall ShowOverdraw(void*, uint32_t) noexcept = 0;
            virtual int32_t __stdcall ShowRedraw(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Diagnostics::ICompositionDebugSettings>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeatMaps(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Diagnostics::ICompositionDebugSettingsStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall TryGetSettings(void*, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Diagnostics_ICompositionDebugHeatMaps
    {
        auto Hide(winrt::Microsoft::UI::Composition::Visual const& subtree) const;
        auto ShowMemoryUsage(winrt::Microsoft::UI::Composition::Visual const& subtree) const;
        auto ShowOverdraw(winrt::Microsoft::UI::Composition::Visual const& subtree, winrt::Microsoft::UI::Composition::Diagnostics::CompositionDebugOverdrawContentKinds const& contentKinds) const;
        auto ShowRedraw(winrt::Microsoft::UI::Composition::Visual const& subtree) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Diagnostics::ICompositionDebugHeatMaps>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Diagnostics_ICompositionDebugHeatMaps<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Diagnostics_ICompositionDebugSettings
    {
        [[nodiscard]] auto HeatMaps() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Diagnostics::ICompositionDebugSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Diagnostics_ICompositionDebugSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Diagnostics_ICompositionDebugSettingsStatics
    {
        auto TryGetSettings(winrt::Microsoft::UI::Composition::Compositor const& compositor) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Diagnostics::ICompositionDebugSettingsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Diagnostics_ICompositionDebugSettingsStatics<D>;
    };
}
#endif
