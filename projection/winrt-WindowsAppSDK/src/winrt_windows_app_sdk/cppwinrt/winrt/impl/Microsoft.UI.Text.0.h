// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#ifndef WINRT_Microsoft_UI_Text_0_H
#define WINRT_Microsoft_UI_Text_0_H
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct Point;
    struct Rect;
}
WINRT_EXPORT namespace winrt::Windows::Storage::Streams
{
    struct IRandomAccessStream;
}
WINRT_EXPORT namespace winrt::Windows::UI
{
    struct Color;
}
WINRT_EXPORT namespace winrt::Windows::UI::Text
{
    enum class FontStretch : int32_t;
    enum class FontStyle : int32_t;
    struct FontWeight;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Text
{
    enum class CaretType : int32_t
    {
        Normal = 0,
        Null = 1,
    };
    enum class FindOptions : uint32_t
    {
        None = 0,
        Word = 0x2,
        Case = 0x4,
    };
    enum class FormatEffect : int32_t
    {
        Off = 0,
        On = 1,
        Toggle = 2,
        Undefined = 3,
    };
    enum class HorizontalCharacterAlignment : int32_t
    {
        Left = 0,
        Right = 1,
        Center = 2,
    };
    enum class LetterCase : int32_t
    {
        Lower = 0,
        Upper = 1,
    };
    enum class LineSpacingRule : int32_t
    {
        Undefined = 0,
        Single = 1,
        OneAndHalf = 2,
        Double = 3,
        AtLeast = 4,
        Exactly = 5,
        Multiple = 6,
        Percent = 7,
    };
    enum class LinkType : int32_t
    {
        Undefined = 0,
        NotALink = 1,
        ClientLink = 2,
        FriendlyLinkName = 3,
        FriendlyLinkAddress = 4,
        AutoLink = 5,
        AutoLinkEmail = 6,
        AutoLinkPhone = 7,
        AutoLinkPath = 8,
    };
    enum class MarkerAlignment : int32_t
    {
        Undefined = 0,
        Left = 1,
        Center = 2,
        Right = 3,
    };
    enum class MarkerStyle : int32_t
    {
        Undefined = 0,
        Parenthesis = 1,
        Parentheses = 2,
        Period = 3,
        Plain = 4,
        Minus = 5,
        NoNumber = 6,
    };
    enum class MarkerType : int32_t
    {
        Undefined = 0,
        None = 1,
        Bullet = 2,
        Arabic = 3,
        LowercaseEnglishLetter = 4,
        UppercaseEnglishLetter = 5,
        LowercaseRoman = 6,
        UppercaseRoman = 7,
        UnicodeSequence = 8,
        CircledNumber = 9,
        BlackCircleWingding = 10,
        WhiteCircleWingding = 11,
        ArabicWide = 12,
        SimplifiedChinese = 13,
        TraditionalChinese = 14,
        JapanSimplifiedChinese = 15,
        JapanKorea = 16,
        ArabicDictionary = 17,
        ArabicAbjad = 18,
        Hebrew = 19,
        ThaiAlphabetic = 20,
        ThaiNumeric = 21,
        DevanagariVowel = 22,
        DevanagariConsonant = 23,
        DevanagariNumeric = 24,
    };
    enum class ParagraphAlignment : int32_t
    {
        Undefined = 0,
        Left = 1,
        Center = 2,
        Right = 3,
        Justify = 4,
    };
    enum class ParagraphStyle : int32_t
    {
        Undefined = 0,
        None = 1,
        Normal = 2,
        Heading1 = 3,
        Heading2 = 4,
        Heading3 = 5,
        Heading4 = 6,
        Heading5 = 7,
        Heading6 = 8,
        Heading7 = 9,
        Heading8 = 10,
        Heading9 = 11,
    };
    enum class PointOptions : uint32_t
    {
        None = 0,
        IncludeInset = 0x1,
        Start = 0x20,
        ClientCoordinates = 0x100,
        AllowOffClient = 0x200,
        Transform = 0x400,
        NoHorizontalScroll = 0x10000,
        NoVerticalScroll = 0x40000,
    };
    enum class RangeGravity : int32_t
    {
        UIBehavior = 0,
        Backward = 1,
        Forward = 2,
        Inward = 3,
        Outward = 4,
    };
    enum class RichEditMathMode : int32_t
    {
        NoMath = 0,
        MathOnly = 1,
    };
    enum class SelectionOptions : uint32_t
    {
        StartActive = 0x1,
        AtEndOfLine = 0x2,
        Overtype = 0x4,
        Active = 0x8,
        Replace = 0x10,
    };
    enum class SelectionType : int32_t
    {
        None = 0,
        InsertionPoint = 1,
        Normal = 2,
        InlineShape = 7,
        Shape = 8,
    };
    enum class TabAlignment : int32_t
    {
        Left = 0,
        Center = 1,
        Right = 2,
        Decimal = 3,
        Bar = 4,
    };
    enum class TabLeader : int32_t
    {
        Spaces = 0,
        Dots = 1,
        Dashes = 2,
        Lines = 3,
        ThickLines = 4,
        Equals = 5,
    };
    enum class TextGetOptions : uint32_t
    {
        None = 0,
        AdjustCrlf = 0x1,
        UseCrlf = 0x2,
        UseObjectText = 0x4,
        AllowFinalEop = 0x8,
        NoHidden = 0x20,
        IncludeNumbering = 0x40,
        FormatRtf = 0x2000,
        UseLf = 0x1000000,
    };
    enum class TextRangeUnit : int32_t
    {
        Character = 0,
        Word = 1,
        Sentence = 2,
        Paragraph = 3,
        Line = 4,
        Story = 5,
        Screen = 6,
        Section = 7,
        Window = 8,
        CharacterFormat = 9,
        ParagraphFormat = 10,
        Object = 11,
        HardParagraph = 12,
        Cluster = 13,
        Bold = 14,
        Italic = 15,
        Underline = 16,
        Strikethrough = 17,
        ProtectedText = 18,
        Link = 19,
        SmallCaps = 20,
        AllCaps = 21,
        Hidden = 22,
        Outline = 23,
        Shadow = 24,
        Imprint = 25,
        Disabled = 26,
        Revised = 27,
        Subscript = 28,
        Superscript = 29,
        FontBound = 30,
        LinkProtected = 31,
        ContentLink = 32,
    };
    enum class TextScript : int32_t
    {
        Undefined = 0,
        Ansi = 1,
        EastEurope = 2,
        Cyrillic = 3,
        Greek = 4,
        Turkish = 5,
        Hebrew = 6,
        Arabic = 7,
        Baltic = 8,
        Vietnamese = 9,
        Default = 10,
        Symbol = 11,
        Thai = 12,
        ShiftJis = 13,
        GB2312 = 14,
        Hangul = 15,
        Big5 = 16,
        PC437 = 17,
        Oem = 18,
        Mac = 19,
        Armenian = 20,
        Syriac = 21,
        Thaana = 22,
        Devanagari = 23,
        Bengali = 24,
        Gurmukhi = 25,
        Gujarati = 26,
        Oriya = 27,
        Tamil = 28,
        Telugu = 29,
        Kannada = 30,
        Malayalam = 31,
        Sinhala = 32,
        Lao = 33,
        Tibetan = 34,
        Myanmar = 35,
        Georgian = 36,
        Jamo = 37,
        Ethiopic = 38,
        Cherokee = 39,
        Aboriginal = 40,
        Ogham = 41,
        Runic = 42,
        Khmer = 43,
        Mongolian = 44,
        Braille = 45,
        Yi = 46,
        Limbu = 47,
        TaiLe = 48,
        NewTaiLue = 49,
        SylotiNagri = 50,
        Kharoshthi = 51,
        Kayahli = 52,
        UnicodeSymbol = 53,
        Emoji = 54,
        Glagolitic = 55,
        Lisu = 56,
        Vai = 57,
        NKo = 58,
        Osmanya = 59,
        PhagsPa = 60,
        Gothic = 61,
        Deseret = 62,
        Tifinagh = 63,
    };
    enum class TextSetOptions : uint32_t
    {
        None = 0,
        UnicodeBidi = 0x1,
        Unlink = 0x8,
        Unhide = 0x10,
        CheckTextLimit = 0x20,
        FormatRtf = 0x2000,
        ApplyRtfDocumentDefaults = 0x4000,
    };
    enum class UnderlineType : int32_t
    {
        Undefined = 0,
        None = 1,
        Single = 2,
        Words = 3,
        Double = 4,
        Dotted = 5,
        Dash = 6,
        DashDot = 7,
        DashDotDot = 8,
        Wave = 9,
        Thick = 10,
        Thin = 11,
        DoubleWave = 12,
        HeavyWave = 13,
        LongDash = 14,
        ThickDash = 15,
        ThickDashDot = 16,
        ThickDashDotDot = 17,
        ThickDotted = 18,
        ThickLongDash = 19,
    };
    enum class VerticalCharacterAlignment : int32_t
    {
        Top = 0,
        Baseline = 1,
        Bottom = 2,
    };
    struct IFontWeights;
    struct IFontWeightsStatics;
    struct ITextCharacterFormat;
    struct ITextConstantsStatics;
    struct ITextDocument;
    struct ITextParagraphFormat;
    struct ITextRange;
    struct ITextSelection;
    struct FontWeights;
    struct RichEditTextDocument;
    struct RichEditTextRange;
    struct TextConstants;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Text::IFontWeights>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Text::IFontWeightsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Text::ITextCharacterFormat>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Text::ITextConstantsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Text::ITextDocument>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Text::ITextParagraphFormat>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Text::ITextRange>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Text::ITextSelection>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Text::FontWeights>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Text::RichEditTextDocument>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Text::RichEditTextRange>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Text::TextConstants>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Text::CaretType>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::FindOptions>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::FormatEffect>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::HorizontalCharacterAlignment>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::LetterCase>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::LineSpacingRule>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::LinkType>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::MarkerAlignment>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::MarkerStyle>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::MarkerType>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::ParagraphAlignment>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::ParagraphStyle>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::PointOptions>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::RangeGravity>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::RichEditMathMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::SelectionOptions>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::SelectionType>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::TabAlignment>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::TabLeader>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::TextGetOptions>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::TextRangeUnit>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::TextScript>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::TextSetOptions>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::UnderlineType>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Text::VerticalCharacterAlignment>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::FontWeights> = L"Microsoft.UI.Text.FontWeights";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::RichEditTextDocument> = L"Microsoft.UI.Text.RichEditTextDocument";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::RichEditTextRange> = L"Microsoft.UI.Text.RichEditTextRange";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::TextConstants> = L"Microsoft.UI.Text.TextConstants";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::CaretType> = L"Microsoft.UI.Text.CaretType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::FindOptions> = L"Microsoft.UI.Text.FindOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::FormatEffect> = L"Microsoft.UI.Text.FormatEffect";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::HorizontalCharacterAlignment> = L"Microsoft.UI.Text.HorizontalCharacterAlignment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::LetterCase> = L"Microsoft.UI.Text.LetterCase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::LineSpacingRule> = L"Microsoft.UI.Text.LineSpacingRule";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::LinkType> = L"Microsoft.UI.Text.LinkType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::MarkerAlignment> = L"Microsoft.UI.Text.MarkerAlignment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::MarkerStyle> = L"Microsoft.UI.Text.MarkerStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::MarkerType> = L"Microsoft.UI.Text.MarkerType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::ParagraphAlignment> = L"Microsoft.UI.Text.ParagraphAlignment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::ParagraphStyle> = L"Microsoft.UI.Text.ParagraphStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::PointOptions> = L"Microsoft.UI.Text.PointOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::RangeGravity> = L"Microsoft.UI.Text.RangeGravity";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::RichEditMathMode> = L"Microsoft.UI.Text.RichEditMathMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::SelectionOptions> = L"Microsoft.UI.Text.SelectionOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::SelectionType> = L"Microsoft.UI.Text.SelectionType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::TabAlignment> = L"Microsoft.UI.Text.TabAlignment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::TabLeader> = L"Microsoft.UI.Text.TabLeader";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::TextGetOptions> = L"Microsoft.UI.Text.TextGetOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::TextRangeUnit> = L"Microsoft.UI.Text.TextRangeUnit";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::TextScript> = L"Microsoft.UI.Text.TextScript";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::TextSetOptions> = L"Microsoft.UI.Text.TextSetOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::UnderlineType> = L"Microsoft.UI.Text.UnderlineType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::VerticalCharacterAlignment> = L"Microsoft.UI.Text.VerticalCharacterAlignment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::IFontWeights> = L"Microsoft.UI.Text.IFontWeights";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::IFontWeightsStatics> = L"Microsoft.UI.Text.IFontWeightsStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::ITextCharacterFormat> = L"Microsoft.UI.Text.ITextCharacterFormat";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::ITextConstantsStatics> = L"Microsoft.UI.Text.ITextConstantsStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::ITextDocument> = L"Microsoft.UI.Text.ITextDocument";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::ITextParagraphFormat> = L"Microsoft.UI.Text.ITextParagraphFormat";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::ITextRange> = L"Microsoft.UI.Text.ITextRange";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Text::ITextSelection> = L"Microsoft.UI.Text.ITextSelection";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Text::IFontWeights>{ 0x386CD040,0x5404,0x5A8D,{ 0x8B,0xC7,0x2C,0xA9,0x89,0xF5,0xC0,0x65 } }; // 386CD040-5404-5A8D-8BC7-2CA989F5C065
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Text::IFontWeightsStatics>{ 0xCC390DF6,0x76B0,0x5807,{ 0x8B,0x9D,0xE9,0x49,0xA4,0xE6,0x23,0xAE } }; // CC390DF6-76B0-5807-8B9D-E949A4E623AE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Text::ITextCharacterFormat>{ 0xF5710050,0x98E5,0x5788,{ 0xB1,0xE3,0x32,0x19,0x1E,0xEB,0xF9,0x4D } }; // F5710050-98E5-5788-B1E3-32191EEBF94D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Text::ITextConstantsStatics>{ 0xCD353B3C,0xAF63,0x5CFB,{ 0x91,0x8C,0x0F,0x9C,0x89,0x31,0xA1,0x61 } }; // CD353B3C-AF63-5CFB-918C-0F9C8931A161
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Text::ITextDocument>{ 0x1149D57D,0x86A6,0x59DD,{ 0x88,0xD9,0x19,0x6F,0x27,0xBC,0x5C,0x85 } }; // 1149D57D-86A6-59DD-88D9-196F27BC5C85
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Text::ITextParagraphFormat>{ 0x219B6CDF,0x0D0B,0x5701,{ 0xB8,0xA1,0x6C,0x90,0x6B,0x3E,0xBB,0xE1 } }; // 219B6CDF-0D0B-5701-B8A1-6C906B3EBBE1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Text::ITextRange>{ 0x06D4ABCF,0x0C06,0x5D12,{ 0xA7,0x43,0x85,0x53,0x7E,0xFD,0x09,0xEA } }; // 06D4ABCF-0C06-5D12-A743-85537EFD09EA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Text::ITextSelection>{ 0x8F5E6CB1,0x2B04,0x589F,{ 0xBD,0x24,0x54,0xE5,0xCD,0x8D,0xD3,0x99 } }; // 8F5E6CB1-2B04-589F-BD24-54E5CD8DD399
    template <> struct default_interface<winrt::Microsoft::UI::Text::FontWeights>{ using type = winrt::Microsoft::UI::Text::IFontWeights; };
    template <> struct default_interface<winrt::Microsoft::UI::Text::RichEditTextDocument>{ using type = winrt::Microsoft::UI::Text::ITextDocument; };
    template <> struct default_interface<winrt::Microsoft::UI::Text::RichEditTextRange>{ using type = winrt::Microsoft::UI::Text::ITextRange; };
    template <> struct abi<winrt::Microsoft::UI::Text::IFontWeights>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Text::IFontWeightsStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Black(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall get_Bold(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall get_ExtraBlack(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall get_ExtraBold(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall get_ExtraLight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall get_Light(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall get_Medium(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall get_Normal(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall get_SemiBold(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall get_SemiLight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall get_Thin(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Text::ITextCharacterFormat>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AllCaps(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_AllCaps(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundColor(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundColor(struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall get_Bold(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Bold(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FontStretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ForegroundColor(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_ForegroundColor(struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall get_Hidden(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Hidden(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Italic(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Italic(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Kerning(float*) noexcept = 0;
            virtual int32_t __stdcall put_Kerning(float) noexcept = 0;
            virtual int32_t __stdcall get_LanguageTag(void**) noexcept = 0;
            virtual int32_t __stdcall put_LanguageTag(void*) noexcept = 0;
            virtual int32_t __stdcall get_LinkType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall put_Name(void*) noexcept = 0;
            virtual int32_t __stdcall get_Outline(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Outline(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Position(float*) noexcept = 0;
            virtual int32_t __stdcall put_Position(float) noexcept = 0;
            virtual int32_t __stdcall get_ProtectedText(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ProtectedText(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Size(float*) noexcept = 0;
            virtual int32_t __stdcall put_Size(float) noexcept = 0;
            virtual int32_t __stdcall get_SmallCaps(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SmallCaps(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Spacing(float*) noexcept = 0;
            virtual int32_t __stdcall put_Spacing(float) noexcept = 0;
            virtual int32_t __stdcall get_Strikethrough(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Strikethrough(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Subscript(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Subscript(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Superscript(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Superscript(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TextScript(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextScript(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Underline(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Underline(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Weight(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Weight(int32_t) noexcept = 0;
            virtual int32_t __stdcall SetClone(void*) noexcept = 0;
            virtual int32_t __stdcall GetClone(void**) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Text::ITextConstantsStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AutoColor(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall get_MinUnitCount(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_MaxUnitCount(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_UndefinedColor(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall get_UndefinedFloatValue(float*) noexcept = 0;
            virtual int32_t __stdcall get_UndefinedInt32Value(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_UndefinedFontStretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_UndefinedFontStyle(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Text::ITextDocument>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CaretType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CaretType(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DefaultTabStop(float*) noexcept = 0;
            virtual int32_t __stdcall put_DefaultTabStop(float) noexcept = 0;
            virtual int32_t __stdcall get_Selection(void**) noexcept = 0;
            virtual int32_t __stdcall get_UndoLimit(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_UndoLimit(uint32_t) noexcept = 0;
            virtual int32_t __stdcall CanCopy(bool*) noexcept = 0;
            virtual int32_t __stdcall CanPaste(bool*) noexcept = 0;
            virtual int32_t __stdcall CanRedo(bool*) noexcept = 0;
            virtual int32_t __stdcall CanUndo(bool*) noexcept = 0;
            virtual int32_t __stdcall ApplyDisplayUpdates(int32_t*) noexcept = 0;
            virtual int32_t __stdcall BatchDisplayUpdates(int32_t*) noexcept = 0;
            virtual int32_t __stdcall BeginUndoGroup() noexcept = 0;
            virtual int32_t __stdcall EndUndoGroup() noexcept = 0;
            virtual int32_t __stdcall GetDefaultCharacterFormat(void**) noexcept = 0;
            virtual int32_t __stdcall GetDefaultParagraphFormat(void**) noexcept = 0;
            virtual int32_t __stdcall GetRange(int32_t, int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetRangeFromPoint(winrt::Windows::Foundation::Point, uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetText(uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall LoadFromStream(uint32_t, void*) noexcept = 0;
            virtual int32_t __stdcall Redo() noexcept = 0;
            virtual int32_t __stdcall SaveToStream(uint32_t, void*) noexcept = 0;
            virtual int32_t __stdcall SetDefaultCharacterFormat(void*) noexcept = 0;
            virtual int32_t __stdcall SetDefaultParagraphFormat(void*) noexcept = 0;
            virtual int32_t __stdcall SetText(uint32_t, void*) noexcept = 0;
            virtual int32_t __stdcall Undo() noexcept = 0;
            virtual int32_t __stdcall get_AlignmentIncludesTrailingWhitespace(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AlignmentIncludesTrailingWhitespace(bool) noexcept = 0;
            virtual int32_t __stdcall get_IgnoreTrailingCharacterSpacing(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IgnoreTrailingCharacterSpacing(bool) noexcept = 0;
            virtual int32_t __stdcall ClearUndoRedoHistory() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Text::ITextParagraphFormat>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Alignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Alignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_FirstLineIndent(float*) noexcept = 0;
            virtual int32_t __stdcall get_KeepTogether(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_KeepTogether(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_KeepWithNext(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_KeepWithNext(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_LeftIndent(float*) noexcept = 0;
            virtual int32_t __stdcall get_LineSpacing(float*) noexcept = 0;
            virtual int32_t __stdcall get_LineSpacingRule(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ListAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ListAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ListLevelIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ListLevelIndex(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ListStart(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ListStart(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ListStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ListStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ListTab(float*) noexcept = 0;
            virtual int32_t __stdcall put_ListTab(float) noexcept = 0;
            virtual int32_t __stdcall get_ListType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ListType(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_NoLineNumber(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_NoLineNumber(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PageBreakBefore(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PageBreakBefore(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_RightIndent(float*) noexcept = 0;
            virtual int32_t __stdcall put_RightIndent(float) noexcept = 0;
            virtual int32_t __stdcall get_RightToLeft(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_RightToLeft(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Style(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Style(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SpaceAfter(float*) noexcept = 0;
            virtual int32_t __stdcall put_SpaceAfter(float) noexcept = 0;
            virtual int32_t __stdcall get_SpaceBefore(float*) noexcept = 0;
            virtual int32_t __stdcall put_SpaceBefore(float) noexcept = 0;
            virtual int32_t __stdcall get_WidowControl(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_WidowControl(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TabCount(int32_t*) noexcept = 0;
            virtual int32_t __stdcall AddTab(float, int32_t, int32_t) noexcept = 0;
            virtual int32_t __stdcall ClearAllTabs() noexcept = 0;
            virtual int32_t __stdcall DeleteTab(float) noexcept = 0;
            virtual int32_t __stdcall GetClone(void**) noexcept = 0;
            virtual int32_t __stdcall GetTab(int32_t, float*, int32_t*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetClone(void*) noexcept = 0;
            virtual int32_t __stdcall SetIndents(float, float, float) noexcept = 0;
            virtual int32_t __stdcall SetLineSpacing(int32_t, float) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Text::ITextRange>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Character(char16_t*) noexcept = 0;
            virtual int32_t __stdcall put_Character(char16_t) noexcept = 0;
            virtual int32_t __stdcall get_CharacterFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_CharacterFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_FormattedText(void**) noexcept = 0;
            virtual int32_t __stdcall put_FormattedText(void*) noexcept = 0;
            virtual int32_t __stdcall get_EndPosition(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_EndPosition(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Gravity(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Gravity(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Length(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Link(void**) noexcept = 0;
            virtual int32_t __stdcall put_Link(void*) noexcept = 0;
            virtual int32_t __stdcall get_ParagraphFormat(void**) noexcept = 0;
            virtual int32_t __stdcall put_ParagraphFormat(void*) noexcept = 0;
            virtual int32_t __stdcall get_StartPosition(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_StartPosition(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_StoryLength(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall CanPaste(int32_t, bool*) noexcept = 0;
            virtual int32_t __stdcall ChangeCase(int32_t) noexcept = 0;
            virtual int32_t __stdcall Collapse(bool) noexcept = 0;
            virtual int32_t __stdcall Copy() noexcept = 0;
            virtual int32_t __stdcall Cut() noexcept = 0;
            virtual int32_t __stdcall Delete(int32_t, int32_t, int32_t*) noexcept = 0;
            virtual int32_t __stdcall EndOf(int32_t, bool, int32_t*) noexcept = 0;
            virtual int32_t __stdcall Expand(int32_t, int32_t*) noexcept = 0;
            virtual int32_t __stdcall FindText(void*, int32_t, uint32_t, int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetCharacterUtf32(uint32_t*, int32_t) noexcept = 0;
            virtual int32_t __stdcall GetClone(void**) noexcept = 0;
            virtual int32_t __stdcall GetIndex(int32_t, int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetPoint(int32_t, int32_t, uint32_t, winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall GetRect(uint32_t, winrt::Windows::Foundation::Rect*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetText(uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetTextViaStream(uint32_t, void*) noexcept = 0;
            virtual int32_t __stdcall InRange(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall InsertImage(int32_t, int32_t, int32_t, int32_t, void*, void*) noexcept = 0;
            virtual int32_t __stdcall InStory(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall Move(int32_t, int32_t, int32_t*) noexcept = 0;
            virtual int32_t __stdcall MoveEnd(int32_t, int32_t, int32_t*) noexcept = 0;
            virtual int32_t __stdcall MoveStart(int32_t, int32_t, int32_t*) noexcept = 0;
            virtual int32_t __stdcall Paste(int32_t) noexcept = 0;
            virtual int32_t __stdcall ScrollIntoView(uint32_t) noexcept = 0;
            virtual int32_t __stdcall MatchSelection() noexcept = 0;
            virtual int32_t __stdcall SetIndex(int32_t, int32_t, bool) noexcept = 0;
            virtual int32_t __stdcall SetPoint(winrt::Windows::Foundation::Point, uint32_t, bool) noexcept = 0;
            virtual int32_t __stdcall SetRange(int32_t, int32_t) noexcept = 0;
            virtual int32_t __stdcall SetText(uint32_t, void*) noexcept = 0;
            virtual int32_t __stdcall SetTextViaStream(uint32_t, void*) noexcept = 0;
            virtual int32_t __stdcall StartOf(int32_t, bool, int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Text::ITextSelection>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Options(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Options(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_Type(int32_t*) noexcept = 0;
            virtual int32_t __stdcall EndKey(int32_t, bool, int32_t*) noexcept = 0;
            virtual int32_t __stdcall HomeKey(int32_t, bool, int32_t*) noexcept = 0;
            virtual int32_t __stdcall MoveDown(int32_t, int32_t, bool, int32_t*) noexcept = 0;
            virtual int32_t __stdcall MoveLeft(int32_t, int32_t, bool, int32_t*) noexcept = 0;
            virtual int32_t __stdcall MoveRight(int32_t, int32_t, bool, int32_t*) noexcept = 0;
            virtual int32_t __stdcall MoveUp(int32_t, int32_t, bool, int32_t*) noexcept = 0;
            virtual int32_t __stdcall TypeText(void*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Text_IFontWeights
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Text::IFontWeights>
    {
        template <typename D> using type = consume_Microsoft_UI_Text_IFontWeights<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Text_IFontWeightsStatics
    {
        [[nodiscard]] auto Black() const;
        [[nodiscard]] auto Bold() const;
        [[nodiscard]] auto ExtraBlack() const;
        [[nodiscard]] auto ExtraBold() const;
        [[nodiscard]] auto ExtraLight() const;
        [[nodiscard]] auto Light() const;
        [[nodiscard]] auto Medium() const;
        [[nodiscard]] auto Normal() const;
        [[nodiscard]] auto SemiBold() const;
        [[nodiscard]] auto SemiLight() const;
        [[nodiscard]] auto Thin() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Text::IFontWeightsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Text_IFontWeightsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Text_ITextCharacterFormat
    {
        [[nodiscard]] auto AllCaps() const;
        auto AllCaps(winrt::Microsoft::UI::Text::FormatEffect const& value) const;
        [[nodiscard]] auto BackgroundColor() const;
        auto BackgroundColor(winrt::Windows::UI::Color const& value) const;
        [[nodiscard]] auto Bold() const;
        auto Bold(winrt::Microsoft::UI::Text::FormatEffect const& value) const;
        [[nodiscard]] auto FontStretch() const;
        auto FontStretch(winrt::Windows::UI::Text::FontStretch const& value) const;
        [[nodiscard]] auto FontStyle() const;
        auto FontStyle(winrt::Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] auto ForegroundColor() const;
        auto ForegroundColor(winrt::Windows::UI::Color const& value) const;
        [[nodiscard]] auto Hidden() const;
        auto Hidden(winrt::Microsoft::UI::Text::FormatEffect const& value) const;
        [[nodiscard]] auto Italic() const;
        auto Italic(winrt::Microsoft::UI::Text::FormatEffect const& value) const;
        [[nodiscard]] auto Kerning() const;
        auto Kerning(float value) const;
        [[nodiscard]] auto LanguageTag() const;
        auto LanguageTag(param::hstring const& value) const;
        [[nodiscard]] auto LinkType() const;
        [[nodiscard]] auto Name() const;
        auto Name(param::hstring const& value) const;
        [[nodiscard]] auto Outline() const;
        auto Outline(winrt::Microsoft::UI::Text::FormatEffect const& value) const;
        [[nodiscard]] auto Position() const;
        auto Position(float value) const;
        [[nodiscard]] auto ProtectedText() const;
        auto ProtectedText(winrt::Microsoft::UI::Text::FormatEffect const& value) const;
        [[nodiscard]] auto Size() const;
        auto Size(float value) const;
        [[nodiscard]] auto SmallCaps() const;
        auto SmallCaps(winrt::Microsoft::UI::Text::FormatEffect const& value) const;
        [[nodiscard]] auto Spacing() const;
        auto Spacing(float value) const;
        [[nodiscard]] auto Strikethrough() const;
        auto Strikethrough(winrt::Microsoft::UI::Text::FormatEffect const& value) const;
        [[nodiscard]] auto Subscript() const;
        auto Subscript(winrt::Microsoft::UI::Text::FormatEffect const& value) const;
        [[nodiscard]] auto Superscript() const;
        auto Superscript(winrt::Microsoft::UI::Text::FormatEffect const& value) const;
        [[nodiscard]] auto TextScript() const;
        auto TextScript(winrt::Microsoft::UI::Text::TextScript const& value) const;
        [[nodiscard]] auto Underline() const;
        auto Underline(winrt::Microsoft::UI::Text::UnderlineType const& value) const;
        [[nodiscard]] auto Weight() const;
        auto Weight(int32_t value) const;
        auto SetClone(winrt::Microsoft::UI::Text::ITextCharacterFormat const& value) const;
        auto GetClone() const;
        auto IsEqual(winrt::Microsoft::UI::Text::ITextCharacterFormat const& format) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Text::ITextCharacterFormat>
    {
        template <typename D> using type = consume_Microsoft_UI_Text_ITextCharacterFormat<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Text_ITextConstantsStatics
    {
        [[nodiscard]] auto AutoColor() const;
        [[nodiscard]] auto MinUnitCount() const;
        [[nodiscard]] auto MaxUnitCount() const;
        [[nodiscard]] auto UndefinedColor() const;
        [[nodiscard]] auto UndefinedFloatValue() const;
        [[nodiscard]] auto UndefinedInt32Value() const;
        [[nodiscard]] auto UndefinedFontStretch() const;
        [[nodiscard]] auto UndefinedFontStyle() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Text::ITextConstantsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Text_ITextConstantsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Text_ITextDocument
    {
        [[nodiscard]] auto CaretType() const;
        auto CaretType(winrt::Microsoft::UI::Text::CaretType const& value) const;
        [[nodiscard]] auto DefaultTabStop() const;
        auto DefaultTabStop(float value) const;
        [[nodiscard]] auto Selection() const;
        [[nodiscard]] auto UndoLimit() const;
        auto UndoLimit(uint32_t value) const;
        auto CanCopy() const;
        auto CanPaste() const;
        auto CanRedo() const;
        auto CanUndo() const;
        auto ApplyDisplayUpdates() const;
        auto BatchDisplayUpdates() const;
        auto BeginUndoGroup() const;
        auto EndUndoGroup() const;
        auto GetDefaultCharacterFormat() const;
        auto GetDefaultParagraphFormat() const;
        auto GetRange(int32_t startPosition, int32_t endPosition) const;
        auto GetRangeFromPoint(winrt::Windows::Foundation::Point const& point, winrt::Microsoft::UI::Text::PointOptions const& options) const;
        auto GetText(winrt::Microsoft::UI::Text::TextGetOptions const& options, hstring& value) const;
        auto LoadFromStream(winrt::Microsoft::UI::Text::TextSetOptions const& options, winrt::Windows::Storage::Streams::IRandomAccessStream const& value) const;
        auto Redo() const;
        auto SaveToStream(winrt::Microsoft::UI::Text::TextGetOptions const& options, winrt::Windows::Storage::Streams::IRandomAccessStream const& value) const;
        auto SetDefaultCharacterFormat(winrt::Microsoft::UI::Text::ITextCharacterFormat const& value) const;
        auto SetDefaultParagraphFormat(winrt::Microsoft::UI::Text::ITextParagraphFormat const& value) const;
        auto SetText(winrt::Microsoft::UI::Text::TextSetOptions const& options, param::hstring const& value) const;
        auto Undo() const;
        [[nodiscard]] auto AlignmentIncludesTrailingWhitespace() const;
        auto AlignmentIncludesTrailingWhitespace(bool value) const;
        [[nodiscard]] auto IgnoreTrailingCharacterSpacing() const;
        auto IgnoreTrailingCharacterSpacing(bool value) const;
        auto ClearUndoRedoHistory() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Text::ITextDocument>
    {
        template <typename D> using type = consume_Microsoft_UI_Text_ITextDocument<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Text_ITextParagraphFormat
    {
        [[nodiscard]] auto Alignment() const;
        auto Alignment(winrt::Microsoft::UI::Text::ParagraphAlignment const& value) const;
        [[nodiscard]] auto FirstLineIndent() const;
        [[nodiscard]] auto KeepTogether() const;
        auto KeepTogether(winrt::Microsoft::UI::Text::FormatEffect const& value) const;
        [[nodiscard]] auto KeepWithNext() const;
        auto KeepWithNext(winrt::Microsoft::UI::Text::FormatEffect const& value) const;
        [[nodiscard]] auto LeftIndent() const;
        [[nodiscard]] auto LineSpacing() const;
        [[nodiscard]] auto LineSpacingRule() const;
        [[nodiscard]] auto ListAlignment() const;
        auto ListAlignment(winrt::Microsoft::UI::Text::MarkerAlignment const& value) const;
        [[nodiscard]] auto ListLevelIndex() const;
        auto ListLevelIndex(int32_t value) const;
        [[nodiscard]] auto ListStart() const;
        auto ListStart(int32_t value) const;
        [[nodiscard]] auto ListStyle() const;
        auto ListStyle(winrt::Microsoft::UI::Text::MarkerStyle const& value) const;
        [[nodiscard]] auto ListTab() const;
        auto ListTab(float value) const;
        [[nodiscard]] auto ListType() const;
        auto ListType(winrt::Microsoft::UI::Text::MarkerType const& value) const;
        [[nodiscard]] auto NoLineNumber() const;
        auto NoLineNumber(winrt::Microsoft::UI::Text::FormatEffect const& value) const;
        [[nodiscard]] auto PageBreakBefore() const;
        auto PageBreakBefore(winrt::Microsoft::UI::Text::FormatEffect const& value) const;
        [[nodiscard]] auto RightIndent() const;
        auto RightIndent(float value) const;
        [[nodiscard]] auto RightToLeft() const;
        auto RightToLeft(winrt::Microsoft::UI::Text::FormatEffect const& value) const;
        [[nodiscard]] auto Style() const;
        auto Style(winrt::Microsoft::UI::Text::ParagraphStyle const& value) const;
        [[nodiscard]] auto SpaceAfter() const;
        auto SpaceAfter(float value) const;
        [[nodiscard]] auto SpaceBefore() const;
        auto SpaceBefore(float value) const;
        [[nodiscard]] auto WidowControl() const;
        auto WidowControl(winrt::Microsoft::UI::Text::FormatEffect const& value) const;
        [[nodiscard]] auto TabCount() const;
        auto AddTab(float position, winrt::Microsoft::UI::Text::TabAlignment const& align, winrt::Microsoft::UI::Text::TabLeader const& leader) const;
        auto ClearAllTabs() const;
        auto DeleteTab(float position) const;
        auto GetClone() const;
        auto GetTab(int32_t index, float& position, winrt::Microsoft::UI::Text::TabAlignment& align, winrt::Microsoft::UI::Text::TabLeader& leader) const;
        auto IsEqual(winrt::Microsoft::UI::Text::ITextParagraphFormat const& format) const;
        auto SetClone(winrt::Microsoft::UI::Text::ITextParagraphFormat const& format) const;
        auto SetIndents(float start, float left, float right) const;
        auto SetLineSpacing(winrt::Microsoft::UI::Text::LineSpacingRule const& rule, float spacing) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Text::ITextParagraphFormat>
    {
        template <typename D> using type = consume_Microsoft_UI_Text_ITextParagraphFormat<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Text_ITextRange
    {
        [[nodiscard]] auto Character() const;
        auto Character(char16_t value) const;
        [[nodiscard]] auto CharacterFormat() const;
        auto CharacterFormat(winrt::Microsoft::UI::Text::ITextCharacterFormat const& value) const;
        [[nodiscard]] auto FormattedText() const;
        auto FormattedText(winrt::Microsoft::UI::Text::ITextRange const& value) const;
        [[nodiscard]] auto EndPosition() const;
        auto EndPosition(int32_t value) const;
        [[nodiscard]] auto Gravity() const;
        auto Gravity(winrt::Microsoft::UI::Text::RangeGravity const& value) const;
        [[nodiscard]] auto Length() const;
        [[nodiscard]] auto Link() const;
        auto Link(param::hstring const& value) const;
        [[nodiscard]] auto ParagraphFormat() const;
        auto ParagraphFormat(winrt::Microsoft::UI::Text::ITextParagraphFormat const& value) const;
        [[nodiscard]] auto StartPosition() const;
        auto StartPosition(int32_t value) const;
        [[nodiscard]] auto StoryLength() const;
        [[nodiscard]] auto Text() const;
        auto Text(param::hstring const& value) const;
        auto CanPaste(int32_t format) const;
        auto ChangeCase(winrt::Microsoft::UI::Text::LetterCase const& value) const;
        auto Collapse(bool value) const;
        auto Copy() const;
        auto Cut() const;
        auto Delete(winrt::Microsoft::UI::Text::TextRangeUnit const& unit, int32_t count) const;
        auto EndOf(winrt::Microsoft::UI::Text::TextRangeUnit const& unit, bool extend) const;
        auto Expand(winrt::Microsoft::UI::Text::TextRangeUnit const& unit) const;
        auto FindText(param::hstring const& value, int32_t scanLength, winrt::Microsoft::UI::Text::FindOptions const& options) const;
        auto GetCharacterUtf32(uint32_t& value, int32_t offset) const;
        auto GetClone() const;
        auto GetIndex(winrt::Microsoft::UI::Text::TextRangeUnit const& unit) const;
        auto GetPoint(winrt::Microsoft::UI::Text::HorizontalCharacterAlignment const& horizontalAlign, winrt::Microsoft::UI::Text::VerticalCharacterAlignment const& verticalAlign, winrt::Microsoft::UI::Text::PointOptions const& options, winrt::Windows::Foundation::Point& point) const;
        auto GetRect(winrt::Microsoft::UI::Text::PointOptions const& options, winrt::Windows::Foundation::Rect& rect, int32_t& hit) const;
        auto GetText(winrt::Microsoft::UI::Text::TextGetOptions const& options, hstring& value) const;
        auto GetTextViaStream(winrt::Microsoft::UI::Text::TextGetOptions const& options, winrt::Windows::Storage::Streams::IRandomAccessStream const& value) const;
        auto InRange(winrt::Microsoft::UI::Text::ITextRange const& range) const;
        auto InsertImage(int32_t width, int32_t height, int32_t ascent, winrt::Microsoft::UI::Text::VerticalCharacterAlignment const& verticalAlign, param::hstring const& alternateText, winrt::Windows::Storage::Streams::IRandomAccessStream const& value) const;
        auto InStory(winrt::Microsoft::UI::Text::ITextRange const& range) const;
        auto IsEqual(winrt::Microsoft::UI::Text::ITextRange const& range) const;
        auto Move(winrt::Microsoft::UI::Text::TextRangeUnit const& unit, int32_t count) const;
        auto MoveEnd(winrt::Microsoft::UI::Text::TextRangeUnit const& unit, int32_t count) const;
        auto MoveStart(winrt::Microsoft::UI::Text::TextRangeUnit const& unit, int32_t count) const;
        auto Paste(int32_t format) const;
        auto ScrollIntoView(winrt::Microsoft::UI::Text::PointOptions const& value) const;
        auto MatchSelection() const;
        auto SetIndex(winrt::Microsoft::UI::Text::TextRangeUnit const& unit, int32_t index, bool extend) const;
        auto SetPoint(winrt::Windows::Foundation::Point const& point, winrt::Microsoft::UI::Text::PointOptions const& options, bool extend) const;
        auto SetRange(int32_t startPosition, int32_t endPosition) const;
        auto SetText(winrt::Microsoft::UI::Text::TextSetOptions const& options, param::hstring const& value) const;
        auto SetTextViaStream(winrt::Microsoft::UI::Text::TextSetOptions const& options, winrt::Windows::Storage::Streams::IRandomAccessStream const& value) const;
        auto StartOf(winrt::Microsoft::UI::Text::TextRangeUnit const& unit, bool extend) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Text::ITextRange>
    {
        template <typename D> using type = consume_Microsoft_UI_Text_ITextRange<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Text_ITextSelection
    {
        [[nodiscard]] auto Options() const;
        auto Options(winrt::Microsoft::UI::Text::SelectionOptions const& value) const;
        [[nodiscard]] auto Type() const;
        auto EndKey(winrt::Microsoft::UI::Text::TextRangeUnit const& unit, bool extend) const;
        auto HomeKey(winrt::Microsoft::UI::Text::TextRangeUnit const& unit, bool extend) const;
        auto MoveDown(winrt::Microsoft::UI::Text::TextRangeUnit const& unit, int32_t count, bool extend) const;
        auto MoveLeft(winrt::Microsoft::UI::Text::TextRangeUnit const& unit, int32_t count, bool extend) const;
        auto MoveRight(winrt::Microsoft::UI::Text::TextRangeUnit const& unit, int32_t count, bool extend) const;
        auto MoveUp(winrt::Microsoft::UI::Text::TextRangeUnit const& unit, int32_t count, bool extend) const;
        auto TypeText(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Text::ITextSelection>
    {
        template <typename D> using type = consume_Microsoft_UI_Text_ITextSelection<D>;
    };
}
#endif
