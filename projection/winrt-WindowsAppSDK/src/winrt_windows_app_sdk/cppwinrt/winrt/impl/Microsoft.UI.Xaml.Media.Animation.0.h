// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#ifndef WINRT_Microsoft_UI_Xaml_Media_Animation_0_H
#define WINRT_Microsoft_UI_Xaml_Media_Animation_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition
{
    struct CompositionEasingFunction;
    struct ICompositionAnimationBase;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml
{
    struct DependencyObject;
    struct DependencyProperty;
    struct Duration;
    struct UIElement;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Controls
{
    struct ListViewBase;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Controls::Primitives
{
    enum class AnimationDirection : int32_t;
    enum class EdgeTransitionLocation : int32_t;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    template <typename T> struct WINRT_IMPL_EMPTY_BASES EventHandler;
    struct EventRegistrationToken;
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IReference;
    struct Point;
    template <typename TSender, typename TResult> struct WINRT_IMPL_EMPTY_BASES TypedEventHandler;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IIterable;
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IVector;
}
WINRT_EXPORT namespace winrt::Windows::UI
{
    struct Color;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Media::Animation
{
    enum class ClockState : int32_t
    {
        Active = 0,
        Filling = 1,
        Stopped = 2,
    };
    enum class ConnectedAnimationComponent : int32_t
    {
        OffsetX = 0,
        OffsetY = 1,
        CrossFade = 2,
        Scale = 3,
    };
    enum class EasingMode : int32_t
    {
        EaseOut = 0,
        EaseIn = 1,
        EaseInOut = 2,
    };
    enum class FillBehavior : int32_t
    {
        HoldEnd = 0,
        Stop = 1,
    };
    enum class RepeatBehaviorType : int32_t
    {
        Count = 0,
        Duration = 1,
        Forever = 2,
    };
    enum class SlideNavigationTransitionEffect : int32_t
    {
        FromBottom = 0,
        FromLeft = 1,
        FromRight = 2,
    };
    struct IAddDeleteThemeTransition;
    struct IBackEase;
    struct IBackEaseStatics;
    struct IBasicConnectedAnimationConfiguration;
    struct IBasicConnectedAnimationConfigurationFactory;
    struct IBeginStoryboard;
    struct IBeginStoryboardStatics;
    struct IBounceEase;
    struct IBounceEaseStatics;
    struct ICircleEase;
    struct IColorAnimation;
    struct IColorAnimationStatics;
    struct IColorAnimationUsingKeyFrames;
    struct IColorAnimationUsingKeyFramesStatics;
    struct IColorKeyFrame;
    struct IColorKeyFrameFactory;
    struct IColorKeyFrameStatics;
    struct ICommonNavigationTransitionInfo;
    struct ICommonNavigationTransitionInfoStatics;
    struct IConnectedAnimation;
    struct IConnectedAnimationConfiguration;
    struct IConnectedAnimationConfigurationFactory;
    struct IConnectedAnimationService;
    struct IConnectedAnimationServiceStatics;
    struct IContentThemeTransition;
    struct IContentThemeTransitionStatics;
    struct IContinuumNavigationTransitionInfo;
    struct IContinuumNavigationTransitionInfoStatics;
    struct ICubicEase;
    struct IDirectConnectedAnimationConfiguration;
    struct IDirectConnectedAnimationConfigurationFactory;
    struct IDiscreteColorKeyFrame;
    struct IDiscreteDoubleKeyFrame;
    struct IDiscreteObjectKeyFrame;
    struct IDiscretePointKeyFrame;
    struct IDoubleAnimation;
    struct IDoubleAnimationStatics;
    struct IDoubleAnimationUsingKeyFrames;
    struct IDoubleAnimationUsingKeyFramesStatics;
    struct IDoubleKeyFrame;
    struct IDoubleKeyFrameFactory;
    struct IDoubleKeyFrameStatics;
    struct IDragItemThemeAnimation;
    struct IDragItemThemeAnimationStatics;
    struct IDragOverThemeAnimation;
    struct IDragOverThemeAnimationStatics;
    struct IDrillInNavigationTransitionInfo;
    struct IDrillInThemeAnimation;
    struct IDrillInThemeAnimationStatics;
    struct IDrillOutThemeAnimation;
    struct IDrillOutThemeAnimationStatics;
    struct IDropTargetItemThemeAnimation;
    struct IDropTargetItemThemeAnimationStatics;
    struct IEasingColorKeyFrame;
    struct IEasingColorKeyFrameStatics;
    struct IEasingDoubleKeyFrame;
    struct IEasingDoubleKeyFrameStatics;
    struct IEasingFunctionBase;
    struct IEasingFunctionBaseFactory;
    struct IEasingFunctionBaseStatics;
    struct IEasingPointKeyFrame;
    struct IEasingPointKeyFrameStatics;
    struct IEdgeUIThemeTransition;
    struct IEdgeUIThemeTransitionStatics;
    struct IElasticEase;
    struct IElasticEaseStatics;
    struct IEntranceNavigationTransitionInfo;
    struct IEntranceNavigationTransitionInfoStatics;
    struct IEntranceThemeTransition;
    struct IEntranceThemeTransitionStatics;
    struct IExponentialEase;
    struct IExponentialEaseStatics;
    struct IFadeInThemeAnimation;
    struct IFadeInThemeAnimationStatics;
    struct IFadeOutThemeAnimation;
    struct IFadeOutThemeAnimationStatics;
    struct IGravityConnectedAnimationConfiguration;
    struct IGravityConnectedAnimationConfigurationFactory;
    struct IKeySpline;
    struct IKeyTimeHelper;
    struct IKeyTimeHelperStatics;
    struct ILinearColorKeyFrame;
    struct ILinearDoubleKeyFrame;
    struct ILinearPointKeyFrame;
    struct INavigationThemeTransition;
    struct INavigationThemeTransitionStatics;
    struct INavigationTransitionInfo;
    struct INavigationTransitionInfoFactory;
    struct INavigationTransitionInfoOverrides;
    struct IObjectAnimationUsingKeyFrames;
    struct IObjectAnimationUsingKeyFramesStatics;
    struct IObjectKeyFrame;
    struct IObjectKeyFrameFactory;
    struct IObjectKeyFrameStatics;
    struct IPaneThemeTransition;
    struct IPaneThemeTransitionStatics;
    struct IPointAnimation;
    struct IPointAnimationStatics;
    struct IPointAnimationUsingKeyFrames;
    struct IPointAnimationUsingKeyFramesStatics;
    struct IPointKeyFrame;
    struct IPointKeyFrameFactory;
    struct IPointKeyFrameStatics;
    struct IPointerDownThemeAnimation;
    struct IPointerDownThemeAnimationStatics;
    struct IPointerUpThemeAnimation;
    struct IPointerUpThemeAnimationStatics;
    struct IPopInThemeAnimation;
    struct IPopInThemeAnimationStatics;
    struct IPopOutThemeAnimation;
    struct IPopOutThemeAnimationStatics;
    struct IPopupThemeTransition;
    struct IPopupThemeTransitionStatics;
    struct IPowerEase;
    struct IPowerEaseStatics;
    struct IQuadraticEase;
    struct IQuarticEase;
    struct IQuinticEase;
    struct IReorderThemeTransition;
    struct IRepeatBehaviorHelper;
    struct IRepeatBehaviorHelperStatics;
    struct IRepositionThemeAnimation;
    struct IRepositionThemeAnimationStatics;
    struct IRepositionThemeTransition;
    struct IRepositionThemeTransitionStatics;
    struct ISineEase;
    struct ISlideNavigationTransitionInfo;
    struct ISlideNavigationTransitionInfoStatics;
    struct ISplineColorKeyFrame;
    struct ISplineColorKeyFrameStatics;
    struct ISplineDoubleKeyFrame;
    struct ISplineDoubleKeyFrameStatics;
    struct ISplinePointKeyFrame;
    struct ISplinePointKeyFrameStatics;
    struct ISplitCloseThemeAnimation;
    struct ISplitCloseThemeAnimationStatics;
    struct ISplitOpenThemeAnimation;
    struct ISplitOpenThemeAnimationStatics;
    struct IStoryboard;
    struct IStoryboardStatics;
    struct ISuppressNavigationTransitionInfo;
    struct ISwipeBackThemeAnimation;
    struct ISwipeBackThemeAnimationStatics;
    struct ISwipeHintThemeAnimation;
    struct ISwipeHintThemeAnimationStatics;
    struct ITimeline;
    struct ITimelineFactory;
    struct ITimelineStatics;
    struct ITransition;
    struct ITransitionFactory;
    struct AddDeleteThemeTransition;
    struct BackEase;
    struct BasicConnectedAnimationConfiguration;
    struct BeginStoryboard;
    struct BounceEase;
    struct CircleEase;
    struct ColorAnimation;
    struct ColorAnimationUsingKeyFrames;
    struct ColorKeyFrame;
    struct ColorKeyFrameCollection;
    struct CommonNavigationTransitionInfo;
    struct ConnectedAnimation;
    struct ConnectedAnimationConfiguration;
    struct ConnectedAnimationService;
    struct ContentThemeTransition;
    struct ContinuumNavigationTransitionInfo;
    struct CubicEase;
    struct DirectConnectedAnimationConfiguration;
    struct DiscreteColorKeyFrame;
    struct DiscreteDoubleKeyFrame;
    struct DiscreteObjectKeyFrame;
    struct DiscretePointKeyFrame;
    struct DoubleAnimation;
    struct DoubleAnimationUsingKeyFrames;
    struct DoubleKeyFrame;
    struct DoubleKeyFrameCollection;
    struct DragItemThemeAnimation;
    struct DragOverThemeAnimation;
    struct DrillInNavigationTransitionInfo;
    struct DrillInThemeAnimation;
    struct DrillOutThemeAnimation;
    struct DropTargetItemThemeAnimation;
    struct EasingColorKeyFrame;
    struct EasingDoubleKeyFrame;
    struct EasingFunctionBase;
    struct EasingPointKeyFrame;
    struct EdgeUIThemeTransition;
    struct ElasticEase;
    struct EntranceNavigationTransitionInfo;
    struct EntranceThemeTransition;
    struct ExponentialEase;
    struct FadeInThemeAnimation;
    struct FadeOutThemeAnimation;
    struct GravityConnectedAnimationConfiguration;
    struct KeySpline;
    struct KeyTimeHelper;
    struct LinearColorKeyFrame;
    struct LinearDoubleKeyFrame;
    struct LinearPointKeyFrame;
    struct NavigationThemeTransition;
    struct NavigationTransitionInfo;
    struct ObjectAnimationUsingKeyFrames;
    struct ObjectKeyFrame;
    struct ObjectKeyFrameCollection;
    struct PaneThemeTransition;
    struct PointAnimation;
    struct PointAnimationUsingKeyFrames;
    struct PointKeyFrame;
    struct PointKeyFrameCollection;
    struct PointerDownThemeAnimation;
    struct PointerUpThemeAnimation;
    struct PopInThemeAnimation;
    struct PopOutThemeAnimation;
    struct PopupThemeTransition;
    struct PowerEase;
    struct QuadraticEase;
    struct QuarticEase;
    struct QuinticEase;
    struct ReorderThemeTransition;
    struct RepeatBehaviorHelper;
    struct RepositionThemeAnimation;
    struct RepositionThemeTransition;
    struct SineEase;
    struct SlideNavigationTransitionInfo;
    struct SplineColorKeyFrame;
    struct SplineDoubleKeyFrame;
    struct SplinePointKeyFrame;
    struct SplitCloseThemeAnimation;
    struct SplitOpenThemeAnimation;
    struct Storyboard;
    struct SuppressNavigationTransitionInfo;
    struct SwipeBackThemeAnimation;
    struct SwipeHintThemeAnimation;
    struct Timeline;
    struct TimelineCollection;
    struct Transition;
    struct TransitionCollection;
    struct KeyTime;
    struct RepeatBehavior;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IAddDeleteThemeTransition>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IBackEase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IBackEaseStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IBasicConnectedAnimationConfiguration>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IBasicConnectedAnimationConfigurationFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IBeginStoryboard>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IBeginStoryboardStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IBounceEase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IBounceEaseStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ICircleEase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFrames>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFramesStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IColorKeyFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IColorKeyFrameFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IColorKeyFrameStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfo>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfoStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationConfiguration>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationConfigurationFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationService>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationServiceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IContentThemeTransition>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IContentThemeTransitionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfo>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfoStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ICubicEase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDirectConnectedAnimationConfiguration>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDirectConnectedAnimationConfigurationFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteColorKeyFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteDoubleKeyFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteObjectKeyFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscretePointKeyFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFrames>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFramesStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleKeyFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleKeyFrameFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleKeyFrameStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDragItemThemeAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDragItemThemeAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDragOverThemeAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDragOverThemeAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillInNavigationTransitionInfo>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillInThemeAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillInThemeAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillOutThemeAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillOutThemeAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingColorKeyFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingColorKeyFrameStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingDoubleKeyFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingDoubleKeyFrameStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBaseFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBaseStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingPointKeyFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingPointKeyFrameStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IEdgeUIThemeTransition>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IEdgeUIThemeTransitionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IElasticEase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IElasticEaseStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceNavigationTransitionInfo>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceNavigationTransitionInfoStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceThemeTransition>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceThemeTransitionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IExponentialEase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IExponentialEaseStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeInThemeAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeInThemeAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeOutThemeAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeOutThemeAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IGravityConnectedAnimationConfiguration>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IGravityConnectedAnimationConfigurationFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IKeySpline>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IKeyTimeHelper>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IKeyTimeHelperStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ILinearColorKeyFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ILinearDoubleKeyFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ILinearPointKeyFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationThemeTransition>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationThemeTransitionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfo>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfoFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfoOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFrames>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFramesStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectKeyFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectKeyFrameFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectKeyFrameStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPaneThemeTransition>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPaneThemeTransitionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFrames>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFramesStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPointKeyFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPointKeyFrameFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPointKeyFrameStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerDownThemeAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerDownThemeAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerUpThemeAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerUpThemeAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPopInThemeAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPopInThemeAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPopOutThemeAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPopOutThemeAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPopupThemeTransition>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPopupThemeTransitionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPowerEase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IPowerEaseStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IQuadraticEase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IQuarticEase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IQuinticEase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IReorderThemeTransition>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IRepeatBehaviorHelper>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IRepeatBehaviorHelperStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeTransition>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeTransitionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISineEase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfo>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfoStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineColorKeyFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineColorKeyFrameStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineDoubleKeyFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineDoubleKeyFrameStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISplinePointKeyFrame>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISplinePointKeyFrameStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitCloseThemeAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitCloseThemeAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitOpenThemeAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitOpenThemeAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IStoryboard>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::IStoryboardStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISuppressNavigationTransitionInfo>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeBackThemeAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeBackThemeAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeHintThemeAnimation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeHintThemeAnimationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ITimeline>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ITimelineFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ITimelineStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ITransition>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ITransitionFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::AddDeleteThemeTransition>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::BackEase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::BasicConnectedAnimationConfiguration>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::BeginStoryboard>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::BounceEase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::CircleEase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ColorAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ColorAnimationUsingKeyFrames>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ColorKeyFrame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ColorKeyFrameCollection>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::CommonNavigationTransitionInfo>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ConnectedAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ConnectedAnimationConfiguration>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ConnectedAnimationService>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ContentThemeTransition>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ContinuumNavigationTransitionInfo>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::CubicEase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::DirectConnectedAnimationConfiguration>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::DiscreteColorKeyFrame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::DiscreteDoubleKeyFrame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::DiscreteObjectKeyFrame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::DiscretePointKeyFrame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::DoubleAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::DoubleAnimationUsingKeyFrames>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::DoubleKeyFrame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::DoubleKeyFrameCollection>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::DragItemThemeAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::DragOverThemeAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::DrillInNavigationTransitionInfo>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::DrillInThemeAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::DrillOutThemeAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::DropTargetItemThemeAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::EasingColorKeyFrame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::EasingDoubleKeyFrame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::EasingFunctionBase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::EasingPointKeyFrame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::EdgeUIThemeTransition>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ElasticEase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::EntranceNavigationTransitionInfo>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::EntranceThemeTransition>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ExponentialEase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::FadeInThemeAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::FadeOutThemeAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::GravityConnectedAnimationConfiguration>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::KeySpline>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::KeyTimeHelper>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::LinearColorKeyFrame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::LinearDoubleKeyFrame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::LinearPointKeyFrame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::NavigationThemeTransition>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::NavigationTransitionInfo>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ObjectAnimationUsingKeyFrames>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ObjectKeyFrame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ObjectKeyFrameCollection>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::PaneThemeTransition>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::PointAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::PointAnimationUsingKeyFrames>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::PointKeyFrame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::PointKeyFrameCollection>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::PointerDownThemeAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::PointerUpThemeAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::PopInThemeAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::PopOutThemeAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::PopupThemeTransition>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::PowerEase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::QuadraticEase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::QuarticEase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::QuinticEase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ReorderThemeTransition>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::RepeatBehaviorHelper>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::RepositionThemeAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::RepositionThemeTransition>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::SineEase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::SlideNavigationTransitionInfo>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::SplineColorKeyFrame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::SplineDoubleKeyFrame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::SplinePointKeyFrame>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::SplitCloseThemeAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::SplitOpenThemeAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::Storyboard>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::SuppressNavigationTransitionInfo>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::SwipeBackThemeAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::SwipeHintThemeAnimation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::Timeline>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::TimelineCollection>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::Transition>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::TransitionCollection>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ClockState>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::ConnectedAnimationComponent>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::EasingMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::FillBehavior>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::RepeatBehaviorType>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::SlideNavigationTransitionEffect>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::KeyTime>{ using type = struct_category<winrt::Windows::Foundation::TimeSpan>; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Animation::RepeatBehavior>{ using type = struct_category<double, winrt::Windows::Foundation::TimeSpan, winrt::Microsoft::UI::Xaml::Media::Animation::RepeatBehaviorType>; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::AddDeleteThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.AddDeleteThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::BackEase> = L"Microsoft.UI.Xaml.Media.Animation.BackEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::BasicConnectedAnimationConfiguration> = L"Microsoft.UI.Xaml.Media.Animation.BasicConnectedAnimationConfiguration";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::BeginStoryboard> = L"Microsoft.UI.Xaml.Media.Animation.BeginStoryboard";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::BounceEase> = L"Microsoft.UI.Xaml.Media.Animation.BounceEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::CircleEase> = L"Microsoft.UI.Xaml.Media.Animation.CircleEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ColorAnimation> = L"Microsoft.UI.Xaml.Media.Animation.ColorAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ColorAnimationUsingKeyFrames> = L"Microsoft.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ColorKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ColorKeyFrameCollection> = L"Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::CommonNavigationTransitionInfo> = L"Microsoft.UI.Xaml.Media.Animation.CommonNavigationTransitionInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ConnectedAnimation> = L"Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ConnectedAnimationConfiguration> = L"Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ConnectedAnimationService> = L"Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ContentThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.ContentThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ContinuumNavigationTransitionInfo> = L"Microsoft.UI.Xaml.Media.Animation.ContinuumNavigationTransitionInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::CubicEase> = L"Microsoft.UI.Xaml.Media.Animation.CubicEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::DirectConnectedAnimationConfiguration> = L"Microsoft.UI.Xaml.Media.Animation.DirectConnectedAnimationConfiguration";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::DiscreteColorKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.DiscreteColorKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::DiscreteDoubleKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::DiscreteObjectKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::DiscretePointKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.DiscretePointKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::DoubleAnimation> = L"Microsoft.UI.Xaml.Media.Animation.DoubleAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::DoubleAnimationUsingKeyFrames> = L"Microsoft.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::DoubleKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::DoubleKeyFrameCollection> = L"Microsoft.UI.Xaml.Media.Animation.DoubleKeyFrameCollection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::DragItemThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.DragItemThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::DragOverThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.DragOverThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::DrillInNavigationTransitionInfo> = L"Microsoft.UI.Xaml.Media.Animation.DrillInNavigationTransitionInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::DrillInThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.DrillInThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::DrillOutThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.DrillOutThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::DropTargetItemThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::EasingColorKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.EasingColorKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::EasingDoubleKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.EasingDoubleKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::EasingFunctionBase> = L"Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::EasingPointKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.EasingPointKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::EdgeUIThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.EdgeUIThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ElasticEase> = L"Microsoft.UI.Xaml.Media.Animation.ElasticEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::EntranceNavigationTransitionInfo> = L"Microsoft.UI.Xaml.Media.Animation.EntranceNavigationTransitionInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::EntranceThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.EntranceThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ExponentialEase> = L"Microsoft.UI.Xaml.Media.Animation.ExponentialEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::FadeInThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.FadeInThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::FadeOutThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.FadeOutThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::GravityConnectedAnimationConfiguration> = L"Microsoft.UI.Xaml.Media.Animation.GravityConnectedAnimationConfiguration";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::KeySpline> = L"Microsoft.UI.Xaml.Media.Animation.KeySpline";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::KeyTimeHelper> = L"Microsoft.UI.Xaml.Media.Animation.KeyTimeHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::LinearColorKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.LinearColorKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::LinearDoubleKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.LinearDoubleKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::LinearPointKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.LinearPointKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::NavigationThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.NavigationThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::NavigationTransitionInfo> = L"Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ObjectAnimationUsingKeyFrames> = L"Microsoft.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ObjectKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ObjectKeyFrameCollection> = L"Microsoft.UI.Xaml.Media.Animation.ObjectKeyFrameCollection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::PaneThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.PaneThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::PointAnimation> = L"Microsoft.UI.Xaml.Media.Animation.PointAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::PointAnimationUsingKeyFrames> = L"Microsoft.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::PointKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.PointKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::PointKeyFrameCollection> = L"Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::PointerDownThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.PointerDownThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::PointerUpThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.PointerUpThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::PopInThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.PopInThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::PopOutThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.PopOutThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::PopupThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.PopupThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::PowerEase> = L"Microsoft.UI.Xaml.Media.Animation.PowerEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::QuadraticEase> = L"Microsoft.UI.Xaml.Media.Animation.QuadraticEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::QuarticEase> = L"Microsoft.UI.Xaml.Media.Animation.QuarticEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::QuinticEase> = L"Microsoft.UI.Xaml.Media.Animation.QuinticEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ReorderThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.ReorderThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::RepeatBehaviorHelper> = L"Microsoft.UI.Xaml.Media.Animation.RepeatBehaviorHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::RepositionThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.RepositionThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::RepositionThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.RepositionThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::SineEase> = L"Microsoft.UI.Xaml.Media.Animation.SineEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::SlideNavigationTransitionInfo> = L"Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::SplineColorKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.SplineColorKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::SplineDoubleKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.SplineDoubleKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::SplinePointKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.SplinePointKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::SplitCloseThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.SplitCloseThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::SplitOpenThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.SplitOpenThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::Storyboard> = L"Microsoft.UI.Xaml.Media.Animation.Storyboard";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::SuppressNavigationTransitionInfo> = L"Microsoft.UI.Xaml.Media.Animation.SuppressNavigationTransitionInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::SwipeBackThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.SwipeBackThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::SwipeHintThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.SwipeHintThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::Timeline> = L"Microsoft.UI.Xaml.Media.Animation.Timeline";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::TimelineCollection> = L"Microsoft.UI.Xaml.Media.Animation.TimelineCollection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::Transition> = L"Microsoft.UI.Xaml.Media.Animation.Transition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::TransitionCollection> = L"Microsoft.UI.Xaml.Media.Animation.TransitionCollection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ClockState> = L"Microsoft.UI.Xaml.Media.Animation.ClockState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ConnectedAnimationComponent> = L"Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationComponent";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::EasingMode> = L"Microsoft.UI.Xaml.Media.Animation.EasingMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::FillBehavior> = L"Microsoft.UI.Xaml.Media.Animation.FillBehavior";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::RepeatBehaviorType> = L"Microsoft.UI.Xaml.Media.Animation.RepeatBehaviorType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::SlideNavigationTransitionEffect> = L"Microsoft.UI.Xaml.Media.Animation.SlideNavigationTransitionEffect";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::KeyTime> = L"Microsoft.UI.Xaml.Media.Animation.KeyTime";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::RepeatBehavior> = L"Microsoft.UI.Xaml.Media.Animation.RepeatBehavior";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IAddDeleteThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.IAddDeleteThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IBackEase> = L"Microsoft.UI.Xaml.Media.Animation.IBackEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IBackEaseStatics> = L"Microsoft.UI.Xaml.Media.Animation.IBackEaseStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IBasicConnectedAnimationConfiguration> = L"Microsoft.UI.Xaml.Media.Animation.IBasicConnectedAnimationConfiguration";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IBasicConnectedAnimationConfigurationFactory> = L"Microsoft.UI.Xaml.Media.Animation.IBasicConnectedAnimationConfigurationFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IBeginStoryboard> = L"Microsoft.UI.Xaml.Media.Animation.IBeginStoryboard";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IBeginStoryboardStatics> = L"Microsoft.UI.Xaml.Media.Animation.IBeginStoryboardStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IBounceEase> = L"Microsoft.UI.Xaml.Media.Animation.IBounceEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IBounceEaseStatics> = L"Microsoft.UI.Xaml.Media.Animation.IBounceEaseStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ICircleEase> = L"Microsoft.UI.Xaml.Media.Animation.ICircleEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimation> = L"Microsoft.UI.Xaml.Media.Animation.IColorAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.IColorAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFrames> = L"Microsoft.UI.Xaml.Media.Animation.IColorAnimationUsingKeyFrames";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFramesStatics> = L"Microsoft.UI.Xaml.Media.Animation.IColorAnimationUsingKeyFramesStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IColorKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.IColorKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IColorKeyFrameFactory> = L"Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IColorKeyFrameStatics> = L"Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfo> = L"Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfoStatics> = L"Microsoft.UI.Xaml.Media.Animation.ICommonNavigationTransitionInfoStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimation> = L"Microsoft.UI.Xaml.Media.Animation.IConnectedAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationConfiguration> = L"Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationConfiguration";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationConfigurationFactory> = L"Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationConfigurationFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationService> = L"Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationService";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationServiceStatics> = L"Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationServiceStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IContentThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.IContentThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IContentThemeTransitionStatics> = L"Microsoft.UI.Xaml.Media.Animation.IContentThemeTransitionStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfo> = L"Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfoStatics> = L"Microsoft.UI.Xaml.Media.Animation.IContinuumNavigationTransitionInfoStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ICubicEase> = L"Microsoft.UI.Xaml.Media.Animation.ICubicEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDirectConnectedAnimationConfiguration> = L"Microsoft.UI.Xaml.Media.Animation.IDirectConnectedAnimationConfiguration";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDirectConnectedAnimationConfigurationFactory> = L"Microsoft.UI.Xaml.Media.Animation.IDirectConnectedAnimationConfigurationFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteColorKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.IDiscreteColorKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteDoubleKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.IDiscreteDoubleKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteObjectKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.IDiscreteObjectKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscretePointKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.IDiscretePointKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimation> = L"Microsoft.UI.Xaml.Media.Animation.IDoubleAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFrames> = L"Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationUsingKeyFrames";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFramesStatics> = L"Microsoft.UI.Xaml.Media.Animation.IDoubleAnimationUsingKeyFramesStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleKeyFrameFactory> = L"Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleKeyFrameStatics> = L"Microsoft.UI.Xaml.Media.Animation.IDoubleKeyFrameStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDragItemThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.IDragItemThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDragItemThemeAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.IDragItemThemeAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDragOverThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDragOverThemeAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.IDragOverThemeAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillInNavigationTransitionInfo> = L"Microsoft.UI.Xaml.Media.Animation.IDrillInNavigationTransitionInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillInThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillInThemeAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.IDrillInThemeAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillOutThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillOutThemeAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.IDrillOutThemeAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.IDropTargetItemThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.IDropTargetItemThemeAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingColorKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.IEasingColorKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingColorKeyFrameStatics> = L"Microsoft.UI.Xaml.Media.Animation.IEasingColorKeyFrameStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingDoubleKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.IEasingDoubleKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingDoubleKeyFrameStatics> = L"Microsoft.UI.Xaml.Media.Animation.IEasingDoubleKeyFrameStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBase> = L"Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBaseFactory> = L"Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBaseStatics> = L"Microsoft.UI.Xaml.Media.Animation.IEasingFunctionBaseStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingPointKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.IEasingPointKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingPointKeyFrameStatics> = L"Microsoft.UI.Xaml.Media.Animation.IEasingPointKeyFrameStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEdgeUIThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.IEdgeUIThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEdgeUIThemeTransitionStatics> = L"Microsoft.UI.Xaml.Media.Animation.IEdgeUIThemeTransitionStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IElasticEase> = L"Microsoft.UI.Xaml.Media.Animation.IElasticEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IElasticEaseStatics> = L"Microsoft.UI.Xaml.Media.Animation.IElasticEaseStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceNavigationTransitionInfo> = L"Microsoft.UI.Xaml.Media.Animation.IEntranceNavigationTransitionInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceNavigationTransitionInfoStatics> = L"Microsoft.UI.Xaml.Media.Animation.IEntranceNavigationTransitionInfoStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceThemeTransitionStatics> = L"Microsoft.UI.Xaml.Media.Animation.IEntranceThemeTransitionStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IExponentialEase> = L"Microsoft.UI.Xaml.Media.Animation.IExponentialEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IExponentialEaseStatics> = L"Microsoft.UI.Xaml.Media.Animation.IExponentialEaseStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeInThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.IFadeInThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeInThemeAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.IFadeInThemeAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeOutThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.IFadeOutThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeOutThemeAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.IFadeOutThemeAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IGravityConnectedAnimationConfiguration> = L"Microsoft.UI.Xaml.Media.Animation.IGravityConnectedAnimationConfiguration";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IGravityConnectedAnimationConfigurationFactory> = L"Microsoft.UI.Xaml.Media.Animation.IGravityConnectedAnimationConfigurationFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IKeySpline> = L"Microsoft.UI.Xaml.Media.Animation.IKeySpline";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IKeyTimeHelper> = L"Microsoft.UI.Xaml.Media.Animation.IKeyTimeHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IKeyTimeHelperStatics> = L"Microsoft.UI.Xaml.Media.Animation.IKeyTimeHelperStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ILinearColorKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.ILinearColorKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ILinearDoubleKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.ILinearDoubleKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ILinearPointKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.ILinearPointKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.INavigationThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationThemeTransitionStatics> = L"Microsoft.UI.Xaml.Media.Animation.INavigationThemeTransitionStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfo> = L"Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfoFactory> = L"Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfoOverrides> = L"Microsoft.UI.Xaml.Media.Animation.INavigationTransitionInfoOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFrames> = L"Microsoft.UI.Xaml.Media.Animation.IObjectAnimationUsingKeyFrames";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFramesStatics> = L"Microsoft.UI.Xaml.Media.Animation.IObjectAnimationUsingKeyFramesStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectKeyFrameFactory> = L"Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectKeyFrameStatics> = L"Microsoft.UI.Xaml.Media.Animation.IObjectKeyFrameStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPaneThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.IPaneThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPaneThemeTransitionStatics> = L"Microsoft.UI.Xaml.Media.Animation.IPaneThemeTransitionStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimation> = L"Microsoft.UI.Xaml.Media.Animation.IPointAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.IPointAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFrames> = L"Microsoft.UI.Xaml.Media.Animation.IPointAnimationUsingKeyFrames";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFramesStatics> = L"Microsoft.UI.Xaml.Media.Animation.IPointAnimationUsingKeyFramesStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.IPointKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointKeyFrameFactory> = L"Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointKeyFrameStatics> = L"Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerDownThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.IPointerDownThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerDownThemeAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.IPointerDownThemeAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerUpThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.IPointerUpThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerUpThemeAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.IPointerUpThemeAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPopInThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPopInThemeAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.IPopInThemeAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPopOutThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.IPopOutThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPopOutThemeAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.IPopOutThemeAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPopupThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPopupThemeTransitionStatics> = L"Microsoft.UI.Xaml.Media.Animation.IPopupThemeTransitionStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPowerEase> = L"Microsoft.UI.Xaml.Media.Animation.IPowerEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPowerEaseStatics> = L"Microsoft.UI.Xaml.Media.Animation.IPowerEaseStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IQuadraticEase> = L"Microsoft.UI.Xaml.Media.Animation.IQuadraticEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IQuarticEase> = L"Microsoft.UI.Xaml.Media.Animation.IQuarticEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IQuinticEase> = L"Microsoft.UI.Xaml.Media.Animation.IQuinticEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IReorderThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.IReorderThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IRepeatBehaviorHelper> = L"Microsoft.UI.Xaml.Media.Animation.IRepeatBehaviorHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IRepeatBehaviorHelperStatics> = L"Microsoft.UI.Xaml.Media.Animation.IRepeatBehaviorHelperStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.IRepositionThemeAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeTransition> = L"Microsoft.UI.Xaml.Media.Animation.IRepositionThemeTransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeTransitionStatics> = L"Microsoft.UI.Xaml.Media.Animation.IRepositionThemeTransitionStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISineEase> = L"Microsoft.UI.Xaml.Media.Animation.ISineEase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfo> = L"Microsoft.UI.Xaml.Media.Animation.ISlideNavigationTransitionInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfoStatics> = L"Microsoft.UI.Xaml.Media.Animation.ISlideNavigationTransitionInfoStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineColorKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.ISplineColorKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineColorKeyFrameStatics> = L"Microsoft.UI.Xaml.Media.Animation.ISplineColorKeyFrameStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineDoubleKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.ISplineDoubleKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineDoubleKeyFrameStatics> = L"Microsoft.UI.Xaml.Media.Animation.ISplineDoubleKeyFrameStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplinePointKeyFrame> = L"Microsoft.UI.Xaml.Media.Animation.ISplinePointKeyFrame";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplinePointKeyFrameStatics> = L"Microsoft.UI.Xaml.Media.Animation.ISplinePointKeyFrameStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitCloseThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitCloseThemeAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.ISplitCloseThemeAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitOpenThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitOpenThemeAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.ISplitOpenThemeAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IStoryboard> = L"Microsoft.UI.Xaml.Media.Animation.IStoryboard";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::IStoryboardStatics> = L"Microsoft.UI.Xaml.Media.Animation.IStoryboardStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISuppressNavigationTransitionInfo> = L"Microsoft.UI.Xaml.Media.Animation.ISuppressNavigationTransitionInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeBackThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeBackThemeAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.ISwipeBackThemeAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeHintThemeAnimation> = L"Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeHintThemeAnimationStatics> = L"Microsoft.UI.Xaml.Media.Animation.ISwipeHintThemeAnimationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ITimeline> = L"Microsoft.UI.Xaml.Media.Animation.ITimeline";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ITimelineFactory> = L"Microsoft.UI.Xaml.Media.Animation.ITimelineFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ITimelineStatics> = L"Microsoft.UI.Xaml.Media.Animation.ITimelineStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ITransition> = L"Microsoft.UI.Xaml.Media.Animation.ITransition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Animation::ITransitionFactory> = L"Microsoft.UI.Xaml.Media.Animation.ITransitionFactory";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IAddDeleteThemeTransition>{ 0x3728595E,0x0EA2,0x524B,{ 0x93,0x48,0x86,0xCF,0xB8,0x60,0xA0,0xFF } }; // 3728595E-0EA2-524B-9348-86CFB860A0FF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IBackEase>{ 0x1775BD43,0x1939,0x57CB,{ 0x8C,0x31,0xCD,0x75,0x90,0xEC,0x95,0x43 } }; // 1775BD43-1939-57CB-8C31-CD7590EC9543
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IBackEaseStatics>{ 0x1EAD2EF9,0x7901,0x542D,{ 0xAE,0x08,0x7B,0x59,0x37,0xB3,0x2E,0xF0 } }; // 1EAD2EF9-7901-542D-AE08-7B5937B32EF0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IBasicConnectedAnimationConfiguration>{ 0x7FF18AFE,0x91E8,0x52FA,{ 0xA1,0xC1,0x7B,0x2C,0x1A,0x14,0x01,0x18 } }; // 7FF18AFE-91E8-52FA-A1C1-7B2C1A140118
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IBasicConnectedAnimationConfigurationFactory>{ 0x2D156A02,0x0FB5,0x5AD1,{ 0xAF,0x9B,0xBC,0x9C,0x27,0x20,0xFE,0xCB } }; // 2D156A02-0FB5-5AD1-AF9B-BC9C2720FECB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IBeginStoryboard>{ 0xBB364720,0xEE5A,0x5B32,{ 0x91,0xE2,0x62,0x58,0x97,0x29,0xFD,0x3A } }; // BB364720-EE5A-5B32-91E2-62589729FD3A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IBeginStoryboardStatics>{ 0x4D5FDBEB,0x6B0E,0x5A8F,{ 0xA8,0xF0,0x01,0xF4,0x38,0xDF,0x8F,0xB2 } }; // 4D5FDBEB-6B0E-5A8F-A8F0-01F438DF8FB2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IBounceEase>{ 0xC138BFFF,0x87C8,0x5C60,{ 0xB2,0x80,0x68,0x2A,0x49,0x9C,0x58,0xC3 } }; // C138BFFF-87C8-5C60-B280-682A499C58C3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IBounceEaseStatics>{ 0xD7716B38,0xC705,0x5093,{ 0x96,0xD6,0x73,0x5C,0x13,0x10,0x5A,0x30 } }; // D7716B38-C705-5093-96D6-735C13105A30
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ICircleEase>{ 0x88209080,0x2929,0x5924,{ 0x9B,0x52,0xF9,0x51,0x96,0x56,0x87,0x13 } }; // 88209080-2929-5924-9B52-F95196568713
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimation>{ 0x6DF862D2,0x65F2,0x53A8,{ 0x8B,0x1B,0x1B,0x6C,0x17,0x63,0xC1,0x75 } }; // 6DF862D2-65F2-53A8-8B1B-1B6C1763C175
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimationStatics>{ 0x99AEBE0F,0x928E,0x52CB,{ 0x84,0x2F,0xF4,0x3F,0xE6,0x60,0xFF,0x06 } }; // 99AEBE0F-928E-52CB-842F-F43FE660FF06
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFrames>{ 0x96F28C97,0x67EB,0x5393,{ 0x8E,0x37,0xA8,0x1D,0x8F,0xDA,0x18,0xB3 } }; // 96F28C97-67EB-5393-8E37-A81D8FDA18B3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFramesStatics>{ 0x5B0F4840,0x0EF7,0x5AD7,{ 0xA8,0xF2,0xD4,0x94,0x24,0xED,0x90,0x6F } }; // 5B0F4840-0EF7-5AD7-A8F2-D49424ED906F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IColorKeyFrame>{ 0x02848C7E,0xC772,0x5F66,{ 0x84,0x2B,0xFD,0x49,0x4D,0x0D,0xA6,0x69 } }; // 02848C7E-C772-5F66-842B-FD494D0DA669
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IColorKeyFrameFactory>{ 0xA82CC182,0x9D80,0x508C,{ 0xB9,0x62,0xD7,0x42,0x25,0x58,0x72,0x00 } }; // A82CC182-9D80-508C-B962-D74225587200
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IColorKeyFrameStatics>{ 0xB62FDD68,0x15C7,0x5C6C,{ 0xA4,0xFA,0x0C,0xEE,0x10,0xE0,0x45,0x56 } }; // B62FDD68-15C7-5C6C-A4FA-0CEE10E04556
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfo>{ 0xB21CC95F,0x9E3D,0x540A,{ 0xB3,0x5A,0x17,0xB9,0x9D,0xC4,0x1B,0x1E } }; // B21CC95F-9E3D-540A-B35A-17B99DC41B1E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfoStatics>{ 0x20020BE1,0xC1BA,0x59F5,{ 0x99,0x7A,0xC0,0x4F,0x5E,0x38,0x33,0xB0 } }; // 20020BE1-C1BA-59F5-997A-C04F5E3833B0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimation>{ 0xA9C1C6AD,0x7670,0x589C,{ 0xA6,0x08,0x9B,0x5C,0x01,0xCE,0xC7,0x1F } }; // A9C1C6AD-7670-589C-A608-9B5C01CEC71F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationConfiguration>{ 0xE848379D,0x7E25,0x5976,{ 0xBF,0xB3,0x08,0x6B,0xAC,0x4E,0x88,0x49 } }; // E848379D-7E25-5976-BFB3-086BAC4E8849
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationConfigurationFactory>{ 0x71008845,0x4A12,0x5A1A,{ 0x96,0x9C,0x41,0x52,0xB5,0x17,0x49,0x22 } }; // 71008845-4A12-5A1A-969C-4152B5174922
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationService>{ 0x85F72163,0xC3C8,0x586A,{ 0x91,0xFE,0x3E,0x03,0x15,0xA3,0xA4,0xFC } }; // 85F72163-C3C8-586A-91FE-3E0315A3A4FC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationServiceStatics>{ 0xF30AD68D,0x3426,0x5564,{ 0x92,0xC6,0x28,0x8B,0x81,0x9E,0x65,0x2A } }; // F30AD68D-3426-5564-92C6-288B819E652A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IContentThemeTransition>{ 0xDFF47071,0xCC51,0x556C,{ 0xA3,0xFE,0x8B,0xBB,0x4C,0xBA,0x61,0x95 } }; // DFF47071-CC51-556C-A3FE-8BBB4CBA6195
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IContentThemeTransitionStatics>{ 0x95CDA8B1,0x6667,0x56E3,{ 0xBE,0x40,0x86,0x6E,0xEF,0x53,0x66,0x3C } }; // 95CDA8B1-6667-56E3-BE40-866EEF53663C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfo>{ 0xC55DA70F,0xFF2A,0x5FC3,{ 0x81,0xC5,0x96,0x70,0xF4,0xD7,0x87,0x52 } }; // C55DA70F-FF2A-5FC3-81C5-9670F4D78752
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfoStatics>{ 0xCA9006FD,0xF513,0x5F34,{ 0xAD,0x7F,0x49,0xF9,0xD7,0xA9,0x94,0x32 } }; // CA9006FD-F513-5F34-AD7F-49F9D7A99432
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ICubicEase>{ 0x01A218B4,0xEB7E,0x54F9,{ 0xBF,0xB6,0xC6,0xEE,0x12,0x80,0x13,0xD2 } }; // 01A218B4-EB7E-54F9-BFB6-C6EE128013D2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDirectConnectedAnimationConfiguration>{ 0x44F192EB,0xCC11,0x545E,{ 0x8F,0xA2,0x1F,0x0E,0xC9,0xC4,0x43,0x8A } }; // 44F192EB-CC11-545E-8FA2-1F0EC9C4438A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDirectConnectedAnimationConfigurationFactory>{ 0x604ABA9B,0x4EB8,0x5310,{ 0x91,0xDC,0x30,0x96,0x2E,0x25,0xAB,0x00 } }; // 604ABA9B-4EB8-5310-91DC-30962E25AB00
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteColorKeyFrame>{ 0x9B3D88A7,0x31D3,0x5912,{ 0x86,0x46,0x64,0x1A,0x8A,0x56,0x5C,0xA1 } }; // 9B3D88A7-31D3-5912-8646-641A8A565CA1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteDoubleKeyFrame>{ 0xEC16A555,0xC083,0x5A18,{ 0x80,0x5B,0xA1,0x4B,0x90,0xBC,0x80,0xE2 } }; // EC16A555-C083-5A18-805B-A14B90BC80E2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteObjectKeyFrame>{ 0x542FA813,0x6892,0x559D,{ 0x9F,0x69,0x1F,0x2A,0xC6,0x66,0xAF,0x13 } }; // 542FA813-6892-559D-9F69-1F2AC666AF13
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscretePointKeyFrame>{ 0x2255A291,0x007E,0x57CE,{ 0xAA,0x53,0x97,0xD1,0xE4,0xA0,0xD7,0xE2 } }; // 2255A291-007E-57CE-AA53-97D1E4A0D7E2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimation>{ 0x651EC97E,0xE483,0x5985,{ 0xAA,0x0B,0x49,0xCF,0xB0,0x74,0x32,0xDD } }; // 651EC97E-E483-5985-AA0B-49CFB07432DD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationStatics>{ 0x4E098387,0xADC6,0x5549,{ 0xAD,0x21,0x63,0x3E,0x4F,0xA2,0x44,0xC2 } }; // 4E098387-ADC6-5549-AD21-633E4FA244C2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFrames>{ 0x815437D5,0x63CF,0x54A5,{ 0xAE,0xA5,0x24,0xB8,0x47,0x08,0xD1,0x2D } }; // 815437D5-63CF-54A5-AEA5-24B84708D12D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFramesStatics>{ 0x4C1C9BF1,0x3A03,0x5689,{ 0xB1,0x8F,0x6C,0x44,0x25,0x1E,0x13,0xD9 } }; // 4C1C9BF1-3A03-5689-B18F-6C44251E13D9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleKeyFrame>{ 0x94C82AE6,0xCA62,0x5F52,{ 0x93,0x4C,0x3E,0x42,0x7E,0x75,0xD6,0x9A } }; // 94C82AE6-CA62-5F52-934C-3E427E75D69A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleKeyFrameFactory>{ 0x2D492CB3,0xF488,0x5D30,{ 0xB0,0x0C,0xB6,0xF2,0x54,0x7D,0x0E,0xFE } }; // 2D492CB3-F488-5D30-B00C-B6F2547D0EFE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleKeyFrameStatics>{ 0x0E56914C,0xB430,0x538F,{ 0xBB,0x66,0x0B,0x8E,0x83,0xAB,0x3D,0xB6 } }; // 0E56914C-B430-538F-BB66-0B8E83AB3DB6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDragItemThemeAnimation>{ 0x648E690E,0xA2C0,0x58CA,{ 0xB1,0x5D,0xDB,0x6F,0xCC,0xC6,0x63,0xF2 } }; // 648E690E-A2C0-58CA-B15D-DB6FCCC663F2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDragItemThemeAnimationStatics>{ 0xCDBDB41A,0xCE84,0x50A1,{ 0x8B,0x96,0x96,0x59,0x9C,0xD9,0x61,0x9D } }; // CDBDB41A-CE84-50A1-8B96-96599CD9619D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDragOverThemeAnimation>{ 0x633CD3C0,0x71AF,0x52FD,{ 0x99,0x3E,0x50,0x4E,0x3E,0x6F,0x56,0xD4 } }; // 633CD3C0-71AF-52FD-993E-504E3E6F56D4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDragOverThemeAnimationStatics>{ 0x8301AFD2,0x68B2,0x5C6C,{ 0xAA,0xDF,0x9A,0x98,0xD6,0x20,0xE8,0xD2 } }; // 8301AFD2-68B2-5C6C-AADF-9A98D620E8D2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillInNavigationTransitionInfo>{ 0x5D5863D6,0x4BBF,0x5B30,{ 0x94,0xFA,0x03,0x45,0x31,0xCF,0xA2,0xAA } }; // 5D5863D6-4BBF-5B30-94FA-034531CFA2AA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillInThemeAnimation>{ 0x097577E0,0x3027,0x5F24,{ 0xAF,0x8C,0x97,0x6D,0x9F,0xAE,0xD8,0x30 } }; // 097577E0-3027-5F24-AF8C-976D9FAED830
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillInThemeAnimationStatics>{ 0xBA24258E,0x3A8E,0x5804,{ 0x91,0x5A,0x76,0x70,0x89,0x3D,0xBE,0xA4 } }; // BA24258E-3A8E-5804-915A-7670893DBEA4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillOutThemeAnimation>{ 0x9A93B9CC,0x925F,0x525A,{ 0x9E,0xAC,0x55,0xD3,0x9D,0xB3,0xD3,0x14 } }; // 9A93B9CC-925F-525A-9EAC-55D39DB3D314
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillOutThemeAnimationStatics>{ 0x6EB9693B,0xC0D0,0x5BAE,{ 0x9C,0xD2,0x10,0xD8,0x0B,0x8D,0x38,0x67 } }; // 6EB9693B-C0D0-5BAE-9CD2-10D80B8D3867
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimation>{ 0xB97F19C0,0xF1E2,0x5705,{ 0xA2,0x52,0x2D,0xB0,0x5D,0x2E,0x5A,0x54 } }; // B97F19C0-F1E2-5705-A252-2DB05D2E5A54
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimationStatics>{ 0xA0CE9E16,0xAE12,0x55FC,{ 0xA9,0xE5,0x29,0xDC,0x94,0xA7,0x13,0xBD } }; // A0CE9E16-AE12-55FC-A9E5-29DC94A713BD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingColorKeyFrame>{ 0xA137A710,0xDA3C,0x5426,{ 0xA1,0xA2,0x3A,0x5A,0x67,0x2A,0x42,0x64 } }; // A137A710-DA3C-5426-A1A2-3A5A672A4264
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingColorKeyFrameStatics>{ 0xC57818C0,0x3361,0x587D,{ 0xB3,0x81,0x62,0x0B,0x69,0x25,0x1B,0xCF } }; // C57818C0-3361-587D-B381-620B69251BCF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingDoubleKeyFrame>{ 0x935D9B7E,0xDA61,0x5BB2,{ 0xA5,0x74,0x7D,0x2E,0x53,0xB6,0x05,0x61 } }; // 935D9B7E-DA61-5BB2-A574-7D2E53B60561
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingDoubleKeyFrameStatics>{ 0x8CC08735,0x4221,0x5127,{ 0xAB,0x2F,0x1E,0x7E,0x3D,0xF9,0x5F,0xB9 } }; // 8CC08735-4221-5127-AB2F-1E7E3DF95FB9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBase>{ 0x4FAB519A,0xA93D,0x5D28,{ 0xAF,0x18,0x84,0x53,0x2B,0xD3,0x2E,0xFE } }; // 4FAB519A-A93D-5D28-AF18-84532BD32EFE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBaseFactory>{ 0xB1B92F4C,0x5EC7,0x5CDA,{ 0xB1,0xD4,0xFD,0x15,0x95,0x95,0xCA,0x47 } }; // B1B92F4C-5EC7-5CDA-B1D4-FD159595CA47
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBaseStatics>{ 0x09032445,0x967C,0x52B8,{ 0xB7,0x12,0x15,0xF0,0x66,0xB3,0x28,0x21 } }; // 09032445-967C-52B8-B712-15F066B32821
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingPointKeyFrame>{ 0x9406EE8E,0x3641,0x54FE,{ 0xA4,0x24,0x83,0x42,0x0E,0xA4,0x5C,0xD3 } }; // 9406EE8E-3641-54FE-A424-83420EA45CD3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingPointKeyFrameStatics>{ 0xAC727659,0x92A3,0x52EA,{ 0x89,0x49,0xB6,0x09,0xE4,0x8C,0x23,0x3D } }; // AC727659-92A3-52EA-8949-B609E48C233D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEdgeUIThemeTransition>{ 0x57089964,0xE358,0x5FE2,{ 0x84,0xE7,0x15,0xE8,0x2B,0xBA,0x9C,0x06 } }; // 57089964-E358-5FE2-84E7-15E82BBA9C06
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEdgeUIThemeTransitionStatics>{ 0x316AF8D4,0xD2A0,0x5D27,{ 0x9A,0xF6,0x74,0x77,0x97,0x96,0x5D,0x46 } }; // 316AF8D4-D2A0-5D27-9AF6-747797965D46
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IElasticEase>{ 0x2B18D50B,0x4D34,0x509B,{ 0x91,0x5C,0x61,0xB1,0xAA,0x6F,0x83,0xD8 } }; // 2B18D50B-4D34-509B-915C-61B1AA6F83D8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IElasticEaseStatics>{ 0x95FD9290,0xD279,0x5857,{ 0x9F,0x50,0x3F,0x29,0x9A,0x2D,0x02,0xF4 } }; // 95FD9290-D279-5857-9F50-3F299A2D02F4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceNavigationTransitionInfo>{ 0xDEC74921,0x0ED7,0x54E1,{ 0x8C,0x1D,0x30,0xB8,0xCC,0xCC,0x4B,0x8D } }; // DEC74921-0ED7-54E1-8C1D-30B8CCCC4B8D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceNavigationTransitionInfoStatics>{ 0xF1096DE1,0x1F79,0x5D38,{ 0xA4,0xD6,0x16,0xF3,0xBD,0xAA,0xB7,0xF0 } }; // F1096DE1-1F79-5D38-A4D6-16F3BDAAB7F0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceThemeTransition>{ 0x8EB681FA,0x1629,0x5E29,{ 0xAC,0x1E,0x70,0xF3,0x63,0x93,0x29,0xF8 } }; // 8EB681FA-1629-5E29-AC1E-70F3639329F8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceThemeTransitionStatics>{ 0xC99E5435,0xFACC,0x50AF,{ 0xB9,0x6C,0x63,0xB1,0x4F,0xE7,0x15,0x6E } }; // C99E5435-FACC-50AF-B96C-63B14FE7156E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IExponentialEase>{ 0x4D289262,0xE832,0x5FBC,{ 0xA9,0x8B,0x87,0xA6,0xEC,0xB3,0xB6,0xCC } }; // 4D289262-E832-5FBC-A98B-87A6ECB3B6CC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IExponentialEaseStatics>{ 0x8394AB8F,0xDDF1,0x55D0,{ 0xAC,0xF1,0x07,0xFE,0xDD,0x92,0x9B,0xB5 } }; // 8394AB8F-DDF1-55D0-ACF1-07FEDD929BB5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeInThemeAnimation>{ 0x0DCA074A,0x31CC,0x5E70,{ 0x8B,0x6B,0x8D,0xBD,0x7F,0xFF,0x01,0xF6 } }; // 0DCA074A-31CC-5E70-8B6B-8DBD7FFF01F6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeInThemeAnimationStatics>{ 0x5D74A6A6,0x92C6,0x5E49,{ 0x86,0x5F,0x67,0x60,0x87,0x24,0x71,0x79 } }; // 5D74A6A6-92C6-5E49-865F-676087247179
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeOutThemeAnimation>{ 0x114024D6,0x5D67,0x5C9C,{ 0x83,0xC5,0x54,0xA8,0xBD,0x7B,0x67,0x1A } }; // 114024D6-5D67-5C9C-83C5-54A8BD7B671A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeOutThemeAnimationStatics>{ 0x0277BEA1,0xA0A5,0x5E26,{ 0x9B,0x56,0x6A,0x42,0x08,0x86,0x27,0x38 } }; // 0277BEA1-A0A5-5E26-9B56-6A4208862738
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IGravityConnectedAnimationConfiguration>{ 0x04C8B276,0xCFF3,0x5A55,{ 0x92,0x29,0x33,0xDC,0x66,0xC9,0x9E,0x20 } }; // 04C8B276-CFF3-5A55-9229-33DC66C99E20
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IGravityConnectedAnimationConfigurationFactory>{ 0xBC7A71B5,0x7CDA,0x5BB7,{ 0x96,0x7E,0xD6,0xA0,0x31,0x28,0x5A,0x9C } }; // BC7A71B5-7CDA-5BB7-967E-D6A031285A9C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IKeySpline>{ 0x130D8B2B,0x0B52,0x5253,{ 0x88,0x1B,0x36,0xAB,0x48,0x59,0x2E,0x6B } }; // 130D8B2B-0B52-5253-881B-36AB48592E6B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IKeyTimeHelper>{ 0xE354DA44,0x1F24,0x59C6,{ 0xBC,0x5B,0xD6,0xB1,0xBA,0x26,0x7E,0x9C } }; // E354DA44-1F24-59C6-BC5B-D6B1BA267E9C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IKeyTimeHelperStatics>{ 0xAE5D22C9,0x0FDB,0x5823,{ 0x88,0x46,0x8A,0x4D,0x0B,0x9E,0xEB,0xFA } }; // AE5D22C9-0FDB-5823-8846-8A4D0B9EEBFA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ILinearColorKeyFrame>{ 0x0BCE4CD6,0x3A80,0x5F2F,{ 0x93,0x2E,0x61,0x9A,0x85,0x46,0xD0,0xBD } }; // 0BCE4CD6-3A80-5F2F-932E-619A8546D0BD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ILinearDoubleKeyFrame>{ 0x38A635B9,0xF613,0x55E0,{ 0xAA,0xEC,0x9D,0x4E,0x09,0x7E,0xFF,0x91 } }; // 38A635B9-F613-55E0-AAEC-9D4E097EFF91
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ILinearPointKeyFrame>{ 0x4EC22493,0xBACB,0x5105,{ 0xAC,0x16,0x8E,0xA5,0x41,0x8A,0xB7,0x6E } }; // 4EC22493-BACB-5105-AC16-8EA5418AB76E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationThemeTransition>{ 0xD7CFBD3B,0x0D27,0x5EA1,{ 0xBE,0xB7,0xF6,0xB8,0x47,0x52,0x0D,0xC6 } }; // D7CFBD3B-0D27-5EA1-BEB7-F6B847520DC6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationThemeTransitionStatics>{ 0x78323EFF,0xD543,0x551D,{ 0xB2,0xC7,0x94,0xE9,0x3A,0x16,0x06,0x5B } }; // 78323EFF-D543-551D-B2C7-94E93A16065B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfo>{ 0x25BB17FB,0x6E15,0x514E,{ 0xB2,0x78,0x19,0x75,0x37,0xA4,0xD9,0x90 } }; // 25BB17FB-6E15-514E-B278-197537A4D990
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfoFactory>{ 0xC514B6FF,0xF6ED,0x572E,{ 0x83,0x92,0x3E,0xA1,0x7B,0xC7,0xD4,0xC4 } }; // C514B6FF-F6ED-572E-8392-3EA17BC7D4C4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfoOverrides>{ 0x3D6AF190,0x5A56,0x513D,{ 0xAF,0xF9,0x63,0x19,0x25,0xD0,0xFA,0x43 } }; // 3D6AF190-5A56-513D-AFF9-631925D0FA43
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFrames>{ 0xAA08DC4C,0x0B03,0x5C0A,{ 0xB0,0x84,0xD9,0x5D,0x27,0x2B,0x2F,0x0D } }; // AA08DC4C-0B03-5C0A-B084-D95D272B2F0D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFramesStatics>{ 0x411A09B0,0x9AB4,0x54B9,{ 0x99,0xB9,0x54,0xF9,0x55,0xA6,0x75,0x4E } }; // 411A09B0-9AB4-54B9-99B9-54F955A6754E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectKeyFrame>{ 0xC5A9F65B,0xFC69,0x5A88,{ 0xA7,0x97,0x34,0xF4,0x6D,0x76,0x13,0x81 } }; // C5A9F65B-FC69-5A88-A797-34F46D761381
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectKeyFrameFactory>{ 0xDC59DA6E,0x82B9,0x55F7,{ 0xA3,0x58,0xBA,0x2A,0x07,0x66,0x5A,0xA9 } }; // DC59DA6E-82B9-55F7-A358-BA2A07665AA9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectKeyFrameStatics>{ 0x39E59CEB,0x2859,0x5A5F,{ 0xAC,0xD8,0xBC,0x49,0x1D,0x49,0xC4,0xB6 } }; // 39E59CEB-2859-5A5F-ACD8-BC491D49C4B6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPaneThemeTransition>{ 0x321BCD80,0x157C,0x5E10,{ 0xB0,0xFE,0x64,0x40,0xBD,0x92,0x52,0x9A } }; // 321BCD80-157C-5E10-B0FE-6440BD92529A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPaneThemeTransitionStatics>{ 0x47E01752,0x5264,0x5FB1,{ 0x89,0x46,0xAB,0x49,0xFE,0x6A,0xF8,0xFD } }; // 47E01752-5264-5FB1-8946-AB49FE6AF8FD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimation>{ 0xA0737CC4,0x2EAB,0x5C13,{ 0xA5,0xD7,0x78,0x36,0x1D,0xF1,0x00,0x0E } }; // A0737CC4-2EAB-5C13-A5D7-78361DF1000E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimationStatics>{ 0x71CFB43B,0xBADA,0x554B,{ 0x8F,0xCA,0xB5,0x58,0xD6,0x23,0xBB,0xC0 } }; // 71CFB43B-BADA-554B-8FCA-B558D623BBC0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFrames>{ 0xBDD63992,0xDF13,0x5514,{ 0x86,0x11,0x49,0x52,0xF7,0x22,0xF6,0xD0 } }; // BDD63992-DF13-5514-8611-4952F722F6D0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFramesStatics>{ 0x04152B3B,0xF0DA,0x5B28,{ 0x87,0x7D,0x9A,0xC9,0x6D,0x33,0x4A,0x77 } }; // 04152B3B-F0DA-5B28-877D-9AC96D334A77
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointKeyFrame>{ 0x59D5C07D,0xA3A7,0x5450,{ 0x9D,0xFB,0x4B,0x7E,0x77,0xD5,0x8F,0x93 } }; // 59D5C07D-A3A7-5450-9DFB-4B7E77D58F93
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointKeyFrameFactory>{ 0xC52EE293,0xF10E,0x5252,{ 0xBC,0x08,0xA2,0x86,0x59,0x74,0x0F,0x0E } }; // C52EE293-F10E-5252-BC08-A28659740F0E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointKeyFrameStatics>{ 0x96CD72FD,0xD834,0x5B23,{ 0x9A,0x17,0x15,0x48,0x96,0x1D,0xC3,0x48 } }; // 96CD72FD-D834-5B23-9A17-1548961DC348
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerDownThemeAnimation>{ 0xABDD1ACC,0x40DF,0x595D,{ 0xBE,0x68,0x03,0x62,0xFE,0x68,0x1B,0x91 } }; // ABDD1ACC-40DF-595D-BE68-0362FE681B91
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerDownThemeAnimationStatics>{ 0x12268B39,0xFB7D,0x53DA,{ 0x8C,0xCC,0x59,0x67,0xDC,0x06,0xBC,0xE9 } }; // 12268B39-FB7D-53DA-8CCC-5967DC06BCE9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerUpThemeAnimation>{ 0x94896D1C,0xC938,0x5D68,{ 0x84,0xDA,0x55,0x2B,0xDE,0x81,0x58,0x10 } }; // 94896D1C-C938-5D68-84DA-552BDE815810
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerUpThemeAnimationStatics>{ 0x51A3117E,0xC6FA,0x5DC5,{ 0x8D,0xB8,0x73,0xF0,0x60,0x00,0x3A,0xE4 } }; // 51A3117E-C6FA-5DC5-8DB8-73F060003AE4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPopInThemeAnimation>{ 0x20136388,0xB4E4,0x5CBB,{ 0x9C,0xB2,0xDF,0x2E,0xA7,0xE6,0xC4,0x4B } }; // 20136388-B4E4-5CBB-9CB2-DF2EA7E6C44B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPopInThemeAnimationStatics>{ 0x8C9378A9,0xD276,0x5A1D,{ 0x81,0x88,0xF4,0x8F,0x07,0x84,0x0A,0x16 } }; // 8C9378A9-D276-5A1D-8188-F48F07840A16
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPopOutThemeAnimation>{ 0x1BB20DD3,0x5648,0x541A,{ 0xA0,0xC9,0x37,0xA9,0x55,0xDB,0x10,0xA6 } }; // 1BB20DD3-5648-541A-A0C9-37A955DB10A6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPopOutThemeAnimationStatics>{ 0x3F569F96,0x367E,0x595C,{ 0x97,0x32,0x2F,0xB9,0x19,0x38,0x8D,0x84 } }; // 3F569F96-367E-595C-9732-2FB919388D84
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPopupThemeTransition>{ 0xE1FA6B8A,0xADD3,0x5299,{ 0xA0,0x00,0x12,0x1D,0x6D,0xBA,0xCC,0x80 } }; // E1FA6B8A-ADD3-5299-A000-121D6DBACC80
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPopupThemeTransitionStatics>{ 0x538B2114,0x415C,0x5F99,{ 0xB7,0x4D,0xA8,0x59,0x66,0xDA,0xCC,0x54 } }; // 538B2114-415C-5F99-B74D-A85966DACC54
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPowerEase>{ 0x372DFAD0,0x5177,0x5DF9,{ 0x8E,0x1E,0x92,0x09,0x62,0x46,0x87,0x14 } }; // 372DFAD0-5177-5DF9-8E1E-920962468714
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IPowerEaseStatics>{ 0x8EB72EDB,0x3E7E,0x5D40,{ 0x92,0x8B,0x45,0x05,0xD5,0x7C,0x21,0xCE } }; // 8EB72EDB-3E7E-5D40-928B-4505D57C21CE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IQuadraticEase>{ 0xDB85FDA1,0x03B7,0x57CD,{ 0xA1,0xEF,0x88,0x55,0xCB,0xF6,0x21,0x91 } }; // DB85FDA1-03B7-57CD-A1EF-8855CBF62191
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IQuarticEase>{ 0x48215273,0x05F1,0x58AA,{ 0xBA,0xDE,0x0B,0x71,0xD7,0xBD,0x04,0x84 } }; // 48215273-05F1-58AA-BADE-0B71D7BD0484
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IQuinticEase>{ 0xDC2F05D5,0xA3AC,0x5DCE,{ 0x9B,0x85,0x75,0x3A,0x0C,0x80,0x0F,0xC2 } }; // DC2F05D5-A3AC-5DCE-9B85-753A0C800FC2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IReorderThemeTransition>{ 0x0D5A0874,0x1DF5,0x5379,{ 0xB6,0x26,0x74,0x72,0x17,0x59,0x43,0x8A } }; // 0D5A0874-1DF5-5379-B626-74721759438A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IRepeatBehaviorHelper>{ 0x4643F139,0xFFEF,0x5C6A,{ 0x8D,0xE6,0x14,0x2B,0x41,0xCD,0x51,0xA5 } }; // 4643F139-FFEF-5C6A-8DE6-142B41CD51A5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IRepeatBehaviorHelperStatics>{ 0xC66D4425,0x6461,0x5189,{ 0xB1,0x7D,0xCC,0xA0,0xCC,0xA3,0x4C,0xA0 } }; // C66D4425-6461-5189-B17D-CCA0CCA34CA0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeAnimation>{ 0x36F7E025,0x23C1,0x53DE,{ 0x8D,0xF9,0x7D,0xC1,0xE9,0xC7,0x88,0xFD } }; // 36F7E025-23C1-53DE-8DF9-7DC1E9C788FD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeAnimationStatics>{ 0xC04118DE,0xAFF5,0x5FA9,{ 0xAE,0xE7,0x94,0xA6,0x21,0xC8,0x26,0x18 } }; // C04118DE-AFF5-5FA9-AEE7-94A621C82618
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeTransition>{ 0x7728E3F0,0x24B1,0x5484,{ 0x82,0x4A,0xC0,0xB4,0x1C,0x27,0x45,0xD5 } }; // 7728E3F0-24B1-5484-824A-C0B41C2745D5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeTransitionStatics>{ 0xC70A0F9A,0x485E,0x53BB,{ 0xAD,0x3C,0x8B,0x41,0xB6,0x78,0x8B,0xF9 } }; // C70A0F9A-485E-53BB-AD3C-8B41B6788BF9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISineEase>{ 0x6115539B,0x663D,0x5131,{ 0xB7,0xC2,0x74,0xBB,0x5F,0xDC,0x6A,0x1D } }; // 6115539B-663D-5131-B7C2-74BB5FDC6A1D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfo>{ 0x53EADE0E,0x6B01,0x511F,{ 0xA5,0x63,0x6F,0x57,0x24,0xA6,0xC1,0xC1 } }; // 53EADE0E-6B01-511F-A563-6F5724A6C1C1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfoStatics>{ 0x90BA0C6C,0xCD45,0x5A6C,{ 0xBB,0xB2,0x88,0x03,0x7D,0x43,0xCD,0x79 } }; // 90BA0C6C-CD45-5A6C-BBB2-88037D43CD79
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineColorKeyFrame>{ 0x60C5905F,0x4343,0x504D,{ 0xA2,0xC6,0x64,0xB8,0xD9,0x24,0xB4,0x38 } }; // 60C5905F-4343-504D-A2C6-64B8D924B438
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineColorKeyFrameStatics>{ 0xD89C7062,0x753D,0x5652,{ 0xB2,0x15,0xC1,0x95,0xAE,0x2C,0x7A,0x18 } }; // D89C7062-753D-5652-B215-C195AE2C7A18
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineDoubleKeyFrame>{ 0xAEA80957,0xBB56,0x59B6,{ 0xBB,0x7A,0x62,0x95,0xF9,0x4B,0xC9,0x61 } }; // AEA80957-BB56-59B6-BB7A-6295F94BC961
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineDoubleKeyFrameStatics>{ 0xCA88552E,0x7237,0x51F8,{ 0xA8,0xCA,0x79,0x95,0x2C,0x77,0x88,0x3A } }; // CA88552E-7237-51F8-A8CA-79952C77883A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplinePointKeyFrame>{ 0x2B7EB049,0x708C,0x5220,{ 0xA1,0x78,0xA2,0x5D,0xBC,0x14,0xFF,0xBE } }; // 2B7EB049-708C-5220-A178-A25DBC14FFBE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplinePointKeyFrameStatics>{ 0x1E100E36,0xBED1,0x5060,{ 0x8D,0xCF,0x0D,0x5B,0x32,0x57,0x5E,0xD1 } }; // 1E100E36-BED1-5060-8DCF-0D5B32575ED1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitCloseThemeAnimation>{ 0xB0DD1490,0xF646,0x5C18,{ 0xB3,0xEF,0x02,0xF9,0xB1,0x7F,0x57,0xDF } }; // B0DD1490-F646-5C18-B3EF-02F9B17F57DF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitCloseThemeAnimationStatics>{ 0x32345CDD,0x2A3C,0x5571,{ 0xB2,0xEB,0x2F,0xCA,0xBC,0x2E,0x92,0xC6 } }; // 32345CDD-2A3C-5571-B2EB-2FCABC2E92C6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitOpenThemeAnimation>{ 0x79FDFACA,0x4245,0x53F0,{ 0xB5,0xC7,0xDA,0x1C,0xE2,0xB0,0xB8,0x51 } }; // 79FDFACA-4245-53F0-B5C7-DA1CE2B0B851
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitOpenThemeAnimationStatics>{ 0xE5A73B84,0xA4AE,0x5C38,{ 0x84,0xDA,0xF7,0xED,0x30,0xFC,0x9B,0x6E } }; // E5A73B84-A4AE-5C38-84DA-F7ED30FC9B6E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IStoryboard>{ 0x04D41BB3,0x8721,0x519E,{ 0x8E,0x53,0xFB,0x8B,0x34,0x92,0x03,0x05 } }; // 04D41BB3-8721-519E-8E53-FB8B34920305
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::IStoryboardStatics>{ 0xDD18519B,0xD4E4,0x597D,{ 0xA0,0xB7,0x65,0x5E,0xBD,0xD3,0x5E,0xFA } }; // DD18519B-D4E4-597D-A0B7-655EBDD35EFA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISuppressNavigationTransitionInfo>{ 0x3ECD2BD1,0x9805,0x5F51,{ 0xBB,0x9E,0x05,0x1F,0xEA,0x8D,0xC3,0x55 } }; // 3ECD2BD1-9805-5F51-BB9E-051FEA8DC355
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeBackThemeAnimation>{ 0xF095D058,0xBC9E,0x58EE,{ 0x88,0x77,0xE0,0x84,0x72,0x3B,0x43,0x33 } }; // F095D058-BC9E-58EE-8877-E084723B4333
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeBackThemeAnimationStatics>{ 0x18A7A588,0xB9A2,0x573B,{ 0x8E,0x2B,0x38,0x04,0x8C,0x46,0x35,0xA7 } }; // 18A7A588-B9A2-573B-8E2B-38048C4635A7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeHintThemeAnimation>{ 0x09DE03D7,0x4B8A,0x55E1,{ 0xAF,0xAD,0x5F,0x60,0x59,0x87,0x33,0xEA } }; // 09DE03D7-4B8A-55E1-AFAD-5F60598733EA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeHintThemeAnimationStatics>{ 0xF3308304,0x4F09,0x54D7,{ 0xA4,0xD5,0xCA,0x55,0x8B,0xBF,0xE2,0x6F } }; // F3308304-4F09-54D7-A4D5-CA558BBFE26F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ITimeline>{ 0xD0F9B330,0xCC2A,0x5B05,{ 0x97,0x86,0x2D,0xA4,0xC6,0x58,0x45,0x81 } }; // D0F9B330-CC2A-5B05-9786-2DA4C6584581
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ITimelineFactory>{ 0x6A635732,0xA827,0x5398,{ 0x9F,0xC8,0xDF,0xBC,0x3B,0x97,0xE3,0xC1 } }; // 6A635732-A827-5398-9FC8-DFBC3B97E3C1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ITimelineStatics>{ 0x778B8471,0xC831,0x503A,{ 0x87,0x48,0xFE,0x6B,0xBC,0x71,0x53,0xB7 } }; // 778B8471-C831-503A-8748-FE6BBC7153B7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ITransition>{ 0xE5B71956,0x8E44,0x5A38,{ 0xB4,0x1E,0x27,0x4D,0x70,0x61,0x02,0xBF } }; // E5B71956-8E44-5A38-B41E-274D706102BF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Animation::ITransitionFactory>{ 0xB7023E3B,0xBCD3,0x50EC,{ 0xAA,0xCF,0x8C,0xFC,0xEC,0xE2,0x5F,0x17 } }; // B7023E3B-BCD3-50EC-AACF-8CFCECE25F17
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::AddDeleteThemeTransition>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IAddDeleteThemeTransition; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::BackEase>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IBackEase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::BasicConnectedAnimationConfiguration>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IBasicConnectedAnimationConfiguration; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::BeginStoryboard>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IBeginStoryboard; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::BounceEase>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IBounceEase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::CircleEase>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ICircleEase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::ColorAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::ColorAnimationUsingKeyFrames>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFrames; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::ColorKeyFrame>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IColorKeyFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::ColorKeyFrameCollection>{ using type = winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Media::Animation::ColorKeyFrame>; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::CommonNavigationTransitionInfo>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfo; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::ConnectedAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::ConnectedAnimationConfiguration>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationConfiguration; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::ConnectedAnimationService>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationService; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::ContentThemeTransition>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IContentThemeTransition; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::ContinuumNavigationTransitionInfo>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfo; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::CubicEase>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ICubicEase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::DirectConnectedAnimationConfiguration>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IDirectConnectedAnimationConfiguration; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::DiscreteColorKeyFrame>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteColorKeyFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::DiscreteDoubleKeyFrame>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteDoubleKeyFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::DiscreteObjectKeyFrame>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteObjectKeyFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::DiscretePointKeyFrame>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IDiscretePointKeyFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::DoubleAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::DoubleAnimationUsingKeyFrames>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFrames; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::DoubleKeyFrame>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleKeyFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::DoubleKeyFrameCollection>{ using type = winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Media::Animation::DoubleKeyFrame>; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::DragItemThemeAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IDragItemThemeAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::DragOverThemeAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IDragOverThemeAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::DrillInNavigationTransitionInfo>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IDrillInNavigationTransitionInfo; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::DrillInThemeAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IDrillInThemeAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::DrillOutThemeAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IDrillOutThemeAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::DropTargetItemThemeAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::EasingColorKeyFrame>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IEasingColorKeyFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::EasingDoubleKeyFrame>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IEasingDoubleKeyFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::EasingFunctionBase>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::EasingPointKeyFrame>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IEasingPointKeyFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::EdgeUIThemeTransition>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IEdgeUIThemeTransition; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::ElasticEase>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IElasticEase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::EntranceNavigationTransitionInfo>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceNavigationTransitionInfo; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::EntranceThemeTransition>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceThemeTransition; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::ExponentialEase>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IExponentialEase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::FadeInThemeAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IFadeInThemeAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::FadeOutThemeAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IFadeOutThemeAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::GravityConnectedAnimationConfiguration>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IGravityConnectedAnimationConfiguration; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::KeySpline>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IKeySpline; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::KeyTimeHelper>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IKeyTimeHelper; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::LinearColorKeyFrame>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ILinearColorKeyFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::LinearDoubleKeyFrame>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ILinearDoubleKeyFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::LinearPointKeyFrame>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ILinearPointKeyFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::NavigationThemeTransition>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::INavigationThemeTransition; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::NavigationTransitionInfo>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfo; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::ObjectAnimationUsingKeyFrames>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFrames; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::ObjectKeyFrame>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IObjectKeyFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::ObjectKeyFrameCollection>{ using type = winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Media::Animation::ObjectKeyFrame>; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::PaneThemeTransition>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IPaneThemeTransition; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::PointAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::PointAnimationUsingKeyFrames>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFrames; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::PointKeyFrame>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IPointKeyFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::PointKeyFrameCollection>{ using type = winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Media::Animation::PointKeyFrame>; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::PointerDownThemeAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IPointerDownThemeAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::PointerUpThemeAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IPointerUpThemeAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::PopInThemeAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IPopInThemeAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::PopOutThemeAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IPopOutThemeAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::PopupThemeTransition>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IPopupThemeTransition; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::PowerEase>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IPowerEase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::QuadraticEase>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IQuadraticEase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::QuarticEase>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IQuarticEase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::QuinticEase>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IQuinticEase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::ReorderThemeTransition>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IReorderThemeTransition; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::RepeatBehaviorHelper>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IRepeatBehaviorHelper; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::RepositionThemeAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::RepositionThemeTransition>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeTransition; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::SineEase>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ISineEase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::SlideNavigationTransitionInfo>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfo; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::SplineColorKeyFrame>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ISplineColorKeyFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::SplineDoubleKeyFrame>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ISplineDoubleKeyFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::SplinePointKeyFrame>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ISplinePointKeyFrame; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::SplitCloseThemeAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ISplitCloseThemeAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::SplitOpenThemeAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ISplitOpenThemeAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::Storyboard>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::IStoryboard; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::SuppressNavigationTransitionInfo>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ISuppressNavigationTransitionInfo; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::SwipeBackThemeAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeBackThemeAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::SwipeHintThemeAnimation>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeHintThemeAnimation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::Timeline>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ITimeline; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::TimelineCollection>{ using type = winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Media::Animation::Timeline>; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::Transition>{ using type = winrt::Microsoft::UI::Xaml::Media::Animation::ITransition; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Animation::TransitionCollection>{ using type = winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Media::Animation::Transition>; };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IAddDeleteThemeTransition>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IBackEase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Amplitude(double*) noexcept = 0;
            virtual int32_t __stdcall put_Amplitude(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IBackEaseStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AmplitudeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IBasicConnectedAnimationConfiguration>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IBasicConnectedAnimationConfigurationFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IBeginStoryboard>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Storyboard(void**) noexcept = 0;
            virtual int32_t __stdcall put_Storyboard(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IBeginStoryboardStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_StoryboardProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IBounceEase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Bounces(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Bounces(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Bounciness(double*) noexcept = 0;
            virtual int32_t __stdcall put_Bounciness(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IBounceEaseStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_BouncesProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BouncinessProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ICircleEase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_From(void**) noexcept = 0;
            virtual int32_t __stdcall put_From(void*) noexcept = 0;
            virtual int32_t __stdcall get_To(void**) noexcept = 0;
            virtual int32_t __stdcall put_To(void*) noexcept = 0;
            virtual int32_t __stdcall get_By(void**) noexcept = 0;
            virtual int32_t __stdcall put_By(void*) noexcept = 0;
            virtual int32_t __stdcall get_EasingFunction(void**) noexcept = 0;
            virtual int32_t __stdcall put_EasingFunction(void*) noexcept = 0;
            virtual int32_t __stdcall get_EnableDependentAnimation(bool*) noexcept = 0;
            virtual int32_t __stdcall put_EnableDependentAnimation(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FromProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ToProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ByProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_EasingFunctionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_EnableDependentAnimationProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFrames>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeyFrames(void**) noexcept = 0;
            virtual int32_t __stdcall get_EnableDependentAnimation(bool*) noexcept = 0;
            virtual int32_t __stdcall put_EnableDependentAnimation(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFramesStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EnableDependentAnimationProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IColorKeyFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Value(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_Value(struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall get_KeyTime(struct struct_Microsoft_UI_Xaml_Media_Animation_KeyTime*) noexcept = 0;
            virtual int32_t __stdcall put_KeyTime(struct struct_Microsoft_UI_Xaml_Media_Animation_KeyTime) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IColorKeyFrameFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IColorKeyFrameStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_KeyTimeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfo>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsStaggeringEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsStaggeringEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfoStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsStaggeringEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsStaggerElementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsStaggerElement(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsStaggerElement(void*, bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsScaleAnimationEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsScaleAnimationEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_Configuration(void**) noexcept = 0;
            virtual int32_t __stdcall put_Configuration(void*) noexcept = 0;
            virtual int32_t __stdcall add_Completed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Completed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall TryStart(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall TryStartWithCoordinatedElements(void*, void*, bool*) noexcept = 0;
            virtual int32_t __stdcall Cancel() noexcept = 0;
            virtual int32_t __stdcall SetAnimationComponent(int32_t, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationConfiguration>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationConfigurationFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationService>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DefaultDuration(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_DefaultDuration(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_DefaultEasingFunction(void**) noexcept = 0;
            virtual int32_t __stdcall put_DefaultEasingFunction(void*) noexcept = 0;
            virtual int32_t __stdcall PrepareToAnimate(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetAnimation(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationServiceStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetForCurrentView(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IContentThemeTransition>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalOffset(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IContentThemeTransitionStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffsetProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfo>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ExitElement(void**) noexcept = 0;
            virtual int32_t __stdcall put_ExitElement(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfoStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ExitElementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsEntranceElementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsEntranceElement(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsEntranceElement(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_IsExitElementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsExitElement(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsExitElement(void*, bool) noexcept = 0;
            virtual int32_t __stdcall get_ExitElementContainerProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetExitElementContainer(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetExitElementContainer(void*, bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ICubicEase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDirectConnectedAnimationConfiguration>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDirectConnectedAnimationConfigurationFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteColorKeyFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteDoubleKeyFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteObjectKeyFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscretePointKeyFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_From(void**) noexcept = 0;
            virtual int32_t __stdcall put_From(void*) noexcept = 0;
            virtual int32_t __stdcall get_To(void**) noexcept = 0;
            virtual int32_t __stdcall put_To(void*) noexcept = 0;
            virtual int32_t __stdcall get_By(void**) noexcept = 0;
            virtual int32_t __stdcall put_By(void*) noexcept = 0;
            virtual int32_t __stdcall get_EasingFunction(void**) noexcept = 0;
            virtual int32_t __stdcall put_EasingFunction(void*) noexcept = 0;
            virtual int32_t __stdcall get_EnableDependentAnimation(bool*) noexcept = 0;
            virtual int32_t __stdcall put_EnableDependentAnimation(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FromProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ToProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ByProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_EasingFunctionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_EnableDependentAnimationProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFrames>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeyFrames(void**) noexcept = 0;
            virtual int32_t __stdcall get_EnableDependentAnimation(bool*) noexcept = 0;
            virtual int32_t __stdcall put_EnableDependentAnimation(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFramesStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EnableDependentAnimationProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleKeyFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Value(double*) noexcept = 0;
            virtual int32_t __stdcall put_Value(double) noexcept = 0;
            virtual int32_t __stdcall get_KeyTime(struct struct_Microsoft_UI_Xaml_Media_Animation_KeyTime*) noexcept = 0;
            virtual int32_t __stdcall put_KeyTime(struct struct_Microsoft_UI_Xaml_Media_Animation_KeyTime) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleKeyFrameFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleKeyFrameStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_KeyTimeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDragItemThemeAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_TargetName(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDragItemThemeAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetNameProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDragOverThemeAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_TargetName(void*) noexcept = 0;
            virtual int32_t __stdcall get_ToOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_ToOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_Direction(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Direction(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDragOverThemeAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ToOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DirectionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillInNavigationTransitionInfo>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillInThemeAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EntranceTargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_EntranceTargetName(void*) noexcept = 0;
            virtual int32_t __stdcall get_EntranceTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_EntranceTarget(void*) noexcept = 0;
            virtual int32_t __stdcall get_ExitTargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_ExitTargetName(void*) noexcept = 0;
            virtual int32_t __stdcall get_ExitTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_ExitTarget(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillInThemeAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EntranceTargetNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_EntranceTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExitTargetNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExitTargetProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillOutThemeAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EntranceTargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_EntranceTargetName(void*) noexcept = 0;
            virtual int32_t __stdcall get_EntranceTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_EntranceTarget(void*) noexcept = 0;
            virtual int32_t __stdcall get_ExitTargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_ExitTargetName(void*) noexcept = 0;
            virtual int32_t __stdcall get_ExitTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_ExitTarget(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillOutThemeAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EntranceTargetNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_EntranceTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExitTargetNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExitTargetProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_TargetName(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetNameProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingColorKeyFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EasingFunction(void**) noexcept = 0;
            virtual int32_t __stdcall put_EasingFunction(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingColorKeyFrameStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EasingFunctionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingDoubleKeyFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EasingFunction(void**) noexcept = 0;
            virtual int32_t __stdcall put_EasingFunction(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingDoubleKeyFrameStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EasingFunctionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EasingMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_EasingMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall Ease(double, double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBaseFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBaseStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EasingModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingPointKeyFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EasingFunction(void**) noexcept = 0;
            virtual int32_t __stdcall put_EasingFunction(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingPointKeyFrameStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EasingFunctionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IEdgeUIThemeTransition>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Edge(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Edge(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IEdgeUIThemeTransitionStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EdgeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IElasticEase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Oscillations(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Oscillations(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Springiness(double*) noexcept = 0;
            virtual int32_t __stdcall put_Springiness(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IElasticEaseStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OscillationsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SpringinessProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceNavigationTransitionInfo>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceNavigationTransitionInfoStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsTargetElementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsTargetElement(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsTargetElement(void*, bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceThemeTransition>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FromHorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_FromHorizontalOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_FromVerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_FromVerticalOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_IsStaggeringEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsStaggeringEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceThemeTransitionStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FromHorizontalOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FromVerticalOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsStaggeringEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IExponentialEase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Exponent(double*) noexcept = 0;
            virtual int32_t __stdcall put_Exponent(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IExponentialEaseStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ExponentProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeInThemeAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_TargetName(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeInThemeAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetNameProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeOutThemeAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_TargetName(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeOutThemeAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetNameProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IGravityConnectedAnimationConfiguration>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsShadowEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsShadowEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IGravityConnectedAnimationConfigurationFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IKeySpline>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ControlPoint1(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_ControlPoint1(winrt::Windows::Foundation::Point) noexcept = 0;
            virtual int32_t __stdcall get_ControlPoint2(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_ControlPoint2(winrt::Windows::Foundation::Point) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IKeyTimeHelper>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IKeyTimeHelperStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall FromTimeSpan(int64_t, struct struct_Microsoft_UI_Xaml_Media_Animation_KeyTime*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ILinearColorKeyFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ILinearDoubleKeyFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ILinearPointKeyFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationThemeTransition>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DefaultNavigationTransitionInfo(void**) noexcept = 0;
            virtual int32_t __stdcall put_DefaultNavigationTransitionInfo(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationThemeTransitionStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DefaultNavigationTransitionInfoProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfo>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfoFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfoOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetNavigationStateCore(void**) noexcept = 0;
            virtual int32_t __stdcall SetNavigationStateCore(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFrames>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeyFrames(void**) noexcept = 0;
            virtual int32_t __stdcall get_EnableDependentAnimation(bool*) noexcept = 0;
            virtual int32_t __stdcall put_EnableDependentAnimation(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFramesStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EnableDependentAnimationProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectKeyFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Value(void**) noexcept = 0;
            virtual int32_t __stdcall put_Value(void*) noexcept = 0;
            virtual int32_t __stdcall get_KeyTime(struct struct_Microsoft_UI_Xaml_Media_Animation_KeyTime*) noexcept = 0;
            virtual int32_t __stdcall put_KeyTime(struct struct_Microsoft_UI_Xaml_Media_Animation_KeyTime) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectKeyFrameFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectKeyFrameStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_KeyTimeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPaneThemeTransition>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Edge(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Edge(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPaneThemeTransitionStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EdgeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_From(void**) noexcept = 0;
            virtual int32_t __stdcall put_From(void*) noexcept = 0;
            virtual int32_t __stdcall get_To(void**) noexcept = 0;
            virtual int32_t __stdcall put_To(void*) noexcept = 0;
            virtual int32_t __stdcall get_By(void**) noexcept = 0;
            virtual int32_t __stdcall put_By(void*) noexcept = 0;
            virtual int32_t __stdcall get_EasingFunction(void**) noexcept = 0;
            virtual int32_t __stdcall put_EasingFunction(void*) noexcept = 0;
            virtual int32_t __stdcall get_EnableDependentAnimation(bool*) noexcept = 0;
            virtual int32_t __stdcall put_EnableDependentAnimation(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FromProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ToProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ByProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_EasingFunctionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_EnableDependentAnimationProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFrames>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeyFrames(void**) noexcept = 0;
            virtual int32_t __stdcall get_EnableDependentAnimation(bool*) noexcept = 0;
            virtual int32_t __stdcall put_EnableDependentAnimation(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFramesStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EnableDependentAnimationProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPointKeyFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Value(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_Value(winrt::Windows::Foundation::Point) noexcept = 0;
            virtual int32_t __stdcall get_KeyTime(struct struct_Microsoft_UI_Xaml_Media_Animation_KeyTime*) noexcept = 0;
            virtual int32_t __stdcall put_KeyTime(struct struct_Microsoft_UI_Xaml_Media_Animation_KeyTime) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPointKeyFrameFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPointKeyFrameStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_KeyTimeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerDownThemeAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_TargetName(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerDownThemeAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetNameProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerUpThemeAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_TargetName(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerUpThemeAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetNameProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPopInThemeAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_TargetName(void*) noexcept = 0;
            virtual int32_t __stdcall get_FromHorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_FromHorizontalOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_FromVerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_FromVerticalOffset(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPopInThemeAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FromHorizontalOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FromVerticalOffsetProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPopOutThemeAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_TargetName(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPopOutThemeAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetNameProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPopupThemeTransition>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FromHorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_FromHorizontalOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_FromVerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_FromVerticalOffset(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPopupThemeTransitionStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FromHorizontalOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FromVerticalOffsetProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPowerEase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Power(double*) noexcept = 0;
            virtual int32_t __stdcall put_Power(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IPowerEaseStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PowerProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IQuadraticEase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IQuarticEase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IQuinticEase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IReorderThemeTransition>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IRepeatBehaviorHelper>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IRepeatBehaviorHelperStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Forever(struct struct_Microsoft_UI_Xaml_Media_Animation_RepeatBehavior*) noexcept = 0;
            virtual int32_t __stdcall FromCount(double, struct struct_Microsoft_UI_Xaml_Media_Animation_RepeatBehavior*) noexcept = 0;
            virtual int32_t __stdcall FromDuration(int64_t, struct struct_Microsoft_UI_Xaml_Media_Animation_RepeatBehavior*) noexcept = 0;
            virtual int32_t __stdcall GetHasCount(struct struct_Microsoft_UI_Xaml_Media_Animation_RepeatBehavior, bool*) noexcept = 0;
            virtual int32_t __stdcall GetHasDuration(struct struct_Microsoft_UI_Xaml_Media_Animation_RepeatBehavior, bool*) noexcept = 0;
            virtual int32_t __stdcall Equals(struct struct_Microsoft_UI_Xaml_Media_Animation_RepeatBehavior, struct struct_Microsoft_UI_Xaml_Media_Animation_RepeatBehavior, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_TargetName(void*) noexcept = 0;
            virtual int32_t __stdcall get_FromHorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_FromHorizontalOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_FromVerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_FromVerticalOffset(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FromHorizontalOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FromVerticalOffsetProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeTransition>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsStaggeringEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsStaggeringEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeTransitionStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsStaggeringEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISineEase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfo>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Effect(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Effect(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfoStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_EffectProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineColorKeyFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeySpline(void**) noexcept = 0;
            virtual int32_t __stdcall put_KeySpline(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineColorKeyFrameStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeySplineProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineDoubleKeyFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeySpline(void**) noexcept = 0;
            virtual int32_t __stdcall put_KeySpline(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineDoubleKeyFrameStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeySplineProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISplinePointKeyFrame>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeySpline(void**) noexcept = 0;
            virtual int32_t __stdcall put_KeySpline(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISplinePointKeyFrameStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeySplineProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitCloseThemeAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OpenedTargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_OpenedTargetName(void*) noexcept = 0;
            virtual int32_t __stdcall get_OpenedTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_OpenedTarget(void*) noexcept = 0;
            virtual int32_t __stdcall get_ClosedTargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_ClosedTargetName(void*) noexcept = 0;
            virtual int32_t __stdcall get_ClosedTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_ClosedTarget(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTargetName(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTarget(void*) noexcept = 0;
            virtual int32_t __stdcall get_OpenedLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_OpenedLength(double) noexcept = 0;
            virtual int32_t __stdcall get_ClosedLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_ClosedLength(double) noexcept = 0;
            virtual int32_t __stdcall get_OffsetFromCenter(double*) noexcept = 0;
            virtual int32_t __stdcall put_OffsetFromCenter(double) noexcept = 0;
            virtual int32_t __stdcall get_ContentTranslationDirection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ContentTranslationDirection(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ContentTranslationOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_ContentTranslationOffset(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitCloseThemeAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OpenedTargetNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OpenedTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ClosedTargetNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ClosedTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTargetNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OpenedLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ClosedLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OffsetFromCenterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTranslationDirectionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTranslationOffsetProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitOpenThemeAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OpenedTargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_OpenedTargetName(void*) noexcept = 0;
            virtual int32_t __stdcall get_OpenedTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_OpenedTarget(void*) noexcept = 0;
            virtual int32_t __stdcall get_ClosedTargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_ClosedTargetName(void*) noexcept = 0;
            virtual int32_t __stdcall get_ClosedTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_ClosedTarget(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTargetName(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentTarget(void*) noexcept = 0;
            virtual int32_t __stdcall get_OpenedLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_OpenedLength(double) noexcept = 0;
            virtual int32_t __stdcall get_ClosedLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_ClosedLength(double) noexcept = 0;
            virtual int32_t __stdcall get_OffsetFromCenter(double*) noexcept = 0;
            virtual int32_t __stdcall put_OffsetFromCenter(double) noexcept = 0;
            virtual int32_t __stdcall get_ContentTranslationDirection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ContentTranslationDirection(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ContentTranslationOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_ContentTranslationOffset(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitOpenThemeAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OpenedTargetNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OpenedTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ClosedTargetNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ClosedTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTargetNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OpenedLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ClosedLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OffsetFromCenterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTranslationDirectionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentTranslationOffsetProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IStoryboard>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Children(void**) noexcept = 0;
            virtual int32_t __stdcall Seek(int64_t) noexcept = 0;
            virtual int32_t __stdcall Stop() noexcept = 0;
            virtual int32_t __stdcall Begin() noexcept = 0;
            virtual int32_t __stdcall Pause() noexcept = 0;
            virtual int32_t __stdcall Resume() noexcept = 0;
            virtual int32_t __stdcall GetCurrentState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetCurrentTime(int64_t*) noexcept = 0;
            virtual int32_t __stdcall SeekAlignedToLastTick(int64_t) noexcept = 0;
            virtual int32_t __stdcall SkipToFill() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::IStoryboardStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetPropertyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetTargetProperty(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetTargetProperty(void*, void*) noexcept = 0;
            virtual int32_t __stdcall get_TargetNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetTargetName(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetTargetName(void*, void*) noexcept = 0;
            virtual int32_t __stdcall SetTarget(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISuppressNavigationTransitionInfo>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeBackThemeAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_TargetName(void*) noexcept = 0;
            virtual int32_t __stdcall get_FromHorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_FromHorizontalOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_FromVerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_FromVerticalOffset(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeBackThemeAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FromHorizontalOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FromVerticalOffsetProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeHintThemeAnimation>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetName(void**) noexcept = 0;
            virtual int32_t __stdcall put_TargetName(void*) noexcept = 0;
            virtual int32_t __stdcall get_ToHorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_ToHorizontalOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_ToVerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_ToVerticalOffset(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeHintThemeAnimationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ToHorizontalOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ToVerticalOffsetProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ITimeline>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AutoReverse(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AutoReverse(bool) noexcept = 0;
            virtual int32_t __stdcall get_BeginTime(void**) noexcept = 0;
            virtual int32_t __stdcall put_BeginTime(void*) noexcept = 0;
            virtual int32_t __stdcall get_Duration(struct struct_Microsoft_UI_Xaml_Duration*) noexcept = 0;
            virtual int32_t __stdcall put_Duration(struct struct_Microsoft_UI_Xaml_Duration) noexcept = 0;
            virtual int32_t __stdcall get_SpeedRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_SpeedRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_FillBehavior(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FillBehavior(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_RepeatBehavior(struct struct_Microsoft_UI_Xaml_Media_Animation_RepeatBehavior*) noexcept = 0;
            virtual int32_t __stdcall put_RepeatBehavior(struct struct_Microsoft_UI_Xaml_Media_Animation_RepeatBehavior) noexcept = 0;
            virtual int32_t __stdcall add_Completed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Completed(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ITimelineFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ITimelineStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AllowDependentAnimations(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AllowDependentAnimations(bool) noexcept = 0;
            virtual int32_t __stdcall get_AutoReverseProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BeginTimeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DurationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SpeedRatioProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FillBehaviorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RepeatBehaviorProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ITransition>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Animation::ITransitionFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IAddDeleteThemeTransition
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IAddDeleteThemeTransition>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IAddDeleteThemeTransition<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IBackEase
    {
        [[nodiscard]] auto Amplitude() const;
        auto Amplitude(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IBackEase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IBackEase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IBackEaseStatics
    {
        [[nodiscard]] auto AmplitudeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IBackEaseStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IBackEaseStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IBasicConnectedAnimationConfiguration
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IBasicConnectedAnimationConfiguration>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IBasicConnectedAnimationConfiguration<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IBasicConnectedAnimationConfigurationFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IBasicConnectedAnimationConfigurationFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IBasicConnectedAnimationConfigurationFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IBeginStoryboard
    {
        [[nodiscard]] auto Storyboard() const;
        auto Storyboard(winrt::Microsoft::UI::Xaml::Media::Animation::Storyboard const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IBeginStoryboard>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IBeginStoryboard<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IBeginStoryboardStatics
    {
        [[nodiscard]] auto StoryboardProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IBeginStoryboardStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IBeginStoryboardStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IBounceEase
    {
        [[nodiscard]] auto Bounces() const;
        auto Bounces(int32_t value) const;
        [[nodiscard]] auto Bounciness() const;
        auto Bounciness(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IBounceEase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IBounceEase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IBounceEaseStatics
    {
        [[nodiscard]] auto BouncesProperty() const;
        [[nodiscard]] auto BouncinessProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IBounceEaseStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IBounceEaseStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ICircleEase
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ICircleEase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ICircleEase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IColorAnimation
    {
        [[nodiscard]] auto From() const;
        auto From(winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color> const& value) const;
        [[nodiscard]] auto To() const;
        auto To(winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color> const& value) const;
        [[nodiscard]] auto By() const;
        auto By(winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color> const& value) const;
        [[nodiscard]] auto EasingFunction() const;
        auto EasingFunction(winrt::Microsoft::UI::Xaml::Media::Animation::EasingFunctionBase const& value) const;
        [[nodiscard]] auto EnableDependentAnimation() const;
        auto EnableDependentAnimation(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IColorAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IColorAnimationStatics
    {
        [[nodiscard]] auto FromProperty() const;
        [[nodiscard]] auto ToProperty() const;
        [[nodiscard]] auto ByProperty() const;
        [[nodiscard]] auto EasingFunctionProperty() const;
        [[nodiscard]] auto EnableDependentAnimationProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IColorAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IColorAnimationUsingKeyFrames
    {
        [[nodiscard]] auto KeyFrames() const;
        [[nodiscard]] auto EnableDependentAnimation() const;
        auto EnableDependentAnimation(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFrames>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IColorAnimationUsingKeyFrames<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IColorAnimationUsingKeyFramesStatics
    {
        [[nodiscard]] auto EnableDependentAnimationProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFramesStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IColorAnimationUsingKeyFramesStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IColorKeyFrame
    {
        [[nodiscard]] auto Value() const;
        auto Value(winrt::Windows::UI::Color const& value) const;
        [[nodiscard]] auto KeyTime() const;
        auto KeyTime(winrt::Microsoft::UI::Xaml::Media::Animation::KeyTime const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IColorKeyFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IColorKeyFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IColorKeyFrameFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IColorKeyFrameFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IColorKeyFrameFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IColorKeyFrameStatics
    {
        [[nodiscard]] auto ValueProperty() const;
        [[nodiscard]] auto KeyTimeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IColorKeyFrameStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IColorKeyFrameStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ICommonNavigationTransitionInfo
    {
        [[nodiscard]] auto IsStaggeringEnabled() const;
        auto IsStaggeringEnabled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfo>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ICommonNavigationTransitionInfo<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ICommonNavigationTransitionInfoStatics
    {
        [[nodiscard]] auto IsStaggeringEnabledProperty() const;
        [[nodiscard]] auto IsStaggerElementProperty() const;
        auto GetIsStaggerElement(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetIsStaggerElement(winrt::Microsoft::UI::Xaml::UIElement const& element, bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ICommonNavigationTransitionInfoStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ICommonNavigationTransitionInfoStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IConnectedAnimation
    {
        [[nodiscard]] auto IsScaleAnimationEnabled() const;
        auto IsScaleAnimationEnabled(bool value) const;
        [[nodiscard]] auto Configuration() const;
        auto Configuration(winrt::Microsoft::UI::Xaml::Media::Animation::ConnectedAnimationConfiguration const& value) const;
        auto Completed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Media::Animation::ConnectedAnimation, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Completed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimation, &impl::abi_t<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimation>::remove_Completed>;
        [[nodiscard]] auto Completed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Media::Animation::ConnectedAnimation, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto Completed(winrt::event_token const& token) const noexcept;
        auto TryStart(winrt::Microsoft::UI::Xaml::UIElement const& destination) const;
        auto TryStart(winrt::Microsoft::UI::Xaml::UIElement const& destination, param::iterable<winrt::Microsoft::UI::Xaml::UIElement> const& coordinatedElements) const;
        auto Cancel() const;
        auto SetAnimationComponent(winrt::Microsoft::UI::Xaml::Media::Animation::ConnectedAnimationComponent const& component, winrt::Microsoft::UI::Composition::ICompositionAnimationBase const& animation) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IConnectedAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationConfiguration
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationConfiguration>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationConfiguration<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationConfigurationFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationConfigurationFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationConfigurationFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationService
    {
        [[nodiscard]] auto DefaultDuration() const;
        auto DefaultDuration(winrt::Windows::Foundation::TimeSpan const& value) const;
        [[nodiscard]] auto DefaultEasingFunction() const;
        auto DefaultEasingFunction(winrt::Microsoft::UI::Composition::CompositionEasingFunction const& value) const;
        auto PrepareToAnimate(param::hstring const& key, winrt::Microsoft::UI::Xaml::UIElement const& source) const;
        auto GetAnimation(param::hstring const& key) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationService>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationService<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationServiceStatics
    {
        auto GetForCurrentView() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IConnectedAnimationServiceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IConnectedAnimationServiceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IContentThemeTransition
    {
        [[nodiscard]] auto HorizontalOffset() const;
        auto HorizontalOffset(double value) const;
        [[nodiscard]] auto VerticalOffset() const;
        auto VerticalOffset(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IContentThemeTransition>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IContentThemeTransition<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IContentThemeTransitionStatics
    {
        [[nodiscard]] auto HorizontalOffsetProperty() const;
        [[nodiscard]] auto VerticalOffsetProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IContentThemeTransitionStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IContentThemeTransitionStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfo
    {
        [[nodiscard]] auto ExitElement() const;
        auto ExitElement(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfo>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfo<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfoStatics
    {
        [[nodiscard]] auto ExitElementProperty() const;
        [[nodiscard]] auto IsEntranceElementProperty() const;
        auto GetIsEntranceElement(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetIsEntranceElement(winrt::Microsoft::UI::Xaml::UIElement const& element, bool value) const;
        [[nodiscard]] auto IsExitElementProperty() const;
        auto GetIsExitElement(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetIsExitElement(winrt::Microsoft::UI::Xaml::UIElement const& element, bool value) const;
        [[nodiscard]] auto ExitElementContainerProperty() const;
        auto GetExitElementContainer(winrt::Microsoft::UI::Xaml::Controls::ListViewBase const& element) const;
        auto SetExitElementContainer(winrt::Microsoft::UI::Xaml::Controls::ListViewBase const& element, bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IContinuumNavigationTransitionInfoStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IContinuumNavigationTransitionInfoStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ICubicEase
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ICubicEase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ICubicEase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDirectConnectedAnimationConfiguration
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDirectConnectedAnimationConfiguration>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDirectConnectedAnimationConfiguration<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDirectConnectedAnimationConfigurationFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDirectConnectedAnimationConfigurationFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDirectConnectedAnimationConfigurationFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDiscreteColorKeyFrame
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteColorKeyFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDiscreteColorKeyFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDiscreteDoubleKeyFrame
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteDoubleKeyFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDiscreteDoubleKeyFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDiscreteObjectKeyFrame
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscreteObjectKeyFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDiscreteObjectKeyFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDiscretePointKeyFrame
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDiscretePointKeyFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDiscretePointKeyFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDoubleAnimation
    {
        [[nodiscard]] auto From() const;
        auto From(winrt::Windows::Foundation::IReference<double> const& value) const;
        [[nodiscard]] auto To() const;
        auto To(winrt::Windows::Foundation::IReference<double> const& value) const;
        [[nodiscard]] auto By() const;
        auto By(winrt::Windows::Foundation::IReference<double> const& value) const;
        [[nodiscard]] auto EasingFunction() const;
        auto EasingFunction(winrt::Microsoft::UI::Xaml::Media::Animation::EasingFunctionBase const& value) const;
        [[nodiscard]] auto EnableDependentAnimation() const;
        auto EnableDependentAnimation(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDoubleAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationStatics
    {
        [[nodiscard]] auto FromProperty() const;
        [[nodiscard]] auto ToProperty() const;
        [[nodiscard]] auto ByProperty() const;
        [[nodiscard]] auto EasingFunctionProperty() const;
        [[nodiscard]] auto EnableDependentAnimationProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationUsingKeyFrames
    {
        [[nodiscard]] auto KeyFrames() const;
        [[nodiscard]] auto EnableDependentAnimation() const;
        auto EnableDependentAnimation(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFrames>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationUsingKeyFrames<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationUsingKeyFramesStatics
    {
        [[nodiscard]] auto EnableDependentAnimationProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFramesStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDoubleAnimationUsingKeyFramesStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrame
    {
        [[nodiscard]] auto Value() const;
        auto Value(double value) const;
        [[nodiscard]] auto KeyTime() const;
        auto KeyTime(winrt::Microsoft::UI::Xaml::Media::Animation::KeyTime const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleKeyFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrameFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleKeyFrameFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrameFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrameStatics
    {
        [[nodiscard]] auto ValueProperty() const;
        [[nodiscard]] auto KeyTimeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDoubleKeyFrameStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDoubleKeyFrameStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDragItemThemeAnimation
    {
        [[nodiscard]] auto TargetName() const;
        auto TargetName(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDragItemThemeAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDragItemThemeAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDragItemThemeAnimationStatics
    {
        [[nodiscard]] auto TargetNameProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDragItemThemeAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDragItemThemeAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimation
    {
        [[nodiscard]] auto TargetName() const;
        auto TargetName(param::hstring const& value) const;
        [[nodiscard]] auto ToOffset() const;
        auto ToOffset(double value) const;
        [[nodiscard]] auto Direction() const;
        auto Direction(winrt::Microsoft::UI::Xaml::Controls::Primitives::AnimationDirection const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDragOverThemeAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimationStatics
    {
        [[nodiscard]] auto TargetNameProperty() const;
        [[nodiscard]] auto ToOffsetProperty() const;
        [[nodiscard]] auto DirectionProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDragOverThemeAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDragOverThemeAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDrillInNavigationTransitionInfo
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillInNavigationTransitionInfo>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDrillInNavigationTransitionInfo<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimation
    {
        [[nodiscard]] auto EntranceTargetName() const;
        auto EntranceTargetName(param::hstring const& value) const;
        [[nodiscard]] auto EntranceTarget() const;
        auto EntranceTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto ExitTargetName() const;
        auto ExitTargetName(param::hstring const& value) const;
        [[nodiscard]] auto ExitTarget() const;
        auto ExitTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillInThemeAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimationStatics
    {
        [[nodiscard]] auto EntranceTargetNameProperty() const;
        [[nodiscard]] auto EntranceTargetProperty() const;
        [[nodiscard]] auto ExitTargetNameProperty() const;
        [[nodiscard]] auto ExitTargetProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillInThemeAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDrillInThemeAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimation
    {
        [[nodiscard]] auto EntranceTargetName() const;
        auto EntranceTargetName(param::hstring const& value) const;
        [[nodiscard]] auto EntranceTarget() const;
        auto EntranceTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto ExitTargetName() const;
        auto ExitTargetName(param::hstring const& value) const;
        [[nodiscard]] auto ExitTarget() const;
        auto ExitTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillOutThemeAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimationStatics
    {
        [[nodiscard]] auto EntranceTargetNameProperty() const;
        [[nodiscard]] auto EntranceTargetProperty() const;
        [[nodiscard]] auto ExitTargetNameProperty() const;
        [[nodiscard]] auto ExitTargetProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDrillOutThemeAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDrillOutThemeAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDropTargetItemThemeAnimation
    {
        [[nodiscard]] auto TargetName() const;
        auto TargetName(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDropTargetItemThemeAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IDropTargetItemThemeAnimationStatics
    {
        [[nodiscard]] auto TargetNameProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IDropTargetItemThemeAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IEasingColorKeyFrame
    {
        [[nodiscard]] auto EasingFunction() const;
        auto EasingFunction(winrt::Microsoft::UI::Xaml::Media::Animation::EasingFunctionBase const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingColorKeyFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IEasingColorKeyFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IEasingColorKeyFrameStatics
    {
        [[nodiscard]] auto EasingFunctionProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingColorKeyFrameStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IEasingColorKeyFrameStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IEasingDoubleKeyFrame
    {
        [[nodiscard]] auto EasingFunction() const;
        auto EasingFunction(winrt::Microsoft::UI::Xaml::Media::Animation::EasingFunctionBase const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingDoubleKeyFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IEasingDoubleKeyFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IEasingDoubleKeyFrameStatics
    {
        [[nodiscard]] auto EasingFunctionProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingDoubleKeyFrameStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IEasingDoubleKeyFrameStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBase
    {
        [[nodiscard]] auto EasingMode() const;
        auto EasingMode(winrt::Microsoft::UI::Xaml::Media::Animation::EasingMode const& value) const;
        auto Ease(double normalizedTime) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBaseFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBaseFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBaseFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBaseStatics
    {
        [[nodiscard]] auto EasingModeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingFunctionBaseStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IEasingFunctionBaseStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IEasingPointKeyFrame
    {
        [[nodiscard]] auto EasingFunction() const;
        auto EasingFunction(winrt::Microsoft::UI::Xaml::Media::Animation::EasingFunctionBase const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingPointKeyFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IEasingPointKeyFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IEasingPointKeyFrameStatics
    {
        [[nodiscard]] auto EasingFunctionProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IEasingPointKeyFrameStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IEasingPointKeyFrameStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IEdgeUIThemeTransition
    {
        [[nodiscard]] auto Edge() const;
        auto Edge(winrt::Microsoft::UI::Xaml::Controls::Primitives::EdgeTransitionLocation const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IEdgeUIThemeTransition>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IEdgeUIThemeTransition<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IEdgeUIThemeTransitionStatics
    {
        [[nodiscard]] auto EdgeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IEdgeUIThemeTransitionStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IEdgeUIThemeTransitionStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IElasticEase
    {
        [[nodiscard]] auto Oscillations() const;
        auto Oscillations(int32_t value) const;
        [[nodiscard]] auto Springiness() const;
        auto Springiness(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IElasticEase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IElasticEase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IElasticEaseStatics
    {
        [[nodiscard]] auto OscillationsProperty() const;
        [[nodiscard]] auto SpringinessProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IElasticEaseStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IElasticEaseStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IEntranceNavigationTransitionInfo
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceNavigationTransitionInfo>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IEntranceNavigationTransitionInfo<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IEntranceNavigationTransitionInfoStatics
    {
        [[nodiscard]] auto IsTargetElementProperty() const;
        auto GetIsTargetElement(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto SetIsTargetElement(winrt::Microsoft::UI::Xaml::UIElement const& element, bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceNavigationTransitionInfoStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IEntranceNavigationTransitionInfoStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransition
    {
        [[nodiscard]] auto FromHorizontalOffset() const;
        auto FromHorizontalOffset(double value) const;
        [[nodiscard]] auto FromVerticalOffset() const;
        auto FromVerticalOffset(double value) const;
        [[nodiscard]] auto IsStaggeringEnabled() const;
        auto IsStaggeringEnabled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceThemeTransition>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransition<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransitionStatics
    {
        [[nodiscard]] auto FromHorizontalOffsetProperty() const;
        [[nodiscard]] auto FromVerticalOffsetProperty() const;
        [[nodiscard]] auto IsStaggeringEnabledProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IEntranceThemeTransitionStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IEntranceThemeTransitionStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IExponentialEase
    {
        [[nodiscard]] auto Exponent() const;
        auto Exponent(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IExponentialEase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IExponentialEase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IExponentialEaseStatics
    {
        [[nodiscard]] auto ExponentProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IExponentialEaseStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IExponentialEaseStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IFadeInThemeAnimation
    {
        [[nodiscard]] auto TargetName() const;
        auto TargetName(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeInThemeAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IFadeInThemeAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IFadeInThemeAnimationStatics
    {
        [[nodiscard]] auto TargetNameProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeInThemeAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IFadeInThemeAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IFadeOutThemeAnimation
    {
        [[nodiscard]] auto TargetName() const;
        auto TargetName(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeOutThemeAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IFadeOutThemeAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IFadeOutThemeAnimationStatics
    {
        [[nodiscard]] auto TargetNameProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IFadeOutThemeAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IFadeOutThemeAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfiguration
    {
        [[nodiscard]] auto IsShadowEnabled() const;
        auto IsShadowEnabled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IGravityConnectedAnimationConfiguration>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfiguration<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfigurationFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IGravityConnectedAnimationConfigurationFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IGravityConnectedAnimationConfigurationFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IKeySpline
    {
        [[nodiscard]] auto ControlPoint1() const;
        auto ControlPoint1(winrt::Windows::Foundation::Point const& value) const;
        [[nodiscard]] auto ControlPoint2() const;
        auto ControlPoint2(winrt::Windows::Foundation::Point const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IKeySpline>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IKeySpline<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IKeyTimeHelper
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IKeyTimeHelper>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IKeyTimeHelper<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IKeyTimeHelperStatics
    {
        auto FromTimeSpan(winrt::Windows::Foundation::TimeSpan const& timeSpan) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IKeyTimeHelperStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IKeyTimeHelperStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ILinearColorKeyFrame
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ILinearColorKeyFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ILinearColorKeyFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ILinearDoubleKeyFrame
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ILinearDoubleKeyFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ILinearDoubleKeyFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ILinearPointKeyFrame
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ILinearPointKeyFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ILinearPointKeyFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_INavigationThemeTransition
    {
        [[nodiscard]] auto DefaultNavigationTransitionInfo() const;
        auto DefaultNavigationTransitionInfo(winrt::Microsoft::UI::Xaml::Media::Animation::NavigationTransitionInfo const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationThemeTransition>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_INavigationThemeTransition<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_INavigationThemeTransitionStatics
    {
        [[nodiscard]] auto DefaultNavigationTransitionInfoProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationThemeTransitionStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_INavigationThemeTransitionStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfo
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfo>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfo<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfoFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoOverrides
    {
        auto GetNavigationStateCore() const;
        auto SetNavigationStateCore(param::hstring const& navigationState) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::INavigationTransitionInfoOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_INavigationTransitionInfoOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IObjectAnimationUsingKeyFrames
    {
        [[nodiscard]] auto KeyFrames() const;
        [[nodiscard]] auto EnableDependentAnimation() const;
        auto EnableDependentAnimation(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFrames>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IObjectAnimationUsingKeyFrames<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IObjectAnimationUsingKeyFramesStatics
    {
        [[nodiscard]] auto EnableDependentAnimationProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFramesStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IObjectAnimationUsingKeyFramesStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrame
    {
        [[nodiscard]] auto Value() const;
        auto Value(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] auto KeyTime() const;
        auto KeyTime(winrt::Microsoft::UI::Xaml::Media::Animation::KeyTime const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectKeyFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrameFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectKeyFrameFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrameFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrameStatics
    {
        [[nodiscard]] auto ValueProperty() const;
        [[nodiscard]] auto KeyTimeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IObjectKeyFrameStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IObjectKeyFrameStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPaneThemeTransition
    {
        [[nodiscard]] auto Edge() const;
        auto Edge(winrt::Microsoft::UI::Xaml::Controls::Primitives::EdgeTransitionLocation const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPaneThemeTransition>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPaneThemeTransition<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPaneThemeTransitionStatics
    {
        [[nodiscard]] auto EdgeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPaneThemeTransitionStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPaneThemeTransitionStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPointAnimation
    {
        [[nodiscard]] auto From() const;
        auto From(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Point> const& value) const;
        [[nodiscard]] auto To() const;
        auto To(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Point> const& value) const;
        [[nodiscard]] auto By() const;
        auto By(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Point> const& value) const;
        [[nodiscard]] auto EasingFunction() const;
        auto EasingFunction(winrt::Microsoft::UI::Xaml::Media::Animation::EasingFunctionBase const& value) const;
        [[nodiscard]] auto EnableDependentAnimation() const;
        auto EnableDependentAnimation(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPointAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPointAnimationStatics
    {
        [[nodiscard]] auto FromProperty() const;
        [[nodiscard]] auto ToProperty() const;
        [[nodiscard]] auto ByProperty() const;
        [[nodiscard]] auto EasingFunctionProperty() const;
        [[nodiscard]] auto EnableDependentAnimationProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPointAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPointAnimationUsingKeyFrames
    {
        [[nodiscard]] auto KeyFrames() const;
        [[nodiscard]] auto EnableDependentAnimation() const;
        auto EnableDependentAnimation(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFrames>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPointAnimationUsingKeyFrames<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPointAnimationUsingKeyFramesStatics
    {
        [[nodiscard]] auto EnableDependentAnimationProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFramesStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPointAnimationUsingKeyFramesStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPointKeyFrame
    {
        [[nodiscard]] auto Value() const;
        auto Value(winrt::Windows::Foundation::Point const& value) const;
        [[nodiscard]] auto KeyTime() const;
        auto KeyTime(winrt::Microsoft::UI::Xaml::Media::Animation::KeyTime const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPointKeyFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPointKeyFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPointKeyFrameFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPointKeyFrameFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPointKeyFrameFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPointKeyFrameStatics
    {
        [[nodiscard]] auto ValueProperty() const;
        [[nodiscard]] auto KeyTimeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPointKeyFrameStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPointKeyFrameStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPointerDownThemeAnimation
    {
        [[nodiscard]] auto TargetName() const;
        auto TargetName(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerDownThemeAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPointerDownThemeAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPointerDownThemeAnimationStatics
    {
        [[nodiscard]] auto TargetNameProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerDownThemeAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPointerDownThemeAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPointerUpThemeAnimation
    {
        [[nodiscard]] auto TargetName() const;
        auto TargetName(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerUpThemeAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPointerUpThemeAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPointerUpThemeAnimationStatics
    {
        [[nodiscard]] auto TargetNameProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPointerUpThemeAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPointerUpThemeAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimation
    {
        [[nodiscard]] auto TargetName() const;
        auto TargetName(param::hstring const& value) const;
        [[nodiscard]] auto FromHorizontalOffset() const;
        auto FromHorizontalOffset(double value) const;
        [[nodiscard]] auto FromVerticalOffset() const;
        auto FromVerticalOffset(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPopInThemeAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimationStatics
    {
        [[nodiscard]] auto TargetNameProperty() const;
        [[nodiscard]] auto FromHorizontalOffsetProperty() const;
        [[nodiscard]] auto FromVerticalOffsetProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPopInThemeAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPopInThemeAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPopOutThemeAnimation
    {
        [[nodiscard]] auto TargetName() const;
        auto TargetName(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPopOutThemeAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPopOutThemeAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPopOutThemeAnimationStatics
    {
        [[nodiscard]] auto TargetNameProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPopOutThemeAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPopOutThemeAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPopupThemeTransition
    {
        [[nodiscard]] auto FromHorizontalOffset() const;
        auto FromHorizontalOffset(double value) const;
        [[nodiscard]] auto FromVerticalOffset() const;
        auto FromVerticalOffset(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPopupThemeTransition>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPopupThemeTransition<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPopupThemeTransitionStatics
    {
        [[nodiscard]] auto FromHorizontalOffsetProperty() const;
        [[nodiscard]] auto FromVerticalOffsetProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPopupThemeTransitionStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPopupThemeTransitionStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPowerEase
    {
        [[nodiscard]] auto Power() const;
        auto Power(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPowerEase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPowerEase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IPowerEaseStatics
    {
        [[nodiscard]] auto PowerProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IPowerEaseStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IPowerEaseStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IQuadraticEase
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IQuadraticEase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IQuadraticEase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IQuarticEase
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IQuarticEase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IQuarticEase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IQuinticEase
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IQuinticEase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IQuinticEase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IReorderThemeTransition
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IReorderThemeTransition>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IReorderThemeTransition<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IRepeatBehaviorHelper
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IRepeatBehaviorHelper>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IRepeatBehaviorHelper<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IRepeatBehaviorHelperStatics
    {
        [[nodiscard]] auto Forever() const;
        auto FromCount(double count) const;
        auto FromDuration(winrt::Windows::Foundation::TimeSpan const& duration) const;
        auto GetHasCount(winrt::Microsoft::UI::Xaml::Media::Animation::RepeatBehavior const& target) const;
        auto GetHasDuration(winrt::Microsoft::UI::Xaml::Media::Animation::RepeatBehavior const& target) const;
        auto Equals(winrt::Microsoft::UI::Xaml::Media::Animation::RepeatBehavior const& target, winrt::Microsoft::UI::Xaml::Media::Animation::RepeatBehavior const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IRepeatBehaviorHelperStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IRepeatBehaviorHelperStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimation
    {
        [[nodiscard]] auto TargetName() const;
        auto TargetName(param::hstring const& value) const;
        [[nodiscard]] auto FromHorizontalOffset() const;
        auto FromHorizontalOffset(double value) const;
        [[nodiscard]] auto FromVerticalOffset() const;
        auto FromVerticalOffset(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimationStatics
    {
        [[nodiscard]] auto TargetNameProperty() const;
        [[nodiscard]] auto FromHorizontalOffsetProperty() const;
        [[nodiscard]] auto FromVerticalOffsetProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IRepositionThemeAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IRepositionThemeTransition
    {
        [[nodiscard]] auto IsStaggeringEnabled() const;
        auto IsStaggeringEnabled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeTransition>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IRepositionThemeTransition<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IRepositionThemeTransitionStatics
    {
        [[nodiscard]] auto IsStaggeringEnabledProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IRepositionThemeTransitionStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IRepositionThemeTransitionStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISineEase
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISineEase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISineEase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISlideNavigationTransitionInfo
    {
        [[nodiscard]] auto Effect() const;
        auto Effect(winrt::Microsoft::UI::Xaml::Media::Animation::SlideNavigationTransitionEffect const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfo>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISlideNavigationTransitionInfo<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISlideNavigationTransitionInfoStatics
    {
        [[nodiscard]] auto EffectProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISlideNavigationTransitionInfoStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISlideNavigationTransitionInfoStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISplineColorKeyFrame
    {
        [[nodiscard]] auto KeySpline() const;
        auto KeySpline(winrt::Microsoft::UI::Xaml::Media::Animation::KeySpline const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineColorKeyFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISplineColorKeyFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISplineColorKeyFrameStatics
    {
        [[nodiscard]] auto KeySplineProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineColorKeyFrameStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISplineColorKeyFrameStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISplineDoubleKeyFrame
    {
        [[nodiscard]] auto KeySpline() const;
        auto KeySpline(winrt::Microsoft::UI::Xaml::Media::Animation::KeySpline const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineDoubleKeyFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISplineDoubleKeyFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISplineDoubleKeyFrameStatics
    {
        [[nodiscard]] auto KeySplineProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISplineDoubleKeyFrameStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISplineDoubleKeyFrameStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISplinePointKeyFrame
    {
        [[nodiscard]] auto KeySpline() const;
        auto KeySpline(winrt::Microsoft::UI::Xaml::Media::Animation::KeySpline const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISplinePointKeyFrame>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISplinePointKeyFrame<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISplinePointKeyFrameStatics
    {
        [[nodiscard]] auto KeySplineProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISplinePointKeyFrameStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISplinePointKeyFrameStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation
    {
        [[nodiscard]] auto OpenedTargetName() const;
        auto OpenedTargetName(param::hstring const& value) const;
        [[nodiscard]] auto OpenedTarget() const;
        auto OpenedTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto ClosedTargetName() const;
        auto ClosedTargetName(param::hstring const& value) const;
        [[nodiscard]] auto ClosedTarget() const;
        auto ClosedTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto ContentTargetName() const;
        auto ContentTargetName(param::hstring const& value) const;
        [[nodiscard]] auto ContentTarget() const;
        auto ContentTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto OpenedLength() const;
        auto OpenedLength(double value) const;
        [[nodiscard]] auto ClosedLength() const;
        auto ClosedLength(double value) const;
        [[nodiscard]] auto OffsetFromCenter() const;
        auto OffsetFromCenter(double value) const;
        [[nodiscard]] auto ContentTranslationDirection() const;
        auto ContentTranslationDirection(winrt::Microsoft::UI::Xaml::Controls::Primitives::AnimationDirection const& value) const;
        [[nodiscard]] auto ContentTranslationOffset() const;
        auto ContentTranslationOffset(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitCloseThemeAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimationStatics
    {
        [[nodiscard]] auto OpenedTargetNameProperty() const;
        [[nodiscard]] auto OpenedTargetProperty() const;
        [[nodiscard]] auto ClosedTargetNameProperty() const;
        [[nodiscard]] auto ClosedTargetProperty() const;
        [[nodiscard]] auto ContentTargetNameProperty() const;
        [[nodiscard]] auto ContentTargetProperty() const;
        [[nodiscard]] auto OpenedLengthProperty() const;
        [[nodiscard]] auto ClosedLengthProperty() const;
        [[nodiscard]] auto OffsetFromCenterProperty() const;
        [[nodiscard]] auto ContentTranslationDirectionProperty() const;
        [[nodiscard]] auto ContentTranslationOffsetProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitCloseThemeAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISplitCloseThemeAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation
    {
        [[nodiscard]] auto OpenedTargetName() const;
        auto OpenedTargetName(param::hstring const& value) const;
        [[nodiscard]] auto OpenedTarget() const;
        auto OpenedTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto ClosedTargetName() const;
        auto ClosedTargetName(param::hstring const& value) const;
        [[nodiscard]] auto ClosedTarget() const;
        auto ClosedTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto ContentTargetName() const;
        auto ContentTargetName(param::hstring const& value) const;
        [[nodiscard]] auto ContentTarget() const;
        auto ContentTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] auto OpenedLength() const;
        auto OpenedLength(double value) const;
        [[nodiscard]] auto ClosedLength() const;
        auto ClosedLength(double value) const;
        [[nodiscard]] auto OffsetFromCenter() const;
        auto OffsetFromCenter(double value) const;
        [[nodiscard]] auto ContentTranslationDirection() const;
        auto ContentTranslationDirection(winrt::Microsoft::UI::Xaml::Controls::Primitives::AnimationDirection const& value) const;
        [[nodiscard]] auto ContentTranslationOffset() const;
        auto ContentTranslationOffset(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitOpenThemeAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimationStatics
    {
        [[nodiscard]] auto OpenedTargetNameProperty() const;
        [[nodiscard]] auto OpenedTargetProperty() const;
        [[nodiscard]] auto ClosedTargetNameProperty() const;
        [[nodiscard]] auto ClosedTargetProperty() const;
        [[nodiscard]] auto ContentTargetNameProperty() const;
        [[nodiscard]] auto ContentTargetProperty() const;
        [[nodiscard]] auto OpenedLengthProperty() const;
        [[nodiscard]] auto ClosedLengthProperty() const;
        [[nodiscard]] auto OffsetFromCenterProperty() const;
        [[nodiscard]] auto ContentTranslationDirectionProperty() const;
        [[nodiscard]] auto ContentTranslationOffsetProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISplitOpenThemeAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISplitOpenThemeAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IStoryboard
    {
        [[nodiscard]] auto Children() const;
        auto Seek(winrt::Windows::Foundation::TimeSpan const& offset) const;
        auto Stop() const;
        auto Begin() const;
        auto Pause() const;
        auto Resume() const;
        auto GetCurrentState() const;
        auto GetCurrentTime() const;
        auto SeekAlignedToLastTick(winrt::Windows::Foundation::TimeSpan const& offset) const;
        auto SkipToFill() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IStoryboard>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IStoryboard<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_IStoryboardStatics
    {
        [[nodiscard]] auto TargetPropertyProperty() const;
        auto GetTargetProperty(winrt::Microsoft::UI::Xaml::Media::Animation::Timeline const& element) const;
        auto SetTargetProperty(winrt::Microsoft::UI::Xaml::Media::Animation::Timeline const& element, param::hstring const& path) const;
        [[nodiscard]] auto TargetNameProperty() const;
        auto GetTargetName(winrt::Microsoft::UI::Xaml::Media::Animation::Timeline const& element) const;
        auto SetTargetName(winrt::Microsoft::UI::Xaml::Media::Animation::Timeline const& element, param::hstring const& name) const;
        auto SetTarget(winrt::Microsoft::UI::Xaml::Media::Animation::Timeline const& timeline, winrt::Microsoft::UI::Xaml::DependencyObject const& target) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::IStoryboardStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_IStoryboardStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISuppressNavigationTransitionInfo
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISuppressNavigationTransitionInfo>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISuppressNavigationTransitionInfo<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimation
    {
        [[nodiscard]] auto TargetName() const;
        auto TargetName(param::hstring const& value) const;
        [[nodiscard]] auto FromHorizontalOffset() const;
        auto FromHorizontalOffset(double value) const;
        [[nodiscard]] auto FromVerticalOffset() const;
        auto FromVerticalOffset(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeBackThemeAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimationStatics
    {
        [[nodiscard]] auto TargetNameProperty() const;
        [[nodiscard]] auto FromHorizontalOffsetProperty() const;
        [[nodiscard]] auto FromVerticalOffsetProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeBackThemeAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISwipeBackThemeAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimation
    {
        [[nodiscard]] auto TargetName() const;
        auto TargetName(param::hstring const& value) const;
        [[nodiscard]] auto ToHorizontalOffset() const;
        auto ToHorizontalOffset(double value) const;
        [[nodiscard]] auto ToVerticalOffset() const;
        auto ToVerticalOffset(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeHintThemeAnimation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimationStatics
    {
        [[nodiscard]] auto TargetNameProperty() const;
        [[nodiscard]] auto ToHorizontalOffsetProperty() const;
        [[nodiscard]] auto ToVerticalOffsetProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ISwipeHintThemeAnimationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ISwipeHintThemeAnimationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ITimeline
    {
        [[nodiscard]] auto AutoReverse() const;
        auto AutoReverse(bool value) const;
        [[nodiscard]] auto BeginTime() const;
        auto BeginTime(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const& value) const;
        [[nodiscard]] auto Duration() const;
        auto Duration(winrt::Microsoft::UI::Xaml::Duration const& value) const;
        [[nodiscard]] auto SpeedRatio() const;
        auto SpeedRatio(double value) const;
        [[nodiscard]] auto FillBehavior() const;
        auto FillBehavior(winrt::Microsoft::UI::Xaml::Media::Animation::FillBehavior const& value) const;
        [[nodiscard]] auto RepeatBehavior() const;
        auto RepeatBehavior(winrt::Microsoft::UI::Xaml::Media::Animation::RepeatBehavior const& value) const;
        auto Completed(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Completed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Media::Animation::ITimeline, &impl::abi_t<winrt::Microsoft::UI::Xaml::Media::Animation::ITimeline>::remove_Completed>;
        [[nodiscard]] auto Completed(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto Completed(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ITimeline>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ITimeline<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ITimelineFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ITimelineFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ITimelineFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ITimelineStatics
    {
        [[nodiscard]] auto AllowDependentAnimations() const;
        auto AllowDependentAnimations(bool value) const;
        [[nodiscard]] auto AutoReverseProperty() const;
        [[nodiscard]] auto BeginTimeProperty() const;
        [[nodiscard]] auto DurationProperty() const;
        [[nodiscard]] auto SpeedRatioProperty() const;
        [[nodiscard]] auto FillBehaviorProperty() const;
        [[nodiscard]] auto RepeatBehaviorProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ITimelineStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ITimelineStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ITransition
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ITransition>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ITransition<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Animation_ITransitionFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Animation::ITransitionFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Animation_ITransitionFactory<D>;
    };
    struct struct_Microsoft_UI_Xaml_Media_Animation_KeyTime
    {
        int64_t TimeSpan;
    };
    template <> struct abi<Microsoft::UI::Xaml::Media::Animation::KeyTime>
    {
        using type = struct_Microsoft_UI_Xaml_Media_Animation_KeyTime;
    };
    struct struct_Microsoft_UI_Xaml_Media_Animation_RepeatBehavior
    {
        double Count;
        int64_t Duration;
        int32_t Type;
    };
    template <> struct abi<Microsoft::UI::Xaml::Media::Animation::RepeatBehavior>
    {
        using type = struct_Microsoft_UI_Xaml_Media_Animation_RepeatBehavior;
    };
}
#endif
