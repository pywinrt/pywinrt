// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#ifndef WINRT_Microsoft_UI_Dispatching_1_H
#define WINRT_Microsoft_UI_Dispatching_1_H
#include "winrt/impl/Microsoft.UI.Dispatching.0.h"
WINRT_EXPORT namespace winrt::Microsoft::UI::Dispatching
{
    struct WINRT_IMPL_EMPTY_BASES IDispatcherExitDeferral :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDispatcherExitDeferral>
    {
        IDispatcherExitDeferral(std::nullptr_t = nullptr) noexcept {}
        IDispatcherExitDeferral(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IDispatcherQueue :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDispatcherQueue>
    {
        IDispatcherQueue(std::nullptr_t = nullptr) noexcept {}
        IDispatcherQueue(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IDispatcherQueue2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDispatcherQueue2>
    {
        IDispatcherQueue2(std::nullptr_t = nullptr) noexcept {}
        IDispatcherQueue2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IDispatcherQueue3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDispatcherQueue3>
    {
        IDispatcherQueue3(std::nullptr_t = nullptr) noexcept {}
        IDispatcherQueue3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IDispatcherQueueController :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDispatcherQueueController>
    {
        IDispatcherQueueController(std::nullptr_t = nullptr) noexcept {}
        IDispatcherQueueController(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IDispatcherQueueController2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDispatcherQueueController2>
    {
        IDispatcherQueueController2(std::nullptr_t = nullptr) noexcept {}
        IDispatcherQueueController2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IDispatcherQueueControllerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDispatcherQueueControllerStatics>
    {
        IDispatcherQueueControllerStatics(std::nullptr_t = nullptr) noexcept {}
        IDispatcherQueueControllerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IDispatcherQueueShutdownStartingEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDispatcherQueueShutdownStartingEventArgs>
    {
        IDispatcherQueueShutdownStartingEventArgs(std::nullptr_t = nullptr) noexcept {}
        IDispatcherQueueShutdownStartingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IDispatcherQueueStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDispatcherQueueStatics>
    {
        IDispatcherQueueStatics(std::nullptr_t = nullptr) noexcept {}
        IDispatcherQueueStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IDispatcherQueueTimer :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDispatcherQueueTimer>
    {
        IDispatcherQueueTimer(std::nullptr_t = nullptr) noexcept {}
        IDispatcherQueueTimer(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
}
#endif
