// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_UI_Composition_Experimental_1_H
#define WINRT_Microsoft_UI_Composition_Experimental_1_H
#include "winrt/impl/Microsoft.UI.Composition.Experimental.0.h"
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition::Experimental
{
    struct WINRT_IMPL_EMPTY_BASES IExpCompositionPropertyChanged :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IExpCompositionPropertyChanged>
    {
        IExpCompositionPropertyChanged(std::nullptr_t = nullptr) noexcept {}
        IExpCompositionPropertyChanged(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IExpCompositionPropertyChangedListener :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IExpCompositionPropertyChangedListener>
    {
        IExpCompositionPropertyChangedListener(std::nullptr_t = nullptr) noexcept {}
        IExpCompositionPropertyChangedListener(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IExpCompositionVisualSurfaceStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IExpCompositionVisualSurfaceStatics>
    {
        IExpCompositionVisualSurfaceStatics(std::nullptr_t = nullptr) noexcept {}
        IExpCompositionVisualSurfaceStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IExpCompositor :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IExpCompositor>
    {
        IExpCompositor(std::nullptr_t = nullptr) noexcept {}
        IExpCompositor(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IExpVisual :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IExpVisual>
    {
        IExpVisual(std::nullptr_t = nullptr) noexcept {}
        IExpVisual(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
}
#endif
