// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_UI_Composition_Experimental_0_H
#define WINRT_Microsoft_UI_Composition_Experimental_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition
{
    struct CompositionObject;
    struct CompositionVisualSurface;
    struct Compositor;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Numerics
{
}
WINRT_EXPORT namespace winrt::Windows::Graphics
{
    struct SizeInt32;
}
WINRT_EXPORT namespace winrt::Windows::UI
{
    struct Color;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition::Experimental
{
    enum class ExpExpressionNotificationProperty : int32_t
    {
        Undefined = 0,
        Clip = 1,
        Offset = 2,
        Opacity = 3,
        Size = 4,
        RelativeOffset = 5,
        RelativeSize = 6,
        AnchorPoint = 7,
        CenterPoint = 8,
        Orientation = 9,
        RotationAngle = 10,
        RotationAxis = 11,
        Scale = 12,
        TransformMatrix = 13,
        BottomInset = 14,
        LeftInset = 15,
        RightInset = 16,
        TopInset = 17,
        LeftRadiusX = 18,
        LeftRadiusY = 19,
        BottomRightRadiusX = 20,
        BottomRightRadiusY = 21,
        TopLeftRadiusX = 22,
        TopLeftRadiusY = 23,
        TopRightRadiusX = 24,
        TopRightRadiusY = 25,
    };
    struct IExpCompositionPropertyChanged;
    struct IExpCompositionPropertyChangedListener;
    struct IExpCompositionVisualSurfaceStatics;
    struct IExpCompositor;
    struct IExpVisual;
    struct ExpCompositionVisualSurface;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpCompositor>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpVisual>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionVisualSurface>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionVisualSurface> = L"Microsoft.UI.Composition.Experimental.ExpCompositionVisualSurface";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty> = L"Microsoft.UI.Composition.Experimental.ExpExpressionNotificationProperty";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged> = L"Microsoft.UI.Composition.Experimental.IExpCompositionPropertyChanged";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener> = L"Microsoft.UI.Composition.Experimental.IExpCompositionPropertyChangedListener";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics> = L"Microsoft.UI.Composition.Experimental.IExpCompositionVisualSurfaceStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositor> = L"Microsoft.UI.Composition.Experimental.IExpCompositor";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpVisual> = L"Microsoft.UI.Composition.Experimental.IExpVisual";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged>{ 0x12B579A9,0x6A27,0x5CDE,{ 0xA2,0xA1,0xC5,0x57,0xBB,0x7D,0xFD,0xB3 } }; // 12B579A9-6A27-5CDE-A2A1-C557BB7DFDB3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>{ 0x5F9C3D96,0x1E77,0x5980,{ 0x8B,0x28,0x7A,0x9B,0x86,0x14,0xA8,0x63 } }; // 5F9C3D96-1E77-5980-8B28-7A9B8614A863
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics>{ 0x46193461,0x9018,0x5674,{ 0xA0,0x9C,0x4A,0xE6,0xA2,0x9D,0xAA,0x35 } }; // 46193461-9018-5674-A09C-4AE6A29DAA35
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositor>{ 0xDDFE7441,0x66C9,0x5654,{ 0x9E,0x80,0xFF,0x26,0x77,0x29,0x59,0x95 } }; // DDFE7441-66C9-5654-9E80-FF2677295995
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpVisual>{ 0x8FACCF79,0x665B,0x578F,{ 0x81,0x97,0xF8,0xA6,0x4F,0x88,0x33,0xD6 } }; // 8FACCF79-665B-578F-8197-F8A64F8833D6
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall SetPropertyChangedListener(int32_t, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall NotifyBooleanPropertyChanged(void*, int32_t, bool) noexcept = 0;
            virtual int32_t __stdcall NotifyColorPropertyChanged(void*, int32_t, struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall NotifyMatrix3x2PropertyChanged(void*, int32_t, winrt::Windows::Foundation::Numerics::float3x2) noexcept = 0;
            virtual int32_t __stdcall NotifyMatrix4x4PropertyChanged(void*, int32_t, winrt::Windows::Foundation::Numerics::float4x4) noexcept = 0;
            virtual int32_t __stdcall NotifyReferencePropertyChanged(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall NotifySinglePropertyChanged(void*, int32_t, float) noexcept = 0;
            virtual int32_t __stdcall NotifyVector2PropertyChanged(void*, int32_t, winrt::Windows::Foundation::Numerics::float2) noexcept = 0;
            virtual int32_t __stdcall NotifyVector3PropertyChanged(void*, int32_t, winrt::Windows::Foundation::Numerics::float3) noexcept = 0;
            virtual int32_t __stdcall NotifyVector4PropertyChanged(void*, int32_t, winrt::Windows::Foundation::Numerics::float4) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateVisualSurfaceWithRealizationSize(void*, struct struct_Windows_Graphics_SizeInt32, bool, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpCompositor>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall OpenSharedManipulationTransformFromHandle(uint64_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpVisual>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall SetInteraction(void*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChanged
    {
        auto SetPropertyChangedListener(winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener const& listener) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChanged<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener
    {
        auto NotifyBooleanPropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, bool value) const;
        auto NotifyColorPropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::UI::Color const& value) const;
        auto NotifyMatrix3x2PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float3x2 const& value) const;
        auto NotifyMatrix4x4PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float4x4 const& value) const;
        auto NotifyReferencePropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property) const;
        auto NotifySinglePropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, float value) const;
        auto NotifyVector2PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float2 const& value) const;
        auto NotifyVector3PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float3 const& value) const;
        auto NotifyVector4PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float4 const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpCompositionVisualSurfaceStatics
    {
        auto CreateVisualSurface(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Windows::Graphics::SizeInt32 const& realizationSize, bool frozen) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpCompositionVisualSurfaceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpCompositor
    {
        auto OpenSharedManipulationTransformFromHandle(uint64_t handle) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpCompositor>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpCompositor<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpVisual
    {
        auto SetInteraction(winrt::Windows::Foundation::IInspectable const& interaction) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpVisual>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpVisual<D>;
    };
}
#endif
