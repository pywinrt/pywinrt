// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#ifndef WINRT_Microsoft_UI_Composition_Interactions_0_H
#define WINRT_Microsoft_UI_Composition_Interactions_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition
{
    struct CompositionAnimation;
    struct Compositor;
    struct ExpressionAnimation;
    struct IVisualElement;
    struct ScalarNaturalMotionAnimation;
    struct Vector2NaturalMotionAnimation;
    struct Visual;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Input
{
    struct PointerPoint;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IReference;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IIterable;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Numerics
{
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition::Interactions
{
    enum class InteractionBindingAxisModes : uint32_t
    {
        None = 0,
        PositionX = 0x1,
        PositionY = 0x2,
        Scale = 0x4,
    };
    enum class InteractionChainingMode : int32_t
    {
        Auto = 0,
        Always = 1,
        Never = 2,
    };
    enum class InteractionSourceMode : int32_t
    {
        Disabled = 0,
        EnabledWithInertia = 1,
        EnabledWithoutInertia = 2,
    };
    enum class InteractionSourceRedirectionMode : int32_t
    {
        Disabled = 0,
        Enabled = 1,
    };
    enum class InteractionTrackerClampingOption : int32_t
    {
        Auto = 0,
        Disabled = 1,
    };
    enum class InteractionTrackerPositionUpdateOption : int32_t
    {
        Default = 0,
        AllowActiveCustomScaleAnimation = 1,
    };
    enum class VisualInteractionSourceRedirectionMode : int32_t
    {
        Off = 0,
        CapableTouchpadOnly = 1,
        PointerWheelOnly = 2,
        CapableTouchpadAndPointerWheel = 3,
    };
    struct ICompositionConditionalValue;
    struct ICompositionConditionalValueStatics;
    struct ICompositionInteractionSource;
    struct ICompositionInteractionSourceCollection;
    struct IInteractionSourceConfiguration;
    struct IInteractionTracker;
    struct IInteractionTracker2;
    struct IInteractionTracker3;
    struct IInteractionTracker4;
    struct IInteractionTracker5;
    struct IInteractionTrackerCustomAnimationStateEnteredArgs;
    struct IInteractionTrackerCustomAnimationStateEnteredArgs2;
    struct IInteractionTrackerIdleStateEnteredArgs;
    struct IInteractionTrackerIdleStateEnteredArgs2;
    struct IInteractionTrackerInertiaModifier;
    struct IInteractionTrackerInertiaModifierFactory;
    struct IInteractionTrackerInertiaMotion;
    struct IInteractionTrackerInertiaMotionStatics;
    struct IInteractionTrackerInertiaNaturalMotion;
    struct IInteractionTrackerInertiaNaturalMotionStatics;
    struct IInteractionTrackerInertiaRestingValue;
    struct IInteractionTrackerInertiaRestingValueStatics;
    struct IInteractionTrackerInertiaStateEnteredArgs;
    struct IInteractionTrackerInertiaStateEnteredArgs2;
    struct IInteractionTrackerInertiaStateEnteredArgs3;
    struct IInteractionTrackerInteractingStateEnteredArgs;
    struct IInteractionTrackerInteractingStateEnteredArgs2;
    struct IInteractionTrackerOwner;
    struct IInteractionTrackerRequestIgnoredArgs;
    struct IInteractionTrackerStatics;
    struct IInteractionTrackerStatics2;
    struct IInteractionTrackerValuesChangedArgs;
    struct IInteractionTrackerVector2InertiaModifier;
    struct IInteractionTrackerVector2InertiaModifierFactory;
    struct IInteractionTrackerVector2InertiaNaturalMotion;
    struct IInteractionTrackerVector2InertiaNaturalMotionStatics;
    struct IVisualInteractionSource;
    struct IVisualInteractionSource2;
    struct IVisualInteractionSource3;
    struct IVisualInteractionSourceObjectFactory;
    struct IVisualInteractionSourceStatics;
    struct IVisualInteractionSourceStatics2;
    struct CompositionConditionalValue;
    struct CompositionInteractionSourceCollection;
    struct InteractionSourceConfiguration;
    struct InteractionTracker;
    struct InteractionTrackerCustomAnimationStateEnteredArgs;
    struct InteractionTrackerIdleStateEnteredArgs;
    struct InteractionTrackerInertiaModifier;
    struct InteractionTrackerInertiaMotion;
    struct InteractionTrackerInertiaNaturalMotion;
    struct InteractionTrackerInertiaRestingValue;
    struct InteractionTrackerInertiaStateEnteredArgs;
    struct InteractionTrackerInteractingStateEnteredArgs;
    struct InteractionTrackerRequestIgnoredArgs;
    struct InteractionTrackerValuesChangedArgs;
    struct InteractionTrackerVector2InertiaModifier;
    struct InteractionTrackerVector2InertiaNaturalMotion;
    struct VisualInteractionSource;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::ICompositionConditionalValue>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::ICompositionConditionalValueStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::ICompositionInteractionSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::ICompositionInteractionSourceCollection>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionSourceConfiguration>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker3>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker4>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker5>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerCustomAnimationStateEnteredArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerCustomAnimationStateEnteredArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerIdleStateEnteredArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerIdleStateEnteredArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaModifier>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaModifierFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaMotion>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaMotionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaNaturalMotion>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaNaturalMotionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaRestingValue>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaRestingValueStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaStateEnteredArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaStateEnteredArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaStateEnteredArgs3>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInteractingStateEnteredArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInteractingStateEnteredArgs2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerOwner>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerRequestIgnoredArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerValuesChangedArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaModifier>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaModifierFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaNaturalMotion>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaNaturalMotionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSource2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSource3>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSourceObjectFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSourceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSourceStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::CompositionConditionalValue>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::CompositionInteractionSourceCollection>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionSourceConfiguration>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionTracker>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerCustomAnimationStateEnteredArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerIdleStateEnteredArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaModifier>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaMotion>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaNaturalMotion>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaRestingValue>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaStateEnteredArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInteractingStateEnteredArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerRequestIgnoredArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerValuesChangedArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerVector2InertiaModifier>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerVector2InertiaNaturalMotion>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::VisualInteractionSource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionBindingAxisModes>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionChainingMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionSourceMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionSourceRedirectionMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerClampingOption>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerPositionUpdateOption>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Interactions::VisualInteractionSourceRedirectionMode>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::CompositionConditionalValue> = L"Microsoft.UI.Composition.Interactions.CompositionConditionalValue";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::CompositionInteractionSourceCollection> = L"Microsoft.UI.Composition.Interactions.CompositionInteractionSourceCollection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionSourceConfiguration> = L"Microsoft.UI.Composition.Interactions.InteractionSourceConfiguration";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionTracker> = L"Microsoft.UI.Composition.Interactions.InteractionTracker";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerCustomAnimationStateEnteredArgs> = L"Microsoft.UI.Composition.Interactions.InteractionTrackerCustomAnimationStateEnteredArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerIdleStateEnteredArgs> = L"Microsoft.UI.Composition.Interactions.InteractionTrackerIdleStateEnteredArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaModifier> = L"Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaModifier";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaMotion> = L"Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaMotion";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaNaturalMotion> = L"Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaNaturalMotion";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaRestingValue> = L"Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaStateEnteredArgs> = L"Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaStateEnteredArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInteractingStateEnteredArgs> = L"Microsoft.UI.Composition.Interactions.InteractionTrackerInteractingStateEnteredArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerRequestIgnoredArgs> = L"Microsoft.UI.Composition.Interactions.InteractionTrackerRequestIgnoredArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerValuesChangedArgs> = L"Microsoft.UI.Composition.Interactions.InteractionTrackerValuesChangedArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerVector2InertiaModifier> = L"Microsoft.UI.Composition.Interactions.InteractionTrackerVector2InertiaModifier";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerVector2InertiaNaturalMotion> = L"Microsoft.UI.Composition.Interactions.InteractionTrackerVector2InertiaNaturalMotion";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::VisualInteractionSource> = L"Microsoft.UI.Composition.Interactions.VisualInteractionSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionBindingAxisModes> = L"Microsoft.UI.Composition.Interactions.InteractionBindingAxisModes";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionChainingMode> = L"Microsoft.UI.Composition.Interactions.InteractionChainingMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionSourceMode> = L"Microsoft.UI.Composition.Interactions.InteractionSourceMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionSourceRedirectionMode> = L"Microsoft.UI.Composition.Interactions.InteractionSourceRedirectionMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerClampingOption> = L"Microsoft.UI.Composition.Interactions.InteractionTrackerClampingOption";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerPositionUpdateOption> = L"Microsoft.UI.Composition.Interactions.InteractionTrackerPositionUpdateOption";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::VisualInteractionSourceRedirectionMode> = L"Microsoft.UI.Composition.Interactions.VisualInteractionSourceRedirectionMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::ICompositionConditionalValue> = L"Microsoft.UI.Composition.Interactions.ICompositionConditionalValue";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::ICompositionConditionalValueStatics> = L"Microsoft.UI.Composition.Interactions.ICompositionConditionalValueStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::ICompositionInteractionSource> = L"Microsoft.UI.Composition.Interactions.ICompositionInteractionSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::ICompositionInteractionSourceCollection> = L"Microsoft.UI.Composition.Interactions.ICompositionInteractionSourceCollection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionSourceConfiguration> = L"Microsoft.UI.Composition.Interactions.IInteractionSourceConfiguration";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker> = L"Microsoft.UI.Composition.Interactions.IInteractionTracker";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker2> = L"Microsoft.UI.Composition.Interactions.IInteractionTracker2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker3> = L"Microsoft.UI.Composition.Interactions.IInteractionTracker3";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker4> = L"Microsoft.UI.Composition.Interactions.IInteractionTracker4";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker5> = L"Microsoft.UI.Composition.Interactions.IInteractionTracker5";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerCustomAnimationStateEnteredArgs> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerCustomAnimationStateEnteredArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerCustomAnimationStateEnteredArgs2> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerCustomAnimationStateEnteredArgs2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerIdleStateEnteredArgs> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerIdleStateEnteredArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerIdleStateEnteredArgs2> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerIdleStateEnteredArgs2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaModifier> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaModifier";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaModifierFactory> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaModifierFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaMotion> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaMotion";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaMotionStatics> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaMotionStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaNaturalMotion> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaNaturalMotion";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaNaturalMotionStatics> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaNaturalMotionStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaRestingValue> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaRestingValue";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaRestingValueStatics> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaRestingValueStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaStateEnteredArgs> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaStateEnteredArgs2> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaStateEnteredArgs3> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs3";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInteractingStateEnteredArgs> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerInteractingStateEnteredArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInteractingStateEnteredArgs2> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerInteractingStateEnteredArgs2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerOwner> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerOwner";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerRequestIgnoredArgs> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerRequestIgnoredArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerStatics> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerStatics2> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerValuesChangedArgs> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerValuesChangedArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaModifier> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaModifier";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaModifierFactory> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaModifierFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaNaturalMotion> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaNaturalMotion";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaNaturalMotionStatics> = L"Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaNaturalMotionStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSource> = L"Microsoft.UI.Composition.Interactions.IVisualInteractionSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSource2> = L"Microsoft.UI.Composition.Interactions.IVisualInteractionSource2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSource3> = L"Microsoft.UI.Composition.Interactions.IVisualInteractionSource3";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSourceObjectFactory> = L"Microsoft.UI.Composition.Interactions.IVisualInteractionSourceObjectFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSourceStatics> = L"Microsoft.UI.Composition.Interactions.IVisualInteractionSourceStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSourceStatics2> = L"Microsoft.UI.Composition.Interactions.IVisualInteractionSourceStatics2";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::ICompositionConditionalValue>{ 0x3743DDA0,0xFBE2,0x5ECF,{ 0x9E,0x80,0x46,0x38,0xA0,0x11,0xF7,0x07 } }; // 3743DDA0-FBE2-5ECF-9E80-4638A011F707
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::ICompositionConditionalValueStatics>{ 0xDF133C1F,0xA185,0x536C,{ 0xB5,0x4B,0x8F,0x36,0x92,0x12,0xA5,0x81 } }; // DF133C1F-A185-536C-B54B-8F369212A581
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::ICompositionInteractionSource>{ 0x711C72C0,0xC406,0x4A12,{ 0x85,0x9B,0xB4,0x4F,0x65,0x1A,0xF0,0x46 } }; // 711C72C0-C406-4A12-859B-B44F651AF046
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::ICompositionInteractionSourceCollection>{ 0x9AA1B86B,0xB002,0x5E2E,{ 0xBB,0x2B,0x0E,0x2C,0x54,0x74,0x45,0xE1 } }; // 9AA1B86B-B002-5E2E-BB2B-0E2C547445E1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionSourceConfiguration>{ 0x099E0124,0xDADF,0x5BC6,{ 0xA8,0x95,0x90,0x38,0x76,0x57,0x55,0x0F } }; // 099E0124-DADF-5BC6-A895-90387657550F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker>{ 0x02D8EC1F,0x8F04,0x505E,{ 0xBD,0x1E,0x47,0xB2,0xA2,0x04,0xDE,0x51 } }; // 02D8EC1F-8F04-505E-BD1E-47B2A204DE51
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker2>{ 0x396D7FB1,0x2FAD,0x5508,{ 0x85,0x91,0x4F,0xF0,0xDC,0x5A,0x74,0x84 } }; // 396D7FB1-2FAD-5508-8591-4FF0DC5A7484
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker3>{ 0x239752CF,0x266C,0x5ACB,{ 0xAC,0xC3,0xB3,0xE3,0xEC,0xAF,0x4D,0x3F } }; // 239752CF-266C-5ACB-ACC3-B3E3ECAF4D3F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker4>{ 0xA9A9CE02,0x53C9,0x5690,{ 0xA5,0x75,0xF3,0x40,0xB7,0xC2,0xFD,0xF2 } }; // A9A9CE02-53C9-5690-A575-F340B7C2FDF2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker5>{ 0xDBFCD333,0xC3BF,0x5057,{ 0xA4,0x5E,0x25,0xED,0xF0,0x6E,0xBD,0x8F } }; // DBFCD333-C3BF-5057-A45E-25EDF06EBD8F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerCustomAnimationStateEnteredArgs>{ 0x7464035C,0xCFCE,0x56DA,{ 0x94,0x72,0x42,0x0F,0x27,0x6B,0xD0,0xA5 } }; // 7464035C-CFCE-56DA-9472-420F276BD0A5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerCustomAnimationStateEnteredArgs2>{ 0x06B99FBC,0xD6A8,0x5AE3,{ 0x88,0xB8,0xE9,0x16,0x21,0xBE,0xCB,0xD6 } }; // 06B99FBC-D6A8-5AE3-88B8-E91621BECBD6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerIdleStateEnteredArgs>{ 0x199094AB,0x15FD,0x539C,{ 0x97,0xB8,0x96,0x4A,0x81,0x96,0xF7,0x77 } }; // 199094AB-15FD-539C-97B8-964A8196F777
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerIdleStateEnteredArgs2>{ 0x4EB213C0,0x931C,0x5164,{ 0x89,0x65,0x11,0xC0,0x18,0x6D,0x33,0x90 } }; // 4EB213C0-931C-5164-8965-11C0186D3390
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaModifier>{ 0x4D3A0C6B,0xC508,0x5029,{ 0xA4,0x7A,0xCB,0xF6,0x46,0x36,0xF0,0x10 } }; // 4D3A0C6B-C508-5029-A47A-CBF64636F010
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaModifierFactory>{ 0x6DEE5B33,0x0B5A,0x57B1,{ 0x85,0x37,0x93,0xD4,0xFD,0x03,0x8F,0x9F } }; // 6DEE5B33-0B5A-57B1-8537-93D4FD038F9F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaMotion>{ 0x91F662C0,0x3141,0x5B5E,{ 0x86,0x2F,0xCF,0xC6,0x0B,0xEE,0x8C,0xD6 } }; // 91F662C0-3141-5B5E-862F-CFC60BEE8CD6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaMotionStatics>{ 0xB0185A4F,0x0059,0x52C6,{ 0xA6,0x60,0x9A,0xED,0x0C,0x44,0xFF,0x7D } }; // B0185A4F-0059-52C6-A660-9AED0C44FF7D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaNaturalMotion>{ 0x8C7482E0,0x185D,0x56B1,{ 0xB6,0x7F,0xFC,0xA4,0xFC,0xD1,0x3C,0xD2 } }; // 8C7482E0-185D-56B1-B67F-FCA4FCD13CD2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaNaturalMotionStatics>{ 0x860EC143,0xF165,0x5298,{ 0xAB,0xF2,0x47,0x36,0x9D,0xD0,0x7F,0x10 } }; // 860EC143-F165-5298-ABF2-47369DD07F10
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaRestingValue>{ 0x1A2B20CD,0x3371,0x53FF,{ 0xA5,0x60,0xF4,0x84,0x7B,0x46,0x7D,0x73 } }; // 1A2B20CD-3371-53FF-A560-F4847B467D73
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaRestingValueStatics>{ 0xCF0F0414,0x7FDF,0x5284,{ 0xAE,0xEF,0x28,0xB7,0x1B,0x62,0xAA,0x4F } }; // CF0F0414-7FDF-5284-AEEF-28B71B62AA4F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaStateEnteredArgs>{ 0x5B76C949,0xA4D0,0x5C9D,{ 0x92,0x92,0x70,0x13,0xAE,0x96,0x56,0xC7 } }; // 5B76C949-A4D0-5C9D-9292-7013AE9656C7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaStateEnteredArgs2>{ 0xC42D7E8F,0x7199,0x57A9,{ 0x8A,0xEC,0x87,0x27,0x55,0x2B,0x13,0xE6 } }; // C42D7E8F-7199-57A9-8AEC-8727552B13E6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaStateEnteredArgs3>{ 0xCE726CA0,0x1C04,0x531B,{ 0x99,0x51,0x4A,0xEC,0x99,0x69,0x52,0xE4 } }; // CE726CA0-1C04-531B-9951-4AEC996952E4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInteractingStateEnteredArgs>{ 0x70D29B84,0x0931,0x5F17,{ 0xA8,0xA1,0x82,0xF8,0xF8,0x78,0x25,0x32 } }; // 70D29B84-0931-5F17-A8A1-82F8F8782532
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInteractingStateEnteredArgs2>{ 0x2F1FF38D,0x2F51,0x5CEB,{ 0x8D,0x09,0xBD,0xA1,0x51,0x9F,0x93,0x42 } }; // 2F1FF38D-2F51-5CEB-8D09-BDA1519F9342
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerOwner>{ 0x8869779D,0x1D2A,0x5816,{ 0x83,0x6A,0x68,0xA9,0x10,0x50,0x7D,0x87 } }; // 8869779D-1D2A-5816-836A-68A910507D87
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerRequestIgnoredArgs>{ 0xC276205E,0xF7A5,0x5BA2,{ 0xAD,0x45,0xD1,0x2C,0x3C,0x33,0x91,0x49 } }; // C276205E-F7A5-5BA2-AD45-D12C3C339149
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerStatics>{ 0x7AC9867A,0xE16E,0x56EF,{ 0x98,0x09,0xF6,0xE4,0x04,0x24,0x0F,0x50 } }; // 7AC9867A-E16E-56EF-9809-F6E404240F50
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerStatics2>{ 0x25658E4C,0xB99F,0x5108,{ 0xAA,0xB7,0x1C,0xC4,0x4F,0x11,0x50,0x8B } }; // 25658E4C-B99F-5108-AAB7-1CC44F11508B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerValuesChangedArgs>{ 0x9B495BED,0x1CF7,0x55C1,{ 0x82,0xB9,0x80,0x22,0xCB,0xF3,0xC7,0x66 } }; // 9B495BED-1CF7-55C1-82B9-8022CBF3C766
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaModifier>{ 0x4B8ED310,0xCB61,0x5F0A,{ 0xB9,0x9A,0x94,0x0C,0xDD,0x2C,0x42,0xB1 } }; // 4B8ED310-CB61-5F0A-B99A-940CDD2C42B1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaModifierFactory>{ 0x1B3FD240,0xBA66,0x5296,{ 0xB8,0x01,0x62,0xA2,0xA3,0x60,0x66,0x13 } }; // 1B3FD240-BA66-5296-B801-62A2A3606613
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaNaturalMotion>{ 0x097BA1A6,0xE077,0x52D1,{ 0x86,0xD3,0x38,0xE3,0xF6,0x61,0x9D,0xDF } }; // 097BA1A6-E077-52D1-86D3-38E3F6619DDF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaNaturalMotionStatics>{ 0xCC24AB87,0x9131,0x5286,{ 0xB3,0xCE,0x1E,0xF9,0x7E,0x09,0x74,0xE6 } }; // CC24AB87-9131-5286-B3CE-1EF97E0974E6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSource>{ 0xEA595C95,0xB9CB,0x5CD4,{ 0xBB,0x9C,0x49,0x34,0xFF,0x32,0x90,0x63 } }; // EA595C95-B9CB-5CD4-BB9C-4934FF329063
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSource2>{ 0xFF1132BA,0xDC0D,0x519E,{ 0xBE,0x49,0xBE,0x30,0x1E,0x52,0x30,0x6A } }; // FF1132BA-DC0D-519E-BE49-BE301E52306A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSource3>{ 0xD523BD66,0xA05D,0x5417,{ 0x8E,0x07,0x84,0xAE,0x3C,0xAF,0x97,0x52 } }; // D523BD66-A05D-5417-8E07-84AE3CAF9752
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSourceObjectFactory>{ 0xFEB73102,0x238C,0x52AA,{ 0x8E,0x03,0xB6,0x8D,0x5E,0xCC,0x44,0xB3 } }; // FEB73102-238C-52AA-8E03-B68D5ECC44B3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSourceStatics>{ 0x5FC9C763,0xE2E5,0x530E,{ 0x87,0xCD,0xB9,0x31,0x18,0xAD,0xE8,0xA3 } }; // 5FC9C763-E2E5-530E-87CD-B93118ADE8A3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSourceStatics2>{ 0xA6B494FE,0x12A1,0x5A73,{ 0xB8,0x7E,0x4C,0x4E,0xF5,0x8E,0xAC,0x6C } }; // A6B494FE-12A1-5A73-B87E-4C4EF58EAC6C
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Interactions::CompositionConditionalValue>{ using type = winrt::Microsoft::UI::Composition::Interactions::ICompositionConditionalValue; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Interactions::CompositionInteractionSourceCollection>{ using type = winrt::Microsoft::UI::Composition::Interactions::ICompositionInteractionSourceCollection; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Interactions::InteractionSourceConfiguration>{ using type = winrt::Microsoft::UI::Composition::Interactions::IInteractionSourceConfiguration; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Interactions::InteractionTracker>{ using type = winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerCustomAnimationStateEnteredArgs>{ using type = winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerCustomAnimationStateEnteredArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerIdleStateEnteredArgs>{ using type = winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerIdleStateEnteredArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaModifier>{ using type = winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaModifier; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaMotion>{ using type = winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaMotion; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaNaturalMotion>{ using type = winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaNaturalMotion; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaRestingValue>{ using type = winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaRestingValue; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaStateEnteredArgs>{ using type = winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaStateEnteredArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInteractingStateEnteredArgs>{ using type = winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInteractingStateEnteredArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerRequestIgnoredArgs>{ using type = winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerRequestIgnoredArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerValuesChangedArgs>{ using type = winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerValuesChangedArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerVector2InertiaModifier>{ using type = winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaModifier; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerVector2InertiaNaturalMotion>{ using type = winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaNaturalMotion; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Interactions::VisualInteractionSource>{ using type = winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSource; };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::ICompositionConditionalValue>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Condition(void**) noexcept = 0;
            virtual int32_t __stdcall put_Condition(void*) noexcept = 0;
            virtual int32_t __stdcall get_Value(void**) noexcept = 0;
            virtual int32_t __stdcall put_Value(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::ICompositionConditionalValueStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::ICompositionInteractionSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::ICompositionInteractionSourceCollection>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Count(int32_t*) noexcept = 0;
            virtual int32_t __stdcall Add(void*) noexcept = 0;
            virtual int32_t __stdcall Remove(void*) noexcept = 0;
            virtual int32_t __stdcall RemoveAll() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionSourceConfiguration>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PositionXSourceMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PositionXSourceMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PositionYSourceMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PositionYSourceMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ScaleSourceMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ScaleSourceMode(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_InteractionSources(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPositionRoundingSuggested(bool*) noexcept = 0;
            virtual int32_t __stdcall get_MaxPosition(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall put_MaxPosition(winrt::Windows::Foundation::Numerics::float3) noexcept = 0;
            virtual int32_t __stdcall get_MaxScale(float*) noexcept = 0;
            virtual int32_t __stdcall put_MaxScale(float) noexcept = 0;
            virtual int32_t __stdcall get_MinPosition(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall put_MinPosition(winrt::Windows::Foundation::Numerics::float3) noexcept = 0;
            virtual int32_t __stdcall get_MinScale(float*) noexcept = 0;
            virtual int32_t __stdcall put_MinScale(float) noexcept = 0;
            virtual int32_t __stdcall get_NaturalRestingPosition(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall get_NaturalRestingScale(float*) noexcept = 0;
            virtual int32_t __stdcall get_Owner(void**) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall get_PositionInertiaDecayRate(void**) noexcept = 0;
            virtual int32_t __stdcall put_PositionInertiaDecayRate(void*) noexcept = 0;
            virtual int32_t __stdcall get_PositionVelocityInPixelsPerSecond(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall get_Scale(float*) noexcept = 0;
            virtual int32_t __stdcall get_ScaleInertiaDecayRate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ScaleInertiaDecayRate(void*) noexcept = 0;
            virtual int32_t __stdcall get_ScaleVelocityInPercentPerSecond(float*) noexcept = 0;
            virtual int32_t __stdcall AdjustPositionXIfGreaterThanThreshold(float, float) noexcept = 0;
            virtual int32_t __stdcall AdjustPositionYIfGreaterThanThreshold(float, float) noexcept = 0;
            virtual int32_t __stdcall ConfigurePositionXInertiaModifiers(void*) noexcept = 0;
            virtual int32_t __stdcall ConfigurePositionYInertiaModifiers(void*) noexcept = 0;
            virtual int32_t __stdcall ConfigureScaleInertiaModifiers(void*) noexcept = 0;
            virtual int32_t __stdcall TryUpdatePosition(winrt::Windows::Foundation::Numerics::float3, int32_t*) noexcept = 0;
            virtual int32_t __stdcall TryUpdatePositionBy(winrt::Windows::Foundation::Numerics::float3, int32_t*) noexcept = 0;
            virtual int32_t __stdcall TryUpdatePositionWithAnimation(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall TryUpdatePositionWithAdditionalVelocity(winrt::Windows::Foundation::Numerics::float3, int32_t*) noexcept = 0;
            virtual int32_t __stdcall TryUpdateScale(float, winrt::Windows::Foundation::Numerics::float3, int32_t*) noexcept = 0;
            virtual int32_t __stdcall TryUpdateScaleWithAnimation(void*, winrt::Windows::Foundation::Numerics::float3, int32_t*) noexcept = 0;
            virtual int32_t __stdcall TryUpdateScaleWithAdditionalVelocity(float, winrt::Windows::Foundation::Numerics::float3, int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall ConfigureCenterPointXInertiaModifiers(void*) noexcept = 0;
            virtual int32_t __stdcall ConfigureCenterPointYInertiaModifiers(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker3>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall ConfigureVector2PositionInertiaModifiers(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker4>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall TryUpdatePositionWithOption(winrt::Windows::Foundation::Numerics::float3, int32_t, int32_t*) noexcept = 0;
            virtual int32_t __stdcall TryUpdatePositionByWithOption(winrt::Windows::Foundation::Numerics::float3, int32_t, int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_IsInertiaFromImpulse(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker5>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall TryUpdatePositionWithOption(winrt::Windows::Foundation::Numerics::float3, int32_t, int32_t, int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerCustomAnimationStateEnteredArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_RequestId(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerCustomAnimationStateEnteredArgs2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsFromBinding(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerIdleStateEnteredArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_RequestId(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerIdleStateEnteredArgs2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsFromBinding(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaModifier>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaModifierFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaMotion>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Condition(void**) noexcept = 0;
            virtual int32_t __stdcall put_Condition(void*) noexcept = 0;
            virtual int32_t __stdcall get_Motion(void**) noexcept = 0;
            virtual int32_t __stdcall put_Motion(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaMotionStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaNaturalMotion>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Condition(void**) noexcept = 0;
            virtual int32_t __stdcall put_Condition(void*) noexcept = 0;
            virtual int32_t __stdcall get_NaturalMotion(void**) noexcept = 0;
            virtual int32_t __stdcall put_NaturalMotion(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaNaturalMotionStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaRestingValue>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Condition(void**) noexcept = 0;
            virtual int32_t __stdcall put_Condition(void*) noexcept = 0;
            virtual int32_t __stdcall get_RestingValue(void**) noexcept = 0;
            virtual int32_t __stdcall put_RestingValue(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaRestingValueStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaStateEnteredArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ModifiedRestingPosition(void**) noexcept = 0;
            virtual int32_t __stdcall get_ModifiedRestingScale(void**) noexcept = 0;
            virtual int32_t __stdcall get_NaturalRestingPosition(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall get_NaturalRestingScale(float*) noexcept = 0;
            virtual int32_t __stdcall get_PositionVelocityInPixelsPerSecond(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall get_RequestId(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ScaleVelocityInPercentPerSecond(float*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaStateEnteredArgs2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsInertiaFromImpulse(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaStateEnteredArgs3>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsFromBinding(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInteractingStateEnteredArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_RequestId(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInteractingStateEnteredArgs2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsFromBinding(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerOwner>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CustomAnimationStateEntered(void*, void*) noexcept = 0;
            virtual int32_t __stdcall IdleStateEntered(void*, void*) noexcept = 0;
            virtual int32_t __stdcall InertiaStateEntered(void*, void*) noexcept = 0;
            virtual int32_t __stdcall InteractingStateEntered(void*, void*) noexcept = 0;
            virtual int32_t __stdcall RequestIgnored(void*, void*) noexcept = 0;
            virtual int32_t __stdcall ValuesChanged(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerRequestIgnoredArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_RequestId(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
            virtual int32_t __stdcall CreateWithOwner(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerStatics2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall SetBindingMode(void*, void*, uint32_t) noexcept = 0;
            virtual int32_t __stdcall GetBindingMode(void*, void*, uint32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerValuesChangedArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall get_RequestId(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Scale(float*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaModifier>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaModifierFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaNaturalMotion>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Condition(void**) noexcept = 0;
            virtual int32_t __stdcall put_Condition(void*) noexcept = 0;
            virtual int32_t __stdcall get_NaturalMotion(void**) noexcept = 0;
            virtual int32_t __stdcall put_NaturalMotion(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaNaturalMotionStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsPositionXRailsEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPositionXRailsEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsPositionYRailsEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPositionYRailsEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_ManipulationRedirectionMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ManipulationRedirectionMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PositionXChainingMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PositionXChainingMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PositionXSourceMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PositionXSourceMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PositionYChainingMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PositionYChainingMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PositionYSourceMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PositionYSourceMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ScaleChainingMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ScaleChainingMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ScaleSourceMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ScaleSourceMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall TryRedirectForManipulation(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSource2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_DeltaPosition(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall get_DeltaScale(float*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall get_PositionVelocity(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall get_Scale(float*) noexcept = 0;
            virtual int32_t __stdcall get_ScaleVelocity(float*) noexcept = 0;
            virtual int32_t __stdcall ConfigureCenterPointXModifiers(void*) noexcept = 0;
            virtual int32_t __stdcall ConfigureCenterPointYModifiers(void*) noexcept = 0;
            virtual int32_t __stdcall ConfigureDeltaPositionXModifiers(void*) noexcept = 0;
            virtual int32_t __stdcall ConfigureDeltaPositionYModifiers(void*) noexcept = 0;
            virtual int32_t __stdcall ConfigureDeltaScaleModifiers(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSource3>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PointerWheelConfig(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSourceObjectFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSourceStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSourceStatics2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateFromIVisualElement(void*, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_ICompositionConditionalValue
    {
        [[nodiscard]] auto Condition() const;
        auto Condition(winrt::Microsoft::UI::Composition::ExpressionAnimation const& value) const;
        [[nodiscard]] auto Value() const;
        auto Value(winrt::Microsoft::UI::Composition::ExpressionAnimation const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::ICompositionConditionalValue>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_ICompositionConditionalValue<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_ICompositionConditionalValueStatics
    {
        auto Create(winrt::Microsoft::UI::Composition::Compositor const& compositor) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::ICompositionConditionalValueStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_ICompositionConditionalValueStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_ICompositionInteractionSource
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::ICompositionInteractionSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_ICompositionInteractionSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_ICompositionInteractionSourceCollection
    {
        [[nodiscard]] auto Count() const;
        auto Add(winrt::Microsoft::UI::Composition::Interactions::ICompositionInteractionSource const& value) const;
        auto Remove(winrt::Microsoft::UI::Composition::Interactions::ICompositionInteractionSource const& value) const;
        auto RemoveAll() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::ICompositionInteractionSourceCollection>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_ICompositionInteractionSourceCollection<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionSourceConfiguration
    {
        [[nodiscard]] auto PositionXSourceMode() const;
        auto PositionXSourceMode(winrt::Microsoft::UI::Composition::Interactions::InteractionSourceRedirectionMode const& value) const;
        [[nodiscard]] auto PositionYSourceMode() const;
        auto PositionYSourceMode(winrt::Microsoft::UI::Composition::Interactions::InteractionSourceRedirectionMode const& value) const;
        [[nodiscard]] auto ScaleSourceMode() const;
        auto ScaleSourceMode(winrt::Microsoft::UI::Composition::Interactions::InteractionSourceRedirectionMode const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionSourceConfiguration>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionSourceConfiguration<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTracker
    {
        [[nodiscard]] auto InteractionSources() const;
        [[nodiscard]] auto IsPositionRoundingSuggested() const;
        [[nodiscard]] auto MaxPosition() const;
        auto MaxPosition(winrt::Windows::Foundation::Numerics::float3 const& value) const;
        [[nodiscard]] auto MaxScale() const;
        auto MaxScale(float value) const;
        [[nodiscard]] auto MinPosition() const;
        auto MinPosition(winrt::Windows::Foundation::Numerics::float3 const& value) const;
        [[nodiscard]] auto MinScale() const;
        auto MinScale(float value) const;
        [[nodiscard]] auto NaturalRestingPosition() const;
        [[nodiscard]] auto NaturalRestingScale() const;
        [[nodiscard]] auto Owner() const;
        [[nodiscard]] auto Position() const;
        [[nodiscard]] auto PositionInertiaDecayRate() const;
        auto PositionInertiaDecayRate(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float3> const& value) const;
        [[nodiscard]] auto PositionVelocityInPixelsPerSecond() const;
        [[nodiscard]] auto Scale() const;
        [[nodiscard]] auto ScaleInertiaDecayRate() const;
        auto ScaleInertiaDecayRate(winrt::Windows::Foundation::IReference<float> const& value) const;
        [[nodiscard]] auto ScaleVelocityInPercentPerSecond() const;
        auto AdjustPositionXIfGreaterThanThreshold(float adjustment, float positionThreshold) const;
        auto AdjustPositionYIfGreaterThanThreshold(float adjustment, float positionThreshold) const;
        auto ConfigurePositionXInertiaModifiers(param::iterable<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaModifier> const& modifiers) const;
        auto ConfigurePositionYInertiaModifiers(param::iterable<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaModifier> const& modifiers) const;
        auto ConfigureScaleInertiaModifiers(param::iterable<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaModifier> const& modifiers) const;
        auto TryUpdatePosition(winrt::Windows::Foundation::Numerics::float3 const& value) const;
        auto TryUpdatePositionBy(winrt::Windows::Foundation::Numerics::float3 const& amount) const;
        auto TryUpdatePositionWithAnimation(winrt::Microsoft::UI::Composition::CompositionAnimation const& animation) const;
        auto TryUpdatePositionWithAdditionalVelocity(winrt::Windows::Foundation::Numerics::float3 const& velocityInPixelsPerSecond) const;
        auto TryUpdateScale(float value, winrt::Windows::Foundation::Numerics::float3 const& centerPoint) const;
        auto TryUpdateScaleWithAnimation(winrt::Microsoft::UI::Composition::CompositionAnimation const& animation, winrt::Windows::Foundation::Numerics::float3 const& centerPoint) const;
        auto TryUpdateScaleWithAdditionalVelocity(float velocityInPercentPerSecond, winrt::Windows::Foundation::Numerics::float3 const& centerPoint) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTracker<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTracker2
    {
        auto ConfigureCenterPointXInertiaModifiers(param::iterable<winrt::Microsoft::UI::Composition::Interactions::CompositionConditionalValue> const& conditionalValues) const;
        auto ConfigureCenterPointYInertiaModifiers(param::iterable<winrt::Microsoft::UI::Composition::Interactions::CompositionConditionalValue> const& conditionalValues) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker2>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTracker2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTracker3
    {
        auto ConfigureVector2PositionInertiaModifiers(param::iterable<winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerVector2InertiaModifier> const& modifiers) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker3>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTracker3<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTracker4
    {
        auto TryUpdatePosition(winrt::Windows::Foundation::Numerics::float3 const& value, winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerClampingOption const& option) const;
        auto TryUpdatePositionBy(winrt::Windows::Foundation::Numerics::float3 const& amount, winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerClampingOption const& option) const;
        [[nodiscard]] auto IsInertiaFromImpulse() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker4>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTracker4<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTracker5
    {
        auto TryUpdatePosition(winrt::Windows::Foundation::Numerics::float3 const& value, winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerClampingOption const& option, winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerPositionUpdateOption const& posUpdateOption) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTracker5>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTracker5<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerCustomAnimationStateEnteredArgs
    {
        [[nodiscard]] auto RequestId() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerCustomAnimationStateEnteredArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerCustomAnimationStateEnteredArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerCustomAnimationStateEnteredArgs2
    {
        [[nodiscard]] auto IsFromBinding() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerCustomAnimationStateEnteredArgs2>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerCustomAnimationStateEnteredArgs2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerIdleStateEnteredArgs
    {
        [[nodiscard]] auto RequestId() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerIdleStateEnteredArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerIdleStateEnteredArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerIdleStateEnteredArgs2
    {
        [[nodiscard]] auto IsFromBinding() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerIdleStateEnteredArgs2>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerIdleStateEnteredArgs2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaModifier
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaModifier>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaModifier<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaModifierFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaModifierFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaModifierFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaMotion
    {
        [[nodiscard]] auto Condition() const;
        auto Condition(winrt::Microsoft::UI::Composition::ExpressionAnimation const& value) const;
        [[nodiscard]] auto Motion() const;
        auto Motion(winrt::Microsoft::UI::Composition::ExpressionAnimation const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaMotion>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaMotion<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaMotionStatics
    {
        auto Create(winrt::Microsoft::UI::Composition::Compositor const& compositor) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaMotionStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaMotionStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaNaturalMotion
    {
        [[nodiscard]] auto Condition() const;
        auto Condition(winrt::Microsoft::UI::Composition::ExpressionAnimation const& value) const;
        [[nodiscard]] auto NaturalMotion() const;
        auto NaturalMotion(winrt::Microsoft::UI::Composition::ScalarNaturalMotionAnimation const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaNaturalMotion>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaNaturalMotion<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaNaturalMotionStatics
    {
        auto Create(winrt::Microsoft::UI::Composition::Compositor const& compositor) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaNaturalMotionStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaNaturalMotionStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaRestingValue
    {
        [[nodiscard]] auto Condition() const;
        auto Condition(winrt::Microsoft::UI::Composition::ExpressionAnimation const& value) const;
        [[nodiscard]] auto RestingValue() const;
        auto RestingValue(winrt::Microsoft::UI::Composition::ExpressionAnimation const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaRestingValue>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaRestingValue<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaRestingValueStatics
    {
        auto Create(winrt::Microsoft::UI::Composition::Compositor const& compositor) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaRestingValueStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaRestingValueStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaStateEnteredArgs
    {
        [[nodiscard]] auto ModifiedRestingPosition() const;
        [[nodiscard]] auto ModifiedRestingScale() const;
        [[nodiscard]] auto NaturalRestingPosition() const;
        [[nodiscard]] auto NaturalRestingScale() const;
        [[nodiscard]] auto PositionVelocityInPixelsPerSecond() const;
        [[nodiscard]] auto RequestId() const;
        [[nodiscard]] auto ScaleVelocityInPercentPerSecond() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaStateEnteredArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaStateEnteredArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaStateEnteredArgs2
    {
        [[nodiscard]] auto IsInertiaFromImpulse() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaStateEnteredArgs2>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaStateEnteredArgs2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaStateEnteredArgs3
    {
        [[nodiscard]] auto IsFromBinding() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInertiaStateEnteredArgs3>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaStateEnteredArgs3<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInteractingStateEnteredArgs
    {
        [[nodiscard]] auto RequestId() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInteractingStateEnteredArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInteractingStateEnteredArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInteractingStateEnteredArgs2
    {
        [[nodiscard]] auto IsFromBinding() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerInteractingStateEnteredArgs2>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerInteractingStateEnteredArgs2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerOwner
    {
        auto CustomAnimationStateEntered(winrt::Microsoft::UI::Composition::Interactions::InteractionTracker const& sender, winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerCustomAnimationStateEnteredArgs const& args) const;
        auto IdleStateEntered(winrt::Microsoft::UI::Composition::Interactions::InteractionTracker const& sender, winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerIdleStateEnteredArgs const& args) const;
        auto InertiaStateEntered(winrt::Microsoft::UI::Composition::Interactions::InteractionTracker const& sender, winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInertiaStateEnteredArgs const& args) const;
        auto InteractingStateEntered(winrt::Microsoft::UI::Composition::Interactions::InteractionTracker const& sender, winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerInteractingStateEnteredArgs const& args) const;
        auto RequestIgnored(winrt::Microsoft::UI::Composition::Interactions::InteractionTracker const& sender, winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerRequestIgnoredArgs const& args) const;
        auto ValuesChanged(winrt::Microsoft::UI::Composition::Interactions::InteractionTracker const& sender, winrt::Microsoft::UI::Composition::Interactions::InteractionTrackerValuesChangedArgs const& args) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerOwner>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerOwner<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerRequestIgnoredArgs
    {
        [[nodiscard]] auto RequestId() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerRequestIgnoredArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerRequestIgnoredArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerStatics
    {
        auto Create(winrt::Microsoft::UI::Composition::Compositor const& compositor) const;
        auto CreateWithOwner(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerOwner const& owner) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerStatics2
    {
        auto SetBindingMode(winrt::Microsoft::UI::Composition::Interactions::InteractionTracker const& boundTracker1, winrt::Microsoft::UI::Composition::Interactions::InteractionTracker const& boundTracker2, winrt::Microsoft::UI::Composition::Interactions::InteractionBindingAxisModes const& axisMode) const;
        auto GetBindingMode(winrt::Microsoft::UI::Composition::Interactions::InteractionTracker const& boundTracker1, winrt::Microsoft::UI::Composition::Interactions::InteractionTracker const& boundTracker2) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerValuesChangedArgs
    {
        [[nodiscard]] auto Position() const;
        [[nodiscard]] auto RequestId() const;
        [[nodiscard]] auto Scale() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerValuesChangedArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerValuesChangedArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaModifier
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaModifier>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaModifier<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaModifierFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaModifierFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaModifierFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaNaturalMotion
    {
        [[nodiscard]] auto Condition() const;
        auto Condition(winrt::Microsoft::UI::Composition::ExpressionAnimation const& value) const;
        [[nodiscard]] auto NaturalMotion() const;
        auto NaturalMotion(winrt::Microsoft::UI::Composition::Vector2NaturalMotionAnimation const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaNaturalMotion>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaNaturalMotion<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaNaturalMotionStatics
    {
        auto Create(winrt::Microsoft::UI::Composition::Compositor const& compositor) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IInteractionTrackerVector2InertiaNaturalMotionStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaNaturalMotionStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IVisualInteractionSource
    {
        [[nodiscard]] auto IsPositionXRailsEnabled() const;
        auto IsPositionXRailsEnabled(bool value) const;
        [[nodiscard]] auto IsPositionYRailsEnabled() const;
        auto IsPositionYRailsEnabled(bool value) const;
        [[nodiscard]] auto ManipulationRedirectionMode() const;
        auto ManipulationRedirectionMode(winrt::Microsoft::UI::Composition::Interactions::VisualInteractionSourceRedirectionMode const& value) const;
        [[nodiscard]] auto PositionXChainingMode() const;
        auto PositionXChainingMode(winrt::Microsoft::UI::Composition::Interactions::InteractionChainingMode const& value) const;
        [[nodiscard]] auto PositionXSourceMode() const;
        auto PositionXSourceMode(winrt::Microsoft::UI::Composition::Interactions::InteractionSourceMode const& value) const;
        [[nodiscard]] auto PositionYChainingMode() const;
        auto PositionYChainingMode(winrt::Microsoft::UI::Composition::Interactions::InteractionChainingMode const& value) const;
        [[nodiscard]] auto PositionYSourceMode() const;
        auto PositionYSourceMode(winrt::Microsoft::UI::Composition::Interactions::InteractionSourceMode const& value) const;
        [[nodiscard]] auto ScaleChainingMode() const;
        auto ScaleChainingMode(winrt::Microsoft::UI::Composition::Interactions::InteractionChainingMode const& value) const;
        [[nodiscard]] auto ScaleSourceMode() const;
        auto ScaleSourceMode(winrt::Microsoft::UI::Composition::Interactions::InteractionSourceMode const& value) const;
        [[nodiscard]] auto Source() const;
        auto TryRedirectForManipulation(winrt::Microsoft::UI::Input::PointerPoint const& pointerPoint) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IVisualInteractionSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IVisualInteractionSource2
    {
        [[nodiscard]] auto DeltaPosition() const;
        [[nodiscard]] auto DeltaScale() const;
        [[nodiscard]] auto Position() const;
        [[nodiscard]] auto PositionVelocity() const;
        [[nodiscard]] auto Scale() const;
        [[nodiscard]] auto ScaleVelocity() const;
        auto ConfigureCenterPointXModifiers(param::iterable<winrt::Microsoft::UI::Composition::Interactions::CompositionConditionalValue> const& conditionalValues) const;
        auto ConfigureCenterPointYModifiers(param::iterable<winrt::Microsoft::UI::Composition::Interactions::CompositionConditionalValue> const& conditionalValues) const;
        auto ConfigureDeltaPositionXModifiers(param::iterable<winrt::Microsoft::UI::Composition::Interactions::CompositionConditionalValue> const& conditionalValues) const;
        auto ConfigureDeltaPositionYModifiers(param::iterable<winrt::Microsoft::UI::Composition::Interactions::CompositionConditionalValue> const& conditionalValues) const;
        auto ConfigureDeltaScaleModifiers(param::iterable<winrt::Microsoft::UI::Composition::Interactions::CompositionConditionalValue> const& conditionalValues) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSource2>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IVisualInteractionSource2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IVisualInteractionSource3
    {
        [[nodiscard]] auto PointerWheelConfig() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSource3>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IVisualInteractionSource3<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IVisualInteractionSourceObjectFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSourceObjectFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IVisualInteractionSourceObjectFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IVisualInteractionSourceStatics
    {
        auto Create(winrt::Microsoft::UI::Composition::Visual const& source) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSourceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IVisualInteractionSourceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Interactions_IVisualInteractionSourceStatics2
    {
        auto CreateFromIVisualElement(winrt::Microsoft::UI::Composition::IVisualElement const& source) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Interactions::IVisualInteractionSourceStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Interactions_IVisualInteractionSourceStatics2<D>;
    };
}
#endif
