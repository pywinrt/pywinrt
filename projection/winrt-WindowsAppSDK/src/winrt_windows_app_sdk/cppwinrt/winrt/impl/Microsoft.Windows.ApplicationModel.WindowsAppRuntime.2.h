// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240111.5

#pragma once
#ifndef WINRT_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_2_H
#define WINRT_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_2_H
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Microsoft.Windows.ApplicationModel.WindowsAppRuntime.1.h"
WINRT_EXPORT namespace winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime
{
    struct WindowsAppRuntimeVersion
    {
        uint32_t Major;
        uint32_t Minor;
        uint32_t Patch;
    };
    inline bool operator==(WindowsAppRuntimeVersion const& left, WindowsAppRuntimeVersion const& right) noexcept
    {
        return left.Major == right.Major && left.Minor == right.Minor && left.Patch == right.Patch;
    }
    inline bool operator!=(WindowsAppRuntimeVersion const& left, WindowsAppRuntimeVersion const& right) noexcept
    {
        return !(left == right);
    }
    struct WINRT_IMPL_EMPTY_BASES DeploymentInitializeOptions : winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions,
        impl::require<DeploymentInitializeOptions, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions2>
    {
        DeploymentInitializeOptions(std::nullptr_t) noexcept {}
        DeploymentInitializeOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions(ptr, take_ownership_from_abi) {}
        DeploymentInitializeOptions();
    };
    struct DeploymentManager
    {
        DeploymentManager() = delete;
        static auto GetStatus();
        static auto Initialize();
        static auto Initialize(winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentInitializeOptions const& deploymentInitializeOptions);
    };
    struct WINRT_IMPL_EMPTY_BASES DeploymentResult : winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResult
    {
        DeploymentResult(std::nullptr_t) noexcept {}
        DeploymentResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResult(ptr, take_ownership_from_abi) {}
        DeploymentResult(winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentStatus const& status, winrt::hresult const& extendedError);
    };
    struct ReleaseInfo
    {
        ReleaseInfo() = delete;
        [[nodiscard]] static auto Major();
        [[nodiscard]] static auto Minor();
        [[nodiscard]] static auto Patch();
        [[nodiscard]] static auto VersionTag();
        [[nodiscard]] static auto AsString();
    };
    struct WINRT_IMPL_EMPTY_BASES RuntimeCompatibilityOptions : winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions
    {
        RuntimeCompatibilityOptions(std::nullptr_t) noexcept {}
        RuntimeCompatibilityOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions(ptr, take_ownership_from_abi) {}
        RuntimeCompatibilityOptions();
    };
    struct RuntimeInfo
    {
        RuntimeInfo() = delete;
        [[nodiscard]] static auto Version();
        [[nodiscard]] static auto AsString();
    };
}
#endif
