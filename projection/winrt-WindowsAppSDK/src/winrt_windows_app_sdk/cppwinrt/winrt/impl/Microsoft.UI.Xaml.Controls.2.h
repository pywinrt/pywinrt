// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#ifndef WINRT_Microsoft_UI_Xaml_Controls_2_H
#define WINRT_Microsoft_UI_Xaml_Controls_2_H
#include "winrt/impl/Microsoft.UI.Composition.1.h"
#include "winrt/impl/Microsoft.UI.Xaml.1.h"
#include "winrt/impl/Microsoft.UI.Xaml.Controls.Primitives.1.h"
#include "winrt/impl/Microsoft.UI.Xaml.Data.1.h"
#include "winrt/impl/Microsoft.UI.Xaml.Input.1.h"
#include "winrt/impl/Microsoft.UI.Xaml.Interop.1.h"
#include "winrt/impl/Microsoft.UI.Xaml.Navigation.1.h"
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Windows.Foundation.Collections.1.h"
#include "winrt/impl/Microsoft.UI.Xaml.Controls.1.h"
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Controls
{
    struct CalendarViewDayItemChangingEventHandler : winrt::Windows::Foundation::IUnknown
    {
        CalendarViewDayItemChangingEventHandler(std::nullptr_t = nullptr) noexcept {}
        CalendarViewDayItemChangingEventHandler(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> CalendarViewDayItemChangingEventHandler(L lambda);
        template <typename F> CalendarViewDayItemChangingEventHandler(F* function);
        template <typename O, typename M> CalendarViewDayItemChangingEventHandler(O* object, M method);
        template <typename O, typename M> CalendarViewDayItemChangingEventHandler(com_ptr<O>&& object, M method);
        template <typename O, typename M> CalendarViewDayItemChangingEventHandler(weak_ref<O>&& object, M method);
        auto operator()(winrt::Microsoft::UI::Xaml::Controls::CalendarView const& sender, winrt::Microsoft::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs const& e) const;
    };
    struct CleanUpVirtualizedItemEventHandler : winrt::Windows::Foundation::IUnknown
    {
        CleanUpVirtualizedItemEventHandler(std::nullptr_t = nullptr) noexcept {}
        CleanUpVirtualizedItemEventHandler(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> CleanUpVirtualizedItemEventHandler(L lambda);
        template <typename F> CleanUpVirtualizedItemEventHandler(F* function);
        template <typename O, typename M> CleanUpVirtualizedItemEventHandler(O* object, M method);
        template <typename O, typename M> CleanUpVirtualizedItemEventHandler(com_ptr<O>&& object, M method);
        template <typename O, typename M> CleanUpVirtualizedItemEventHandler(weak_ref<O>&& object, M method);
        auto operator()(winrt::Windows::Foundation::IInspectable const& sender, winrt::Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs const& e) const;
    };
    struct ContextMenuOpeningEventHandler : winrt::Windows::Foundation::IUnknown
    {
        ContextMenuOpeningEventHandler(std::nullptr_t = nullptr) noexcept {}
        ContextMenuOpeningEventHandler(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> ContextMenuOpeningEventHandler(L lambda);
        template <typename F> ContextMenuOpeningEventHandler(F* function);
        template <typename O, typename M> ContextMenuOpeningEventHandler(O* object, M method);
        template <typename O, typename M> ContextMenuOpeningEventHandler(com_ptr<O>&& object, M method);
        template <typename O, typename M> ContextMenuOpeningEventHandler(weak_ref<O>&& object, M method);
        auto operator()(winrt::Windows::Foundation::IInspectable const& sender, winrt::Microsoft::UI::Xaml::Controls::ContextMenuEventArgs const& e) const;
    };
    struct DragItemsStartingEventHandler : winrt::Windows::Foundation::IUnknown
    {
        DragItemsStartingEventHandler(std::nullptr_t = nullptr) noexcept {}
        DragItemsStartingEventHandler(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> DragItemsStartingEventHandler(L lambda);
        template <typename F> DragItemsStartingEventHandler(F* function);
        template <typename O, typename M> DragItemsStartingEventHandler(O* object, M method);
        template <typename O, typename M> DragItemsStartingEventHandler(com_ptr<O>&& object, M method);
        template <typename O, typename M> DragItemsStartingEventHandler(weak_ref<O>&& object, M method);
        auto operator()(winrt::Windows::Foundation::IInspectable const& sender, winrt::Microsoft::UI::Xaml::Controls::DragItemsStartingEventArgs const& e) const;
    };
    struct HubSectionHeaderClickEventHandler : winrt::Windows::Foundation::IUnknown
    {
        HubSectionHeaderClickEventHandler(std::nullptr_t = nullptr) noexcept {}
        HubSectionHeaderClickEventHandler(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> HubSectionHeaderClickEventHandler(L lambda);
        template <typename F> HubSectionHeaderClickEventHandler(F* function);
        template <typename O, typename M> HubSectionHeaderClickEventHandler(O* object, M method);
        template <typename O, typename M> HubSectionHeaderClickEventHandler(com_ptr<O>&& object, M method);
        template <typename O, typename M> HubSectionHeaderClickEventHandler(weak_ref<O>&& object, M method);
        auto operator()(winrt::Windows::Foundation::IInspectable const& sender, winrt::Microsoft::UI::Xaml::Controls::HubSectionHeaderClickEventArgs const& e) const;
    };
    struct ItemClickEventHandler : winrt::Windows::Foundation::IUnknown
    {
        ItemClickEventHandler(std::nullptr_t = nullptr) noexcept {}
        ItemClickEventHandler(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> ItemClickEventHandler(L lambda);
        template <typename F> ItemClickEventHandler(F* function);
        template <typename O, typename M> ItemClickEventHandler(O* object, M method);
        template <typename O, typename M> ItemClickEventHandler(com_ptr<O>&& object, M method);
        template <typename O, typename M> ItemClickEventHandler(weak_ref<O>&& object, M method);
        auto operator()(winrt::Windows::Foundation::IInspectable const& sender, winrt::Microsoft::UI::Xaml::Controls::ItemClickEventArgs const& e) const;
    };
    struct ListViewItemToKeyHandler : winrt::Windows::Foundation::IUnknown
    {
        ListViewItemToKeyHandler(std::nullptr_t = nullptr) noexcept {}
        ListViewItemToKeyHandler(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> ListViewItemToKeyHandler(L lambda);
        template <typename F> ListViewItemToKeyHandler(F* function);
        template <typename O, typename M> ListViewItemToKeyHandler(O* object, M method);
        template <typename O, typename M> ListViewItemToKeyHandler(com_ptr<O>&& object, M method);
        template <typename O, typename M> ListViewItemToKeyHandler(weak_ref<O>&& object, M method);
        auto operator()(winrt::Windows::Foundation::IInspectable const& item) const;
    };
    struct ListViewKeyToItemHandler : winrt::Windows::Foundation::IUnknown
    {
        ListViewKeyToItemHandler(std::nullptr_t = nullptr) noexcept {}
        ListViewKeyToItemHandler(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> ListViewKeyToItemHandler(L lambda);
        template <typename F> ListViewKeyToItemHandler(F* function);
        template <typename O, typename M> ListViewKeyToItemHandler(O* object, M method);
        template <typename O, typename M> ListViewKeyToItemHandler(com_ptr<O>&& object, M method);
        template <typename O, typename M> ListViewKeyToItemHandler(weak_ref<O>&& object, M method);
        auto operator()(param::hstring const& key) const;
    };
    struct SectionsInViewChangedEventHandler : winrt::Windows::Foundation::IUnknown
    {
        SectionsInViewChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
        SectionsInViewChangedEventHandler(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> SectionsInViewChangedEventHandler(L lambda);
        template <typename F> SectionsInViewChangedEventHandler(F* function);
        template <typename O, typename M> SectionsInViewChangedEventHandler(O* object, M method);
        template <typename O, typename M> SectionsInViewChangedEventHandler(com_ptr<O>&& object, M method);
        template <typename O, typename M> SectionsInViewChangedEventHandler(weak_ref<O>&& object, M method);
        auto operator()(winrt::Windows::Foundation::IInspectable const& sender, winrt::Microsoft::UI::Xaml::Controls::SectionsInViewChangedEventArgs const& e) const;
    };
    struct SelectionChangedEventHandler : winrt::Windows::Foundation::IUnknown
    {
        SelectionChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
        SelectionChangedEventHandler(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> SelectionChangedEventHandler(L lambda);
        template <typename F> SelectionChangedEventHandler(F* function);
        template <typename O, typename M> SelectionChangedEventHandler(O* object, M method);
        template <typename O, typename M> SelectionChangedEventHandler(com_ptr<O>&& object, M method);
        template <typename O, typename M> SelectionChangedEventHandler(weak_ref<O>&& object, M method);
        auto operator()(winrt::Windows::Foundation::IInspectable const& sender, winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventArgs const& e) const;
    };
    struct SemanticZoomViewChangedEventHandler : winrt::Windows::Foundation::IUnknown
    {
        SemanticZoomViewChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
        SemanticZoomViewChangedEventHandler(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> SemanticZoomViewChangedEventHandler(L lambda);
        template <typename F> SemanticZoomViewChangedEventHandler(F* function);
        template <typename O, typename M> SemanticZoomViewChangedEventHandler(O* object, M method);
        template <typename O, typename M> SemanticZoomViewChangedEventHandler(com_ptr<O>&& object, M method);
        template <typename O, typename M> SemanticZoomViewChangedEventHandler(weak_ref<O>&& object, M method);
        auto operator()(winrt::Windows::Foundation::IInspectable const& sender, winrt::Microsoft::UI::Xaml::Controls::SemanticZoomViewChangedEventArgs const& e) const;
    };
    struct TextChangedEventHandler : winrt::Windows::Foundation::IUnknown
    {
        TextChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
        TextChangedEventHandler(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> TextChangedEventHandler(L lambda);
        template <typename F> TextChangedEventHandler(F* function);
        template <typename O, typename M> TextChangedEventHandler(O* object, M method);
        template <typename O, typename M> TextChangedEventHandler(com_ptr<O>&& object, M method);
        template <typename O, typename M> TextChangedEventHandler(weak_ref<O>&& object, M method);
        auto operator()(winrt::Windows::Foundation::IInspectable const& sender, winrt::Microsoft::UI::Xaml::Controls::TextChangedEventArgs const& e) const;
    };
    struct TextControlPasteEventHandler : winrt::Windows::Foundation::IUnknown
    {
        TextControlPasteEventHandler(std::nullptr_t = nullptr) noexcept {}
        TextControlPasteEventHandler(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> TextControlPasteEventHandler(L lambda);
        template <typename F> TextControlPasteEventHandler(F* function);
        template <typename O, typename M> TextControlPasteEventHandler(O* object, M method);
        template <typename O, typename M> TextControlPasteEventHandler(com_ptr<O>&& object, M method);
        template <typename O, typename M> TextControlPasteEventHandler(weak_ref<O>&& object, M method);
        auto operator()(winrt::Windows::Foundation::IInspectable const& sender, winrt::Microsoft::UI::Xaml::Controls::TextControlPasteEventArgs const& e) const;
    };
    struct WINRT_IMPL_EMPTY_BASES AnchorRequestedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IAnchorRequestedEventArgs
    {
        AnchorRequestedEventArgs(std::nullptr_t) noexcept {}
        AnchorRequestedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IAnchorRequestedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES AnimatedIcon : winrt::Microsoft::UI::Xaml::Controls::IAnimatedIcon,
        impl::base<AnimatedIcon, winrt::Microsoft::UI::Xaml::Controls::IconElement, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<AnimatedIcon, winrt::Microsoft::UI::Xaml::Controls::IIconElement, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        AnimatedIcon(std::nullptr_t) noexcept {}
        AnimatedIcon(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IAnimatedIcon(ptr, take_ownership_from_abi) {}
        AnimatedIcon();
        [[nodiscard]] static auto StateProperty();
        static auto SetState(winrt::Microsoft::UI::Xaml::DependencyObject const& object, param::hstring const& value);
        static auto GetState(winrt::Microsoft::UI::Xaml::DependencyObject const& object);
        [[nodiscard]] static auto SourceProperty();
        [[nodiscard]] static auto FallbackIconSourceProperty();
        [[nodiscard]] static auto MirroredWhenRightToLeftProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES AnimatedIconSource : winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSource,
        impl::base<AnimatedIconSource, winrt::Microsoft::UI::Xaml::Controls::IconSource, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<AnimatedIconSource, winrt::Microsoft::UI::Xaml::Controls::IIconSource, winrt::Microsoft::UI::Xaml::Controls::IIconSourceOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        AnimatedIconSource(std::nullptr_t) noexcept {}
        AnimatedIconSource(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IAnimatedIconSource(ptr, take_ownership_from_abi) {}
        AnimatedIconSource();
        [[nodiscard]] static auto SourceProperty();
        [[nodiscard]] static auto FallbackIconSourceProperty();
        [[nodiscard]] static auto MirroredWhenRightToLeftProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES AnimatedVisualPlayer : winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer,
        impl::base<AnimatedVisualPlayer, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<AnimatedVisualPlayer, winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer2, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        AnimatedVisualPlayer(std::nullptr_t) noexcept {}
        AnimatedVisualPlayer(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer(ptr, take_ownership_from_abi) {}
        AnimatedVisualPlayer();
        [[nodiscard]] static auto AutoPlayProperty();
        [[nodiscard]] static auto DiagnosticsProperty();
        [[nodiscard]] static auto DurationProperty();
        [[nodiscard]] static auto FallbackContentProperty();
        [[nodiscard]] static auto IsAnimatedVisualLoadedProperty();
        [[nodiscard]] static auto IsPlayingProperty();
        [[nodiscard]] static auto PlaybackRateProperty();
        [[nodiscard]] static auto SourceProperty();
        [[nodiscard]] static auto StretchProperty();
        [[nodiscard]] static auto AnimationOptimizationProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES AnnotatedScrollBar : winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBar,
        impl::base<AnnotatedScrollBar, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<AnnotatedScrollBar, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        AnnotatedScrollBar(std::nullptr_t) noexcept {}
        AnnotatedScrollBar(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBar(ptr, take_ownership_from_abi) {}
        AnnotatedScrollBar();
        [[nodiscard]] static auto LabelsProperty();
        [[nodiscard]] static auto LabelTemplateProperty();
        [[nodiscard]] static auto DetailLabelTemplateProperty();
        [[nodiscard]] static auto SmallChangeProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES AnnotatedScrollBarDetailLabelRequestedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarDetailLabelRequestedEventArgs
    {
        AnnotatedScrollBarDetailLabelRequestedEventArgs(std::nullptr_t) noexcept {}
        AnnotatedScrollBarDetailLabelRequestedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarDetailLabelRequestedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES AnnotatedScrollBarLabel : winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarLabel
    {
        AnnotatedScrollBarLabel(std::nullptr_t) noexcept {}
        AnnotatedScrollBarLabel(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarLabel(ptr, take_ownership_from_abi) {}
        AnnotatedScrollBarLabel(winrt::Windows::Foundation::IInspectable const& content, double scrollOffset);
    };
    struct WINRT_IMPL_EMPTY_BASES AnnotatedScrollBarScrollingEventArgs : winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarScrollingEventArgs
    {
        AnnotatedScrollBarScrollingEventArgs(std::nullptr_t) noexcept {}
        AnnotatedScrollBarScrollingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IAnnotatedScrollBarScrollingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES AppBar : winrt::Microsoft::UI::Xaml::Controls::IAppBar,
        impl::base<AppBar, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<AppBar, winrt::Microsoft::UI::Xaml::Controls::IAppBarOverrides, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        AppBar(std::nullptr_t) noexcept {}
        AppBar(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IAppBar(ptr, take_ownership_from_abi) {}
        AppBar();
        [[nodiscard]] static auto IsOpenProperty();
        [[nodiscard]] static auto IsStickyProperty();
        [[nodiscard]] static auto ClosedDisplayModeProperty();
        [[nodiscard]] static auto LightDismissOverlayModeProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES AppBarButton : winrt::Microsoft::UI::Xaml::Controls::IAppBarButton,
        impl::base<AppBarButton, winrt::Microsoft::UI::Xaml::Controls::Button, winrt::Microsoft::UI::Xaml::Controls::Primitives::ButtonBase, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<AppBarButton, winrt::Microsoft::UI::Xaml::Controls::ICommandBarElement, winrt::Microsoft::UI::Xaml::Controls::IButton, winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBase, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        AppBarButton(std::nullptr_t) noexcept {}
        AppBarButton(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IAppBarButton(ptr, take_ownership_from_abi) {}
        AppBarButton();
        [[nodiscard]] static auto LabelProperty();
        [[nodiscard]] static auto IconProperty();
        [[nodiscard]] static auto LabelPositionProperty();
        [[nodiscard]] static auto KeyboardAcceleratorTextOverrideProperty();
        [[nodiscard]] static auto IsCompactProperty();
        [[nodiscard]] static auto IsInOverflowProperty();
        [[nodiscard]] static auto DynamicOverflowOrderProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES AppBarElementContainer : winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainer,
        impl::base<AppBarElementContainer, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<AppBarElementContainer, winrt::Microsoft::UI::Xaml::Controls::ICommandBarElement, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        AppBarElementContainer(std::nullptr_t) noexcept {}
        AppBarElementContainer(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IAppBarElementContainer(ptr, take_ownership_from_abi) {}
        AppBarElementContainer();
        [[nodiscard]] static auto IsCompactProperty();
        [[nodiscard]] static auto IsInOverflowProperty();
        [[nodiscard]] static auto DynamicOverflowOrderProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES AppBarSeparator : winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparator,
        impl::base<AppBarSeparator, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<AppBarSeparator, winrt::Microsoft::UI::Xaml::Controls::ICommandBarElement, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        AppBarSeparator(std::nullptr_t) noexcept {}
        AppBarSeparator(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IAppBarSeparator(ptr, take_ownership_from_abi) {}
        AppBarSeparator();
        [[nodiscard]] static auto IsCompactProperty();
        [[nodiscard]] static auto IsInOverflowProperty();
        [[nodiscard]] static auto DynamicOverflowOrderProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES AppBarToggleButton : winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButton,
        impl::base<AppBarToggleButton, winrt::Microsoft::UI::Xaml::Controls::Primitives::ToggleButton, winrt::Microsoft::UI::Xaml::Controls::Primitives::ButtonBase, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<AppBarToggleButton, winrt::Microsoft::UI::Xaml::Controls::ICommandBarElement, winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton, winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonOverrides, winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBase, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        AppBarToggleButton(std::nullptr_t) noexcept {}
        AppBarToggleButton(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IAppBarToggleButton(ptr, take_ownership_from_abi) {}
        AppBarToggleButton();
        [[nodiscard]] static auto LabelProperty();
        [[nodiscard]] static auto IconProperty();
        [[nodiscard]] static auto LabelPositionProperty();
        [[nodiscard]] static auto KeyboardAcceleratorTextOverrideProperty();
        [[nodiscard]] static auto IsCompactProperty();
        [[nodiscard]] static auto IsInOverflowProperty();
        [[nodiscard]] static auto DynamicOverflowOrderProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES AutoSuggestBox : winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBox,
        impl::base<AutoSuggestBox, winrt::Microsoft::UI::Xaml::Controls::ItemsControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<AutoSuggestBox, winrt::Microsoft::UI::Xaml::Controls::IItemsControl, winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IItemContainerMapping, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        AutoSuggestBox(std::nullptr_t) noexcept {}
        AutoSuggestBox(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBox(ptr, take_ownership_from_abi) {}
        AutoSuggestBox();
        [[nodiscard]] static auto MaxSuggestionListHeightProperty();
        [[nodiscard]] static auto IsSuggestionListOpenProperty();
        [[nodiscard]] static auto TextMemberPathProperty();
        [[nodiscard]] static auto TextProperty();
        [[nodiscard]] static auto UpdateTextOnSelectProperty();
        [[nodiscard]] static auto PlaceholderTextProperty();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto AutoMaximizeSuggestionAreaProperty();
        [[nodiscard]] static auto TextBoxStyleProperty();
        [[nodiscard]] static auto QueryIconProperty();
        [[nodiscard]] static auto LightDismissOverlayModeProperty();
        [[nodiscard]] static auto DescriptionProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES AutoSuggestBoxQuerySubmittedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs,
        impl::base<AutoSuggestBoxQuerySubmittedEventArgs, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<AutoSuggestBoxQuerySubmittedEventArgs, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        AutoSuggestBoxQuerySubmittedEventArgs(std::nullptr_t) noexcept {}
        AutoSuggestBoxQuerySubmittedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs(ptr, take_ownership_from_abi) {}
        AutoSuggestBoxQuerySubmittedEventArgs();
    };
    struct WINRT_IMPL_EMPTY_BASES AutoSuggestBoxSuggestionChosenEventArgs : winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs,
        impl::base<AutoSuggestBoxSuggestionChosenEventArgs, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<AutoSuggestBoxSuggestionChosenEventArgs, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        AutoSuggestBoxSuggestionChosenEventArgs(std::nullptr_t) noexcept {}
        AutoSuggestBoxSuggestionChosenEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs(ptr, take_ownership_from_abi) {}
        AutoSuggestBoxSuggestionChosenEventArgs();
    };
    struct WINRT_IMPL_EMPTY_BASES AutoSuggestBoxTextChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs,
        impl::base<AutoSuggestBoxTextChangedEventArgs, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<AutoSuggestBoxTextChangedEventArgs, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        AutoSuggestBoxTextChangedEventArgs(std::nullptr_t) noexcept {}
        AutoSuggestBoxTextChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs(ptr, take_ownership_from_abi) {}
        AutoSuggestBoxTextChangedEventArgs();
        [[nodiscard]] static auto ReasonProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES BitmapIcon : winrt::Microsoft::UI::Xaml::Controls::IBitmapIcon,
        impl::base<BitmapIcon, winrt::Microsoft::UI::Xaml::Controls::IconElement, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<BitmapIcon, winrt::Microsoft::UI::Xaml::Controls::IIconElement, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        BitmapIcon(std::nullptr_t) noexcept {}
        BitmapIcon(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IBitmapIcon(ptr, take_ownership_from_abi) {}
        BitmapIcon();
        [[nodiscard]] static auto UriSourceProperty();
        [[nodiscard]] static auto ShowAsMonochromeProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES BitmapIconSource : winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSource,
        impl::base<BitmapIconSource, winrt::Microsoft::UI::Xaml::Controls::IconSource, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<BitmapIconSource, winrt::Microsoft::UI::Xaml::Controls::IIconSource, winrt::Microsoft::UI::Xaml::Controls::IIconSourceOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        BitmapIconSource(std::nullptr_t) noexcept {}
        BitmapIconSource(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSource(ptr, take_ownership_from_abi) {}
        BitmapIconSource();
        [[nodiscard]] static auto UriSourceProperty();
        [[nodiscard]] static auto ShowAsMonochromeProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES Border : winrt::Microsoft::UI::Xaml::Controls::IBorder,
        impl::base<Border, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<Border, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        Border(std::nullptr_t) noexcept {}
        Border(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IBorder(ptr, take_ownership_from_abi) {}
        Border();
        [[nodiscard]] static auto BorderBrushProperty();
        [[nodiscard]] static auto BorderThicknessProperty();
        [[nodiscard]] static auto BackgroundProperty();
        [[nodiscard]] static auto BackgroundSizingProperty();
        [[nodiscard]] static auto CornerRadiusProperty();
        [[nodiscard]] static auto PaddingProperty();
        [[nodiscard]] static auto ChildTransitionsProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES BreadcrumbBar : winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBar,
        impl::base<BreadcrumbBar, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<BreadcrumbBar, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        BreadcrumbBar(std::nullptr_t) noexcept {}
        BreadcrumbBar(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBar(ptr, take_ownership_from_abi) {}
        BreadcrumbBar();
        [[nodiscard]] static auto ItemsSourceProperty();
        [[nodiscard]] static auto ItemTemplateProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES BreadcrumbBarItem : winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItem,
        impl::base<BreadcrumbBarItem, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<BreadcrumbBarItem, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        BreadcrumbBarItem(std::nullptr_t) noexcept {}
        BreadcrumbBarItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItem(ptr, take_ownership_from_abi) {}
        BreadcrumbBarItem();
    };
    struct WINRT_IMPL_EMPTY_BASES BreadcrumbBarItemClickedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItemClickedEventArgs
    {
        BreadcrumbBarItemClickedEventArgs(std::nullptr_t) noexcept {}
        BreadcrumbBarItemClickedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IBreadcrumbBarItemClickedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES Button : winrt::Microsoft::UI::Xaml::Controls::IButton,
        impl::base<Button, winrt::Microsoft::UI::Xaml::Controls::Primitives::ButtonBase, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<Button, winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBase, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        Button(std::nullptr_t) noexcept {}
        Button(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IButton(ptr, take_ownership_from_abi) {}
        Button();
        [[nodiscard]] static auto FlyoutProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES CalendarDatePicker : winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePicker,
        impl::base<CalendarDatePicker, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<CalendarDatePicker, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        CalendarDatePicker(std::nullptr_t) noexcept {}
        CalendarDatePicker(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePicker(ptr, take_ownership_from_abi) {}
        CalendarDatePicker();
        [[nodiscard]] static auto DateProperty();
        [[nodiscard]] static auto IsCalendarOpenProperty();
        [[nodiscard]] static auto DateFormatProperty();
        [[nodiscard]] static auto PlaceholderTextProperty();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
        [[nodiscard]] static auto CalendarViewStyleProperty();
        [[nodiscard]] static auto LightDismissOverlayModeProperty();
        [[nodiscard]] static auto DescriptionProperty();
        [[nodiscard]] static auto MinDateProperty();
        [[nodiscard]] static auto MaxDateProperty();
        [[nodiscard]] static auto IsTodayHighlightedProperty();
        [[nodiscard]] static auto DisplayModeProperty();
        [[nodiscard]] static auto FirstDayOfWeekProperty();
        [[nodiscard]] static auto DayOfWeekFormatProperty();
        [[nodiscard]] static auto CalendarIdentifierProperty();
        [[nodiscard]] static auto IsOutOfScopeEnabledProperty();
        [[nodiscard]] static auto IsGroupLabelVisibleProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES CalendarDatePickerDateChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs
    {
        CalendarDatePickerDateChangedEventArgs(std::nullptr_t) noexcept {}
        CalendarDatePickerDateChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES CalendarView : winrt::Microsoft::UI::Xaml::Controls::ICalendarView,
        impl::base<CalendarView, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<CalendarView, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        CalendarView(std::nullptr_t) noexcept {}
        CalendarView(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ICalendarView(ptr, take_ownership_from_abi) {}
        CalendarView();
        [[nodiscard]] static auto CalendarIdentifierProperty();
        [[nodiscard]] static auto DayOfWeekFormatProperty();
        [[nodiscard]] static auto IsGroupLabelVisibleProperty();
        [[nodiscard]] static auto DisplayModeProperty();
        [[nodiscard]] static auto FirstDayOfWeekProperty();
        [[nodiscard]] static auto IsOutOfScopeEnabledProperty();
        [[nodiscard]] static auto IsTodayHighlightedProperty();
        [[nodiscard]] static auto MaxDateProperty();
        [[nodiscard]] static auto MinDateProperty();
        [[nodiscard]] static auto NumberOfWeeksInViewProperty();
        [[nodiscard]] static auto SelectedDatesProperty();
        [[nodiscard]] static auto SelectionModeProperty();
        [[nodiscard]] static auto TemplateSettingsProperty();
        [[nodiscard]] static auto FocusBorderBrushProperty();
        [[nodiscard]] static auto SelectedHoverBorderBrushProperty();
        [[nodiscard]] static auto SelectedPressedBorderBrushProperty();
        [[nodiscard]] static auto SelectedDisabledBorderBrushProperty();
        [[nodiscard]] static auto SelectedBorderBrushProperty();
        [[nodiscard]] static auto HoverBorderBrushProperty();
        [[nodiscard]] static auto PressedBorderBrushProperty();
        [[nodiscard]] static auto TodaySelectedInnerBorderBrushProperty();
        [[nodiscard]] static auto BlackoutStrikethroughBrushProperty();
        [[nodiscard]] static auto CalendarItemBorderBrushProperty();
        [[nodiscard]] static auto BlackoutBackgroundProperty();
        [[nodiscard]] static auto OutOfScopeBackgroundProperty();
        [[nodiscard]] static auto CalendarItemBackgroundProperty();
        [[nodiscard]] static auto CalendarItemHoverBackgroundProperty();
        [[nodiscard]] static auto CalendarItemPressedBackgroundProperty();
        [[nodiscard]] static auto CalendarItemDisabledBackgroundProperty();
        [[nodiscard]] static auto TodayBackgroundProperty();
        [[nodiscard]] static auto TodayBlackoutBackgroundProperty();
        [[nodiscard]] static auto TodayHoverBackgroundProperty();
        [[nodiscard]] static auto TodayPressedBackgroundProperty();
        [[nodiscard]] static auto TodayDisabledBackgroundProperty();
        [[nodiscard]] static auto PressedForegroundProperty();
        [[nodiscard]] static auto TodayForegroundProperty();
        [[nodiscard]] static auto BlackoutForegroundProperty();
        [[nodiscard]] static auto TodayBlackoutForegroundProperty();
        [[nodiscard]] static auto SelectedForegroundProperty();
        [[nodiscard]] static auto SelectedHoverForegroundProperty();
        [[nodiscard]] static auto SelectedPressedForegroundProperty();
        [[nodiscard]] static auto SelectedDisabledForegroundProperty();
        [[nodiscard]] static auto OutOfScopeForegroundProperty();
        [[nodiscard]] static auto OutOfScopeHoverForegroundProperty();
        [[nodiscard]] static auto OutOfScopePressedForegroundProperty();
        [[nodiscard]] static auto CalendarItemForegroundProperty();
        [[nodiscard]] static auto DisabledForegroundProperty();
        [[nodiscard]] static auto DayItemFontFamilyProperty();
        [[nodiscard]] static auto DayItemFontSizeProperty();
        [[nodiscard]] static auto DayItemFontStyleProperty();
        [[nodiscard]] static auto DayItemFontWeightProperty();
        [[nodiscard]] static auto TodayFontWeightProperty();
        [[nodiscard]] static auto FirstOfMonthLabelFontFamilyProperty();
        [[nodiscard]] static auto FirstOfMonthLabelFontSizeProperty();
        [[nodiscard]] static auto FirstOfMonthLabelFontStyleProperty();
        [[nodiscard]] static auto FirstOfMonthLabelFontWeightProperty();
        [[nodiscard]] static auto MonthYearItemFontFamilyProperty();
        [[nodiscard]] static auto MonthYearItemFontSizeProperty();
        [[nodiscard]] static auto MonthYearItemFontStyleProperty();
        [[nodiscard]] static auto MonthYearItemFontWeightProperty();
        [[nodiscard]] static auto FirstOfYearDecadeLabelFontFamilyProperty();
        [[nodiscard]] static auto FirstOfYearDecadeLabelFontSizeProperty();
        [[nodiscard]] static auto FirstOfYearDecadeLabelFontStyleProperty();
        [[nodiscard]] static auto FirstOfYearDecadeLabelFontWeightProperty();
        [[nodiscard]] static auto DayItemMarginProperty();
        [[nodiscard]] static auto MonthYearItemMarginProperty();
        [[nodiscard]] static auto FirstOfMonthLabelMarginProperty();
        [[nodiscard]] static auto FirstOfYearDecadeLabelMarginProperty();
        [[nodiscard]] static auto HorizontalDayItemAlignmentProperty();
        [[nodiscard]] static auto VerticalDayItemAlignmentProperty();
        [[nodiscard]] static auto HorizontalFirstOfMonthLabelAlignmentProperty();
        [[nodiscard]] static auto VerticalFirstOfMonthLabelAlignmentProperty();
        [[nodiscard]] static auto CalendarItemBorderThicknessProperty();
        [[nodiscard]] static auto CalendarViewDayItemStyleProperty();
        [[nodiscard]] static auto CalendarItemCornerRadiusProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES CalendarViewDayItem : winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItem,
        impl::base<CalendarViewDayItem, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<CalendarViewDayItem, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        CalendarViewDayItem(std::nullptr_t) noexcept {}
        CalendarViewDayItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItem(ptr, take_ownership_from_abi) {}
        CalendarViewDayItem();
        [[nodiscard]] static auto IsBlackoutProperty();
        [[nodiscard]] static auto DateProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES CalendarViewDayItemChangingEventArgs : winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs
    {
        CalendarViewDayItemChangingEventArgs(std::nullptr_t) noexcept {}
        CalendarViewDayItemChangingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES CalendarViewSelectedDatesChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs
    {
        CalendarViewSelectedDatesChangedEventArgs(std::nullptr_t) noexcept {}
        CalendarViewSelectedDatesChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES CandidateWindowBoundsChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs
    {
        CandidateWindowBoundsChangedEventArgs(std::nullptr_t) noexcept {}
        CandidateWindowBoundsChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES Canvas : winrt::Microsoft::UI::Xaml::Controls::ICanvas,
        impl::base<Canvas, winrt::Microsoft::UI::Xaml::Controls::Panel, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<Canvas, winrt::Microsoft::UI::Xaml::Controls::IPanel, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        Canvas(std::nullptr_t) noexcept {}
        Canvas(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ICanvas(ptr, take_ownership_from_abi) {}
        Canvas();
        [[nodiscard]] static auto LeftProperty();
        static auto GetLeft(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetLeft(winrt::Microsoft::UI::Xaml::UIElement const& element, double length);
        [[nodiscard]] static auto TopProperty();
        static auto GetTop(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetTop(winrt::Microsoft::UI::Xaml::UIElement const& element, double length);
        [[nodiscard]] static auto ZIndexProperty();
        static auto GetZIndex(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetZIndex(winrt::Microsoft::UI::Xaml::UIElement const& element, int32_t value);
    };
    struct WINRT_IMPL_EMPTY_BASES CheckBox : winrt::Microsoft::UI::Xaml::Controls::ICheckBox,
        impl::base<CheckBox, winrt::Microsoft::UI::Xaml::Controls::Primitives::ToggleButton, winrt::Microsoft::UI::Xaml::Controls::Primitives::ButtonBase, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<CheckBox, winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton, winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonOverrides, winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBase, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        CheckBox(std::nullptr_t) noexcept {}
        CheckBox(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ICheckBox(ptr, take_ownership_from_abi) {}
        CheckBox();
    };
    struct WINRT_IMPL_EMPTY_BASES ChoosingGroupHeaderContainerEventArgs : winrt::Microsoft::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs
    {
        ChoosingGroupHeaderContainerEventArgs(std::nullptr_t) noexcept {}
        ChoosingGroupHeaderContainerEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs(ptr, take_ownership_from_abi) {}
        ChoosingGroupHeaderContainerEventArgs();
    };
    struct WINRT_IMPL_EMPTY_BASES ChoosingItemContainerEventArgs : winrt::Microsoft::UI::Xaml::Controls::IChoosingItemContainerEventArgs
    {
        ChoosingItemContainerEventArgs(std::nullptr_t) noexcept {}
        ChoosingItemContainerEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IChoosingItemContainerEventArgs(ptr, take_ownership_from_abi) {}
        ChoosingItemContainerEventArgs();
    };
    struct WINRT_IMPL_EMPTY_BASES CleanUpVirtualizedItemEventArgs : winrt::Microsoft::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs,
        impl::base<CleanUpVirtualizedItemEventArgs, winrt::Microsoft::UI::Xaml::RoutedEventArgs>,
        impl::require<CleanUpVirtualizedItemEventArgs, winrt::Microsoft::UI::Xaml::IRoutedEventArgs>
    {
        CleanUpVirtualizedItemEventArgs(std::nullptr_t) noexcept {}
        CleanUpVirtualizedItemEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ColorChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IColorChangedEventArgs
    {
        ColorChangedEventArgs(std::nullptr_t) noexcept {}
        ColorChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IColorChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ColorPicker : winrt::Microsoft::UI::Xaml::Controls::IColorPicker,
        impl::base<ColorPicker, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ColorPicker, winrt::Microsoft::UI::Xaml::Controls::IColorPicker2, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ColorPicker(std::nullptr_t) noexcept {}
        ColorPicker(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IColorPicker(ptr, take_ownership_from_abi) {}
        ColorPicker();
        [[nodiscard]] static auto ColorProperty();
        [[nodiscard]] static auto PreviousColorProperty();
        [[nodiscard]] static auto IsAlphaEnabledProperty();
        [[nodiscard]] static auto IsColorSpectrumVisibleProperty();
        [[nodiscard]] static auto IsColorPreviewVisibleProperty();
        [[nodiscard]] static auto IsColorSliderVisibleProperty();
        [[nodiscard]] static auto IsAlphaSliderVisibleProperty();
        [[nodiscard]] static auto IsMoreButtonVisibleProperty();
        [[nodiscard]] static auto IsColorChannelTextInputVisibleProperty();
        [[nodiscard]] static auto IsAlphaTextInputVisibleProperty();
        [[nodiscard]] static auto IsHexInputVisibleProperty();
        [[nodiscard]] static auto MinHueProperty();
        [[nodiscard]] static auto MaxHueProperty();
        [[nodiscard]] static auto MinSaturationProperty();
        [[nodiscard]] static auto MaxSaturationProperty();
        [[nodiscard]] static auto MinValueProperty();
        [[nodiscard]] static auto MaxValueProperty();
        [[nodiscard]] static auto ColorSpectrumShapeProperty();
        [[nodiscard]] static auto ColorSpectrumComponentsProperty();
        [[nodiscard]] static auto OrientationProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ColumnDefinition : winrt::Microsoft::UI::Xaml::Controls::IColumnDefinition,
        impl::base<ColumnDefinition, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ColumnDefinition, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ColumnDefinition(std::nullptr_t) noexcept {}
        ColumnDefinition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IColumnDefinition(ptr, take_ownership_from_abi) {}
        ColumnDefinition();
        [[nodiscard]] static auto WidthProperty();
        [[nodiscard]] static auto MaxWidthProperty();
        [[nodiscard]] static auto MinWidthProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ColumnDefinitionCollection : winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Controls::ColumnDefinition>
    {
        ColumnDefinitionCollection(std::nullptr_t) noexcept {}
        ColumnDefinitionCollection(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Controls::ColumnDefinition>(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ComboBox : winrt::Microsoft::UI::Xaml::Controls::IComboBox,
        impl::base<ComboBox, winrt::Microsoft::UI::Xaml::Controls::Primitives::Selector, winrt::Microsoft::UI::Xaml::Controls::ItemsControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ComboBox, winrt::Microsoft::UI::Xaml::Controls::IComboBoxOverrides, winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelector, winrt::Microsoft::UI::Xaml::Controls::IItemsControl, winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IItemContainerMapping, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ComboBox(std::nullptr_t) noexcept {}
        ComboBox(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IComboBox(ptr, take_ownership_from_abi) {}
        ComboBox();
        [[nodiscard]] static auto IsEditableProperty();
        [[nodiscard]] static auto IsDropDownOpenProperty();
        [[nodiscard]] static auto MaxDropDownHeightProperty();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
        [[nodiscard]] static auto PlaceholderTextProperty();
        [[nodiscard]] static auto LightDismissOverlayModeProperty();
        [[nodiscard]] static auto IsTextSearchEnabledProperty();
        [[nodiscard]] static auto SelectionChangedTriggerProperty();
        [[nodiscard]] static auto PlaceholderForegroundProperty();
        [[nodiscard]] static auto TextProperty();
        [[nodiscard]] static auto TextBoxStyleProperty();
        [[nodiscard]] static auto DescriptionProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ComboBoxItem : winrt::Microsoft::UI::Xaml::Controls::IComboBoxItem,
        impl::base<ComboBoxItem, winrt::Microsoft::UI::Xaml::Controls::Primitives::SelectorItem, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ComboBoxItem, winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ComboBoxItem(std::nullptr_t) noexcept {}
        ComboBoxItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IComboBoxItem(ptr, take_ownership_from_abi) {}
        ComboBoxItem();
    };
    struct WINRT_IMPL_EMPTY_BASES ComboBoxTextSubmittedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IComboBoxTextSubmittedEventArgs
    {
        ComboBoxTextSubmittedEventArgs(std::nullptr_t) noexcept {}
        ComboBoxTextSubmittedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IComboBoxTextSubmittedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES CommandBar : winrt::Microsoft::UI::Xaml::Controls::ICommandBar,
        impl::base<CommandBar, winrt::Microsoft::UI::Xaml::Controls::AppBar, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<CommandBar, winrt::Microsoft::UI::Xaml::Controls::IAppBar, winrt::Microsoft::UI::Xaml::Controls::IAppBarOverrides, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        CommandBar(std::nullptr_t) noexcept {}
        CommandBar(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ICommandBar(ptr, take_ownership_from_abi) {}
        CommandBar();
        [[nodiscard]] static auto PrimaryCommandsProperty();
        [[nodiscard]] static auto SecondaryCommandsProperty();
        [[nodiscard]] static auto CommandBarOverflowPresenterStyleProperty();
        [[nodiscard]] static auto DefaultLabelPositionProperty();
        [[nodiscard]] static auto OverflowButtonVisibilityProperty();
        [[nodiscard]] static auto IsDynamicOverflowEnabledProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES CommandBarFlyout : winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout,
        impl::base<CommandBarFlyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<CommandBarFlyout, winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout2, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        CommandBarFlyout(std::nullptr_t) noexcept {}
        CommandBarFlyout(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout(ptr, take_ownership_from_abi) {}
        CommandBarFlyout();
    };
    struct WINRT_IMPL_EMPTY_BASES CommandBarOverflowPresenter : winrt::Microsoft::UI::Xaml::Controls::ICommandBarOverflowPresenter,
        impl::base<CommandBarOverflowPresenter, winrt::Microsoft::UI::Xaml::Controls::ItemsControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<CommandBarOverflowPresenter, winrt::Microsoft::UI::Xaml::Controls::IItemsControl, winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IItemContainerMapping, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        CommandBarOverflowPresenter(std::nullptr_t) noexcept {}
        CommandBarOverflowPresenter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ICommandBarOverflowPresenter(ptr, take_ownership_from_abi) {}
        CommandBarOverflowPresenter();
    };
    struct WINRT_IMPL_EMPTY_BASES ContainerContentChangingEventArgs : winrt::Microsoft::UI::Xaml::Controls::IContainerContentChangingEventArgs
    {
        ContainerContentChangingEventArgs(std::nullptr_t) noexcept {}
        ContainerContentChangingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IContainerContentChangingEventArgs(ptr, take_ownership_from_abi) {}
        ContainerContentChangingEventArgs();
    };
    struct WINRT_IMPL_EMPTY_BASES ContentControl : winrt::Microsoft::UI::Xaml::Controls::IContentControl,
        impl::base<ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ContentControl(std::nullptr_t) noexcept {}
        ContentControl(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IContentControl(ptr, take_ownership_from_abi) {}
        ContentControl();
        [[nodiscard]] static auto ContentProperty();
        [[nodiscard]] static auto ContentTemplateProperty();
        [[nodiscard]] static auto ContentTemplateSelectorProperty();
        [[nodiscard]] static auto ContentTransitionsProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ContentDialog : winrt::Microsoft::UI::Xaml::Controls::IContentDialog,
        impl::base<ContentDialog, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ContentDialog, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ContentDialog(std::nullptr_t) noexcept {}
        ContentDialog(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IContentDialog(ptr, take_ownership_from_abi) {}
        ContentDialog();
        [[nodiscard]] static auto TitleProperty();
        [[nodiscard]] static auto TitleTemplateProperty();
        [[nodiscard]] static auto FullSizeDesiredProperty();
        [[nodiscard]] static auto PrimaryButtonTextProperty();
        [[nodiscard]] static auto SecondaryButtonTextProperty();
        [[nodiscard]] static auto CloseButtonTextProperty();
        [[nodiscard]] static auto PrimaryButtonCommandProperty();
        [[nodiscard]] static auto SecondaryButtonCommandProperty();
        [[nodiscard]] static auto CloseButtonCommandProperty();
        [[nodiscard]] static auto PrimaryButtonCommandParameterProperty();
        [[nodiscard]] static auto SecondaryButtonCommandParameterProperty();
        [[nodiscard]] static auto CloseButtonCommandParameterProperty();
        [[nodiscard]] static auto IsPrimaryButtonEnabledProperty();
        [[nodiscard]] static auto IsSecondaryButtonEnabledProperty();
        [[nodiscard]] static auto PrimaryButtonStyleProperty();
        [[nodiscard]] static auto SecondaryButtonStyleProperty();
        [[nodiscard]] static auto CloseButtonStyleProperty();
        [[nodiscard]] static auto DefaultButtonProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ContentDialogButtonClickDeferral : winrt::Microsoft::UI::Xaml::Controls::IContentDialogButtonClickDeferral
    {
        ContentDialogButtonClickDeferral(std::nullptr_t) noexcept {}
        ContentDialogButtonClickDeferral(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IContentDialogButtonClickDeferral(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ContentDialogButtonClickEventArgs : winrt::Microsoft::UI::Xaml::Controls::IContentDialogButtonClickEventArgs
    {
        ContentDialogButtonClickEventArgs(std::nullptr_t) noexcept {}
        ContentDialogButtonClickEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IContentDialogButtonClickEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ContentDialogClosedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosedEventArgs
    {
        ContentDialogClosedEventArgs(std::nullptr_t) noexcept {}
        ContentDialogClosedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ContentDialogClosingDeferral : winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosingDeferral
    {
        ContentDialogClosingDeferral(std::nullptr_t) noexcept {}
        ContentDialogClosingDeferral(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosingDeferral(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ContentDialogClosingEventArgs : winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosingEventArgs
    {
        ContentDialogClosingEventArgs(std::nullptr_t) noexcept {}
        ContentDialogClosingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IContentDialogClosingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ContentDialogOpenedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IContentDialogOpenedEventArgs
    {
        ContentDialogOpenedEventArgs(std::nullptr_t) noexcept {}
        ContentDialogOpenedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IContentDialogOpenedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ContentPresenter : winrt::Microsoft::UI::Xaml::Controls::IContentPresenter,
        impl::base<ContentPresenter, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ContentPresenter, winrt::Microsoft::UI::Xaml::Controls::IContentPresenterOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ContentPresenter(std::nullptr_t) noexcept {}
        ContentPresenter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IContentPresenter(ptr, take_ownership_from_abi) {}
        ContentPresenter();
        [[nodiscard]] static auto ContentProperty();
        [[nodiscard]] static auto ContentTemplateProperty();
        [[nodiscard]] static auto ContentTemplateSelectorProperty();
        [[nodiscard]] static auto ContentTransitionsProperty();
        [[nodiscard]] static auto FontSizeProperty();
        [[nodiscard]] static auto FontFamilyProperty();
        [[nodiscard]] static auto FontWeightProperty();
        [[nodiscard]] static auto FontStyleProperty();
        [[nodiscard]] static auto FontStretchProperty();
        [[nodiscard]] static auto CharacterSpacingProperty();
        [[nodiscard]] static auto ForegroundProperty();
        [[nodiscard]] static auto OpticalMarginAlignmentProperty();
        [[nodiscard]] static auto TextLineBoundsProperty();
        [[nodiscard]] static auto IsTextScaleFactorEnabledProperty();
        [[nodiscard]] static auto TextWrappingProperty();
        [[nodiscard]] static auto MaxLinesProperty();
        [[nodiscard]] static auto LineStackingStrategyProperty();
        [[nodiscard]] static auto LineHeightProperty();
        [[nodiscard]] static auto BorderBrushProperty();
        [[nodiscard]] static auto BorderThicknessProperty();
        [[nodiscard]] static auto CornerRadiusProperty();
        [[nodiscard]] static auto PaddingProperty();
        [[nodiscard]] static auto BackgroundProperty();
        [[nodiscard]] static auto BackgroundSizingProperty();
        [[nodiscard]] static auto HorizontalContentAlignmentProperty();
        [[nodiscard]] static auto VerticalContentAlignmentProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ContextMenuEventArgs : winrt::Microsoft::UI::Xaml::Controls::IContextMenuEventArgs,
        impl::base<ContextMenuEventArgs, winrt::Microsoft::UI::Xaml::RoutedEventArgs>,
        impl::require<ContextMenuEventArgs, winrt::Microsoft::UI::Xaml::IRoutedEventArgs>
    {
        ContextMenuEventArgs(std::nullptr_t) noexcept {}
        ContextMenuEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IContextMenuEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES Control : winrt::Microsoft::UI::Xaml::Controls::IControl,
        impl::base<Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<Control, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        Control(std::nullptr_t) noexcept {}
        Control(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IControl(ptr, take_ownership_from_abi) {}
        [[nodiscard]] static auto IsFocusEngagementEnabledProperty();
        [[nodiscard]] static auto IsFocusEngagedProperty();
        [[nodiscard]] static auto RequiresPointerProperty();
        [[nodiscard]] static auto FontSizeProperty();
        [[nodiscard]] static auto FontFamilyProperty();
        [[nodiscard]] static auto FontWeightProperty();
        [[nodiscard]] static auto FontStyleProperty();
        [[nodiscard]] static auto FontStretchProperty();
        [[nodiscard]] static auto CharacterSpacingProperty();
        [[nodiscard]] static auto ForegroundProperty();
        [[nodiscard]] static auto IsTextScaleFactorEnabledProperty();
        [[nodiscard]] static auto IsEnabledProperty();
        [[nodiscard]] static auto TabNavigationProperty();
        [[nodiscard]] static auto TemplateProperty();
        [[nodiscard]] static auto PaddingProperty();
        [[nodiscard]] static auto HorizontalContentAlignmentProperty();
        [[nodiscard]] static auto VerticalContentAlignmentProperty();
        [[nodiscard]] static auto BackgroundProperty();
        [[nodiscard]] static auto BackgroundSizingProperty();
        [[nodiscard]] static auto BorderThicknessProperty();
        [[nodiscard]] static auto BorderBrushProperty();
        [[nodiscard]] static auto DefaultStyleKeyProperty();
        [[nodiscard]] static auto DefaultStyleResourceUriProperty();
        [[nodiscard]] static auto ElementSoundModeProperty();
        [[nodiscard]] static auto CornerRadiusProperty();
        [[nodiscard]] static auto IsTemplateFocusTargetProperty();
        static auto GetIsTemplateFocusTarget(winrt::Microsoft::UI::Xaml::FrameworkElement const& element);
        static auto SetIsTemplateFocusTarget(winrt::Microsoft::UI::Xaml::FrameworkElement const& element, bool value);
        [[nodiscard]] static auto IsTemplateKeyTipTargetProperty();
        static auto GetIsTemplateKeyTipTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetIsTemplateKeyTipTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool value);
    };
    struct WINRT_IMPL_EMPTY_BASES ControlTemplate : winrt::Microsoft::UI::Xaml::Controls::IControlTemplate,
        impl::base<ControlTemplate, winrt::Microsoft::UI::Xaml::FrameworkTemplate, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ControlTemplate, winrt::Microsoft::UI::Xaml::IFrameworkTemplate, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ControlTemplate(std::nullptr_t) noexcept {}
        ControlTemplate(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IControlTemplate(ptr, take_ownership_from_abi) {}
        ControlTemplate();
    };
    struct WINRT_IMPL_EMPTY_BASES CoreWebView2InitializedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ICoreWebView2InitializedEventArgs
    {
        CoreWebView2InitializedEventArgs(std::nullptr_t) noexcept {}
        CoreWebView2InitializedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ICoreWebView2InitializedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES DataTemplateSelector : winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelector,
        impl::require<DataTemplateSelector, winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelectorOverrides, winrt::Microsoft::UI::Xaml::IElementFactory>
    {
        DataTemplateSelector(std::nullptr_t) noexcept {}
        DataTemplateSelector(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelector(ptr, take_ownership_from_abi) {}
        DataTemplateSelector();
    };
    struct WINRT_IMPL_EMPTY_BASES DatePickedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IDatePickedEventArgs,
        impl::base<DatePickedEventArgs, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<DatePickedEventArgs, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        DatePickedEventArgs(std::nullptr_t) noexcept {}
        DatePickedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IDatePickedEventArgs(ptr, take_ownership_from_abi) {}
        DatePickedEventArgs();
    };
    struct WINRT_IMPL_EMPTY_BASES DatePicker : winrt::Microsoft::UI::Xaml::Controls::IDatePicker,
        impl::base<DatePicker, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<DatePicker, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        DatePicker(std::nullptr_t) noexcept {}
        DatePicker(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IDatePicker(ptr, take_ownership_from_abi) {}
        DatePicker();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
        [[nodiscard]] static auto CalendarIdentifierProperty();
        [[nodiscard]] static auto DateProperty();
        [[nodiscard]] static auto DayVisibleProperty();
        [[nodiscard]] static auto MonthVisibleProperty();
        [[nodiscard]] static auto YearVisibleProperty();
        [[nodiscard]] static auto DayFormatProperty();
        [[nodiscard]] static auto MonthFormatProperty();
        [[nodiscard]] static auto YearFormatProperty();
        [[nodiscard]] static auto MinYearProperty();
        [[nodiscard]] static auto MaxYearProperty();
        [[nodiscard]] static auto OrientationProperty();
        [[nodiscard]] static auto LightDismissOverlayModeProperty();
        [[nodiscard]] static auto SelectedDateProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES DatePickerFlyout : winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyout,
        impl::base<DatePickerFlyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::PickerFlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<DatePickerFlyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        DatePickerFlyout(std::nullptr_t) noexcept {}
        DatePickerFlyout(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyout(ptr, take_ownership_from_abi) {}
        DatePickerFlyout();
        [[nodiscard]] static auto CalendarIdentifierProperty();
        [[nodiscard]] static auto DateProperty();
        [[nodiscard]] static auto DayVisibleProperty();
        [[nodiscard]] static auto MonthVisibleProperty();
        [[nodiscard]] static auto YearVisibleProperty();
        [[nodiscard]] static auto MinYearProperty();
        [[nodiscard]] static auto MaxYearProperty();
        [[nodiscard]] static auto DayFormatProperty();
        [[nodiscard]] static auto MonthFormatProperty();
        [[nodiscard]] static auto YearFormatProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES DatePickerFlyoutItem : winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItem,
        impl::base<DatePickerFlyoutItem, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<DatePickerFlyoutItem, winrt::Microsoft::UI::Xaml::Data::ICustomPropertyProvider, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        DatePickerFlyoutItem(std::nullptr_t) noexcept {}
        DatePickerFlyoutItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutItem(ptr, take_ownership_from_abi) {}
        [[nodiscard]] static auto PrimaryTextProperty();
        [[nodiscard]] static auto SecondaryTextProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES DatePickerFlyoutPresenter : winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenter,
        impl::base<DatePickerFlyoutPresenter, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<DatePickerFlyoutPresenter, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        DatePickerFlyoutPresenter(std::nullptr_t) noexcept {}
        DatePickerFlyoutPresenter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IDatePickerFlyoutPresenter(ptr, take_ownership_from_abi) {}
        [[nodiscard]] static auto IsDefaultShadowEnabledProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES DatePickerSelectedValueChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IDatePickerSelectedValueChangedEventArgs
    {
        DatePickerSelectedValueChangedEventArgs(std::nullptr_t) noexcept {}
        DatePickerSelectedValueChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IDatePickerSelectedValueChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES DatePickerValueChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IDatePickerValueChangedEventArgs
    {
        DatePickerValueChangedEventArgs(std::nullptr_t) noexcept {}
        DatePickerValueChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IDatePickerValueChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES DragItemsCompletedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IDragItemsCompletedEventArgs
    {
        DragItemsCompletedEventArgs(std::nullptr_t) noexcept {}
        DragItemsCompletedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IDragItemsCompletedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES DragItemsStartingEventArgs : winrt::Microsoft::UI::Xaml::Controls::IDragItemsStartingEventArgs
    {
        DragItemsStartingEventArgs(std::nullptr_t) noexcept {}
        DragItemsStartingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IDragItemsStartingEventArgs(ptr, take_ownership_from_abi) {}
        DragItemsStartingEventArgs();
    };
    struct WINRT_IMPL_EMPTY_BASES DropDownButton : winrt::Microsoft::UI::Xaml::Controls::IDropDownButton,
        impl::base<DropDownButton, winrt::Microsoft::UI::Xaml::Controls::Button, winrt::Microsoft::UI::Xaml::Controls::Primitives::ButtonBase, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<DropDownButton, winrt::Microsoft::UI::Xaml::Controls::IButton, winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBase, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        DropDownButton(std::nullptr_t) noexcept {}
        DropDownButton(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IDropDownButton(ptr, take_ownership_from_abi) {}
        DropDownButton();
    };
    struct WINRT_IMPL_EMPTY_BASES DynamicOverflowItemsChangingEventArgs : winrt::Microsoft::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs
    {
        DynamicOverflowItemsChangingEventArgs(std::nullptr_t) noexcept {}
        DynamicOverflowItemsChangingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs(ptr, take_ownership_from_abi) {}
        DynamicOverflowItemsChangingEventArgs();
    };
    struct WINRT_IMPL_EMPTY_BASES Expander : winrt::Microsoft::UI::Xaml::Controls::IExpander,
        impl::base<Expander, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<Expander, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        Expander(std::nullptr_t) noexcept {}
        Expander(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IExpander(ptr, take_ownership_from_abi) {}
        Expander();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
        [[nodiscard]] static auto HeaderTemplateSelectorProperty();
        [[nodiscard]] static auto IsExpandedProperty();
        [[nodiscard]] static auto ExpandDirectionProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ExpanderCollapsedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IExpanderCollapsedEventArgs
    {
        ExpanderCollapsedEventArgs(std::nullptr_t) noexcept {}
        ExpanderCollapsedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IExpanderCollapsedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ExpanderExpandingEventArgs : winrt::Microsoft::UI::Xaml::Controls::IExpanderExpandingEventArgs
    {
        ExpanderExpandingEventArgs(std::nullptr_t) noexcept {}
        ExpanderExpandingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IExpanderExpandingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ExpanderTemplateSettings : winrt::Microsoft::UI::Xaml::Controls::IExpanderTemplateSettings,
        impl::base<ExpanderTemplateSettings, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ExpanderTemplateSettings, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ExpanderTemplateSettings(std::nullptr_t) noexcept {}
        ExpanderTemplateSettings(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IExpanderTemplateSettings(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES FlipView : winrt::Microsoft::UI::Xaml::Controls::IFlipView,
        impl::base<FlipView, winrt::Microsoft::UI::Xaml::Controls::Primitives::Selector, winrt::Microsoft::UI::Xaml::Controls::ItemsControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<FlipView, winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelector, winrt::Microsoft::UI::Xaml::Controls::IItemsControl, winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IItemContainerMapping, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        FlipView(std::nullptr_t) noexcept {}
        FlipView(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IFlipView(ptr, take_ownership_from_abi) {}
        FlipView();
        [[nodiscard]] static auto UseTouchAnimationsForAllNavigationProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES FlipViewItem : winrt::Microsoft::UI::Xaml::Controls::IFlipViewItem,
        impl::base<FlipViewItem, winrt::Microsoft::UI::Xaml::Controls::Primitives::SelectorItem, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<FlipViewItem, winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        FlipViewItem(std::nullptr_t) noexcept {}
        FlipViewItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IFlipViewItem(ptr, take_ownership_from_abi) {}
        FlipViewItem();
    };
    struct WINRT_IMPL_EMPTY_BASES Flyout : winrt::Microsoft::UI::Xaml::Controls::IFlyout,
        impl::base<Flyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<Flyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        Flyout(std::nullptr_t) noexcept {}
        Flyout(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IFlyout(ptr, take_ownership_from_abi) {}
        Flyout();
        [[nodiscard]] static auto ContentProperty();
        [[nodiscard]] static auto FlyoutPresenterStyleProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES FlyoutPresenter : winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenter,
        impl::base<FlyoutPresenter, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<FlyoutPresenter, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        FlyoutPresenter(std::nullptr_t) noexcept {}
        FlyoutPresenter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IFlyoutPresenter(ptr, take_ownership_from_abi) {}
        FlyoutPresenter();
        [[nodiscard]] static auto IsDefaultShadowEnabledProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES FocusDisengagedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IFocusDisengagedEventArgs,
        impl::base<FocusDisengagedEventArgs, winrt::Microsoft::UI::Xaml::RoutedEventArgs>,
        impl::require<FocusDisengagedEventArgs, winrt::Microsoft::UI::Xaml::IRoutedEventArgs>
    {
        FocusDisengagedEventArgs(std::nullptr_t) noexcept {}
        FocusDisengagedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IFocusDisengagedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES FocusEngagedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IFocusEngagedEventArgs,
        impl::base<FocusEngagedEventArgs, winrt::Microsoft::UI::Xaml::RoutedEventArgs>,
        impl::require<FocusEngagedEventArgs, winrt::Microsoft::UI::Xaml::IRoutedEventArgs>
    {
        FocusEngagedEventArgs(std::nullptr_t) noexcept {}
        FocusEngagedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IFocusEngagedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES FontIcon : winrt::Microsoft::UI::Xaml::Controls::IFontIcon,
        impl::base<FontIcon, winrt::Microsoft::UI::Xaml::Controls::IconElement, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<FontIcon, winrt::Microsoft::UI::Xaml::Controls::IIconElement, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        FontIcon(std::nullptr_t) noexcept {}
        FontIcon(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IFontIcon(ptr, take_ownership_from_abi) {}
        FontIcon();
        [[nodiscard]] static auto GlyphProperty();
        [[nodiscard]] static auto FontSizeProperty();
        [[nodiscard]] static auto FontFamilyProperty();
        [[nodiscard]] static auto FontWeightProperty();
        [[nodiscard]] static auto FontStyleProperty();
        [[nodiscard]] static auto IsTextScaleFactorEnabledProperty();
        [[nodiscard]] static auto MirroredWhenRightToLeftProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES FontIconSource : winrt::Microsoft::UI::Xaml::Controls::IFontIconSource,
        impl::base<FontIconSource, winrt::Microsoft::UI::Xaml::Controls::IconSource, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<FontIconSource, winrt::Microsoft::UI::Xaml::Controls::IIconSource, winrt::Microsoft::UI::Xaml::Controls::IIconSourceOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        FontIconSource(std::nullptr_t) noexcept {}
        FontIconSource(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IFontIconSource(ptr, take_ownership_from_abi) {}
        FontIconSource();
        [[nodiscard]] static auto GlyphProperty();
        [[nodiscard]] static auto FontSizeProperty();
        [[nodiscard]] static auto FontFamilyProperty();
        [[nodiscard]] static auto FontWeightProperty();
        [[nodiscard]] static auto FontStyleProperty();
        [[nodiscard]] static auto IsTextScaleFactorEnabledProperty();
        [[nodiscard]] static auto MirroredWhenRightToLeftProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES Frame : winrt::Microsoft::UI::Xaml::Controls::IFrame,
        impl::base<Frame, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<Frame, winrt::Microsoft::UI::Xaml::Controls::INavigate, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        Frame(std::nullptr_t) noexcept {}
        Frame(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IFrame(ptr, take_ownership_from_abi) {}
        Frame();
        using winrt::Microsoft::UI::Xaml::Controls::IFrame::Navigate;
        using impl::consume_t<Frame, winrt::Microsoft::UI::Xaml::Controls::INavigate>::Navigate;
        [[nodiscard]] static auto CacheSizeProperty();
        [[nodiscard]] static auto CanGoBackProperty();
        [[nodiscard]] static auto CanGoForwardProperty();
        [[nodiscard]] static auto CurrentSourcePageTypeProperty();
        [[nodiscard]] static auto SourcePageTypeProperty();
        [[nodiscard]] static auto BackStackDepthProperty();
        [[nodiscard]] static auto BackStackProperty();
        [[nodiscard]] static auto ForwardStackProperty();
        [[nodiscard]] static auto IsNavigationStackEnabledProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES Grid : winrt::Microsoft::UI::Xaml::Controls::IGrid,
        impl::base<Grid, winrt::Microsoft::UI::Xaml::Controls::Panel, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<Grid, winrt::Microsoft::UI::Xaml::Controls::IPanel, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        Grid(std::nullptr_t) noexcept {}
        Grid(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IGrid(ptr, take_ownership_from_abi) {}
        Grid();
        [[nodiscard]] static auto BackgroundSizingProperty();
        [[nodiscard]] static auto BorderBrushProperty();
        [[nodiscard]] static auto BorderThicknessProperty();
        [[nodiscard]] static auto CornerRadiusProperty();
        [[nodiscard]] static auto PaddingProperty();
        [[nodiscard]] static auto RowSpacingProperty();
        [[nodiscard]] static auto ColumnSpacingProperty();
        [[nodiscard]] static auto RowProperty();
        static auto GetRow(winrt::Microsoft::UI::Xaml::FrameworkElement const& element);
        static auto SetRow(winrt::Microsoft::UI::Xaml::FrameworkElement const& element, int32_t value);
        [[nodiscard]] static auto ColumnProperty();
        static auto GetColumn(winrt::Microsoft::UI::Xaml::FrameworkElement const& element);
        static auto SetColumn(winrt::Microsoft::UI::Xaml::FrameworkElement const& element, int32_t value);
        [[nodiscard]] static auto RowSpanProperty();
        static auto GetRowSpan(winrt::Microsoft::UI::Xaml::FrameworkElement const& element);
        static auto SetRowSpan(winrt::Microsoft::UI::Xaml::FrameworkElement const& element, int32_t value);
        [[nodiscard]] static auto ColumnSpanProperty();
        static auto GetColumnSpan(winrt::Microsoft::UI::Xaml::FrameworkElement const& element);
        static auto SetColumnSpan(winrt::Microsoft::UI::Xaml::FrameworkElement const& element, int32_t value);
    };
    struct WINRT_IMPL_EMPTY_BASES GridView : winrt::Microsoft::UI::Xaml::Controls::IGridView,
        impl::base<GridView, winrt::Microsoft::UI::Xaml::Controls::ListViewBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::Selector, winrt::Microsoft::UI::Xaml::Controls::ItemsControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<GridView, winrt::Microsoft::UI::Xaml::Controls::IListViewBase, winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomInformation, winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelector, winrt::Microsoft::UI::Xaml::Controls::IItemsControl, winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IItemContainerMapping, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        GridView(std::nullptr_t) noexcept {}
        GridView(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IGridView(ptr, take_ownership_from_abi) {}
        GridView();
    };
    struct WINRT_IMPL_EMPTY_BASES GridViewHeaderItem : winrt::Microsoft::UI::Xaml::Controls::IGridViewHeaderItem,
        impl::base<GridViewHeaderItem, winrt::Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<GridViewHeaderItem, winrt::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItem, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        GridViewHeaderItem(std::nullptr_t) noexcept {}
        GridViewHeaderItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IGridViewHeaderItem(ptr, take_ownership_from_abi) {}
        GridViewHeaderItem();
    };
    struct WINRT_IMPL_EMPTY_BASES GridViewItem : winrt::Microsoft::UI::Xaml::Controls::IGridViewItem,
        impl::base<GridViewItem, winrt::Microsoft::UI::Xaml::Controls::Primitives::SelectorItem, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<GridViewItem, winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        GridViewItem(std::nullptr_t) noexcept {}
        GridViewItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IGridViewItem(ptr, take_ownership_from_abi) {}
        GridViewItem();
    };
    struct WINRT_IMPL_EMPTY_BASES GroupItem : winrt::Microsoft::UI::Xaml::Controls::IGroupItem,
        impl::base<GroupItem, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<GroupItem, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        GroupItem(std::nullptr_t) noexcept {}
        GroupItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IGroupItem(ptr, take_ownership_from_abi) {}
        GroupItem();
    };
    struct WINRT_IMPL_EMPTY_BASES GroupStyle : winrt::Microsoft::UI::Xaml::Controls::IGroupStyle,
        impl::require<GroupStyle, winrt::Microsoft::UI::Xaml::Data::INotifyPropertyChanged>
    {
        GroupStyle(std::nullptr_t) noexcept {}
        GroupStyle(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IGroupStyle(ptr, take_ownership_from_abi) {}
        GroupStyle();
    };
    struct WINRT_IMPL_EMPTY_BASES GroupStyleSelector : winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelector,
        impl::require<GroupStyleSelector, winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelectorOverrides>
    {
        GroupStyleSelector(std::nullptr_t) noexcept {}
        GroupStyleSelector(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelector(ptr, take_ownership_from_abi) {}
        GroupStyleSelector();
    };
    struct WINRT_IMPL_EMPTY_BASES HasValidationErrorsChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IHasValidationErrorsChangedEventArgs
    {
        HasValidationErrorsChangedEventArgs(std::nullptr_t) noexcept {}
        HasValidationErrorsChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IHasValidationErrorsChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES Hub : winrt::Microsoft::UI::Xaml::Controls::IHub,
        impl::base<Hub, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<Hub, winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomInformation, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        Hub(std::nullptr_t) noexcept {}
        Hub(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IHub(ptr, take_ownership_from_abi) {}
        Hub();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
        [[nodiscard]] static auto OrientationProperty();
        [[nodiscard]] static auto DefaultSectionIndexProperty();
        [[nodiscard]] static auto SemanticZoomOwnerProperty();
        [[nodiscard]] static auto IsActiveViewProperty();
        [[nodiscard]] static auto IsZoomedInViewProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES HubSection : winrt::Microsoft::UI::Xaml::Controls::IHubSection,
        impl::base<HubSection, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<HubSection, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        HubSection(std::nullptr_t) noexcept {}
        HubSection(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IHubSection(ptr, take_ownership_from_abi) {}
        HubSection();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
        [[nodiscard]] static auto ContentTemplateProperty();
        [[nodiscard]] static auto IsHeaderInteractiveProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES HubSectionCollection : winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Controls::HubSection>
    {
        HubSectionCollection(std::nullptr_t) noexcept {}
        HubSectionCollection(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Controls::HubSection>(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES HubSectionHeaderClickEventArgs : winrt::Microsoft::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs
    {
        HubSectionHeaderClickEventArgs(std::nullptr_t) noexcept {}
        HubSectionHeaderClickEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs(ptr, take_ownership_from_abi) {}
        HubSectionHeaderClickEventArgs();
    };
    struct WINRT_IMPL_EMPTY_BASES HyperlinkButton : winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButton,
        impl::base<HyperlinkButton, winrt::Microsoft::UI::Xaml::Controls::Primitives::ButtonBase, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<HyperlinkButton, winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBase, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        HyperlinkButton(std::nullptr_t) noexcept {}
        HyperlinkButton(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IHyperlinkButton(ptr, take_ownership_from_abi) {}
        HyperlinkButton();
        [[nodiscard]] static auto NavigateUriProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES IconElement : winrt::Microsoft::UI::Xaml::Controls::IIconElement,
        impl::base<IconElement, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<IconElement, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        IconElement(std::nullptr_t) noexcept {}
        IconElement(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IIconElement(ptr, take_ownership_from_abi) {}
        [[nodiscard]] static auto ForegroundProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES IconSource : winrt::Microsoft::UI::Xaml::Controls::IIconSource,
        impl::base<IconSource, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<IconSource, winrt::Microsoft::UI::Xaml::Controls::IIconSourceOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        IconSource(std::nullptr_t) noexcept {}
        IconSource(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IIconSource(ptr, take_ownership_from_abi) {}
        [[nodiscard]] static auto ForegroundProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES IconSourceElement : winrt::Microsoft::UI::Xaml::Controls::IIconSourceElement,
        impl::base<IconSourceElement, winrt::Microsoft::UI::Xaml::Controls::IconElement, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<IconSourceElement, winrt::Microsoft::UI::Xaml::Controls::IIconElement, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        IconSourceElement(std::nullptr_t) noexcept {}
        IconSourceElement(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IIconSourceElement(ptr, take_ownership_from_abi) {}
        IconSourceElement();
        [[nodiscard]] static auto IconSourceProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES Image : winrt::Microsoft::UI::Xaml::Controls::IImage,
        impl::base<Image, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<Image, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        Image(std::nullptr_t) noexcept {}
        Image(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IImage(ptr, take_ownership_from_abi) {}
        Image();
        [[nodiscard]] static auto SourceProperty();
        [[nodiscard]] static auto StretchProperty();
        [[nodiscard]] static auto NineGridProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ImageIcon : winrt::Microsoft::UI::Xaml::Controls::IImageIcon,
        impl::base<ImageIcon, winrt::Microsoft::UI::Xaml::Controls::IconElement, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ImageIcon, winrt::Microsoft::UI::Xaml::Controls::IIconElement, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ImageIcon(std::nullptr_t) noexcept {}
        ImageIcon(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IImageIcon(ptr, take_ownership_from_abi) {}
        ImageIcon();
        [[nodiscard]] static auto SourceProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ImageIconSource : winrt::Microsoft::UI::Xaml::Controls::IImageIconSource,
        impl::base<ImageIconSource, winrt::Microsoft::UI::Xaml::Controls::IconSource, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ImageIconSource, winrt::Microsoft::UI::Xaml::Controls::IIconSource, winrt::Microsoft::UI::Xaml::Controls::IIconSourceOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ImageIconSource(std::nullptr_t) noexcept {}
        ImageIconSource(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IImageIconSource(ptr, take_ownership_from_abi) {}
        ImageIconSource();
        [[nodiscard]] static auto ImageSourceProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES InfoBadge : winrt::Microsoft::UI::Xaml::Controls::IInfoBadge,
        impl::base<InfoBadge, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<InfoBadge, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        InfoBadge(std::nullptr_t) noexcept {}
        InfoBadge(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IInfoBadge(ptr, take_ownership_from_abi) {}
        InfoBadge();
        [[nodiscard]] static auto ValueProperty();
        [[nodiscard]] static auto IconSourceProperty();
        [[nodiscard]] static auto TemplateSettingsProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES InfoBadgeTemplateSettings : winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettings,
        impl::base<InfoBadgeTemplateSettings, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<InfoBadgeTemplateSettings, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        InfoBadgeTemplateSettings(std::nullptr_t) noexcept {}
        InfoBadgeTemplateSettings(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IInfoBadgeTemplateSettings(ptr, take_ownership_from_abi) {}
        InfoBadgeTemplateSettings();
        [[nodiscard]] static auto InfoBadgeCornerRadiusProperty();
        [[nodiscard]] static auto IconElementProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES InfoBar : winrt::Microsoft::UI::Xaml::Controls::IInfoBar,
        impl::base<InfoBar, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<InfoBar, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        InfoBar(std::nullptr_t) noexcept {}
        InfoBar(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IInfoBar(ptr, take_ownership_from_abi) {}
        InfoBar();
        [[nodiscard]] static auto IsOpenProperty();
        [[nodiscard]] static auto TitleProperty();
        [[nodiscard]] static auto MessageProperty();
        [[nodiscard]] static auto SeverityProperty();
        [[nodiscard]] static auto IconSourceProperty();
        [[nodiscard]] static auto IsIconVisibleProperty();
        [[nodiscard]] static auto IsClosableProperty();
        [[nodiscard]] static auto CloseButtonStyleProperty();
        [[nodiscard]] static auto CloseButtonCommandProperty();
        [[nodiscard]] static auto CloseButtonCommandParameterProperty();
        [[nodiscard]] static auto ActionButtonProperty();
        [[nodiscard]] static auto ContentProperty();
        [[nodiscard]] static auto ContentTemplateProperty();
        [[nodiscard]] static auto TemplateSettingsProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES InfoBarClosedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosedEventArgs
    {
        InfoBarClosedEventArgs(std::nullptr_t) noexcept {}
        InfoBarClosedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES InfoBarClosingEventArgs : winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosingEventArgs
    {
        InfoBarClosingEventArgs(std::nullptr_t) noexcept {}
        InfoBarClosingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IInfoBarClosingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES InfoBarTemplateSettings : winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettings,
        impl::base<InfoBarTemplateSettings, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<InfoBarTemplateSettings, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        InfoBarTemplateSettings(std::nullptr_t) noexcept {}
        InfoBarTemplateSettings(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IInfoBarTemplateSettings(ptr, take_ownership_from_abi) {}
        InfoBarTemplateSettings();
        [[nodiscard]] static auto IconElementProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES IsTextTrimmedChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs
    {
        IsTextTrimmedChangedEventArgs(std::nullptr_t) noexcept {}
        IsTextTrimmedChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IIsTextTrimmedChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ItemClickEventArgs : winrt::Microsoft::UI::Xaml::Controls::IItemClickEventArgs,
        impl::base<ItemClickEventArgs, winrt::Microsoft::UI::Xaml::RoutedEventArgs>,
        impl::require<ItemClickEventArgs, winrt::Microsoft::UI::Xaml::IRoutedEventArgs>
    {
        ItemClickEventArgs(std::nullptr_t) noexcept {}
        ItemClickEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemClickEventArgs(ptr, take_ownership_from_abi) {}
        ItemClickEventArgs();
    };
    struct WINRT_IMPL_EMPTY_BASES ItemCollection : winrt::Windows::Foundation::Collections::IObservableVector<winrt::Windows::Foundation::IInspectable>
    {
        ItemCollection(std::nullptr_t) noexcept {}
        ItemCollection(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IObservableVector<winrt::Windows::Foundation::IInspectable>(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ItemCollectionTransition : winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransition
    {
        ItemCollectionTransition(std::nullptr_t) noexcept {}
        ItemCollectionTransition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransition(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ItemCollectionTransitionCompletedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionCompletedEventArgs
    {
        ItemCollectionTransitionCompletedEventArgs(std::nullptr_t) noexcept {}
        ItemCollectionTransitionCompletedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionCompletedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ItemCollectionTransitionProgress : winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProgress
    {
        ItemCollectionTransitionProgress(std::nullptr_t) noexcept {}
        ItemCollectionTransitionProgress(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProgress(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ItemCollectionTransitionProvider : winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProvider,
        impl::require<ItemCollectionTransitionProvider, winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProviderOverrides>
    {
        ItemCollectionTransitionProvider(std::nullptr_t) noexcept {}
        ItemCollectionTransitionProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProvider(ptr, take_ownership_from_abi) {}
        ItemCollectionTransitionProvider();
    };
    struct WINRT_IMPL_EMPTY_BASES ItemContainer : winrt::Microsoft::UI::Xaml::Controls::IItemContainer,
        impl::base<ItemContainer, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ItemContainer, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ItemContainer(std::nullptr_t) noexcept {}
        ItemContainer(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemContainer(ptr, take_ownership_from_abi) {}
        ItemContainer();
        [[nodiscard]] static auto ChildProperty();
        [[nodiscard]] static auto IsSelectedProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ItemContainerGenerator : winrt::Microsoft::UI::Xaml::Controls::IItemContainerGenerator
    {
        ItemContainerGenerator(std::nullptr_t) noexcept {}
        ItemContainerGenerator(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemContainerGenerator(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ItemsControl : winrt::Microsoft::UI::Xaml::Controls::IItemsControl,
        impl::base<ItemsControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ItemsControl, winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IItemContainerMapping, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ItemsControl(std::nullptr_t) noexcept {}
        ItemsControl(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemsControl(ptr, take_ownership_from_abi) {}
        ItemsControl();
        [[nodiscard]] static auto ItemsSourceProperty();
        [[nodiscard]] static auto ItemTemplateProperty();
        [[nodiscard]] static auto ItemTemplateSelectorProperty();
        [[nodiscard]] static auto ItemsPanelProperty();
        [[nodiscard]] static auto DisplayMemberPathProperty();
        [[nodiscard]] static auto ItemContainerStyleProperty();
        [[nodiscard]] static auto ItemContainerStyleSelectorProperty();
        [[nodiscard]] static auto ItemContainerTransitionsProperty();
        [[nodiscard]] static auto GroupStyleSelectorProperty();
        [[nodiscard]] static auto IsGroupingProperty();
        static auto GetItemsOwner(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto ItemsControlFromItemContainer(winrt::Microsoft::UI::Xaml::DependencyObject const& container);
    };
    struct WINRT_IMPL_EMPTY_BASES ItemsPanelTemplate : winrt::Microsoft::UI::Xaml::Controls::IItemsPanelTemplate,
        impl::base<ItemsPanelTemplate, winrt::Microsoft::UI::Xaml::FrameworkTemplate, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ItemsPanelTemplate, winrt::Microsoft::UI::Xaml::IFrameworkTemplate, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ItemsPanelTemplate(std::nullptr_t) noexcept {}
        ItemsPanelTemplate(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemsPanelTemplate(ptr, take_ownership_from_abi) {}
        ItemsPanelTemplate();
    };
    struct WINRT_IMPL_EMPTY_BASES ItemsPickedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IItemsPickedEventArgs,
        impl::base<ItemsPickedEventArgs, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ItemsPickedEventArgs, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ItemsPickedEventArgs(std::nullptr_t) noexcept {}
        ItemsPickedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemsPickedEventArgs(ptr, take_ownership_from_abi) {}
        ItemsPickedEventArgs();
    };
    struct WINRT_IMPL_EMPTY_BASES ItemsPresenter : winrt::Microsoft::UI::Xaml::Controls::IItemsPresenter,
        impl::base<ItemsPresenter, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ItemsPresenter, winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ItemsPresenter(std::nullptr_t) noexcept {}
        ItemsPresenter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemsPresenter(ptr, take_ownership_from_abi) {}
        ItemsPresenter();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
        [[nodiscard]] static auto HeaderTransitionsProperty();
        [[nodiscard]] static auto FooterProperty();
        [[nodiscard]] static auto FooterTemplateProperty();
        [[nodiscard]] static auto FooterTransitionsProperty();
        [[nodiscard]] static auto PaddingProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ItemsRepeater : winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater,
        impl::base<ItemsRepeater, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ItemsRepeater, winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater2, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ItemsRepeater(std::nullptr_t) noexcept {}
        ItemsRepeater(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater(ptr, take_ownership_from_abi) {}
        ItemsRepeater();
        [[nodiscard]] static auto ItemsSourceProperty();
        [[nodiscard]] static auto ItemTemplateProperty();
        [[nodiscard]] static auto LayoutProperty();
        [[nodiscard]] static auto HorizontalCacheLengthProperty();
        [[nodiscard]] static auto VerticalCacheLengthProperty();
        [[nodiscard]] static auto BackgroundProperty();
        [[nodiscard]] static auto ItemTransitionProviderProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ItemsRepeaterElementClearingEventArgs : winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs
    {
        ItemsRepeaterElementClearingEventArgs(std::nullptr_t) noexcept {}
        ItemsRepeaterElementClearingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ItemsRepeaterElementIndexChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs
    {
        ItemsRepeaterElementIndexChangedEventArgs(std::nullptr_t) noexcept {}
        ItemsRepeaterElementIndexChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ItemsRepeaterElementPreparedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs
    {
        ItemsRepeaterElementPreparedEventArgs(std::nullptr_t) noexcept {}
        ItemsRepeaterElementPreparedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ItemsRepeaterScrollHost : winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterScrollHost,
        impl::base<ItemsRepeaterScrollHost, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ItemsRepeaterScrollHost, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ItemsRepeaterScrollHost(std::nullptr_t) noexcept {}
        ItemsRepeaterScrollHost(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterScrollHost(ptr, take_ownership_from_abi) {}
        ItemsRepeaterScrollHost();
    };
    struct WINRT_IMPL_EMPTY_BASES ItemsSourceView : winrt::Microsoft::UI::Xaml::Controls::IItemsSourceView,
        impl::require<ItemsSourceView, winrt::Microsoft::UI::Xaml::Interop::INotifyCollectionChanged>
    {
        ItemsSourceView(std::nullptr_t) noexcept {}
        ItemsSourceView(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemsSourceView(ptr, take_ownership_from_abi) {}
        explicit ItemsSourceView(winrt::Windows::Foundation::IInspectable const& source);
    };
    struct WINRT_IMPL_EMPTY_BASES ItemsStackPanel : winrt::Microsoft::UI::Xaml::Controls::IItemsStackPanel,
        impl::base<ItemsStackPanel, winrt::Microsoft::UI::Xaml::Controls::Panel, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ItemsStackPanel, winrt::Microsoft::UI::Xaml::Controls::IPanel, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ItemsStackPanel(std::nullptr_t) noexcept {}
        ItemsStackPanel(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemsStackPanel(ptr, take_ownership_from_abi) {}
        ItemsStackPanel();
        [[nodiscard]] static auto GroupPaddingProperty();
        [[nodiscard]] static auto OrientationProperty();
        [[nodiscard]] static auto GroupHeaderPlacementProperty();
        [[nodiscard]] static auto CacheLengthProperty();
        [[nodiscard]] static auto AreStickyGroupHeadersEnabledProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ItemsView : winrt::Microsoft::UI::Xaml::Controls::IItemsView,
        impl::base<ItemsView, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ItemsView, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ItemsView(std::nullptr_t) noexcept {}
        ItemsView(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemsView(ptr, take_ownership_from_abi) {}
        ItemsView();
        [[nodiscard]] static auto IsItemInvokedEnabledProperty();
        [[nodiscard]] static auto ItemsSourceProperty();
        [[nodiscard]] static auto ItemTemplateProperty();
        [[nodiscard]] static auto LayoutProperty();
        [[nodiscard]] static auto SelectionModeProperty();
        [[nodiscard]] static auto ItemTransitionProviderProperty();
        [[nodiscard]] static auto CurrentItemIndexProperty();
        [[nodiscard]] static auto SelectedItemProperty();
        [[nodiscard]] static auto ScrollViewProperty();
        [[nodiscard]] static auto VerticalScrollControllerProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ItemsViewItemInvokedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IItemsViewItemInvokedEventArgs
    {
        ItemsViewItemInvokedEventArgs(std::nullptr_t) noexcept {}
        ItemsViewItemInvokedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemsViewItemInvokedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ItemsViewSelectionChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IItemsViewSelectionChangedEventArgs
    {
        ItemsViewSelectionChangedEventArgs(std::nullptr_t) noexcept {}
        ItemsViewSelectionChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemsViewSelectionChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ItemsWrapGrid : winrt::Microsoft::UI::Xaml::Controls::IItemsWrapGrid,
        impl::base<ItemsWrapGrid, winrt::Microsoft::UI::Xaml::Controls::Panel, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ItemsWrapGrid, winrt::Microsoft::UI::Xaml::Controls::IPanel, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ItemsWrapGrid(std::nullptr_t) noexcept {}
        ItemsWrapGrid(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IItemsWrapGrid(ptr, take_ownership_from_abi) {}
        ItemsWrapGrid();
        [[nodiscard]] static auto GroupPaddingProperty();
        [[nodiscard]] static auto OrientationProperty();
        [[nodiscard]] static auto MaximumRowsOrColumnsProperty();
        [[nodiscard]] static auto ItemWidthProperty();
        [[nodiscard]] static auto ItemHeightProperty();
        [[nodiscard]] static auto GroupHeaderPlacementProperty();
        [[nodiscard]] static auto CacheLengthProperty();
        [[nodiscard]] static auto AreStickyGroupHeadersEnabledProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES Layout : winrt::Microsoft::UI::Xaml::Controls::ILayout,
        impl::base<Layout, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<Layout, winrt::Microsoft::UI::Xaml::Controls::ILayout2, winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected, winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected2, winrt::Microsoft::UI::Xaml::Controls::ILayoutOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        Layout(std::nullptr_t) noexcept {}
        Layout(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ILayout(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES LayoutContext : winrt::Microsoft::UI::Xaml::Controls::ILayoutContext,
        impl::base<LayoutContext, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<LayoutContext, winrt::Microsoft::UI::Xaml::Controls::ILayoutContextOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        LayoutContext(std::nullptr_t) noexcept {}
        LayoutContext(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ILayoutContext(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES LinedFlowLayout : winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayout,
        impl::base<LinedFlowLayout, winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayout, winrt::Microsoft::UI::Xaml::Controls::Layout, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<LinedFlowLayout, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayout, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides, winrt::Microsoft::UI::Xaml::Controls::ILayout, winrt::Microsoft::UI::Xaml::Controls::ILayout2, winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected, winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected2, winrt::Microsoft::UI::Xaml::Controls::ILayoutOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        LinedFlowLayout(std::nullptr_t) noexcept {}
        LinedFlowLayout(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayout(ptr, take_ownership_from_abi) {}
        LinedFlowLayout();
        [[nodiscard]] static auto ItemsJustificationProperty();
        [[nodiscard]] static auto ItemsStretchProperty();
        [[nodiscard]] static auto MinItemSpacingProperty();
        [[nodiscard]] static auto LineSpacingProperty();
        [[nodiscard]] static auto LineHeightProperty();
        [[nodiscard]] static auto ActualLineHeightProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES LinedFlowLayoutItemCollectionTransitionProvider : winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemCollectionTransitionProvider,
        impl::base<LinedFlowLayoutItemCollectionTransitionProvider, winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransitionProvider>,
        impl::require<LinedFlowLayoutItemCollectionTransitionProvider, winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProvider, winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProviderOverrides>
    {
        LinedFlowLayoutItemCollectionTransitionProvider(std::nullptr_t) noexcept {}
        LinedFlowLayoutItemCollectionTransitionProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemCollectionTransitionProvider(ptr, take_ownership_from_abi) {}
        LinedFlowLayoutItemCollectionTransitionProvider();
    };
    struct WINRT_IMPL_EMPTY_BASES LinedFlowLayoutItemsInfoRequestedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemsInfoRequestedEventArgs
    {
        LinedFlowLayoutItemsInfoRequestedEventArgs(std::nullptr_t) noexcept {}
        LinedFlowLayoutItemsInfoRequestedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ILinedFlowLayoutItemsInfoRequestedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ListBox : winrt::Microsoft::UI::Xaml::Controls::IListBox,
        impl::base<ListBox, winrt::Microsoft::UI::Xaml::Controls::Primitives::Selector, winrt::Microsoft::UI::Xaml::Controls::ItemsControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ListBox, winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelector, winrt::Microsoft::UI::Xaml::Controls::IItemsControl, winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IItemContainerMapping, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ListBox(std::nullptr_t) noexcept {}
        ListBox(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IListBox(ptr, take_ownership_from_abi) {}
        ListBox();
        [[nodiscard]] static auto SelectionModeProperty();
        [[nodiscard]] static auto SingleSelectionFollowsFocusProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ListBoxItem : winrt::Microsoft::UI::Xaml::Controls::IListBoxItem,
        impl::base<ListBoxItem, winrt::Microsoft::UI::Xaml::Controls::Primitives::SelectorItem, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ListBoxItem, winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ListBoxItem(std::nullptr_t) noexcept {}
        ListBoxItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IListBoxItem(ptr, take_ownership_from_abi) {}
        ListBoxItem();
    };
    struct WINRT_IMPL_EMPTY_BASES ListPickerFlyout : winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyout,
        impl::base<ListPickerFlyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::PickerFlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ListPickerFlyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ListPickerFlyout(std::nullptr_t) noexcept {}
        ListPickerFlyout(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyout(ptr, take_ownership_from_abi) {}
        ListPickerFlyout();
        [[nodiscard]] static auto ItemsSourceProperty();
        [[nodiscard]] static auto ItemTemplateProperty();
        [[nodiscard]] static auto DisplayMemberPathProperty();
        [[nodiscard]] static auto SelectionModeProperty();
        [[nodiscard]] static auto SelectedIndexProperty();
        [[nodiscard]] static auto SelectedItemProperty();
        [[nodiscard]] static auto SelectedValueProperty();
        [[nodiscard]] static auto SelectedValuePathProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ListPickerFlyoutPresenter : winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyoutPresenter,
        impl::base<ListPickerFlyoutPresenter, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ListPickerFlyoutPresenter, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ListPickerFlyoutPresenter(std::nullptr_t) noexcept {}
        ListPickerFlyoutPresenter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IListPickerFlyoutPresenter(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ListView : winrt::Microsoft::UI::Xaml::Controls::IListView,
        impl::base<ListView, winrt::Microsoft::UI::Xaml::Controls::ListViewBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::Selector, winrt::Microsoft::UI::Xaml::Controls::ItemsControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ListView, winrt::Microsoft::UI::Xaml::Controls::IListViewBase, winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomInformation, winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelector, winrt::Microsoft::UI::Xaml::Controls::IItemsControl, winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IItemContainerMapping, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ListView(std::nullptr_t) noexcept {}
        ListView(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IListView(ptr, take_ownership_from_abi) {}
        ListView();
    };
    struct WINRT_IMPL_EMPTY_BASES ListViewBase : winrt::Microsoft::UI::Xaml::Controls::IListViewBase,
        impl::base<ListViewBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::Selector, winrt::Microsoft::UI::Xaml::Controls::ItemsControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ListViewBase, winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomInformation, winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelector, winrt::Microsoft::UI::Xaml::Controls::IItemsControl, winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IItemContainerMapping, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ListViewBase(std::nullptr_t) noexcept {}
        ListViewBase(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IListViewBase(ptr, take_ownership_from_abi) {}
        [[nodiscard]] static auto SelectionModeProperty();
        [[nodiscard]] static auto IsSwipeEnabledProperty();
        [[nodiscard]] static auto CanDragItemsProperty();
        [[nodiscard]] static auto CanReorderItemsProperty();
        [[nodiscard]] static auto IsItemClickEnabledProperty();
        [[nodiscard]] static auto DataFetchSizeProperty();
        [[nodiscard]] static auto IncrementalLoadingThresholdProperty();
        [[nodiscard]] static auto IncrementalLoadingTriggerProperty();
        [[nodiscard]] static auto ShowsScrollingPlaceholdersProperty();
        [[nodiscard]] static auto ReorderModeProperty();
        [[nodiscard]] static auto IsMultiSelectCheckBoxEnabledProperty();
        [[nodiscard]] static auto SingleSelectionFollowsFocusProperty();
        [[nodiscard]] static auto SemanticZoomOwnerProperty();
        [[nodiscard]] static auto IsActiveViewProperty();
        [[nodiscard]] static auto IsZoomedInViewProperty();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
        [[nodiscard]] static auto HeaderTransitionsProperty();
        [[nodiscard]] static auto FooterProperty();
        [[nodiscard]] static auto FooterTemplateProperty();
        [[nodiscard]] static auto FooterTransitionsProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ListViewBaseHeaderItem : winrt::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItem,
        impl::base<ListViewBaseHeaderItem, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ListViewBaseHeaderItem, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ListViewBaseHeaderItem(std::nullptr_t) noexcept {}
        ListViewBaseHeaderItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItem(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ListViewHeaderItem : winrt::Microsoft::UI::Xaml::Controls::IListViewHeaderItem,
        impl::base<ListViewHeaderItem, winrt::Microsoft::UI::Xaml::Controls::ListViewBaseHeaderItem, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ListViewHeaderItem, winrt::Microsoft::UI::Xaml::Controls::IListViewBaseHeaderItem, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ListViewHeaderItem(std::nullptr_t) noexcept {}
        ListViewHeaderItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IListViewHeaderItem(ptr, take_ownership_from_abi) {}
        ListViewHeaderItem();
    };
    struct WINRT_IMPL_EMPTY_BASES ListViewItem : winrt::Microsoft::UI::Xaml::Controls::IListViewItem,
        impl::base<ListViewItem, winrt::Microsoft::UI::Xaml::Controls::Primitives::SelectorItem, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ListViewItem, winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ListViewItem(std::nullptr_t) noexcept {}
        ListViewItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IListViewItem(ptr, take_ownership_from_abi) {}
        ListViewItem();
    };
    struct WINRT_IMPL_EMPTY_BASES ListViewPersistenceHelper : winrt::Microsoft::UI::Xaml::Controls::IListViewPersistenceHelper
    {
        ListViewPersistenceHelper(std::nullptr_t) noexcept {}
        ListViewPersistenceHelper(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IListViewPersistenceHelper(ptr, take_ownership_from_abi) {}
        static auto GetRelativeScrollPosition(winrt::Microsoft::UI::Xaml::Controls::ListViewBase const& listViewBase, winrt::Microsoft::UI::Xaml::Controls::ListViewItemToKeyHandler const& itemToKeyHandler);
        static auto SetRelativeScrollPositionAsync(winrt::Microsoft::UI::Xaml::Controls::ListViewBase const& listViewBase, param::hstring const& relativeScrollPosition, winrt::Microsoft::UI::Xaml::Controls::ListViewKeyToItemHandler const& keyToItemHandler);
    };
    struct WINRT_IMPL_EMPTY_BASES MediaPlayerElement : winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElement,
        impl::base<MediaPlayerElement, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<MediaPlayerElement, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        MediaPlayerElement(std::nullptr_t) noexcept {}
        MediaPlayerElement(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerElement(ptr, take_ownership_from_abi) {}
        MediaPlayerElement();
        [[nodiscard]] static auto SourceProperty();
        [[nodiscard]] static auto AreTransportControlsEnabledProperty();
        [[nodiscard]] static auto PosterSourceProperty();
        [[nodiscard]] static auto StretchProperty();
        [[nodiscard]] static auto AutoPlayProperty();
        [[nodiscard]] static auto IsFullWindowProperty();
        [[nodiscard]] static auto MediaPlayerProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES MediaPlayerPresenter : winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenter,
        impl::base<MediaPlayerPresenter, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<MediaPlayerPresenter, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        MediaPlayerPresenter(std::nullptr_t) noexcept {}
        MediaPlayerPresenter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IMediaPlayerPresenter(ptr, take_ownership_from_abi) {}
        MediaPlayerPresenter();
        [[nodiscard]] static auto MediaPlayerProperty();
        [[nodiscard]] static auto StretchProperty();
        [[nodiscard]] static auto IsFullWindowProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES MediaTransportControls : winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControls,
        impl::base<MediaTransportControls, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<MediaTransportControls, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        MediaTransportControls(std::nullptr_t) noexcept {}
        MediaTransportControls(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControls(ptr, take_ownership_from_abi) {}
        MediaTransportControls();
        [[nodiscard]] static auto IsZoomButtonVisibleProperty();
        [[nodiscard]] static auto IsZoomEnabledProperty();
        [[nodiscard]] static auto IsFastForwardButtonVisibleProperty();
        [[nodiscard]] static auto IsFastForwardEnabledProperty();
        [[nodiscard]] static auto IsFastRewindButtonVisibleProperty();
        [[nodiscard]] static auto IsFastRewindEnabledProperty();
        [[nodiscard]] static auto IsStopButtonVisibleProperty();
        [[nodiscard]] static auto IsStopEnabledProperty();
        [[nodiscard]] static auto IsVolumeButtonVisibleProperty();
        [[nodiscard]] static auto IsVolumeEnabledProperty();
        [[nodiscard]] static auto IsPlaybackRateButtonVisibleProperty();
        [[nodiscard]] static auto IsPlaybackRateEnabledProperty();
        [[nodiscard]] static auto IsSeekBarVisibleProperty();
        [[nodiscard]] static auto IsSeekEnabledProperty();
        [[nodiscard]] static auto IsCompactProperty();
        [[nodiscard]] static auto IsSkipForwardButtonVisibleProperty();
        [[nodiscard]] static auto IsSkipForwardEnabledProperty();
        [[nodiscard]] static auto IsSkipBackwardButtonVisibleProperty();
        [[nodiscard]] static auto IsSkipBackwardEnabledProperty();
        [[nodiscard]] static auto IsNextTrackButtonVisibleProperty();
        [[nodiscard]] static auto IsPreviousTrackButtonVisibleProperty();
        [[nodiscard]] static auto FastPlayFallbackBehaviourProperty();
        [[nodiscard]] static auto ShowAndHideAutomaticallyProperty();
        [[nodiscard]] static auto IsRepeatEnabledProperty();
        [[nodiscard]] static auto IsRepeatButtonVisibleProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES MediaTransportControlsHelper : winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsHelper
    {
        MediaTransportControlsHelper(std::nullptr_t) noexcept {}
        MediaTransportControlsHelper(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IMediaTransportControlsHelper(ptr, take_ownership_from_abi) {}
        [[nodiscard]] static auto DropoutOrderProperty();
        static auto GetDropoutOrder(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetDropoutOrder(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IReference<int32_t> const& value);
    };
    struct WINRT_IMPL_EMPTY_BASES MenuBar : winrt::Microsoft::UI::Xaml::Controls::IMenuBar,
        impl::base<MenuBar, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<MenuBar, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        MenuBar(std::nullptr_t) noexcept {}
        MenuBar(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IMenuBar(ptr, take_ownership_from_abi) {}
        MenuBar();
        [[nodiscard]] static auto ItemsProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES MenuBarItem : winrt::Microsoft::UI::Xaml::Controls::IMenuBarItem,
        impl::base<MenuBarItem, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<MenuBarItem, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        MenuBarItem(std::nullptr_t) noexcept {}
        MenuBarItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IMenuBarItem(ptr, take_ownership_from_abi) {}
        MenuBarItem();
        [[nodiscard]] static auto TitleProperty();
        [[nodiscard]] static auto ItemsProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES MenuBarItemFlyout : winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout,
        impl::base<MenuBarItemFlyout, winrt::Microsoft::UI::Xaml::Controls::MenuFlyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<MenuBarItemFlyout, winrt::Microsoft::UI::Xaml::Controls::IMenuFlyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        MenuBarItemFlyout(std::nullptr_t) noexcept {}
        MenuBarItemFlyout(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout(ptr, take_ownership_from_abi) {}
        MenuBarItemFlyout();
        using impl::consume_t<MenuBarItemFlyout, winrt::Microsoft::UI::Xaml::Controls::IMenuFlyout>::ShowAt;
        using impl::consume_t<MenuBarItemFlyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase>::ShowAt;
    };
    struct WINRT_IMPL_EMPTY_BASES MenuFlyout : winrt::Microsoft::UI::Xaml::Controls::IMenuFlyout,
        impl::base<MenuFlyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<MenuFlyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        MenuFlyout(std::nullptr_t) noexcept {}
        MenuFlyout(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IMenuFlyout(ptr, take_ownership_from_abi) {}
        MenuFlyout();
        using winrt::Microsoft::UI::Xaml::Controls::IMenuFlyout::ShowAt;
        using impl::consume_t<MenuFlyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase>::ShowAt;
        [[nodiscard]] static auto MenuFlyoutPresenterStyleProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES MenuFlyoutItem : winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItem,
        impl::base<MenuFlyoutItem, winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<MenuFlyoutItem, winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBase, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        MenuFlyoutItem(std::nullptr_t) noexcept {}
        MenuFlyoutItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItem(ptr, take_ownership_from_abi) {}
        MenuFlyoutItem();
        [[nodiscard]] static auto TextProperty();
        [[nodiscard]] static auto CommandProperty();
        [[nodiscard]] static auto CommandParameterProperty();
        [[nodiscard]] static auto IconProperty();
        [[nodiscard]] static auto KeyboardAcceleratorTextOverrideProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES MenuFlyoutItemBase : winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBase,
        impl::base<MenuFlyoutItemBase, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<MenuFlyoutItemBase, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        MenuFlyoutItemBase(std::nullptr_t) noexcept {}
        MenuFlyoutItemBase(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBase(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES MenuFlyoutPresenter : winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenter,
        impl::base<MenuFlyoutPresenter, winrt::Microsoft::UI::Xaml::Controls::ItemsControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<MenuFlyoutPresenter, winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenter2, winrt::Microsoft::UI::Xaml::Controls::IItemsControl, winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IItemContainerMapping, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        MenuFlyoutPresenter(std::nullptr_t) noexcept {}
        MenuFlyoutPresenter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutPresenter(ptr, take_ownership_from_abi) {}
        MenuFlyoutPresenter();
        [[nodiscard]] static auto IsDefaultShadowEnabledProperty();
        [[nodiscard]] static auto SystemBackdropProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES MenuFlyoutSeparator : winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSeparator,
        impl::base<MenuFlyoutSeparator, winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<MenuFlyoutSeparator, winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBase, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        MenuFlyoutSeparator(std::nullptr_t) noexcept {}
        MenuFlyoutSeparator(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSeparator(ptr, take_ownership_from_abi) {}
        MenuFlyoutSeparator();
    };
    struct WINRT_IMPL_EMPTY_BASES MenuFlyoutSubItem : winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSubItem,
        impl::base<MenuFlyoutSubItem, winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<MenuFlyoutSubItem, winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBase, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        MenuFlyoutSubItem(std::nullptr_t) noexcept {}
        MenuFlyoutSubItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutSubItem(ptr, take_ownership_from_abi) {}
        MenuFlyoutSubItem();
        [[nodiscard]] static auto TextProperty();
        [[nodiscard]] static auto IconProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES NavigationView : winrt::Microsoft::UI::Xaml::Controls::INavigationView,
        impl::base<NavigationView, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<NavigationView, winrt::Microsoft::UI::Xaml::Controls::INavigationView2, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        NavigationView(std::nullptr_t) noexcept {}
        NavigationView(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::INavigationView(ptr, take_ownership_from_abi) {}
        NavigationView();
        [[nodiscard]] static auto IsPaneOpenProperty();
        [[nodiscard]] static auto CompactModeThresholdWidthProperty();
        [[nodiscard]] static auto ExpandedModeThresholdWidthProperty();
        [[nodiscard]] static auto FooterMenuItemsProperty();
        [[nodiscard]] static auto FooterMenuItemsSourceProperty();
        [[nodiscard]] static auto PaneFooterProperty();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
        [[nodiscard]] static auto DisplayModeProperty();
        [[nodiscard]] static auto IsSettingsVisibleProperty();
        [[nodiscard]] static auto IsPaneToggleButtonVisibleProperty();
        [[nodiscard]] static auto AlwaysShowHeaderProperty();
        [[nodiscard]] static auto CompactPaneLengthProperty();
        [[nodiscard]] static auto OpenPaneLengthProperty();
        [[nodiscard]] static auto PaneToggleButtonStyleProperty();
        [[nodiscard]] static auto MenuItemsProperty();
        [[nodiscard]] static auto MenuItemsSourceProperty();
        [[nodiscard]] static auto SelectedItemProperty();
        [[nodiscard]] static auto SettingsItemProperty();
        [[nodiscard]] static auto AutoSuggestBoxProperty();
        [[nodiscard]] static auto MenuItemTemplateProperty();
        [[nodiscard]] static auto MenuItemTemplateSelectorProperty();
        [[nodiscard]] static auto MenuItemContainerStyleProperty();
        [[nodiscard]] static auto MenuItemContainerStyleSelectorProperty();
        [[nodiscard]] static auto IsTitleBarAutoPaddingEnabledProperty();
        [[nodiscard]] static auto IsBackButtonVisibleProperty();
        [[nodiscard]] static auto IsBackEnabledProperty();
        [[nodiscard]] static auto PaneTitleProperty();
        [[nodiscard]] static auto PaneDisplayModeProperty();
        [[nodiscard]] static auto PaneHeaderProperty();
        [[nodiscard]] static auto PaneCustomContentProperty();
        [[nodiscard]] static auto ContentOverlayProperty();
        [[nodiscard]] static auto IsPaneVisibleProperty();
        [[nodiscard]] static auto SelectionFollowsFocusProperty();
        [[nodiscard]] static auto TemplateSettingsProperty();
        [[nodiscard]] static auto ShoulderNavigationEnabledProperty();
        [[nodiscard]] static auto OverflowLabelModeProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES NavigationViewBackRequestedEventArgs : winrt::Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs
    {
        NavigationViewBackRequestedEventArgs(std::nullptr_t) noexcept {}
        NavigationViewBackRequestedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES NavigationViewDisplayModeChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs
    {
        NavigationViewDisplayModeChangedEventArgs(std::nullptr_t) noexcept {}
        NavigationViewDisplayModeChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES NavigationViewItem : winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem,
        impl::base<NavigationViewItem, winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemBase, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<NavigationViewItem, winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem2, winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem3, winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase, winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase2, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        NavigationViewItem(std::nullptr_t) noexcept {}
        NavigationViewItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem(ptr, take_ownership_from_abi) {}
        NavigationViewItem();
        [[nodiscard]] static auto IconProperty();
        [[nodiscard]] static auto CompactPaneLengthProperty();
        [[nodiscard]] static auto SelectsOnInvokedProperty();
        [[nodiscard]] static auto IsExpandedProperty();
        [[nodiscard]] static auto HasUnrealizedChildrenProperty();
        [[nodiscard]] static auto IsChildSelectedProperty();
        [[nodiscard]] static auto MenuItemsProperty();
        [[nodiscard]] static auto MenuItemsSourceProperty();
        [[nodiscard]] static auto InfoBadgeProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES NavigationViewItemBase : winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase,
        impl::base<NavigationViewItemBase, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<NavigationViewItemBase, winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase2, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        NavigationViewItemBase(std::nullptr_t) noexcept {}
        NavigationViewItemBase(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase(ptr, take_ownership_from_abi) {}
        [[nodiscard]] static auto IsSelectedProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES NavigationViewItemCollapsedEventArgs : winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemCollapsedEventArgs
    {
        NavigationViewItemCollapsedEventArgs(std::nullptr_t) noexcept {}
        NavigationViewItemCollapsedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemCollapsedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES NavigationViewItemExpandingEventArgs : winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemExpandingEventArgs
    {
        NavigationViewItemExpandingEventArgs(std::nullptr_t) noexcept {}
        NavigationViewItemExpandingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemExpandingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES NavigationViewItemHeader : winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemHeader,
        impl::base<NavigationViewItemHeader, winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemBase, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<NavigationViewItemHeader, winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase, winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase2, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        NavigationViewItemHeader(std::nullptr_t) noexcept {}
        NavigationViewItemHeader(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemHeader(ptr, take_ownership_from_abi) {}
        NavigationViewItemHeader();
    };
    struct WINRT_IMPL_EMPTY_BASES NavigationViewItemInvokedEventArgs : winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs,
        impl::require<NavigationViewItemInvokedEventArgs, winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs2>
    {
        NavigationViewItemInvokedEventArgs(std::nullptr_t) noexcept {}
        NavigationViewItemInvokedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs(ptr, take_ownership_from_abi) {}
        NavigationViewItemInvokedEventArgs();
    };
    struct WINRT_IMPL_EMPTY_BASES NavigationViewItemSeparator : winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator,
        impl::base<NavigationViewItemSeparator, winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemBase, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<NavigationViewItemSeparator, winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase, winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase2, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        NavigationViewItemSeparator(std::nullptr_t) noexcept {}
        NavigationViewItemSeparator(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator(ptr, take_ownership_from_abi) {}
        NavigationViewItemSeparator();
    };
    struct WINRT_IMPL_EMPTY_BASES NavigationViewPaneClosingEventArgs : winrt::Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs
    {
        NavigationViewPaneClosingEventArgs(std::nullptr_t) noexcept {}
        NavigationViewPaneClosingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES NavigationViewSelectionChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs,
        impl::require<NavigationViewSelectionChangedEventArgs, winrt::Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs2>
    {
        NavigationViewSelectionChangedEventArgs(std::nullptr_t) noexcept {}
        NavigationViewSelectionChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES NavigationViewTemplateSettings : winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings,
        impl::base<NavigationViewTemplateSettings, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<NavigationViewTemplateSettings, winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        NavigationViewTemplateSettings(std::nullptr_t) noexcept {}
        NavigationViewTemplateSettings(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings(ptr, take_ownership_from_abi) {}
        NavigationViewTemplateSettings();
        [[nodiscard]] static auto TopPaddingProperty();
        [[nodiscard]] static auto OverflowButtonVisibilityProperty();
        [[nodiscard]] static auto PaneToggleButtonVisibilityProperty();
        [[nodiscard]] static auto BackButtonVisibilityProperty();
        [[nodiscard]] static auto TopPaneVisibilityProperty();
        [[nodiscard]] static auto LeftPaneVisibilityProperty();
        [[nodiscard]] static auto SingleSelectionFollowsFocusProperty();
        [[nodiscard]] static auto PaneToggleButtonWidthProperty();
        [[nodiscard]] static auto SmallerPaneToggleButtonWidthProperty();
        [[nodiscard]] static auto OpenPaneLengthProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES NonVirtualizingLayout : winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayout,
        impl::base<NonVirtualizingLayout, winrt::Microsoft::UI::Xaml::Controls::Layout, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<NonVirtualizingLayout, winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides, winrt::Microsoft::UI::Xaml::Controls::ILayout, winrt::Microsoft::UI::Xaml::Controls::ILayout2, winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected, winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected2, winrt::Microsoft::UI::Xaml::Controls::ILayoutOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        NonVirtualizingLayout(std::nullptr_t) noexcept {}
        NonVirtualizingLayout(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayout(ptr, take_ownership_from_abi) {}
        NonVirtualizingLayout();
    };
    struct WINRT_IMPL_EMPTY_BASES NonVirtualizingLayoutContext : winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext,
        impl::base<NonVirtualizingLayoutContext, winrt::Microsoft::UI::Xaml::Controls::LayoutContext, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<NonVirtualizingLayoutContext, winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides, winrt::Microsoft::UI::Xaml::Controls::ILayoutContext, winrt::Microsoft::UI::Xaml::Controls::ILayoutContextOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        NonVirtualizingLayoutContext(std::nullptr_t) noexcept {}
        NonVirtualizingLayoutContext(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext(ptr, take_ownership_from_abi) {}
        NonVirtualizingLayoutContext();
    };
    struct WINRT_IMPL_EMPTY_BASES NumberBox : winrt::Microsoft::UI::Xaml::Controls::INumberBox,
        impl::base<NumberBox, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<NumberBox, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        NumberBox(std::nullptr_t) noexcept {}
        NumberBox(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::INumberBox(ptr, take_ownership_from_abi) {}
        NumberBox();
        [[nodiscard]] static auto MinimumProperty();
        [[nodiscard]] static auto MaximumProperty();
        [[nodiscard]] static auto ValueProperty();
        [[nodiscard]] static auto SmallChangeProperty();
        [[nodiscard]] static auto LargeChangeProperty();
        [[nodiscard]] static auto TextProperty();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
        [[nodiscard]] static auto PlaceholderTextProperty();
        [[nodiscard]] static auto SelectionFlyoutProperty();
        [[nodiscard]] static auto SelectionHighlightColorProperty();
        [[nodiscard]] static auto TextReadingOrderProperty();
        [[nodiscard]] static auto PreventKeyboardDisplayOnProgrammaticFocusProperty();
        [[nodiscard]] static auto DescriptionProperty();
        [[nodiscard]] static auto ValidationModeProperty();
        [[nodiscard]] static auto SpinButtonPlacementModeProperty();
        [[nodiscard]] static auto IsWrapEnabledProperty();
        [[nodiscard]] static auto AcceptsExpressionProperty();
        [[nodiscard]] static auto NumberFormatterProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES NumberBoxValueChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::INumberBoxValueChangedEventArgs
    {
        NumberBoxValueChangedEventArgs(std::nullptr_t) noexcept {}
        NumberBoxValueChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::INumberBoxValueChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES Page : winrt::Microsoft::UI::Xaml::Controls::IPage,
        impl::base<Page, winrt::Microsoft::UI::Xaml::Controls::UserControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<Page, winrt::Microsoft::UI::Xaml::Controls::IPageOverrides, winrt::Microsoft::UI::Xaml::Controls::IUserControl, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        Page(std::nullptr_t) noexcept {}
        Page(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IPage(ptr, take_ownership_from_abi) {}
        Page();
        [[nodiscard]] static auto FrameProperty();
        [[nodiscard]] static auto TopAppBarProperty();
        [[nodiscard]] static auto BottomAppBarProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES Panel : winrt::Microsoft::UI::Xaml::Controls::IPanel,
        impl::base<Panel, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<Panel, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        Panel(std::nullptr_t) noexcept {}
        Panel(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IPanel(ptr, take_ownership_from_abi) {}
        [[nodiscard]] static auto BackgroundProperty();
        [[nodiscard]] static auto IsItemsHostProperty();
        [[nodiscard]] static auto ChildrenTransitionsProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ParallaxView : winrt::Microsoft::UI::Xaml::Controls::IParallaxView,
        impl::base<ParallaxView, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ParallaxView, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ParallaxView(std::nullptr_t) noexcept {}
        ParallaxView(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IParallaxView(ptr, take_ownership_from_abi) {}
        ParallaxView();
        [[nodiscard]] static auto ChildProperty();
        [[nodiscard]] static auto HorizontalSourceEndOffsetProperty();
        [[nodiscard]] static auto HorizontalSourceOffsetKindProperty();
        [[nodiscard]] static auto HorizontalSourceStartOffsetProperty();
        [[nodiscard]] static auto MaxHorizontalShiftRatioProperty();
        [[nodiscard]] static auto HorizontalShiftProperty();
        [[nodiscard]] static auto IsHorizontalShiftClampedProperty();
        [[nodiscard]] static auto IsVerticalShiftClampedProperty();
        [[nodiscard]] static auto SourceProperty();
        [[nodiscard]] static auto VerticalSourceEndOffsetProperty();
        [[nodiscard]] static auto VerticalSourceOffsetKindProperty();
        [[nodiscard]] static auto VerticalSourceStartOffsetProperty();
        [[nodiscard]] static auto MaxVerticalShiftRatioProperty();
        [[nodiscard]] static auto VerticalShiftProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES PasswordBox : winrt::Microsoft::UI::Xaml::Controls::IPasswordBox,
        impl::base<PasswordBox, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<PasswordBox, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        PasswordBox(std::nullptr_t) noexcept {}
        PasswordBox(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IPasswordBox(ptr, take_ownership_from_abi) {}
        PasswordBox();
        [[nodiscard]] static auto PasswordProperty();
        [[nodiscard]] static auto PasswordCharProperty();
        [[nodiscard]] static auto IsPasswordRevealButtonEnabledProperty();
        [[nodiscard]] static auto MaxLengthProperty();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
        [[nodiscard]] static auto PlaceholderTextProperty();
        [[nodiscard]] static auto SelectionHighlightColorProperty();
        [[nodiscard]] static auto PreventKeyboardDisplayOnProgrammaticFocusProperty();
        [[nodiscard]] static auto PasswordRevealModeProperty();
        [[nodiscard]] static auto TextReadingOrderProperty();
        [[nodiscard]] static auto InputScopeProperty();
        [[nodiscard]] static auto CanPasteClipboardContentProperty();
        [[nodiscard]] static auto SelectionFlyoutProperty();
        [[nodiscard]] static auto DescriptionProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES PasswordBoxPasswordChangingEventArgs : winrt::Microsoft::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs
    {
        PasswordBoxPasswordChangingEventArgs(std::nullptr_t) noexcept {}
        PasswordBoxPasswordChangingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IPasswordBoxPasswordChangingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES PathIcon : winrt::Microsoft::UI::Xaml::Controls::IPathIcon,
        impl::base<PathIcon, winrt::Microsoft::UI::Xaml::Controls::IconElement, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<PathIcon, winrt::Microsoft::UI::Xaml::Controls::IIconElement, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        PathIcon(std::nullptr_t) noexcept {}
        PathIcon(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IPathIcon(ptr, take_ownership_from_abi) {}
        PathIcon();
        [[nodiscard]] static auto DataProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES PathIconSource : winrt::Microsoft::UI::Xaml::Controls::IPathIconSource,
        impl::base<PathIconSource, winrt::Microsoft::UI::Xaml::Controls::IconSource, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<PathIconSource, winrt::Microsoft::UI::Xaml::Controls::IIconSource, winrt::Microsoft::UI::Xaml::Controls::IIconSourceOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        PathIconSource(std::nullptr_t) noexcept {}
        PathIconSource(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IPathIconSource(ptr, take_ownership_from_abi) {}
        PathIconSource();
        [[nodiscard]] static auto DataProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES PersonPicture : winrt::Microsoft::UI::Xaml::Controls::IPersonPicture,
        impl::base<PersonPicture, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<PersonPicture, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        PersonPicture(std::nullptr_t) noexcept {}
        PersonPicture(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IPersonPicture(ptr, take_ownership_from_abi) {}
        PersonPicture();
        [[nodiscard]] static auto BadgeNumberProperty();
        [[nodiscard]] static auto BadgeGlyphProperty();
        [[nodiscard]] static auto BadgeImageSourceProperty();
        [[nodiscard]] static auto BadgeTextProperty();
        [[nodiscard]] static auto IsGroupProperty();
        [[nodiscard]] static auto ContactProperty();
        [[nodiscard]] static auto DisplayNameProperty();
        [[nodiscard]] static auto InitialsProperty();
        [[nodiscard]] static auto PreferSmallImageProperty();
        [[nodiscard]] static auto ProfilePictureProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES PersonPictureTemplateSettings : winrt::Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings,
        impl::base<PersonPictureTemplateSettings, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<PersonPictureTemplateSettings, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        PersonPictureTemplateSettings(std::nullptr_t) noexcept {}
        PersonPictureTemplateSettings(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES PickerConfirmedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IPickerConfirmedEventArgs,
        impl::base<PickerConfirmedEventArgs, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<PickerConfirmedEventArgs, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        PickerConfirmedEventArgs(std::nullptr_t) noexcept {}
        PickerConfirmedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IPickerConfirmedEventArgs(ptr, take_ownership_from_abi) {}
        PickerConfirmedEventArgs();
    };
    struct WINRT_IMPL_EMPTY_BASES PickerFlyout : winrt::Microsoft::UI::Xaml::Controls::IPickerFlyout,
        impl::base<PickerFlyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::PickerFlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<PickerFlyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        PickerFlyout(std::nullptr_t) noexcept {}
        PickerFlyout(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IPickerFlyout(ptr, take_ownership_from_abi) {}
        PickerFlyout();
        [[nodiscard]] static auto ContentProperty();
        [[nodiscard]] static auto ConfirmationButtonsVisibleProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES PickerFlyoutPresenter : winrt::Microsoft::UI::Xaml::Controls::IPickerFlyoutPresenter,
        impl::base<PickerFlyoutPresenter, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<PickerFlyoutPresenter, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        PickerFlyoutPresenter(std::nullptr_t) noexcept {}
        PickerFlyoutPresenter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IPickerFlyoutPresenter(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES PipsPager : winrt::Microsoft::UI::Xaml::Controls::IPipsPager,
        impl::base<PipsPager, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<PipsPager, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        PipsPager(std::nullptr_t) noexcept {}
        PipsPager(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IPipsPager(ptr, take_ownership_from_abi) {}
        PipsPager();
        [[nodiscard]] static auto NumberOfPagesProperty();
        [[nodiscard]] static auto SelectedPageIndexProperty();
        [[nodiscard]] static auto MaxVisiblePipsProperty();
        [[nodiscard]] static auto OrientationProperty();
        [[nodiscard]] static auto PreviousButtonVisibilityProperty();
        [[nodiscard]] static auto NextButtonVisibilityProperty();
        [[nodiscard]] static auto PreviousButtonStyleProperty();
        [[nodiscard]] static auto NextButtonStyleProperty();
        [[nodiscard]] static auto SelectedPipStyleProperty();
        [[nodiscard]] static auto NormalPipStyleProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES PipsPagerSelectedIndexChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IPipsPagerSelectedIndexChangedEventArgs
    {
        PipsPagerSelectedIndexChangedEventArgs(std::nullptr_t) noexcept {}
        PipsPagerSelectedIndexChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IPipsPagerSelectedIndexChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES PipsPagerTemplateSettings : winrt::Microsoft::UI::Xaml::Controls::IPipsPagerTemplateSettings,
        impl::base<PipsPagerTemplateSettings, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<PipsPagerTemplateSettings, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        PipsPagerTemplateSettings(std::nullptr_t) noexcept {}
        PipsPagerTemplateSettings(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IPipsPagerTemplateSettings(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES Pivot : winrt::Microsoft::UI::Xaml::Controls::IPivot,
        impl::base<Pivot, winrt::Microsoft::UI::Xaml::Controls::ItemsControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<Pivot, winrt::Microsoft::UI::Xaml::Controls::IItemsControl, winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IItemContainerMapping, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        Pivot(std::nullptr_t) noexcept {}
        Pivot(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IPivot(ptr, take_ownership_from_abi) {}
        Pivot();
        [[nodiscard]] static auto TitleProperty();
        [[nodiscard]] static auto TitleTemplateProperty();
        [[nodiscard]] static auto LeftHeaderProperty();
        [[nodiscard]] static auto LeftHeaderTemplateProperty();
        [[nodiscard]] static auto RightHeaderProperty();
        [[nodiscard]] static auto RightHeaderTemplateProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
        [[nodiscard]] static auto SelectedIndexProperty();
        [[nodiscard]] static auto SelectedItemProperty();
        [[nodiscard]] static auto IsLockedProperty();
        [[nodiscard]] static auto HeaderFocusVisualPlacementProperty();
        [[nodiscard]] static auto IsHeaderItemsCarouselEnabledProperty();
        [[nodiscard]] static auto SlideInAnimationGroupProperty();
        static auto GetSlideInAnimationGroup(winrt::Microsoft::UI::Xaml::FrameworkElement const& element);
        static auto SetSlideInAnimationGroup(winrt::Microsoft::UI::Xaml::FrameworkElement const& element, winrt::Microsoft::UI::Xaml::Controls::PivotSlideInAnimationGroup const& value);
    };
    struct WINRT_IMPL_EMPTY_BASES PivotItem : winrt::Microsoft::UI::Xaml::Controls::IPivotItem,
        impl::base<PivotItem, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<PivotItem, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        PivotItem(std::nullptr_t) noexcept {}
        PivotItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IPivotItem(ptr, take_ownership_from_abi) {}
        PivotItem();
        [[nodiscard]] static auto HeaderProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES PivotItemEventArgs : winrt::Microsoft::UI::Xaml::Controls::IPivotItemEventArgs
    {
        PivotItemEventArgs(std::nullptr_t) noexcept {}
        PivotItemEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IPivotItemEventArgs(ptr, take_ownership_from_abi) {}
        PivotItemEventArgs();
    };
    struct WINRT_IMPL_EMPTY_BASES ProgressBar : winrt::Microsoft::UI::Xaml::Controls::IProgressBar,
        impl::base<ProgressBar, winrt::Microsoft::UI::Xaml::Controls::Primitives::RangeBase, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ProgressBar, winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ProgressBar(std::nullptr_t) noexcept {}
        ProgressBar(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IProgressBar(ptr, take_ownership_from_abi) {}
        ProgressBar();
        [[nodiscard]] static auto IsIndeterminateProperty();
        [[nodiscard]] static auto ShowErrorProperty();
        [[nodiscard]] static auto ShowPausedProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ProgressBarTemplateSettings : winrt::Microsoft::UI::Xaml::Controls::IProgressBarTemplateSettings,
        impl::base<ProgressBarTemplateSettings, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ProgressBarTemplateSettings, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ProgressBarTemplateSettings(std::nullptr_t) noexcept {}
        ProgressBarTemplateSettings(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IProgressBarTemplateSettings(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ProgressRing : winrt::Microsoft::UI::Xaml::Controls::IProgressRing,
        impl::base<ProgressRing, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ProgressRing, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ProgressRing(std::nullptr_t) noexcept {}
        ProgressRing(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IProgressRing(ptr, take_ownership_from_abi) {}
        ProgressRing();
        [[nodiscard]] static auto IsActiveProperty();
        [[nodiscard]] static auto IsIndeterminateProperty();
        [[nodiscard]] static auto ValueProperty();
        [[nodiscard]] static auto MinimumProperty();
        [[nodiscard]] static auto MaximumProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ProgressRingTemplateSettings : winrt::Microsoft::UI::Xaml::Controls::IProgressRingTemplateSettings,
        impl::base<ProgressRingTemplateSettings, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ProgressRingTemplateSettings, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ProgressRingTemplateSettings(std::nullptr_t) noexcept {}
        ProgressRingTemplateSettings(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IProgressRingTemplateSettings(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES RadioButton : winrt::Microsoft::UI::Xaml::Controls::IRadioButton,
        impl::base<RadioButton, winrt::Microsoft::UI::Xaml::Controls::Primitives::ToggleButton, winrt::Microsoft::UI::Xaml::Controls::Primitives::ButtonBase, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<RadioButton, winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton, winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonOverrides, winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBase, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        RadioButton(std::nullptr_t) noexcept {}
        RadioButton(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRadioButton(ptr, take_ownership_from_abi) {}
        RadioButton();
        [[nodiscard]] static auto GroupNameProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES RadioButtons : winrt::Microsoft::UI::Xaml::Controls::IRadioButtons,
        impl::base<RadioButtons, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<RadioButtons, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        RadioButtons(std::nullptr_t) noexcept {}
        RadioButtons(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRadioButtons(ptr, take_ownership_from_abi) {}
        RadioButtons();
        [[nodiscard]] static auto ItemsSourceProperty();
        [[nodiscard]] static auto ItemsProperty();
        [[nodiscard]] static auto ItemTemplateProperty();
        [[nodiscard]] static auto SelectedIndexProperty();
        [[nodiscard]] static auto SelectedItemProperty();
        [[nodiscard]] static auto MaxColumnsProperty();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES RadioMenuFlyoutItem : winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem,
        impl::base<RadioMenuFlyoutItem, winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutItem, winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<RadioMenuFlyoutItem, winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItem, winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBase, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        RadioMenuFlyoutItem(std::nullptr_t) noexcept {}
        RadioMenuFlyoutItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem(ptr, take_ownership_from_abi) {}
        RadioMenuFlyoutItem();
        [[nodiscard]] static auto IsCheckedProperty();
        [[nodiscard]] static auto GroupNameProperty();
        [[nodiscard]] static auto AreCheckStatesEnabledProperty();
        static auto SetAreCheckStatesEnabled(winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem const& object, bool value);
        static auto GetAreCheckStatesEnabled(winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutSubItem const& object);
    };
    struct WINRT_IMPL_EMPTY_BASES RatingControl : winrt::Microsoft::UI::Xaml::Controls::IRatingControl,
        impl::base<RatingControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<RatingControl, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        RatingControl(std::nullptr_t) noexcept {}
        RatingControl(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRatingControl(ptr, take_ownership_from_abi) {}
        RatingControl();
        [[nodiscard]] static auto CaptionProperty();
        [[nodiscard]] static auto InitialSetValueProperty();
        [[nodiscard]] static auto IsClearEnabledProperty();
        [[nodiscard]] static auto IsReadOnlyProperty();
        [[nodiscard]] static auto MaxRatingProperty();
        [[nodiscard]] static auto PlaceholderValueProperty();
        [[nodiscard]] static auto ItemInfoProperty();
        [[nodiscard]] static auto ValueProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES RatingItemFontInfo : winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfo,
        impl::base<RatingItemFontInfo, winrt::Microsoft::UI::Xaml::Controls::RatingItemInfo, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<RatingItemFontInfo, winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfo, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        RatingItemFontInfo(std::nullptr_t) noexcept {}
        RatingItemFontInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfo(ptr, take_ownership_from_abi) {}
        RatingItemFontInfo();
        [[nodiscard]] static auto DisabledGlyphProperty();
        [[nodiscard]] static auto GlyphProperty();
        [[nodiscard]] static auto PlaceholderGlyphProperty();
        [[nodiscard]] static auto PointerOverGlyphProperty();
        [[nodiscard]] static auto PointerOverPlaceholderGlyphProperty();
        [[nodiscard]] static auto UnsetGlyphProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES RatingItemImageInfo : winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfo,
        impl::base<RatingItemImageInfo, winrt::Microsoft::UI::Xaml::Controls::RatingItemInfo, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<RatingItemImageInfo, winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfo, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        RatingItemImageInfo(std::nullptr_t) noexcept {}
        RatingItemImageInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfo(ptr, take_ownership_from_abi) {}
        RatingItemImageInfo();
        [[nodiscard]] static auto DisabledImageProperty();
        [[nodiscard]] static auto ImageProperty();
        [[nodiscard]] static auto PlaceholderImageProperty();
        [[nodiscard]] static auto PointerOverImageProperty();
        [[nodiscard]] static auto PointerOverPlaceholderImageProperty();
        [[nodiscard]] static auto UnsetImageProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES RatingItemInfo : winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfo,
        impl::base<RatingItemInfo, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<RatingItemInfo, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        RatingItemInfo(std::nullptr_t) noexcept {}
        RatingItemInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfo(ptr, take_ownership_from_abi) {}
        RatingItemInfo();
    };
    struct WINRT_IMPL_EMPTY_BASES RefreshContainer : winrt::Microsoft::UI::Xaml::Controls::IRefreshContainer,
        impl::base<RefreshContainer, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<RefreshContainer, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        RefreshContainer(std::nullptr_t) noexcept {}
        RefreshContainer(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRefreshContainer(ptr, take_ownership_from_abi) {}
        RefreshContainer();
        [[nodiscard]] static auto VisualizerProperty();
        [[nodiscard]] static auto PullDirectionProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES RefreshInteractionRatioChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs
    {
        RefreshInteractionRatioChangedEventArgs(std::nullptr_t) noexcept {}
        RefreshInteractionRatioChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES RefreshRequestedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs
    {
        RefreshRequestedEventArgs(std::nullptr_t) noexcept {}
        RefreshRequestedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES RefreshStateChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs
    {
        RefreshStateChangedEventArgs(std::nullptr_t) noexcept {}
        RefreshStateChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES RefreshVisualizer : winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizer,
        impl::base<RefreshVisualizer, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<RefreshVisualizer, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        RefreshVisualizer(std::nullptr_t) noexcept {}
        RefreshVisualizer(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizer(ptr, take_ownership_from_abi) {}
        RefreshVisualizer();
        [[nodiscard]] static auto InfoProviderProperty();
        [[nodiscard]] static auto OrientationProperty();
        [[nodiscard]] static auto ContentProperty();
        [[nodiscard]] static auto StateProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES RelativePanel : winrt::Microsoft::UI::Xaml::Controls::IRelativePanel,
        impl::base<RelativePanel, winrt::Microsoft::UI::Xaml::Controls::Panel, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<RelativePanel, winrt::Microsoft::UI::Xaml::Controls::IPanel, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        RelativePanel(std::nullptr_t) noexcept {}
        RelativePanel(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRelativePanel(ptr, take_ownership_from_abi) {}
        RelativePanel();
        [[nodiscard]] static auto BackgroundSizingProperty();
        [[nodiscard]] static auto LeftOfProperty();
        static auto GetLeftOf(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetLeftOf(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value);
        [[nodiscard]] static auto AboveProperty();
        static auto GetAbove(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetAbove(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value);
        [[nodiscard]] static auto RightOfProperty();
        static auto GetRightOf(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetRightOf(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value);
        [[nodiscard]] static auto BelowProperty();
        static auto GetBelow(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetBelow(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value);
        [[nodiscard]] static auto AlignHorizontalCenterWithProperty();
        static auto GetAlignHorizontalCenterWith(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetAlignHorizontalCenterWith(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value);
        [[nodiscard]] static auto AlignVerticalCenterWithProperty();
        static auto GetAlignVerticalCenterWith(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetAlignVerticalCenterWith(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value);
        [[nodiscard]] static auto AlignLeftWithProperty();
        static auto GetAlignLeftWith(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetAlignLeftWith(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value);
        [[nodiscard]] static auto AlignTopWithProperty();
        static auto GetAlignTopWith(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetAlignTopWith(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value);
        [[nodiscard]] static auto AlignRightWithProperty();
        static auto GetAlignRightWith(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetAlignRightWith(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value);
        [[nodiscard]] static auto AlignBottomWithProperty();
        static auto GetAlignBottomWith(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetAlignBottomWith(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Windows::Foundation::IInspectable const& value);
        [[nodiscard]] static auto AlignLeftWithPanelProperty();
        static auto GetAlignLeftWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetAlignLeftWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element, bool value);
        [[nodiscard]] static auto AlignTopWithPanelProperty();
        static auto GetAlignTopWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetAlignTopWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element, bool value);
        [[nodiscard]] static auto AlignRightWithPanelProperty();
        static auto GetAlignRightWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetAlignRightWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element, bool value);
        [[nodiscard]] static auto AlignBottomWithPanelProperty();
        static auto GetAlignBottomWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetAlignBottomWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element, bool value);
        [[nodiscard]] static auto AlignHorizontalCenterWithPanelProperty();
        static auto GetAlignHorizontalCenterWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetAlignHorizontalCenterWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element, bool value);
        [[nodiscard]] static auto AlignVerticalCenterWithPanelProperty();
        static auto GetAlignVerticalCenterWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetAlignVerticalCenterWithPanel(winrt::Microsoft::UI::Xaml::UIElement const& element, bool value);
        [[nodiscard]] static auto BorderBrushProperty();
        [[nodiscard]] static auto BorderThicknessProperty();
        [[nodiscard]] static auto CornerRadiusProperty();
        [[nodiscard]] static auto PaddingProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES RevealListViewItemPresenter : winrt::Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter,
        impl::base<RevealListViewItemPresenter, winrt::Microsoft::UI::Xaml::Controls::Primitives::ListViewItemPresenter, winrt::Microsoft::UI::Xaml::Controls::ContentPresenter, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<RevealListViewItemPresenter, winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemPresenter, winrt::Microsoft::UI::Xaml::Controls::IContentPresenter, winrt::Microsoft::UI::Xaml::Controls::IContentPresenterOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        RevealListViewItemPresenter(std::nullptr_t) noexcept {}
        RevealListViewItemPresenter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter(ptr, take_ownership_from_abi) {}
        RevealListViewItemPresenter();
    };
    struct WINRT_IMPL_EMPTY_BASES RichEditBox : winrt::Microsoft::UI::Xaml::Controls::IRichEditBox,
        impl::base<RichEditBox, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<RichEditBox, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        RichEditBox(std::nullptr_t) noexcept {}
        RichEditBox(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRichEditBox(ptr, take_ownership_from_abi) {}
        RichEditBox();
        [[nodiscard]] static auto IsReadOnlyProperty();
        [[nodiscard]] static auto AcceptsReturnProperty();
        [[nodiscard]] static auto TextAlignmentProperty();
        [[nodiscard]] static auto TextWrappingProperty();
        [[nodiscard]] static auto IsSpellCheckEnabledProperty();
        [[nodiscard]] static auto IsTextPredictionEnabledProperty();
        [[nodiscard]] static auto InputScopeProperty();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
        [[nodiscard]] static auto PlaceholderTextProperty();
        [[nodiscard]] static auto SelectionHighlightColorProperty();
        [[nodiscard]] static auto PreventKeyboardDisplayOnProgrammaticFocusProperty();
        [[nodiscard]] static auto IsColorFontEnabledProperty();
        [[nodiscard]] static auto SelectionHighlightColorWhenNotFocusedProperty();
        [[nodiscard]] static auto MaxLengthProperty();
        [[nodiscard]] static auto HorizontalTextAlignmentProperty();
        [[nodiscard]] static auto CharacterCasingProperty();
        [[nodiscard]] static auto DisabledFormattingAcceleratorsProperty();
        [[nodiscard]] static auto SelectionFlyoutProperty();
        [[nodiscard]] static auto ProofingMenuFlyoutProperty();
        [[nodiscard]] static auto DescriptionProperty();
        [[nodiscard]] static auto DesiredCandidateWindowAlignmentProperty();
        [[nodiscard]] static auto TextReadingOrderProperty();
        [[nodiscard]] static auto ClipboardCopyFormatProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES RichEditBoxSelectionChangingEventArgs : winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxSelectionChangingEventArgs
    {
        RichEditBoxSelectionChangingEventArgs(std::nullptr_t) noexcept {}
        RichEditBoxSelectionChangingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxSelectionChangingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES RichEditBoxTextChangingEventArgs : winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs
    {
        RichEditBoxTextChangingEventArgs(std::nullptr_t) noexcept {}
        RichEditBoxTextChangingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES RichTextBlock : winrt::Microsoft::UI::Xaml::Controls::IRichTextBlock,
        impl::base<RichTextBlock, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<RichTextBlock, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        RichTextBlock(std::nullptr_t) noexcept {}
        RichTextBlock(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRichTextBlock(ptr, take_ownership_from_abi) {}
        RichTextBlock();
        [[nodiscard]] static auto FontSizeProperty();
        [[nodiscard]] static auto FontFamilyProperty();
        [[nodiscard]] static auto FontWeightProperty();
        [[nodiscard]] static auto FontStyleProperty();
        [[nodiscard]] static auto FontStretchProperty();
        [[nodiscard]] static auto ForegroundProperty();
        [[nodiscard]] static auto TextWrappingProperty();
        [[nodiscard]] static auto TextTrimmingProperty();
        [[nodiscard]] static auto TextAlignmentProperty();
        [[nodiscard]] static auto PaddingProperty();
        [[nodiscard]] static auto LineHeightProperty();
        [[nodiscard]] static auto LineStackingStrategyProperty();
        [[nodiscard]] static auto CharacterSpacingProperty();
        [[nodiscard]] static auto OverflowContentTargetProperty();
        [[nodiscard]] static auto IsTextSelectionEnabledProperty();
        [[nodiscard]] static auto HasOverflowContentProperty();
        [[nodiscard]] static auto SelectedTextProperty();
        [[nodiscard]] static auto MaxLinesProperty();
        [[nodiscard]] static auto TextLineBoundsProperty();
        [[nodiscard]] static auto SelectionHighlightColorProperty();
        [[nodiscard]] static auto OpticalMarginAlignmentProperty();
        [[nodiscard]] static auto IsColorFontEnabledProperty();
        [[nodiscard]] static auto TextReadingOrderProperty();
        [[nodiscard]] static auto IsTextScaleFactorEnabledProperty();
        [[nodiscard]] static auto TextDecorationsProperty();
        [[nodiscard]] static auto IsTextTrimmedProperty();
        [[nodiscard]] static auto HorizontalTextAlignmentProperty();
        [[nodiscard]] static auto SelectionFlyoutProperty();
        [[nodiscard]] static auto TextIndentProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES RichTextBlockOverflow : winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow,
        impl::base<RichTextBlockOverflow, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<RichTextBlockOverflow, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        RichTextBlockOverflow(std::nullptr_t) noexcept {}
        RichTextBlockOverflow(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRichTextBlockOverflow(ptr, take_ownership_from_abi) {}
        RichTextBlockOverflow();
        [[nodiscard]] static auto OverflowContentTargetProperty();
        [[nodiscard]] static auto PaddingProperty();
        [[nodiscard]] static auto HasOverflowContentProperty();
        [[nodiscard]] static auto MaxLinesProperty();
        [[nodiscard]] static auto IsTextTrimmedProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES RowDefinition : winrt::Microsoft::UI::Xaml::Controls::IRowDefinition,
        impl::base<RowDefinition, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<RowDefinition, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        RowDefinition(std::nullptr_t) noexcept {}
        RowDefinition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IRowDefinition(ptr, take_ownership_from_abi) {}
        RowDefinition();
        [[nodiscard]] static auto HeightProperty();
        [[nodiscard]] static auto MaxHeightProperty();
        [[nodiscard]] static auto MinHeightProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES RowDefinitionCollection : winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Controls::RowDefinition>
    {
        RowDefinitionCollection(std::nullptr_t) noexcept {}
        RowDefinitionCollection(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Controls::RowDefinition>(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ScrollContentPresenter : winrt::Microsoft::UI::Xaml::Controls::IScrollContentPresenter,
        impl::base<ScrollContentPresenter, winrt::Microsoft::UI::Xaml::Controls::ContentPresenter, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ScrollContentPresenter, winrt::Microsoft::UI::Xaml::Controls::IContentPresenter, winrt::Microsoft::UI::Xaml::Controls::IContentPresenterOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ScrollContentPresenter(std::nullptr_t) noexcept {}
        ScrollContentPresenter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IScrollContentPresenter(ptr, take_ownership_from_abi) {}
        ScrollContentPresenter();
        [[nodiscard]] static auto CanContentRenderOutsideBoundsProperty();
        [[nodiscard]] static auto SizesContentToTemplatedParentProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ScrollView : winrt::Microsoft::UI::Xaml::Controls::IScrollView,
        impl::base<ScrollView, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ScrollView, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ScrollView(std::nullptr_t) noexcept {}
        ScrollView(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IScrollView(ptr, take_ownership_from_abi) {}
        ScrollView();
        [[nodiscard]] static auto ContentProperty();
        [[nodiscard]] static auto ScrollPresenterProperty();
        [[nodiscard]] static auto HorizontalScrollBarVisibilityProperty();
        [[nodiscard]] static auto VerticalScrollBarVisibilityProperty();
        [[nodiscard]] static auto ContentOrientationProperty();
        [[nodiscard]] static auto HorizontalScrollChainModeProperty();
        [[nodiscard]] static auto VerticalScrollChainModeProperty();
        [[nodiscard]] static auto HorizontalScrollRailModeProperty();
        [[nodiscard]] static auto VerticalScrollRailModeProperty();
        [[nodiscard]] static auto HorizontalScrollModeProperty();
        [[nodiscard]] static auto VerticalScrollModeProperty();
        [[nodiscard]] static auto ComputedHorizontalScrollBarVisibilityProperty();
        [[nodiscard]] static auto ComputedVerticalScrollBarVisibilityProperty();
        [[nodiscard]] static auto ComputedHorizontalScrollModeProperty();
        [[nodiscard]] static auto ComputedVerticalScrollModeProperty();
        [[nodiscard]] static auto ZoomChainModeProperty();
        [[nodiscard]] static auto ZoomModeProperty();
        [[nodiscard]] static auto IgnoredInputKindsProperty();
        [[nodiscard]] static auto MinZoomFactorProperty();
        [[nodiscard]] static auto MaxZoomFactorProperty();
        [[nodiscard]] static auto HorizontalAnchorRatioProperty();
        [[nodiscard]] static auto VerticalAnchorRatioProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ScrollViewer : winrt::Microsoft::UI::Xaml::Controls::IScrollViewer,
        impl::base<ScrollViewer, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ScrollViewer, winrt::Microsoft::UI::Xaml::Controls::IScrollAnchorProvider, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ScrollViewer(std::nullptr_t) noexcept {}
        ScrollViewer(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IScrollViewer(ptr, take_ownership_from_abi) {}
        ScrollViewer();
        [[nodiscard]] static auto HorizontalSnapPointsAlignmentProperty();
        [[nodiscard]] static auto VerticalSnapPointsAlignmentProperty();
        [[nodiscard]] static auto HorizontalSnapPointsTypeProperty();
        [[nodiscard]] static auto VerticalSnapPointsTypeProperty();
        [[nodiscard]] static auto ZoomSnapPointsTypeProperty();
        [[nodiscard]] static auto HorizontalOffsetProperty();
        [[nodiscard]] static auto ViewportWidthProperty();
        [[nodiscard]] static auto ScrollableWidthProperty();
        [[nodiscard]] static auto ComputedHorizontalScrollBarVisibilityProperty();
        [[nodiscard]] static auto ExtentWidthProperty();
        [[nodiscard]] static auto VerticalOffsetProperty();
        [[nodiscard]] static auto ViewportHeightProperty();
        [[nodiscard]] static auto ScrollableHeightProperty();
        [[nodiscard]] static auto ComputedVerticalScrollBarVisibilityProperty();
        [[nodiscard]] static auto ExtentHeightProperty();
        [[nodiscard]] static auto MinZoomFactorProperty();
        [[nodiscard]] static auto MaxZoomFactorProperty();
        [[nodiscard]] static auto ZoomFactorProperty();
        [[nodiscard]] static auto ZoomSnapPointsProperty();
        [[nodiscard]] static auto TopLeftHeaderProperty();
        [[nodiscard]] static auto LeftHeaderProperty();
        [[nodiscard]] static auto TopHeaderProperty();
        [[nodiscard]] static auto ReduceViewportForCoreInputViewOcclusionsProperty();
        [[nodiscard]] static auto HorizontalAnchorRatioProperty();
        [[nodiscard]] static auto VerticalAnchorRatioProperty();
        [[nodiscard]] static auto HorizontalScrollBarVisibilityProperty();
        static auto GetHorizontalScrollBarVisibility(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetHorizontalScrollBarVisibility(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Microsoft::UI::Xaml::Controls::ScrollBarVisibility const& horizontalScrollBarVisibility);
        [[nodiscard]] static auto VerticalScrollBarVisibilityProperty();
        static auto GetVerticalScrollBarVisibility(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetVerticalScrollBarVisibility(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Microsoft::UI::Xaml::Controls::ScrollBarVisibility const& verticalScrollBarVisibility);
        [[nodiscard]] static auto IsHorizontalRailEnabledProperty();
        static auto GetIsHorizontalRailEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetIsHorizontalRailEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool isHorizontalRailEnabled);
        [[nodiscard]] static auto IsVerticalRailEnabledProperty();
        static auto GetIsVerticalRailEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetIsVerticalRailEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool isVerticalRailEnabled);
        [[nodiscard]] static auto IsHorizontalScrollChainingEnabledProperty();
        static auto GetIsHorizontalScrollChainingEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetIsHorizontalScrollChainingEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool isHorizontalScrollChainingEnabled);
        [[nodiscard]] static auto IsVerticalScrollChainingEnabledProperty();
        static auto GetIsVerticalScrollChainingEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetIsVerticalScrollChainingEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool isVerticalScrollChainingEnabled);
        [[nodiscard]] static auto IsZoomChainingEnabledProperty();
        static auto GetIsZoomChainingEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetIsZoomChainingEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool isZoomChainingEnabled);
        [[nodiscard]] static auto IsScrollInertiaEnabledProperty();
        static auto GetIsScrollInertiaEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetIsScrollInertiaEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool isScrollInertiaEnabled);
        [[nodiscard]] static auto IsZoomInertiaEnabledProperty();
        static auto GetIsZoomInertiaEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetIsZoomInertiaEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool isZoomInertiaEnabled);
        [[nodiscard]] static auto HorizontalScrollModeProperty();
        static auto GetHorizontalScrollMode(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetHorizontalScrollMode(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Microsoft::UI::Xaml::Controls::ScrollMode const& horizontalScrollMode);
        [[nodiscard]] static auto VerticalScrollModeProperty();
        static auto GetVerticalScrollMode(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetVerticalScrollMode(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Microsoft::UI::Xaml::Controls::ScrollMode const& verticalScrollMode);
        [[nodiscard]] static auto ZoomModeProperty();
        static auto GetZoomMode(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetZoomMode(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Microsoft::UI::Xaml::Controls::ZoomMode const& zoomMode);
        [[nodiscard]] static auto CanContentRenderOutsideBoundsProperty();
        static auto GetCanContentRenderOutsideBounds(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetCanContentRenderOutsideBounds(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool canContentRenderOutsideBounds);
        [[nodiscard]] static auto IsDeferredScrollingEnabledProperty();
        static auto GetIsDeferredScrollingEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetIsDeferredScrollingEnabled(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool isDeferredScrollingEnabled);
        [[nodiscard]] static auto BringIntoViewOnFocusChangeProperty();
        static auto GetBringIntoViewOnFocusChange(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetBringIntoViewOnFocusChange(winrt::Microsoft::UI::Xaml::DependencyObject const& element, bool bringIntoViewOnFocusChange);
    };
    struct WINRT_IMPL_EMPTY_BASES ScrollViewerView : winrt::Microsoft::UI::Xaml::Controls::IScrollViewerView
    {
        ScrollViewerView(std::nullptr_t) noexcept {}
        ScrollViewerView(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IScrollViewerView(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ScrollViewerViewChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs
    {
        ScrollViewerViewChangedEventArgs(std::nullptr_t) noexcept {}
        ScrollViewerViewChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs(ptr, take_ownership_from_abi) {}
        ScrollViewerViewChangedEventArgs();
    };
    struct WINRT_IMPL_EMPTY_BASES ScrollViewerViewChangingEventArgs : winrt::Microsoft::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs
    {
        ScrollViewerViewChangingEventArgs(std::nullptr_t) noexcept {}
        ScrollViewerViewChangingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ScrollingAnchorRequestedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IScrollingAnchorRequestedEventArgs
    {
        ScrollingAnchorRequestedEventArgs(std::nullptr_t) noexcept {}
        ScrollingAnchorRequestedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IScrollingAnchorRequestedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ScrollingBringingIntoViewEventArgs : winrt::Microsoft::UI::Xaml::Controls::IScrollingBringingIntoViewEventArgs
    {
        ScrollingBringingIntoViewEventArgs(std::nullptr_t) noexcept {}
        ScrollingBringingIntoViewEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IScrollingBringingIntoViewEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ScrollingScrollAnimationStartingEventArgs : winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollAnimationStartingEventArgs
    {
        ScrollingScrollAnimationStartingEventArgs(std::nullptr_t) noexcept {}
        ScrollingScrollAnimationStartingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollAnimationStartingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ScrollingScrollCompletedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollCompletedEventArgs
    {
        ScrollingScrollCompletedEventArgs(std::nullptr_t) noexcept {}
        ScrollingScrollCompletedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollCompletedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ScrollingScrollOptions : winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollOptions
    {
        ScrollingScrollOptions(std::nullptr_t) noexcept {}
        ScrollingScrollOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IScrollingScrollOptions(ptr, take_ownership_from_abi) {}
        explicit ScrollingScrollOptions(winrt::Microsoft::UI::Xaml::Controls::ScrollingAnimationMode const& animationMode);
        ScrollingScrollOptions(winrt::Microsoft::UI::Xaml::Controls::ScrollingAnimationMode const& animationMode, winrt::Microsoft::UI::Xaml::Controls::ScrollingSnapPointsMode const& snapPointsMode);
    };
    struct WINRT_IMPL_EMPTY_BASES ScrollingZoomAnimationStartingEventArgs : winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomAnimationStartingEventArgs
    {
        ScrollingZoomAnimationStartingEventArgs(std::nullptr_t) noexcept {}
        ScrollingZoomAnimationStartingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomAnimationStartingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ScrollingZoomCompletedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomCompletedEventArgs
    {
        ScrollingZoomCompletedEventArgs(std::nullptr_t) noexcept {}
        ScrollingZoomCompletedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomCompletedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ScrollingZoomOptions : winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomOptions
    {
        ScrollingZoomOptions(std::nullptr_t) noexcept {}
        ScrollingZoomOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IScrollingZoomOptions(ptr, take_ownership_from_abi) {}
        explicit ScrollingZoomOptions(winrt::Microsoft::UI::Xaml::Controls::ScrollingAnimationMode const& animationMode);
        ScrollingZoomOptions(winrt::Microsoft::UI::Xaml::Controls::ScrollingAnimationMode const& animationMode, winrt::Microsoft::UI::Xaml::Controls::ScrollingSnapPointsMode const& snapPointsMode);
    };
    struct WINRT_IMPL_EMPTY_BASES SectionsInViewChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventArgs
    {
        SectionsInViewChangedEventArgs(std::nullptr_t) noexcept {}
        SectionsInViewChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISectionsInViewChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES SelectionChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgs,
        impl::base<SelectionChangedEventArgs, winrt::Microsoft::UI::Xaml::RoutedEventArgs>,
        impl::require<SelectionChangedEventArgs, winrt::Microsoft::UI::Xaml::IRoutedEventArgs>
    {
        SelectionChangedEventArgs(std::nullptr_t) noexcept {}
        SelectionChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISelectionChangedEventArgs(ptr, take_ownership_from_abi) {}
        SelectionChangedEventArgs(param::vector<winrt::Windows::Foundation::IInspectable> const& removedItems, param::vector<winrt::Windows::Foundation::IInspectable> const& addedItems);
    };
    struct WINRT_IMPL_EMPTY_BASES SemanticZoom : winrt::Microsoft::UI::Xaml::Controls::ISemanticZoom,
        impl::base<SemanticZoom, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<SemanticZoom, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        SemanticZoom(std::nullptr_t) noexcept {}
        SemanticZoom(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISemanticZoom(ptr, take_ownership_from_abi) {}
        SemanticZoom();
        [[nodiscard]] static auto ZoomedInViewProperty();
        [[nodiscard]] static auto ZoomedOutViewProperty();
        [[nodiscard]] static auto IsZoomedInViewActiveProperty();
        [[nodiscard]] static auto CanChangeViewsProperty();
        [[nodiscard]] static auto IsZoomOutButtonEnabledProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES SemanticZoomLocation : winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation
    {
        SemanticZoomLocation(std::nullptr_t) noexcept {}
        SemanticZoomLocation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomLocation(ptr, take_ownership_from_abi) {}
        SemanticZoomLocation();
    };
    struct WINRT_IMPL_EMPTY_BASES SemanticZoomViewChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs
    {
        SemanticZoomViewChangedEventArgs(std::nullptr_t) noexcept {}
        SemanticZoomViewChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs(ptr, take_ownership_from_abi) {}
        SemanticZoomViewChangedEventArgs();
    };
    struct WINRT_IMPL_EMPTY_BASES Slider : winrt::Microsoft::UI::Xaml::Controls::ISlider,
        impl::base<Slider, winrt::Microsoft::UI::Xaml::Controls::Primitives::RangeBase, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<Slider, winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        Slider(std::nullptr_t) noexcept {}
        Slider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISlider(ptr, take_ownership_from_abi) {}
        Slider();
        [[nodiscard]] static auto IntermediateValueProperty();
        [[nodiscard]] static auto StepFrequencyProperty();
        [[nodiscard]] static auto SnapsToProperty();
        [[nodiscard]] static auto TickFrequencyProperty();
        [[nodiscard]] static auto TickPlacementProperty();
        [[nodiscard]] static auto OrientationProperty();
        [[nodiscard]] static auto IsDirectionReversedProperty();
        [[nodiscard]] static auto IsThumbToolTipEnabledProperty();
        [[nodiscard]] static auto ThumbToolTipValueConverterProperty();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES SplitButton : winrt::Microsoft::UI::Xaml::Controls::ISplitButton,
        impl::base<SplitButton, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<SplitButton, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        SplitButton(std::nullptr_t) noexcept {}
        SplitButton(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISplitButton(ptr, take_ownership_from_abi) {}
        SplitButton();
        [[nodiscard]] static auto FlyoutProperty();
        [[nodiscard]] static auto CommandProperty();
        [[nodiscard]] static auto CommandParameterProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES SplitButtonClickEventArgs : winrt::Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs
    {
        SplitButtonClickEventArgs(std::nullptr_t) noexcept {}
        SplitButtonClickEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES SplitView : winrt::Microsoft::UI::Xaml::Controls::ISplitView,
        impl::base<SplitView, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<SplitView, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        SplitView(std::nullptr_t) noexcept {}
        SplitView(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISplitView(ptr, take_ownership_from_abi) {}
        SplitView();
        [[nodiscard]] static auto ContentProperty();
        [[nodiscard]] static auto PaneProperty();
        [[nodiscard]] static auto IsPaneOpenProperty();
        [[nodiscard]] static auto OpenPaneLengthProperty();
        [[nodiscard]] static auto CompactPaneLengthProperty();
        [[nodiscard]] static auto PanePlacementProperty();
        [[nodiscard]] static auto DisplayModeProperty();
        [[nodiscard]] static auto TemplateSettingsProperty();
        [[nodiscard]] static auto PaneBackgroundProperty();
        [[nodiscard]] static auto LightDismissOverlayModeProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES SplitViewPaneClosingEventArgs : winrt::Microsoft::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs
    {
        SplitViewPaneClosingEventArgs(std::nullptr_t) noexcept {}
        SplitViewPaneClosingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES StackLayout : winrt::Microsoft::UI::Xaml::Controls::IStackLayout,
        impl::base<StackLayout, winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayout, winrt::Microsoft::UI::Xaml::Controls::Layout, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<StackLayout, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayout, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides, winrt::Microsoft::UI::Xaml::Controls::ILayout, winrt::Microsoft::UI::Xaml::Controls::ILayout2, winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected, winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected2, winrt::Microsoft::UI::Xaml::Controls::ILayoutOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        StackLayout(std::nullptr_t) noexcept {}
        StackLayout(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IStackLayout(ptr, take_ownership_from_abi) {}
        StackLayout();
        [[nodiscard]] static auto OrientationProperty();
        [[nodiscard]] static auto SpacingProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES StackPanel : winrt::Microsoft::UI::Xaml::Controls::IStackPanel,
        impl::base<StackPanel, winrt::Microsoft::UI::Xaml::Controls::Panel, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<StackPanel, winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo, winrt::Microsoft::UI::Xaml::Controls::IInsertionPanel, winrt::Microsoft::UI::Xaml::Controls::IPanel, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        StackPanel(std::nullptr_t) noexcept {}
        StackPanel(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IStackPanel(ptr, take_ownership_from_abi) {}
        StackPanel();
        [[nodiscard]] static auto AreScrollSnapPointsRegularProperty();
        [[nodiscard]] static auto OrientationProperty();
        [[nodiscard]] static auto BackgroundSizingProperty();
        [[nodiscard]] static auto BorderBrushProperty();
        [[nodiscard]] static auto BorderThicknessProperty();
        [[nodiscard]] static auto CornerRadiusProperty();
        [[nodiscard]] static auto PaddingProperty();
        [[nodiscard]] static auto SpacingProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES StyleSelector : winrt::Microsoft::UI::Xaml::Controls::IStyleSelector,
        impl::require<StyleSelector, winrt::Microsoft::UI::Xaml::Controls::IStyleSelectorOverrides>
    {
        StyleSelector(std::nullptr_t) noexcept {}
        StyleSelector(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IStyleSelector(ptr, take_ownership_from_abi) {}
        StyleSelector();
    };
    struct WINRT_IMPL_EMPTY_BASES SwapChainBackgroundPanel : winrt::Microsoft::UI::Xaml::Controls::ISwapChainBackgroundPanel,
        impl::base<SwapChainBackgroundPanel, winrt::Microsoft::UI::Xaml::Controls::Grid, winrt::Microsoft::UI::Xaml::Controls::Panel, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<SwapChainBackgroundPanel, winrt::Microsoft::UI::Xaml::Controls::IGrid, winrt::Microsoft::UI::Xaml::Controls::IPanel, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        SwapChainBackgroundPanel(std::nullptr_t) noexcept {}
        SwapChainBackgroundPanel(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISwapChainBackgroundPanel(ptr, take_ownership_from_abi) {}
        SwapChainBackgroundPanel();
    };
    struct WINRT_IMPL_EMPTY_BASES SwapChainPanel : winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanel,
        impl::base<SwapChainPanel, winrt::Microsoft::UI::Xaml::Controls::Grid, winrt::Microsoft::UI::Xaml::Controls::Panel, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<SwapChainPanel, winrt::Microsoft::UI::Xaml::Controls::IGrid, winrt::Microsoft::UI::Xaml::Controls::IPanel, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        SwapChainPanel(std::nullptr_t) noexcept {}
        SwapChainPanel(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISwapChainPanel(ptr, take_ownership_from_abi) {}
        SwapChainPanel();
        [[nodiscard]] static auto CompositionScaleXProperty();
        [[nodiscard]] static auto CompositionScaleYProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES SwipeControl : winrt::Microsoft::UI::Xaml::Controls::ISwipeControl,
        impl::base<SwipeControl, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<SwipeControl, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        SwipeControl(std::nullptr_t) noexcept {}
        SwipeControl(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISwipeControl(ptr, take_ownership_from_abi) {}
        SwipeControl();
        [[nodiscard]] static auto LeftItemsProperty();
        [[nodiscard]] static auto RightItemsProperty();
        [[nodiscard]] static auto TopItemsProperty();
        [[nodiscard]] static auto BottomItemsProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES SwipeItem : winrt::Microsoft::UI::Xaml::Controls::ISwipeItem,
        impl::base<SwipeItem, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<SwipeItem, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        SwipeItem(std::nullptr_t) noexcept {}
        SwipeItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISwipeItem(ptr, take_ownership_from_abi) {}
        SwipeItem();
        [[nodiscard]] static auto IconSourceProperty();
        [[nodiscard]] static auto TextProperty();
        [[nodiscard]] static auto BackgroundProperty();
        [[nodiscard]] static auto ForegroundProperty();
        [[nodiscard]] static auto CommandProperty();
        [[nodiscard]] static auto CommandParameterProperty();
        [[nodiscard]] static auto BehaviorOnInvokedProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES SwipeItemInvokedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs
    {
        SwipeItemInvokedEventArgs(std::nullptr_t) noexcept {}
        SwipeItemInvokedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES SwipeItems : winrt::Microsoft::UI::Xaml::Controls::ISwipeItems,
        impl::base<SwipeItems, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<SwipeItems, winrt::Windows::Foundation::Collections::IIterable<winrt::Microsoft::UI::Xaml::Controls::SwipeItem>, winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Controls::SwipeItem>, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        SwipeItems(std::nullptr_t) noexcept {}
        SwipeItems(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISwipeItems(ptr, take_ownership_from_abi) {}
        SwipeItems();
        [[nodiscard]] static auto ModeProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES SymbolIcon : winrt::Microsoft::UI::Xaml::Controls::ISymbolIcon,
        impl::base<SymbolIcon, winrt::Microsoft::UI::Xaml::Controls::IconElement, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<SymbolIcon, winrt::Microsoft::UI::Xaml::Controls::IIconElement, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        SymbolIcon(std::nullptr_t) noexcept {}
        SymbolIcon(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISymbolIcon(ptr, take_ownership_from_abi) {}
        SymbolIcon();
        explicit SymbolIcon(winrt::Microsoft::UI::Xaml::Controls::Symbol const& symbol);
        [[nodiscard]] static auto SymbolProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES SymbolIconSource : winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSource,
        impl::base<SymbolIconSource, winrt::Microsoft::UI::Xaml::Controls::IconSource, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<SymbolIconSource, winrt::Microsoft::UI::Xaml::Controls::IIconSource, winrt::Microsoft::UI::Xaml::Controls::IIconSourceOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        SymbolIconSource(std::nullptr_t) noexcept {}
        SymbolIconSource(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSource(ptr, take_ownership_from_abi) {}
        SymbolIconSource();
        [[nodiscard]] static auto SymbolProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES TabView : winrt::Microsoft::UI::Xaml::Controls::ITabView,
        impl::base<TabView, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TabView, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TabView(std::nullptr_t) noexcept {}
        TabView(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITabView(ptr, take_ownership_from_abi) {}
        TabView();
        [[nodiscard]] static auto TabWidthModeProperty();
        [[nodiscard]] static auto TabStripHeaderProperty();
        [[nodiscard]] static auto TabStripHeaderTemplateProperty();
        [[nodiscard]] static auto TabStripFooterProperty();
        [[nodiscard]] static auto TabStripFooterTemplateProperty();
        [[nodiscard]] static auto IsAddTabButtonVisibleProperty();
        [[nodiscard]] static auto AddTabButtonCommandProperty();
        [[nodiscard]] static auto AddTabButtonCommandParameterProperty();
        [[nodiscard]] static auto TabItemsSourceProperty();
        [[nodiscard]] static auto TabItemsProperty();
        [[nodiscard]] static auto TabItemTemplateProperty();
        [[nodiscard]] static auto TabItemTemplateSelectorProperty();
        [[nodiscard]] static auto CloseButtonOverlayModeProperty();
        [[nodiscard]] static auto CanDragTabsProperty();
        [[nodiscard]] static auto CanReorderTabsProperty();
        [[nodiscard]] static auto AllowDropTabsProperty();
        [[nodiscard]] static auto SelectedIndexProperty();
        [[nodiscard]] static auto SelectedItemProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES TabViewItem : winrt::Microsoft::UI::Xaml::Controls::ITabViewItem,
        impl::base<TabViewItem, winrt::Microsoft::UI::Xaml::Controls::ListViewItem, winrt::Microsoft::UI::Xaml::Controls::Primitives::SelectorItem, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TabViewItem, winrt::Microsoft::UI::Xaml::Controls::IListViewItem, winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TabViewItem(std::nullptr_t) noexcept {}
        TabViewItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITabViewItem(ptr, take_ownership_from_abi) {}
        TabViewItem();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
        [[nodiscard]] static auto IconSourceProperty();
        [[nodiscard]] static auto IsClosableProperty();
        [[nodiscard]] static auto TabViewTemplateSettingsProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES TabViewItemTemplateSettings : winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings,
        impl::base<TabViewItemTemplateSettings, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TabViewItemTemplateSettings, winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TabViewItemTemplateSettings(std::nullptr_t) noexcept {}
        TabViewItemTemplateSettings(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings(ptr, take_ownership_from_abi) {}
        TabViewItemTemplateSettings();
        [[nodiscard]] static auto IconElementProperty();
        [[nodiscard]] static auto TabGeometryProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES TabViewTabCloseRequestedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITabViewTabCloseRequestedEventArgs
    {
        TabViewTabCloseRequestedEventArgs(std::nullptr_t) noexcept {}
        TabViewTabCloseRequestedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITabViewTabCloseRequestedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TabViewTabDragCompletedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDragCompletedEventArgs
    {
        TabViewTabDragCompletedEventArgs(std::nullptr_t) noexcept {}
        TabViewTabDragCompletedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDragCompletedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TabViewTabDragStartingEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDragStartingEventArgs
    {
        TabViewTabDragStartingEventArgs(std::nullptr_t) noexcept {}
        TabViewTabDragStartingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDragStartingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TabViewTabDroppedOutsideEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDroppedOutsideEventArgs
    {
        TabViewTabDroppedOutsideEventArgs(std::nullptr_t) noexcept {}
        TabViewTabDroppedOutsideEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITabViewTabDroppedOutsideEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TeachingTip : winrt::Microsoft::UI::Xaml::Controls::ITeachingTip,
        impl::base<TeachingTip, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TeachingTip, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TeachingTip(std::nullptr_t) noexcept {}
        TeachingTip(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITeachingTip(ptr, take_ownership_from_abi) {}
        TeachingTip();
        [[nodiscard]] static auto IsOpenProperty();
        [[nodiscard]] static auto TargetProperty();
        [[nodiscard]] static auto TailVisibilityProperty();
        [[nodiscard]] static auto TitleProperty();
        [[nodiscard]] static auto SubtitleProperty();
        [[nodiscard]] static auto ActionButtonContentProperty();
        [[nodiscard]] static auto ActionButtonStyleProperty();
        [[nodiscard]] static auto ActionButtonCommandProperty();
        [[nodiscard]] static auto ActionButtonCommandParameterProperty();
        [[nodiscard]] static auto CloseButtonContentProperty();
        [[nodiscard]] static auto CloseButtonStyleProperty();
        [[nodiscard]] static auto CloseButtonCommandProperty();
        [[nodiscard]] static auto CloseButtonCommandParameterProperty();
        [[nodiscard]] static auto PlacementMarginProperty();
        [[nodiscard]] static auto ShouldConstrainToRootBoundsProperty();
        [[nodiscard]] static auto IsLightDismissEnabledProperty();
        [[nodiscard]] static auto PreferredPlacementProperty();
        [[nodiscard]] static auto HeroContentPlacementProperty();
        [[nodiscard]] static auto HeroContentProperty();
        [[nodiscard]] static auto IconSourceProperty();
        [[nodiscard]] static auto TemplateSettingsProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES TeachingTipClosedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs
    {
        TeachingTipClosedEventArgs(std::nullptr_t) noexcept {}
        TeachingTipClosedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TeachingTipClosingEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs
    {
        TeachingTipClosingEventArgs(std::nullptr_t) noexcept {}
        TeachingTipClosingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TeachingTipTemplateSettings : winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings,
        impl::base<TeachingTipTemplateSettings, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TeachingTipTemplateSettings, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TeachingTipTemplateSettings(std::nullptr_t) noexcept {}
        TeachingTipTemplateSettings(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings(ptr, take_ownership_from_abi) {}
        TeachingTipTemplateSettings();
        [[nodiscard]] static auto TopRightHighlightMarginProperty();
        [[nodiscard]] static auto TopLeftHighlightMarginProperty();
        [[nodiscard]] static auto IconElementProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES TextBlock : winrt::Microsoft::UI::Xaml::Controls::ITextBlock,
        impl::base<TextBlock, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TextBlock, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TextBlock(std::nullptr_t) noexcept {}
        TextBlock(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITextBlock(ptr, take_ownership_from_abi) {}
        TextBlock();
        [[nodiscard]] static auto FontSizeProperty();
        [[nodiscard]] static auto FontFamilyProperty();
        [[nodiscard]] static auto FontWeightProperty();
        [[nodiscard]] static auto FontStyleProperty();
        [[nodiscard]] static auto FontStretchProperty();
        [[nodiscard]] static auto CharacterSpacingProperty();
        [[nodiscard]] static auto ForegroundProperty();
        [[nodiscard]] static auto TextWrappingProperty();
        [[nodiscard]] static auto TextTrimmingProperty();
        [[nodiscard]] static auto TextAlignmentProperty();
        [[nodiscard]] static auto TextProperty();
        [[nodiscard]] static auto PaddingProperty();
        [[nodiscard]] static auto LineHeightProperty();
        [[nodiscard]] static auto LineStackingStrategyProperty();
        [[nodiscard]] static auto IsTextSelectionEnabledProperty();
        [[nodiscard]] static auto SelectedTextProperty();
        [[nodiscard]] static auto SelectionHighlightColorProperty();
        [[nodiscard]] static auto MaxLinesProperty();
        [[nodiscard]] static auto TextLineBoundsProperty();
        [[nodiscard]] static auto OpticalMarginAlignmentProperty();
        [[nodiscard]] static auto IsColorFontEnabledProperty();
        [[nodiscard]] static auto TextReadingOrderProperty();
        [[nodiscard]] static auto IsTextScaleFactorEnabledProperty();
        [[nodiscard]] static auto TextDecorationsProperty();
        [[nodiscard]] static auto IsTextTrimmedProperty();
        [[nodiscard]] static auto HorizontalTextAlignmentProperty();
        [[nodiscard]] static auto SelectionFlyoutProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES TextBox : winrt::Microsoft::UI::Xaml::Controls::ITextBox,
        impl::base<TextBox, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TextBox, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TextBox(std::nullptr_t) noexcept {}
        TextBox(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITextBox(ptr, take_ownership_from_abi) {}
        TextBox();
        [[nodiscard]] static auto TextProperty();
        [[nodiscard]] static auto MaxLengthProperty();
        [[nodiscard]] static auto IsReadOnlyProperty();
        [[nodiscard]] static auto AcceptsReturnProperty();
        [[nodiscard]] static auto TextAlignmentProperty();
        [[nodiscard]] static auto TextWrappingProperty();
        [[nodiscard]] static auto IsSpellCheckEnabledProperty();
        [[nodiscard]] static auto IsTextPredictionEnabledProperty();
        [[nodiscard]] static auto InputScopeProperty();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
        [[nodiscard]] static auto PlaceholderTextProperty();
        [[nodiscard]] static auto SelectionHighlightColorProperty();
        [[nodiscard]] static auto PreventKeyboardDisplayOnProgrammaticFocusProperty();
        [[nodiscard]] static auto IsColorFontEnabledProperty();
        [[nodiscard]] static auto SelectionHighlightColorWhenNotFocusedProperty();
        [[nodiscard]] static auto HorizontalTextAlignmentProperty();
        [[nodiscard]] static auto CharacterCasingProperty();
        [[nodiscard]] static auto PlaceholderForegroundProperty();
        [[nodiscard]] static auto CanPasteClipboardContentProperty();
        [[nodiscard]] static auto CanUndoProperty();
        [[nodiscard]] static auto CanRedoProperty();
        [[nodiscard]] static auto SelectionFlyoutProperty();
        [[nodiscard]] static auto ProofingMenuFlyoutProperty();
        [[nodiscard]] static auto DescriptionProperty();
        [[nodiscard]] static auto DesiredCandidateWindowAlignmentProperty();
        [[nodiscard]] static auto TextReadingOrderProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES TextBoxBeforeTextChangingEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs
    {
        TextBoxBeforeTextChangingEventArgs(std::nullptr_t) noexcept {}
        TextBoxBeforeTextChangingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITextBoxBeforeTextChangingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TextBoxSelectionChangingEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITextBoxSelectionChangingEventArgs
    {
        TextBoxSelectionChangingEventArgs(std::nullptr_t) noexcept {}
        TextBoxSelectionChangingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITextBoxSelectionChangingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TextBoxTextChangingEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITextBoxTextChangingEventArgs
    {
        TextBoxTextChangingEventArgs(std::nullptr_t) noexcept {}
        TextBoxTextChangingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITextBoxTextChangingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TextChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITextChangedEventArgs,
        impl::base<TextChangedEventArgs, winrt::Microsoft::UI::Xaml::RoutedEventArgs>,
        impl::require<TextChangedEventArgs, winrt::Microsoft::UI::Xaml::IRoutedEventArgs>
    {
        TextChangedEventArgs(std::nullptr_t) noexcept {}
        TextChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITextChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TextCommandBarFlyout : winrt::Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout,
        impl::base<TextCommandBarFlyout, winrt::Microsoft::UI::Xaml::Controls::CommandBarFlyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TextCommandBarFlyout, winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout, winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout2, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TextCommandBarFlyout(std::nullptr_t) noexcept {}
        TextCommandBarFlyout(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout(ptr, take_ownership_from_abi) {}
        TextCommandBarFlyout();
    };
    struct WINRT_IMPL_EMPTY_BASES TextCompositionChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITextCompositionChangedEventArgs
    {
        TextCompositionChangedEventArgs(std::nullptr_t) noexcept {}
        TextCompositionChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITextCompositionChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TextCompositionEndedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITextCompositionEndedEventArgs
    {
        TextCompositionEndedEventArgs(std::nullptr_t) noexcept {}
        TextCompositionEndedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITextCompositionEndedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TextCompositionStartedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITextCompositionStartedEventArgs
    {
        TextCompositionStartedEventArgs(std::nullptr_t) noexcept {}
        TextCompositionStartedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITextCompositionStartedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TextControlCopyingToClipboardEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs
    {
        TextControlCopyingToClipboardEventArgs(std::nullptr_t) noexcept {}
        TextControlCopyingToClipboardEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITextControlCopyingToClipboardEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TextControlCuttingToClipboardEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs
    {
        TextControlCuttingToClipboardEventArgs(std::nullptr_t) noexcept {}
        TextControlCuttingToClipboardEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITextControlCuttingToClipboardEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TextControlPasteEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITextControlPasteEventArgs
    {
        TextControlPasteEventArgs(std::nullptr_t) noexcept {}
        TextControlPasteEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITextControlPasteEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TimePickedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITimePickedEventArgs,
        impl::base<TimePickedEventArgs, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TimePickedEventArgs, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TimePickedEventArgs(std::nullptr_t) noexcept {}
        TimePickedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITimePickedEventArgs(ptr, take_ownership_from_abi) {}
        TimePickedEventArgs();
    };
    struct WINRT_IMPL_EMPTY_BASES TimePicker : winrt::Microsoft::UI::Xaml::Controls::ITimePicker,
        impl::base<TimePicker, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TimePicker, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TimePicker(std::nullptr_t) noexcept {}
        TimePicker(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITimePicker(ptr, take_ownership_from_abi) {}
        TimePicker();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
        [[nodiscard]] static auto ClockIdentifierProperty();
        [[nodiscard]] static auto MinuteIncrementProperty();
        [[nodiscard]] static auto TimeProperty();
        [[nodiscard]] static auto LightDismissOverlayModeProperty();
        [[nodiscard]] static auto SelectedTimeProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES TimePickerFlyout : winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyout,
        impl::base<TimePickerFlyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::PickerFlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TimePickerFlyout, winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2, winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TimePickerFlyout(std::nullptr_t) noexcept {}
        TimePickerFlyout(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyout(ptr, take_ownership_from_abi) {}
        TimePickerFlyout();
        [[nodiscard]] static auto ClockIdentifierProperty();
        [[nodiscard]] static auto TimeProperty();
        [[nodiscard]] static auto MinuteIncrementProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES TimePickerFlyoutPresenter : winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenter,
        impl::base<TimePickerFlyoutPresenter, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TimePickerFlyoutPresenter, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TimePickerFlyoutPresenter(std::nullptr_t) noexcept {}
        TimePickerFlyoutPresenter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITimePickerFlyoutPresenter(ptr, take_ownership_from_abi) {}
        [[nodiscard]] static auto IsDefaultShadowEnabledProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES TimePickerSelectedValueChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITimePickerSelectedValueChangedEventArgs
    {
        TimePickerSelectedValueChangedEventArgs(std::nullptr_t) noexcept {}
        TimePickerSelectedValueChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITimePickerSelectedValueChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TimePickerValueChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITimePickerValueChangedEventArgs
    {
        TimePickerValueChangedEventArgs(std::nullptr_t) noexcept {}
        TimePickerValueChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITimePickerValueChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ToggleMenuFlyoutItem : winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItem,
        impl::base<ToggleMenuFlyoutItem, winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutItem, winrt::Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ToggleMenuFlyoutItem, winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItem, winrt::Microsoft::UI::Xaml::Controls::IMenuFlyoutItemBase, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ToggleMenuFlyoutItem(std::nullptr_t) noexcept {}
        ToggleMenuFlyoutItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IToggleMenuFlyoutItem(ptr, take_ownership_from_abi) {}
        ToggleMenuFlyoutItem();
        [[nodiscard]] static auto IsCheckedProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ToggleSplitButton : winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButton,
        impl::base<ToggleSplitButton, winrt::Microsoft::UI::Xaml::Controls::SplitButton, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ToggleSplitButton, winrt::Microsoft::UI::Xaml::Controls::ISplitButton, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ToggleSplitButton(std::nullptr_t) noexcept {}
        ToggleSplitButton(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButton(ptr, take_ownership_from_abi) {}
        ToggleSplitButton();
        [[nodiscard]] static auto IsCheckedProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ToggleSplitButtonIsCheckedChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs
    {
        ToggleSplitButtonIsCheckedChangedEventArgs(std::nullptr_t) noexcept {}
        ToggleSplitButtonIsCheckedChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ToggleSwitch : winrt::Microsoft::UI::Xaml::Controls::IToggleSwitch,
        impl::base<ToggleSwitch, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ToggleSwitch, winrt::Microsoft::UI::Xaml::Controls::IToggleSwitchOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ToggleSwitch(std::nullptr_t) noexcept {}
        ToggleSwitch(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IToggleSwitch(ptr, take_ownership_from_abi) {}
        ToggleSwitch();
        [[nodiscard]] static auto IsOnProperty();
        [[nodiscard]] static auto HeaderProperty();
        [[nodiscard]] static auto HeaderTemplateProperty();
        [[nodiscard]] static auto OnContentProperty();
        [[nodiscard]] static auto OnContentTemplateProperty();
        [[nodiscard]] static auto OffContentProperty();
        [[nodiscard]] static auto OffContentTemplateProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ToolTip : winrt::Microsoft::UI::Xaml::Controls::IToolTip,
        impl::base<ToolTip, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<ToolTip, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        ToolTip(std::nullptr_t) noexcept {}
        ToolTip(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IToolTip(ptr, take_ownership_from_abi) {}
        ToolTip();
        [[nodiscard]] static auto HorizontalOffsetProperty();
        [[nodiscard]] static auto IsOpenProperty();
        [[nodiscard]] static auto PlacementProperty();
        [[nodiscard]] static auto PlacementTargetProperty();
        [[nodiscard]] static auto PlacementRectProperty();
        [[nodiscard]] static auto VerticalOffsetProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES ToolTipService : winrt::Microsoft::UI::Xaml::Controls::IToolTipService
    {
        ToolTipService(std::nullptr_t) noexcept {}
        ToolTipService(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IToolTipService(ptr, take_ownership_from_abi) {}
        [[nodiscard]] static auto PlacementProperty();
        static auto GetPlacement(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetPlacement(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Microsoft::UI::Xaml::Controls::Primitives::PlacementMode const& value);
        [[nodiscard]] static auto PlacementTargetProperty();
        static auto GetPlacementTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetPlacementTarget(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Microsoft::UI::Xaml::UIElement const& value);
        [[nodiscard]] static auto ToolTipProperty();
        static auto GetToolTip(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetToolTip(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Windows::Foundation::IInspectable const& value);
    };
    struct WINRT_IMPL_EMPTY_BASES TreeView : winrt::Microsoft::UI::Xaml::Controls::ITreeView,
        impl::base<TreeView, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TreeView, winrt::Microsoft::UI::Xaml::Controls::ITreeView2, winrt::Microsoft::UI::Xaml::Controls::ITreeView3, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TreeView(std::nullptr_t) noexcept {}
        TreeView(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITreeView(ptr, take_ownership_from_abi) {}
        TreeView();
        [[nodiscard]] static auto SelectedItemProperty();
        [[nodiscard]] static auto SelectionModeProperty();
        [[nodiscard]] static auto CanDragItemsProperty();
        [[nodiscard]] static auto CanReorderItemsProperty();
        [[nodiscard]] static auto ItemTemplateProperty();
        [[nodiscard]] static auto ItemTemplateSelectorProperty();
        [[nodiscard]] static auto ItemContainerStyleProperty();
        [[nodiscard]] static auto ItemContainerStyleSelectorProperty();
        [[nodiscard]] static auto ItemContainerTransitionsProperty();
        [[nodiscard]] static auto ItemsSourceProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES TreeViewCollapsedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs,
        impl::require<TreeViewCollapsedEventArgs, winrt::Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs2>
    {
        TreeViewCollapsedEventArgs(std::nullptr_t) noexcept {}
        TreeViewCollapsedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TreeViewDragItemsCompletedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs,
        impl::require<TreeViewDragItemsCompletedEventArgs, winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs2>
    {
        TreeViewDragItemsCompletedEventArgs(std::nullptr_t) noexcept {}
        TreeViewDragItemsCompletedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TreeViewDragItemsStartingEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs
    {
        TreeViewDragItemsStartingEventArgs(std::nullptr_t) noexcept {}
        TreeViewDragItemsStartingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TreeViewExpandingEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs,
        impl::require<TreeViewExpandingEventArgs, winrt::Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs2>
    {
        TreeViewExpandingEventArgs(std::nullptr_t) noexcept {}
        TreeViewExpandingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TreeViewItem : winrt::Microsoft::UI::Xaml::Controls::ITreeViewItem,
        impl::base<TreeViewItem, winrt::Microsoft::UI::Xaml::Controls::ListViewItem, winrt::Microsoft::UI::Xaml::Controls::Primitives::SelectorItem, winrt::Microsoft::UI::Xaml::Controls::ContentControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TreeViewItem, winrt::Microsoft::UI::Xaml::Controls::ITreeViewItem2, winrt::Microsoft::UI::Xaml::Controls::IListViewItem, winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem, winrt::Microsoft::UI::Xaml::Controls::IContentControl, winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TreeViewItem(std::nullptr_t) noexcept {}
        TreeViewItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITreeViewItem(ptr, take_ownership_from_abi) {}
        TreeViewItem();
        [[nodiscard]] static auto GlyphOpacityProperty();
        [[nodiscard]] static auto GlyphBrushProperty();
        [[nodiscard]] static auto ExpandedGlyphProperty();
        [[nodiscard]] static auto CollapsedGlyphProperty();
        [[nodiscard]] static auto GlyphSizeProperty();
        [[nodiscard]] static auto IsExpandedProperty();
        [[nodiscard]] static auto TreeViewItemTemplateSettingsProperty();
        [[nodiscard]] static auto HasUnrealizedChildrenProperty();
        [[nodiscard]] static auto ItemsSourceProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES TreeViewItemInvokedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs
    {
        TreeViewItemInvokedEventArgs(std::nullptr_t) noexcept {}
        TreeViewItemInvokedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TreeViewItemTemplateSettings : winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings,
        impl::base<TreeViewItemTemplateSettings, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TreeViewItemTemplateSettings, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TreeViewItemTemplateSettings(std::nullptr_t) noexcept {}
        TreeViewItemTemplateSettings(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings(ptr, take_ownership_from_abi) {}
        TreeViewItemTemplateSettings();
        [[nodiscard]] static auto ExpandedGlyphVisibilityProperty();
        [[nodiscard]] static auto CollapsedGlyphVisibilityProperty();
        [[nodiscard]] static auto IndentationProperty();
        [[nodiscard]] static auto DragItemsCountProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES TreeViewList : winrt::Microsoft::UI::Xaml::Controls::ITreeViewList,
        impl::base<TreeViewList, winrt::Microsoft::UI::Xaml::Controls::ListView, winrt::Microsoft::UI::Xaml::Controls::ListViewBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::Selector, winrt::Microsoft::UI::Xaml::Controls::ItemsControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TreeViewList, winrt::Microsoft::UI::Xaml::Controls::IListView, winrt::Microsoft::UI::Xaml::Controls::IListViewBase, winrt::Microsoft::UI::Xaml::Controls::ISemanticZoomInformation, winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelector, winrt::Microsoft::UI::Xaml::Controls::IItemsControl, winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides, winrt::Microsoft::UI::Xaml::Controls::IItemContainerMapping, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TreeViewList(std::nullptr_t) noexcept {}
        TreeViewList(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITreeViewList(ptr, take_ownership_from_abi) {}
        TreeViewList();
    };
    struct WINRT_IMPL_EMPTY_BASES TreeViewNode : winrt::Microsoft::UI::Xaml::Controls::ITreeViewNode,
        impl::base<TreeViewNode, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TreeViewNode, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TreeViewNode(std::nullptr_t) noexcept {}
        TreeViewNode(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITreeViewNode(ptr, take_ownership_from_abi) {}
        TreeViewNode();
        [[nodiscard]] static auto ContentProperty();
        [[nodiscard]] static auto DepthProperty();
        [[nodiscard]] static auto IsExpandedProperty();
        [[nodiscard]] static auto HasChildrenProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES TreeViewSelectionChangedEventArgs : winrt::Microsoft::UI::Xaml::Controls::ITreeViewSelectionChangedEventArgs
    {
        TreeViewSelectionChangedEventArgs(std::nullptr_t) noexcept {}
        TreeViewSelectionChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITreeViewSelectionChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TwoPaneView : winrt::Microsoft::UI::Xaml::Controls::ITwoPaneView,
        impl::base<TwoPaneView, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<TwoPaneView, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        TwoPaneView(std::nullptr_t) noexcept {}
        TwoPaneView(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::ITwoPaneView(ptr, take_ownership_from_abi) {}
        TwoPaneView();
        [[nodiscard]] static auto Pane1Property();
        [[nodiscard]] static auto Pane2Property();
        [[nodiscard]] static auto Pane1LengthProperty();
        [[nodiscard]] static auto Pane2LengthProperty();
        [[nodiscard]] static auto PanePriorityProperty();
        [[nodiscard]] static auto ModeProperty();
        [[nodiscard]] static auto WideModeConfigurationProperty();
        [[nodiscard]] static auto TallModeConfigurationProperty();
        [[nodiscard]] static auto MinWideModeWidthProperty();
        [[nodiscard]] static auto MinTallModeHeightProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES UIElementCollection : winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::UIElement>,
        impl::require<UIElementCollection, winrt::Microsoft::UI::Xaml::Controls::IUIElementCollection>
    {
        UIElementCollection(std::nullptr_t) noexcept {}
        UIElementCollection(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::UIElement>(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES UniformGridLayout : winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayout,
        impl::base<UniformGridLayout, winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayout, winrt::Microsoft::UI::Xaml::Controls::Layout, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<UniformGridLayout, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayout, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides, winrt::Microsoft::UI::Xaml::Controls::ILayout, winrt::Microsoft::UI::Xaml::Controls::ILayout2, winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected, winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected2, winrt::Microsoft::UI::Xaml::Controls::ILayoutOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        UniformGridLayout(std::nullptr_t) noexcept {}
        UniformGridLayout(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayout(ptr, take_ownership_from_abi) {}
        UniformGridLayout();
        [[nodiscard]] static auto OrientationProperty();
        [[nodiscard]] static auto MinItemWidthProperty();
        [[nodiscard]] static auto MinItemHeightProperty();
        [[nodiscard]] static auto MinRowSpacingProperty();
        [[nodiscard]] static auto MinColumnSpacingProperty();
        [[nodiscard]] static auto ItemsJustificationProperty();
        [[nodiscard]] static auto ItemsStretchProperty();
        [[nodiscard]] static auto MaximumRowsOrColumnsProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES UserControl : winrt::Microsoft::UI::Xaml::Controls::IUserControl,
        impl::base<UserControl, winrt::Microsoft::UI::Xaml::Controls::Control, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<UserControl, winrt::Microsoft::UI::Xaml::Controls::IControl, winrt::Microsoft::UI::Xaml::Controls::IControlProtected, winrt::Microsoft::UI::Xaml::Controls::IControlOverrides, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        UserControl(std::nullptr_t) noexcept {}
        UserControl(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IUserControl(ptr, take_ownership_from_abi) {}
        UserControl();
        [[nodiscard]] static auto ContentProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES VariableSizedWrapGrid : winrt::Microsoft::UI::Xaml::Controls::IVariableSizedWrapGrid,
        impl::base<VariableSizedWrapGrid, winrt::Microsoft::UI::Xaml::Controls::Panel, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<VariableSizedWrapGrid, winrt::Microsoft::UI::Xaml::Controls::IPanel, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        VariableSizedWrapGrid(std::nullptr_t) noexcept {}
        VariableSizedWrapGrid(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IVariableSizedWrapGrid(ptr, take_ownership_from_abi) {}
        VariableSizedWrapGrid();
        [[nodiscard]] static auto ItemHeightProperty();
        [[nodiscard]] static auto ItemWidthProperty();
        [[nodiscard]] static auto OrientationProperty();
        [[nodiscard]] static auto HorizontalChildrenAlignmentProperty();
        [[nodiscard]] static auto VerticalChildrenAlignmentProperty();
        [[nodiscard]] static auto MaximumRowsOrColumnsProperty();
        [[nodiscard]] static auto RowSpanProperty();
        static auto GetRowSpan(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetRowSpan(winrt::Microsoft::UI::Xaml::UIElement const& element, int32_t value);
        [[nodiscard]] static auto ColumnSpanProperty();
        static auto GetColumnSpan(winrt::Microsoft::UI::Xaml::UIElement const& element);
        static auto SetColumnSpan(winrt::Microsoft::UI::Xaml::UIElement const& element, int32_t value);
    };
    struct WINRT_IMPL_EMPTY_BASES Viewbox : winrt::Microsoft::UI::Xaml::Controls::IViewbox,
        impl::base<Viewbox, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<Viewbox, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        Viewbox(std::nullptr_t) noexcept {}
        Viewbox(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IViewbox(ptr, take_ownership_from_abi) {}
        Viewbox();
        [[nodiscard]] static auto StretchProperty();
        [[nodiscard]] static auto StretchDirectionProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES VirtualizingLayout : winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayout,
        impl::base<VirtualizingLayout, winrt::Microsoft::UI::Xaml::Controls::Layout, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<VirtualizingLayout, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides, winrt::Microsoft::UI::Xaml::Controls::ILayout, winrt::Microsoft::UI::Xaml::Controls::ILayout2, winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected, winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected2, winrt::Microsoft::UI::Xaml::Controls::ILayoutOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        VirtualizingLayout(std::nullptr_t) noexcept {}
        VirtualizingLayout(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayout(ptr, take_ownership_from_abi) {}
        VirtualizingLayout();
    };
    struct WINRT_IMPL_EMPTY_BASES VirtualizingLayoutContext : winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext,
        impl::base<VirtualizingLayoutContext, winrt::Microsoft::UI::Xaml::Controls::LayoutContext, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<VirtualizingLayoutContext, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext2, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides2, winrt::Microsoft::UI::Xaml::Controls::ILayoutContext, winrt::Microsoft::UI::Xaml::Controls::ILayoutContextOverrides, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        VirtualizingLayoutContext(std::nullptr_t) noexcept {}
        VirtualizingLayoutContext(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext(ptr, take_ownership_from_abi) {}
        VirtualizingLayoutContext();
    };
    struct WINRT_IMPL_EMPTY_BASES VirtualizingPanel : winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanel,
        impl::base<VirtualizingPanel, winrt::Microsoft::UI::Xaml::Controls::Panel, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<VirtualizingPanel, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelProtected, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelOverrides, winrt::Microsoft::UI::Xaml::Controls::IPanel, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        VirtualizingPanel(std::nullptr_t) noexcept {}
        VirtualizingPanel(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanel(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES VirtualizingStackPanel : winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanel,
        impl::base<VirtualizingStackPanel, winrt::Microsoft::UI::Xaml::Controls::Primitives::OrientedVirtualizingPanel, winrt::Microsoft::UI::Xaml::Controls::VirtualizingPanel, winrt::Microsoft::UI::Xaml::Controls::Panel, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<VirtualizingStackPanel, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanelOverrides, winrt::Microsoft::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanel, winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo, winrt::Microsoft::UI::Xaml::Controls::IInsertionPanel, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanel, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelProtected, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelOverrides, winrt::Microsoft::UI::Xaml::Controls::IPanel, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        VirtualizingStackPanel(std::nullptr_t) noexcept {}
        VirtualizingStackPanel(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanel(ptr, take_ownership_from_abi) {}
        VirtualizingStackPanel();
        [[nodiscard]] static auto AreScrollSnapPointsRegularProperty();
        [[nodiscard]] static auto OrientationProperty();
        [[nodiscard]] static auto VirtualizationModeProperty();
        static auto GetVirtualizationMode(winrt::Microsoft::UI::Xaml::DependencyObject const& element);
        static auto SetVirtualizationMode(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Microsoft::UI::Xaml::Controls::VirtualizationMode const& value);
        [[nodiscard]] static auto IsVirtualizingProperty();
        static auto GetIsVirtualizing(winrt::Microsoft::UI::Xaml::DependencyObject const& o);
    };
    struct WINRT_IMPL_EMPTY_BASES WebView2 : winrt::Microsoft::UI::Xaml::Controls::IWebView2,
        impl::base<WebView2, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<WebView2, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        WebView2(std::nullptr_t) noexcept {}
        WebView2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IWebView2(ptr, take_ownership_from_abi) {}
        WebView2();
        [[nodiscard]] static auto SourceProperty();
        [[nodiscard]] static auto CanGoForwardProperty();
        [[nodiscard]] static auto CanGoBackProperty();
        [[nodiscard]] static auto DefaultBackgroundColorProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES WrapGrid : winrt::Microsoft::UI::Xaml::Controls::IWrapGrid,
        impl::base<WrapGrid, winrt::Microsoft::UI::Xaml::Controls::Primitives::OrientedVirtualizingPanel, winrt::Microsoft::UI::Xaml::Controls::VirtualizingPanel, winrt::Microsoft::UI::Xaml::Controls::Panel, winrt::Microsoft::UI::Xaml::FrameworkElement, winrt::Microsoft::UI::Xaml::UIElement, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<WrapGrid, winrt::Microsoft::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanel, winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo, winrt::Microsoft::UI::Xaml::Controls::IInsertionPanel, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanel, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelProtected, winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelOverrides, winrt::Microsoft::UI::Xaml::Controls::IPanel, winrt::Microsoft::UI::Xaml::IFrameworkElement, winrt::Microsoft::UI::Xaml::IFrameworkElementProtected, winrt::Microsoft::UI::Xaml::IFrameworkElementOverrides, winrt::Microsoft::UI::Xaml::IUIElement, winrt::Microsoft::UI::Xaml::IUIElementProtected, winrt::Microsoft::UI::Xaml::IUIElementOverrides, winrt::Microsoft::UI::Composition::IAnimationObject, winrt::Microsoft::UI::Composition::IVisualElement, winrt::Microsoft::UI::Composition::IVisualElement2, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        WrapGrid(std::nullptr_t) noexcept {}
        WrapGrid(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IWrapGrid(ptr, take_ownership_from_abi) {}
        WrapGrid();
        [[nodiscard]] static auto ItemWidthProperty();
        [[nodiscard]] static auto ItemHeightProperty();
        [[nodiscard]] static auto OrientationProperty();
        [[nodiscard]] static auto HorizontalChildrenAlignmentProperty();
        [[nodiscard]] static auto VerticalChildrenAlignmentProperty();
        [[nodiscard]] static auto MaximumRowsOrColumnsProperty();
    };
    struct WINRT_IMPL_EMPTY_BASES XamlControlsResources : winrt::Microsoft::UI::Xaml::Controls::IXamlControlsResources,
        impl::base<XamlControlsResources, winrt::Microsoft::UI::Xaml::ResourceDictionary, winrt::Microsoft::UI::Xaml::DependencyObject>,
        impl::require<XamlControlsResources, winrt::Microsoft::UI::Xaml::IResourceDictionary, winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::Windows::Foundation::IInspectable, winrt::Windows::Foundation::IInspectable>>, winrt::Windows::Foundation::Collections::IMap<winrt::Windows::Foundation::IInspectable, winrt::Windows::Foundation::IInspectable>, winrt::Microsoft::UI::Xaml::IDependencyObject>
    {
        XamlControlsResources(std::nullptr_t) noexcept {}
        XamlControlsResources(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Xaml::Controls::IXamlControlsResources(ptr, take_ownership_from_abi) {}
        XamlControlsResources();
        static auto EnsureRevealLights(winrt::Microsoft::UI::Xaml::UIElement const& element);
        [[nodiscard]] static auto UseCompactResourcesProperty();
    };
    template <typename D>
    class IAppBarOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IAppBarOverrides = winrt::Microsoft::UI::Xaml::Controls::IAppBarOverrides;
        auto OnClosed(winrt::Windows::Foundation::IInspectable const& e) const;
        auto OnOpened(winrt::Windows::Foundation::IInspectable const& e) const;
        auto OnClosing(winrt::Windows::Foundation::IInspectable const& e) const;
        auto OnOpening(winrt::Windows::Foundation::IInspectable const& e) const;
    };
    template <typename D>
    class IComboBoxOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IComboBoxOverrides = winrt::Microsoft::UI::Xaml::Controls::IComboBoxOverrides;
        auto OnDropDownClosed(winrt::Windows::Foundation::IInspectable const& e) const;
        auto OnDropDownOpened(winrt::Windows::Foundation::IInspectable const& e) const;
    };
    template <typename D>
    class IContentControlOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IContentControlOverrides = winrt::Microsoft::UI::Xaml::Controls::IContentControlOverrides;
        auto OnContentChanged(winrt::Windows::Foundation::IInspectable const& oldContent, winrt::Windows::Foundation::IInspectable const& newContent) const;
        auto OnContentTemplateChanged(winrt::Microsoft::UI::Xaml::DataTemplate const& oldContentTemplate, winrt::Microsoft::UI::Xaml::DataTemplate const& newContentTemplate) const;
        auto OnContentTemplateSelectorChanged(winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& oldContentTemplateSelector, winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& newContentTemplateSelector) const;
    };
    template <typename D>
    class IContentPresenterOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IContentPresenterOverrides = winrt::Microsoft::UI::Xaml::Controls::IContentPresenterOverrides;
        auto OnContentTemplateChanged(winrt::Microsoft::UI::Xaml::DataTemplate const& oldContentTemplate, winrt::Microsoft::UI::Xaml::DataTemplate const& newContentTemplate) const;
        auto OnContentTemplateSelectorChanged(winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& oldContentTemplateSelector, winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& newContentTemplateSelector) const;
    };
    template <typename D>
    class IControlOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IControlOverrides = winrt::Microsoft::UI::Xaml::Controls::IControlOverrides;
        auto OnPointerEntered(winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerPressed(winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerMoved(winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerReleased(winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerExited(winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerCaptureLost(winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerCanceled(winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnPointerWheelChanged(winrt::Microsoft::UI::Xaml::Input::PointerRoutedEventArgs const& e) const;
        auto OnTapped(winrt::Microsoft::UI::Xaml::Input::TappedRoutedEventArgs const& e) const;
        auto OnDoubleTapped(winrt::Microsoft::UI::Xaml::Input::DoubleTappedRoutedEventArgs const& e) const;
        auto OnHolding(winrt::Microsoft::UI::Xaml::Input::HoldingRoutedEventArgs const& e) const;
        auto OnRightTapped(winrt::Microsoft::UI::Xaml::Input::RightTappedRoutedEventArgs const& e) const;
        auto OnManipulationStarting(winrt::Microsoft::UI::Xaml::Input::ManipulationStartingRoutedEventArgs const& e) const;
        auto OnManipulationInertiaStarting(winrt::Microsoft::UI::Xaml::Input::ManipulationInertiaStartingRoutedEventArgs const& e) const;
        auto OnManipulationStarted(winrt::Microsoft::UI::Xaml::Input::ManipulationStartedRoutedEventArgs const& e) const;
        auto OnManipulationDelta(winrt::Microsoft::UI::Xaml::Input::ManipulationDeltaRoutedEventArgs const& e) const;
        auto OnManipulationCompleted(winrt::Microsoft::UI::Xaml::Input::ManipulationCompletedRoutedEventArgs const& e) const;
        auto OnKeyUp(winrt::Microsoft::UI::Xaml::Input::KeyRoutedEventArgs const& e) const;
        auto OnKeyDown(winrt::Microsoft::UI::Xaml::Input::KeyRoutedEventArgs const& e) const;
        auto OnPreviewKeyDown(winrt::Microsoft::UI::Xaml::Input::KeyRoutedEventArgs const& e) const;
        auto OnPreviewKeyUp(winrt::Microsoft::UI::Xaml::Input::KeyRoutedEventArgs const& e) const;
        auto OnGotFocus(winrt::Microsoft::UI::Xaml::RoutedEventArgs const& e) const;
        auto OnLostFocus(winrt::Microsoft::UI::Xaml::RoutedEventArgs const& e) const;
        auto OnCharacterReceived(winrt::Microsoft::UI::Xaml::Input::CharacterReceivedRoutedEventArgs const& e) const;
        auto OnDragEnter(winrt::Microsoft::UI::Xaml::DragEventArgs const& e) const;
        auto OnDragLeave(winrt::Microsoft::UI::Xaml::DragEventArgs const& e) const;
        auto OnDragOver(winrt::Microsoft::UI::Xaml::DragEventArgs const& e) const;
        auto OnDrop(winrt::Microsoft::UI::Xaml::DragEventArgs const& e) const;
    };
    template <typename D>
    class IDataTemplateSelectorOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IDataTemplateSelectorOverrides = winrt::Microsoft::UI::Xaml::Controls::IDataTemplateSelectorOverrides;
        auto SelectTemplateCore(winrt::Windows::Foundation::IInspectable const& item, winrt::Microsoft::UI::Xaml::DependencyObject const& container) const;
        auto SelectTemplateCore(winrt::Windows::Foundation::IInspectable const& item) const;
    };
    template <typename D>
    class IGroupStyleSelectorOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IGroupStyleSelectorOverrides = winrt::Microsoft::UI::Xaml::Controls::IGroupStyleSelectorOverrides;
        auto SelectGroupStyleCore(winrt::Windows::Foundation::IInspectable const& group, uint32_t level) const;
    };
    template <typename D>
    class IIconSourceOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IIconSourceOverrides = winrt::Microsoft::UI::Xaml::Controls::IIconSourceOverrides;
        auto CreateIconElementCore() const;
        auto GetIconElementPropertyCore(winrt::Microsoft::UI::Xaml::DependencyProperty const& iconSourceProperty) const;
    };
    template <typename D>
    class IItemCollectionTransitionProviderOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IItemCollectionTransitionProviderOverrides = winrt::Microsoft::UI::Xaml::Controls::IItemCollectionTransitionProviderOverrides;
        auto ShouldAnimateCore(winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransition const& transition) const;
        auto StartTransitions(param::vector<winrt::Microsoft::UI::Xaml::Controls::ItemCollectionTransition> const& transitions) const;
    };
    template <typename D>
    class IItemsControlOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IItemsControlOverrides = winrt::Microsoft::UI::Xaml::Controls::IItemsControlOverrides;
        auto IsItemItsOwnContainerOverride(winrt::Windows::Foundation::IInspectable const& item) const;
        auto GetContainerForItemOverride() const;
        auto ClearContainerForItemOverride(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Windows::Foundation::IInspectable const& item) const;
        auto PrepareContainerForItemOverride(winrt::Microsoft::UI::Xaml::DependencyObject const& element, winrt::Windows::Foundation::IInspectable const& item) const;
        auto OnItemsChanged(winrt::Windows::Foundation::IInspectable const& e) const;
        auto OnItemContainerStyleChanged(winrt::Microsoft::UI::Xaml::Style const& oldItemContainerStyle, winrt::Microsoft::UI::Xaml::Style const& newItemContainerStyle) const;
        auto OnItemContainerStyleSelectorChanged(winrt::Microsoft::UI::Xaml::Controls::StyleSelector const& oldItemContainerStyleSelector, winrt::Microsoft::UI::Xaml::Controls::StyleSelector const& newItemContainerStyleSelector) const;
        auto OnItemTemplateChanged(winrt::Microsoft::UI::Xaml::DataTemplate const& oldItemTemplate, winrt::Microsoft::UI::Xaml::DataTemplate const& newItemTemplate) const;
        auto OnItemTemplateSelectorChanged(winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& oldItemTemplateSelector, winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector const& newItemTemplateSelector) const;
        auto OnGroupStyleSelectorChanged(winrt::Microsoft::UI::Xaml::Controls::GroupStyleSelector const& oldGroupStyleSelector, winrt::Microsoft::UI::Xaml::Controls::GroupStyleSelector const& newGroupStyleSelector) const;
    };
    template <typename D>
    class ILayoutOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using ILayoutOverrides = winrt::Microsoft::UI::Xaml::Controls::ILayoutOverrides;
        auto CreateDefaultItemTransitionProvider() const;
    };
    template <typename D>
    class ILayoutContextOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using ILayoutContextOverrides = winrt::Microsoft::UI::Xaml::Controls::ILayoutContextOverrides;
        [[nodiscard]] auto LayoutStateCore() const;
        auto LayoutStateCore(winrt::Windows::Foundation::IInspectable const& value) const;
    };
    template <typename D>
    class INonVirtualizingLayoutOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using INonVirtualizingLayoutOverrides = winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides;
        auto InitializeForContextCore(winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context) const;
        auto UninitializeForContextCore(winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context) const;
        auto MeasureOverride(winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context, winrt::Windows::Foundation::Size const& availableSize) const;
        auto ArrangeOverride(winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context, winrt::Windows::Foundation::Size const& finalSize) const;
    };
    template <typename D>
    class INonVirtualizingLayoutContextOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using INonVirtualizingLayoutContextOverrides = winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides;
        [[nodiscard]] auto ChildrenCore() const;
    };
    template <typename D>
    class IPageOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IPageOverrides = winrt::Microsoft::UI::Xaml::Controls::IPageOverrides;
        auto OnNavigatedFrom(winrt::Microsoft::UI::Xaml::Navigation::NavigationEventArgs const& e) const;
        auto OnNavigatedTo(winrt::Microsoft::UI::Xaml::Navigation::NavigationEventArgs const& e) const;
        auto OnNavigatingFrom(winrt::Microsoft::UI::Xaml::Navigation::NavigatingCancelEventArgs const& e) const;
    };
    template <typename D>
    class IStyleSelectorOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IStyleSelectorOverrides = winrt::Microsoft::UI::Xaml::Controls::IStyleSelectorOverrides;
        auto SelectStyleCore(winrt::Windows::Foundation::IInspectable const& item, winrt::Microsoft::UI::Xaml::DependencyObject const& container) const;
    };
    template <typename D>
    class IToggleSwitchOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IToggleSwitchOverrides = winrt::Microsoft::UI::Xaml::Controls::IToggleSwitchOverrides;
        auto OnToggled() const;
        auto OnOnContentChanged(winrt::Windows::Foundation::IInspectable const& oldContent, winrt::Windows::Foundation::IInspectable const& newContent) const;
        auto OnOffContentChanged(winrt::Windows::Foundation::IInspectable const& oldContent, winrt::Windows::Foundation::IInspectable const& newContent) const;
        auto OnHeaderChanged(winrt::Windows::Foundation::IInspectable const& oldContent, winrt::Windows::Foundation::IInspectable const& newContent) const;
    };
    template <typename D>
    class IVirtualizingLayoutOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IVirtualizingLayoutOverrides = winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides;
        auto InitializeForContextCore(winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const;
        auto UninitializeForContextCore(winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const;
        auto MeasureOverride(winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, winrt::Windows::Foundation::Size const& availableSize) const;
        auto ArrangeOverride(winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, winrt::Windows::Foundation::Size const& finalSize) const;
        auto OnItemsChangedCore(winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, winrt::Windows::Foundation::IInspectable const& source, winrt::Microsoft::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& args) const;
    };
    template <typename D>
    class IVirtualizingLayoutContextOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IVirtualizingLayoutContextOverrides = winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides;
        auto ItemCountCore() const;
        auto GetItemAtCore(int32_t index) const;
        auto RealizationRectCore() const;
        auto GetOrCreateElementAtCore(int32_t index, winrt::Microsoft::UI::Xaml::Controls::ElementRealizationOptions const& options) const;
        auto RecycleElementCore(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        [[nodiscard]] auto RecommendedAnchorIndexCore() const;
        [[nodiscard]] auto LayoutOriginCore() const;
        auto LayoutOriginCore(winrt::Windows::Foundation::Point const& value) const;
    };
    template <typename D>
    class IVirtualizingLayoutContextOverrides2T
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IVirtualizingLayoutContextOverrides2 = winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides2;
        auto VisibleRectCore() const;
    };
    template <typename D>
    class IVirtualizingPanelOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IVirtualizingPanelOverrides = winrt::Microsoft::UI::Xaml::Controls::IVirtualizingPanelOverrides;
        auto OnItemsChanged(winrt::Windows::Foundation::IInspectable const& sender, winrt::Microsoft::UI::Xaml::Controls::Primitives::ItemsChangedEventArgs const& args) const;
        auto OnClearChildren() const;
        auto BringIndexIntoView(int32_t index) const;
    };
    template <typename D>
    class IVirtualizingStackPanelOverridesT
    {
        D& shim() noexcept { return *static_cast<D*>(this); }
        D const& shim() const noexcept { return *static_cast<const D*>(this); }
    public:
        using IVirtualizingStackPanelOverrides = winrt::Microsoft::UI::Xaml::Controls::IVirtualizingStackPanelOverrides;
        auto OnCleanUpVirtualizedItem(winrt::Microsoft::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs const& e) const;
    };
}
#endif
