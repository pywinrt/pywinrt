// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_SemanticSearch_0_H
#define WINRT_Microsoft_Windows_SemanticSearch_0_H
WINRT_EXPORT namespace winrt::Microsoft::Windows::SemanticSearch
{
    struct IEmbeddingVector;
    struct IEmbeddingVectorFactory;
    struct EmbeddingVector;
    struct SemanticSearchContract;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::SemanticSearch::IEmbeddingVector>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::SemanticSearch::IEmbeddingVectorFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::SemanticSearch::EmbeddingVector>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::SemanticSearch::EmbeddingVector> = L"Microsoft.Windows.SemanticSearch.EmbeddingVector";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::SemanticSearch::IEmbeddingVector> = L"Microsoft.Windows.SemanticSearch.IEmbeddingVector";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::SemanticSearch::IEmbeddingVectorFactory> = L"Microsoft.Windows.SemanticSearch.IEmbeddingVectorFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::SemanticSearch::SemanticSearchContract> = L"Microsoft.Windows.SemanticSearch.SemanticSearchContract";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::SemanticSearch::IEmbeddingVector>{ 0xF80248AA,0x68E7,0x5DE0,{ 0x91,0x66,0xB2,0x6E,0x58,0x93,0x5D,0x34 } }; // F80248AA-68E7-5DE0-9166-B26E58935D34
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::SemanticSearch::IEmbeddingVectorFactory>{ 0x3A31EAD7,0x1F01,0x5A4C,{ 0x9C,0x2E,0x9A,0xCF,0xA6,0x49,0x5C,0xDD } }; // 3A31EAD7-1F01-5A4C-9C2E-9ACFA6495CDD
    template <> struct default_interface<winrt::Microsoft::Windows::SemanticSearch::EmbeddingVector>{ using type = winrt::Microsoft::Windows::SemanticSearch::IEmbeddingVector; };
    template <> struct abi<winrt::Microsoft::Windows::SemanticSearch::IEmbeddingVector>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetValues(uint32_t, float*) noexcept = 0;
            virtual int32_t __stdcall get_Count(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_VectorSpaceId(winrt::guid*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::SemanticSearch::IEmbeddingVectorFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(uint32_t, float*, winrt::guid, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_SemanticSearch_IEmbeddingVector
    {
        auto GetValues(array_view<float> values) const;
        [[nodiscard]] auto Count() const;
        [[nodiscard]] auto VectorSpaceId() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::SemanticSearch::IEmbeddingVector>
    {
        template <typename D> using type = consume_Microsoft_Windows_SemanticSearch_IEmbeddingVector<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_SemanticSearch_IEmbeddingVectorFactory
    {
        auto CreateInstance(array_view<float const> data, winrt::guid const& vectorSpaceID) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::SemanticSearch::IEmbeddingVectorFactory>
    {
        template <typename D> using type = consume_Microsoft_Windows_SemanticSearch_IEmbeddingVectorFactory<D>;
    };
}
#endif
