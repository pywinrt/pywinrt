// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_Storage_Pickers_0_H
#define WINRT_Microsoft_Windows_Storage_Pickers_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI
{
    struct WindowId;
}
WINRT_EXPORT namespace winrt::Windows::Storage
{
    struct StorageFile;
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Storage::Pickers
{
    enum class PickerLocationId : int32_t
    {
        DocumentsLibrary = 0,
        ComputerFolder = 1,
        Desktop = 2,
        Downloads = 3,
        HomeGroup = 4,
        MusicLibrary = 5,
        PicturesLibrary = 6,
        VideosLibrary = 7,
        Objects3D = 8,
        Unspecified = 9,
    };
    enum class PickerViewMode : int32_t
    {
        List = 0,
        Thumbnail = 1,
    };
    struct IFileOpenPicker;
    struct IFileOpenPickerFactory;
    struct IFileSavePicker;
    struct IFileSavePickerFactory;
    struct IFolderPicker;
    struct IFolderPickerFactory;
    struct IPickFileResult;
    struct IPickFolderResult;
    struct FileOpenPicker;
    struct FileSavePicker;
    struct FolderPicker;
    struct PickFileResult;
    struct PickFolderResult;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::Storage::Pickers::IFileOpenPicker>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Storage::Pickers::IFileOpenPickerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Storage::Pickers::IFileSavePicker>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Storage::Pickers::IFileSavePickerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Storage::Pickers::IFolderPicker>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Storage::Pickers::IFolderPickerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Storage::Pickers::IPickFileResult>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Storage::Pickers::IPickFolderResult>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Storage::Pickers::FileOpenPicker>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Storage::Pickers::FileSavePicker>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Storage::Pickers::FolderPicker>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Storage::Pickers::PickFileResult>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Storage::Pickers::PickFolderResult>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Storage::Pickers::PickerLocationId>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Storage::Pickers::PickerViewMode>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Storage::Pickers::FileOpenPicker> = L"Microsoft.Windows.Storage.Pickers.FileOpenPicker";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Storage::Pickers::FileSavePicker> = L"Microsoft.Windows.Storage.Pickers.FileSavePicker";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Storage::Pickers::FolderPicker> = L"Microsoft.Windows.Storage.Pickers.FolderPicker";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Storage::Pickers::PickFileResult> = L"Microsoft.Windows.Storage.Pickers.PickFileResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Storage::Pickers::PickFolderResult> = L"Microsoft.Windows.Storage.Pickers.PickFolderResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Storage::Pickers::PickerLocationId> = L"Microsoft.Windows.Storage.Pickers.PickerLocationId";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Storage::Pickers::PickerViewMode> = L"Microsoft.Windows.Storage.Pickers.PickerViewMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Storage::Pickers::IFileOpenPicker> = L"Microsoft.Windows.Storage.Pickers.IFileOpenPicker";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Storage::Pickers::IFileOpenPickerFactory> = L"Microsoft.Windows.Storage.Pickers.IFileOpenPickerFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Storage::Pickers::IFileSavePicker> = L"Microsoft.Windows.Storage.Pickers.IFileSavePicker";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Storage::Pickers::IFileSavePickerFactory> = L"Microsoft.Windows.Storage.Pickers.IFileSavePickerFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Storage::Pickers::IFolderPicker> = L"Microsoft.Windows.Storage.Pickers.IFolderPicker";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Storage::Pickers::IFolderPickerFactory> = L"Microsoft.Windows.Storage.Pickers.IFolderPickerFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Storage::Pickers::IPickFileResult> = L"Microsoft.Windows.Storage.Pickers.IPickFileResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Storage::Pickers::IPickFolderResult> = L"Microsoft.Windows.Storage.Pickers.IPickFolderResult";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Storage::Pickers::IFileOpenPicker>{ 0x8B16E6B5,0x250E,0x55BE,{ 0x9B,0xAE,0xFE,0xD3,0x64,0x0B,0x06,0x2E } }; // 8B16E6B5-250E-55BE-9BAE-FED3640B062E
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Storage::Pickers::IFileOpenPickerFactory>{ 0x315E86D7,0xD7A2,0x5D81,{ 0xB3,0x79,0x7A,0xF7,0x82,0x07,0xB1,0xAF } }; // 315E86D7-D7A2-5D81-B379-7AF78207B1AF
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Storage::Pickers::IFileSavePicker>{ 0xC1E6D3D3,0x0880,0x50AE,{ 0xBD,0xCC,0x20,0xB8,0xAE,0x6A,0x7A,0xF6 } }; // C1E6D3D3-0880-50AE-BDCC-20B8AE6A7AF6
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Storage::Pickers::IFileSavePickerFactory>{ 0x2E256696,0x30B6,0x5A05,{ 0xA8,0xF5,0xC7,0x52,0xDB,0x6D,0xD2,0x68 } }; // 2E256696-30B6-5A05-A8F5-C752DB6DD268
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Storage::Pickers::IFolderPicker>{ 0x01C5BB98,0xCFB8,0x52F5,{ 0x99,0x94,0xE9,0x4E,0xF1,0xA7,0x34,0xD8 } }; // 01C5BB98-CFB8-52F5-9994-E94EF1A734D8
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Storage::Pickers::IFolderPickerFactory>{ 0xE1550D89,0xB389,0x5886,{ 0x83,0x95,0x02,0x2B,0x15,0x88,0xD6,0xA8 } }; // E1550D89-B389-5886-8395-022B1588D6A8
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Storage::Pickers::IPickFileResult>{ 0xE6F2E3D6,0x7BB0,0x5D81,{ 0x9E,0x7D,0x6F,0xD3,0x5A,0x1F,0x25,0xAB } }; // E6F2E3D6-7BB0-5D81-9E7D-6FD35A1F25AB
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Storage::Pickers::IPickFolderResult>{ 0x6F7FD316,0xFE29,0x59D1,{ 0x93,0x43,0xC4,0x9C,0xF5,0xCD,0xE6,0x80 } }; // 6F7FD316-FE29-59D1-9343-C49CF5CDE680
    template <> struct default_interface<winrt::Microsoft::Windows::Storage::Pickers::FileOpenPicker>{ using type = winrt::Microsoft::Windows::Storage::Pickers::IFileOpenPicker; };
    template <> struct default_interface<winrt::Microsoft::Windows::Storage::Pickers::FileSavePicker>{ using type = winrt::Microsoft::Windows::Storage::Pickers::IFileSavePicker; };
    template <> struct default_interface<winrt::Microsoft::Windows::Storage::Pickers::FolderPicker>{ using type = winrt::Microsoft::Windows::Storage::Pickers::IFolderPicker; };
    template <> struct default_interface<winrt::Microsoft::Windows::Storage::Pickers::PickFileResult>{ using type = winrt::Microsoft::Windows::Storage::Pickers::IPickFileResult; };
    template <> struct default_interface<winrt::Microsoft::Windows::Storage::Pickers::PickFolderResult>{ using type = winrt::Microsoft::Windows::Storage::Pickers::IPickFolderResult; };
    template <> struct abi<winrt::Microsoft::Windows::Storage::Pickers::IFileOpenPicker>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ViewMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ViewMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SettingsIdentifier(void**) noexcept = 0;
            virtual int32_t __stdcall put_SettingsIdentifier(void*) noexcept = 0;
            virtual int32_t __stdcall get_SuggestedStartLocation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SuggestedStartLocation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CommitButtonText(void**) noexcept = 0;
            virtual int32_t __stdcall put_CommitButtonText(void*) noexcept = 0;
            virtual int32_t __stdcall get_FileTypeFilter(void**) noexcept = 0;
            virtual int32_t __stdcall PickSingleFileAsync(void**) noexcept = 0;
            virtual int32_t __stdcall PickMultipleFilesAsync(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Storage::Pickers::IFileOpenPickerFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(struct struct_Microsoft_UI_WindowId, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Storage::Pickers::IFileSavePicker>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SettingsIdentifier(void**) noexcept = 0;
            virtual int32_t __stdcall put_SettingsIdentifier(void*) noexcept = 0;
            virtual int32_t __stdcall get_SuggestedStartLocation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SuggestedStartLocation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CommitButtonText(void**) noexcept = 0;
            virtual int32_t __stdcall put_CommitButtonText(void*) noexcept = 0;
            virtual int32_t __stdcall get_FileTypeChoices(void**) noexcept = 0;
            virtual int32_t __stdcall get_DefaultFileExtension(void**) noexcept = 0;
            virtual int32_t __stdcall put_DefaultFileExtension(void*) noexcept = 0;
            virtual int32_t __stdcall get_SuggestedSaveFile(void**) noexcept = 0;
            virtual int32_t __stdcall put_SuggestedSaveFile(void*) noexcept = 0;
            virtual int32_t __stdcall get_SuggestedFileName(void**) noexcept = 0;
            virtual int32_t __stdcall put_SuggestedFileName(void*) noexcept = 0;
            virtual int32_t __stdcall PickSaveFileAsync(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Storage::Pickers::IFileSavePickerFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(struct struct_Microsoft_UI_WindowId, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Storage::Pickers::IFolderPicker>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ViewMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ViewMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SettingsIdentifier(void**) noexcept = 0;
            virtual int32_t __stdcall put_SettingsIdentifier(void*) noexcept = 0;
            virtual int32_t __stdcall get_SuggestedStartLocation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SuggestedStartLocation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CommitButtonText(void**) noexcept = 0;
            virtual int32_t __stdcall put_CommitButtonText(void*) noexcept = 0;
            virtual int32_t __stdcall get_FileTypeFilter(void**) noexcept = 0;
            virtual int32_t __stdcall PickSingleFolderAsync(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Storage::Pickers::IFolderPickerFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(struct struct_Microsoft_UI_WindowId, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Storage::Pickers::IPickFileResult>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Path(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Storage::Pickers::IPickFolderResult>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Path(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_Storage_Pickers_IFileOpenPicker
    {
        [[nodiscard]] auto ViewMode() const;
        auto ViewMode(winrt::Microsoft::Windows::Storage::Pickers::PickerViewMode const& value) const;
        [[nodiscard]] auto SettingsIdentifier() const;
        auto SettingsIdentifier(param::hstring const& value) const;
        [[nodiscard]] auto SuggestedStartLocation() const;
        auto SuggestedStartLocation(winrt::Microsoft::Windows::Storage::Pickers::PickerLocationId const& value) const;
        [[nodiscard]] auto CommitButtonText() const;
        auto CommitButtonText(param::hstring const& value) const;
        [[nodiscard]] auto FileTypeFilter() const;
        auto PickSingleFileAsync() const;
        auto PickMultipleFilesAsync() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Storage::Pickers::IFileOpenPicker>
    {
        template <typename D> using type = consume_Microsoft_Windows_Storage_Pickers_IFileOpenPicker<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Storage_Pickers_IFileOpenPickerFactory
    {
        auto CreateInstance(winrt::Microsoft::UI::WindowId const& windowId) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Storage::Pickers::IFileOpenPickerFactory>
    {
        template <typename D> using type = consume_Microsoft_Windows_Storage_Pickers_IFileOpenPickerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Storage_Pickers_IFileSavePicker
    {
        [[nodiscard]] auto SettingsIdentifier() const;
        auto SettingsIdentifier(param::hstring const& value) const;
        [[nodiscard]] auto SuggestedStartLocation() const;
        auto SuggestedStartLocation(winrt::Microsoft::Windows::Storage::Pickers::PickerLocationId const& value) const;
        [[nodiscard]] auto CommitButtonText() const;
        auto CommitButtonText(param::hstring const& value) const;
        [[nodiscard]] auto FileTypeChoices() const;
        [[nodiscard]] auto DefaultFileExtension() const;
        auto DefaultFileExtension(param::hstring const& value) const;
        [[nodiscard]] auto SuggestedSaveFile() const;
        auto SuggestedSaveFile(winrt::Windows::Storage::StorageFile const& value) const;
        [[nodiscard]] auto SuggestedFileName() const;
        auto SuggestedFileName(param::hstring const& value) const;
        auto PickSaveFileAsync() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Storage::Pickers::IFileSavePicker>
    {
        template <typename D> using type = consume_Microsoft_Windows_Storage_Pickers_IFileSavePicker<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Storage_Pickers_IFileSavePickerFactory
    {
        auto CreateInstance(winrt::Microsoft::UI::WindowId const& windowId) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Storage::Pickers::IFileSavePickerFactory>
    {
        template <typename D> using type = consume_Microsoft_Windows_Storage_Pickers_IFileSavePickerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Storage_Pickers_IFolderPicker
    {
        [[nodiscard]] auto ViewMode() const;
        auto ViewMode(winrt::Microsoft::Windows::Storage::Pickers::PickerViewMode const& value) const;
        [[nodiscard]] auto SettingsIdentifier() const;
        auto SettingsIdentifier(param::hstring const& value) const;
        [[nodiscard]] auto SuggestedStartLocation() const;
        auto SuggestedStartLocation(winrt::Microsoft::Windows::Storage::Pickers::PickerLocationId const& value) const;
        [[nodiscard]] auto CommitButtonText() const;
        auto CommitButtonText(param::hstring const& value) const;
        [[nodiscard]] auto FileTypeFilter() const;
        auto PickSingleFolderAsync() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Storage::Pickers::IFolderPicker>
    {
        template <typename D> using type = consume_Microsoft_Windows_Storage_Pickers_IFolderPicker<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Storage_Pickers_IFolderPickerFactory
    {
        auto CreateInstance(winrt::Microsoft::UI::WindowId const& windowId) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Storage::Pickers::IFolderPickerFactory>
    {
        template <typename D> using type = consume_Microsoft_Windows_Storage_Pickers_IFolderPickerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Storage_Pickers_IPickFileResult
    {
        [[nodiscard]] auto Path() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Storage::Pickers::IPickFileResult>
    {
        template <typename D> using type = consume_Microsoft_Windows_Storage_Pickers_IPickFileResult<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Storage_Pickers_IPickFolderResult
    {
        [[nodiscard]] auto Path() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Storage::Pickers::IPickFolderResult>
    {
        template <typename D> using type = consume_Microsoft_Windows_Storage_Pickers_IPickFolderResult<D>;
    };
}
#endif
