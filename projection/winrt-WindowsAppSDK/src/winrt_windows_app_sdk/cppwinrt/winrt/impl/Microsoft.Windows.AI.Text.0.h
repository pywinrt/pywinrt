// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_AI_Text_0_H
#define WINRT_Microsoft_Windows_AI_Text_0_H
WINRT_EXPORT namespace winrt::Microsoft::Windows::AI
{
    enum class AIFeatureReadyState : int32_t;
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::AI::ContentSafety
{
    struct ContentFilterOptions;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct HResult;
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::AI::Text
{
    enum class LanguageModelResponseStatus : int32_t
    {
        Complete = 0,
        InProgress = 1,
        BlockedByPolicy = 2,
        PromptLargerThanContext = 3,
        PromptBlockedByContentModeration = 4,
        ResponseBlockedByContentModeration = 5,
        Error = 6,
    };
    struct ILanguageModel;
    struct ILanguageModelContext;
    struct ILanguageModelOptions;
    struct ILanguageModelResponseResult;
    struct ILanguageModelStatics;
    struct ITextRewriter;
    struct ITextRewriterFactory;
    struct ITextSummarizer;
    struct ITextSummarizerFactory;
    struct ITextToTableConverter;
    struct ITextToTableConverterFactory;
    struct ITextToTableResponseResult;
    struct ITextToTableRow;
    struct LanguageModel;
    struct LanguageModelContext;
    struct LanguageModelOptions;
    struct LanguageModelResponseResult;
    struct TextRewriter;
    struct TextSummarizer;
    struct TextToTableConverter;
    struct TextToTableResponseResult;
    struct TextToTableRow;
    struct LanguageModelContract;
    struct TextIntelligenceContract;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::AI::Text::ILanguageModel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::ILanguageModelContext>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::ILanguageModelOptions>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::ILanguageModelResponseResult>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::ILanguageModelStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::ITextRewriter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::ITextRewriterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::ITextSummarizer>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::ITextSummarizerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::ITextToTableConverter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::ITextToTableConverterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::ITextToTableResponseResult>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::ITextToTableRow>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::LanguageModel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::LanguageModelContext>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::LanguageModelOptions>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::LanguageModelResponseResult>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::TextRewriter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::TextSummarizer>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::TextToTableConverter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::TextToTableResponseResult>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::TextToTableRow>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::Text::LanguageModelResponseStatus>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::LanguageModel> = L"Microsoft.Windows.AI.Text.LanguageModel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::LanguageModelContext> = L"Microsoft.Windows.AI.Text.LanguageModelContext";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::LanguageModelOptions> = L"Microsoft.Windows.AI.Text.LanguageModelOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::LanguageModelResponseResult> = L"Microsoft.Windows.AI.Text.LanguageModelResponseResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::TextRewriter> = L"Microsoft.Windows.AI.Text.TextRewriter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::TextSummarizer> = L"Microsoft.Windows.AI.Text.TextSummarizer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::TextToTableConverter> = L"Microsoft.Windows.AI.Text.TextToTableConverter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::TextToTableResponseResult> = L"Microsoft.Windows.AI.Text.TextToTableResponseResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::TextToTableRow> = L"Microsoft.Windows.AI.Text.TextToTableRow";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::LanguageModelResponseStatus> = L"Microsoft.Windows.AI.Text.LanguageModelResponseStatus";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::ILanguageModel> = L"Microsoft.Windows.AI.Text.ILanguageModel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::ILanguageModelContext> = L"Microsoft.Windows.AI.Text.ILanguageModelContext";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::ILanguageModelOptions> = L"Microsoft.Windows.AI.Text.ILanguageModelOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::ILanguageModelResponseResult> = L"Microsoft.Windows.AI.Text.ILanguageModelResponseResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::ILanguageModelStatics> = L"Microsoft.Windows.AI.Text.ILanguageModelStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::ITextRewriter> = L"Microsoft.Windows.AI.Text.ITextRewriter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::ITextRewriterFactory> = L"Microsoft.Windows.AI.Text.ITextRewriterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::ITextSummarizer> = L"Microsoft.Windows.AI.Text.ITextSummarizer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::ITextSummarizerFactory> = L"Microsoft.Windows.AI.Text.ITextSummarizerFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::ITextToTableConverter> = L"Microsoft.Windows.AI.Text.ITextToTableConverter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::ITextToTableConverterFactory> = L"Microsoft.Windows.AI.Text.ITextToTableConverterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::ITextToTableResponseResult> = L"Microsoft.Windows.AI.Text.ITextToTableResponseResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::ITextToTableRow> = L"Microsoft.Windows.AI.Text.ITextToTableRow";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::LanguageModelContract> = L"Microsoft.Windows.AI.Text.LanguageModelContract";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::Text::TextIntelligenceContract> = L"Microsoft.Windows.AI.Text.TextIntelligenceContract";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::Text::ILanguageModel>{ 0x6331C629,0x8C86,0x5BFE,{ 0x8C,0x4E,0x9C,0xA5,0x57,0x3C,0xC1,0x4B } }; // 6331C629-8C86-5BFE-8C4E-9CA5573CC14B
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::Text::ILanguageModelContext>{ 0x518B305C,0x7B69,0x5A33,{ 0x81,0x29,0xD4,0x7D,0x6B,0x8E,0xEC,0x4E } }; // 518B305C-7B69-5A33-8129-D47D6B8EEC4E
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::Text::ILanguageModelOptions>{ 0x7F380003,0x5A09,0x5F1F,{ 0xAF,0xB0,0xAA,0x48,0x3E,0x36,0x70,0xCC } }; // 7F380003-5A09-5F1F-AFB0-AA483E3670CC
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::Text::ILanguageModelResponseResult>{ 0x3A256FFF,0xA426,0x5D3B,{ 0x8E,0x4B,0x3A,0xC8,0x41,0x62,0x47,0x1E } }; // 3A256FFF-A426-5D3B-8E4B-3AC84162471E
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::Text::ILanguageModelStatics>{ 0x8F18F9AF,0x6095,0x553B,{ 0x8D,0x9D,0x6B,0xCC,0x98,0x02,0x65,0x46 } }; // 8F18F9AF-6095-553B-8D9D-6BCC98026546
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::Text::ITextRewriter>{ 0xEB1E7CF0,0xE110,0x506C,{ 0xB0,0xEA,0x7A,0x28,0x8D,0x8E,0x77,0x78 } }; // EB1E7CF0-E110-506C-B0EA-7A288D8E7778
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::Text::ITextRewriterFactory>{ 0xF452E60D,0xEF50,0x5BC9,{ 0xB4,0x83,0x21,0x7D,0x5B,0x4E,0x71,0x51 } }; // F452E60D-EF50-5BC9-B483-217D5B4E7151
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::Text::ITextSummarizer>{ 0xEEF548C5,0xD7BC,0x50BE,{ 0xA8,0xAB,0x29,0xE2,0x41,0xB7,0x8B,0xD1 } }; // EEF548C5-D7BC-50BE-A8AB-29E241B78BD1
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::Text::ITextSummarizerFactory>{ 0xB6A75913,0x4A1E,0x59E7,{ 0x85,0x6A,0xAE,0x7A,0xB2,0x38,0x38,0x64 } }; // B6A75913-4A1E-59E7-856A-AE7AB2383864
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::Text::ITextToTableConverter>{ 0xA008D9AD,0x25CE,0x5A6B,{ 0x9C,0xEB,0xD8,0xE9,0x5D,0x04,0xE1,0x0B } }; // A008D9AD-25CE-5A6B-9CEB-D8E95D04E10B
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::Text::ITextToTableConverterFactory>{ 0xBB84CBB5,0x19C8,0x5857,{ 0xB6,0x5D,0x70,0x5A,0xA1,0x48,0x64,0x04 } }; // BB84CBB5-19C8-5857-B65D-705AA1486404
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::Text::ITextToTableResponseResult>{ 0x391FBF11,0x59CD,0x575D,{ 0x83,0x4A,0x9E,0xF8,0x23,0x11,0x6F,0x98 } }; // 391FBF11-59CD-575D-834A-9EF823116F98
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::Text::ITextToTableRow>{ 0x036294FE,0xE53C,0x5E66,{ 0x93,0xD2,0x7C,0x92,0x33,0x8D,0xB8,0x81 } }; // 036294FE-E53C-5E66-93D2-7C92338DB881
    template <> struct default_interface<winrt::Microsoft::Windows::AI::Text::LanguageModel>{ using type = winrt::Microsoft::Windows::AI::Text::ILanguageModel; };
    template <> struct default_interface<winrt::Microsoft::Windows::AI::Text::LanguageModelContext>{ using type = winrt::Microsoft::Windows::AI::Text::ILanguageModelContext; };
    template <> struct default_interface<winrt::Microsoft::Windows::AI::Text::LanguageModelOptions>{ using type = winrt::Microsoft::Windows::AI::Text::ILanguageModelOptions; };
    template <> struct default_interface<winrt::Microsoft::Windows::AI::Text::LanguageModelResponseResult>{ using type = winrt::Microsoft::Windows::AI::Text::ILanguageModelResponseResult; };
    template <> struct default_interface<winrt::Microsoft::Windows::AI::Text::TextRewriter>{ using type = winrt::Microsoft::Windows::AI::Text::ITextRewriter; };
    template <> struct default_interface<winrt::Microsoft::Windows::AI::Text::TextSummarizer>{ using type = winrt::Microsoft::Windows::AI::Text::ITextSummarizer; };
    template <> struct default_interface<winrt::Microsoft::Windows::AI::Text::TextToTableConverter>{ using type = winrt::Microsoft::Windows::AI::Text::ITextToTableConverter; };
    template <> struct default_interface<winrt::Microsoft::Windows::AI::Text::TextToTableResponseResult>{ using type = winrt::Microsoft::Windows::AI::Text::ITextToTableResponseResult; };
    template <> struct default_interface<winrt::Microsoft::Windows::AI::Text::TextToTableRow>{ using type = winrt::Microsoft::Windows::AI::Text::ITextToTableRow; };
    template <> struct abi<winrt::Microsoft::Windows::AI::Text::ILanguageModel>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::Text::ILanguageModelContext>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::Text::ILanguageModelOptions>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Temperature(float*) noexcept = 0;
            virtual int32_t __stdcall put_Temperature(float) noexcept = 0;
            virtual int32_t __stdcall get_TopP(float*) noexcept = 0;
            virtual int32_t __stdcall put_TopP(float) noexcept = 0;
            virtual int32_t __stdcall get_TopK(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TopK(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_ContentFilterOptions(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentFilterOptions(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::Text::ILanguageModelResponseResult>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall get_Status(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ExtendedError(winrt::hresult*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::Text::ILanguageModelStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetReadyState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall EnsureReadyAsync(void**) noexcept = 0;
            virtual int32_t __stdcall CreateAsync(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::Text::ITextRewriter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall RewriteAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::Text::ITextRewriterFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::Text::ITextSummarizer>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall SummarizeAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SummarizeParagraphAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::Text::ITextSummarizerFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::Text::ITextToTableConverter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall ConvertAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::Text::ITextToTableConverterFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::Text::ITextToTableResponseResult>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetRows(uint32_t* __resultSize, void***) noexcept = 0;
            virtual int32_t __stdcall get_Status(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ExtendedError(winrt::hresult*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::Text::ITextToTableRow>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetColumns(uint32_t* __resultSize, void***) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_Text_ILanguageModel
    {
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::Text::ILanguageModel>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_Text_ILanguageModel<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_Text_ILanguageModelContext
    {
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::Text::ILanguageModelContext>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_Text_ILanguageModelContext<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_Text_ILanguageModelOptions
    {
        [[nodiscard]] auto Temperature() const;
        auto Temperature(float value) const;
        [[nodiscard]] auto TopP() const;
        auto TopP(float value) const;
        [[nodiscard]] auto TopK() const;
        auto TopK(uint32_t value) const;
        [[nodiscard]] auto ContentFilterOptions() const;
        auto ContentFilterOptions(winrt::Microsoft::Windows::AI::ContentSafety::ContentFilterOptions const& value) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::Text::ILanguageModelOptions>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_Text_ILanguageModelOptions<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_Text_ILanguageModelResponseResult
    {
        [[nodiscard]] auto Text() const;
        [[nodiscard]] auto Status() const;
        [[nodiscard]] auto ExtendedError() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::Text::ILanguageModelResponseResult>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_Text_ILanguageModelResponseResult<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_Text_ILanguageModelStatics
    {
        auto GetReadyState() const;
        auto EnsureReadyAsync() const;
        auto CreateAsync() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::Text::ILanguageModelStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_Text_ILanguageModelStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_Text_ITextRewriter
    {
        auto RewriteAsync(param::hstring const& text) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::Text::ITextRewriter>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_Text_ITextRewriter<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_Text_ITextRewriterFactory
    {
        auto CreateInstance(winrt::Microsoft::Windows::AI::Text::LanguageModel const& languageModel) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::Text::ITextRewriterFactory>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_Text_ITextRewriterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_Text_ITextSummarizer
    {
        auto SummarizeAsync(param::hstring const& text) const;
        auto SummarizeParagraphAsync(param::hstring const& text) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::Text::ITextSummarizer>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_Text_ITextSummarizer<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_Text_ITextSummarizerFactory
    {
        auto CreateInstance(winrt::Microsoft::Windows::AI::Text::LanguageModel const& languageModel) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::Text::ITextSummarizerFactory>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_Text_ITextSummarizerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_Text_ITextToTableConverter
    {
        auto ConvertAsync(param::hstring const& text) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::Text::ITextToTableConverter>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_Text_ITextToTableConverter<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_Text_ITextToTableConverterFactory
    {
        auto CreateInstance(winrt::Microsoft::Windows::AI::Text::LanguageModel const& languageModel) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::Text::ITextToTableConverterFactory>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_Text_ITextToTableConverterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_Text_ITextToTableResponseResult
    {
        auto GetRows() const;
        [[nodiscard]] auto Status() const;
        [[nodiscard]] auto ExtendedError() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::Text::ITextToTableResponseResult>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_Text_ITextToTableResponseResult<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_Text_ITextToTableRow
    {
        auto GetColumns() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::Text::ITextToTableRow>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_Text_ITextToTableRow<D>;
    };
}
#endif
