// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#ifndef WINRT_Microsoft_Windows_AppLifecycle_2_H
#define WINRT_Microsoft_Windows_AppLifecycle_2_H
#include "winrt/impl/Microsoft.Windows.AppLifecycle.1.h"
WINRT_EXPORT namespace winrt::Microsoft::Windows::AppLifecycle
{
    struct ActivationRegistrationManager
    {
        ActivationRegistrationManager() = delete;
        static auto RegisterForFileTypeActivation(array_view<hstring const> supportedFileTypes, param::hstring const& logo, param::hstring const& displayName, array_view<hstring const> supportedVerbs, param::hstring const& exePath);
        static auto RegisterForProtocolActivation(param::hstring const& scheme, param::hstring const& logo, param::hstring const& displayName, param::hstring const& exePath);
        static auto RegisterForStartupActivation(param::hstring const& taskId, param::hstring const& exePath);
        static auto UnregisterForFileTypeActivation(array_view<hstring const> fileTypes, param::hstring const& exePath);
        static auto UnregisterForProtocolActivation(param::hstring const& scheme, param::hstring const& exePath);
        static auto UnregisterForStartupActivation(param::hstring const& taskId);
    };
    struct WINRT_IMPL_EMPTY_BASES AppActivationArguments : winrt::Microsoft::Windows::AppLifecycle::IAppActivationArguments
    {
        AppActivationArguments(std::nullptr_t) noexcept {}
        AppActivationArguments(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::AppLifecycle::IAppActivationArguments(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES AppInstance : winrt::Microsoft::Windows::AppLifecycle::IAppInstance
    {
        AppInstance(std::nullptr_t) noexcept {}
        AppInstance(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::AppLifecycle::IAppInstance(ptr, take_ownership_from_abi) {}
        static auto GetCurrent();
        static auto GetInstances();
        static auto FindOrRegisterForKey(param::hstring const& key);
        static auto Restart(param::hstring const& arguments);
    };
}
#endif
