// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#ifndef WINRT_Microsoft_UI_Xaml_Media_Imaging_0_H
#define WINRT_Microsoft_UI_Xaml_Media_Imaging_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml
{
    struct DependencyProperty;
    struct ExceptionRoutedEventHandler;
    struct RoutedEventHandler;
    struct UIElement;
}
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::Background
{
    struct IBackgroundTaskInstance;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct EventRegistrationToken;
    struct IAsyncAction;
    template <typename TSender, typename TResult> struct WINRT_IMPL_EMPTY_BASES TypedEventHandler;
    struct Uri;
}
WINRT_EXPORT namespace winrt::Windows::Graphics::Imaging
{
    struct SoftwareBitmap;
}
WINRT_EXPORT namespace winrt::Windows::Storage::Streams
{
    struct IBuffer;
    struct IRandomAccessStream;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Media::Imaging
{
    enum class BitmapCreateOptions : uint32_t
    {
        None = 0,
        IgnoreImageCache = 0x8,
    };
    enum class DecodePixelType : int32_t
    {
        Physical = 0,
        Logical = 1,
    };
    enum class SvgImageSourceLoadStatus : int32_t
    {
        Success = 0,
        NetworkError = 1,
        InvalidFormat = 2,
        Other = 3,
    };
    struct IBitmapImage;
    struct IBitmapImageFactory;
    struct IBitmapImageStatics;
    struct IBitmapSource;
    struct IBitmapSourceFactory;
    struct IBitmapSourceStatics;
    struct IDownloadProgressEventArgs;
    struct IRenderTargetBitmap;
    struct IRenderTargetBitmapStatics;
    struct ISoftwareBitmapSource;
    struct ISurfaceImageSource;
    struct ISurfaceImageSourceFactory;
    struct ISvgImageSource;
    struct ISvgImageSourceFactory;
    struct ISvgImageSourceFailedEventArgs;
    struct ISvgImageSourceOpenedEventArgs;
    struct ISvgImageSourceStatics;
    struct IVirtualSurfaceImageSource;
    struct IVirtualSurfaceImageSourceFactory;
    struct IWriteableBitmap;
    struct IWriteableBitmapFactory;
    struct IXamlRenderingBackgroundTask;
    struct IXamlRenderingBackgroundTaskFactory;
    struct IXamlRenderingBackgroundTaskOverrides;
    struct BitmapImage;
    struct BitmapSource;
    struct DownloadProgressEventArgs;
    struct RenderTargetBitmap;
    struct SoftwareBitmapSource;
    struct SurfaceImageSource;
    struct SvgImageSource;
    struct SvgImageSourceFailedEventArgs;
    struct SvgImageSourceOpenedEventArgs;
    struct VirtualSurfaceImageSource;
    struct WriteableBitmap;
    struct XamlRenderingBackgroundTask;
    struct DownloadProgressEventHandler;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImage>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImageFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImageStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapSourceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::IDownloadProgressEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::IRenderTargetBitmap>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::IRenderTargetBitmapStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::ISoftwareBitmapSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::ISurfaceImageSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::ISurfaceImageSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceFailedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceOpenedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmap>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmapFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTask>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTaskFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTaskOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::BitmapImage>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::BitmapSource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::DownloadProgressEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::RenderTargetBitmap>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::SoftwareBitmapSource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::SurfaceImageSource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSourceFailedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSourceOpenedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::WriteableBitmap>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::XamlRenderingBackgroundTask>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::BitmapCreateOptions>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::DecodePixelType>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSourceLoadStatus>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Media::Imaging::DownloadProgressEventHandler>{ using type = delegate_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::BitmapImage> = L"Microsoft.UI.Xaml.Media.Imaging.BitmapImage";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::BitmapSource> = L"Microsoft.UI.Xaml.Media.Imaging.BitmapSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::DownloadProgressEventArgs> = L"Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::RenderTargetBitmap> = L"Microsoft.UI.Xaml.Media.Imaging.RenderTargetBitmap";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::SoftwareBitmapSource> = L"Microsoft.UI.Xaml.Media.Imaging.SoftwareBitmapSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::SurfaceImageSource> = L"Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSource> = L"Microsoft.UI.Xaml.Media.Imaging.SvgImageSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSourceFailedEventArgs> = L"Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSourceOpenedEventArgs> = L"Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource> = L"Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::WriteableBitmap> = L"Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::XamlRenderingBackgroundTask> = L"Microsoft.UI.Xaml.Media.Imaging.XamlRenderingBackgroundTask";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::BitmapCreateOptions> = L"Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::DecodePixelType> = L"Microsoft.UI.Xaml.Media.Imaging.DecodePixelType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSourceLoadStatus> = L"Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImage> = L"Microsoft.UI.Xaml.Media.Imaging.IBitmapImage";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImageFactory> = L"Microsoft.UI.Xaml.Media.Imaging.IBitmapImageFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImageStatics> = L"Microsoft.UI.Xaml.Media.Imaging.IBitmapImageStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapSource> = L"Microsoft.UI.Xaml.Media.Imaging.IBitmapSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapSourceFactory> = L"Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapSourceStatics> = L"Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IDownloadProgressEventArgs> = L"Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IRenderTargetBitmap> = L"Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmap";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IRenderTargetBitmapStatics> = L"Microsoft.UI.Xaml.Media.Imaging.IRenderTargetBitmapStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::ISoftwareBitmapSource> = L"Microsoft.UI.Xaml.Media.Imaging.ISoftwareBitmapSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::ISurfaceImageSource> = L"Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::ISurfaceImageSourceFactory> = L"Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSourceFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSource> = L"Microsoft.UI.Xaml.Media.Imaging.ISvgImageSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceFactory> = L"Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceFailedEventArgs> = L"Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceFailedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceOpenedEventArgs> = L"Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceOpenedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceStatics> = L"Microsoft.UI.Xaml.Media.Imaging.ISvgImageSourceStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSource> = L"Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSourceFactory> = L"Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSourceFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmap> = L"Microsoft.UI.Xaml.Media.Imaging.IWriteableBitmap";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmapFactory> = L"Microsoft.UI.Xaml.Media.Imaging.IWriteableBitmapFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTask> = L"Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTask";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTaskFactory> = L"Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTaskOverrides> = L"Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Media::Imaging::DownloadProgressEventHandler> = L"Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImage>{ 0x5CC29916,0xA411,0x5BC2,{ 0xA3,0xC5,0xA0,0x0D,0x99,0xA5,0x9D,0xA8 } }; // 5CC29916-A411-5BC2-A3C5-A00D99A59DA8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImageFactory>{ 0xF037E0E9,0xF229,0x522E,{ 0x95,0xC9,0xDA,0x22,0x11,0xA1,0x4B,0x05 } }; // F037E0E9-F229-522E-95C9-DA2211A14B05
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImageStatics>{ 0x4BCF71A9,0x1897,0x51DC,{ 0x8E,0x3F,0x2C,0x5C,0x79,0x6D,0x1C,0xD9 } }; // 4BCF71A9-1897-51DC-8E3F-2C5C796D1CD9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapSource>{ 0x8424269D,0x9B82,0x534F,{ 0x8F,0xEA,0xAF,0x5B,0x5E,0xF9,0x6B,0xF2 } }; // 8424269D-9B82-534F-8FEA-AF5B5EF96BF2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapSourceFactory>{ 0x0392F025,0x1868,0x5876,{ 0xAD,0x67,0x12,0xE9,0x4A,0x8D,0xA5,0xBF } }; // 0392F025-1868-5876-AD67-12E94A8DA5BF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapSourceStatics>{ 0xEFA3745E,0x4400,0x5F0B,{ 0xBD,0xC7,0x3F,0x29,0x11,0xA3,0xD7,0x19 } }; // EFA3745E-4400-5F0B-BDC7-3F2911A3D719
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IDownloadProgressEventArgs>{ 0x9A0EA80B,0x1A17,0x50D5,{ 0x83,0xF3,0x37,0x77,0x38,0x21,0x26,0x19 } }; // 9A0EA80B-1A17-50D5-83F3-377738212619
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IRenderTargetBitmap>{ 0xCF10407D,0xFA8B,0x57A3,{ 0x95,0x74,0x71,0x05,0x29,0xAE,0x0B,0x04 } }; // CF10407D-FA8B-57A3-9574-710529AE0B04
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IRenderTargetBitmapStatics>{ 0x83E822E4,0x9F84,0x5986,{ 0x93,0xB0,0xE4,0xF7,0x01,0x9C,0x36,0x7D } }; // 83E822E4-9F84-5986-93B0-E4F7019C367D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::ISoftwareBitmapSource>{ 0xA6ACA802,0x1F24,0x5A1E,{ 0xBF,0x08,0x78,0x1A,0x85,0xED,0x55,0x11 } }; // A6ACA802-1F24-5A1E-BF08-781A85ED5511
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::ISurfaceImageSource>{ 0xAC078D9C,0xD0E0,0x5FF9,{ 0xB7,0x3E,0x98,0xE8,0x2E,0x4C,0x8D,0x36 } }; // AC078D9C-D0E0-5FF9-B73E-98E82E4C8D36
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::ISurfaceImageSourceFactory>{ 0x09A26ED2,0x11B3,0x5EF1,{ 0xAC,0x56,0x20,0xD0,0x64,0xCC,0xCA,0x34 } }; // 09A26ED2-11B3-5EF1-AC56-20D064CCCA34
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSource>{ 0xD5B61D3C,0xB68D,0x53A2,{ 0xB0,0x7B,0xBA,0x6A,0xDF,0xDD,0x58,0x87 } }; // D5B61D3C-B68D-53A2-B07B-BA6ADFDD5887
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceFactory>{ 0x2F85673F,0xAC64,0x570D,{ 0x9B,0xDA,0x94,0xFA,0x08,0x2E,0xEA,0xD9 } }; // 2F85673F-AC64-570D-9BDA-94FA082EEAD9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceFailedEventArgs>{ 0x76E66278,0x7804,0x5439,{ 0xA5,0x0D,0x14,0xC5,0xBA,0x89,0x67,0x14 } }; // 76E66278-7804-5439-A50D-14C5BA896714
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceOpenedEventArgs>{ 0x1C9860D5,0x38D0,0x5B21,{ 0x8D,0x48,0x07,0x2F,0x1E,0x25,0x4E,0x39 } }; // 1C9860D5-38D0-5B21-8D48-072F1E254E39
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceStatics>{ 0xE3AD1068,0xF4C6,0x5513,{ 0xA7,0x77,0x29,0x80,0xF0,0xBA,0x41,0xBD } }; // E3AD1068-F4C6-5513-A777-2980F0BA41BD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSource>{ 0xE4FF96A6,0xFEDE,0x589C,{ 0xA0,0x07,0x41,0x78,0xB5,0x3B,0x67,0x39 } }; // E4FF96A6-FEDE-589C-A007-4178B53B6739
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSourceFactory>{ 0x08490F2C,0x04A8,0x5031,{ 0xB9,0xC7,0x70,0x70,0x60,0xD7,0xCD,0x48 } }; // 08490F2C-04A8-5031-B9C7-707060D7CD48
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmap>{ 0x78C824A9,0x0E43,0x5F1E,{ 0x93,0xBC,0xD0,0x46,0xCC,0xA8,0x2B,0x7E } }; // 78C824A9-0E43-5F1E-93BC-D046CCA82B7E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmapFactory>{ 0x26E861D9,0xB080,0x512B,{ 0x96,0xC4,0x80,0x05,0x0E,0x7E,0x08,0xD1 } }; // 26E861D9-B080-512B-96C4-80050E7E08D1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTask>{ 0x7807000C,0xA050,0x5121,{ 0xAC,0x74,0x33,0x22,0xD5,0x35,0x8E,0x39 } }; // 7807000C-A050-5121-AC74-3322D5358E39
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTaskFactory>{ 0x205247A3,0x9FFE,0x599A,{ 0xA2,0x1A,0x71,0x81,0x44,0x2A,0x9D,0x75 } }; // 205247A3-9FFE-599A-A21A-7181442A9D75
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTaskOverrides>{ 0x18733237,0x324B,0x57C0,{ 0x89,0xB2,0x58,0x75,0x47,0x2A,0xCC,0x80 } }; // 18733237-324B-57C0-89B2-5875472ACC80
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Media::Imaging::DownloadProgressEventHandler>{ 0x9A8E4AF5,0xB124,0x5205,{ 0x8A,0xE9,0x34,0x96,0xE0,0x63,0xC5,0x69 } }; // 9A8E4AF5-B124-5205-8AE9-3496E063C569
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Imaging::BitmapImage>{ using type = winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImage; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Imaging::BitmapSource>{ using type = winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapSource; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Imaging::DownloadProgressEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Media::Imaging::IDownloadProgressEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Imaging::RenderTargetBitmap>{ using type = winrt::Microsoft::UI::Xaml::Media::Imaging::IRenderTargetBitmap; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Imaging::SoftwareBitmapSource>{ using type = winrt::Microsoft::UI::Xaml::Media::Imaging::ISoftwareBitmapSource; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Imaging::SurfaceImageSource>{ using type = winrt::Microsoft::UI::Xaml::Media::Imaging::ISurfaceImageSource; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSource>{ using type = winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSource; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSourceFailedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceFailedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSourceOpenedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceOpenedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource>{ using type = winrt::Microsoft::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSource; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Imaging::WriteableBitmap>{ using type = winrt::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmap; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Media::Imaging::XamlRenderingBackgroundTask>{ using type = winrt::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTask; };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImage>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CreateOptions(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CreateOptions(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_UriSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_UriSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_DecodePixelWidth(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DecodePixelWidth(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DecodePixelHeight(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DecodePixelHeight(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DecodePixelType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DecodePixelType(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsAnimatedBitmap(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsPlaying(bool*) noexcept = 0;
            virtual int32_t __stdcall get_AutoPlay(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AutoPlay(bool) noexcept = 0;
            virtual int32_t __stdcall add_DownloadProgress(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DownloadProgress(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ImageOpened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ImageOpened(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ImageFailed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ImageFailed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall Play() noexcept = 0;
            virtual int32_t __stdcall Stop() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImageFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstanceWithUriSource(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImageStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_CreateOptionsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_UriSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DecodePixelWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DecodePixelHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DecodePixelTypeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsAnimatedBitmapProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPlayingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AutoPlayProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PixelWidth(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_PixelHeight(int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetSource(void*) noexcept = 0;
            virtual int32_t __stdcall SetSourceAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapSourceFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapSourceStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PixelWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PixelHeightProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::IDownloadProgressEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Progress(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Progress(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::IRenderTargetBitmap>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PixelWidth(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_PixelHeight(int32_t*) noexcept = 0;
            virtual int32_t __stdcall RenderAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall RenderToSizeAsync(void*, int32_t, int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetPixelsAsync(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::IRenderTargetBitmapStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PixelWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PixelHeightProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::ISoftwareBitmapSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall SetBitmapAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::ISurfaceImageSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::ISurfaceImageSourceFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstanceWithDimensions(int32_t, int32_t, void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstanceWithDimensionsAndOpacity(int32_t, int32_t, bool, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_UriSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_UriSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_RasterizePixelWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_RasterizePixelWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_RasterizePixelHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_RasterizePixelHeight(double) noexcept = 0;
            virtual int32_t __stdcall add_Opened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Opened(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_OpenFailed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_OpenFailed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall SetSourceAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstanceWithUriSource(void*, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceFailedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Status(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceOpenedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_UriSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RasterizePixelWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RasterizePixelHeightProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSourceFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstanceWithDimensions(int32_t, int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstanceWithDimensionsAndOpacity(int32_t, int32_t, bool, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmap>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PixelBuffer(void**) noexcept = 0;
            virtual int32_t __stdcall Invalidate() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmapFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstanceWithDimensions(int32_t, int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTask>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTaskFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTaskOverrides>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall OnRun(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Media::Imaging::DownloadProgressEventHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_IBitmapImage
    {
        [[nodiscard]] auto CreateOptions() const;
        auto CreateOptions(winrt::Microsoft::UI::Xaml::Media::Imaging::BitmapCreateOptions const& value) const;
        [[nodiscard]] auto UriSource() const;
        auto UriSource(winrt::Windows::Foundation::Uri const& value) const;
        [[nodiscard]] auto DecodePixelWidth() const;
        auto DecodePixelWidth(int32_t value) const;
        [[nodiscard]] auto DecodePixelHeight() const;
        auto DecodePixelHeight(int32_t value) const;
        [[nodiscard]] auto DecodePixelType() const;
        auto DecodePixelType(winrt::Microsoft::UI::Xaml::Media::Imaging::DecodePixelType const& value) const;
        [[nodiscard]] auto IsAnimatedBitmap() const;
        [[nodiscard]] auto IsPlaying() const;
        [[nodiscard]] auto AutoPlay() const;
        auto AutoPlay(bool value) const;
        auto DownloadProgress(winrt::Microsoft::UI::Xaml::Media::Imaging::DownloadProgressEventHandler const& handler) const;
        using DownloadProgress_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImage, &impl::abi_t<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImage>::remove_DownloadProgress>;
        [[nodiscard]] auto DownloadProgress(auto_revoke_t, winrt::Microsoft::UI::Xaml::Media::Imaging::DownloadProgressEventHandler const& handler) const;
        auto DownloadProgress(winrt::event_token const& token) const noexcept;
        auto ImageOpened(winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        using ImageOpened_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImage, &impl::abi_t<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImage>::remove_ImageOpened>;
        [[nodiscard]] auto ImageOpened(auto_revoke_t, winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        auto ImageOpened(winrt::event_token const& token) const noexcept;
        auto ImageFailed(winrt::Microsoft::UI::Xaml::ExceptionRoutedEventHandler const& handler) const;
        using ImageFailed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImage, &impl::abi_t<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImage>::remove_ImageFailed>;
        [[nodiscard]] auto ImageFailed(auto_revoke_t, winrt::Microsoft::UI::Xaml::ExceptionRoutedEventHandler const& handler) const;
        auto ImageFailed(winrt::event_token const& token) const noexcept;
        auto Play() const;
        auto Stop() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImage>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_IBitmapImage<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_IBitmapImageFactory
    {
        auto CreateInstanceWithUriSource(winrt::Windows::Foundation::Uri const& uriSource) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImageFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_IBitmapImageFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_IBitmapImageStatics
    {
        [[nodiscard]] auto CreateOptionsProperty() const;
        [[nodiscard]] auto UriSourceProperty() const;
        [[nodiscard]] auto DecodePixelWidthProperty() const;
        [[nodiscard]] auto DecodePixelHeightProperty() const;
        [[nodiscard]] auto DecodePixelTypeProperty() const;
        [[nodiscard]] auto IsAnimatedBitmapProperty() const;
        [[nodiscard]] auto IsPlayingProperty() const;
        [[nodiscard]] auto AutoPlayProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapImageStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_IBitmapImageStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_IBitmapSource
    {
        [[nodiscard]] auto PixelWidth() const;
        [[nodiscard]] auto PixelHeight() const;
        auto SetSource(winrt::Windows::Storage::Streams::IRandomAccessStream const& streamSource) const;
        auto SetSourceAsync(winrt::Windows::Storage::Streams::IRandomAccessStream const& streamSource) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_IBitmapSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_IBitmapSourceFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_IBitmapSourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_IBitmapSourceStatics
    {
        [[nodiscard]] auto PixelWidthProperty() const;
        [[nodiscard]] auto PixelHeightProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::IBitmapSourceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_IBitmapSourceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_IDownloadProgressEventArgs
    {
        [[nodiscard]] auto Progress() const;
        auto Progress(int32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::IDownloadProgressEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_IDownloadProgressEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_IRenderTargetBitmap
    {
        [[nodiscard]] auto PixelWidth() const;
        [[nodiscard]] auto PixelHeight() const;
        auto RenderAsync(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        auto RenderAsync(winrt::Microsoft::UI::Xaml::UIElement const& element, int32_t scaledWidth, int32_t scaledHeight) const;
        auto GetPixelsAsync() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::IRenderTargetBitmap>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_IRenderTargetBitmap<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_IRenderTargetBitmapStatics
    {
        [[nodiscard]] auto PixelWidthProperty() const;
        [[nodiscard]] auto PixelHeightProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::IRenderTargetBitmapStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_IRenderTargetBitmapStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_ISoftwareBitmapSource
    {
        auto SetBitmapAsync(winrt::Windows::Graphics::Imaging::SoftwareBitmap const& softwareBitmap) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::ISoftwareBitmapSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_ISoftwareBitmapSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_ISurfaceImageSource
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::ISurfaceImageSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_ISurfaceImageSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_ISurfaceImageSourceFactory
    {
        auto CreateInstanceWithDimensions(int32_t pixelWidth, int32_t pixelHeight, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
        auto CreateInstanceWithDimensionsAndOpacity(int32_t pixelWidth, int32_t pixelHeight, bool isOpaque, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::ISurfaceImageSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_ISurfaceImageSourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource
    {
        [[nodiscard]] auto UriSource() const;
        auto UriSource(winrt::Windows::Foundation::Uri const& value) const;
        [[nodiscard]] auto RasterizePixelWidth() const;
        auto RasterizePixelWidth(double value) const;
        [[nodiscard]] auto RasterizePixelHeight() const;
        auto RasterizePixelHeight(double value) const;
        auto Opened(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSource, winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSourceOpenedEventArgs> const& handler) const;
        using Opened_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSource, &impl::abi_t<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSource>::remove_Opened>;
        [[nodiscard]] auto Opened(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSource, winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSourceOpenedEventArgs> const& handler) const;
        auto Opened(winrt::event_token const& token) const noexcept;
        auto OpenFailed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSource, winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSourceFailedEventArgs> const& handler) const;
        using OpenFailed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSource, &impl::abi_t<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSource>::remove_OpenFailed>;
        [[nodiscard]] auto OpenFailed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSource, winrt::Microsoft::UI::Xaml::Media::Imaging::SvgImageSourceFailedEventArgs> const& handler) const;
        auto OpenFailed(winrt::event_token const& token) const noexcept;
        auto SetSourceAsync(winrt::Windows::Storage::Streams::IRandomAccessStream const& streamSource) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_ISvgImageSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
        auto CreateInstanceWithUriSource(winrt::Windows::Foundation::Uri const& uriSource, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceFailedEventArgs
    {
        [[nodiscard]] auto Status() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceFailedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceFailedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceOpenedEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceOpenedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceOpenedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceStatics
    {
        [[nodiscard]] auto UriSourceProperty() const;
        [[nodiscard]] auto RasterizePixelWidthProperty() const;
        [[nodiscard]] auto RasterizePixelHeightProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::ISvgImageSourceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_ISvgImageSourceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_IVirtualSurfaceImageSource
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_IVirtualSurfaceImageSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_IVirtualSurfaceImageSourceFactory
    {
        auto CreateInstanceWithDimensions(int32_t pixelWidth, int32_t pixelHeight) const;
        auto CreateInstanceWithDimensionsAndOpacity(int32_t pixelWidth, int32_t pixelHeight, bool isOpaque) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_IVirtualSurfaceImageSourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_IWriteableBitmap
    {
        [[nodiscard]] auto PixelBuffer() const;
        auto Invalidate() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmap>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_IWriteableBitmap<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_IWriteableBitmapFactory
    {
        auto CreateInstanceWithDimensions(int32_t pixelWidth, int32_t pixelHeight) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::IWriteableBitmapFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_IWriteableBitmapFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTask
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTask>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTask<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTaskFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTaskFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTaskFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTaskOverrides
    {
        auto OnRun(winrt::Windows::ApplicationModel::Background::IBackgroundTaskInstance const& taskInstance) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Media::Imaging::IXamlRenderingBackgroundTaskOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Media_Imaging_IXamlRenderingBackgroundTaskOverrides<D>;
    };
}
#endif
