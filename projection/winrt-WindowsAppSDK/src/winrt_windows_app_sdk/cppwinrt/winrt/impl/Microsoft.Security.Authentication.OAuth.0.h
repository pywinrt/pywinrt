// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240111.5

#pragma once
#ifndef WINRT_Microsoft_Security_Authentication_OAuth_0_H
#define WINRT_Microsoft_Security_Authentication_OAuth_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI
{
    struct WindowId;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct HResult;
    struct Uri;
}
WINRT_EXPORT namespace winrt::Windows::Web::Http
{
    struct HttpResponseMessage;
}
WINRT_EXPORT namespace winrt::Windows::Web::Http::Headers
{
    struct HttpCredentialsHeaderValue;
}
WINRT_EXPORT namespace winrt::Microsoft::Security::Authentication::OAuth
{
    enum class CodeChallengeMethodKind : int32_t
    {
        None = 0,
        S256 = 1,
        Plain = 2,
    };
    enum class TokenFailureKind : int32_t
    {
        ErrorResponse = 0,
        HttpFailure = 1,
        InvalidResponse = 2,
    };
    struct IAuthFailure;
    struct IAuthRequestParams;
    struct IAuthRequestParamsFactory;
    struct IAuthRequestParamsStatics;
    struct IAuthRequestResult;
    struct IAuthResponse;
    struct IClientAuthentication;
    struct IClientAuthenticationFactory;
    struct IClientAuthenticationStatics;
    struct IOAuth2ManagerStatics;
    struct ITokenFailure;
    struct ITokenRequestParams;
    struct ITokenRequestParamsFactory;
    struct ITokenRequestParamsStatics;
    struct ITokenRequestResult;
    struct ITokenResponse;
    struct AuthFailure;
    struct AuthRequestParams;
    struct AuthRequestResult;
    struct AuthResponse;
    struct ClientAuthentication;
    struct OAuth2Manager;
    struct TokenFailure;
    struct TokenRequestParams;
    struct TokenRequestResult;
    struct TokenResponse;
    struct OAuthContract;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::IAuthFailure>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestParams>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestParamsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestParamsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestResult>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::IAuthResponse>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::IClientAuthentication>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::IClientAuthenticationFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::IClientAuthenticationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::IOAuth2ManagerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::ITokenFailure>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestParams>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestParamsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestParamsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestResult>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::ITokenResponse>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::AuthFailure>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::AuthRequestParams>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::AuthRequestResult>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::AuthResponse>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::ClientAuthentication>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::OAuth2Manager>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::TokenFailure>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::TokenRequestParams>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::TokenRequestResult>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::TokenResponse>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::CodeChallengeMethodKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Security::Authentication::OAuth::TokenFailureKind>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::AuthFailure> = L"Microsoft.Security.Authentication.OAuth.AuthFailure";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::AuthRequestParams> = L"Microsoft.Security.Authentication.OAuth.AuthRequestParams";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::AuthRequestResult> = L"Microsoft.Security.Authentication.OAuth.AuthRequestResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::AuthResponse> = L"Microsoft.Security.Authentication.OAuth.AuthResponse";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::ClientAuthentication> = L"Microsoft.Security.Authentication.OAuth.ClientAuthentication";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::OAuth2Manager> = L"Microsoft.Security.Authentication.OAuth.OAuth2Manager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::TokenFailure> = L"Microsoft.Security.Authentication.OAuth.TokenFailure";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::TokenRequestParams> = L"Microsoft.Security.Authentication.OAuth.TokenRequestParams";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::TokenRequestResult> = L"Microsoft.Security.Authentication.OAuth.TokenRequestResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::TokenResponse> = L"Microsoft.Security.Authentication.OAuth.TokenResponse";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::CodeChallengeMethodKind> = L"Microsoft.Security.Authentication.OAuth.CodeChallengeMethodKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::TokenFailureKind> = L"Microsoft.Security.Authentication.OAuth.TokenFailureKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::IAuthFailure> = L"Microsoft.Security.Authentication.OAuth.IAuthFailure";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestParams> = L"Microsoft.Security.Authentication.OAuth.IAuthRequestParams";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestParamsFactory> = L"Microsoft.Security.Authentication.OAuth.IAuthRequestParamsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestParamsStatics> = L"Microsoft.Security.Authentication.OAuth.IAuthRequestParamsStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestResult> = L"Microsoft.Security.Authentication.OAuth.IAuthRequestResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::IAuthResponse> = L"Microsoft.Security.Authentication.OAuth.IAuthResponse";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::IClientAuthentication> = L"Microsoft.Security.Authentication.OAuth.IClientAuthentication";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::IClientAuthenticationFactory> = L"Microsoft.Security.Authentication.OAuth.IClientAuthenticationFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::IClientAuthenticationStatics> = L"Microsoft.Security.Authentication.OAuth.IClientAuthenticationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::IOAuth2ManagerStatics> = L"Microsoft.Security.Authentication.OAuth.IOAuth2ManagerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::ITokenFailure> = L"Microsoft.Security.Authentication.OAuth.ITokenFailure";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestParams> = L"Microsoft.Security.Authentication.OAuth.ITokenRequestParams";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestParamsFactory> = L"Microsoft.Security.Authentication.OAuth.ITokenRequestParamsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestParamsStatics> = L"Microsoft.Security.Authentication.OAuth.ITokenRequestParamsStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestResult> = L"Microsoft.Security.Authentication.OAuth.ITokenRequestResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::ITokenResponse> = L"Microsoft.Security.Authentication.OAuth.ITokenResponse";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Security::Authentication::OAuth::OAuthContract> = L"Microsoft.Security.Authentication.OAuth.OAuthContract";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Security::Authentication::OAuth::IAuthFailure>{ 0xEC55ED5F,0x0497,0x53CB,{ 0x97,0x6B,0xAB,0xD1,0x46,0x35,0x01,0x75 } }; // EC55ED5F-0497-53CB-976B-ABD146350175
    template <> inline constexpr guid guid_v<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestParams>{ 0xAAC61E23,0x9155,0x551A,{ 0xAC,0x37,0xCD,0xB2,0x99,0x5F,0x88,0xD2 } }; // AAC61E23-9155-551A-AC37-CDB2995F88D2
    template <> inline constexpr guid guid_v<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestParamsFactory>{ 0x539BDCA7,0xBDE4,0x5A63,{ 0x85,0xD1,0x33,0x40,0x3F,0x6E,0x34,0x52 } }; // 539BDCA7-BDE4-5A63-85D1-33403F6E3452
    template <> inline constexpr guid guid_v<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestParamsStatics>{ 0x0BEFD4F0,0x6864,0x5BF4,{ 0xBD,0x8E,0x2F,0x3B,0xF9,0x89,0x06,0xB5 } }; // 0BEFD4F0-6864-5BF4-BD8E-2F3BF98906B5
    template <> inline constexpr guid guid_v<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestResult>{ 0x10F8B804,0x04CF,0x5651,{ 0xBD,0x52,0x7D,0xA9,0x34,0x6D,0xEB,0xC1 } }; // 10F8B804-04CF-5651-BD52-7DA9346DEBC1
    template <> inline constexpr guid guid_v<winrt::Microsoft::Security::Authentication::OAuth::IAuthResponse>{ 0x5BC1FA62,0xFDED,0x5769,{ 0x9D,0x40,0xDE,0xD1,0xEE,0xA9,0x0D,0x72 } }; // 5BC1FA62-FDED-5769-9D40-DED1EEA90D72
    template <> inline constexpr guid guid_v<winrt::Microsoft::Security::Authentication::OAuth::IClientAuthentication>{ 0xEF99342D,0xD597,0x5EFF,{ 0x87,0x8A,0x8D,0xE0,0xCB,0x59,0x71,0x72 } }; // EF99342D-D597-5EFF-878A-8DE0CB597172
    template <> inline constexpr guid guid_v<winrt::Microsoft::Security::Authentication::OAuth::IClientAuthenticationFactory>{ 0x0D50E9F5,0xC37F,0x57CC,{ 0xB9,0xEC,0x2B,0x19,0x3B,0x0F,0x9C,0xEC } }; // 0D50E9F5-C37F-57CC-B9EC-2B193B0F9CEC
    template <> inline constexpr guid guid_v<winrt::Microsoft::Security::Authentication::OAuth::IClientAuthenticationStatics>{ 0x65613560,0x2B6F,0x52FD,{ 0xA4,0x79,0x3A,0x96,0x62,0x46,0x82,0xAE } }; // 65613560-2B6F-52FD-A479-3A96624682AE
    template <> inline constexpr guid guid_v<winrt::Microsoft::Security::Authentication::OAuth::IOAuth2ManagerStatics>{ 0xAC9D0DD1,0xC07E,0x5302,{ 0x81,0x50,0x19,0x9C,0x7D,0x34,0x3F,0x57 } }; // AC9D0DD1-C07E-5302-8150-199C7D343F57
    template <> inline constexpr guid guid_v<winrt::Microsoft::Security::Authentication::OAuth::ITokenFailure>{ 0x60F8D417,0xEA6A,0x51D2,{ 0x8A,0xD7,0xF0,0xE5,0x17,0x7A,0xEF,0x0A } }; // 60F8D417-EA6A-51D2-8AD7-F0E5177AEF0A
    template <> inline constexpr guid guid_v<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestParams>{ 0x49134DBC,0xAAB5,0x5BA4,{ 0xBC,0xDF,0x95,0x02,0x14,0xD8,0x11,0x82 } }; // 49134DBC-AAB5-5BA4-BCDF-950214D81182
    template <> inline constexpr guid guid_v<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestParamsFactory>{ 0x2BF39C30,0x2F30,0x5788,{ 0x98,0xD2,0xA8,0xBA,0x62,0x2B,0xE8,0x09 } }; // 2BF39C30-2F30-5788-98D2-A8BA622BE809
    template <> inline constexpr guid guid_v<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestParamsStatics>{ 0x68B7AF65,0x4381,0x5593,{ 0x88,0x20,0xF7,0x4A,0x60,0x5B,0x9F,0x3B } }; // 68B7AF65-4381-5593-8820-F74A605B9F3B
    template <> inline constexpr guid guid_v<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestResult>{ 0x35B31F77,0xF166,0x50DF,{ 0xA8,0x37,0xEC,0x04,0x60,0x21,0x51,0x66 } }; // 35B31F77-F166-50DF-A837-EC0460215166
    template <> inline constexpr guid guid_v<winrt::Microsoft::Security::Authentication::OAuth::ITokenResponse>{ 0x9D9D8CD3,0x04B2,0x5DF6,{ 0xBF,0xD2,0xE8,0xA6,0x85,0x97,0x45,0xDA } }; // 9D9D8CD3-04B2-5DF6-BFD2-E8A6859745DA
    template <> struct default_interface<winrt::Microsoft::Security::Authentication::OAuth::AuthFailure>{ using type = winrt::Microsoft::Security::Authentication::OAuth::IAuthFailure; };
    template <> struct default_interface<winrt::Microsoft::Security::Authentication::OAuth::AuthRequestParams>{ using type = winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestParams; };
    template <> struct default_interface<winrt::Microsoft::Security::Authentication::OAuth::AuthRequestResult>{ using type = winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestResult; };
    template <> struct default_interface<winrt::Microsoft::Security::Authentication::OAuth::AuthResponse>{ using type = winrt::Microsoft::Security::Authentication::OAuth::IAuthResponse; };
    template <> struct default_interface<winrt::Microsoft::Security::Authentication::OAuth::ClientAuthentication>{ using type = winrt::Microsoft::Security::Authentication::OAuth::IClientAuthentication; };
    template <> struct default_interface<winrt::Microsoft::Security::Authentication::OAuth::TokenFailure>{ using type = winrt::Microsoft::Security::Authentication::OAuth::ITokenFailure; };
    template <> struct default_interface<winrt::Microsoft::Security::Authentication::OAuth::TokenRequestParams>{ using type = winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestParams; };
    template <> struct default_interface<winrt::Microsoft::Security::Authentication::OAuth::TokenRequestResult>{ using type = winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestResult; };
    template <> struct default_interface<winrt::Microsoft::Security::Authentication::OAuth::TokenResponse>{ using type = winrt::Microsoft::Security::Authentication::OAuth::ITokenResponse; };
    template <> struct abi<winrt::Microsoft::Security::Authentication::OAuth::IAuthFailure>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Error(void**) noexcept = 0;
            virtual int32_t __stdcall get_ErrorDescription(void**) noexcept = 0;
            virtual int32_t __stdcall get_ErrorUri(void**) noexcept = 0;
            virtual int32_t __stdcall get_State(void**) noexcept = 0;
            virtual int32_t __stdcall get_AdditionalParams(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestParams>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ResponseType(void**) noexcept = 0;
            virtual int32_t __stdcall put_ResponseType(void*) noexcept = 0;
            virtual int32_t __stdcall get_ClientId(void**) noexcept = 0;
            virtual int32_t __stdcall put_ClientId(void*) noexcept = 0;
            virtual int32_t __stdcall get_RedirectUri(void**) noexcept = 0;
            virtual int32_t __stdcall put_RedirectUri(void*) noexcept = 0;
            virtual int32_t __stdcall get_State(void**) noexcept = 0;
            virtual int32_t __stdcall put_State(void*) noexcept = 0;
            virtual int32_t __stdcall get_Scope(void**) noexcept = 0;
            virtual int32_t __stdcall put_Scope(void*) noexcept = 0;
            virtual int32_t __stdcall get_CodeChallenge(void**) noexcept = 0;
            virtual int32_t __stdcall put_CodeChallenge(void*) noexcept = 0;
            virtual int32_t __stdcall get_CodeChallengeMethod(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CodeChallengeMethod(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_AdditionalParams(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestParamsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstance2(void*, void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestParamsStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateForAuthorizationCodeRequest(void*, void**) noexcept = 0;
            virtual int32_t __stdcall CreateForAuthorizationCodeRequest2(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestResult>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ResponseUri(void**) noexcept = 0;
            virtual int32_t __stdcall get_Response(void**) noexcept = 0;
            virtual int32_t __stdcall get_Failure(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Security::Authentication::OAuth::IAuthResponse>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_State(void**) noexcept = 0;
            virtual int32_t __stdcall get_Code(void**) noexcept = 0;
            virtual int32_t __stdcall get_AccessToken(void**) noexcept = 0;
            virtual int32_t __stdcall get_TokenType(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExpiresIn(void**) noexcept = 0;
            virtual int32_t __stdcall get_Scope(void**) noexcept = 0;
            virtual int32_t __stdcall get_AdditionalParams(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Security::Authentication::OAuth::IClientAuthentication>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Authorization(void**) noexcept = 0;
            virtual int32_t __stdcall put_Authorization(void*) noexcept = 0;
            virtual int32_t __stdcall get_ProxyAuthorization(void**) noexcept = 0;
            virtual int32_t __stdcall put_ProxyAuthorization(void*) noexcept = 0;
            virtual int32_t __stdcall get_AdditionalHeaders(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Security::Authentication::OAuth::IClientAuthenticationFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Security::Authentication::OAuth::IClientAuthenticationStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateForBasicAuthorization(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Security::Authentication::OAuth::IOAuth2ManagerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall RequestAuthWithParamsAsync(struct struct_Microsoft_UI_WindowId, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall CompleteAuthRequest(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall RequestTokenAsync(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall RequestTokenAsync2(void*, void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Security::Authentication::OAuth::ITokenFailure>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Kind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ErrorCode(winrt::hresult*) noexcept = 0;
            virtual int32_t __stdcall get_Error(void**) noexcept = 0;
            virtual int32_t __stdcall get_ErrorDescription(void**) noexcept = 0;
            virtual int32_t __stdcall get_ErrorUri(void**) noexcept = 0;
            virtual int32_t __stdcall get_AdditionalParams(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestParams>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_GrantType(void**) noexcept = 0;
            virtual int32_t __stdcall put_GrantType(void*) noexcept = 0;
            virtual int32_t __stdcall get_Code(void**) noexcept = 0;
            virtual int32_t __stdcall put_Code(void*) noexcept = 0;
            virtual int32_t __stdcall get_RedirectUri(void**) noexcept = 0;
            virtual int32_t __stdcall put_RedirectUri(void*) noexcept = 0;
            virtual int32_t __stdcall get_CodeVerifier(void**) noexcept = 0;
            virtual int32_t __stdcall put_CodeVerifier(void*) noexcept = 0;
            virtual int32_t __stdcall get_ClientId(void**) noexcept = 0;
            virtual int32_t __stdcall put_ClientId(void*) noexcept = 0;
            virtual int32_t __stdcall get_Username(void**) noexcept = 0;
            virtual int32_t __stdcall put_Username(void*) noexcept = 0;
            virtual int32_t __stdcall get_Password(void**) noexcept = 0;
            virtual int32_t __stdcall put_Password(void*) noexcept = 0;
            virtual int32_t __stdcall get_Scope(void**) noexcept = 0;
            virtual int32_t __stdcall put_Scope(void*) noexcept = 0;
            virtual int32_t __stdcall get_RefreshToken(void**) noexcept = 0;
            virtual int32_t __stdcall put_RefreshToken(void*) noexcept = 0;
            virtual int32_t __stdcall get_AdditionalParams(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestParamsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestParamsStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateForAuthorizationCodeRequest(void*, void**) noexcept = 0;
            virtual int32_t __stdcall CreateForClientCredentials(void**) noexcept = 0;
            virtual int32_t __stdcall CreateForExtension(void*, void**) noexcept = 0;
            virtual int32_t __stdcall CreateForRefreshToken(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestResult>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ResponseMessage(void**) noexcept = 0;
            virtual int32_t __stdcall get_Response(void**) noexcept = 0;
            virtual int32_t __stdcall get_Failure(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Security::Authentication::OAuth::ITokenResponse>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AccessToken(void**) noexcept = 0;
            virtual int32_t __stdcall get_TokenType(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExpiresIn(double*) noexcept = 0;
            virtual int32_t __stdcall get_RefreshToken(void**) noexcept = 0;
            virtual int32_t __stdcall get_Scope(void**) noexcept = 0;
            virtual int32_t __stdcall get_AdditionalParams(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Security_Authentication_OAuth_IAuthFailure
    {
        [[nodiscard]] auto Error() const;
        [[nodiscard]] auto ErrorDescription() const;
        [[nodiscard]] auto ErrorUri() const;
        [[nodiscard]] auto State() const;
        [[nodiscard]] auto AdditionalParams() const;
    };
    template <> struct consume<winrt::Microsoft::Security::Authentication::OAuth::IAuthFailure>
    {
        template <typename D> using type = consume_Microsoft_Security_Authentication_OAuth_IAuthFailure<D>;
    };
    template <typename D>
    struct consume_Microsoft_Security_Authentication_OAuth_IAuthRequestParams
    {
        [[nodiscard]] auto ResponseType() const;
        auto ResponseType(param::hstring const& value) const;
        [[nodiscard]] auto ClientId() const;
        auto ClientId(param::hstring const& value) const;
        [[nodiscard]] auto RedirectUri() const;
        auto RedirectUri(winrt::Windows::Foundation::Uri const& value) const;
        [[nodiscard]] auto State() const;
        auto State(param::hstring const& value) const;
        [[nodiscard]] auto Scope() const;
        auto Scope(param::hstring const& value) const;
        [[nodiscard]] auto CodeChallenge() const;
        auto CodeChallenge(param::hstring const& value) const;
        [[nodiscard]] auto CodeChallengeMethod() const;
        auto CodeChallengeMethod(winrt::Microsoft::Security::Authentication::OAuth::CodeChallengeMethodKind const& value) const;
        [[nodiscard]] auto AdditionalParams() const;
    };
    template <> struct consume<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestParams>
    {
        template <typename D> using type = consume_Microsoft_Security_Authentication_OAuth_IAuthRequestParams<D>;
    };
    template <typename D>
    struct consume_Microsoft_Security_Authentication_OAuth_IAuthRequestParamsFactory
    {
        auto CreateInstance(param::hstring const& responseType, param::hstring const& clientId) const;
        auto CreateInstance2(param::hstring const& responseType, param::hstring const& clientId, winrt::Windows::Foundation::Uri const& redirectUri) const;
    };
    template <> struct consume<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestParamsFactory>
    {
        template <typename D> using type = consume_Microsoft_Security_Authentication_OAuth_IAuthRequestParamsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Security_Authentication_OAuth_IAuthRequestParamsStatics
    {
        auto CreateForAuthorizationCodeRequest(param::hstring const& clientId) const;
        auto CreateForAuthorizationCodeRequest(param::hstring const& clientId, winrt::Windows::Foundation::Uri const& redirectUri) const;
    };
    template <> struct consume<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestParamsStatics>
    {
        template <typename D> using type = consume_Microsoft_Security_Authentication_OAuth_IAuthRequestParamsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Security_Authentication_OAuth_IAuthRequestResult
    {
        [[nodiscard]] auto ResponseUri() const;
        [[nodiscard]] auto Response() const;
        [[nodiscard]] auto Failure() const;
    };
    template <> struct consume<winrt::Microsoft::Security::Authentication::OAuth::IAuthRequestResult>
    {
        template <typename D> using type = consume_Microsoft_Security_Authentication_OAuth_IAuthRequestResult<D>;
    };
    template <typename D>
    struct consume_Microsoft_Security_Authentication_OAuth_IAuthResponse
    {
        [[nodiscard]] auto State() const;
        [[nodiscard]] auto Code() const;
        [[nodiscard]] auto AccessToken() const;
        [[nodiscard]] auto TokenType() const;
        [[nodiscard]] auto ExpiresIn() const;
        [[nodiscard]] auto Scope() const;
        [[nodiscard]] auto AdditionalParams() const;
    };
    template <> struct consume<winrt::Microsoft::Security::Authentication::OAuth::IAuthResponse>
    {
        template <typename D> using type = consume_Microsoft_Security_Authentication_OAuth_IAuthResponse<D>;
    };
    template <typename D>
    struct consume_Microsoft_Security_Authentication_OAuth_IClientAuthentication
    {
        [[nodiscard]] auto Authorization() const;
        auto Authorization(winrt::Windows::Web::Http::Headers::HttpCredentialsHeaderValue const& value) const;
        [[nodiscard]] auto ProxyAuthorization() const;
        auto ProxyAuthorization(winrt::Windows::Web::Http::Headers::HttpCredentialsHeaderValue const& value) const;
        [[nodiscard]] auto AdditionalHeaders() const;
    };
    template <> struct consume<winrt::Microsoft::Security::Authentication::OAuth::IClientAuthentication>
    {
        template <typename D> using type = consume_Microsoft_Security_Authentication_OAuth_IClientAuthentication<D>;
    };
    template <typename D>
    struct consume_Microsoft_Security_Authentication_OAuth_IClientAuthenticationFactory
    {
        auto CreateInstance(winrt::Windows::Web::Http::Headers::HttpCredentialsHeaderValue const& authorization) const;
    };
    template <> struct consume<winrt::Microsoft::Security::Authentication::OAuth::IClientAuthenticationFactory>
    {
        template <typename D> using type = consume_Microsoft_Security_Authentication_OAuth_IClientAuthenticationFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Security_Authentication_OAuth_IClientAuthenticationStatics
    {
        auto CreateForBasicAuthorization(param::hstring const& clientId, param::hstring const& clientSecret) const;
    };
    template <> struct consume<winrt::Microsoft::Security::Authentication::OAuth::IClientAuthenticationStatics>
    {
        template <typename D> using type = consume_Microsoft_Security_Authentication_OAuth_IClientAuthenticationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Security_Authentication_OAuth_IOAuth2ManagerStatics
    {
        auto RequestAuthWithParamsAsync(winrt::Microsoft::UI::WindowId const& parentWindowId, winrt::Windows::Foundation::Uri const& authEndpoint, winrt::Microsoft::Security::Authentication::OAuth::AuthRequestParams const& params) const;
        auto CompleteAuthRequest(winrt::Windows::Foundation::Uri const& responseUri) const;
        auto RequestTokenAsync(winrt::Windows::Foundation::Uri const& tokenEndpoint, winrt::Microsoft::Security::Authentication::OAuth::TokenRequestParams const& params) const;
        auto RequestTokenAsync(winrt::Windows::Foundation::Uri const& tokenEndpoint, winrt::Microsoft::Security::Authentication::OAuth::TokenRequestParams const& params, winrt::Microsoft::Security::Authentication::OAuth::ClientAuthentication const& clientAuth) const;
    };
    template <> struct consume<winrt::Microsoft::Security::Authentication::OAuth::IOAuth2ManagerStatics>
    {
        template <typename D> using type = consume_Microsoft_Security_Authentication_OAuth_IOAuth2ManagerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Security_Authentication_OAuth_ITokenFailure
    {
        [[nodiscard]] auto Kind() const;
        [[nodiscard]] auto ErrorCode() const;
        [[nodiscard]] auto Error() const;
        [[nodiscard]] auto ErrorDescription() const;
        [[nodiscard]] auto ErrorUri() const;
        [[nodiscard]] auto AdditionalParams() const;
    };
    template <> struct consume<winrt::Microsoft::Security::Authentication::OAuth::ITokenFailure>
    {
        template <typename D> using type = consume_Microsoft_Security_Authentication_OAuth_ITokenFailure<D>;
    };
    template <typename D>
    struct consume_Microsoft_Security_Authentication_OAuth_ITokenRequestParams
    {
        [[nodiscard]] auto GrantType() const;
        auto GrantType(param::hstring const& value) const;
        [[nodiscard]] auto Code() const;
        auto Code(param::hstring const& value) const;
        [[nodiscard]] auto RedirectUri() const;
        auto RedirectUri(winrt::Windows::Foundation::Uri const& value) const;
        [[nodiscard]] auto CodeVerifier() const;
        auto CodeVerifier(param::hstring const& value) const;
        [[nodiscard]] auto ClientId() const;
        auto ClientId(param::hstring const& value) const;
        [[nodiscard]] auto Username() const;
        auto Username(param::hstring const& value) const;
        [[nodiscard]] auto Password() const;
        auto Password(param::hstring const& value) const;
        [[nodiscard]] auto Scope() const;
        auto Scope(param::hstring const& value) const;
        [[nodiscard]] auto RefreshToken() const;
        auto RefreshToken(param::hstring const& value) const;
        [[nodiscard]] auto AdditionalParams() const;
    };
    template <> struct consume<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestParams>
    {
        template <typename D> using type = consume_Microsoft_Security_Authentication_OAuth_ITokenRequestParams<D>;
    };
    template <typename D>
    struct consume_Microsoft_Security_Authentication_OAuth_ITokenRequestParamsFactory
    {
        auto CreateInstance(param::hstring const& grantType) const;
    };
    template <> struct consume<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestParamsFactory>
    {
        template <typename D> using type = consume_Microsoft_Security_Authentication_OAuth_ITokenRequestParamsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Security_Authentication_OAuth_ITokenRequestParamsStatics
    {
        auto CreateForAuthorizationCodeRequest(winrt::Microsoft::Security::Authentication::OAuth::AuthResponse const& authResponse) const;
        auto CreateForClientCredentials() const;
        auto CreateForExtension(winrt::Windows::Foundation::Uri const& extensionUri) const;
        auto CreateForRefreshToken(param::hstring const& refreshToken) const;
    };
    template <> struct consume<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestParamsStatics>
    {
        template <typename D> using type = consume_Microsoft_Security_Authentication_OAuth_ITokenRequestParamsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Security_Authentication_OAuth_ITokenRequestResult
    {
        [[nodiscard]] auto ResponseMessage() const;
        [[nodiscard]] auto Response() const;
        [[nodiscard]] auto Failure() const;
    };
    template <> struct consume<winrt::Microsoft::Security::Authentication::OAuth::ITokenRequestResult>
    {
        template <typename D> using type = consume_Microsoft_Security_Authentication_OAuth_ITokenRequestResult<D>;
    };
    template <typename D>
    struct consume_Microsoft_Security_Authentication_OAuth_ITokenResponse
    {
        [[nodiscard]] auto AccessToken() const;
        [[nodiscard]] auto TokenType() const;
        [[nodiscard]] auto ExpiresIn() const;
        [[nodiscard]] auto RefreshToken() const;
        [[nodiscard]] auto Scope() const;
        [[nodiscard]] auto AdditionalParams() const;
    };
    template <> struct consume<winrt::Microsoft::Security::Authentication::OAuth::ITokenResponse>
    {
        template <typename D> using type = consume_Microsoft_Security_Authentication_OAuth_ITokenResponse<D>;
    };
}
#endif
