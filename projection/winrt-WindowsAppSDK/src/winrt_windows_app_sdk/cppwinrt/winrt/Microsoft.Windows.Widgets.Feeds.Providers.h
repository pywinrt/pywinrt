// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240111.5

#pragma once
#ifndef WINRT_Microsoft_Windows_Widgets_Feeds_Providers_H
#define WINRT_Microsoft_Windows_Widgets_Feeds_Providers_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.240111.5"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.240111.5"
#include "winrt/Microsoft.Windows.Widgets.h"
#include "winrt/impl/Microsoft.Windows.Widgets.Feeds.Providers.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_ICustomQueryParametersRequestedArgs<D>::FeedProviderDefinitionId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::ICustomQueryParametersRequestedArgs)->get_FeedProviderDefinitionId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_ICustomQueryParametersUpdateOptions<D>::FeedProviderDefinitionId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::ICustomQueryParametersUpdateOptions)->get_FeedProviderDefinitionId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_ICustomQueryParametersUpdateOptions<D>::CustomQueryParameters() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::ICustomQueryParametersUpdateOptions)->get_CustomQueryParameters(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_ICustomQueryParametersUpdateOptionsFactory<D>::CreateInstance(param::hstring const& feedProviderDefinitionId, param::hstring const& customQueryParameters) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::ICustomQueryParametersUpdateOptionsFactory)->CreateInstance(*(void**)(&feedProviderDefinitionId), *(void**)(&customQueryParameters), &value));
        return winrt::Microsoft::Windows::Widgets::Feeds::Providers::CustomQueryParametersUpdateOptions{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_IFeedDisabledArgs<D>::FeedProviderDefinitionId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedDisabledArgs)->get_FeedProviderDefinitionId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_IFeedDisabledArgs<D>::FeedDefinitionId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedDisabledArgs)->get_FeedDefinitionId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_IFeedEnabledArgs<D>::FeedProviderDefinitionId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedEnabledArgs)->get_FeedProviderDefinitionId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_IFeedEnabledArgs<D>::FeedDefinitionId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedEnabledArgs)->get_FeedDefinitionId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_IFeedManager<D>::GetEnabledFeedProviders() const
    {
        uint32_t result_impl_size{};
        void** result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedManager)->GetEnabledFeedProviders(&result_impl_size, &result));
        return com_array<winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedProviderInfo>{ result, result_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_IFeedManager<D>::SetCustomQueryParameters(winrt::Microsoft::Windows::Widgets::Feeds::Providers::CustomQueryParametersUpdateOptions const& options) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedManager)->SetCustomQueryParameters(*(void**)(&options)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_IFeedManagerStatics<D>::GetDefault() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedManagerStatics)->GetDefault(&result));
        return winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedManager{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_IFeedProvider<D>::OnFeedProviderEnabled(winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedProviderEnabledArgs const& args) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProvider)->OnFeedProviderEnabled(*(void**)(&args)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_IFeedProvider<D>::OnFeedProviderDisabled(winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedProviderDisabledArgs const& args) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProvider)->OnFeedProviderDisabled(*(void**)(&args)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_IFeedProvider<D>::OnFeedEnabled(winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedEnabledArgs const& args) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProvider)->OnFeedEnabled(*(void**)(&args)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_IFeedProvider<D>::OnFeedDisabled(winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedDisabledArgs const& args) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProvider)->OnFeedDisabled(*(void**)(&args)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_IFeedProvider<D>::OnCustomQueryParametersRequested(winrt::Microsoft::Windows::Widgets::Feeds::Providers::CustomQueryParametersRequestedArgs const& args) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProvider)->OnCustomQueryParametersRequested(*(void**)(&args)));
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_IFeedProviderDisabledArgs<D>::FeedProviderDefinitionId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProviderDisabledArgs)->get_FeedProviderDefinitionId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_IFeedProviderEnabledArgs<D>::FeedProviderDefinitionId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProviderEnabledArgs)->get_FeedProviderDefinitionId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_IFeedProviderInfo<D>::FeedProviderDefinitionId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProviderInfo)->get_FeedProviderDefinitionId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Widgets_Feeds_Providers_IFeedProviderInfo<D>::EnabledFeedDefinitionIds() const
    {
        uint32_t value_impl_size{};
        void** value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProviderInfo)->get_EnabledFeedDefinitionIds(&value_impl_size, &value));
        return com_array<hstring>{ value, value_impl_size, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::ICustomQueryParametersRequestedArgs> : produce_base<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::ICustomQueryParametersRequestedArgs>
    {
        int32_t __stdcall get_FeedProviderDefinitionId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FeedProviderDefinitionId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::ICustomQueryParametersUpdateOptions> : produce_base<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::ICustomQueryParametersUpdateOptions>
    {
        int32_t __stdcall get_FeedProviderDefinitionId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FeedProviderDefinitionId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CustomQueryParameters(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().CustomQueryParameters());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::ICustomQueryParametersUpdateOptionsFactory> : produce_base<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::ICustomQueryParametersUpdateOptionsFactory>
    {
        int32_t __stdcall CreateInstance(void* feedProviderDefinitionId, void* customQueryParameters, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Widgets::Feeds::Providers::CustomQueryParametersUpdateOptions>(this->shim().CreateInstance(*reinterpret_cast<hstring const*>(&feedProviderDefinitionId), *reinterpret_cast<hstring const*>(&customQueryParameters)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedDisabledArgs> : produce_base<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedDisabledArgs>
    {
        int32_t __stdcall get_FeedProviderDefinitionId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FeedProviderDefinitionId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_FeedDefinitionId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FeedDefinitionId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedEnabledArgs> : produce_base<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedEnabledArgs>
    {
        int32_t __stdcall get_FeedProviderDefinitionId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FeedProviderDefinitionId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_FeedDefinitionId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FeedDefinitionId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedManager> : produce_base<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedManager>
    {
        int32_t __stdcall GetEnabledFeedProviders(uint32_t* __resultSize, void*** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetEnabledFeedProviders());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetCustomQueryParameters(void* options) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetCustomQueryParameters(*reinterpret_cast<winrt::Microsoft::Windows::Widgets::Feeds::Providers::CustomQueryParametersUpdateOptions const*>(&options));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedManagerStatics> : produce_base<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedManagerStatics>
    {
        int32_t __stdcall GetDefault(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedManager>(this->shim().GetDefault());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProvider> : produce_base<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProvider>
    {
        int32_t __stdcall OnFeedProviderEnabled(void* args) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnFeedProviderEnabled(*reinterpret_cast<winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedProviderEnabledArgs const*>(&args));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall OnFeedProviderDisabled(void* args) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnFeedProviderDisabled(*reinterpret_cast<winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedProviderDisabledArgs const*>(&args));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall OnFeedEnabled(void* args) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnFeedEnabled(*reinterpret_cast<winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedEnabledArgs const*>(&args));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall OnFeedDisabled(void* args) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnFeedDisabled(*reinterpret_cast<winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedDisabledArgs const*>(&args));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall OnCustomQueryParametersRequested(void* args) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnCustomQueryParametersRequested(*reinterpret_cast<winrt::Microsoft::Windows::Widgets::Feeds::Providers::CustomQueryParametersRequestedArgs const*>(&args));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProviderDisabledArgs> : produce_base<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProviderDisabledArgs>
    {
        int32_t __stdcall get_FeedProviderDefinitionId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FeedProviderDefinitionId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProviderEnabledArgs> : produce_base<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProviderEnabledArgs>
    {
        int32_t __stdcall get_FeedProviderDefinitionId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FeedProviderDefinitionId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProviderInfo> : produce_base<D, winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProviderInfo>
    {
        int32_t __stdcall get_FeedProviderDefinitionId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FeedProviderDefinitionId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_EnabledFeedDefinitionIds(uint32_t* __valueSize, void*** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueSize, *value) = detach_abi(this->shim().EnabledFeedDefinitionIds());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Widgets::Feeds::Providers
{
    inline CustomQueryParametersUpdateOptions::CustomQueryParametersUpdateOptions(param::hstring const& feedProviderDefinitionId, param::hstring const& customQueryParameters) :
        CustomQueryParametersUpdateOptions(impl::call_factory<CustomQueryParametersUpdateOptions, ICustomQueryParametersUpdateOptionsFactory>([&](ICustomQueryParametersUpdateOptionsFactory const& f) { return f.CreateInstance(feedProviderDefinitionId, customQueryParameters); }))
    {
    }
    inline auto FeedManager::GetDefault()
    {
        return impl::call_factory_cast<winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedManager(*)(IFeedManagerStatics const&), FeedManager, IFeedManagerStatics>([](IFeedManagerStatics const& f) { return f.GetDefault(); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::ICustomQueryParametersRequestedArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::ICustomQueryParametersUpdateOptions> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::ICustomQueryParametersUpdateOptionsFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedDisabledArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedEnabledArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedManager> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedManagerStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProvider> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProviderDisabledArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProviderEnabledArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::IFeedProviderInfo> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::CustomQueryParametersRequestedArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::CustomQueryParametersUpdateOptions> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedDisabledArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedEnabledArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedManager> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedProviderDisabledArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedProviderEnabledArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Widgets::Feeds::Providers::FeedProviderInfo> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
