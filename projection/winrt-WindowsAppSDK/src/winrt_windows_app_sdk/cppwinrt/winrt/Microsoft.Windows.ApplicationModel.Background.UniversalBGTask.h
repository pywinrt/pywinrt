// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240111.5

#pragma once
#ifndef WINRT_Microsoft_Windows_ApplicationModel_Background_UniversalBGTask_H
#define WINRT_Microsoft_Windows_ApplicationModel_Background_UniversalBGTask_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.240111.5"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.240111.5"
#include "winrt/Microsoft.Windows.ApplicationModel.Background.h"
#include "winrt/impl/Windows.ApplicationModel.Background.2.h"
#include "winrt/impl/Microsoft.Windows.ApplicationModel.Background.UniversalBGTask.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_Background_UniversalBGTask_ITask<D>::Run(winrt::Windows::ApplicationModel::Background::IBackgroundTaskInstance const& taskInstance) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::ApplicationModel::Background::UniversalBGTask::ITask)->Run(*(void**)(&taskInstance)));
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::ApplicationModel::Background::UniversalBGTask::ITask> : produce_base<D, winrt::Microsoft::Windows::ApplicationModel::Background::UniversalBGTask::ITask>
    {
        int32_t __stdcall Run(void* taskInstance) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Run(*reinterpret_cast<winrt::Windows::ApplicationModel::Background::IBackgroundTaskInstance const*>(&taskInstance));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::ApplicationModel::Background::UniversalBGTask
{
    inline Task::Task() :
        Task(impl::call_factory_cast<Task(*)(winrt::Windows::Foundation::IActivationFactory const&), Task>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<Task>(); }))
    {
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::ApplicationModel::Background::UniversalBGTask::ITask> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::ApplicationModel::Background::UniversalBGTask::Task> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
