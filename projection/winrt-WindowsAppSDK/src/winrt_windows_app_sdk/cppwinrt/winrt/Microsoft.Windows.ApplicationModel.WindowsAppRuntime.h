// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_H
#define WINRT_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.250303.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.250303.1"
#include "winrt/impl/Windows.ApplicationModel.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Microsoft.Windows.ApplicationModel.WindowsAppRuntime.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IDeploymentInitializeOptions<D>::ForceDeployment() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ForceDeployment(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions>**)this;
            check_hresult(_winrt_abi_type->get_ForceDeployment(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IDeploymentInitializeOptions<D>::ForceDeployment(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ForceDeployment(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions>**)this;
            check_hresult(_winrt_abi_type->put_ForceDeployment(value));
        }
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IDeploymentInitializeOptions2<D>::OnErrorShowUI() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_OnErrorShowUI(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions2>**)this;
            check_hresult(_winrt_abi_type->get_OnErrorShowUI(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IDeploymentInitializeOptions2<D>::OnErrorShowUI(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_OnErrorShowUI(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions2>**)this;
            check_hresult(_winrt_abi_type->put_OnErrorShowUI(value));
        }
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IDeploymentManagerStatics<D>::GetStatus() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetStatus(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics>**)this;
            check_hresult(_winrt_abi_type->GetStatus(&result));
        }
        return winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IDeploymentManagerStatics<D>::Initialize() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Initialize(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics>**)this;
            check_hresult(_winrt_abi_type->Initialize(&result));
        }
        return winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IDeploymentManagerStatics2<D>::Initialize(winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentInitializeOptions const& deploymentInitializeOptions) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Initialize(*(void**)(&deploymentInitializeOptions), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics2>**)this;
            check_hresult(_winrt_abi_type->Initialize(*(void**)(&deploymentInitializeOptions), &result));
        }
        return winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IDeploymentResult<D>::Status() const
    {
        winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentStatus value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResult>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResult, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResult>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Status(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResult>**)this;
            check_hresult(_winrt_abi_type->get_Status(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IDeploymentResult<D>::ExtendedError() const
    {
        winrt::hresult value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResult>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResult, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResult>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ExtendedError(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResult>**)this;
            check_hresult(_winrt_abi_type->get_ExtendedError(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IDeploymentResultFactory<D>::CreateInstance(winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentStatus const& status, winrt::hresult const& extendedError) const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResultFactory>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResultFactory, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResultFactory>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateInstance(static_cast<int32_t>(status), impl::bind_in(extendedError), &value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResultFactory>**)this;
            check_hresult(_winrt_abi_type->CreateInstance(static_cast<int32_t>(status), impl::bind_in(extendedError), &value));
        }
        return winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IReleaseInfoStatics<D>::Major() const
    {
        uint16_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Major(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics>**)this;
            check_hresult(_winrt_abi_type->get_Major(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IReleaseInfoStatics<D>::Minor() const
    {
        uint16_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Minor(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics>**)this;
            check_hresult(_winrt_abi_type->get_Minor(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IReleaseInfoStatics<D>::Patch() const
    {
        uint16_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Patch(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics>**)this;
            check_hresult(_winrt_abi_type->get_Patch(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IReleaseInfoStatics<D>::VersionTag() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_VersionTag(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics>**)this;
            check_hresult(_winrt_abi_type->get_VersionTag(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IReleaseInfoStatics<D>::AsString() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_AsString(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics>**)this;
            check_hresult(_winrt_abi_type->get_AsString(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IRuntimeCompatibilityOptions<D>::PatchLevel1() const
    {
        winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::WindowsAppRuntimeVersion value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PatchLevel1(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>**)this;
            check_hresult(_winrt_abi_type->get_PatchLevel1(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IRuntimeCompatibilityOptions<D>::PatchLevel1(winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::WindowsAppRuntimeVersion const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PatchLevel1(impl::bind_in(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>**)this;
            check_hresult(_winrt_abi_type->put_PatchLevel1(impl::bind_in(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IRuntimeCompatibilityOptions<D>::PatchLevel2() const
    {
        winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::WindowsAppRuntimeVersion value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PatchLevel2(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>**)this;
            check_hresult(_winrt_abi_type->get_PatchLevel2(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IRuntimeCompatibilityOptions<D>::PatchLevel2(winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::WindowsAppRuntimeVersion const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PatchLevel2(impl::bind_in(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>**)this;
            check_hresult(_winrt_abi_type->put_PatchLevel2(impl::bind_in(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IRuntimeCompatibilityOptions<D>::DisabledChanges() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DisabledChanges(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>**)this;
            check_hresult(_winrt_abi_type->get_DisabledChanges(&value));
        }
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::RuntimeCompatibilityChange>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IRuntimeCompatibilityOptions<D>::Apply() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Apply());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>**)this;
            check_hresult(_winrt_abi_type->Apply());
        }
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IRuntimeInfoStatics<D>::Version() const
    {
        winrt::Windows::ApplicationModel::PackageVersion value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeInfoStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeInfoStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeInfoStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Version(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeInfoStatics>**)this;
            check_hresult(_winrt_abi_type->get_Version(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_IRuntimeInfoStatics<D>::AsString() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeInfoStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeInfoStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeInfoStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_AsString(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeInfoStatics>**)this;
            check_hresult(_winrt_abi_type->get_AsString(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions> : produce_base<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions>
    {
        int32_t __stdcall get_ForceDeployment(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ForceDeployment());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ForceDeployment(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ForceDeployment(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions2> : produce_base<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions2>
    {
        int32_t __stdcall get_OnErrorShowUI(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().OnErrorShowUI());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_OnErrorShowUI(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnErrorShowUI(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics> : produce_base<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics>
    {
        int32_t __stdcall GetStatus(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult>(this->shim().GetStatus());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Initialize(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult>(this->shim().Initialize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics2> : produce_base<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics2>
    {
        int32_t __stdcall Initialize(void* deploymentInitializeOptions, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult>(this->shim().Initialize(*reinterpret_cast<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentInitializeOptions const*>(&deploymentInitializeOptions)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResult> : produce_base<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResult>
    {
        int32_t __stdcall get_Status(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentStatus>(this->shim().Status());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExtendedError(winrt::hresult* value) noexcept final try
        {
            zero_abi<winrt::hresult>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::hresult>(this->shim().ExtendedError());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResultFactory> : produce_base<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResultFactory>
    {
        int32_t __stdcall CreateInstance(int32_t status, winrt::hresult extendedError, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult>(this->shim().CreateInstance(*reinterpret_cast<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentStatus const*>(&status), *reinterpret_cast<winrt::hresult const*>(&extendedError)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics> : produce_base<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics>
    {
        int32_t __stdcall get_Major(uint16_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint16_t>(this->shim().Major());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Minor(uint16_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint16_t>(this->shim().Minor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Patch(uint16_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint16_t>(this->shim().Patch());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_VersionTag(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().VersionTag());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AsString(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().AsString());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions> : produce_base<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions>
    {
        int32_t __stdcall get_PatchLevel1(struct struct_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_WindowsAppRuntimeVersion* value) noexcept final try
        {
            zero_abi<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::WindowsAppRuntimeVersion>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::WindowsAppRuntimeVersion>(this->shim().PatchLevel1());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PatchLevel1(struct struct_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_WindowsAppRuntimeVersion value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PatchLevel1(*reinterpret_cast<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::WindowsAppRuntimeVersion const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PatchLevel2(struct struct_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_WindowsAppRuntimeVersion* value) noexcept final try
        {
            zero_abi<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::WindowsAppRuntimeVersion>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::WindowsAppRuntimeVersion>(this->shim().PatchLevel2());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PatchLevel2(struct struct_Microsoft_Windows_ApplicationModel_WindowsAppRuntime_WindowsAppRuntimeVersion value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PatchLevel2(*reinterpret_cast<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::WindowsAppRuntimeVersion const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DisabledChanges(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::RuntimeCompatibilityChange>>(this->shim().DisabledChanges());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Apply() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Apply();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeInfoStatics> : produce_base<D, winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeInfoStatics>
    {
        int32_t __stdcall get_Version(struct struct_Windows_ApplicationModel_PackageVersion* value) noexcept final try
        {
            zero_abi<winrt::Windows::ApplicationModel::PackageVersion>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::ApplicationModel::PackageVersion>(this->shim().Version());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AsString(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().AsString());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime
{
    inline DeploymentInitializeOptions::DeploymentInitializeOptions() :
        DeploymentInitializeOptions(impl::call_factory_cast<DeploymentInitializeOptions(*)(winrt::Windows::Foundation::IActivationFactory const&), DeploymentInitializeOptions>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<DeploymentInitializeOptions>(); }))
    {
    }
    inline auto DeploymentManager::GetStatus()
    {
        return impl::call_factory_cast<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult(*)(IDeploymentManagerStatics const&), DeploymentManager, IDeploymentManagerStatics>([](IDeploymentManagerStatics const& f) { return f.GetStatus(); });
    }
    inline auto DeploymentManager::Initialize()
    {
        return impl::call_factory_cast<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult(*)(IDeploymentManagerStatics const&), DeploymentManager, IDeploymentManagerStatics>([](IDeploymentManagerStatics const& f) { return f.Initialize(); });
    }
    inline auto DeploymentManager::Initialize(winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentInitializeOptions const& deploymentInitializeOptions)
    {
        return impl::call_factory<DeploymentManager, IDeploymentManagerStatics2>([&](IDeploymentManagerStatics2 const& f) { return f.Initialize(deploymentInitializeOptions); });
    }
    inline DeploymentResult::DeploymentResult(winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentStatus const& status, winrt::hresult const& extendedError) :
        DeploymentResult(impl::call_factory<DeploymentResult, IDeploymentResultFactory>([&](IDeploymentResultFactory const& f) { return f.CreateInstance(status, extendedError); }))
    {
    }
    inline auto ReleaseInfo::Major()
    {
        return impl::call_factory_cast<uint16_t(*)(IReleaseInfoStatics const&), ReleaseInfo, IReleaseInfoStatics>([](IReleaseInfoStatics const& f) { return f.Major(); });
    }
    inline auto ReleaseInfo::Minor()
    {
        return impl::call_factory_cast<uint16_t(*)(IReleaseInfoStatics const&), ReleaseInfo, IReleaseInfoStatics>([](IReleaseInfoStatics const& f) { return f.Minor(); });
    }
    inline auto ReleaseInfo::Patch()
    {
        return impl::call_factory_cast<uint16_t(*)(IReleaseInfoStatics const&), ReleaseInfo, IReleaseInfoStatics>([](IReleaseInfoStatics const& f) { return f.Patch(); });
    }
    inline auto ReleaseInfo::VersionTag()
    {
        return impl::call_factory_cast<hstring(*)(IReleaseInfoStatics const&), ReleaseInfo, IReleaseInfoStatics>([](IReleaseInfoStatics const& f) { return f.VersionTag(); });
    }
    inline auto ReleaseInfo::AsString()
    {
        return impl::call_factory_cast<hstring(*)(IReleaseInfoStatics const&), ReleaseInfo, IReleaseInfoStatics>([](IReleaseInfoStatics const& f) { return f.AsString(); });
    }
    inline RuntimeCompatibilityOptions::RuntimeCompatibilityOptions() :
        RuntimeCompatibilityOptions(impl::call_factory_cast<RuntimeCompatibilityOptions(*)(winrt::Windows::Foundation::IActivationFactory const&), RuntimeCompatibilityOptions>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<RuntimeCompatibilityOptions>(); }))
    {
    }
    inline auto RuntimeInfo::Version()
    {
        return impl::call_factory_cast<winrt::Windows::ApplicationModel::PackageVersion(*)(IRuntimeInfoStatics const&), RuntimeInfo, IRuntimeInfoStatics>([](IRuntimeInfoStatics const& f) { return f.Version(); });
    }
    inline auto RuntimeInfo::AsString()
    {
        return impl::call_factory_cast<hstring(*)(IRuntimeInfoStatics const&), RuntimeInfo, IRuntimeInfoStatics>([](IRuntimeInfoStatics const& f) { return f.AsString(); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentInitializeOptions2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentManagerStatics2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IDeploymentResultFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IReleaseInfoStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeCompatibilityOptions> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::IRuntimeInfoStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentInitializeOptions> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentManager> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::DeploymentResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::ReleaseInfo> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::RuntimeCompatibilityOptions> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::ApplicationModel::WindowsAppRuntime::RuntimeInfo> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
