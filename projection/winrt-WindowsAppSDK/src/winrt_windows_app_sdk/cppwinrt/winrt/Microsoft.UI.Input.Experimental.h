// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_UI_Input_Experimental_H
#define WINRT_Microsoft_UI_Input_Experimental_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.250303.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.250303.1"
#include "winrt/Microsoft.UI.Input.h"
#include "winrt/impl/Microsoft.UI.Input.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Microsoft.UI.Input.Experimental.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics<D>::GetCurrentPoint(uint32_t pointerId) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetCurrentPoint(pointerId, &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>**)this;
            check_hresult(_winrt_abi_type->GetCurrentPoint(pointerId, &result));
        }
        return winrt::Microsoft::UI::Input::PointerPoint{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics<D>::GetCurrentPointTransformed(uint32_t pointerId, winrt::Microsoft::UI::Input::IPointerPointTransform const& transform) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetCurrentPointTransformed(pointerId, *(void**)(&transform), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>**)this;
            check_hresult(_winrt_abi_type->GetCurrentPointTransformed(pointerId, *(void**)(&transform), &result));
        }
        return winrt::Microsoft::UI::Input::PointerPoint{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics<D>::GetIntermediatePoints(uint32_t pointerId) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetIntermediatePoints(pointerId, &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>**)this;
            check_hresult(_winrt_abi_type->GetIntermediatePoints(pointerId, &result));
        }
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::PointerPoint>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics<D>::GetIntermediatePointsTransformed(uint32_t pointerId, winrt::Microsoft::UI::Input::IPointerPointTransform const& transform) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetIntermediatePointsTransformed(pointerId, *(void**)(&transform), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>**)this;
            check_hresult(_winrt_abi_type->GetIntermediatePointsTransformed(pointerId, *(void**)(&transform), &result));
        }
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::PointerPoint>{ result, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpInputSite> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpInputSite>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>
    {
        int32_t __stdcall GetCurrentPoint(uint32_t pointerId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::PointerPoint>(this->shim().GetCurrentPoint(pointerId));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCurrentPointTransformed(uint32_t pointerId, void* transform, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::PointerPoint>(this->shim().GetCurrentPointTransformed(pointerId, *reinterpret_cast<winrt::Microsoft::UI::Input::IPointerPointTransform const*>(&transform)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIntermediatePoints(uint32_t pointerId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::PointerPoint>>(this->shim().GetIntermediatePoints(pointerId));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIntermediatePointsTransformed(uint32_t pointerId, void* transform, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::PointerPoint>>(this->shim().GetIntermediatePointsTransformed(pointerId, *reinterpret_cast<winrt::Microsoft::UI::Input::IPointerPointTransform const*>(&transform)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Input::Experimental
{
    inline auto ExpPointerPoint::GetCurrentPoint(uint32_t pointerId)
    {
        return impl::call_factory<ExpPointerPoint, IExpPointerPointStatics>([&](IExpPointerPointStatics const& f) { return f.GetCurrentPoint(pointerId); });
    }
    inline auto ExpPointerPoint::GetCurrentPointTransformed(uint32_t pointerId, winrt::Microsoft::UI::Input::IPointerPointTransform const& transform)
    {
        return impl::call_factory<ExpPointerPoint, IExpPointerPointStatics>([&](IExpPointerPointStatics const& f) { return f.GetCurrentPointTransformed(pointerId, transform); });
    }
    inline auto ExpPointerPoint::GetIntermediatePoints(uint32_t pointerId)
    {
        return impl::call_factory<ExpPointerPoint, IExpPointerPointStatics>([&](IExpPointerPointStatics const& f) { return f.GetIntermediatePoints(pointerId); });
    }
    inline auto ExpPointerPoint::GetIntermediatePointsTransformed(uint32_t pointerId, winrt::Microsoft::UI::Input::IPointerPointTransform const& transform)
    {
        return impl::call_factory<ExpPointerPoint, IExpPointerPointStatics>([&](IExpPointerPointStatics const& f) { return f.GetIntermediatePointsTransformed(pointerId, transform); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpInputSite> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpInputSite> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
