// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230706.1

#pragma once
#ifndef WINRT_Microsoft_UI_Composition_SystemBackdrops_H
#define WINRT_Microsoft_UI_Composition_SystemBackdrops_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.230706.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.230706.1"
#include "winrt/Microsoft.UI.Composition.h"
#include "winrt/impl/Microsoft.UI.2.h"
#include "winrt/impl/Microsoft.UI.Composition.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.UI.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Core.2.h"
#include "winrt/impl/Microsoft.UI.Composition.SystemBackdrops.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController<D>::FallbackColor() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController)->get_FallbackColor(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController<D>::FallbackColor(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController)->put_FallbackColor(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController<D>::LuminosityOpacity() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController)->get_LuminosityOpacity(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController<D>::LuminosityOpacity(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController)->put_LuminosityOpacity(value));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController<D>::TintColor() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController)->get_TintColor(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController<D>::TintColor(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController)->put_TintColor(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController<D>::TintOpacity() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController)->get_TintOpacity(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController<D>::TintOpacity(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController)->put_TintOpacity(value));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController2<D>::ResetProperties() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController2)->ResetProperties());
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController3<D>::Kind() const
    {
        winrt::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicKind value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController3)->get_Kind(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController3<D>::Kind(winrt::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicKind const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController3)->put_Kind(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicControllerStatics<D>::IsSupported() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicControllerStatics)->IsSupported(&result));
        return result;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IMicaController<D>::FallbackColor() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaController)->get_FallbackColor(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IMicaController<D>::FallbackColor(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaController)->put_FallbackColor(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IMicaController<D>::LuminosityOpacity() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaController)->get_LuminosityOpacity(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IMicaController<D>::LuminosityOpacity(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaController)->put_LuminosityOpacity(value));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IMicaController<D>::TintColor() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaController)->get_TintColor(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IMicaController<D>::TintColor(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaController)->put_TintColor(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IMicaController<D>::TintOpacity() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaController)->get_TintOpacity(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IMicaController<D>::TintOpacity(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaController)->put_TintOpacity(value));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IMicaController2<D>::Kind() const
    {
        winrt::Microsoft::UI::Composition::SystemBackdrops::MicaKind value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaController2)->get_Kind(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IMicaController2<D>::Kind(winrt::Microsoft::UI::Composition::SystemBackdrops::MicaKind const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaController2)->put_Kind(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IMicaController2<D>::ResetProperties() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaController2)->ResetProperties());
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_IMicaControllerStatics<D>::IsSupported() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaControllerStatics)->IsSupported(&result));
        return result;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropConfiguration<D>::HighContrastBackgroundColor() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropConfiguration)->get_HighContrastBackgroundColor(&value));
        return winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropConfiguration<D>::HighContrastBackgroundColor(winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color> const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropConfiguration)->put_HighContrastBackgroundColor(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropConfiguration<D>::IsHighContrast() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropConfiguration)->get_IsHighContrast(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropConfiguration<D>::IsHighContrast(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropConfiguration)->put_IsHighContrast(value));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropConfiguration<D>::IsInputActive() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropConfiguration)->get_IsInputActive(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropConfiguration<D>::IsInputActive(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropConfiguration)->put_IsInputActive(value));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropConfiguration<D>::Theme() const
    {
        winrt::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropTheme value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropConfiguration)->get_Theme(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropConfiguration<D>::Theme(winrt::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropTheme const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropConfiguration)->put_Theme(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropController<D>::SetTarget(winrt::Microsoft::UI::WindowId const& windowId, winrt::Windows::UI::Composition::CompositionTarget const& desktopWindowTarget) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropController)->SetTargetWithWindowId(impl::bind_in(windowId), *(void**)(&desktopWindowTarget), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropController<D>::SetTarget(winrt::Windows::UI::Core::CoreWindow const& coreWindow, winrt::Windows::UI::Composition::CompositionTarget const& compositionTarget) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropController)->SetTargetWithCoreWindow(*(void**)(&coreWindow), *(void**)(&compositionTarget), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets<D>::State() const
    {
        winrt::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropState value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets)->get_State(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets<D>::AddSystemBackdropTarget(winrt::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop const& systemBackdropTarget) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets)->AddSystemBackdropTarget(*(void**)(&systemBackdropTarget), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets<D>::RemoveAllSystemBackdropTargets() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets)->RemoveAllSystemBackdropTargets());
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets<D>::RemoveSystemBackdropTarget(winrt::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop const& systemBackdropTarget) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets)->RemoveSystemBackdropTarget(*(void**)(&systemBackdropTarget), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets<D>::SetSystemBackdropConfiguration(winrt::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration const& configuration) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets)->SetSystemBackdropConfiguration(*(void**)(&configuration)));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets<D>::StateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets)->add_StateChanged(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets<D>::StateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, StateChanged_revoker>(this, StateChanged(handler));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets<D>::StateChanged(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets)->remove_StateChanged(impl::bind_in(token));
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController> : produce_base<D, winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController>
    {
        int32_t __stdcall get_FallbackColor(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().FallbackColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_FallbackColor(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FallbackColor(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LuminosityOpacity(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().LuminosityOpacity());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LuminosityOpacity(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LuminosityOpacity(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TintColor(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().TintColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TintColor(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TintColor(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TintOpacity(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().TintOpacity());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TintOpacity(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TintOpacity(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController2> : produce_base<D, winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController2>
    {
        int32_t __stdcall ResetProperties() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ResetProperties();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController3> : produce_base<D, winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController3>
    {
        int32_t __stdcall get_Kind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicKind>(this->shim().Kind());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Kind(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Kind(*reinterpret_cast<winrt::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicKind const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicControllerStatics> : produce_base<D, winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicControllerStatics>
    {
        int32_t __stdcall IsSupported(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IsSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaController> : produce_base<D, winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaController>
    {
        int32_t __stdcall get_FallbackColor(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().FallbackColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_FallbackColor(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FallbackColor(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LuminosityOpacity(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().LuminosityOpacity());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_LuminosityOpacity(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LuminosityOpacity(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TintColor(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().TintColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TintColor(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TintColor(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TintOpacity(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().TintOpacity());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TintOpacity(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TintOpacity(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaController2> : produce_base<D, winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaController2>
    {
        int32_t __stdcall get_Kind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Composition::SystemBackdrops::MicaKind>(this->shim().Kind());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Kind(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Kind(*reinterpret_cast<winrt::Microsoft::UI::Composition::SystemBackdrops::MicaKind const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ResetProperties() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ResetProperties();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaControllerStatics> : produce_base<D, winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaControllerStatics>
    {
        int32_t __stdcall IsSupported(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IsSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropConfiguration> : produce_base<D, winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropConfiguration>
    {
        int32_t __stdcall get_HighContrastBackgroundColor(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color>>(this->shim().HighContrastBackgroundColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HighContrastBackgroundColor(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HighContrastBackgroundColor(*reinterpret_cast<winrt::Windows::Foundation::IReference<winrt::Windows::UI::Color> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsHighContrast(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsHighContrast());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsHighContrast(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsHighContrast(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsInputActive(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsInputActive());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsInputActive(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsInputActive(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Theme(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropTheme>(this->shim().Theme());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Theme(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Theme(*reinterpret_cast<winrt::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropTheme const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropController> : produce_base<D, winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropController>
    {
        int32_t __stdcall SetTargetWithWindowId(struct struct_Microsoft_UI_WindowId windowId, void* desktopWindowTarget, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().SetTarget(*reinterpret_cast<winrt::Microsoft::UI::WindowId const*>(&windowId), *reinterpret_cast<winrt::Windows::UI::Composition::CompositionTarget const*>(&desktopWindowTarget)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetTargetWithCoreWindow(void* coreWindow, void* compositionTarget, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().SetTarget(*reinterpret_cast<winrt::Windows::UI::Core::CoreWindow const*>(&coreWindow), *reinterpret_cast<winrt::Windows::UI::Composition::CompositionTarget const*>(&compositionTarget)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets> : produce_base<D, winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets>
    {
        int32_t __stdcall get_State(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropState>(this->shim().State());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AddSystemBackdropTarget(void* systemBackdropTarget, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().AddSystemBackdropTarget(*reinterpret_cast<winrt::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop const*>(&systemBackdropTarget)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveAllSystemBackdropTargets() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveAllSystemBackdropTargets();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveSystemBackdropTarget(void* systemBackdropTarget, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().RemoveSystemBackdropTarget(*reinterpret_cast<winrt::Microsoft::UI::Composition::ICompositionSupportsSystemBackdrop const*>(&systemBackdropTarget)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetSystemBackdropConfiguration(void* configuration) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetSystemBackdropConfiguration(*reinterpret_cast<winrt::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration const*>(&configuration));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_StateChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().StateChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_StateChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StateChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition::SystemBackdrops
{
    inline DesktopAcrylicController::DesktopAcrylicController() :
        DesktopAcrylicController(impl::call_factory_cast<DesktopAcrylicController(*)(winrt::Windows::Foundation::IActivationFactory const&), DesktopAcrylicController>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<DesktopAcrylicController>(); }))
    {
    }
    inline auto DesktopAcrylicController::IsSupported()
    {
        return impl::call_factory_cast<bool(*)(IDesktopAcrylicControllerStatics const&), DesktopAcrylicController, IDesktopAcrylicControllerStatics>([](IDesktopAcrylicControllerStatics const& f) { return f.IsSupported(); });
    }
    inline MicaController::MicaController() :
        MicaController(impl::call_factory_cast<MicaController(*)(winrt::Windows::Foundation::IActivationFactory const&), MicaController>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<MicaController>(); }))
    {
    }
    inline auto MicaController::IsSupported()
    {
        return impl::call_factory_cast<bool(*)(IMicaControllerStatics const&), MicaController, IMicaControllerStatics>([](IMicaControllerStatics const& f) { return f.IsSupported(); });
    }
    inline SystemBackdropConfiguration::SystemBackdropConfiguration() :
        SystemBackdropConfiguration(impl::call_factory_cast<SystemBackdropConfiguration(*)(winrt::Windows::Foundation::IActivationFactory const&), SystemBackdropConfiguration>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<SystemBackdropConfiguration>(); }))
    {
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicController3> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::SystemBackdrops::IDesktopAcrylicControllerStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaController> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaController2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::SystemBackdrops::IMicaControllerStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropConfiguration> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropController> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::SystemBackdrops::ISystemBackdropControllerWithTargets> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::SystemBackdrops::DesktopAcrylicController> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::SystemBackdrops::MicaController> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::SystemBackdrops::SystemBackdropConfiguration> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
