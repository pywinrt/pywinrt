# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.microsoft.ui.xaml as microsoft_ui_xaml
import winrt.windows.foundation as windows_foundation
import winrt.windows.graphics.imaging as windows_graphics_imaging
import winrt.windows.storage.streams as windows_storage_streams

from winrt.microsoft.ui.xaml.media.imaging import BitmapCreateOptions, DecodePixelType, SvgImageSourceLoadStatus
from winrt.microsoft.ui.xaml.media.imaging import DownloadProgressEventHandler

Self = typing.TypeVar('Self')

@typing.final
class BitmapImage_Static(type):
    @_property
    def auto_play_property(cls) -> microsoft_ui_xaml.DependencyProperty: ...
    @_property
    def create_options_property(cls) -> microsoft_ui_xaml.DependencyProperty: ...
    @_property
    def decode_pixel_height_property(cls) -> microsoft_ui_xaml.DependencyProperty: ...
    @_property
    def decode_pixel_type_property(cls) -> microsoft_ui_xaml.DependencyProperty: ...
    @_property
    def decode_pixel_width_property(cls) -> microsoft_ui_xaml.DependencyProperty: ...
    @_property
    def is_animated_bitmap_property(cls) -> microsoft_ui_xaml.DependencyProperty: ...
    @_property
    def is_playing_property(cls) -> microsoft_ui_xaml.DependencyProperty: ...
    @_property
    def uri_source_property(cls) -> microsoft_ui_xaml.DependencyProperty: ...

@typing.final
class BitmapImage(winrt.system.Object, metaclass=BitmapImage_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BitmapImage: ...
    @typing.overload
    def __new__(cls: typing.Type[BitmapImage], uri_source: windows_foundation.Uri) -> BitmapImage: ...
    @typing.overload
    def __new__(cls: typing.Type[BitmapImage]) -> BitmapImage: ...
    def play(self) -> None: ...
    def stop(self) -> None: ...
    def add_download_progress(self, handler: DownloadProgressEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_download_progress(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_image_failed(self, handler: microsoft_ui_xaml.ExceptionRoutedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_image_failed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_image_opened(self, handler: microsoft_ui_xaml.RoutedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_image_opened(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def uri_source(self) -> windows_foundation.Uri: ...
    @uri_source.setter
    def uri_source(self, value: windows_foundation.Uri) -> None: ...
    @_property
    def decode_pixel_width(self) -> winrt.system.Int32: ...
    @decode_pixel_width.setter
    def decode_pixel_width(self, value: winrt.system.Int32) -> None: ...
    @_property
    def decode_pixel_type(self) -> DecodePixelType: ...
    @decode_pixel_type.setter
    def decode_pixel_type(self, value: DecodePixelType) -> None: ...
    @_property
    def decode_pixel_height(self) -> winrt.system.Int32: ...
    @decode_pixel_height.setter
    def decode_pixel_height(self, value: winrt.system.Int32) -> None: ...
    @_property
    def create_options(self) -> BitmapCreateOptions: ...
    @create_options.setter
    def create_options(self, value: BitmapCreateOptions) -> None: ...
    @_property
    def auto_play(self) -> bool: ...
    @auto_play.setter
    def auto_play(self, value: bool) -> None: ...
    @_property
    def is_animated_bitmap(self) -> bool: ...
    @_property
    def is_playing(self) -> bool: ...

class BitmapSource_Static(type):
    @_property
    def pixel_height_property(cls) -> microsoft_ui_xaml.DependencyProperty: ...
    @_property
    def pixel_width_property(cls) -> microsoft_ui_xaml.DependencyProperty: ...

class BitmapSource(winrt.system.Object, metaclass=BitmapSource_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BitmapSource: ...
    def set_source(self, stream_source: windows_storage_streams.IRandomAccessStream, /) -> None: ...
    def set_source_async(self, stream_source: windows_storage_streams.IRandomAccessStream, /) -> windows_foundation.IAsyncAction: ...
    @_property
    def pixel_height(self) -> winrt.system.Int32: ...
    @_property
    def pixel_width(self) -> winrt.system.Int32: ...

@typing.final
class DownloadProgressEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DownloadProgressEventArgs: ...
    @_property
    def progress(self) -> winrt.system.Int32: ...
    @progress.setter
    def progress(self, value: winrt.system.Int32) -> None: ...

@typing.final
class RenderTargetBitmap_Static(type):
    @_property
    def pixel_height_property(cls) -> microsoft_ui_xaml.DependencyProperty: ...
    @_property
    def pixel_width_property(cls) -> microsoft_ui_xaml.DependencyProperty: ...

@typing.final
class RenderTargetBitmap(winrt.system.Object, metaclass=RenderTargetBitmap_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RenderTargetBitmap: ...
    def __new__(cls: typing.Type[RenderTargetBitmap]) -> RenderTargetBitmap: ...
    def get_pixels_async(self) -> windows_foundation.IAsyncOperation[windows_storage_streams.IBuffer]: ...
    def render_async(self, element: microsoft_ui_xaml.UIElement, /) -> windows_foundation.IAsyncAction: ...
    def render_to_size_async(self, element: microsoft_ui_xaml.UIElement, scaled_width: winrt.system.Int32, scaled_height: winrt.system.Int32, /) -> windows_foundation.IAsyncAction: ...
    @_property
    def pixel_height(self) -> winrt.system.Int32: ...
    @_property
    def pixel_width(self) -> winrt.system.Int32: ...

@typing.final
class SoftwareBitmapSource(windows_foundation.IClosable, winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SoftwareBitmapSource: ...
    def __new__(cls: typing.Type[SoftwareBitmapSource]) -> SoftwareBitmapSource: ...
    def close(self) -> None: ...
    def set_bitmap_async(self, software_bitmap: windows_graphics_imaging.SoftwareBitmap, /) -> windows_foundation.IAsyncAction: ...

class SurfaceImageSource_Static(type):
    pass

class SurfaceImageSource(winrt.system.Object, metaclass=SurfaceImageSource_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SurfaceImageSource: ...
    @typing.overload
    def __new__(cls: typing.Type[SurfaceImageSource], pixel_width: winrt.system.Int32, pixel_height: winrt.system.Int32) -> SurfaceImageSource: ...
    @typing.overload
    def __new__(cls: typing.Type[SurfaceImageSource], pixel_width: winrt.system.Int32, pixel_height: winrt.system.Int32, is_opaque: bool) -> SurfaceImageSource: ...

class SvgImageSource_Static(type):
    @_property
    def rasterize_pixel_height_property(cls) -> microsoft_ui_xaml.DependencyProperty: ...
    @_property
    def rasterize_pixel_width_property(cls) -> microsoft_ui_xaml.DependencyProperty: ...
    @_property
    def uri_source_property(cls) -> microsoft_ui_xaml.DependencyProperty: ...

class SvgImageSource(winrt.system.Object, metaclass=SvgImageSource_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SvgImageSource: ...
    @typing.overload
    def __new__(cls: typing.Type[SvgImageSource]) -> SvgImageSource: ...
    @typing.overload
    def __new__(cls: typing.Type[SvgImageSource], uri_source: windows_foundation.Uri) -> SvgImageSource: ...
    def set_source_async(self, stream_source: windows_storage_streams.IRandomAccessStream, /) -> windows_foundation.IAsyncOperation[SvgImageSourceLoadStatus]: ...
    def add_open_failed(self, handler: windows_foundation.TypedEventHandler[SvgImageSource, SvgImageSourceFailedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_open_failed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_opened(self, handler: windows_foundation.TypedEventHandler[SvgImageSource, SvgImageSourceOpenedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_opened(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def uri_source(self) -> windows_foundation.Uri: ...
    @uri_source.setter
    def uri_source(self, value: windows_foundation.Uri) -> None: ...
    @_property
    def rasterize_pixel_width(self) -> winrt.system.Double: ...
    @rasterize_pixel_width.setter
    def rasterize_pixel_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def rasterize_pixel_height(self) -> winrt.system.Double: ...
    @rasterize_pixel_height.setter
    def rasterize_pixel_height(self, value: winrt.system.Double) -> None: ...

@typing.final
class SvgImageSourceFailedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SvgImageSourceFailedEventArgs: ...
    @_property
    def status(self) -> SvgImageSourceLoadStatus: ...

@typing.final
class SvgImageSourceOpenedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SvgImageSourceOpenedEventArgs: ...

@typing.final
class VirtualSurfaceImageSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VirtualSurfaceImageSource: ...
    @typing.overload
    def __new__(cls: typing.Type[VirtualSurfaceImageSource], pixel_width: winrt.system.Int32, pixel_height: winrt.system.Int32) -> VirtualSurfaceImageSource: ...
    @typing.overload
    def __new__(cls: typing.Type[VirtualSurfaceImageSource], pixel_width: winrt.system.Int32, pixel_height: winrt.system.Int32, is_opaque: bool) -> VirtualSurfaceImageSource: ...

@typing.final
class WriteableBitmap(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WriteableBitmap: ...
    def __new__(cls: typing.Type[WriteableBitmap], pixel_width: winrt.system.Int32, pixel_height: winrt.system.Int32) -> WriteableBitmap: ...
    def invalidate(self) -> None: ...
    @_property
    def pixel_buffer(self) -> windows_storage_streams.IBuffer: ...

class XamlRenderingBackgroundTask_Static(type):
    pass

class XamlRenderingBackgroundTask(winrt.system.Object, metaclass=XamlRenderingBackgroundTask_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XamlRenderingBackgroundTask: ...

