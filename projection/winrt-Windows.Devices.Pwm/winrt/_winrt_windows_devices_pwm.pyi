# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.devices.pwm.provider
import winrt.windows.foundation
import winrt.windows.foundation.collections

from winrt.windows.devices.pwm import PwmPulsePolarity

Self = typing.TypeVar('Self')

@typing.final
class PwmController_Static(type):
    def from_id_async(cls, device_id: str, /) -> winrt.windows.foundation.IAsyncOperation[PwmController]: ...
    def get_controllers_async(cls, provider: typing.Optional[winrt.windows.devices.pwm.provider.IPwmProvider], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[PwmController]]: ...
    def get_default_async(cls) -> winrt.windows.foundation.IAsyncOperation[PwmController]: ...
    @typing.overload
    def get_device_selector(cls) -> str: ...
    @typing.overload
    def get_device_selector(cls, friendly_name: str, /) -> str: ...

@typing.final
class PwmController(winrt.system.Object, metaclass=PwmController_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PwmController: ...
    def open_pin(self, pin_number: winrt.system.Int32, /) -> typing.Optional[PwmPin]: ...
    def set_desired_frequency(self, desired_frequency: winrt.system.Double, /) -> winrt.system.Double: ...
    @_property
    def actual_frequency(self) -> winrt.system.Double: ...
    @_property
    def max_frequency(self) -> winrt.system.Double: ...
    @_property
    def min_frequency(self) -> winrt.system.Double: ...
    @_property
    def pin_count(self) -> winrt.system.Int32: ...

@typing.final
class PwmPin(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PwmPin: ...
    def close(self) -> None: ...
    def get_active_duty_cycle_percentage(self) -> winrt.system.Double: ...
    def set_active_duty_cycle_percentage(self, duty_cycle_percentage: winrt.system.Double, /) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    @_property
    def polarity(self) -> PwmPulsePolarity: ...
    @polarity.setter
    def polarity(self, value: PwmPulsePolarity) -> None: ...
    @_property
    def controller(self) -> typing.Optional[PwmController]: ...
    @_property
    def is_started(self) -> bool: ...

