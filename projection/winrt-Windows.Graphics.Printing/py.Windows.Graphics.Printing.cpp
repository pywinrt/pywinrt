// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Graphics.Printing.h"


namespace py::cpp::Windows::Graphics::Printing
{
    // ----- PrintManager class --------------------

    static PyObject* _new_PrintManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintManager>::type_name);
        return nullptr;
    }

    static void _dealloc_PrintManager(py::wrapper::Windows::Graphics::Printing::PrintManager* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintManager_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintManager", L"GetForCurrentView", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Graphics::Printing::PrintManager::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintManager_IsSupported(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintManager", L"IsSupported", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Graphics::Printing::PrintManager::IsSupported());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintManager_ShowPrintUIAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintManager", L"ShowPrintUIAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Graphics::Printing::PrintManager::ShowPrintUIAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintManager_add_PrintTaskRequested(py::wrapper::Windows::Graphics::Printing::PrintManager* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Printing.PrintManager", L"PrintTaskRequested"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Printing::PrintManager, winrt::Windows::Graphics::Printing::PrintTaskRequestedEventArgs>>(arg);

            return py::convert(self->obj.PrintTaskRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintManager_remove_PrintTaskRequested(py::wrapper::Windows::Graphics::Printing::PrintManager* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Printing.PrintManager", L"PrintTaskRequested"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PrintTaskRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintManager>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintManager[] = {
        { "add_print_task_requested", reinterpret_cast<PyCFunction>(PrintManager_add_PrintTaskRequested), METH_O, nullptr },
        { "remove_print_task_requested", reinterpret_cast<PyCFunction>(PrintManager_remove_PrintTaskRequested), METH_O, nullptr },
        { "_assign_array_", _assign_array_PrintManager, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintManager), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintManager[] = {
        { }
    };

    static PyType_Slot _type_slots_PrintManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintManager) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintManager) },
        { },
    };

    static PyType_Spec type_spec_PrintManager =
    {
        "winrt._winrt_windows_graphics_printing.PrintManager",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintManager
    };

    static PyGetSetDef getset_PrintManager_Static[] = {
        { }
    };

    static PyMethodDef methods_PrintManager_Static[] = {
        { "get_for_current_view", reinterpret_cast<PyCFunction>(PrintManager_GetForCurrentView), METH_VARARGS, nullptr },
        { "is_supported", reinterpret_cast<PyCFunction>(PrintManager_IsSupported), METH_VARARGS, nullptr },
        { "show_print_u_i_async", reinterpret_cast<PyCFunction>(PrintManager_ShowPrintUIAsync), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_PrintManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_PrintManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_PrintManager_Static) },
        { }
    };

    static PyType_Spec type_spec_PrintManager_Static =
    {
        "winrt._winrt_windows_graphics_printing.PrintManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_PrintManager_Static
    };

    // ----- PrintPageInfo class --------------------

    static PyObject* _new_PrintPageInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Graphics::Printing::PrintPageInfo instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PrintPageInfo(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintPageInfo_get_PageSize(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageInfo", L"PageSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageInfo_put_PageSize(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageInfo", L"PageSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Size>(arg);

            self->obj.PageSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageInfo_get_Orientation(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageInfo", L"Orientation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Orientation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageInfo_put_Orientation(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageInfo", L"Orientation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintOrientation>(arg);

            self->obj.Orientation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageInfo_get_MediaSize(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageInfo", L"MediaSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MediaSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageInfo_put_MediaSize(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageInfo", L"MediaSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintMediaSize>(arg);

            self->obj.MediaSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageInfo_get_DpiY(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageInfo", L"DpiY"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DpiY());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageInfo_put_DpiY(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageInfo", L"DpiY"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.DpiY(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageInfo_get_DpiX(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageInfo", L"DpiX"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DpiX());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageInfo_put_DpiX(py::wrapper::Windows::Graphics::Printing::PrintPageInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageInfo", L"DpiX"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.DpiX(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_PrintPageInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintPageInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintPageInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintPageInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintPageInfo[] = {
        { "_assign_array_", _assign_array_PrintPageInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintPageInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintPageInfo[] = {
        { "page_size", reinterpret_cast<getter>(PrintPageInfo_get_PageSize), reinterpret_cast<setter>(PrintPageInfo_put_PageSize), nullptr, nullptr },
        { "orientation", reinterpret_cast<getter>(PrintPageInfo_get_Orientation), reinterpret_cast<setter>(PrintPageInfo_put_Orientation), nullptr, nullptr },
        { "media_size", reinterpret_cast<getter>(PrintPageInfo_get_MediaSize), reinterpret_cast<setter>(PrintPageInfo_put_MediaSize), nullptr, nullptr },
        { "dpi_y", reinterpret_cast<getter>(PrintPageInfo_get_DpiY), reinterpret_cast<setter>(PrintPageInfo_put_DpiY), nullptr, nullptr },
        { "dpi_x", reinterpret_cast<getter>(PrintPageInfo_get_DpiX), reinterpret_cast<setter>(PrintPageInfo_put_DpiX), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintPageInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintPageInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintPageInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintPageInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintPageInfo) },
        { },
    };

    static PyType_Spec type_spec_PrintPageInfo =
    {
        "winrt._winrt_windows_graphics_printing.PrintPageInfo",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintPageInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintPageInfo
    };

    // ----- PrintPageRange class --------------------

    static PyObject* _new_PrintPageRange(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);
                auto param1 = py::convert_to<int32_t>(args, 1);

                winrt::Windows::Graphics::Printing::PrintPageRange instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                winrt::Windows::Graphics::Printing::PrintPageRange instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PrintPageRange(py::wrapper::Windows::Graphics::Printing::PrintPageRange* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintPageRange_get_FirstPageNumber(py::wrapper::Windows::Graphics::Printing::PrintPageRange* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageRange", L"FirstPageNumber"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FirstPageNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintPageRange_get_LastPageNumber(py::wrapper::Windows::Graphics::Printing::PrintPageRange* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageRange", L"LastPageNumber"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.LastPageNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintPageRange(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintPageRange>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintPageRange(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintPageRange>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintPageRange[] = {
        { "_assign_array_", _assign_array_PrintPageRange, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintPageRange), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintPageRange[] = {
        { "first_page_number", reinterpret_cast<getter>(PrintPageRange_get_FirstPageNumber), nullptr, nullptr, nullptr },
        { "last_page_number", reinterpret_cast<getter>(PrintPageRange_get_LastPageNumber), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintPageRange[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintPageRange) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintPageRange) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintPageRange) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintPageRange) },
        { },
    };

    static PyType_Spec type_spec_PrintPageRange =
    {
        "winrt._winrt_windows_graphics_printing.PrintPageRange",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintPageRange),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintPageRange
    };

    // ----- PrintPageRangeOptions class --------------------

    static PyObject* _new_PrintPageRangeOptions(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintPageRangeOptions>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintPageRangeOptions>::type_name);
        return nullptr;
    }

    static void _dealloc_PrintPageRangeOptions(py::wrapper::Windows::Graphics::Printing::PrintPageRangeOptions* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintPageRangeOptions_get_AllowCustomSetOfPages(py::wrapper::Windows::Graphics::Printing::PrintPageRangeOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageRangeOptions", L"AllowCustomSetOfPages"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AllowCustomSetOfPages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageRangeOptions_put_AllowCustomSetOfPages(py::wrapper::Windows::Graphics::Printing::PrintPageRangeOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageRangeOptions", L"AllowCustomSetOfPages"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AllowCustomSetOfPages(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageRangeOptions_get_AllowCurrentPage(py::wrapper::Windows::Graphics::Printing::PrintPageRangeOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageRangeOptions", L"AllowCurrentPage"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AllowCurrentPage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageRangeOptions_put_AllowCurrentPage(py::wrapper::Windows::Graphics::Printing::PrintPageRangeOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageRangeOptions", L"AllowCurrentPage"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AllowCurrentPage(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageRangeOptions_get_AllowAllPages(py::wrapper::Windows::Graphics::Printing::PrintPageRangeOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageRangeOptions", L"AllowAllPages"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AllowAllPages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageRangeOptions_put_AllowAllPages(py::wrapper::Windows::Graphics::Printing::PrintPageRangeOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintPageRangeOptions", L"AllowAllPages"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AllowAllPages(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_PrintPageRangeOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintPageRangeOptions>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintPageRangeOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintPageRangeOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintPageRangeOptions[] = {
        { "_assign_array_", _assign_array_PrintPageRangeOptions, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintPageRangeOptions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintPageRangeOptions[] = {
        { "allow_custom_set_of_pages", reinterpret_cast<getter>(PrintPageRangeOptions_get_AllowCustomSetOfPages), reinterpret_cast<setter>(PrintPageRangeOptions_put_AllowCustomSetOfPages), nullptr, nullptr },
        { "allow_current_page", reinterpret_cast<getter>(PrintPageRangeOptions_get_AllowCurrentPage), reinterpret_cast<setter>(PrintPageRangeOptions_put_AllowCurrentPage), nullptr, nullptr },
        { "allow_all_pages", reinterpret_cast<getter>(PrintPageRangeOptions_get_AllowAllPages), reinterpret_cast<setter>(PrintPageRangeOptions_put_AllowAllPages), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintPageRangeOptions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintPageRangeOptions) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintPageRangeOptions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintPageRangeOptions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintPageRangeOptions) },
        { },
    };

    static PyType_Spec type_spec_PrintPageRangeOptions =
    {
        "winrt._winrt_windows_graphics_printing.PrintPageRangeOptions",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintPageRangeOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintPageRangeOptions
    };

    // ----- PrintTask class --------------------

    static PyObject* _new_PrintTask(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintTask>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintTask>::type_name);
        return nullptr;
    }

    static void _dealloc_PrintTask(py::wrapper::Windows::Graphics::Printing::PrintTask* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintTask_get_Options(py::wrapper::Windows::Graphics::Printing::PrintTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTask", L"Options"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Options());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_get_Properties(py::wrapper::Windows::Graphics::Printing::PrintTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTask", L"Properties"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Properties());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_get_Source(py::wrapper::Windows::Graphics::Printing::PrintTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTask", L"Source"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Source());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_get_IsPreviewEnabled(py::wrapper::Windows::Graphics::Printing::PrintTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTask", L"IsPreviewEnabled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsPreviewEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTask_put_IsPreviewEnabled(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTask", L"IsPreviewEnabled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsPreviewEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTask_get_IsPrinterTargetEnabled(py::wrapper::Windows::Graphics::Printing::PrintTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTask", L"IsPrinterTargetEnabled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsPrinterTargetEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTask_put_IsPrinterTargetEnabled(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTask", L"IsPrinterTargetEnabled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsPrinterTargetEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTask_get_Is3DManufacturingTargetEnabled(py::wrapper::Windows::Graphics::Printing::PrintTask* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTask", L"Is3DManufacturingTargetEnabled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Is3DManufacturingTargetEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTask_put_Is3DManufacturingTargetEnabled(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTask", L"Is3DManufacturingTargetEnabled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Is3DManufacturingTargetEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTask_add_Completed(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Printing.PrintTask", L"Completed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Printing::PrintTask, winrt::Windows::Graphics::Printing::PrintTaskCompletedEventArgs>>(arg);

            return py::convert(self->obj.Completed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_remove_Completed(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Printing.PrintTask", L"Completed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Completed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_add_Previewing(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Printing.PrintTask", L"Previewing"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Printing::PrintTask, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.Previewing(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_remove_Previewing(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Printing.PrintTask", L"Previewing"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Previewing(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_add_Progressing(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Printing.PrintTask", L"Progressing"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Printing::PrintTask, winrt::Windows::Graphics::Printing::PrintTaskProgressingEventArgs>>(arg);

            return py::convert(self->obj.Progressing(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_remove_Progressing(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Printing.PrintTask", L"Progressing"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Progressing(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_add_Submitting(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Printing.PrintTask", L"Submitting"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Printing::PrintTask, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.Submitting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTask_remove_Submitting(py::wrapper::Windows::Graphics::Printing::PrintTask* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Printing.PrintTask", L"Submitting"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Submitting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintTask(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintTask>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintTask(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTask>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTask[] = {
        { "add_completed", reinterpret_cast<PyCFunction>(PrintTask_add_Completed), METH_O, nullptr },
        { "remove_completed", reinterpret_cast<PyCFunction>(PrintTask_remove_Completed), METH_O, nullptr },
        { "add_previewing", reinterpret_cast<PyCFunction>(PrintTask_add_Previewing), METH_O, nullptr },
        { "remove_previewing", reinterpret_cast<PyCFunction>(PrintTask_remove_Previewing), METH_O, nullptr },
        { "add_progressing", reinterpret_cast<PyCFunction>(PrintTask_add_Progressing), METH_O, nullptr },
        { "remove_progressing", reinterpret_cast<PyCFunction>(PrintTask_remove_Progressing), METH_O, nullptr },
        { "add_submitting", reinterpret_cast<PyCFunction>(PrintTask_add_Submitting), METH_O, nullptr },
        { "remove_submitting", reinterpret_cast<PyCFunction>(PrintTask_remove_Submitting), METH_O, nullptr },
        { "_assign_array_", _assign_array_PrintTask, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintTask), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintTask[] = {
        { "options", reinterpret_cast<getter>(PrintTask_get_Options), nullptr, nullptr, nullptr },
        { "properties", reinterpret_cast<getter>(PrintTask_get_Properties), nullptr, nullptr, nullptr },
        { "source", reinterpret_cast<getter>(PrintTask_get_Source), nullptr, nullptr, nullptr },
        { "is_preview_enabled", reinterpret_cast<getter>(PrintTask_get_IsPreviewEnabled), reinterpret_cast<setter>(PrintTask_put_IsPreviewEnabled), nullptr, nullptr },
        { "is_printer_target_enabled", reinterpret_cast<getter>(PrintTask_get_IsPrinterTargetEnabled), reinterpret_cast<setter>(PrintTask_put_IsPrinterTargetEnabled), nullptr, nullptr },
        { "is3_d_manufacturing_target_enabled", reinterpret_cast<getter>(PrintTask_get_Is3DManufacturingTargetEnabled), reinterpret_cast<setter>(PrintTask_put_Is3DManufacturingTargetEnabled), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintTask[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintTask) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintTask) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintTask) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintTask) },
        { },
    };

    static PyType_Spec type_spec_PrintTask =
    {
        "winrt._winrt_windows_graphics_printing.PrintTask",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTask),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTask
    };

    // ----- PrintTaskCompletedEventArgs class --------------------

    static PyObject* _new_PrintTaskCompletedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintTaskCompletedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintTaskCompletedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_PrintTaskCompletedEventArgs(py::wrapper::Windows::Graphics::Printing::PrintTaskCompletedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintTaskCompletedEventArgs_get_Completion(py::wrapper::Windows::Graphics::Printing::PrintTaskCompletedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskCompletedEventArgs", L"Completion"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Completion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintTaskCompletedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintTaskCompletedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintTaskCompletedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTaskCompletedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTaskCompletedEventArgs[] = {
        { "_assign_array_", _assign_array_PrintTaskCompletedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintTaskCompletedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintTaskCompletedEventArgs[] = {
        { "completion", reinterpret_cast<getter>(PrintTaskCompletedEventArgs_get_Completion), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintTaskCompletedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintTaskCompletedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintTaskCompletedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintTaskCompletedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintTaskCompletedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_PrintTaskCompletedEventArgs =
    {
        "winrt._winrt_windows_graphics_printing.PrintTaskCompletedEventArgs",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTaskCompletedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTaskCompletedEventArgs
    };

    // ----- PrintTaskOptions class --------------------

    static PyObject* _new_PrintTaskOptions(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintTaskOptions>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintTaskOptions>::type_name);
        return nullptr;
    }

    static void _dealloc_PrintTaskOptions(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintTaskOptions_GetPageDescription(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"GetPageDescription", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetPageDescription(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTaskOptions_GetPagePrintTicket(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"GetPagePrintTicket", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintPageInfo>(args, 0);

                return py::convert(self->obj.GetPagePrintTicket(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTaskOptions_get_Bordering(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"Bordering"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Bordering());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_Bordering(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"Bordering"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintBordering>(arg);

            self->obj.Bordering(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_PageRangeOptions(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"PageRangeOptions"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageRangeOptions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTaskOptions_get_CustomPageRanges(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"CustomPageRanges"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CustomPageRanges());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTaskOptions_get_MediaType(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"MediaType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MediaType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_MediaType(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"MediaType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintMediaType>(arg);

            self->obj.MediaType(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_HolePunch(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"HolePunch"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.HolePunch());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_HolePunch(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"HolePunch"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintHolePunch>(arg);

            self->obj.HolePunch(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_Binding(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"Binding"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Binding());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_Binding(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"Binding"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintBinding>(arg);

            self->obj.Binding(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_Duplex(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"Duplex"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Duplex());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_Duplex(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"Duplex"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintDuplex>(arg);

            self->obj.Duplex(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_ColorMode(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"ColorMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ColorMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_ColorMode(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"ColorMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintColorMode>(arg);

            self->obj.ColorMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_Collation(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"Collation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Collation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_Collation(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"Collation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintCollation>(arg);

            self->obj.Collation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_Staple(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"Staple"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Staple());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_Staple(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"Staple"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintStaple>(arg);

            self->obj.Staple(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_PrintQuality(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"PrintQuality"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PrintQuality());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_PrintQuality(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"PrintQuality"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintQuality>(arg);

            self->obj.PrintQuality(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_Orientation(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"Orientation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Orientation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_Orientation(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"Orientation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintOrientation>(arg);

            self->obj.Orientation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_MediaSize(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"MediaSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MediaSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_MediaSize(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"MediaSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintMediaSize>(arg);

            self->obj.MediaSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_NumberOfCopies(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"NumberOfCopies"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.NumberOfCopies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTaskOptions_put_NumberOfCopies(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"NumberOfCopies"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.NumberOfCopies(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTaskOptions_get_MaxCopies(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"MaxCopies"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MaxCopies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTaskOptions_get_MinCopies(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"MinCopies"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MinCopies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTaskOptions_get_DisplayedOptions(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskOptions", L"DisplayedOptions"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayedOptions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintTaskOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintTaskOptions>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintTaskOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTaskOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTaskOptions[] = {
        { "get_page_description", reinterpret_cast<PyCFunction>(PrintTaskOptions_GetPageDescription), METH_VARARGS, nullptr },
        { "get_page_print_ticket", reinterpret_cast<PyCFunction>(PrintTaskOptions_GetPagePrintTicket), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_PrintTaskOptions, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintTaskOptions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintTaskOptions[] = {
        { "bordering", reinterpret_cast<getter>(PrintTaskOptions_get_Bordering), reinterpret_cast<setter>(PrintTaskOptions_put_Bordering), nullptr, nullptr },
        { "page_range_options", reinterpret_cast<getter>(PrintTaskOptions_get_PageRangeOptions), nullptr, nullptr, nullptr },
        { "custom_page_ranges", reinterpret_cast<getter>(PrintTaskOptions_get_CustomPageRanges), nullptr, nullptr, nullptr },
        { "media_type", reinterpret_cast<getter>(PrintTaskOptions_get_MediaType), reinterpret_cast<setter>(PrintTaskOptions_put_MediaType), nullptr, nullptr },
        { "hole_punch", reinterpret_cast<getter>(PrintTaskOptions_get_HolePunch), reinterpret_cast<setter>(PrintTaskOptions_put_HolePunch), nullptr, nullptr },
        { "binding", reinterpret_cast<getter>(PrintTaskOptions_get_Binding), reinterpret_cast<setter>(PrintTaskOptions_put_Binding), nullptr, nullptr },
        { "duplex", reinterpret_cast<getter>(PrintTaskOptions_get_Duplex), reinterpret_cast<setter>(PrintTaskOptions_put_Duplex), nullptr, nullptr },
        { "color_mode", reinterpret_cast<getter>(PrintTaskOptions_get_ColorMode), reinterpret_cast<setter>(PrintTaskOptions_put_ColorMode), nullptr, nullptr },
        { "collation", reinterpret_cast<getter>(PrintTaskOptions_get_Collation), reinterpret_cast<setter>(PrintTaskOptions_put_Collation), nullptr, nullptr },
        { "staple", reinterpret_cast<getter>(PrintTaskOptions_get_Staple), reinterpret_cast<setter>(PrintTaskOptions_put_Staple), nullptr, nullptr },
        { "print_quality", reinterpret_cast<getter>(PrintTaskOptions_get_PrintQuality), reinterpret_cast<setter>(PrintTaskOptions_put_PrintQuality), nullptr, nullptr },
        { "orientation", reinterpret_cast<getter>(PrintTaskOptions_get_Orientation), reinterpret_cast<setter>(PrintTaskOptions_put_Orientation), nullptr, nullptr },
        { "media_size", reinterpret_cast<getter>(PrintTaskOptions_get_MediaSize), reinterpret_cast<setter>(PrintTaskOptions_put_MediaSize), nullptr, nullptr },
        { "number_of_copies", reinterpret_cast<getter>(PrintTaskOptions_get_NumberOfCopies), reinterpret_cast<setter>(PrintTaskOptions_put_NumberOfCopies), nullptr, nullptr },
        { "max_copies", reinterpret_cast<getter>(PrintTaskOptions_get_MaxCopies), nullptr, nullptr, nullptr },
        { "min_copies", reinterpret_cast<getter>(PrintTaskOptions_get_MinCopies), nullptr, nullptr, nullptr },
        { "displayed_options", reinterpret_cast<getter>(PrintTaskOptions_get_DisplayedOptions), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintTaskOptions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintTaskOptions) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintTaskOptions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintTaskOptions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintTaskOptions) },
        { },
    };

    static PyType_Spec type_spec_PrintTaskOptions =
    {
        "winrt._winrt_windows_graphics_printing.PrintTaskOptions",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTaskOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTaskOptions
    };

    // ----- PrintTaskProgressingEventArgs class --------------------

    static PyObject* _new_PrintTaskProgressingEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintTaskProgressingEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintTaskProgressingEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_PrintTaskProgressingEventArgs(py::wrapper::Windows::Graphics::Printing::PrintTaskProgressingEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintTaskProgressingEventArgs_get_DocumentPageCount(py::wrapper::Windows::Graphics::Printing::PrintTaskProgressingEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskProgressingEventArgs", L"DocumentPageCount"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DocumentPageCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintTaskProgressingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintTaskProgressingEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintTaskProgressingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTaskProgressingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTaskProgressingEventArgs[] = {
        { "_assign_array_", _assign_array_PrintTaskProgressingEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintTaskProgressingEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintTaskProgressingEventArgs[] = {
        { "document_page_count", reinterpret_cast<getter>(PrintTaskProgressingEventArgs_get_DocumentPageCount), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintTaskProgressingEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintTaskProgressingEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintTaskProgressingEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintTaskProgressingEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintTaskProgressingEventArgs) },
        { },
    };

    static PyType_Spec type_spec_PrintTaskProgressingEventArgs =
    {
        "winrt._winrt_windows_graphics_printing.PrintTaskProgressingEventArgs",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTaskProgressingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTaskProgressingEventArgs
    };

    // ----- PrintTaskRequest class --------------------

    static PyObject* _new_PrintTaskRequest(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintTaskRequest>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintTaskRequest>::type_name);
        return nullptr;
    }

    static void _dealloc_PrintTaskRequest(py::wrapper::Windows::Graphics::Printing::PrintTaskRequest* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintTaskRequest_CreatePrintTask(py::wrapper::Windows::Graphics::Printing::PrintTaskRequest* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTaskRequest", L"CreatePrintTask", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Graphics::Printing::PrintTaskSourceRequestedHandler>(args, 1);

                return py::convert(self->obj.CreatePrintTask(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTaskRequest_GetDeferral(py::wrapper::Windows::Graphics::Printing::PrintTaskRequest* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTaskRequest", L"GetDeferral", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTaskRequest_get_Deadline(py::wrapper::Windows::Graphics::Printing::PrintTaskRequest* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskRequest", L"Deadline"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Deadline());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintTaskRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintTaskRequest>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintTaskRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTaskRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTaskRequest[] = {
        { "create_print_task", reinterpret_cast<PyCFunction>(PrintTaskRequest_CreatePrintTask), METH_VARARGS, nullptr },
        { "get_deferral", reinterpret_cast<PyCFunction>(PrintTaskRequest_GetDeferral), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_PrintTaskRequest, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintTaskRequest), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintTaskRequest[] = {
        { "deadline", reinterpret_cast<getter>(PrintTaskRequest_get_Deadline), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintTaskRequest[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintTaskRequest) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintTaskRequest) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintTaskRequest) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintTaskRequest) },
        { },
    };

    static PyType_Spec type_spec_PrintTaskRequest =
    {
        "winrt._winrt_windows_graphics_printing.PrintTaskRequest",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTaskRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTaskRequest
    };

    // ----- PrintTaskRequestedDeferral class --------------------

    static PyObject* _new_PrintTaskRequestedDeferral(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintTaskRequestedDeferral>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintTaskRequestedDeferral>::type_name);
        return nullptr;
    }

    static void _dealloc_PrintTaskRequestedDeferral(py::wrapper::Windows::Graphics::Printing::PrintTaskRequestedDeferral* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintTaskRequestedDeferral_Complete(py::wrapper::Windows::Graphics::Printing::PrintTaskRequestedDeferral* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTaskRequestedDeferral", L"Complete", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Complete();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintTaskRequestedDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintTaskRequestedDeferral>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintTaskRequestedDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTaskRequestedDeferral>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTaskRequestedDeferral[] = {
        { "complete", reinterpret_cast<PyCFunction>(PrintTaskRequestedDeferral_Complete), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_PrintTaskRequestedDeferral, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintTaskRequestedDeferral), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintTaskRequestedDeferral[] = {
        { }
    };

    static PyType_Slot _type_slots_PrintTaskRequestedDeferral[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintTaskRequestedDeferral) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintTaskRequestedDeferral) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintTaskRequestedDeferral) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintTaskRequestedDeferral) },
        { },
    };

    static PyType_Spec type_spec_PrintTaskRequestedDeferral =
    {
        "winrt._winrt_windows_graphics_printing.PrintTaskRequestedDeferral",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTaskRequestedDeferral),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTaskRequestedDeferral
    };

    // ----- PrintTaskRequestedEventArgs class --------------------

    static PyObject* _new_PrintTaskRequestedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintTaskRequestedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintTaskRequestedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_PrintTaskRequestedEventArgs(py::wrapper::Windows::Graphics::Printing::PrintTaskRequestedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintTaskRequestedEventArgs_get_Request(py::wrapper::Windows::Graphics::Printing::PrintTaskRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskRequestedEventArgs", L"Request"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintTaskRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintTaskRequestedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintTaskRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTaskRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTaskRequestedEventArgs[] = {
        { "_assign_array_", _assign_array_PrintTaskRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintTaskRequestedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintTaskRequestedEventArgs[] = {
        { "request", reinterpret_cast<getter>(PrintTaskRequestedEventArgs_get_Request), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintTaskRequestedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintTaskRequestedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintTaskRequestedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintTaskRequestedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintTaskRequestedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_PrintTaskRequestedEventArgs =
    {
        "winrt._winrt_windows_graphics_printing.PrintTaskRequestedEventArgs",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTaskRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTaskRequestedEventArgs
    };

    // ----- PrintTaskSourceRequestedArgs class --------------------

    static PyObject* _new_PrintTaskSourceRequestedArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_PrintTaskSourceRequestedArgs(py::wrapper::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintTaskSourceRequestedArgs_GetDeferral(py::wrapper::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTaskSourceRequestedArgs", L"GetDeferral", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTaskSourceRequestedArgs_SetSource(py::wrapper::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTaskSourceRequestedArgs", L"SetSource", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::IPrintDocumentSource>(args, 0);

                self->obj.SetSource(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTaskSourceRequestedArgs_get_Deadline(py::wrapper::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTaskSourceRequestedArgs", L"Deadline"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Deadline());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintTaskSourceRequestedArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintTaskSourceRequestedArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTaskSourceRequestedArgs[] = {
        { "get_deferral", reinterpret_cast<PyCFunction>(PrintTaskSourceRequestedArgs_GetDeferral), METH_VARARGS, nullptr },
        { "set_source", reinterpret_cast<PyCFunction>(PrintTaskSourceRequestedArgs_SetSource), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_PrintTaskSourceRequestedArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintTaskSourceRequestedArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintTaskSourceRequestedArgs[] = {
        { "deadline", reinterpret_cast<getter>(PrintTaskSourceRequestedArgs_get_Deadline), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintTaskSourceRequestedArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintTaskSourceRequestedArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintTaskSourceRequestedArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintTaskSourceRequestedArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintTaskSourceRequestedArgs) },
        { },
    };

    static PyType_Spec type_spec_PrintTaskSourceRequestedArgs =
    {
        "winrt._winrt_windows_graphics_printing.PrintTaskSourceRequestedArgs",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTaskSourceRequestedArgs
    };

    // ----- PrintTaskSourceRequestedDeferral class --------------------

    static PyObject* _new_PrintTaskSourceRequestedDeferral(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral>::type_name);
        return nullptr;
    }

    static void _dealloc_PrintTaskSourceRequestedDeferral(py::wrapper::Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintTaskSourceRequestedDeferral_Complete(py::wrapper::Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTaskSourceRequestedDeferral", L"Complete", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Complete();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintTaskSourceRequestedDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintTaskSourceRequestedDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTaskSourceRequestedDeferral[] = {
        { "complete", reinterpret_cast<PyCFunction>(PrintTaskSourceRequestedDeferral_Complete), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_PrintTaskSourceRequestedDeferral, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintTaskSourceRequestedDeferral), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintTaskSourceRequestedDeferral[] = {
        { }
    };

    static PyType_Slot _type_slots_PrintTaskSourceRequestedDeferral[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintTaskSourceRequestedDeferral) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintTaskSourceRequestedDeferral) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintTaskSourceRequestedDeferral) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintTaskSourceRequestedDeferral) },
        { },
    };

    static PyType_Spec type_spec_PrintTaskSourceRequestedDeferral =
    {
        "winrt._winrt_windows_graphics_printing.PrintTaskSourceRequestedDeferral",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTaskSourceRequestedDeferral
    };

    // ----- StandardPrintTaskOptions class --------------------

    static PyObject* _new_StandardPrintTaskOptions(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::StandardPrintTaskOptions>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::StandardPrintTaskOptions>::type_name);
        return nullptr;
    }

    static PyObject* StandardPrintTaskOptions_get_Copies(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.StandardPrintTaskOptions", L"Copies"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::Copies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_Binding(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.StandardPrintTaskOptions", L"Binding"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::Binding());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_Collation(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.StandardPrintTaskOptions", L"Collation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::Collation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_ColorMode(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.StandardPrintTaskOptions", L"ColorMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::ColorMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_MediaType(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.StandardPrintTaskOptions", L"MediaType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::MediaType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_Duplex(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.StandardPrintTaskOptions", L"Duplex"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::Duplex());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_HolePunch(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.StandardPrintTaskOptions", L"HolePunch"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::HolePunch());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_InputBin(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.StandardPrintTaskOptions", L"InputBin"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::InputBin());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_MediaSize(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.StandardPrintTaskOptions", L"MediaSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::MediaSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_NUp(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.StandardPrintTaskOptions", L"NUp"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::NUp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_Orientation(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.StandardPrintTaskOptions", L"Orientation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::Orientation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_PrintQuality(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.StandardPrintTaskOptions", L"PrintQuality"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::PrintQuality());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_Staple(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.StandardPrintTaskOptions", L"Staple"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::Staple());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_Bordering(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.StandardPrintTaskOptions", L"Bordering"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::Bordering());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StandardPrintTaskOptions_get_CustomPageRanges(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.StandardPrintTaskOptions", L"CustomPageRanges"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Graphics::Printing::StandardPrintTaskOptions::CustomPageRanges());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StandardPrintTaskOptions[] = {
        { }
    };

    static PyGetSetDef _getset_StandardPrintTaskOptions[] = {
        { }
    };

    static PyType_Slot _type_slots_StandardPrintTaskOptions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_StandardPrintTaskOptions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_StandardPrintTaskOptions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_StandardPrintTaskOptions) },
        { },
    };

    static PyType_Spec type_spec_StandardPrintTaskOptions =
    {
        "winrt._winrt_windows_graphics_printing.StandardPrintTaskOptions",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StandardPrintTaskOptions
    };

    static PyGetSetDef getset_StandardPrintTaskOptions_Static[] = {
        { "copies", reinterpret_cast<getter>(StandardPrintTaskOptions_get_Copies), nullptr, nullptr, nullptr },
        { "binding", reinterpret_cast<getter>(StandardPrintTaskOptions_get_Binding), nullptr, nullptr, nullptr },
        { "collation", reinterpret_cast<getter>(StandardPrintTaskOptions_get_Collation), nullptr, nullptr, nullptr },
        { "color_mode", reinterpret_cast<getter>(StandardPrintTaskOptions_get_ColorMode), nullptr, nullptr, nullptr },
        { "media_type", reinterpret_cast<getter>(StandardPrintTaskOptions_get_MediaType), nullptr, nullptr, nullptr },
        { "duplex", reinterpret_cast<getter>(StandardPrintTaskOptions_get_Duplex), nullptr, nullptr, nullptr },
        { "hole_punch", reinterpret_cast<getter>(StandardPrintTaskOptions_get_HolePunch), nullptr, nullptr, nullptr },
        { "input_bin", reinterpret_cast<getter>(StandardPrintTaskOptions_get_InputBin), nullptr, nullptr, nullptr },
        { "media_size", reinterpret_cast<getter>(StandardPrintTaskOptions_get_MediaSize), nullptr, nullptr, nullptr },
        { "n_up", reinterpret_cast<getter>(StandardPrintTaskOptions_get_NUp), nullptr, nullptr, nullptr },
        { "orientation", reinterpret_cast<getter>(StandardPrintTaskOptions_get_Orientation), nullptr, nullptr, nullptr },
        { "print_quality", reinterpret_cast<getter>(StandardPrintTaskOptions_get_PrintQuality), nullptr, nullptr, nullptr },
        { "staple", reinterpret_cast<getter>(StandardPrintTaskOptions_get_Staple), nullptr, nullptr, nullptr },
        { "bordering", reinterpret_cast<getter>(StandardPrintTaskOptions_get_Bordering), nullptr, nullptr, nullptr },
        { "custom_page_ranges", reinterpret_cast<getter>(StandardPrintTaskOptions_get_CustomPageRanges), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_StandardPrintTaskOptions_Static[] = {
        { }
    };

    static PyType_Slot type_slots_StandardPrintTaskOptions_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_StandardPrintTaskOptions_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_StandardPrintTaskOptions_Static) },
        { }
    };

    static PyType_Spec type_spec_StandardPrintTaskOptions_Static =
    {
        "winrt._winrt_windows_graphics_printing.StandardPrintTaskOptions_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_StandardPrintTaskOptions_Static
    };

    // ----- IPrintDocumentSource interface --------------------

    static PyObject* _new_IPrintDocumentSource(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::IPrintDocumentSource>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::IPrintDocumentSource>::type_name);
        return nullptr;
    }

    static void _dealloc_IPrintDocumentSource(py::wrapper::Windows::Graphics::Printing::IPrintDocumentSource* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_IPrintDocumentSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::IPrintDocumentSource>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IPrintDocumentSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::IPrintDocumentSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IPrintDocumentSource[] = {
        { "_assign_array_", _assign_array_IPrintDocumentSource, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IPrintDocumentSource), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IPrintDocumentSource[] = {
        { }
    };

    static PyType_Slot _type_slots_IPrintDocumentSource[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IPrintDocumentSource) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IPrintDocumentSource) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IPrintDocumentSource) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IPrintDocumentSource) },
        { },
    };

    static PyType_Spec type_spec_IPrintDocumentSource =
    {
        "winrt._winrt_windows_graphics_printing.IPrintDocumentSource",
        sizeof(py::wrapper::Windows::Graphics::Printing::IPrintDocumentSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IPrintDocumentSource
    };

    // ----- IPrintTaskOptionsCore interface --------------------

    static PyObject* _new_IPrintTaskOptionsCore(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCore>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCore>::type_name);
        return nullptr;
    }

    static void _dealloc_IPrintTaskOptionsCore(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCore* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IPrintTaskOptionsCore_GetPageDescription(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCore* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCore", L"GetPageDescription", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetPageDescription(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_IPrintTaskOptionsCore(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCore>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IPrintTaskOptionsCore(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCore>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IPrintTaskOptionsCore[] = {
        { "get_page_description", reinterpret_cast<PyCFunction>(IPrintTaskOptionsCore_GetPageDescription), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_IPrintTaskOptionsCore, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IPrintTaskOptionsCore), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IPrintTaskOptionsCore[] = {
        { }
    };

    static PyType_Slot _type_slots_IPrintTaskOptionsCore[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IPrintTaskOptionsCore) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IPrintTaskOptionsCore) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IPrintTaskOptionsCore) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IPrintTaskOptionsCore) },
        { },
    };

    static PyType_Spec type_spec_IPrintTaskOptionsCore =
    {
        "winrt._winrt_windows_graphics_printing.IPrintTaskOptionsCore",
        sizeof(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCore),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IPrintTaskOptionsCore
    };

    // ----- IPrintTaskOptionsCoreProperties interface --------------------

    static PyObject* _new_IPrintTaskOptionsCoreProperties(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties>::type_name);
        return nullptr;
    }

    static void _dealloc_IPrintTaskOptionsCoreProperties(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_Binding(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"Binding"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Binding());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_Binding(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"Binding"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintBinding>(arg);

            self->obj.Binding(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_Collation(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"Collation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Collation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_Collation(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"Collation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintCollation>(arg);

            self->obj.Collation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_ColorMode(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"ColorMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ColorMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_ColorMode(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"ColorMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintColorMode>(arg);

            self->obj.ColorMode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_Duplex(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"Duplex"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Duplex());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_Duplex(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"Duplex"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintDuplex>(arg);

            self->obj.Duplex(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_HolePunch(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"HolePunch"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.HolePunch());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_HolePunch(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"HolePunch"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintHolePunch>(arg);

            self->obj.HolePunch(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_MaxCopies(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"MaxCopies"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MaxCopies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_MediaSize(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"MediaSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MediaSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_MediaSize(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"MediaSize"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintMediaSize>(arg);

            self->obj.MediaSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_MediaType(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"MediaType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MediaType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_MediaType(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"MediaType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintMediaType>(arg);

            self->obj.MediaType(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_MinCopies(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"MinCopies"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MinCopies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_NumberOfCopies(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"NumberOfCopies"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.NumberOfCopies());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_NumberOfCopies(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"NumberOfCopies"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.NumberOfCopies(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_Orientation(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"Orientation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Orientation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_Orientation(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"Orientation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintOrientation>(arg);

            self->obj.Orientation(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_PrintQuality(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"PrintQuality"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PrintQuality());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_PrintQuality(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"PrintQuality"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintQuality>(arg);

            self->obj.PrintQuality(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IPrintTaskOptionsCoreProperties_get_Staple(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"Staple"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Staple());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IPrintTaskOptionsCoreProperties_put_Staple(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreProperties", L"Staple"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintStaple>(arg);

            self->obj.Staple(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_IPrintTaskOptionsCoreProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IPrintTaskOptionsCoreProperties(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IPrintTaskOptionsCoreProperties[] = {
        { "_assign_array_", _assign_array_IPrintTaskOptionsCoreProperties, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IPrintTaskOptionsCoreProperties), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IPrintTaskOptionsCoreProperties[] = {
        { "binding", reinterpret_cast<getter>(IPrintTaskOptionsCoreProperties_get_Binding), reinterpret_cast<setter>(IPrintTaskOptionsCoreProperties_put_Binding), nullptr, nullptr },
        { "collation", reinterpret_cast<getter>(IPrintTaskOptionsCoreProperties_get_Collation), reinterpret_cast<setter>(IPrintTaskOptionsCoreProperties_put_Collation), nullptr, nullptr },
        { "color_mode", reinterpret_cast<getter>(IPrintTaskOptionsCoreProperties_get_ColorMode), reinterpret_cast<setter>(IPrintTaskOptionsCoreProperties_put_ColorMode), nullptr, nullptr },
        { "duplex", reinterpret_cast<getter>(IPrintTaskOptionsCoreProperties_get_Duplex), reinterpret_cast<setter>(IPrintTaskOptionsCoreProperties_put_Duplex), nullptr, nullptr },
        { "hole_punch", reinterpret_cast<getter>(IPrintTaskOptionsCoreProperties_get_HolePunch), reinterpret_cast<setter>(IPrintTaskOptionsCoreProperties_put_HolePunch), nullptr, nullptr },
        { "max_copies", reinterpret_cast<getter>(IPrintTaskOptionsCoreProperties_get_MaxCopies), nullptr, nullptr, nullptr },
        { "media_size", reinterpret_cast<getter>(IPrintTaskOptionsCoreProperties_get_MediaSize), reinterpret_cast<setter>(IPrintTaskOptionsCoreProperties_put_MediaSize), nullptr, nullptr },
        { "media_type", reinterpret_cast<getter>(IPrintTaskOptionsCoreProperties_get_MediaType), reinterpret_cast<setter>(IPrintTaskOptionsCoreProperties_put_MediaType), nullptr, nullptr },
        { "min_copies", reinterpret_cast<getter>(IPrintTaskOptionsCoreProperties_get_MinCopies), nullptr, nullptr, nullptr },
        { "number_of_copies", reinterpret_cast<getter>(IPrintTaskOptionsCoreProperties_get_NumberOfCopies), reinterpret_cast<setter>(IPrintTaskOptionsCoreProperties_put_NumberOfCopies), nullptr, nullptr },
        { "orientation", reinterpret_cast<getter>(IPrintTaskOptionsCoreProperties_get_Orientation), reinterpret_cast<setter>(IPrintTaskOptionsCoreProperties_put_Orientation), nullptr, nullptr },
        { "print_quality", reinterpret_cast<getter>(IPrintTaskOptionsCoreProperties_get_PrintQuality), reinterpret_cast<setter>(IPrintTaskOptionsCoreProperties_put_PrintQuality), nullptr, nullptr },
        { "staple", reinterpret_cast<getter>(IPrintTaskOptionsCoreProperties_get_Staple), reinterpret_cast<setter>(IPrintTaskOptionsCoreProperties_put_Staple), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IPrintTaskOptionsCoreProperties[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IPrintTaskOptionsCoreProperties) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IPrintTaskOptionsCoreProperties) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IPrintTaskOptionsCoreProperties) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IPrintTaskOptionsCoreProperties) },
        { },
    };

    static PyType_Spec type_spec_IPrintTaskOptionsCoreProperties =
    {
        "winrt._winrt_windows_graphics_printing.IPrintTaskOptionsCoreProperties",
        sizeof(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IPrintTaskOptionsCoreProperties
    };

    // ----- IPrintTaskOptionsCoreUIConfiguration interface --------------------

    static PyObject* _new_IPrintTaskOptionsCoreUIConfiguration(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration>::type_name);
        return nullptr;
    }

    static void _dealloc_IPrintTaskOptionsCoreUIConfiguration(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IPrintTaskOptionsCoreUIConfiguration_get_DisplayedOptions(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.IPrintTaskOptionsCoreUIConfiguration", L"DisplayedOptions"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayedOptions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_IPrintTaskOptionsCoreUIConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IPrintTaskOptionsCoreUIConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IPrintTaskOptionsCoreUIConfiguration[] = {
        { "_assign_array_", _assign_array_IPrintTaskOptionsCoreUIConfiguration, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IPrintTaskOptionsCoreUIConfiguration), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IPrintTaskOptionsCoreUIConfiguration[] = {
        { "displayed_options", reinterpret_cast<getter>(IPrintTaskOptionsCoreUIConfiguration_get_DisplayedOptions), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IPrintTaskOptionsCoreUIConfiguration[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IPrintTaskOptionsCoreUIConfiguration) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IPrintTaskOptionsCoreUIConfiguration) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IPrintTaskOptionsCoreUIConfiguration) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IPrintTaskOptionsCoreUIConfiguration) },
        { },
    };

    static PyType_Spec type_spec_IPrintTaskOptionsCoreUIConfiguration =
    {
        "winrt._winrt_windows_graphics_printing.IPrintTaskOptionsCoreUIConfiguration",
        sizeof(py::wrapper::Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IPrintTaskOptionsCoreUIConfiguration
    };

    // ----- PrintPageDescription struct --------------------

    winrt_struct_wrapper<winrt::Windows::Graphics::Printing::PrintPageDescription>* _new_PrintPageDescription(PyTypeObject* subclass, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Graphics::Printing::PrintPageDescription>*>(subclass->tp_alloc(subclass, 0));

        if (!self)
        {
            return nullptr;
        }

        std::construct_at(&self->obj);

        return self;
    }

    int _init_PrintPageDescription(winrt_struct_wrapper<winrt::Windows::Graphics::Printing::PrintPageDescription>* self, PyObject* args, PyObject* kwds) noexcept
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            self->obj = {};
            return 0;
        }

        PyObject* _PageSize{};
        PyObject* _ImageableRect{};
        uint32_t _DpiX{};
        uint32_t _DpiY{};

        static const char* kwlist[] = {"page_size", "imageable_rect", "dpi_x", "dpi_y", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOII", const_cast<char**>(kwlist), &_PageSize, &_ImageableRect, &_DpiX, &_DpiY))
        {
            return -1;
        }

        try
        {
            self->obj = {py::converter<winrt::Windows::Foundation::Size>::convert_to(_PageSize), py::converter<winrt::Windows::Foundation::Rect>::convert_to(_ImageableRect), _DpiX, _DpiY};
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static void _dealloc_PrintPageDescription(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_PrintPageDescription(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintPageDescription>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_PrintPageDescription[] = {
        { "_assign_array_", _assign_array_PrintPageDescription, METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyObject* PrintPageDescription_get_PageSize(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PageSize);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageDescription_set_PageSize(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.PageSize = py::converter<winrt::Windows::Foundation::Size>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageDescription_get_ImageableRect(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ImageableRect);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageDescription_set_ImageableRect(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.ImageableRect = py::converter<winrt::Windows::Foundation::Rect>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageDescription_get_DpiX(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DpiX);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageDescription_set_DpiX(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.DpiX = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintPageDescription_get_DpiY(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DpiY);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintPageDescription_set_DpiY(py::wrapper::Windows::Graphics::Printing::PrintPageDescription* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.DpiY = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_PrintPageDescription[] = {
        { "page_size", reinterpret_cast<getter>(PrintPageDescription_get_PageSize), reinterpret_cast<setter>(PrintPageDescription_set_PageSize), nullptr, nullptr },
        { "imageable_rect", reinterpret_cast<getter>(PrintPageDescription_get_ImageableRect), reinterpret_cast<setter>(PrintPageDescription_set_ImageableRect), nullptr, nullptr },
        { "dpi_x", reinterpret_cast<getter>(PrintPageDescription_get_DpiX), reinterpret_cast<setter>(PrintPageDescription_set_DpiX), nullptr, nullptr },
        { "dpi_y", reinterpret_cast<getter>(PrintPageDescription_get_DpiY), reinterpret_cast<setter>(PrintPageDescription_set_DpiY), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintPageDescription[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintPageDescription) },
        { Py_tp_init, reinterpret_cast<void*>(_init_PrintPageDescription) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintPageDescription) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintPageDescription) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintPageDescription) },
        { },
    };

    static PyType_Spec type_spec_PrintPageDescription =
    {
        "winrt._winrt_windows_graphics_printing.PrintPageDescription",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintPageDescription),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintPageDescription
    };

    // ----- Windows.Graphics.Printing Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Graphics::Printing");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_graphics_printing",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Graphics::Printing

PyMODINIT_FUNC PyInit__winrt_windows_graphics_printing(void) noexcept
{
    using namespace py::cpp::Windows::Graphics::Printing;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_PrintManager_Static{PyType_FromSpec(&type_spec_PrintManager_Static)};
    if (!type_PrintManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_PrintManager_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintPageInfo, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintPageRange, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintPageRangeOptions, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintTask, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintTaskCompletedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintTaskOptions, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintTaskProgressingEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintTaskRequest, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintTaskRequestedDeferral, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintTaskRequestedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintTaskSourceRequestedArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintTaskSourceRequestedDeferral, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_StandardPrintTaskOptions_Static{PyType_FromSpec(&type_spec_StandardPrintTaskOptions_Static)};
    if (!type_StandardPrintTaskOptions_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_StandardPrintTaskOptions, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_StandardPrintTaskOptions_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_IPrintDocumentSource, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_IPrintTaskOptionsCore, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_IPrintTaskOptionsCoreProperties, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_IPrintTaskOptionsCoreUIConfiguration, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintPageDescription, nullptr, nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
