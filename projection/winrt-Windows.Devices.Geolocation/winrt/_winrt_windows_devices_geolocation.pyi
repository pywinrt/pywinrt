# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections

from winrt.windows.devices.geolocation import AltitudeReferenceSystem, GeolocationAccessStatus, GeoshapeType, PositionAccuracy, PositionSource, PositionStatus, VisitMonitoringScope, VisitStateChange

Self = typing.TypeVar('Self')

@typing.final
class BasicGeoposition:
    latitude: winrt.system.Double
    longitude: winrt.system.Double
    altitude: winrt.system.Double
    def __init__(self, latitude: winrt.system.Double = 0, longitude: winrt.system.Double = 0, altitude: winrt.system.Double = 0) -> None: ...

@typing.final
class CivicAddress(winrt.system.Object):
    # System.String Windows.Devices.Geolocation.CivicAddress::get_City()
    @_property
    def city(self) -> str: ...
    # System.String Windows.Devices.Geolocation.CivicAddress::get_Country()
    @_property
    def country(self) -> str: ...
    # System.String Windows.Devices.Geolocation.CivicAddress::get_PostalCode()
    @_property
    def postal_code(self) -> str: ...
    # System.String Windows.Devices.Geolocation.CivicAddress::get_State()
    @_property
    def state(self) -> str: ...
    # Windows.Foundation.DateTime Windows.Devices.Geolocation.CivicAddress::get_Timestamp()
    @_property
    def timestamp(self) -> datetime.datetime: ...

@typing.final
class GeoboundingBox_Static(type):
    # Windows.Devices.Geolocation.GeoboundingBox Windows.Devices.Geolocation.GeoboundingBox::TryCompute(Windows.Foundation.Collections.IIterable`1<Windows.Devices.Geolocation.BasicGeoposition>)
    def try_compute(cls, positions: typing.Iterable[BasicGeoposition], /) -> GeoboundingBox: ...
    # Windows.Devices.Geolocation.GeoboundingBox Windows.Devices.Geolocation.GeoboundingBox::TryCompute(Windows.Foundation.Collections.IIterable`1<Windows.Devices.Geolocation.BasicGeoposition>,Windows.Devices.Geolocation.AltitudeReferenceSystem)
    def try_compute_with_altitude_reference(cls, positions: typing.Iterable[BasicGeoposition], altitude_ref_system: AltitudeReferenceSystem, /) -> GeoboundingBox: ...
    # Windows.Devices.Geolocation.GeoboundingBox Windows.Devices.Geolocation.GeoboundingBox::TryCompute(Windows.Foundation.Collections.IIterable`1<Windows.Devices.Geolocation.BasicGeoposition>,Windows.Devices.Geolocation.AltitudeReferenceSystem,System.UInt32)
    def try_compute_with_altitude_reference_and_spatial_reference(cls, positions: typing.Iterable[BasicGeoposition], altitude_ref_system: AltitudeReferenceSystem, spatial_reference_id: winrt.system.UInt32, /) -> GeoboundingBox: ...

@typing.final
class GeoboundingBox(winrt.system.Object, ImplementsIGeoshape, metaclass=GeoboundingBox_Static):
    @typing.overload
    def __new__(cls: typing.Type[Self], northwest_corner: BasicGeoposition, southeast_corner: BasicGeoposition) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], northwest_corner: BasicGeoposition, southeast_corner: BasicGeoposition, altitude_reference_system: AltitudeReferenceSystem) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], northwest_corner: BasicGeoposition, southeast_corner: BasicGeoposition, altitude_reference_system: AltitudeReferenceSystem, spatial_reference_id: winrt.system.UInt32) -> Self: ...
    # Windows.Devices.Geolocation.BasicGeoposition Windows.Devices.Geolocation.GeoboundingBox::get_Center()
    @_property
    def center(self) -> BasicGeoposition: ...
    # System.Double Windows.Devices.Geolocation.GeoboundingBox::get_MaxAltitude()
    @_property
    def max_altitude(self) -> winrt.system.Double: ...
    # System.Double Windows.Devices.Geolocation.GeoboundingBox::get_MinAltitude()
    @_property
    def min_altitude(self) -> winrt.system.Double: ...
    # Windows.Devices.Geolocation.BasicGeoposition Windows.Devices.Geolocation.GeoboundingBox::get_NorthwestCorner()
    @_property
    def northwest_corner(self) -> BasicGeoposition: ...
    # Windows.Devices.Geolocation.BasicGeoposition Windows.Devices.Geolocation.GeoboundingBox::get_SoutheastCorner()
    @_property
    def southeast_corner(self) -> BasicGeoposition: ...
    # Windows.Devices.Geolocation.AltitudeReferenceSystem Windows.Devices.Geolocation.GeoboundingBox::get_AltitudeReferenceSystem()
    @_property
    def altitude_reference_system(self) -> AltitudeReferenceSystem: ...
    # Windows.Devices.Geolocation.GeoshapeType Windows.Devices.Geolocation.GeoboundingBox::get_GeoshapeType()
    @_property
    def geoshape_type(self) -> GeoshapeType: ...
    # System.UInt32 Windows.Devices.Geolocation.GeoboundingBox::get_SpatialReferenceId()
    @_property
    def spatial_reference_id(self) -> winrt.system.UInt32: ...

@typing.final
class Geocircle(winrt.system.Object, ImplementsIGeoshape):
    @typing.overload
    def __new__(cls: typing.Type[Self], position: BasicGeoposition, radius: winrt.system.Double) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], position: BasicGeoposition, radius: winrt.system.Double, altitude_reference_system: AltitudeReferenceSystem) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], position: BasicGeoposition, radius: winrt.system.Double, altitude_reference_system: AltitudeReferenceSystem, spatial_reference_id: winrt.system.UInt32) -> Self: ...
    # Windows.Devices.Geolocation.BasicGeoposition Windows.Devices.Geolocation.Geocircle::get_Center()
    @_property
    def center(self) -> BasicGeoposition: ...
    # System.Double Windows.Devices.Geolocation.Geocircle::get_Radius()
    @_property
    def radius(self) -> winrt.system.Double: ...
    # Windows.Devices.Geolocation.AltitudeReferenceSystem Windows.Devices.Geolocation.Geocircle::get_AltitudeReferenceSystem()
    @_property
    def altitude_reference_system(self) -> AltitudeReferenceSystem: ...
    # Windows.Devices.Geolocation.GeoshapeType Windows.Devices.Geolocation.Geocircle::get_GeoshapeType()
    @_property
    def geoshape_type(self) -> GeoshapeType: ...
    # System.UInt32 Windows.Devices.Geolocation.Geocircle::get_SpatialReferenceId()
    @_property
    def spatial_reference_id(self) -> winrt.system.UInt32: ...

@typing.final
class Geocoordinate(winrt.system.Object):
    # System.Double Windows.Devices.Geolocation.Geocoordinate::get_Accuracy()
    @_property
    def accuracy(self) -> winrt.system.Double: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Devices.Geolocation.Geocoordinate::get_Altitude()
    @_property
    def altitude(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Devices.Geolocation.Geocoordinate::get_AltitudeAccuracy()
    @_property
    def altitude_accuracy(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Devices.Geolocation.Geocoordinate::get_Heading()
    @_property
    def heading(self) -> typing.Optional[winrt.system.Double]: ...
    # System.Double Windows.Devices.Geolocation.Geocoordinate::get_Latitude()
    @_property
    def latitude(self) -> winrt.system.Double: ...
    # System.Double Windows.Devices.Geolocation.Geocoordinate::get_Longitude()
    @_property
    def longitude(self) -> winrt.system.Double: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Devices.Geolocation.Geocoordinate::get_Speed()
    @_property
    def speed(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.DateTime Windows.Devices.Geolocation.Geocoordinate::get_Timestamp()
    @_property
    def timestamp(self) -> datetime.datetime: ...
    # Windows.Devices.Geolocation.Geopoint Windows.Devices.Geolocation.Geocoordinate::get_Point()
    @_property
    def point(self) -> Geopoint: ...
    # Windows.Devices.Geolocation.PositionSource Windows.Devices.Geolocation.Geocoordinate::get_PositionSource()
    @_property
    def position_source(self) -> PositionSource: ...
    # Windows.Devices.Geolocation.GeocoordinateSatelliteData Windows.Devices.Geolocation.Geocoordinate::get_SatelliteData()
    @_property
    def satellite_data(self) -> GeocoordinateSatelliteData: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.DateTime> Windows.Devices.Geolocation.Geocoordinate::get_PositionSourceTimestamp()
    @_property
    def position_source_timestamp(self) -> typing.Optional[datetime.datetime]: ...
    # System.Boolean Windows.Devices.Geolocation.Geocoordinate::get_IsRemoteSource()
    @_property
    def is_remote_source(self) -> bool: ...

@typing.final
class GeocoordinateSatelliteData(winrt.system.Object):
    # Windows.Foundation.IReference`1<System.Double> Windows.Devices.Geolocation.GeocoordinateSatelliteData::get_HorizontalDilutionOfPrecision()
    @_property
    def horizontal_dilution_of_precision(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Devices.Geolocation.GeocoordinateSatelliteData::get_PositionDilutionOfPrecision()
    @_property
    def position_dilution_of_precision(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Devices.Geolocation.GeocoordinateSatelliteData::get_VerticalDilutionOfPrecision()
    @_property
    def vertical_dilution_of_precision(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Devices.Geolocation.GeocoordinateSatelliteData::get_GeometricDilutionOfPrecision()
    @_property
    def geometric_dilution_of_precision(self) -> typing.Optional[winrt.system.Double]: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.Devices.Geolocation.GeocoordinateSatelliteData::get_TimeDilutionOfPrecision()
    @_property
    def time_dilution_of_precision(self) -> typing.Optional[winrt.system.Double]: ...

@typing.final
class Geolocator_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Geolocation.Geoposition>> Windows.Devices.Geolocation.Geolocator::GetGeopositionHistoryAsync(Windows.Foundation.DateTime)
    def get_geoposition_history_async(cls, start_time: datetime.datetime, /) -> windows_foundation.IAsyncOperation[typing.Sequence[Geoposition]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Geolocation.Geoposition>> Windows.Devices.Geolocation.Geolocator::GetGeopositionHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)
    def get_geoposition_history_with_duration_async(cls, start_time: datetime.datetime, duration: datetime.timedelta, /) -> windows_foundation.IAsyncOperation[typing.Sequence[Geoposition]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Geolocation.GeolocationAccessStatus> Windows.Devices.Geolocation.Geolocator::RequestAccessAsync()
    def request_access_async(cls) -> windows_foundation.IAsyncOperation[GeolocationAccessStatus]: ...
    # Windows.Foundation.IReference`1<Windows.Devices.Geolocation.BasicGeoposition> Windows.Devices.Geolocation.Geolocator::get_DefaultGeoposition()
    @_property
    def default_geoposition(cls) -> typing.Optional[BasicGeoposition]: ...
    # System.Void Windows.Devices.Geolocation.Geolocator::put_DefaultGeoposition(Windows.Foundation.IReference`1<Windows.Devices.Geolocation.BasicGeoposition>)
    @default_geoposition.setter
    def default_geoposition(cls, value: typing.Optional[BasicGeoposition]) -> None: ...
    # System.Boolean Windows.Devices.Geolocation.Geolocator::get_IsDefaultGeopositionRecommended()
    @_property
    def is_default_geoposition_recommended(cls) -> bool: ...

@typing.final
class Geolocator(winrt.system.Object, metaclass=Geolocator_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.Devices.Geolocation.Geolocator::AllowFallbackToConsentlessPositions()
    def allow_fallback_to_consentless_positions(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Geolocation.Geoposition> Windows.Devices.Geolocation.Geolocator::GetGeopositionAsync()
    def get_geoposition_async(self) -> windows_foundation.IAsyncOperation[Geoposition]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Geolocation.Geoposition> Windows.Devices.Geolocation.Geolocator::GetGeopositionAsync(Windows.Foundation.TimeSpan,Windows.Foundation.TimeSpan)
    def get_geoposition_async_with_age_and_timeout(self, maximum_age: datetime.timedelta, timeout: datetime.timedelta, /) -> windows_foundation.IAsyncOperation[Geoposition]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.Geolocation.Geolocator::add_PositionChanged(Windows.Foundation.TypedEventHandler`2<Windows.Devices.Geolocation.Geolocator,Windows.Devices.Geolocation.PositionChangedEventArgs>)
    def add_position_changed(self, handler: windows_foundation.TypedEventHandler[Geolocator, PositionChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.Geolocation.Geolocator::remove_PositionChanged(Windows.Foundation.EventRegistrationToken)
    def remove_position_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.Geolocation.Geolocator::add_StatusChanged(Windows.Foundation.TypedEventHandler`2<Windows.Devices.Geolocation.Geolocator,Windows.Devices.Geolocation.StatusChangedEventArgs>)
    def add_status_changed(self, handler: windows_foundation.TypedEventHandler[Geolocator, StatusChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.Geolocation.Geolocator::remove_StatusChanged(Windows.Foundation.EventRegistrationToken)
    def remove_status_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.UInt32 Windows.Devices.Geolocation.Geolocator::get_ReportInterval()
    @_property
    def report_interval(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.Geolocation.Geolocator::put_ReportInterval(System.UInt32)
    @report_interval.setter
    def report_interval(self, value: winrt.system.UInt32) -> None: ...
    # System.Double Windows.Devices.Geolocation.Geolocator::get_MovementThreshold()
    @_property
    def movement_threshold(self) -> winrt.system.Double: ...
    # System.Void Windows.Devices.Geolocation.Geolocator::put_MovementThreshold(System.Double)
    @movement_threshold.setter
    def movement_threshold(self, value: winrt.system.Double) -> None: ...
    # Windows.Devices.Geolocation.PositionAccuracy Windows.Devices.Geolocation.Geolocator::get_DesiredAccuracy()
    @_property
    def desired_accuracy(self) -> PositionAccuracy: ...
    # System.Void Windows.Devices.Geolocation.Geolocator::put_DesiredAccuracy(Windows.Devices.Geolocation.PositionAccuracy)
    @desired_accuracy.setter
    def desired_accuracy(self, value: PositionAccuracy) -> None: ...
    # Windows.Devices.Geolocation.PositionStatus Windows.Devices.Geolocation.Geolocator::get_LocationStatus()
    @_property
    def location_status(self) -> PositionStatus: ...
    # Windows.Foundation.IReference`1<System.UInt32> Windows.Devices.Geolocation.Geolocator::get_DesiredAccuracyInMeters()
    @_property
    def desired_accuracy_in_meters(self) -> typing.Optional[winrt.system.UInt32]: ...
    # System.Void Windows.Devices.Geolocation.Geolocator::put_DesiredAccuracyInMeters(Windows.Foundation.IReference`1<System.UInt32>)
    @desired_accuracy_in_meters.setter
    def desired_accuracy_in_meters(self, value: typing.Optional[winrt.system.UInt32]) -> None: ...

@typing.final
class Geopath(winrt.system.Object, ImplementsIGeoshape):
    @typing.overload
    def __new__(cls: typing.Type[Self], positions: typing.Iterable[BasicGeoposition]) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], positions: typing.Iterable[BasicGeoposition], altitude_reference_system: AltitudeReferenceSystem) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], positions: typing.Iterable[BasicGeoposition], altitude_reference_system: AltitudeReferenceSystem, spatial_reference_id: winrt.system.UInt32) -> Self: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Geolocation.BasicGeoposition> Windows.Devices.Geolocation.Geopath::get_Positions()
    @_property
    def positions(self) -> typing.Sequence[BasicGeoposition]: ...
    # Windows.Devices.Geolocation.AltitudeReferenceSystem Windows.Devices.Geolocation.Geopath::get_AltitudeReferenceSystem()
    @_property
    def altitude_reference_system(self) -> AltitudeReferenceSystem: ...
    # Windows.Devices.Geolocation.GeoshapeType Windows.Devices.Geolocation.Geopath::get_GeoshapeType()
    @_property
    def geoshape_type(self) -> GeoshapeType: ...
    # System.UInt32 Windows.Devices.Geolocation.Geopath::get_SpatialReferenceId()
    @_property
    def spatial_reference_id(self) -> winrt.system.UInt32: ...

@typing.final
class Geopoint(winrt.system.Object, ImplementsIGeoshape):
    @typing.overload
    def __new__(cls: typing.Type[Self], position: BasicGeoposition) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], position: BasicGeoposition, altitude_reference_system: AltitudeReferenceSystem) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], position: BasicGeoposition, altitude_reference_system: AltitudeReferenceSystem, spatial_reference_id: winrt.system.UInt32) -> Self: ...
    # Windows.Devices.Geolocation.BasicGeoposition Windows.Devices.Geolocation.Geopoint::get_Position()
    @_property
    def position(self) -> BasicGeoposition: ...
    # Windows.Devices.Geolocation.AltitudeReferenceSystem Windows.Devices.Geolocation.Geopoint::get_AltitudeReferenceSystem()
    @_property
    def altitude_reference_system(self) -> AltitudeReferenceSystem: ...
    # Windows.Devices.Geolocation.GeoshapeType Windows.Devices.Geolocation.Geopoint::get_GeoshapeType()
    @_property
    def geoshape_type(self) -> GeoshapeType: ...
    # System.UInt32 Windows.Devices.Geolocation.Geopoint::get_SpatialReferenceId()
    @_property
    def spatial_reference_id(self) -> winrt.system.UInt32: ...

@typing.final
class Geoposition(winrt.system.Object):
    # Windows.Devices.Geolocation.CivicAddress Windows.Devices.Geolocation.Geoposition::get_CivicAddress()
    @_property
    def civic_address(self) -> CivicAddress: ...
    # Windows.Devices.Geolocation.Geocoordinate Windows.Devices.Geolocation.Geoposition::get_Coordinate()
    @_property
    def coordinate(self) -> Geocoordinate: ...
    # Windows.Devices.Geolocation.VenueData Windows.Devices.Geolocation.Geoposition::get_VenueData()
    @_property
    def venue_data(self) -> VenueData: ...

@typing.final
class Geovisit(winrt.system.Object):
    # Windows.Devices.Geolocation.Geoposition Windows.Devices.Geolocation.Geovisit::get_Position()
    @_property
    def position(self) -> Geoposition: ...
    # Windows.Devices.Geolocation.VisitStateChange Windows.Devices.Geolocation.Geovisit::get_StateChange()
    @_property
    def state_change(self) -> VisitStateChange: ...
    # Windows.Foundation.DateTime Windows.Devices.Geolocation.Geovisit::get_Timestamp()
    @_property
    def timestamp(self) -> datetime.datetime: ...

@typing.final
class GeovisitMonitor_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Geolocation.Geovisit> Windows.Devices.Geolocation.GeovisitMonitor::GetLastReportAsync()
    def get_last_report_async(cls) -> windows_foundation.IAsyncOperation[Geovisit]: ...

@typing.final
class GeovisitMonitor(winrt.system.Object, metaclass=GeovisitMonitor_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.Devices.Geolocation.GeovisitMonitor::Start(Windows.Devices.Geolocation.VisitMonitoringScope)
    def start(self, value: VisitMonitoringScope, /) -> None: ...
    # System.Void Windows.Devices.Geolocation.GeovisitMonitor::Stop()
    def stop(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.Geolocation.GeovisitMonitor::add_VisitStateChanged(Windows.Foundation.TypedEventHandler`2<Windows.Devices.Geolocation.GeovisitMonitor,Windows.Devices.Geolocation.GeovisitStateChangedEventArgs>)
    def add_visit_state_changed(self, handler: windows_foundation.TypedEventHandler[GeovisitMonitor, GeovisitStateChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.Geolocation.GeovisitMonitor::remove_VisitStateChanged(Windows.Foundation.EventRegistrationToken)
    def remove_visit_state_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Devices.Geolocation.VisitMonitoringScope Windows.Devices.Geolocation.GeovisitMonitor::get_MonitoringScope()
    @_property
    def monitoring_scope(self) -> VisitMonitoringScope: ...

@typing.final
class GeovisitStateChangedEventArgs(winrt.system.Object):
    # Windows.Devices.Geolocation.Geovisit Windows.Devices.Geolocation.GeovisitStateChangedEventArgs::get_Visit()
    @_property
    def visit(self) -> Geovisit: ...

@typing.final
class GeovisitTriggerDetails(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Geolocation.Geovisit> Windows.Devices.Geolocation.GeovisitTriggerDetails::ReadReports()
    def read_reports(self) -> typing.Sequence[Geovisit]: ...

@typing.final
class PositionChangedEventArgs(winrt.system.Object):
    # Windows.Devices.Geolocation.Geoposition Windows.Devices.Geolocation.PositionChangedEventArgs::get_Position()
    @_property
    def position(self) -> Geoposition: ...

@typing.final
class StatusChangedEventArgs(winrt.system.Object):
    # Windows.Devices.Geolocation.PositionStatus Windows.Devices.Geolocation.StatusChangedEventArgs::get_Status()
    @_property
    def status(self) -> PositionStatus: ...

@typing.final
class VenueData(winrt.system.Object):
    # System.String Windows.Devices.Geolocation.VenueData::get_Id()
    @_property
    def id(self) -> str: ...
    # System.String Windows.Devices.Geolocation.VenueData::get_Level()
    @_property
    def level(self) -> str: ...

class ImplementsIGeoshape():
    # Windows.Devices.Geolocation.AltitudeReferenceSystem Windows.Devices.Geolocation.IGeoshape::get_AltitudeReferenceSystem()
    @_property
    @abstractmethod
    def altitude_reference_system(self) -> AltitudeReferenceSystem: ...
    # Windows.Devices.Geolocation.GeoshapeType Windows.Devices.Geolocation.IGeoshape::get_GeoshapeType()
    @_property
    @abstractmethod
    def geoshape_type(self) -> GeoshapeType: ...
    # System.UInt32 Windows.Devices.Geolocation.IGeoshape::get_SpatialReferenceId()
    @_property
    @abstractmethod
    def spatial_reference_id(self) -> winrt.system.UInt32: ...

@typing.final
class IGeoshape(winrt.system.Object, ImplementsIGeoshape):
    # Windows.Devices.Geolocation.AltitudeReferenceSystem Windows.Devices.Geolocation.IGeoshape::get_AltitudeReferenceSystem()
    @_property
    def altitude_reference_system(self) -> AltitudeReferenceSystem: ...
    # Windows.Devices.Geolocation.GeoshapeType Windows.Devices.Geolocation.IGeoshape::get_GeoshapeType()
    @_property
    def geoshape_type(self) -> GeoshapeType: ...
    # System.UInt32 Windows.Devices.Geolocation.IGeoshape::get_SpatialReferenceId()
    @_property
    def spatial_reference_id(self) -> winrt.system.UInt32: ...

