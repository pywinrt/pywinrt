# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel
import winrt.windows.applicationmodel.activation
import winrt.windows.applicationmodel.appointments.appointmentsprovider
import winrt.windows.applicationmodel.background
import winrt.windows.applicationmodel.calls
import winrt.windows.applicationmodel.contacts
import winrt.windows.applicationmodel.contacts.provider
import winrt.windows.applicationmodel.core
import winrt.windows.applicationmodel.datatransfer
import winrt.windows.applicationmodel.datatransfer.sharetarget
import winrt.windows.applicationmodel.search
import winrt.windows.applicationmodel.userdataaccounts.provider
import winrt.windows.applicationmodel.wallet
import winrt.windows.devices.enumeration
import winrt.windows.devices.printers.extensions
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.media.speechrecognition
import winrt.windows.security.authentication.web
import winrt.windows.security.authentication.web.provider
import winrt.windows.storage
import winrt.windows.storage.pickers.provider
import winrt.windows.storage.provider
import winrt.windows.storage.search
import winrt.windows.storage.streams
import winrt.windows.system
import winrt.windows.ui
import winrt.windows.web
import winrt.windows.web.http
import winrt.windows.web.ui

from winrt.windows.ui.webui import PrintContent
from winrt.windows.ui.webui import ActivatedEventHandler, BackgroundActivatedEventHandler, EnteredBackgroundEventHandler, LeavingBackgroundEventHandler, NavigatedEventHandler, ResumingEventHandler, SuspendingEventHandler

Self = typing.TypeVar('Self')

@typing.final
class ActivatedDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ActivatedDeferral: ...
    def complete(self) -> None: ...

@typing.final
class ActivatedOperation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ActivatedOperation: ...
    def get_deferral(self) -> typing.Optional[ActivatedDeferral]: ...

@typing.final
class BackgroundActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundActivatedEventArgs: ...
    @_property
    def task_instance(self) -> typing.Optional[winrt.windows.applicationmodel.background.IBackgroundTaskInstance]: ...

@typing.final
class EnteredBackgroundEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EnteredBackgroundEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

@typing.final
class HtmlPrintDocumentSource(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HtmlPrintDocumentSource: ...
    def close(self) -> None: ...
    def try_set_page_range(self, str_page_range: str, /) -> bool: ...
    @_property
    def top_margin(self) -> winrt.system.Single: ...
    @top_margin.setter
    def top_margin(self, value: winrt.system.Single) -> None: ...
    @_property
    def shrink_to_fit(self) -> bool: ...
    @shrink_to_fit.setter
    def shrink_to_fit(self, value: bool) -> None: ...
    @_property
    def right_margin(self) -> winrt.system.Single: ...
    @right_margin.setter
    def right_margin(self, value: winrt.system.Single) -> None: ...
    @_property
    def percent_scale(self) -> winrt.system.Single: ...
    @percent_scale.setter
    def percent_scale(self, value: winrt.system.Single) -> None: ...
    @_property
    def left_margin(self) -> winrt.system.Single: ...
    @left_margin.setter
    def left_margin(self, value: winrt.system.Single) -> None: ...
    @_property
    def enable_header_footer(self) -> bool: ...
    @enable_header_footer.setter
    def enable_header_footer(self, value: bool) -> None: ...
    @_property
    def content(self) -> PrintContent: ...
    @content.setter
    def content(self, value: PrintContent) -> None: ...
    @_property
    def bottom_margin(self) -> winrt.system.Single: ...
    @bottom_margin.setter
    def bottom_margin(self, value: winrt.system.Single) -> None: ...
    @_property
    def page_range(self) -> str: ...

@typing.final
class LeavingBackgroundEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LeavingBackgroundEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

@typing.final
class NewWebUIViewCreatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NewWebUIViewCreatedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    @_property
    def activated_event_args(self) -> typing.Optional[winrt.windows.applicationmodel.activation.IActivatedEventArgs]: ...
    @_property
    def has_pending_navigate(self) -> bool: ...
    @_property
    def web_u_i_view(self) -> typing.Optional[WebUIView]: ...

@typing.final
class SuspendingDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SuspendingDeferral: ...
    def complete(self) -> None: ...

@typing.final
class SuspendingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SuspendingEventArgs: ...
    @_property
    def suspending_operation(self) -> typing.Optional[winrt.windows.applicationmodel.SuspendingOperation]: ...

@typing.final
class SuspendingOperation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SuspendingOperation: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.applicationmodel.SuspendingDeferral]: ...
    @_property
    def deadline(self) -> datetime.datetime: ...

@typing.final
class WebUIApplication_Static(type):
    def enable_prelaunch(cls, value: bool, /) -> None: ...
    def request_restart_async(cls, launch_arguments: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.applicationmodel.core.AppRestartFailureReason]: ...
    def request_restart_for_user_async(cls, user: typing.Optional[winrt.windows.system.User], launch_arguments: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.applicationmodel.core.AppRestartFailureReason]: ...
    def add_background_activated(cls, handler: typing.Optional[BackgroundActivatedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_background_activated(cls, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_new_web_u_i_view_created(cls, handler: winrt.windows.foundation.EventHandler[NewWebUIViewCreatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_new_web_u_i_view_created(cls, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_entered_background(cls, handler: typing.Optional[EnteredBackgroundEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_entered_background(cls, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_leaving_background(cls, handler: typing.Optional[LeavingBackgroundEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_leaving_background(cls, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_activated(cls, handler: typing.Optional[ActivatedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_activated(cls, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_navigated(cls, handler: typing.Optional[NavigatedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_navigated(cls, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_resuming(cls, handler: typing.Optional[ResumingEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_resuming(cls, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_suspending(cls, handler: typing.Optional[SuspendingEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_suspending(cls, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class WebUIApplication(winrt.system.Object, metaclass=WebUIApplication_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIApplication: ...

@typing.final
class WebUIAppointmentsProviderAddAppointmentActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIAppointmentsProviderAddAppointmentActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def verb(self) -> str: ...
    @_property
    def add_appointment_operation(self) -> typing.Optional[winrt.windows.applicationmodel.appointments.appointmentsprovider.AddAppointmentOperation]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def verb(self) -> str: ...
    @_property
    def remove_appointment_operation(self) -> typing.Optional[winrt.windows.applicationmodel.appointments.appointmentsprovider.RemoveAppointmentOperation]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def verb(self) -> str: ...
    @_property
    def replace_appointment_operation(self) -> typing.Optional[winrt.windows.applicationmodel.appointments.appointmentsprovider.ReplaceAppointmentOperation]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def verb(self) -> str: ...
    @_property
    def instance_start_date(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @_property
    def local_id(self) -> str: ...
    @_property
    def roaming_id(self) -> str: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def verb(self) -> str: ...
    @_property
    def duration(self) -> datetime.timedelta: ...
    @_property
    def time_to_show(self) -> datetime.datetime: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIBackgroundTaskInstance_Static(type):
    @_property
    def current(cls) -> typing.Optional[IWebUIBackgroundTaskInstance]: ...

@typing.final
class WebUIBackgroundTaskInstance(winrt.system.Object, metaclass=WebUIBackgroundTaskInstance_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIBackgroundTaskInstance: ...

@typing.final
class WebUIBackgroundTaskInstanceRuntimeClass(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIBackgroundTaskInstanceRuntimeClass: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.applicationmodel.background.BackgroundTaskDeferral]: ...
    def add_canceled(self, cancel_handler: typing.Optional[winrt.windows.applicationmodel.background.BackgroundTaskCanceledEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_canceled(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def progress(self) -> winrt.system.UInt32: ...
    @progress.setter
    def progress(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def instance_id(self) -> _uuid.UUID: ...
    @_property
    def suspended_count(self) -> winrt.system.UInt32: ...
    @_property
    def task(self) -> typing.Optional[winrt.windows.applicationmodel.background.BackgroundTaskRegistration]: ...
    @_property
    def trigger_details(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def succeeded(self) -> bool: ...
    @succeeded.setter
    def succeeded(self, value: bool) -> None: ...

@typing.final
class WebUIBarcodeScannerPreviewActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIBarcodeScannerPreviewActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def connection_id(self) -> str: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUICachedFileUpdaterActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICachedFileUpdaterActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def cached_file_updater_u_i(self) -> typing.Optional[winrt.windows.storage.provider.CachedFileUpdaterUI]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUICameraSettingsActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICameraSettingsActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def video_device_controller(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def video_device_extension(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUICommandLineActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICommandLineActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def operation(self) -> typing.Optional[winrt.windows.applicationmodel.activation.CommandLineActivationOperation]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIContactCallActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIContactCallActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def verb(self) -> str: ...
    @_property
    def contact(self) -> typing.Optional[winrt.windows.applicationmodel.contacts.Contact]: ...
    @_property
    def service_id(self) -> str: ...
    @_property
    def service_user_id(self) -> str: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIContactMapActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIContactMapActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def verb(self) -> str: ...
    @_property
    def address(self) -> typing.Optional[winrt.windows.applicationmodel.contacts.ContactAddress]: ...
    @_property
    def contact(self) -> typing.Optional[winrt.windows.applicationmodel.contacts.Contact]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIContactMessageActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIContactMessageActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def verb(self) -> str: ...
    @_property
    def contact(self) -> typing.Optional[winrt.windows.applicationmodel.contacts.Contact]: ...
    @_property
    def service_id(self) -> str: ...
    @_property
    def service_user_id(self) -> str: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIContactPanelActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIContactPanelActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def contact(self) -> typing.Optional[winrt.windows.applicationmodel.contacts.Contact]: ...
    @_property
    def contact_panel(self) -> typing.Optional[winrt.windows.applicationmodel.contacts.ContactPanel]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIContactPickerActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIContactPickerActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def contact_picker_u_i(self) -> typing.Optional[winrt.windows.applicationmodel.contacts.provider.ContactPickerUI]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIContactPostActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIContactPostActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def verb(self) -> str: ...
    @_property
    def contact(self) -> typing.Optional[winrt.windows.applicationmodel.contacts.Contact]: ...
    @_property
    def service_id(self) -> str: ...
    @_property
    def service_user_id(self) -> str: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIContactVideoCallActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIContactVideoCallActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def verb(self) -> str: ...
    @_property
    def contact(self) -> typing.Optional[winrt.windows.applicationmodel.contacts.Contact]: ...
    @_property
    def service_id(self) -> str: ...
    @_property
    def service_user_id(self) -> str: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIDeviceActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIDeviceActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def currently_shown_application_view_id(self) -> winrt.system.Int32: ...
    @_property
    def device_information_id(self) -> str: ...
    @_property
    def verb(self) -> str: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIDevicePairingActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIDevicePairingActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def device_information(self) -> typing.Optional[winrt.windows.devices.enumeration.DeviceInformation]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIDialReceiverActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIDialReceiverActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def currently_shown_application_view_id(self) -> winrt.system.Int32: ...
    @_property
    def app_name(self) -> str: ...
    @_property
    def arguments(self) -> str: ...
    @_property
    def tile_id(self) -> str: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIFileActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIFileActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def currently_shown_application_view_id(self) -> winrt.system.Int32: ...
    @_property
    def files(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.IStorageItem]]: ...
    @_property
    def verb(self) -> str: ...
    @_property
    def neighboring_files_query(self) -> typing.Optional[winrt.windows.storage.search.StorageFileQueryResult]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIFileOpenPickerActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIFileOpenPickerActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def file_open_picker_u_i(self) -> typing.Optional[winrt.windows.storage.pickers.provider.FileOpenPickerUI]: ...
    @_property
    def caller_package_family_name(self) -> str: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIFileOpenPickerContinuationEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIFileOpenPickerContinuationEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def continuation_data(self) -> typing.Optional[winrt.windows.foundation.collections.ValueSet]: ...
    @_property
    def files(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.storage.StorageFile]]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIFileSavePickerActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIFileSavePickerActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def file_save_picker_u_i(self) -> typing.Optional[winrt.windows.storage.pickers.provider.FileSavePickerUI]: ...
    @_property
    def caller_package_family_name(self) -> str: ...
    @_property
    def enterprise_id(self) -> str: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIFileSavePickerContinuationEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIFileSavePickerContinuationEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def continuation_data(self) -> typing.Optional[winrt.windows.foundation.collections.ValueSet]: ...
    @_property
    def file(self) -> typing.Optional[winrt.windows.storage.StorageFile]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIFolderPickerContinuationEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIFolderPickerContinuationEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def continuation_data(self) -> typing.Optional[winrt.windows.foundation.collections.ValueSet]: ...
    @_property
    def folder(self) -> typing.Optional[winrt.windows.storage.StorageFolder]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUILaunchActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUILaunchActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def currently_shown_application_view_id(self) -> winrt.system.Int32: ...
    @_property
    def arguments(self) -> str: ...
    @_property
    def tile_id(self) -> str: ...
    @_property
    def tile_activated_info(self) -> typing.Optional[winrt.windows.applicationmodel.activation.TileActivatedInfo]: ...
    @_property
    def prelaunch_activated(self) -> bool: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUILockScreenActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUILockScreenActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def currently_shown_application_view_id(self) -> winrt.system.Int32: ...
    @_property
    def info(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUILockScreenCallActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUILockScreenCallActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def currently_shown_application_view_id(self) -> winrt.system.Int32: ...
    @_property
    def arguments(self) -> str: ...
    @_property
    def tile_id(self) -> str: ...
    @_property
    def call_u_i(self) -> typing.Optional[winrt.windows.applicationmodel.calls.LockScreenCallUI]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUILockScreenComponentActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUILockScreenComponentActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUINavigatedDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUINavigatedDeferral: ...
    def complete(self) -> None: ...

@typing.final
class WebUINavigatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUINavigatedEventArgs: ...
    @_property
    def navigated_operation(self) -> typing.Optional[WebUINavigatedOperation]: ...

@typing.final
class WebUINavigatedOperation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUINavigatedOperation: ...
    def get_deferral(self) -> typing.Optional[WebUINavigatedDeferral]: ...

@typing.final
class WebUIPhoneCallActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIPhoneCallActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def line_id(self) -> _uuid.UUID: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIPrint3DWorkflowActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIPrint3DWorkflowActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def workflow(self) -> typing.Optional[winrt.windows.devices.printers.extensions.Print3DWorkflow]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIPrintTaskSettingsActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIPrintTaskSettingsActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def configuration(self) -> typing.Optional[winrt.windows.devices.printers.extensions.PrintTaskConfiguration]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIPrintWorkflowForegroundTaskActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIPrintWorkflowForegroundTaskActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIProtocolActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIProtocolActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def currently_shown_application_view_id(self) -> winrt.system.Int32: ...
    @_property
    def uri(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @_property
    def caller_package_family_name(self) -> str: ...
    @_property
    def data(self) -> typing.Optional[winrt.windows.foundation.collections.ValueSet]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIProtocolForResultsActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIProtocolForResultsActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def currently_shown_application_view_id(self) -> winrt.system.Int32: ...
    @_property
    def uri(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @_property
    def caller_package_family_name(self) -> str: ...
    @_property
    def data(self) -> typing.Optional[winrt.windows.foundation.collections.ValueSet]: ...
    @_property
    def protocol_for_results_operation(self) -> typing.Optional[winrt.windows.system.ProtocolForResultsOperation]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIRestrictedLaunchActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIRestrictedLaunchActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def shared_context(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUISearchActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUISearchActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def currently_shown_application_view_id(self) -> winrt.system.Int32: ...
    @_property
    def language(self) -> str: ...
    @_property
    def query_text(self) -> str: ...
    @_property
    def linguistic_details(self) -> typing.Optional[winrt.windows.applicationmodel.search.SearchPaneQueryLinguisticDetails]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIShareTargetActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIShareTargetActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def share_operation(self) -> typing.Optional[winrt.windows.applicationmodel.datatransfer.sharetarget.ShareOperation]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIStartupTaskActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIStartupTaskActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def task_id(self) -> str: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIToastNotificationActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIToastNotificationActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def argument(self) -> str: ...
    @_property
    def user_input(self) -> typing.Optional[winrt.windows.foundation.collections.ValueSet]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIUserDataAccountProviderActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIUserDataAccountProviderActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def operation(self) -> typing.Optional[winrt.windows.applicationmodel.userdataaccounts.provider.IUserDataAccountProviderOperation]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIView_Static(type):
    @typing.overload
    def create_async(cls) -> winrt.windows.foundation.IAsyncOperation[WebUIView]: ...
    @typing.overload
    def create_async(cls, uri: typing.Optional[winrt.windows.foundation.Uri], /) -> winrt.windows.foundation.IAsyncOperation[WebUIView]: ...

@typing.final
class WebUIView(winrt.system.Object, metaclass=WebUIView_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIView: ...
    def add_initialize_script(self, script: str, /) -> None: ...
    def build_local_stream_uri(self, content_identifier: str, relative_path: str, /) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    def capture_preview_to_stream_async(self, stream: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> winrt.windows.foundation.IAsyncAction: ...
    def capture_selected_content_to_data_package_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.applicationmodel.datatransfer.DataPackage]: ...
    def get_deferred_permission_request_by_id(self, id: winrt.system.UInt32, /) -> typing.Optional[winrt.windows.web.ui.WebViewControlDeferredPermissionRequest]: ...
    def go_back(self) -> None: ...
    def go_forward(self) -> None: ...
    def invoke_script_async(self, script_name: str, arguments: typing.Iterable[str], /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def navigate(self, source: typing.Optional[winrt.windows.foundation.Uri], /) -> None: ...
    def navigate_to_local_stream_uri(self, source: typing.Optional[winrt.windows.foundation.Uri], stream_resolver: typing.Optional[winrt.windows.web.IUriToStreamResolver], /) -> None: ...
    def navigate_to_string(self, text: str, /) -> None: ...
    def navigate_with_http_request_message(self, request_message: typing.Optional[winrt.windows.web.http.HttpRequestMessage], /) -> None: ...
    def refresh(self) -> None: ...
    def stop(self) -> None: ...
    def add_activated(self, handler: winrt.windows.foundation.TypedEventHandler[WebUIView, winrt.windows.applicationmodel.activation.IActivatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_activated(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: winrt.windows.foundation.TypedEventHandler[WebUIView, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_contains_full_screen_element_changed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_contains_full_screen_element_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_content_loading(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlContentLoadingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_content_loading(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_d_o_m_content_loaded(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlDOMContentLoadedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_d_o_m_content_loaded(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_content_loading(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlContentLoadingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_frame_content_loading(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_d_o_m_content_loaded(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlDOMContentLoadedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_frame_d_o_m_content_loaded(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_navigation_completed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlNavigationCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_frame_navigation_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_navigation_starting(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlNavigationStartingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_frame_navigation_starting(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_long_running_script_detected(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlLongRunningScriptDetectedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_long_running_script_detected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_navigation_completed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlNavigationCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_navigation_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_navigation_starting(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlNavigationStartingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_navigation_starting(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_new_window_requested(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlNewWindowRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_new_window_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_permission_requested(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlPermissionRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_permission_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_script_notify(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlScriptNotifyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_script_notify(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_unsafe_content_warning_displaying(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_unsafe_content_warning_displaying(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_unsupported_uri_scheme_identified(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_unsupported_uri_scheme_identified(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_unviewable_content_identified(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlUnviewableContentIdentifiedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_unviewable_content_identified(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_web_resource_requested(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlWebResourceRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_web_resource_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def ignore_application_content_uri_rules_navigation_restrictions(self) -> bool: ...
    @ignore_application_content_uri_rules_navigation_restrictions.setter
    def ignore_application_content_uri_rules_navigation_restrictions(self, value: bool) -> None: ...
    @_property
    def application_view_id(self) -> winrt.system.Int32: ...
    @_property
    def source(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @source.setter
    def source(self, value: typing.Optional[winrt.windows.foundation.Uri]) -> None: ...
    @_property
    def default_background_color(self) -> winrt.windows.ui.Color: ...
    @default_background_color.setter
    def default_background_color(self, value: winrt.windows.ui.Color) -> None: ...
    @_property
    def can_go_back(self) -> bool: ...
    @_property
    def can_go_forward(self) -> bool: ...
    @_property
    def contains_full_screen_element(self) -> bool: ...
    @_property
    def deferred_permission_requests(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.web.ui.WebViewControlDeferredPermissionRequest]]: ...
    @_property
    def document_title(self) -> str: ...
    @_property
    def settings(self) -> typing.Optional[winrt.windows.web.ui.WebViewControlSettings]: ...

@typing.final
class WebUIVoiceCommandActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIVoiceCommandActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def result(self) -> typing.Optional[winrt.windows.media.speechrecognition.SpeechRecognitionResult]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIWalletActionActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIWalletActionActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def action_id(self) -> str: ...
    @_property
    def action_kind(self) -> winrt.windows.applicationmodel.wallet.WalletActionKind: ...
    @_property
    def item_id(self) -> str: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIWebAccountProviderActivatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIWebAccountProviderActivatedEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...
    @_property
    def operation(self) -> typing.Optional[winrt.windows.security.authentication.web.provider.IWebAccountProviderOperation]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class WebUIWebAuthenticationBrokerContinuationEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUIWebAuthenticationBrokerContinuationEventArgs: ...
    @_property
    def kind(self) -> winrt.windows.applicationmodel.activation.ActivationKind: ...
    @_property
    def previous_execution_state(self) -> winrt.windows.applicationmodel.activation.ApplicationExecutionState: ...
    @_property
    def splash_screen(self) -> typing.Optional[winrt.windows.applicationmodel.activation.SplashScreen]: ...
    @_property
    def continuation_data(self) -> typing.Optional[winrt.windows.foundation.collections.ValueSet]: ...
    @_property
    def web_authentication_result(self) -> typing.Optional[winrt.windows.security.authentication.web.WebAuthenticationResult]: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class IActivatedEventArgsDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IActivatedEventArgsDeferral: ...
    @_property
    def activated_operation(self) -> typing.Optional[ActivatedOperation]: ...

@typing.final
class IWebUIBackgroundTaskInstance(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IWebUIBackgroundTaskInstance: ...
    @_property
    def succeeded(self) -> bool: ...
    @succeeded.setter
    def succeeded(self, value: bool) -> None: ...

@typing.final
class IWebUINavigatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IWebUINavigatedEventArgs: ...
    @_property
    def navigated_operation(self) -> typing.Optional[WebUINavigatedOperation]: ...

