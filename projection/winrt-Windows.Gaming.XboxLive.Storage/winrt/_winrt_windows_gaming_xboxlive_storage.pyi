# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage.streams
import winrt.windows.system

from winrt.windows.gaming.xboxlive.storage import GameSaveErrorStatus

Self = typing.TypeVar('Self')

@typing.final
class GameSaveBlobGetResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveBlobGetResult: ...
    @_property
    def status(self) -> GameSaveErrorStatus: ...
    @_property
    def value(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.windows.storage.streams.IBuffer]]: ...

@typing.final
class GameSaveBlobInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveBlobInfo: ...
    @_property
    def name(self) -> str: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class GameSaveBlobInfoGetResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveBlobInfoGetResult: ...
    @_property
    def status(self) -> GameSaveErrorStatus: ...
    @_property
    def value(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GameSaveBlobInfo]]: ...

@typing.final
class GameSaveBlobInfoQuery(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveBlobInfoQuery: ...
    @typing.overload
    def get_blob_info_async(self) -> winrt.windows.foundation.IAsyncOperation[GameSaveBlobInfoGetResult]: ...
    @typing.overload
    def get_blob_info_async(self, start_index: winrt.system.UInt32, max_number_of_items: winrt.system.UInt32, /) -> winrt.windows.foundation.IAsyncOperation[GameSaveBlobInfoGetResult]: ...
    def get_item_count_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.UInt32]: ...

@typing.final
class GameSaveContainer(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveContainer: ...
    def create_blob_info_query(self, blob_name_prefix: str, /) -> typing.Optional[GameSaveBlobInfoQuery]: ...
    def get_async(self, blobs_to_read: typing.Iterable[str], /) -> winrt.windows.foundation.IAsyncOperation[GameSaveBlobGetResult]: ...
    def read_async(self, blobs_to_read: winrt.windows.foundation.collections.IMapView[str, winrt.windows.storage.streams.IBuffer], /) -> winrt.windows.foundation.IAsyncOperation[GameSaveOperationResult]: ...
    def submit_property_set_updates_async(self, blobs_to_write: typing.Optional[winrt.windows.foundation.collections.IPropertySet], blobs_to_delete: typing.Iterable[str], display_name: str, /) -> winrt.windows.foundation.IAsyncOperation[GameSaveOperationResult]: ...
    def submit_updates_async(self, blobs_to_write: winrt.windows.foundation.collections.IMapView[str, winrt.windows.storage.streams.IBuffer], blobs_to_delete: typing.Iterable[str], display_name: str, /) -> winrt.windows.foundation.IAsyncOperation[GameSaveOperationResult]: ...
    @_property
    def name(self) -> str: ...
    @_property
    def provider(self) -> typing.Optional[GameSaveProvider]: ...

@typing.final
class GameSaveContainerInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveContainerInfo: ...
    @_property
    def display_name(self) -> str: ...
    @_property
    def last_modified_time(self) -> datetime.datetime: ...
    @_property
    def name(self) -> str: ...
    @_property
    def needs_sync(self) -> bool: ...
    @_property
    def total_size(self) -> winrt.system.UInt64: ...

@typing.final
class GameSaveContainerInfoGetResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveContainerInfoGetResult: ...
    @_property
    def status(self) -> GameSaveErrorStatus: ...
    @_property
    def value(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[GameSaveContainerInfo]]: ...

@typing.final
class GameSaveContainerInfoQuery(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveContainerInfoQuery: ...
    @typing.overload
    def get_container_info_async(self) -> winrt.windows.foundation.IAsyncOperation[GameSaveContainerInfoGetResult]: ...
    @typing.overload
    def get_container_info_async(self, start_index: winrt.system.UInt32, max_number_of_items: winrt.system.UInt32, /) -> winrt.windows.foundation.IAsyncOperation[GameSaveContainerInfoGetResult]: ...
    def get_item_count_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.UInt32]: ...

@typing.final
class GameSaveOperationResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveOperationResult: ...
    @_property
    def status(self) -> GameSaveErrorStatus: ...

@typing.final
class GameSaveProvider_Static(type):
    def get_for_user_async(cls, user: typing.Optional[winrt.windows.system.User], service_config_id: str, /) -> winrt.windows.foundation.IAsyncOperation[GameSaveProviderGetResult]: ...
    def get_sync_on_demand_for_user_async(cls, user: typing.Optional[winrt.windows.system.User], service_config_id: str, /) -> winrt.windows.foundation.IAsyncOperation[GameSaveProviderGetResult]: ...

@typing.final
class GameSaveProvider(winrt.system.Object, metaclass=GameSaveProvider_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveProvider: ...
    def create_container(self, name: str, /) -> typing.Optional[GameSaveContainer]: ...
    @typing.overload
    def create_container_info_query(self) -> typing.Optional[GameSaveContainerInfoQuery]: ...
    @typing.overload
    def create_container_info_query(self, container_name_prefix: str, /) -> typing.Optional[GameSaveContainerInfoQuery]: ...
    def delete_container_async(self, name: str, /) -> winrt.windows.foundation.IAsyncOperation[GameSaveOperationResult]: ...
    def get_remaining_bytes_in_quota_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.system.Int64]: ...
    @_property
    def containers_changed_since_last_sync(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...

@typing.final
class GameSaveProviderGetResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GameSaveProviderGetResult: ...
    @_property
    def status(self) -> GameSaveErrorStatus: ...
    @_property
    def value(self) -> typing.Optional[GameSaveProvider]: ...

