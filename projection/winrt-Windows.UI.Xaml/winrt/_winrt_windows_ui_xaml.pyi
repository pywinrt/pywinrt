# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.core as windows_applicationmodel_core
import winrt.windows.applicationmodel.datatransfer as windows_applicationmodel_datatransfer
import winrt.windows.applicationmodel.datatransfer.dragdrop as windows_applicationmodel_datatransfer_dragdrop
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.foundation.numerics as windows_foundation_numerics
import winrt.windows.graphics.imaging as windows_graphics_imaging
import winrt.windows.ui as windows_ui
import winrt.windows.ui.composition as windows_ui_composition
import winrt.windows.ui.core as windows_ui_core
import winrt.windows.ui.input as windows_ui_input
import winrt.windows.ui.xaml.controls as windows_ui_xaml_controls
import winrt.windows.ui.xaml.controls.primitives as windows_ui_xaml_controls_primitives
import winrt.windows.ui.xaml.data as windows_ui_xaml_data
import winrt.windows.ui.xaml.input as windows_ui_xaml_input
import winrt.windows.ui.xaml.interop as windows_ui_xaml_interop
import winrt.windows.ui.xaml.media as windows_ui_xaml_media
import winrt.windows.ui.xaml.media.animation as windows_ui_xaml_media_animation
import winrt.windows.ui.xaml.media.imaging as windows_ui_xaml_media_imaging
import winrt.windows.ui.xaml.media.media3d as windows_ui_xaml_media_media3d

from winrt.windows.ui.xaml import ApplicationHighContrastAdjustment, ApplicationRequiresPointerMode, ApplicationTheme, AutomationTextAttributesEnum, DurationType, ElementHighContrastAdjustment, ElementSoundKind, ElementSoundMode, ElementSoundPlayerState, ElementSpatialAudioMode, ElementTheme, FlowDirection, FocusState, FocusVisualKind, FontCapitals, FontEastAsianLanguage, FontEastAsianWidths, FontFraction, FontNumeralAlignment, FontNumeralStyle, FontVariants, GridUnitType, HorizontalAlignment, LineStackingStrategy, OpticalMarginAlignment, TextAlignment, TextLineBounds, TextReadingOrder, TextTrimming, TextWrapping, Vector3TransitionComponents, VerticalAlignment, Visibility
from winrt.windows.ui.xaml import ApplicationInitializationCallback, BindingFailedEventHandler, CreateDefaultValueCallback, DependencyPropertyChangedCallback, DependencyPropertyChangedEventHandler, DragEventHandler, EnteredBackgroundEventHandler, ExceptionRoutedEventHandler, LeavingBackgroundEventHandler, PropertyChangedCallback, RoutedEventHandler, SizeChangedEventHandler, SuspendingEventHandler, UnhandledExceptionEventHandler, VisualStateChangedEventHandler, WindowActivatedEventHandler, WindowClosedEventHandler, WindowSizeChangedEventHandler, WindowVisibilityChangedEventHandler

Self = typing.TypeVar('Self')

@typing.final
class CornerRadius:
    top_left: winrt.system.Double
    top_right: winrt.system.Double
    bottom_right: winrt.system.Double
    bottom_left: winrt.system.Double
    def __init__(self, top_left: winrt.system.Double = 0, top_right: winrt.system.Double = 0, bottom_right: winrt.system.Double = 0, bottom_left: winrt.system.Double = 0) -> None: ...

@typing.final
class Duration:
    time_span: datetime.timedelta
    type: DurationType
    def __init__(self, time_span: datetime.timedelta = datetime.timedelta(0), type: DurationType = DurationType(0)) -> None: ...

@typing.final
class GridLength:
    value: winrt.system.Double
    grid_unit_type: GridUnitType
    def __init__(self, value: winrt.system.Double = 0, grid_unit_type: GridUnitType = GridUnitType(0)) -> None: ...

@typing.final
class Thickness:
    left: winrt.system.Double
    top: winrt.system.Double
    right: winrt.system.Double
    bottom: winrt.system.Double
    def __init__(self, left: winrt.system.Double = 0, top: winrt.system.Double = 0, right: winrt.system.Double = 0, bottom: winrt.system.Double = 0) -> None: ...

class AdaptiveTrigger_Static(StateTriggerBase_Static):
    @_property
    def min_window_height_property(cls) -> DependencyProperty: ...
    @_property
    def min_window_width_property(cls) -> DependencyProperty: ...

class AdaptiveTrigger(StateTriggerBase, metaclass=AdaptiveTrigger_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AdaptiveTrigger: ...
    def __new__(cls: typing.Type[AdaptiveTrigger]) -> AdaptiveTrigger: ...
    @_property
    def min_window_width(self) -> winrt.system.Double: ...
    @min_window_width.setter
    def min_window_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def min_window_height(self) -> winrt.system.Double: ...
    @min_window_height.setter
    def min_window_height(self, value: winrt.system.Double) -> None: ...

class Application_Static(type):
    def load_component(cls, component: winrt.system.Object, resource_locator: windows_foundation.Uri, /) -> None: ...
    def load_component_with_resource_location(cls, component: winrt.system.Object, resource_locator: windows_foundation.Uri, component_resource_location: windows_ui_xaml_controls_primitives.ComponentResourceLocation, /) -> None: ...
    def start(cls, callback: ApplicationInitializationCallback, /) -> None: ...
    @_property
    def current(cls) -> Application: ...

class Application(winrt.system.Object, metaclass=Application_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Application: ...
    def __new__(cls: typing.Type[Application]) -> Application: ...
    def exit(self) -> None: ...
    def add_resuming(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_resuming(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_suspending(self, handler: SuspendingEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_suspending(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_unhandled_exception(self, handler: UnhandledExceptionEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_unhandled_exception(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_entered_background(self, handler: EnteredBackgroundEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_entered_background(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_leaving_background(self, handler: LeavingBackgroundEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_leaving_background(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def resources(self) -> ResourceDictionary: ...
    @resources.setter
    def resources(self, value: ResourceDictionary) -> None: ...
    @_property
    def requested_theme(self) -> ApplicationTheme: ...
    @requested_theme.setter
    def requested_theme(self, value: ApplicationTheme) -> None: ...
    @_property
    def debug_settings(self) -> DebugSettings: ...
    @_property
    def requires_pointer_mode(self) -> ApplicationRequiresPointerMode: ...
    @requires_pointer_mode.setter
    def requires_pointer_mode(self, value: ApplicationRequiresPointerMode) -> None: ...
    @_property
    def focus_visual_kind(self) -> FocusVisualKind: ...
    @focus_visual_kind.setter
    def focus_visual_kind(self, value: FocusVisualKind) -> None: ...
    @_property
    def high_contrast_adjustment(self) -> ApplicationHighContrastAdjustment: ...
    @high_contrast_adjustment.setter
    def high_contrast_adjustment(self, value: ApplicationHighContrastAdjustment) -> None: ...

@typing.final
class ApplicationInitializationCallbackParams(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ApplicationInitializationCallbackParams: ...

@typing.final
class BindingFailedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BindingFailedEventArgs: ...
    @_property
    def message(self) -> str: ...

@typing.final
class BringIntoViewOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BringIntoViewOptions: ...
    def __new__(cls: typing.Type[BringIntoViewOptions]) -> BringIntoViewOptions: ...
    @_property
    def target_rect(self) -> typing.Optional[windows_foundation.Rect]: ...
    @target_rect.setter
    def target_rect(self, value: typing.Optional[windows_foundation.Rect]) -> None: ...
    @_property
    def animation_desired(self) -> bool: ...
    @animation_desired.setter
    def animation_desired(self, value: bool) -> None: ...
    @_property
    def vertical_offset(self) -> winrt.system.Double: ...
    @vertical_offset.setter
    def vertical_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def vertical_alignment_ratio(self) -> winrt.system.Double: ...
    @vertical_alignment_ratio.setter
    def vertical_alignment_ratio(self, value: winrt.system.Double) -> None: ...
    @_property
    def horizontal_offset(self) -> winrt.system.Double: ...
    @horizontal_offset.setter
    def horizontal_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def horizontal_alignment_ratio(self) -> winrt.system.Double: ...
    @horizontal_alignment_ratio.setter
    def horizontal_alignment_ratio(self, value: winrt.system.Double) -> None: ...

@typing.final
class BringIntoViewRequestedEventArgs(RoutedEventArgs):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BringIntoViewRequestedEventArgs: ...
    @_property
    def vertical_offset(self) -> winrt.system.Double: ...
    @vertical_offset.setter
    def vertical_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def target_rect(self) -> windows_foundation.Rect: ...
    @target_rect.setter
    def target_rect(self, value: windows_foundation.Rect) -> None: ...
    @_property
    def target_element(self) -> UIElement: ...
    @target_element.setter
    def target_element(self, value: UIElement) -> None: ...
    @_property
    def horizontal_offset(self) -> winrt.system.Double: ...
    @horizontal_offset.setter
    def horizontal_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def animation_desired(self) -> bool: ...
    @animation_desired.setter
    def animation_desired(self, value: bool) -> None: ...
    @_property
    def horizontal_alignment_ratio(self) -> winrt.system.Double: ...
    @_property
    def vertical_alignment_ratio(self) -> winrt.system.Double: ...

class BrushTransition_Static(type):
    pass

class BrushTransition(winrt.system.Object, metaclass=BrushTransition_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BrushTransition: ...
    def __new__(cls: typing.Type[BrushTransition]) -> BrushTransition: ...
    @_property
    def duration(self) -> datetime.timedelta: ...
    @duration.setter
    def duration(self, value: datetime.timedelta) -> None: ...

class ColorPaletteResources_Static(ResourceDictionary_Static):
    pass

class ColorPaletteResources(ResourceDictionary, metaclass=ColorPaletteResources_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ColorPaletteResources: ...
    def __new__(cls: typing.Type[ColorPaletteResources]) -> ColorPaletteResources: ...
    @_property
    def list_medium(self) -> typing.Optional[windows_ui.Color]: ...
    @list_medium.setter
    def list_medium(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def list_low(self) -> typing.Optional[windows_ui.Color]: ...
    @list_low.setter
    def list_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def error_text(self) -> typing.Optional[windows_ui.Color]: ...
    @error_text.setter
    def error_text(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def chrome_white(self) -> typing.Optional[windows_ui.Color]: ...
    @chrome_white.setter
    def chrome_white(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def chrome_medium_low(self) -> typing.Optional[windows_ui.Color]: ...
    @chrome_medium_low.setter
    def chrome_medium_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def chrome_medium(self) -> typing.Optional[windows_ui.Color]: ...
    @chrome_medium.setter
    def chrome_medium(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def chrome_low(self) -> typing.Optional[windows_ui.Color]: ...
    @chrome_low.setter
    def chrome_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def chrome_high(self) -> typing.Optional[windows_ui.Color]: ...
    @chrome_high.setter
    def chrome_high(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def chrome_gray(self) -> typing.Optional[windows_ui.Color]: ...
    @chrome_gray.setter
    def chrome_gray(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def chrome_disabled_low(self) -> typing.Optional[windows_ui.Color]: ...
    @chrome_disabled_low.setter
    def chrome_disabled_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def chrome_disabled_high(self) -> typing.Optional[windows_ui.Color]: ...
    @chrome_disabled_high.setter
    def chrome_disabled_high(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def chrome_black_medium_low(self) -> typing.Optional[windows_ui.Color]: ...
    @chrome_black_medium_low.setter
    def chrome_black_medium_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def chrome_black_medium(self) -> typing.Optional[windows_ui.Color]: ...
    @chrome_black_medium.setter
    def chrome_black_medium(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def chrome_black_low(self) -> typing.Optional[windows_ui.Color]: ...
    @chrome_black_low.setter
    def chrome_black_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def chrome_black_high(self) -> typing.Optional[windows_ui.Color]: ...
    @chrome_black_high.setter
    def chrome_black_high(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def chrome_alt_low(self) -> typing.Optional[windows_ui.Color]: ...
    @chrome_alt_low.setter
    def chrome_alt_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def base_medium_low(self) -> typing.Optional[windows_ui.Color]: ...
    @base_medium_low.setter
    def base_medium_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def base_medium_high(self) -> typing.Optional[windows_ui.Color]: ...
    @base_medium_high.setter
    def base_medium_high(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def base_medium(self) -> typing.Optional[windows_ui.Color]: ...
    @base_medium.setter
    def base_medium(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def base_low(self) -> typing.Optional[windows_ui.Color]: ...
    @base_low.setter
    def base_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def base_high(self) -> typing.Optional[windows_ui.Color]: ...
    @base_high.setter
    def base_high(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def alt_medium_low(self) -> typing.Optional[windows_ui.Color]: ...
    @alt_medium_low.setter
    def alt_medium_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def alt_medium_high(self) -> typing.Optional[windows_ui.Color]: ...
    @alt_medium_high.setter
    def alt_medium_high(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def alt_medium(self) -> typing.Optional[windows_ui.Color]: ...
    @alt_medium.setter
    def alt_medium(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def alt_low(self) -> typing.Optional[windows_ui.Color]: ...
    @alt_low.setter
    def alt_low(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def alt_high(self) -> typing.Optional[windows_ui.Color]: ...
    @alt_high.setter
    def alt_high(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    @_property
    def accent(self) -> typing.Optional[windows_ui.Color]: ...
    @accent.setter
    def accent(self, value: typing.Optional[windows_ui.Color]) -> None: ...

@typing.final
class CornerRadiusHelper_Static(type):
    def from_radii(cls, top_left: winrt.system.Double, top_right: winrt.system.Double, bottom_right: winrt.system.Double, bottom_left: winrt.system.Double, /) -> CornerRadius: ...
    def from_uniform_radius(cls, uniform_radius: winrt.system.Double, /) -> CornerRadius: ...

@typing.final
class CornerRadiusHelper(winrt.system.Object, metaclass=CornerRadiusHelper_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CornerRadiusHelper: ...

@typing.final
class DataContextChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataContextChangedEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def new_value(self) -> winrt.system.Object: ...

class DataTemplate_Static(FrameworkTemplate_Static):
    def get_extension_instance(cls, element: FrameworkElement, /) -> IDataTemplateExtension: ...
    def set_extension_instance(cls, element: FrameworkElement, value: ImplementsIDataTemplateExtension, /) -> None: ...
    @_property
    def extension_instance_property(cls) -> DependencyProperty: ...

class DataTemplate(FrameworkTemplate, ImplementsIElementFactory, metaclass=DataTemplate_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataTemplate: ...
    def __new__(cls: typing.Type[DataTemplate]) -> DataTemplate: ...
    def get_element(self, args: ElementFactoryGetArgs, /) -> UIElement: ...
    def load_content(self) -> DependencyObject: ...
    def recycle_element(self, args: ElementFactoryRecycleArgs, /) -> None: ...

class DataTemplateKey_Static(type):
    pass

class DataTemplateKey(winrt.system.Object, metaclass=DataTemplateKey_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DataTemplateKey: ...
    @typing.overload
    def __new__(cls: typing.Type[DataTemplateKey]) -> DataTemplateKey: ...
    @typing.overload
    def __new__(cls: typing.Type[DataTemplateKey], data_type: winrt.system.Object) -> DataTemplateKey: ...
    @_property
    def data_type(self) -> winrt.system.Object: ...
    @data_type.setter
    def data_type(self, value: winrt.system.Object) -> None: ...

@typing.final
class DebugSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DebugSettings: ...
    def add_binding_failed(self, handler: BindingFailedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_binding_failed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_overdraw_heat_map_enabled(self) -> bool: ...
    @is_overdraw_heat_map_enabled.setter
    def is_overdraw_heat_map_enabled(self, value: bool) -> None: ...
    @_property
    def is_binding_tracing_enabled(self) -> bool: ...
    @is_binding_tracing_enabled.setter
    def is_binding_tracing_enabled(self, value: bool) -> None: ...
    @_property
    def enable_frame_rate_counter(self) -> bool: ...
    @enable_frame_rate_counter.setter
    def enable_frame_rate_counter(self, value: bool) -> None: ...
    @_property
    def enable_redraw_regions(self) -> bool: ...
    @enable_redraw_regions.setter
    def enable_redraw_regions(self, value: bool) -> None: ...
    @_property
    def is_text_performance_visualization_enabled(self) -> bool: ...
    @is_text_performance_visualization_enabled.setter
    def is_text_performance_visualization_enabled(self, value: bool) -> None: ...
    @_property
    def fail_fast_on_errors(self) -> bool: ...
    @fail_fast_on_errors.setter
    def fail_fast_on_errors(self, value: bool) -> None: ...

class DependencyObject_Static(type):
    pass

class DependencyObject(winrt.system.Object, metaclass=DependencyObject_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DependencyObject: ...
    def clear_value(self, dp: DependencyProperty, /) -> None: ...
    def get_animation_base_value(self, dp: DependencyProperty, /) -> winrt.system.Object: ...
    def get_value(self, dp: DependencyProperty, /) -> winrt.system.Object: ...
    def read_local_value(self, dp: DependencyProperty, /) -> winrt.system.Object: ...
    def register_property_changed_callback(self, dp: DependencyProperty, callback: DependencyPropertyChangedCallback, /) -> winrt.system.Int64: ...
    def set_value(self, dp: DependencyProperty, value: winrt.system.Object, /) -> None: ...
    def unregister_property_changed_callback(self, dp: DependencyProperty, token: winrt.system.Int64, /) -> None: ...
    @_property
    def dispatcher(self) -> windows_ui_core.CoreDispatcher: ...

class DependencyObjectCollection_Static(DependencyObject_Static):
    pass

class DependencyObjectCollection(DependencyObject, windows_foundation_collections.ImplementsIObservableVector[DependencyObject], winrt._winrt.MutableSequence[DependencyObject], metaclass=DependencyObjectCollection_Static):
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[DependencyObject]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> DependencyObject: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[DependencyObject]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: DependencyObject) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[DependencyObject]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DependencyObjectCollection: ...
    def __new__(cls: typing.Type[DependencyObjectCollection]) -> DependencyObjectCollection: ...
    def append(self, value: DependencyObject, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[DependencyObject]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> DependencyObject: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[DependencyObject], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[DependencyObject]: ...
    def index_of(self, value: DependencyObject, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: DependencyObject, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[DependencyObject], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: DependencyObject, /) -> None: ...
    def add_vector_changed(self, vhnd: windows_foundation_collections.VectorChangedEventHandler[DependencyObject], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_vector_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class DependencyProperty_Static(type):
    def register(cls, name: str, property_type: windows_ui_xaml_interop.TypeName, owner_type: windows_ui_xaml_interop.TypeName, type_metadata: PropertyMetadata, /) -> DependencyProperty: ...
    def register_attached(cls, name: str, property_type: windows_ui_xaml_interop.TypeName, owner_type: windows_ui_xaml_interop.TypeName, default_metadata: PropertyMetadata, /) -> DependencyProperty: ...
    @_property
    def unset_value(cls) -> winrt.system.Object: ...

@typing.final
class DependencyProperty(winrt.system.Object, metaclass=DependencyProperty_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DependencyProperty: ...
    def get_metadata(self, for_type: windows_ui_xaml_interop.TypeName, /) -> PropertyMetadata: ...

@typing.final
class DependencyPropertyChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DependencyPropertyChangedEventArgs: ...
    @_property
    def new_value(self) -> winrt.system.Object: ...
    @_property
    def old_value(self) -> winrt.system.Object: ...
    @_property
    def property(self) -> DependencyProperty: ...

class DispatcherTimer_Static(type):
    pass

class DispatcherTimer(winrt.system.Object, metaclass=DispatcherTimer_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DispatcherTimer: ...
    def __new__(cls: typing.Type[DispatcherTimer]) -> DispatcherTimer: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add_tick(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_tick(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def interval(self) -> datetime.timedelta: ...
    @interval.setter
    def interval(self, value: datetime.timedelta) -> None: ...
    @_property
    def is_enabled(self) -> bool: ...

@typing.final
class DragEventArgs(RoutedEventArgs):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragEventArgs: ...
    def get_deferral(self) -> DragOperationDeferral: ...
    def get_position(self, relative_to: UIElement, /) -> windows_foundation.Point: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def data(self) -> windows_applicationmodel_datatransfer.DataPackage: ...
    @data.setter
    def data(self, value: windows_applicationmodel_datatransfer.DataPackage) -> None: ...
    @_property
    def accepted_operation(self) -> windows_applicationmodel_datatransfer.DataPackageOperation: ...
    @accepted_operation.setter
    def accepted_operation(self, value: windows_applicationmodel_datatransfer.DataPackageOperation) -> None: ...
    @_property
    def data_view(self) -> windows_applicationmodel_datatransfer.DataPackageView: ...
    @_property
    def drag_ui_override(self) -> DragUIOverride: ...
    @_property
    def modifiers(self) -> windows_applicationmodel_datatransfer_dragdrop.DragDropModifiers: ...
    @_property
    def allowed_operations(self) -> windows_applicationmodel_datatransfer.DataPackageOperation: ...

@typing.final
class DragOperationDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragOperationDeferral: ...
    def complete(self) -> None: ...

@typing.final
class DragStartingEventArgs(RoutedEventArgs):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragStartingEventArgs: ...
    def get_deferral(self) -> DragOperationDeferral: ...
    def get_position(self, relative_to: UIElement, /) -> windows_foundation.Point: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    @_property
    def data(self) -> windows_applicationmodel_datatransfer.DataPackage: ...
    @_property
    def drag_ui(self) -> DragUI: ...
    @_property
    def allowed_operations(self) -> windows_applicationmodel_datatransfer.DataPackageOperation: ...
    @allowed_operations.setter
    def allowed_operations(self, value: windows_applicationmodel_datatransfer.DataPackageOperation) -> None: ...

@typing.final
class DragUI(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragUI: ...
    def set_content_from_bitmap_image(self, bitmap_image: windows_ui_xaml_media_imaging.BitmapImage, /) -> None: ...
    def set_content_from_bitmap_image_with_anchor_point(self, bitmap_image: windows_ui_xaml_media_imaging.BitmapImage, anchor_point: windows_foundation.Point, /) -> None: ...
    def set_content_from_data_package(self) -> None: ...
    def set_content_from_software_bitmap(self, software_bitmap: windows_graphics_imaging.SoftwareBitmap, /) -> None: ...
    def set_content_from_software_bitmap_with_anchor_point(self, software_bitmap: windows_graphics_imaging.SoftwareBitmap, anchor_point: windows_foundation.Point, /) -> None: ...

@typing.final
class DragUIOverride(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragUIOverride: ...
    def clear(self) -> None: ...
    def set_content_from_bitmap_image(self, bitmap_image: windows_ui_xaml_media_imaging.BitmapImage, /) -> None: ...
    def set_content_from_bitmap_image_with_anchor_point(self, bitmap_image: windows_ui_xaml_media_imaging.BitmapImage, anchor_point: windows_foundation.Point, /) -> None: ...
    def set_content_from_software_bitmap(self, software_bitmap: windows_graphics_imaging.SoftwareBitmap, /) -> None: ...
    def set_content_from_software_bitmap_with_anchor_point(self, software_bitmap: windows_graphics_imaging.SoftwareBitmap, anchor_point: windows_foundation.Point, /) -> None: ...
    @_property
    def is_glyph_visible(self) -> bool: ...
    @is_glyph_visible.setter
    def is_glyph_visible(self, value: bool) -> None: ...
    @_property
    def is_content_visible(self) -> bool: ...
    @is_content_visible.setter
    def is_content_visible(self, value: bool) -> None: ...
    @_property
    def is_caption_visible(self) -> bool: ...
    @is_caption_visible.setter
    def is_caption_visible(self, value: bool) -> None: ...
    @_property
    def caption(self) -> str: ...
    @caption.setter
    def caption(self, value: str) -> None: ...

@typing.final
class DropCompletedEventArgs(RoutedEventArgs):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DropCompletedEventArgs: ...
    @_property
    def drop_result(self) -> windows_applicationmodel_datatransfer.DataPackageOperation: ...

@typing.final
class DurationHelper_Static(type):
    def add(cls, target: Duration, duration: Duration, /) -> Duration: ...
    def compare(cls, duration1: Duration, duration2: Duration, /) -> winrt.system.Int32: ...
    def equals(cls, target: Duration, value: Duration, /) -> bool: ...
    def from_time_span(cls, time_span: datetime.timedelta, /) -> Duration: ...
    def get_has_time_span(cls, target: Duration, /) -> bool: ...
    def subtract(cls, target: Duration, duration: Duration, /) -> Duration: ...
    @_property
    def automatic(cls) -> Duration: ...
    @_property
    def forever(cls) -> Duration: ...

@typing.final
class DurationHelper(winrt.system.Object, metaclass=DurationHelper_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DurationHelper: ...

@typing.final
class EffectiveViewportChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EffectiveViewportChangedEventArgs: ...
    @_property
    def bring_into_view_distance_x(self) -> winrt.system.Double: ...
    @_property
    def bring_into_view_distance_y(self) -> winrt.system.Double: ...
    @_property
    def effective_viewport(self) -> windows_foundation.Rect: ...
    @_property
    def max_viewport(self) -> windows_foundation.Rect: ...

class ElementFactoryGetArgs_Static(type):
    pass

class ElementFactoryGetArgs(winrt.system.Object, metaclass=ElementFactoryGetArgs_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ElementFactoryGetArgs: ...
    def __new__(cls: typing.Type[ElementFactoryGetArgs]) -> ElementFactoryGetArgs: ...
    @_property
    def parent(self) -> UIElement: ...
    @parent.setter
    def parent(self, value: UIElement) -> None: ...
    @_property
    def data(self) -> winrt.system.Object: ...
    @data.setter
    def data(self, value: winrt.system.Object) -> None: ...

class ElementFactoryRecycleArgs_Static(type):
    pass

class ElementFactoryRecycleArgs(winrt.system.Object, metaclass=ElementFactoryRecycleArgs_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ElementFactoryRecycleArgs: ...
    def __new__(cls: typing.Type[ElementFactoryRecycleArgs]) -> ElementFactoryRecycleArgs: ...
    @_property
    def parent(self) -> UIElement: ...
    @parent.setter
    def parent(self, value: UIElement) -> None: ...
    @_property
    def element(self) -> UIElement: ...
    @element.setter
    def element(self, value: UIElement) -> None: ...

@typing.final
class ElementSoundPlayer_Static(type):
    def play(cls, sound: ElementSoundKind, /) -> None: ...
    @_property
    def volume(cls) -> winrt.system.Double: ...
    @volume.setter
    def volume(cls, value: winrt.system.Double) -> None: ...
    @_property
    def state(cls) -> ElementSoundPlayerState: ...
    @state.setter
    def state(cls, value: ElementSoundPlayerState) -> None: ...
    @_property
    def spatial_audio_mode(cls) -> ElementSpatialAudioMode: ...
    @spatial_audio_mode.setter
    def spatial_audio_mode(cls, value: ElementSpatialAudioMode) -> None: ...

@typing.final
class ElementSoundPlayer(winrt.system.Object, metaclass=ElementSoundPlayer_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ElementSoundPlayer: ...

@typing.final
class EventTrigger(TriggerBase):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EventTrigger: ...
    def __new__(cls: typing.Type[EventTrigger]) -> EventTrigger: ...
    @_property
    def routed_event(self) -> RoutedEvent: ...
    @routed_event.setter
    def routed_event(self, value: RoutedEvent) -> None: ...
    @_property
    def actions(self) -> TriggerActionCollection: ...

class ExceptionRoutedEventArgs_Static(RoutedEventArgs_Static):
    pass

class ExceptionRoutedEventArgs(RoutedEventArgs, metaclass=ExceptionRoutedEventArgs_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ExceptionRoutedEventArgs: ...
    @_property
    def error_message(self) -> str: ...

class FrameworkElement_Static(UIElement_Static):
    def defer_tree(cls, element: DependencyObject, /) -> None: ...
    @_property
    def actual_height_property(cls) -> DependencyProperty: ...
    @_property
    def actual_width_property(cls) -> DependencyProperty: ...
    @_property
    def data_context_property(cls) -> DependencyProperty: ...
    @_property
    def flow_direction_property(cls) -> DependencyProperty: ...
    @_property
    def height_property(cls) -> DependencyProperty: ...
    @_property
    def horizontal_alignment_property(cls) -> DependencyProperty: ...
    @_property
    def language_property(cls) -> DependencyProperty: ...
    @_property
    def margin_property(cls) -> DependencyProperty: ...
    @_property
    def max_height_property(cls) -> DependencyProperty: ...
    @_property
    def max_width_property(cls) -> DependencyProperty: ...
    @_property
    def min_height_property(cls) -> DependencyProperty: ...
    @_property
    def min_width_property(cls) -> DependencyProperty: ...
    @_property
    def name_property(cls) -> DependencyProperty: ...
    @_property
    def style_property(cls) -> DependencyProperty: ...
    @_property
    def tag_property(cls) -> DependencyProperty: ...
    @_property
    def vertical_alignment_property(cls) -> DependencyProperty: ...
    @_property
    def width_property(cls) -> DependencyProperty: ...
    @_property
    def requested_theme_property(cls) -> DependencyProperty: ...
    @_property
    def allow_focus_on_interaction_property(cls) -> DependencyProperty: ...
    @_property
    def allow_focus_when_disabled_property(cls) -> DependencyProperty: ...
    @_property
    def focus_visual_margin_property(cls) -> DependencyProperty: ...
    @_property
    def focus_visual_primary_brush_property(cls) -> DependencyProperty: ...
    @_property
    def focus_visual_primary_thickness_property(cls) -> DependencyProperty: ...
    @_property
    def focus_visual_secondary_brush_property(cls) -> DependencyProperty: ...
    @_property
    def focus_visual_secondary_thickness_property(cls) -> DependencyProperty: ...
    @_property
    def actual_theme_property(cls) -> DependencyProperty: ...

class FrameworkElement(UIElement, metaclass=FrameworkElement_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FrameworkElement: ...
    def find_name(self, name: str, /) -> winrt.system.Object: ...
    def get_binding_expression(self, dp: DependencyProperty, /) -> windows_ui_xaml_data.BindingExpression: ...
    def set_binding(self, dp: DependencyProperty, binding: windows_ui_xaml_data.BindingBase, /) -> None: ...
    def add_layout_updated(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_layout_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_loaded(self, handler: RoutedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_loaded(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_size_changed(self, handler: SizeChangedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_size_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_unloaded(self, handler: RoutedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_unloaded(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_data_context_changed(self, handler: windows_foundation.TypedEventHandler[FrameworkElement, DataContextChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_data_context_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_loading(self, handler: windows_foundation.TypedEventHandler[FrameworkElement, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_loading(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_actual_theme_changed(self, handler: windows_foundation.TypedEventHandler[FrameworkElement, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_actual_theme_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_effective_viewport_changed(self, handler: windows_foundation.TypedEventHandler[FrameworkElement, EffectiveViewportChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_effective_viewport_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def width(self) -> winrt.system.Double: ...
    @width.setter
    def width(self, value: winrt.system.Double) -> None: ...
    @_property
    def vertical_alignment(self) -> VerticalAlignment: ...
    @vertical_alignment.setter
    def vertical_alignment(self, value: VerticalAlignment) -> None: ...
    @_property
    def tag(self) -> winrt.system.Object: ...
    @tag.setter
    def tag(self, value: winrt.system.Object) -> None: ...
    @_property
    def style(self) -> Style: ...
    @style.setter
    def style(self, value: Style) -> None: ...
    @_property
    def resources(self) -> ResourceDictionary: ...
    @resources.setter
    def resources(self, value: ResourceDictionary) -> None: ...
    @_property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @_property
    def min_width(self) -> winrt.system.Double: ...
    @min_width.setter
    def min_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def min_height(self) -> winrt.system.Double: ...
    @min_height.setter
    def min_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def max_width(self) -> winrt.system.Double: ...
    @max_width.setter
    def max_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def max_height(self) -> winrt.system.Double: ...
    @max_height.setter
    def max_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def margin(self) -> Thickness: ...
    @margin.setter
    def margin(self, value: Thickness) -> None: ...
    @_property
    def language(self) -> str: ...
    @language.setter
    def language(self, value: str) -> None: ...
    @_property
    def horizontal_alignment(self) -> HorizontalAlignment: ...
    @horizontal_alignment.setter
    def horizontal_alignment(self, value: HorizontalAlignment) -> None: ...
    @_property
    def height(self) -> winrt.system.Double: ...
    @height.setter
    def height(self, value: winrt.system.Double) -> None: ...
    @_property
    def flow_direction(self) -> FlowDirection: ...
    @flow_direction.setter
    def flow_direction(self, value: FlowDirection) -> None: ...
    @_property
    def data_context(self) -> winrt.system.Object: ...
    @data_context.setter
    def data_context(self, value: winrt.system.Object) -> None: ...
    @_property
    def actual_height(self) -> winrt.system.Double: ...
    @_property
    def actual_width(self) -> winrt.system.Double: ...
    @_property
    def base_uri(self) -> windows_foundation.Uri: ...
    @_property
    def parent(self) -> DependencyObject: ...
    @_property
    def triggers(self) -> TriggerCollection: ...
    @_property
    def requested_theme(self) -> ElementTheme: ...
    @requested_theme.setter
    def requested_theme(self, value: ElementTheme) -> None: ...
    @_property
    def focus_visual_secondary_thickness(self) -> Thickness: ...
    @focus_visual_secondary_thickness.setter
    def focus_visual_secondary_thickness(self, value: Thickness) -> None: ...
    @_property
    def focus_visual_secondary_brush(self) -> windows_ui_xaml_media.Brush: ...
    @focus_visual_secondary_brush.setter
    def focus_visual_secondary_brush(self, value: windows_ui_xaml_media.Brush) -> None: ...
    @_property
    def focus_visual_primary_thickness(self) -> Thickness: ...
    @focus_visual_primary_thickness.setter
    def focus_visual_primary_thickness(self, value: Thickness) -> None: ...
    @_property
    def focus_visual_primary_brush(self) -> windows_ui_xaml_media.Brush: ...
    @focus_visual_primary_brush.setter
    def focus_visual_primary_brush(self, value: windows_ui_xaml_media.Brush) -> None: ...
    @_property
    def focus_visual_margin(self) -> Thickness: ...
    @focus_visual_margin.setter
    def focus_visual_margin(self, value: Thickness) -> None: ...
    @_property
    def allow_focus_when_disabled(self) -> bool: ...
    @allow_focus_when_disabled.setter
    def allow_focus_when_disabled(self, value: bool) -> None: ...
    @_property
    def allow_focus_on_interaction(self) -> bool: ...
    @allow_focus_on_interaction.setter
    def allow_focus_on_interaction(self, value: bool) -> None: ...
    @_property
    def actual_theme(self) -> ElementTheme: ...
    @_property
    def is_loaded(self) -> bool: ...

class FrameworkTemplate_Static(DependencyObject_Static):
    pass

class FrameworkTemplate(DependencyObject, metaclass=FrameworkTemplate_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FrameworkTemplate: ...

@typing.final
class FrameworkView(winrt.system.Object, windows_applicationmodel_core.ImplementsIFrameworkView):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FrameworkView: ...
    def __new__(cls: typing.Type[FrameworkView]) -> FrameworkView: ...
    def initialize(self, application_view: windows_applicationmodel_core.CoreApplicationView, /) -> None: ...
    def load(self, entry_point: str, /) -> None: ...
    def run(self) -> None: ...
    def set_window(self, window: windows_ui_core.CoreWindow, /) -> None: ...
    def uninitialize(self) -> None: ...

@typing.final
class FrameworkViewSource(winrt.system.Object, windows_applicationmodel_core.ImplementsIFrameworkViewSource):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FrameworkViewSource: ...
    def __new__(cls: typing.Type[FrameworkViewSource]) -> FrameworkViewSource: ...
    def create_view(self) -> windows_applicationmodel_core.IFrameworkView: ...

@typing.final
class GridLengthHelper_Static(type):
    def equals(cls, target: GridLength, value: GridLength, /) -> bool: ...
    def from_pixels(cls, pixels: winrt.system.Double, /) -> GridLength: ...
    def from_value_and_type(cls, value: winrt.system.Double, type: GridUnitType, /) -> GridLength: ...
    def get_is_absolute(cls, target: GridLength, /) -> bool: ...
    def get_is_auto(cls, target: GridLength, /) -> bool: ...
    def get_is_star(cls, target: GridLength, /) -> bool: ...
    @_property
    def auto(cls) -> GridLength: ...

@typing.final
class GridLengthHelper(winrt.system.Object, metaclass=GridLengthHelper_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GridLengthHelper: ...

@typing.final
class MediaFailedRoutedEventArgs(ExceptionRoutedEventArgs):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaFailedRoutedEventArgs: ...
    @_property
    def error_trace(self) -> str: ...

@typing.final
class PointHelper_Static(type):
    def from_coordinates(cls, x: winrt.system.Single, y: winrt.system.Single, /) -> windows_foundation.Point: ...

@typing.final
class PointHelper(winrt.system.Object, metaclass=PointHelper_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PointHelper: ...

class PropertyMetadata_Static(type):
    def create_with_default_value(cls, default_value: winrt.system.Object, /) -> PropertyMetadata: ...
    def create_with_default_value_and_callback(cls, default_value: winrt.system.Object, property_changed_callback: PropertyChangedCallback, /) -> PropertyMetadata: ...
    def create_with_factory(cls, create_default_value_callback: CreateDefaultValueCallback, /) -> PropertyMetadata: ...
    def create_with_factory_and_callback(cls, create_default_value_callback: CreateDefaultValueCallback, property_changed_callback: PropertyChangedCallback, /) -> PropertyMetadata: ...

class PropertyMetadata(winrt.system.Object, metaclass=PropertyMetadata_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PropertyMetadata: ...
    @typing.overload
    def __new__(cls: typing.Type[PropertyMetadata], default_value: winrt.system.Object) -> PropertyMetadata: ...
    @typing.overload
    def __new__(cls: typing.Type[PropertyMetadata], default_value: winrt.system.Object, property_changed_callback: PropertyChangedCallback) -> PropertyMetadata: ...
    @_property
    def create_default_value_callback(self) -> CreateDefaultValueCallback: ...
    @_property
    def default_value(self) -> winrt.system.Object: ...

@typing.final
class PropertyPath(DependencyObject):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PropertyPath: ...
    def __new__(cls: typing.Type[PropertyPath], path: str) -> PropertyPath: ...
    @_property
    def path(self) -> str: ...

@typing.final
class RectHelper_Static(type):
    def contains(cls, target: windows_foundation.Rect, point: windows_foundation.Point, /) -> bool: ...
    def equals(cls, target: windows_foundation.Rect, value: windows_foundation.Rect, /) -> bool: ...
    def from_coordinates_and_dimensions(cls, x: winrt.system.Single, y: winrt.system.Single, width: winrt.system.Single, height: winrt.system.Single, /) -> windows_foundation.Rect: ...
    def from_location_and_size(cls, location: windows_foundation.Point, size: windows_foundation.Size, /) -> windows_foundation.Rect: ...
    def from_points(cls, point1: windows_foundation.Point, point2: windows_foundation.Point, /) -> windows_foundation.Rect: ...
    def get_bottom(cls, target: windows_foundation.Rect, /) -> winrt.system.Single: ...
    def get_is_empty(cls, target: windows_foundation.Rect, /) -> bool: ...
    def get_left(cls, target: windows_foundation.Rect, /) -> winrt.system.Single: ...
    def get_right(cls, target: windows_foundation.Rect, /) -> winrt.system.Single: ...
    def get_top(cls, target: windows_foundation.Rect, /) -> winrt.system.Single: ...
    def intersect(cls, target: windows_foundation.Rect, rect: windows_foundation.Rect, /) -> windows_foundation.Rect: ...
    def union_with_point(cls, target: windows_foundation.Rect, point: windows_foundation.Point, /) -> windows_foundation.Rect: ...
    def union_with_rect(cls, target: windows_foundation.Rect, rect: windows_foundation.Rect, /) -> windows_foundation.Rect: ...
    @_property
    def empty(cls) -> windows_foundation.Rect: ...

@typing.final
class RectHelper(winrt.system.Object, metaclass=RectHelper_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RectHelper: ...

class ResourceDictionary_Static(DependencyObject_Static):
    pass

class ResourceDictionary(DependencyObject, winrt._winrt.MutableMapping[winrt.system.Object, winrt.system.Object], metaclass=ResourceDictionary_Static):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[winrt.system.Object]: ...
    def __contains__(self, key: object) -> bool: ...
    def __getitem__(self, key: winrt.system.Object) -> winrt.system.Object: ...
    def __setitem__(self, key: winrt.system.Object, value: winrt.system.Object) -> None: ...
    def __delitem__(self, key: winrt.system.Object) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceDictionary: ...
    def __new__(cls: typing.Type[ResourceDictionary]) -> ResourceDictionary: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[winrt.system.Object, winrt.system.Object]]: ...
    def get_view(self) -> typing.Mapping[winrt.system.Object, winrt.system.Object]: ...
    def has_key(self, key: winrt.system.Object, /) -> bool: ...
    def insert(self, key: winrt.system.Object, value: winrt.system.Object, /) -> bool: ...
    def lookup(self, key: winrt.system.Object, /) -> winrt.system.Object: ...
    def remove(self, key: winrt.system.Object, /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...
    @_property
    def source(self) -> windows_foundation.Uri: ...
    @source.setter
    def source(self, value: windows_foundation.Uri) -> None: ...
    @_property
    def merged_dictionaries(self) -> typing.MutableSequence[ResourceDictionary]: ...
    @_property
    def theme_dictionaries(self) -> typing.MutableMapping[winrt.system.Object, winrt.system.Object]: ...

@typing.final
class RoutedEvent(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RoutedEvent: ...

class RoutedEventArgs_Static(type):
    pass

class RoutedEventArgs(winrt.system.Object, metaclass=RoutedEventArgs_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RoutedEventArgs: ...
    def __new__(cls: typing.Type[RoutedEventArgs]) -> RoutedEventArgs: ...
    @_property
    def original_source(self) -> winrt.system.Object: ...

class ScalarTransition_Static(type):
    pass

class ScalarTransition(winrt.system.Object, metaclass=ScalarTransition_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScalarTransition: ...
    def __new__(cls: typing.Type[ScalarTransition]) -> ScalarTransition: ...
    @_property
    def duration(self) -> datetime.timedelta: ...
    @duration.setter
    def duration(self, value: datetime.timedelta) -> None: ...

@typing.final
class Setter(SetterBase):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Setter: ...
    @typing.overload
    def __new__(cls: typing.Type[Setter], target_property: DependencyProperty, value: winrt.system.Object) -> Setter: ...
    @typing.overload
    def __new__(cls: typing.Type[Setter]) -> Setter: ...
    @_property
    def value(self) -> winrt.system.Object: ...
    @value.setter
    def value(self, value: winrt.system.Object) -> None: ...
    @_property
    def property(self) -> DependencyProperty: ...
    @property.setter
    def property(self, value: DependencyProperty) -> None: ...
    @_property
    def target(self) -> TargetPropertyPath: ...
    @target.setter
    def target(self, value: TargetPropertyPath) -> None: ...

class SetterBase_Static(DependencyObject_Static):
    pass

class SetterBase(DependencyObject, metaclass=SetterBase_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SetterBase: ...
    @_property
    def is_sealed(self) -> bool: ...

@typing.final
class SetterBaseCollection(winrt.system.Object, winrt._winrt.MutableSequence[SetterBase]):
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[SetterBase]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> SetterBase: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[SetterBase]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: SetterBase) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[SetterBase]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SetterBaseCollection: ...
    def __new__(cls: typing.Type[SetterBaseCollection]) -> SetterBaseCollection: ...
    def append(self, value: SetterBase, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[SetterBase]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> SetterBase: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[SetterBase], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[SetterBase]: ...
    def index_of(self, value: SetterBase, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: SetterBase, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[SetterBase], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: SetterBase, /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...
    @_property
    def is_sealed(self) -> bool: ...

@typing.final
class SizeChangedEventArgs(RoutedEventArgs):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SizeChangedEventArgs: ...
    @_property
    def new_size(self) -> windows_foundation.Size: ...
    @_property
    def previous_size(self) -> windows_foundation.Size: ...

@typing.final
class SizeHelper_Static(type):
    def equals(cls, target: windows_foundation.Size, value: windows_foundation.Size, /) -> bool: ...
    def from_dimensions(cls, width: winrt.system.Single, height: winrt.system.Single, /) -> windows_foundation.Size: ...
    def get_is_empty(cls, target: windows_foundation.Size, /) -> bool: ...
    @_property
    def empty(cls) -> windows_foundation.Size: ...

@typing.final
class SizeHelper(winrt.system.Object, metaclass=SizeHelper_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SizeHelper: ...

@typing.final
class StateTrigger_Static(StateTriggerBase_Static):
    @_property
    def is_active_property(cls) -> DependencyProperty: ...

@typing.final
class StateTrigger(StateTriggerBase, metaclass=StateTrigger_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StateTrigger: ...
    def __new__(cls: typing.Type[StateTrigger]) -> StateTrigger: ...
    @_property
    def is_active(self) -> bool: ...
    @is_active.setter
    def is_active(self, value: bool) -> None: ...

class StateTriggerBase_Static(DependencyObject_Static):
    pass

class StateTriggerBase(DependencyObject, metaclass=StateTriggerBase_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StateTriggerBase: ...

@typing.final
class Style(DependencyObject):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Style: ...
    @typing.overload
    def __new__(cls: typing.Type[Style], target_type: windows_ui_xaml_interop.TypeName) -> Style: ...
    @typing.overload
    def __new__(cls: typing.Type[Style]) -> Style: ...
    def seal(self) -> None: ...
    @_property
    def target_type(self) -> windows_ui_xaml_interop.TypeName: ...
    @target_type.setter
    def target_type(self, value: windows_ui_xaml_interop.TypeName) -> None: ...
    @_property
    def based_on(self) -> Style: ...
    @based_on.setter
    def based_on(self, value: Style) -> None: ...
    @_property
    def is_sealed(self) -> bool: ...
    @_property
    def setters(self) -> SetterBaseCollection: ...

@typing.final
class TargetPropertyPath(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TargetPropertyPath: ...
    @typing.overload
    def __new__(cls: typing.Type[TargetPropertyPath], target_property: DependencyProperty) -> TargetPropertyPath: ...
    @typing.overload
    def __new__(cls: typing.Type[TargetPropertyPath]) -> TargetPropertyPath: ...
    @_property
    def target(self) -> winrt.system.Object: ...
    @target.setter
    def target(self, value: winrt.system.Object) -> None: ...
    @_property
    def path(self) -> PropertyPath: ...
    @path.setter
    def path(self, value: PropertyPath) -> None: ...

@typing.final
class ThicknessHelper_Static(type):
    def from_lengths(cls, left: winrt.system.Double, top: winrt.system.Double, right: winrt.system.Double, bottom: winrt.system.Double, /) -> Thickness: ...
    def from_uniform_length(cls, uniform_length: winrt.system.Double, /) -> Thickness: ...

@typing.final
class ThicknessHelper(winrt.system.Object, metaclass=ThicknessHelper_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ThicknessHelper: ...

class TriggerAction_Static(DependencyObject_Static):
    pass

class TriggerAction(DependencyObject, metaclass=TriggerAction_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TriggerAction: ...

@typing.final
class TriggerActionCollection(winrt.system.Object, winrt._winrt.MutableSequence[TriggerAction]):
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[TriggerAction]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> TriggerAction: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[TriggerAction]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: TriggerAction) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[TriggerAction]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TriggerActionCollection: ...
    def __new__(cls: typing.Type[TriggerActionCollection]) -> TriggerActionCollection: ...
    def append(self, value: TriggerAction, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[TriggerAction]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> TriggerAction: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[TriggerAction], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[TriggerAction]: ...
    def index_of(self, value: TriggerAction, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: TriggerAction, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[TriggerAction], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: TriggerAction, /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

class TriggerBase_Static(DependencyObject_Static):
    pass

class TriggerBase(DependencyObject, metaclass=TriggerBase_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TriggerBase: ...

@typing.final
class TriggerCollection(winrt.system.Object, winrt._winrt.MutableSequence[TriggerBase]):
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[TriggerBase]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> TriggerBase: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[TriggerBase]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: TriggerBase) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[TriggerBase]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TriggerCollection: ...
    def append(self, value: TriggerBase, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[TriggerBase]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> TriggerBase: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[TriggerBase], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[TriggerBase]: ...
    def index_of(self, value: TriggerBase, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: TriggerBase, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[TriggerBase], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: TriggerBase, /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

class UIElement_Static(DependencyObject_Static):
    def register_as_scroll_port(cls, element: UIElement, /) -> None: ...
    def try_start_direct_manipulation(cls, value: windows_ui_xaml_input.Pointer, /) -> bool: ...
    @_property
    def holding_event(cls) -> RoutedEvent: ...
    @_property
    def is_double_tap_enabled_property(cls) -> DependencyProperty: ...
    @_property
    def is_hit_test_visible_property(cls) -> DependencyProperty: ...
    @_property
    def is_holding_enabled_property(cls) -> DependencyProperty: ...
    @_property
    def is_right_tap_enabled_property(cls) -> DependencyProperty: ...
    @_property
    def key_down_event(cls) -> RoutedEvent: ...
    @_property
    def key_up_event(cls) -> RoutedEvent: ...
    @_property
    def manipulation_completed_event(cls) -> RoutedEvent: ...
    @_property
    def manipulation_delta_event(cls) -> RoutedEvent: ...
    @_property
    def is_tap_enabled_property(cls) -> DependencyProperty: ...
    @_property
    def manipulation_inertia_starting_event(cls) -> RoutedEvent: ...
    @_property
    def manipulation_mode_property(cls) -> DependencyProperty: ...
    @_property
    def manipulation_started_event(cls) -> RoutedEvent: ...
    @_property
    def manipulation_starting_event(cls) -> RoutedEvent: ...
    @_property
    def opacity_property(cls) -> DependencyProperty: ...
    @_property
    def pointer_canceled_event(cls) -> RoutedEvent: ...
    @_property
    def pointer_capture_lost_event(cls) -> RoutedEvent: ...
    @_property
    def pointer_captures_property(cls) -> DependencyProperty: ...
    @_property
    def pointer_entered_event(cls) -> RoutedEvent: ...
    @_property
    def pointer_exited_event(cls) -> RoutedEvent: ...
    @_property
    def pointer_moved_event(cls) -> RoutedEvent: ...
    @_property
    def pointer_pressed_event(cls) -> RoutedEvent: ...
    @_property
    def pointer_wheel_changed_event(cls) -> RoutedEvent: ...
    @_property
    def projection_property(cls) -> DependencyProperty: ...
    @_property
    def render_transform_origin_property(cls) -> DependencyProperty: ...
    @_property
    def render_transform_property(cls) -> DependencyProperty: ...
    @_property
    def right_tapped_event(cls) -> RoutedEvent: ...
    @_property
    def drag_enter_event(cls) -> RoutedEvent: ...
    @_property
    def tapped_event(cls) -> RoutedEvent: ...
    @_property
    def transitions_property(cls) -> DependencyProperty: ...
    @_property
    def use_layout_rounding_property(cls) -> DependencyProperty: ...
    @_property
    def visibility_property(cls) -> DependencyProperty: ...
    @_property
    def allow_drop_property(cls) -> DependencyProperty: ...
    @_property
    def cache_mode_property(cls) -> DependencyProperty: ...
    @_property
    def clip_property(cls) -> DependencyProperty: ...
    @_property
    def double_tapped_event(cls) -> RoutedEvent: ...
    @_property
    def pointer_released_event(cls) -> RoutedEvent: ...
    @_property
    def drag_leave_event(cls) -> RoutedEvent: ...
    @_property
    def drag_over_event(cls) -> RoutedEvent: ...
    @_property
    def drop_event(cls) -> RoutedEvent: ...
    @_property
    def shadow_property(cls) -> DependencyProperty: ...
    @_property
    def composite_mode_property(cls) -> DependencyProperty: ...
    @_property
    def can_drag_property(cls) -> DependencyProperty: ...
    @_property
    def transform_3d_property(cls) -> DependencyProperty: ...
    @_property
    def access_key_property(cls) -> DependencyProperty: ...
    @_property
    def access_key_scope_owner_property(cls) -> DependencyProperty: ...
    @_property
    def context_flyout_property(cls) -> DependencyProperty: ...
    @_property
    def is_access_key_scope_property(cls) -> DependencyProperty: ...
    @_property
    def exit_display_mode_on_access_key_invoked_property(cls) -> DependencyProperty: ...
    @_property
    def high_contrast_adjustment_property(cls) -> DependencyProperty: ...
    @_property
    def key_tip_horizontal_offset_property(cls) -> DependencyProperty: ...
    @_property
    def key_tip_placement_mode_property(cls) -> DependencyProperty: ...
    @_property
    def key_tip_vertical_offset_property(cls) -> DependencyProperty: ...
    @_property
    def lights_property(cls) -> DependencyProperty: ...
    @_property
    def x_y_focus_down_navigation_strategy_property(cls) -> DependencyProperty: ...
    @_property
    def x_y_focus_keyboard_navigation_property(cls) -> DependencyProperty: ...
    @_property
    def x_y_focus_left_navigation_strategy_property(cls) -> DependencyProperty: ...
    @_property
    def x_y_focus_right_navigation_strategy_property(cls) -> DependencyProperty: ...
    @_property
    def x_y_focus_up_navigation_strategy_property(cls) -> DependencyProperty: ...
    @_property
    def tab_focus_navigation_property(cls) -> DependencyProperty: ...
    @_property
    def getting_focus_event(cls) -> RoutedEvent: ...
    @_property
    def losing_focus_event(cls) -> RoutedEvent: ...
    @_property
    def no_focus_candidate_found_event(cls) -> RoutedEvent: ...
    @_property
    def character_received_event(cls) -> RoutedEvent: ...
    @_property
    def preview_key_down_event(cls) -> RoutedEvent: ...
    @_property
    def preview_key_up_event(cls) -> RoutedEvent: ...
    @_property
    def bring_into_view_requested_event(cls) -> RoutedEvent: ...
    @_property
    def context_requested_event(cls) -> RoutedEvent: ...
    @_property
    def key_tip_target_property(cls) -> DependencyProperty: ...
    @_property
    def keyboard_accelerator_placement_mode_property(cls) -> DependencyProperty: ...
    @_property
    def keyboard_accelerator_placement_target_property(cls) -> DependencyProperty: ...
    @_property
    def can_be_scroll_anchor_property(cls) -> DependencyProperty: ...

class UIElement(DependencyObject, windows_ui_composition.ImplementsIVisualElement, windows_ui_composition.ImplementsIAnimationObject, metaclass=UIElement_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UIElement: ...
    def add_handler(self, routed_event: RoutedEvent, handler: winrt.system.Object, handled_events_too: bool, /) -> None: ...
    def arrange(self, final_rect: windows_foundation.Rect, /) -> None: ...
    def cancel_direct_manipulations(self) -> bool: ...
    def capture_pointer(self, value: windows_ui_xaml_input.Pointer, /) -> bool: ...
    def invalidate_arrange(self) -> None: ...
    def invalidate_measure(self) -> None: ...
    def measure(self, available_size: windows_foundation.Size, /) -> None: ...
    def populate_property_info(self, property_name: str, property_info: windows_ui_composition.AnimationPropertyInfo, /) -> None: ...
    def release_pointer_capture(self, value: windows_ui_xaml_input.Pointer, /) -> None: ...
    def release_pointer_captures(self) -> None: ...
    def remove_handler(self, routed_event: RoutedEvent, handler: winrt.system.Object, /) -> None: ...
    def start_animation(self, animation: windows_ui_composition.ImplementsICompositionAnimationBase, /) -> None: ...
    def start_bring_into_view(self) -> None: ...
    def start_bring_into_view_with_options(self, options: BringIntoViewOptions, /) -> None: ...
    def start_drag_async(self, pointer_point: windows_ui_input.PointerPoint, /) -> windows_foundation.IAsyncOperation[windows_applicationmodel_datatransfer.DataPackageOperation]: ...
    def stop_animation(self, animation: windows_ui_composition.ImplementsICompositionAnimationBase, /) -> None: ...
    def transform_to_visual(self, visual: UIElement, /) -> windows_ui_xaml_media.GeneralTransform: ...
    def try_invoke_keyboard_accelerator(self, args: windows_ui_xaml_input.ProcessKeyboardAcceleratorEventArgs, /) -> None: ...
    def update_layout(self) -> None: ...
    def add_double_tapped(self, handler: windows_ui_xaml_input.DoubleTappedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_double_tapped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drag_enter(self, handler: DragEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drag_enter(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drag_leave(self, handler: DragEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drag_leave(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drag_over(self, handler: DragEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drag_over(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drop(self, handler: DragEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drop(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_got_focus(self, handler: RoutedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_got_focus(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_holding(self, handler: windows_ui_xaml_input.HoldingEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_holding(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_key_down(self, handler: windows_ui_xaml_input.KeyEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_key_down(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_key_up(self, handler: windows_ui_xaml_input.KeyEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_key_up(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_lost_focus(self, handler: RoutedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_lost_focus(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_manipulation_completed(self, handler: windows_ui_xaml_input.ManipulationCompletedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_manipulation_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_manipulation_delta(self, handler: windows_ui_xaml_input.ManipulationDeltaEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_manipulation_delta(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_manipulation_inertia_starting(self, handler: windows_ui_xaml_input.ManipulationInertiaStartingEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_manipulation_inertia_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_manipulation_started(self, handler: windows_ui_xaml_input.ManipulationStartedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_manipulation_started(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_manipulation_starting(self, handler: windows_ui_xaml_input.ManipulationStartingEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_manipulation_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_canceled(self, handler: windows_ui_xaml_input.PointerEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pointer_canceled(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_capture_lost(self, handler: windows_ui_xaml_input.PointerEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pointer_capture_lost(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_entered(self, handler: windows_ui_xaml_input.PointerEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pointer_entered(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_exited(self, handler: windows_ui_xaml_input.PointerEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pointer_exited(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_moved(self, handler: windows_ui_xaml_input.PointerEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pointer_moved(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_pressed(self, handler: windows_ui_xaml_input.PointerEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pointer_pressed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_released(self, handler: windows_ui_xaml_input.PointerEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pointer_released(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_wheel_changed(self, handler: windows_ui_xaml_input.PointerEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pointer_wheel_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_right_tapped(self, handler: windows_ui_xaml_input.RightTappedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_right_tapped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_tapped(self, handler: windows_ui_xaml_input.TappedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_tapped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drag_starting(self, handler: windows_foundation.TypedEventHandler[UIElement, DragStartingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drag_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drop_completed(self, handler: windows_foundation.TypedEventHandler[UIElement, DropCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drop_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_access_key_display_dismissed(self, handler: windows_foundation.TypedEventHandler[UIElement, windows_ui_xaml_input.AccessKeyDisplayDismissedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_access_key_display_dismissed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_access_key_display_requested(self, handler: windows_foundation.TypedEventHandler[UIElement, windows_ui_xaml_input.AccessKeyDisplayRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_access_key_display_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_access_key_invoked(self, handler: windows_foundation.TypedEventHandler[UIElement, windows_ui_xaml_input.AccessKeyInvokedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_access_key_invoked(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_context_canceled(self, handler: windows_foundation.TypedEventHandler[UIElement, RoutedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_context_canceled(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_context_requested(self, handler: windows_foundation.TypedEventHandler[UIElement, windows_ui_xaml_input.ContextRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_context_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_getting_focus(self, handler: windows_foundation.TypedEventHandler[UIElement, windows_ui_xaml_input.GettingFocusEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_getting_focus(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_losing_focus(self, handler: windows_foundation.TypedEventHandler[UIElement, windows_ui_xaml_input.LosingFocusEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_losing_focus(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_no_focus_candidate_found(self, handler: windows_foundation.TypedEventHandler[UIElement, windows_ui_xaml_input.NoFocusCandidateFoundEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_no_focus_candidate_found(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_character_received(self, handler: windows_foundation.TypedEventHandler[UIElement, windows_ui_xaml_input.CharacterReceivedRoutedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_character_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_preview_key_down(self, handler: windows_ui_xaml_input.KeyEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_preview_key_down(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_preview_key_up(self, handler: windows_ui_xaml_input.KeyEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_preview_key_up(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_process_keyboard_accelerators(self, handler: windows_foundation.TypedEventHandler[UIElement, windows_ui_xaml_input.ProcessKeyboardAcceleratorEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_process_keyboard_accelerators(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_bring_into_view_requested(self, handler: windows_foundation.TypedEventHandler[UIElement, BringIntoViewRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_bring_into_view_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def transitions(self) -> windows_ui_xaml_media_animation.TransitionCollection: ...
    @transitions.setter
    def transitions(self, value: windows_ui_xaml_media_animation.TransitionCollection) -> None: ...
    @_property
    def projection(self) -> windows_ui_xaml_media.Projection: ...
    @projection.setter
    def projection(self, value: windows_ui_xaml_media.Projection) -> None: ...
    @_property
    def render_transform_origin(self) -> windows_foundation.Point: ...
    @render_transform_origin.setter
    def render_transform_origin(self, value: windows_foundation.Point) -> None: ...
    @_property
    def opacity(self) -> winrt.system.Double: ...
    @opacity.setter
    def opacity(self, value: winrt.system.Double) -> None: ...
    @_property
    def manipulation_mode(self) -> windows_ui_xaml_input.ManipulationModes: ...
    @manipulation_mode.setter
    def manipulation_mode(self, value: windows_ui_xaml_input.ManipulationModes) -> None: ...
    @_property
    def is_tap_enabled(self) -> bool: ...
    @is_tap_enabled.setter
    def is_tap_enabled(self, value: bool) -> None: ...
    @_property
    def is_right_tap_enabled(self) -> bool: ...
    @is_right_tap_enabled.setter
    def is_right_tap_enabled(self, value: bool) -> None: ...
    @_property
    def is_holding_enabled(self) -> bool: ...
    @is_holding_enabled.setter
    def is_holding_enabled(self, value: bool) -> None: ...
    @_property
    def is_hit_test_visible(self) -> bool: ...
    @is_hit_test_visible.setter
    def is_hit_test_visible(self, value: bool) -> None: ...
    @_property
    def is_double_tap_enabled(self) -> bool: ...
    @is_double_tap_enabled.setter
    def is_double_tap_enabled(self, value: bool) -> None: ...
    @_property
    def allow_drop(self) -> bool: ...
    @allow_drop.setter
    def allow_drop(self, value: bool) -> None: ...
    @_property
    def clip(self) -> windows_ui_xaml_media.RectangleGeometry: ...
    @clip.setter
    def clip(self, value: windows_ui_xaml_media.RectangleGeometry) -> None: ...
    @_property
    def cache_mode(self) -> windows_ui_xaml_media.CacheMode: ...
    @cache_mode.setter
    def cache_mode(self, value: windows_ui_xaml_media.CacheMode) -> None: ...
    @_property
    def use_layout_rounding(self) -> bool: ...
    @use_layout_rounding.setter
    def use_layout_rounding(self, value: bool) -> None: ...
    @_property
    def render_transform(self) -> windows_ui_xaml_media.Transform: ...
    @render_transform.setter
    def render_transform(self, value: windows_ui_xaml_media.Transform) -> None: ...
    @_property
    def visibility(self) -> Visibility: ...
    @visibility.setter
    def visibility(self, value: Visibility) -> None: ...
    @_property
    def desired_size(self) -> windows_foundation.Size: ...
    @_property
    def pointer_captures(self) -> typing.Sequence[windows_ui_xaml_input.Pointer]: ...
    @_property
    def render_size(self) -> windows_foundation.Size: ...
    @_property
    def xaml_root(self) -> XamlRoot: ...
    @xaml_root.setter
    def xaml_root(self, value: XamlRoot) -> None: ...
    @_property
    def shadow(self) -> windows_ui_xaml_media.Shadow: ...
    @shadow.setter
    def shadow(self, value: windows_ui_xaml_media.Shadow) -> None: ...
    @_property
    def actual_offset(self) -> windows_foundation_numerics.Vector3: ...
    @_property
    def actual_size(self) -> windows_foundation_numerics.Vector2: ...
    @_property
    def ui_context(self) -> windows_ui.UIContext: ...
    @_property
    def composite_mode(self) -> windows_ui_xaml_media.ElementCompositeMode: ...
    @composite_mode.setter
    def composite_mode(self, value: windows_ui_xaml_media.ElementCompositeMode) -> None: ...
    @_property
    def transform_3d(self) -> windows_ui_xaml_media_media3d.Transform3D: ...
    @transform_3d.setter
    def transform_3d(self, value: windows_ui_xaml_media_media3d.Transform3D) -> None: ...
    @_property
    def can_drag(self) -> bool: ...
    @can_drag.setter
    def can_drag(self, value: bool) -> None: ...
    @_property
    def is_access_key_scope(self) -> bool: ...
    @is_access_key_scope.setter
    def is_access_key_scope(self, value: bool) -> None: ...
    @_property
    def exit_display_mode_on_access_key_invoked(self) -> bool: ...
    @exit_display_mode_on_access_key_invoked.setter
    def exit_display_mode_on_access_key_invoked(self, value: bool) -> None: ...
    @_property
    def context_flyout(self) -> windows_ui_xaml_controls_primitives.FlyoutBase: ...
    @context_flyout.setter
    def context_flyout(self, value: windows_ui_xaml_controls_primitives.FlyoutBase) -> None: ...
    @_property
    def access_key_scope_owner(self) -> DependencyObject: ...
    @access_key_scope_owner.setter
    def access_key_scope_owner(self, value: DependencyObject) -> None: ...
    @_property
    def access_key(self) -> str: ...
    @access_key.setter
    def access_key(self, value: str) -> None: ...
    @_property
    def key_tip_horizontal_offset(self) -> winrt.system.Double: ...
    @key_tip_horizontal_offset.setter
    def key_tip_horizontal_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def high_contrast_adjustment(self) -> ElementHighContrastAdjustment: ...
    @high_contrast_adjustment.setter
    def high_contrast_adjustment(self, value: ElementHighContrastAdjustment) -> None: ...
    @_property
    def x_y_focus_right_navigation_strategy(self) -> windows_ui_xaml_input.XYFocusNavigationStrategy: ...
    @x_y_focus_right_navigation_strategy.setter
    def x_y_focus_right_navigation_strategy(self, value: windows_ui_xaml_input.XYFocusNavigationStrategy) -> None: ...
    @_property
    def x_y_focus_keyboard_navigation(self) -> windows_ui_xaml_input.XYFocusKeyboardNavigationMode: ...
    @x_y_focus_keyboard_navigation.setter
    def x_y_focus_keyboard_navigation(self, value: windows_ui_xaml_input.XYFocusKeyboardNavigationMode) -> None: ...
    @_property
    def x_y_focus_down_navigation_strategy(self) -> windows_ui_xaml_input.XYFocusNavigationStrategy: ...
    @x_y_focus_down_navigation_strategy.setter
    def x_y_focus_down_navigation_strategy(self, value: windows_ui_xaml_input.XYFocusNavigationStrategy) -> None: ...
    @_property
    def tab_focus_navigation(self) -> windows_ui_xaml_input.KeyboardNavigationMode: ...
    @tab_focus_navigation.setter
    def tab_focus_navigation(self, value: windows_ui_xaml_input.KeyboardNavigationMode) -> None: ...
    @_property
    def key_tip_vertical_offset(self) -> winrt.system.Double: ...
    @key_tip_vertical_offset.setter
    def key_tip_vertical_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def x_y_focus_up_navigation_strategy(self) -> windows_ui_xaml_input.XYFocusNavigationStrategy: ...
    @x_y_focus_up_navigation_strategy.setter
    def x_y_focus_up_navigation_strategy(self, value: windows_ui_xaml_input.XYFocusNavigationStrategy) -> None: ...
    @_property
    def key_tip_placement_mode(self) -> windows_ui_xaml_input.KeyTipPlacementMode: ...
    @key_tip_placement_mode.setter
    def key_tip_placement_mode(self, value: windows_ui_xaml_input.KeyTipPlacementMode) -> None: ...
    @_property
    def x_y_focus_left_navigation_strategy(self) -> windows_ui_xaml_input.XYFocusNavigationStrategy: ...
    @x_y_focus_left_navigation_strategy.setter
    def x_y_focus_left_navigation_strategy(self, value: windows_ui_xaml_input.XYFocusNavigationStrategy) -> None: ...
    @_property
    def lights(self) -> typing.MutableSequence[windows_ui_xaml_media.XamlLight]: ...
    @_property
    def keyboard_accelerators(self) -> typing.MutableSequence[windows_ui_xaml_input.KeyboardAccelerator]: ...
    @_property
    def keyboard_accelerator_placement_target(self) -> DependencyObject: ...
    @keyboard_accelerator_placement_target.setter
    def keyboard_accelerator_placement_target(self, value: DependencyObject) -> None: ...
    @_property
    def keyboard_accelerator_placement_mode(self) -> windows_ui_xaml_input.KeyboardAcceleratorPlacementMode: ...
    @keyboard_accelerator_placement_mode.setter
    def keyboard_accelerator_placement_mode(self, value: windows_ui_xaml_input.KeyboardAcceleratorPlacementMode) -> None: ...
    @_property
    def key_tip_target(self) -> DependencyObject: ...
    @key_tip_target.setter
    def key_tip_target(self, value: DependencyObject) -> None: ...
    @_property
    def translation_transition(self) -> Vector3Transition: ...
    @translation_transition.setter
    def translation_transition(self, value: Vector3Transition) -> None: ...
    @_property
    def opacity_transition(self) -> ScalarTransition: ...
    @opacity_transition.setter
    def opacity_transition(self, value: ScalarTransition) -> None: ...
    @_property
    def transform_matrix(self) -> windows_foundation_numerics.Matrix4x4: ...
    @transform_matrix.setter
    def transform_matrix(self, value: windows_foundation_numerics.Matrix4x4) -> None: ...
    @_property
    def scale_transition(self) -> Vector3Transition: ...
    @scale_transition.setter
    def scale_transition(self, value: Vector3Transition) -> None: ...
    @_property
    def scale(self) -> windows_foundation_numerics.Vector3: ...
    @scale.setter
    def scale(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def rotation_transition(self) -> ScalarTransition: ...
    @rotation_transition.setter
    def rotation_transition(self, value: ScalarTransition) -> None: ...
    @_property
    def rotation_axis(self) -> windows_foundation_numerics.Vector3: ...
    @rotation_axis.setter
    def rotation_axis(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def rotation(self) -> winrt.system.Single: ...
    @rotation.setter
    def rotation(self, value: winrt.system.Single) -> None: ...
    @_property
    def translation(self) -> windows_foundation_numerics.Vector3: ...
    @translation.setter
    def translation(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def center_point(self) -> windows_foundation_numerics.Vector3: ...
    @center_point.setter
    def center_point(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def can_be_scroll_anchor(self) -> bool: ...
    @can_be_scroll_anchor.setter
    def can_be_scroll_anchor(self, value: bool) -> None: ...

class UIElementWeakCollection_Static(type):
    pass

class UIElementWeakCollection(winrt.system.Object, winrt._winrt.MutableSequence[UIElement], metaclass=UIElementWeakCollection_Static):
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[UIElement]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> UIElement: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[UIElement]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: UIElement) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[UIElement]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UIElementWeakCollection: ...
    def __new__(cls: typing.Type[UIElementWeakCollection]) -> UIElementWeakCollection: ...
    def append(self, value: UIElement, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[UIElement]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> UIElement: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[UIElement], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[UIElement]: ...
    def index_of(self, value: UIElement, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: UIElement, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[UIElement], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: UIElement, /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class UnhandledExceptionEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UnhandledExceptionEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def exception(self) -> windows_foundation.HResult: ...
    @_property
    def message(self) -> str: ...

class Vector3Transition_Static(type):
    pass

class Vector3Transition(winrt.system.Object, metaclass=Vector3Transition_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Vector3Transition: ...
    def __new__(cls: typing.Type[Vector3Transition]) -> Vector3Transition: ...
    @_property
    def duration(self) -> datetime.timedelta: ...
    @duration.setter
    def duration(self, value: datetime.timedelta) -> None: ...
    @_property
    def components(self) -> Vector3TransitionComponents: ...
    @components.setter
    def components(self, value: Vector3TransitionComponents) -> None: ...

@typing.final
class VisualState(DependencyObject):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VisualState: ...
    def __new__(cls: typing.Type[VisualState]) -> VisualState: ...
    @_property
    def storyboard(self) -> windows_ui_xaml_media_animation.Storyboard: ...
    @storyboard.setter
    def storyboard(self, value: windows_ui_xaml_media_animation.Storyboard) -> None: ...
    @_property
    def name(self) -> str: ...
    @_property
    def setters(self) -> SetterBaseCollection: ...
    @_property
    def state_triggers(self) -> typing.MutableSequence[StateTriggerBase]: ...

@typing.final
class VisualStateChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VisualStateChangedEventArgs: ...
    def __new__(cls: typing.Type[VisualStateChangedEventArgs]) -> VisualStateChangedEventArgs: ...
    @_property
    def old_state(self) -> VisualState: ...
    @old_state.setter
    def old_state(self, value: VisualState) -> None: ...
    @_property
    def new_state(self) -> VisualState: ...
    @new_state.setter
    def new_state(self, value: VisualState) -> None: ...
    @_property
    def control(self) -> windows_ui_xaml_controls.Control: ...
    @control.setter
    def control(self, value: windows_ui_xaml_controls.Control) -> None: ...

@typing.final
class VisualStateGroup(DependencyObject):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VisualStateGroup: ...
    def __new__(cls: typing.Type[VisualStateGroup]) -> VisualStateGroup: ...
    def add_current_state_changed(self, handler: VisualStateChangedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_current_state_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_current_state_changing(self, handler: VisualStateChangedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_current_state_changing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def current_state(self) -> VisualState: ...
    @_property
    def name(self) -> str: ...
    @_property
    def states(self) -> typing.MutableSequence[VisualState]: ...
    @_property
    def transitions(self) -> typing.MutableSequence[VisualTransition]: ...

class VisualStateManager_Static(DependencyObject_Static):
    def get_custom_visual_state_manager(cls, obj: FrameworkElement, /) -> VisualStateManager: ...
    def get_visual_state_groups(cls, obj: FrameworkElement, /) -> typing.MutableSequence[VisualStateGroup]: ...
    def go_to_state(cls, control: windows_ui_xaml_controls.Control, state_name: str, use_transitions: bool, /) -> bool: ...
    def set_custom_visual_state_manager(cls, obj: FrameworkElement, value: VisualStateManager, /) -> None: ...
    @_property
    def custom_visual_state_manager_property(cls) -> DependencyProperty: ...

class VisualStateManager(DependencyObject, metaclass=VisualStateManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VisualStateManager: ...
    def __new__(cls: typing.Type[VisualStateManager]) -> VisualStateManager: ...

class VisualTransition_Static(DependencyObject_Static):
    pass

class VisualTransition(DependencyObject, metaclass=VisualTransition_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VisualTransition: ...
    def __new__(cls: typing.Type[VisualTransition]) -> VisualTransition: ...
    @_property
    def to(self) -> str: ...
    @to.setter
    def to(self, value: str) -> None: ...
    @_property
    def storyboard(self) -> windows_ui_xaml_media_animation.Storyboard: ...
    @storyboard.setter
    def storyboard(self, value: windows_ui_xaml_media_animation.Storyboard) -> None: ...
    @_property
    def generated_easing_function(self) -> windows_ui_xaml_media_animation.EasingFunctionBase: ...
    @generated_easing_function.setter
    def generated_easing_function(self, value: windows_ui_xaml_media_animation.EasingFunctionBase) -> None: ...
    @_property
    def generated_duration(self) -> Duration: ...
    @generated_duration.setter
    def generated_duration(self, value: Duration) -> None: ...
    @_property
    def from_(self) -> str: ...
    @from_.setter
    def from_(self, value: str) -> None: ...

@typing.final
class Window_Static(type):
    @_property
    def current(cls) -> Window: ...

@typing.final
class Window(winrt.system.Object, metaclass=Window_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Window: ...
    def activate(self) -> None: ...
    def close(self) -> None: ...
    def set_title_bar(self, value: UIElement, /) -> None: ...
    def add_activated(self, handler: WindowActivatedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_activated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_closed(self, handler: WindowClosedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_size_changed(self, handler: WindowSizeChangedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_size_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_visibility_changed(self, handler: WindowVisibilityChangedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_visibility_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def content(self) -> UIElement: ...
    @content.setter
    def content(self, value: UIElement) -> None: ...
    @_property
    def bounds(self) -> windows_foundation.Rect: ...
    @_property
    def core_window(self) -> windows_ui_core.CoreWindow: ...
    @_property
    def dispatcher(self) -> windows_ui_core.CoreDispatcher: ...
    @_property
    def visible(self) -> bool: ...
    @_property
    def compositor(self) -> windows_ui_composition.Compositor: ...
    @_property
    def ui_context(self) -> windows_ui.UIContext: ...

@typing.final
class WindowCreatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WindowCreatedEventArgs: ...
    @_property
    def window(self) -> Window: ...

@typing.final
class XamlRoot(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XamlRoot: ...
    def add_changed(self, handler: windows_foundation.TypedEventHandler[XamlRoot, XamlRootChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def content(self) -> UIElement: ...
    @_property
    def is_host_visible(self) -> bool: ...
    @_property
    def rasterization_scale(self) -> winrt.system.Double: ...
    @_property
    def size(self) -> windows_foundation.Size: ...
    @_property
    def ui_context(self) -> windows_ui.UIContext: ...

@typing.final
class XamlRootChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> XamlRootChangedEventArgs: ...

class ImplementsIDataTemplateExtension():
    pass

class IDataTemplateExtension(winrt.system.Object, ImplementsIDataTemplateExtension):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IDataTemplateExtension: ...
    def process_binding(self, phase: winrt.system.UInt32, /) -> bool: ...
    def process_bindings(self, arg: windows_ui_xaml_controls.ContainerContentChangingEventArgs, /) -> winrt.system.Int32: ...
    def reset_template(self) -> None: ...

class ImplementsIElementFactory():
    pass

class IElementFactory(winrt.system.Object, ImplementsIElementFactory):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IElementFactory: ...
    def get_element(self, args: ElementFactoryGetArgs, /) -> UIElement: ...
    def recycle_element(self, args: ElementFactoryRecycleArgs, /) -> None: ...

