// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.ApplicationModel.Contacts.Provider.h"


namespace py::cpp::Windows::ApplicationModel::Contacts::Provider
{
    // ----- ContactPickerUI class --------------------

    static PyObject* _new_ContactPickerUI(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI>::type_name);
        return nullptr;
    }

    static void _dealloc_ContactPickerUI(py::wrapper::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ContactPickerUI_AddContact(py::wrapper::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Contacts.Provider.ContactPickerUI", L"AddContact", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Contacts::Contact>(args, 0);

                return py::convert(self->obj.AddContact(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Contacts.Provider.ContactPickerUI", L"AddContact", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::Contacts::Contact>(args, 1);

                return py::convert(self->obj.AddContact(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ContactPickerUI_ContainsContact(py::wrapper::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Contacts.Provider.ContactPickerUI", L"ContainsContact", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ContainsContact(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ContactPickerUI_RemoveContact(py::wrapper::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Contacts.Provider.ContactPickerUI", L"RemoveContact", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.RemoveContact(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ContactPickerUI_get_DesiredFields(py::wrapper::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Contacts.Provider.ContactPickerUI", L"DesiredFields"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DesiredFields());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ContactPickerUI_get_SelectionMode(py::wrapper::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Contacts.Provider.ContactPickerUI", L"SelectionMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SelectionMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ContactPickerUI_get_DesiredFieldsWithContactFieldType(py::wrapper::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Contacts.Provider.ContactPickerUI", L"DesiredFieldsWithContactFieldType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DesiredFieldsWithContactFieldType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ContactPickerUI_add_ContactRemoved(py::wrapper::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Contacts.Provider.ContactPickerUI", L"ContactRemoved"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI, winrt::Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs>>(arg);

            return py::convert(self->obj.ContactRemoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ContactPickerUI_remove_ContactRemoved(py::wrapper::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Contacts.Provider.ContactPickerUI", L"ContactRemoved"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ContactRemoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ContactPickerUI(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ContactPickerUI(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ContactPickerUI[] = {
        { "add_contact", reinterpret_cast<PyCFunction>(ContactPickerUI_AddContact), METH_VARARGS, nullptr },
        { "contains_contact", reinterpret_cast<PyCFunction>(ContactPickerUI_ContainsContact), METH_VARARGS, nullptr },
        { "remove_contact", reinterpret_cast<PyCFunction>(ContactPickerUI_RemoveContact), METH_VARARGS, nullptr },
        { "add_contact_removed", reinterpret_cast<PyCFunction>(ContactPickerUI_add_ContactRemoved), METH_O, nullptr },
        { "remove_contact_removed", reinterpret_cast<PyCFunction>(ContactPickerUI_remove_ContactRemoved), METH_O, nullptr },
        { "_assign_array_", _assign_array_ContactPickerUI, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ContactPickerUI), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ContactPickerUI[] = {
        { "desired_fields", reinterpret_cast<getter>(ContactPickerUI_get_DesiredFields), nullptr, nullptr, nullptr },
        { "selection_mode", reinterpret_cast<getter>(ContactPickerUI_get_SelectionMode), nullptr, nullptr, nullptr },
        { "desired_fields_with_contact_field_type", reinterpret_cast<getter>(ContactPickerUI_get_DesiredFieldsWithContactFieldType), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ContactPickerUI[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ContactPickerUI) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ContactPickerUI) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ContactPickerUI) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ContactPickerUI) },
        { },
    };

    static PyType_Spec type_spec_ContactPickerUI =
    {
        "winrt._winrt_windows_applicationmodel_contacts_provider.ContactPickerUI",
        sizeof(py::wrapper::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ContactPickerUI
    };

    // ----- ContactRemovedEventArgs class --------------------

    static PyObject* _new_ContactRemovedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_ContactRemovedEventArgs(py::wrapper::Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ContactRemovedEventArgs_get_Id(py::wrapper::Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Contacts.Provider.ContactRemovedEventArgs", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ContactRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ContactRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ContactRemovedEventArgs[] = {
        { "_assign_array_", _assign_array_ContactRemovedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ContactRemovedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ContactRemovedEventArgs[] = {
        { "id", reinterpret_cast<getter>(ContactRemovedEventArgs_get_Id), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ContactRemovedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ContactRemovedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ContactRemovedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ContactRemovedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ContactRemovedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_ContactRemovedEventArgs =
    {
        "winrt._winrt_windows_applicationmodel_contacts_provider.ContactRemovedEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ContactRemovedEventArgs
    };

    // ----- Windows.ApplicationModel.Contacts.Provider Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::ApplicationModel::Contacts::Provider");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_applicationmodel_contacts_provider",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::ApplicationModel::Contacts::Provider

PyMODINIT_FUNC PyInit__winrt_windows_applicationmodel_contacts_provider(void) noexcept
{
    using namespace py::cpp::Windows::ApplicationModel::Contacts::Provider;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ContactPickerUI, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ContactRemovedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
