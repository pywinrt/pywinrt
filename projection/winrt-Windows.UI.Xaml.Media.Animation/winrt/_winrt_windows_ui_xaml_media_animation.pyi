# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.ui
import winrt.windows.ui.composition
import winrt.windows.ui.xaml
import winrt.windows.ui.xaml.controls
import winrt.windows.ui.xaml.controls.primitives

from winrt.windows.ui.xaml.media.animation import ClockState, ConnectedAnimationComponent, EasingMode, FillBehavior, RepeatBehaviorType, SlideNavigationTransitionEffect

Self = typing.TypeVar('Self')

@typing.final
class KeyTime:
    time_span: datetime.timedelta
    def __init__(self, time_span: datetime.timedelta) -> None: ...

@typing.final
class RepeatBehavior:
    count: winrt.system.Double
    duration: datetime.timedelta
    type: RepeatBehaviorType
    def __init__(self, count: winrt.system.Double, duration: datetime.timedelta, type: RepeatBehaviorType) -> None: ...

@typing.final
class AddDeleteThemeTransition(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AddDeleteThemeTransition: ...
    def __new__(cls: typing.Type[AddDeleteThemeTransition]) -> AddDeleteThemeTransition:...

@typing.final
class BackEase_Static(type):
    @_property
    def amplitude_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class BackEase(winrt.system.Object, metaclass=BackEase_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackEase: ...
    def __new__(cls: typing.Type[BackEase]) -> BackEase:...
    @_property
    def amplitude(self) -> winrt.system.Double: ...
    @amplitude.setter
    def amplitude(self, value: winrt.system.Double) -> None: ...

@typing.final
class BasicConnectedAnimationConfiguration(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BasicConnectedAnimationConfiguration: ...
    def __new__(cls: typing.Type[BasicConnectedAnimationConfiguration]) -> BasicConnectedAnimationConfiguration:...

@typing.final
class BeginStoryboard_Static(type):
    @_property
    def storyboard_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class BeginStoryboard(winrt.system.Object, metaclass=BeginStoryboard_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BeginStoryboard: ...
    def __new__(cls: typing.Type[BeginStoryboard]) -> BeginStoryboard:...
    @_property
    def storyboard(self) -> typing.Optional[Storyboard]: ...
    @storyboard.setter
    def storyboard(self, value: typing.Optional[Storyboard]) -> None: ...

@typing.final
class BounceEase_Static(type):
    @_property
    def bounces_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def bounciness_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class BounceEase(winrt.system.Object, metaclass=BounceEase_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BounceEase: ...
    def __new__(cls: typing.Type[BounceEase]) -> BounceEase:...
    @_property
    def bounciness(self) -> winrt.system.Double: ...
    @bounciness.setter
    def bounciness(self, value: winrt.system.Double) -> None: ...
    @_property
    def bounces(self) -> winrt.system.Int32: ...
    @bounces.setter
    def bounces(self, value: winrt.system.Int32) -> None: ...

@typing.final
class CircleEase(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CircleEase: ...
    def __new__(cls: typing.Type[CircleEase]) -> CircleEase:...

@typing.final
class ColorAnimation_Static(type):
    @_property
    def by_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def easing_function_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def enable_dependent_animation_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def from_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def to_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class ColorAnimation(winrt.system.Object, metaclass=ColorAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ColorAnimation: ...
    def __new__(cls: typing.Type[ColorAnimation]) -> ColorAnimation:...
    @_property
    def to(self) -> typing.Optional[typing.Optional[winrt.windows.ui.Color]]: ...
    @to.setter
    def to(self, value: typing.Optional[typing.Optional[winrt.windows.ui.Color]]) -> None: ...
    @_property
    def from_(self) -> typing.Optional[typing.Optional[winrt.windows.ui.Color]]: ...
    @from_.setter
    def from_(self, value: typing.Optional[typing.Optional[winrt.windows.ui.Color]]) -> None: ...
    @_property
    def enable_dependent_animation(self) -> bool: ...
    @enable_dependent_animation.setter
    def enable_dependent_animation(self, value: bool) -> None: ...
    @_property
    def easing_function(self) -> typing.Optional[EasingFunctionBase]: ...
    @easing_function.setter
    def easing_function(self, value: typing.Optional[EasingFunctionBase]) -> None: ...
    @_property
    def by(self) -> typing.Optional[typing.Optional[winrt.windows.ui.Color]]: ...
    @by.setter
    def by(self, value: typing.Optional[typing.Optional[winrt.windows.ui.Color]]) -> None: ...

@typing.final
class ColorAnimationUsingKeyFrames_Static(type):
    @_property
    def enable_dependent_animation_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class ColorAnimationUsingKeyFrames(winrt.system.Object, metaclass=ColorAnimationUsingKeyFrames_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ColorAnimationUsingKeyFrames: ...
    def __new__(cls: typing.Type[ColorAnimationUsingKeyFrames]) -> ColorAnimationUsingKeyFrames:...
    @_property
    def enable_dependent_animation(self) -> bool: ...
    @enable_dependent_animation.setter
    def enable_dependent_animation(self, value: bool) -> None: ...
    @_property
    def key_frames(self) -> typing.Optional[ColorKeyFrameCollection]: ...

@typing.final
class ColorKeyFrame_Static(type):
    @_property
    def key_time_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def value_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class ColorKeyFrame(winrt.system.Object, metaclass=ColorKeyFrame_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ColorKeyFrame: ...
    @_property
    def value(self) -> winrt.windows.ui.Color: ...
    @value.setter
    def value(self, value: winrt.windows.ui.Color) -> None: ...
    @_property
    def key_time(self) -> KeyTime: ...
    @key_time.setter
    def key_time(self, value: KeyTime) -> None: ...

@typing.final
class ColorKeyFrameCollection(winrt.system.Object, winrt._winrt.MutableSequence[ColorKeyFrame]):
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[ColorKeyFrame]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> ColorKeyFrame: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[ColorKeyFrame]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: ColorKeyFrame) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[ColorKeyFrame]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ColorKeyFrameCollection: ...
    def __new__(cls: typing.Type[ColorKeyFrameCollection]) -> ColorKeyFrameCollection:...
    def append(self, value: typing.Optional[ColorKeyFrame], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[ColorKeyFrame]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[ColorKeyFrame]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[ColorKeyFrame], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ColorKeyFrame]]: ...
    def index_of(self, value: typing.Optional[ColorKeyFrame], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[ColorKeyFrame], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[ColorKeyFrame], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[ColorKeyFrame], /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class CommonNavigationTransitionInfo_Static(type):
    def get_is_stagger_element(cls, element: typing.Optional[winrt.windows.ui.xaml.UIElement], /) -> bool: ...
    def set_is_stagger_element(cls, element: typing.Optional[winrt.windows.ui.xaml.UIElement], value: bool, /) -> None: ...
    @_property
    def is_stagger_element_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def is_staggering_enabled_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class CommonNavigationTransitionInfo(winrt.system.Object, metaclass=CommonNavigationTransitionInfo_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CommonNavigationTransitionInfo: ...
    def __new__(cls: typing.Type[CommonNavigationTransitionInfo]) -> CommonNavigationTransitionInfo:...
    @_property
    def is_staggering_enabled(self) -> bool: ...
    @is_staggering_enabled.setter
    def is_staggering_enabled(self, value: bool) -> None: ...

@typing.final
class ConnectedAnimation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ConnectedAnimation: ...
    def cancel(self) -> None: ...
    def set_animation_component(self, component: ConnectedAnimationComponent, animation: typing.Optional[winrt.windows.ui.composition.ICompositionAnimationBase], /) -> None: ...
    @typing.overload
    def try_start(self, destination: typing.Optional[winrt.windows.ui.xaml.UIElement], /) -> bool: ...
    @typing.overload
    def try_start(self, destination: typing.Optional[winrt.windows.ui.xaml.UIElement], coordinated_elements: typing.Iterable[winrt.windows.ui.xaml.UIElement], /) -> bool: ...
    def add_completed(self, handler: winrt.windows.foundation.TypedEventHandler[ConnectedAnimation, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_scale_animation_enabled(self) -> bool: ...
    @is_scale_animation_enabled.setter
    def is_scale_animation_enabled(self, value: bool) -> None: ...
    @_property
    def configuration(self) -> typing.Optional[ConnectedAnimationConfiguration]: ...
    @configuration.setter
    def configuration(self, value: typing.Optional[ConnectedAnimationConfiguration]) -> None: ...

@typing.final
class ConnectedAnimationConfiguration(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ConnectedAnimationConfiguration: ...

@typing.final
class ConnectedAnimationService_Static(type):
    def get_for_current_view(cls) -> typing.Optional[ConnectedAnimationService]: ...

@typing.final
class ConnectedAnimationService(winrt.system.Object, metaclass=ConnectedAnimationService_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ConnectedAnimationService: ...
    def get_animation(self, key: str, /) -> typing.Optional[ConnectedAnimation]: ...
    def prepare_to_animate(self, key: str, source: typing.Optional[winrt.windows.ui.xaml.UIElement], /) -> typing.Optional[ConnectedAnimation]: ...
    @_property
    def default_easing_function(self) -> typing.Optional[winrt.windows.ui.composition.CompositionEasingFunction]: ...
    @default_easing_function.setter
    def default_easing_function(self, value: typing.Optional[winrt.windows.ui.composition.CompositionEasingFunction]) -> None: ...
    @_property
    def default_duration(self) -> datetime.timedelta: ...
    @default_duration.setter
    def default_duration(self, value: datetime.timedelta) -> None: ...

@typing.final
class ContentThemeTransition_Static(type):
    @_property
    def horizontal_offset_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def vertical_offset_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class ContentThemeTransition(winrt.system.Object, metaclass=ContentThemeTransition_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContentThemeTransition: ...
    def __new__(cls: typing.Type[ContentThemeTransition]) -> ContentThemeTransition:...
    @_property
    def vertical_offset(self) -> winrt.system.Double: ...
    @vertical_offset.setter
    def vertical_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def horizontal_offset(self) -> winrt.system.Double: ...
    @horizontal_offset.setter
    def horizontal_offset(self, value: winrt.system.Double) -> None: ...

@typing.final
class ContinuumNavigationTransitionInfo_Static(type):
    def get_exit_element_container(cls, element: typing.Optional[winrt.windows.ui.xaml.controls.ListViewBase], /) -> bool: ...
    def get_is_entrance_element(cls, element: typing.Optional[winrt.windows.ui.xaml.UIElement], /) -> bool: ...
    def get_is_exit_element(cls, element: typing.Optional[winrt.windows.ui.xaml.UIElement], /) -> bool: ...
    def set_exit_element_container(cls, element: typing.Optional[winrt.windows.ui.xaml.controls.ListViewBase], value: bool, /) -> None: ...
    def set_is_entrance_element(cls, element: typing.Optional[winrt.windows.ui.xaml.UIElement], value: bool, /) -> None: ...
    def set_is_exit_element(cls, element: typing.Optional[winrt.windows.ui.xaml.UIElement], value: bool, /) -> None: ...
    @_property
    def exit_element_container_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def exit_element_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def is_entrance_element_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def is_exit_element_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class ContinuumNavigationTransitionInfo(winrt.system.Object, metaclass=ContinuumNavigationTransitionInfo_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContinuumNavigationTransitionInfo: ...
    def __new__(cls: typing.Type[ContinuumNavigationTransitionInfo]) -> ContinuumNavigationTransitionInfo:...
    @_property
    def exit_element(self) -> typing.Optional[winrt.windows.ui.xaml.UIElement]: ...
    @exit_element.setter
    def exit_element(self, value: typing.Optional[winrt.windows.ui.xaml.UIElement]) -> None: ...

@typing.final
class CubicEase(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CubicEase: ...
    def __new__(cls: typing.Type[CubicEase]) -> CubicEase:...

@typing.final
class DirectConnectedAnimationConfiguration(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DirectConnectedAnimationConfiguration: ...
    def __new__(cls: typing.Type[DirectConnectedAnimationConfiguration]) -> DirectConnectedAnimationConfiguration:...

@typing.final
class DiscreteColorKeyFrame(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DiscreteColorKeyFrame: ...
    def __new__(cls: typing.Type[DiscreteColorKeyFrame]) -> DiscreteColorKeyFrame:...

@typing.final
class DiscreteDoubleKeyFrame(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DiscreteDoubleKeyFrame: ...
    def __new__(cls: typing.Type[DiscreteDoubleKeyFrame]) -> DiscreteDoubleKeyFrame:...

@typing.final
class DiscreteObjectKeyFrame(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DiscreteObjectKeyFrame: ...
    def __new__(cls: typing.Type[DiscreteObjectKeyFrame]) -> DiscreteObjectKeyFrame:...

@typing.final
class DiscretePointKeyFrame(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DiscretePointKeyFrame: ...
    def __new__(cls: typing.Type[DiscretePointKeyFrame]) -> DiscretePointKeyFrame:...

@typing.final
class DoubleAnimation_Static(type):
    @_property
    def by_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def easing_function_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def enable_dependent_animation_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def from_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def to_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class DoubleAnimation(winrt.system.Object, metaclass=DoubleAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DoubleAnimation: ...
    def __new__(cls: typing.Type[DoubleAnimation]) -> DoubleAnimation:...
    @_property
    def to(self) -> typing.Optional[typing.Optional[winrt.system.Double]]: ...
    @to.setter
    def to(self, value: typing.Optional[typing.Optional[winrt.system.Double]]) -> None: ...
    @_property
    def from_(self) -> typing.Optional[typing.Optional[winrt.system.Double]]: ...
    @from_.setter
    def from_(self, value: typing.Optional[typing.Optional[winrt.system.Double]]) -> None: ...
    @_property
    def enable_dependent_animation(self) -> bool: ...
    @enable_dependent_animation.setter
    def enable_dependent_animation(self, value: bool) -> None: ...
    @_property
    def easing_function(self) -> typing.Optional[EasingFunctionBase]: ...
    @easing_function.setter
    def easing_function(self, value: typing.Optional[EasingFunctionBase]) -> None: ...
    @_property
    def by(self) -> typing.Optional[typing.Optional[winrt.system.Double]]: ...
    @by.setter
    def by(self, value: typing.Optional[typing.Optional[winrt.system.Double]]) -> None: ...

@typing.final
class DoubleAnimationUsingKeyFrames_Static(type):
    @_property
    def enable_dependent_animation_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class DoubleAnimationUsingKeyFrames(winrt.system.Object, metaclass=DoubleAnimationUsingKeyFrames_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DoubleAnimationUsingKeyFrames: ...
    def __new__(cls: typing.Type[DoubleAnimationUsingKeyFrames]) -> DoubleAnimationUsingKeyFrames:...
    @_property
    def enable_dependent_animation(self) -> bool: ...
    @enable_dependent_animation.setter
    def enable_dependent_animation(self, value: bool) -> None: ...
    @_property
    def key_frames(self) -> typing.Optional[DoubleKeyFrameCollection]: ...

@typing.final
class DoubleKeyFrame_Static(type):
    @_property
    def key_time_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def value_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class DoubleKeyFrame(winrt.system.Object, metaclass=DoubleKeyFrame_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DoubleKeyFrame: ...
    @_property
    def value(self) -> winrt.system.Double: ...
    @value.setter
    def value(self, value: winrt.system.Double) -> None: ...
    @_property
    def key_time(self) -> KeyTime: ...
    @key_time.setter
    def key_time(self, value: KeyTime) -> None: ...

@typing.final
class DoubleKeyFrameCollection(winrt.system.Object, winrt._winrt.MutableSequence[DoubleKeyFrame]):
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[DoubleKeyFrame]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> DoubleKeyFrame: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[DoubleKeyFrame]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: DoubleKeyFrame) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[DoubleKeyFrame]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DoubleKeyFrameCollection: ...
    def __new__(cls: typing.Type[DoubleKeyFrameCollection]) -> DoubleKeyFrameCollection:...
    def append(self, value: typing.Optional[DoubleKeyFrame], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[DoubleKeyFrame]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[DoubleKeyFrame]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[DoubleKeyFrame], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[DoubleKeyFrame]]: ...
    def index_of(self, value: typing.Optional[DoubleKeyFrame], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[DoubleKeyFrame], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[DoubleKeyFrame], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[DoubleKeyFrame], /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class DragItemThemeAnimation_Static(type):
    @_property
    def target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class DragItemThemeAnimation(winrt.system.Object, metaclass=DragItemThemeAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragItemThemeAnimation: ...
    def __new__(cls: typing.Type[DragItemThemeAnimation]) -> DragItemThemeAnimation:...
    @_property
    def target_name(self) -> str: ...
    @target_name.setter
    def target_name(self, value: str) -> None: ...

@typing.final
class DragOverThemeAnimation_Static(type):
    @_property
    def direction_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def to_offset_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class DragOverThemeAnimation(winrt.system.Object, metaclass=DragOverThemeAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragOverThemeAnimation: ...
    def __new__(cls: typing.Type[DragOverThemeAnimation]) -> DragOverThemeAnimation:...
    @_property
    def to_offset(self) -> winrt.system.Double: ...
    @to_offset.setter
    def to_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def target_name(self) -> str: ...
    @target_name.setter
    def target_name(self, value: str) -> None: ...
    @_property
    def direction(self) -> winrt.windows.ui.xaml.controls.primitives.AnimationDirection: ...
    @direction.setter
    def direction(self, value: winrt.windows.ui.xaml.controls.primitives.AnimationDirection) -> None: ...

@typing.final
class DrillInNavigationTransitionInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DrillInNavigationTransitionInfo: ...
    def __new__(cls: typing.Type[DrillInNavigationTransitionInfo]) -> DrillInNavigationTransitionInfo:...

@typing.final
class DrillInThemeAnimation_Static(type):
    @_property
    def entrance_target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def entrance_target_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def exit_target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def exit_target_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class DrillInThemeAnimation(winrt.system.Object, metaclass=DrillInThemeAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DrillInThemeAnimation: ...
    def __new__(cls: typing.Type[DrillInThemeAnimation]) -> DrillInThemeAnimation:...
    @_property
    def exit_target_name(self) -> str: ...
    @exit_target_name.setter
    def exit_target_name(self, value: str) -> None: ...
    @_property
    def exit_target(self) -> typing.Optional[winrt.windows.ui.xaml.DependencyObject]: ...
    @exit_target.setter
    def exit_target(self, value: typing.Optional[winrt.windows.ui.xaml.DependencyObject]) -> None: ...
    @_property
    def entrance_target_name(self) -> str: ...
    @entrance_target_name.setter
    def entrance_target_name(self, value: str) -> None: ...
    @_property
    def entrance_target(self) -> typing.Optional[winrt.windows.ui.xaml.DependencyObject]: ...
    @entrance_target.setter
    def entrance_target(self, value: typing.Optional[winrt.windows.ui.xaml.DependencyObject]) -> None: ...

@typing.final
class DrillOutThemeAnimation_Static(type):
    @_property
    def entrance_target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def entrance_target_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def exit_target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def exit_target_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class DrillOutThemeAnimation(winrt.system.Object, metaclass=DrillOutThemeAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DrillOutThemeAnimation: ...
    def __new__(cls: typing.Type[DrillOutThemeAnimation]) -> DrillOutThemeAnimation:...
    @_property
    def exit_target_name(self) -> str: ...
    @exit_target_name.setter
    def exit_target_name(self, value: str) -> None: ...
    @_property
    def exit_target(self) -> typing.Optional[winrt.windows.ui.xaml.DependencyObject]: ...
    @exit_target.setter
    def exit_target(self, value: typing.Optional[winrt.windows.ui.xaml.DependencyObject]) -> None: ...
    @_property
    def entrance_target_name(self) -> str: ...
    @entrance_target_name.setter
    def entrance_target_name(self, value: str) -> None: ...
    @_property
    def entrance_target(self) -> typing.Optional[winrt.windows.ui.xaml.DependencyObject]: ...
    @entrance_target.setter
    def entrance_target(self, value: typing.Optional[winrt.windows.ui.xaml.DependencyObject]) -> None: ...

@typing.final
class DropTargetItemThemeAnimation_Static(type):
    @_property
    def target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class DropTargetItemThemeAnimation(winrt.system.Object, metaclass=DropTargetItemThemeAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DropTargetItemThemeAnimation: ...
    def __new__(cls: typing.Type[DropTargetItemThemeAnimation]) -> DropTargetItemThemeAnimation:...
    @_property
    def target_name(self) -> str: ...
    @target_name.setter
    def target_name(self, value: str) -> None: ...

@typing.final
class EasingColorKeyFrame_Static(type):
    @_property
    def easing_function_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class EasingColorKeyFrame(winrt.system.Object, metaclass=EasingColorKeyFrame_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EasingColorKeyFrame: ...
    def __new__(cls: typing.Type[EasingColorKeyFrame]) -> EasingColorKeyFrame:...
    @_property
    def easing_function(self) -> typing.Optional[EasingFunctionBase]: ...
    @easing_function.setter
    def easing_function(self, value: typing.Optional[EasingFunctionBase]) -> None: ...

@typing.final
class EasingDoubleKeyFrame_Static(type):
    @_property
    def easing_function_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class EasingDoubleKeyFrame(winrt.system.Object, metaclass=EasingDoubleKeyFrame_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EasingDoubleKeyFrame: ...
    def __new__(cls: typing.Type[EasingDoubleKeyFrame]) -> EasingDoubleKeyFrame:...
    @_property
    def easing_function(self) -> typing.Optional[EasingFunctionBase]: ...
    @easing_function.setter
    def easing_function(self, value: typing.Optional[EasingFunctionBase]) -> None: ...

@typing.final
class EasingFunctionBase_Static(type):
    @_property
    def easing_mode_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class EasingFunctionBase(winrt.system.Object, metaclass=EasingFunctionBase_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EasingFunctionBase: ...
    def ease(self, normalized_time: winrt.system.Double, /) -> winrt.system.Double: ...
    @_property
    def easing_mode(self) -> EasingMode: ...
    @easing_mode.setter
    def easing_mode(self, value: EasingMode) -> None: ...

@typing.final
class EasingPointKeyFrame_Static(type):
    @_property
    def easing_function_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class EasingPointKeyFrame(winrt.system.Object, metaclass=EasingPointKeyFrame_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EasingPointKeyFrame: ...
    def __new__(cls: typing.Type[EasingPointKeyFrame]) -> EasingPointKeyFrame:...
    @_property
    def easing_function(self) -> typing.Optional[EasingFunctionBase]: ...
    @easing_function.setter
    def easing_function(self, value: typing.Optional[EasingFunctionBase]) -> None: ...

@typing.final
class EdgeUIThemeTransition_Static(type):
    @_property
    def edge_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class EdgeUIThemeTransition(winrt.system.Object, metaclass=EdgeUIThemeTransition_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EdgeUIThemeTransition: ...
    def __new__(cls: typing.Type[EdgeUIThemeTransition]) -> EdgeUIThemeTransition:...
    @_property
    def edge(self) -> winrt.windows.ui.xaml.controls.primitives.EdgeTransitionLocation: ...
    @edge.setter
    def edge(self, value: winrt.windows.ui.xaml.controls.primitives.EdgeTransitionLocation) -> None: ...

@typing.final
class ElasticEase_Static(type):
    @_property
    def oscillations_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def springiness_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class ElasticEase(winrt.system.Object, metaclass=ElasticEase_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ElasticEase: ...
    def __new__(cls: typing.Type[ElasticEase]) -> ElasticEase:...
    @_property
    def springiness(self) -> winrt.system.Double: ...
    @springiness.setter
    def springiness(self, value: winrt.system.Double) -> None: ...
    @_property
    def oscillations(self) -> winrt.system.Int32: ...
    @oscillations.setter
    def oscillations(self, value: winrt.system.Int32) -> None: ...

@typing.final
class EntranceNavigationTransitionInfo_Static(type):
    def get_is_target_element(cls, element: typing.Optional[winrt.windows.ui.xaml.UIElement], /) -> bool: ...
    def set_is_target_element(cls, element: typing.Optional[winrt.windows.ui.xaml.UIElement], value: bool, /) -> None: ...
    @_property
    def is_target_element_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class EntranceNavigationTransitionInfo(winrt.system.Object, metaclass=EntranceNavigationTransitionInfo_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EntranceNavigationTransitionInfo: ...
    def __new__(cls: typing.Type[EntranceNavigationTransitionInfo]) -> EntranceNavigationTransitionInfo:...

@typing.final
class EntranceThemeTransition_Static(type):
    @_property
    def from_horizontal_offset_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def from_vertical_offset_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def is_staggering_enabled_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class EntranceThemeTransition(winrt.system.Object, metaclass=EntranceThemeTransition_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EntranceThemeTransition: ...
    def __new__(cls: typing.Type[EntranceThemeTransition]) -> EntranceThemeTransition:...
    @_property
    def is_staggering_enabled(self) -> bool: ...
    @is_staggering_enabled.setter
    def is_staggering_enabled(self, value: bool) -> None: ...
    @_property
    def from_vertical_offset(self) -> winrt.system.Double: ...
    @from_vertical_offset.setter
    def from_vertical_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def from_horizontal_offset(self) -> winrt.system.Double: ...
    @from_horizontal_offset.setter
    def from_horizontal_offset(self, value: winrt.system.Double) -> None: ...

@typing.final
class ExponentialEase_Static(type):
    @_property
    def exponent_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class ExponentialEase(winrt.system.Object, metaclass=ExponentialEase_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ExponentialEase: ...
    def __new__(cls: typing.Type[ExponentialEase]) -> ExponentialEase:...
    @_property
    def exponent(self) -> winrt.system.Double: ...
    @exponent.setter
    def exponent(self, value: winrt.system.Double) -> None: ...

@typing.final
class FadeInThemeAnimation_Static(type):
    @_property
    def target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class FadeInThemeAnimation(winrt.system.Object, metaclass=FadeInThemeAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FadeInThemeAnimation: ...
    def __new__(cls: typing.Type[FadeInThemeAnimation]) -> FadeInThemeAnimation:...
    @_property
    def target_name(self) -> str: ...
    @target_name.setter
    def target_name(self, value: str) -> None: ...

@typing.final
class FadeOutThemeAnimation_Static(type):
    @_property
    def target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class FadeOutThemeAnimation(winrt.system.Object, metaclass=FadeOutThemeAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FadeOutThemeAnimation: ...
    def __new__(cls: typing.Type[FadeOutThemeAnimation]) -> FadeOutThemeAnimation:...
    @_property
    def target_name(self) -> str: ...
    @target_name.setter
    def target_name(self, value: str) -> None: ...

@typing.final
class GravityConnectedAnimationConfiguration(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GravityConnectedAnimationConfiguration: ...
    def __new__(cls: typing.Type[GravityConnectedAnimationConfiguration]) -> GravityConnectedAnimationConfiguration:...
    @_property
    def is_shadow_enabled(self) -> bool: ...
    @is_shadow_enabled.setter
    def is_shadow_enabled(self, value: bool) -> None: ...

@typing.final
class KeySpline(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> KeySpline: ...
    def __new__(cls: typing.Type[KeySpline]) -> KeySpline:...
    @_property
    def control_point2(self) -> winrt.windows.foundation.Point: ...
    @control_point2.setter
    def control_point2(self, value: winrt.windows.foundation.Point) -> None: ...
    @_property
    def control_point1(self) -> winrt.windows.foundation.Point: ...
    @control_point1.setter
    def control_point1(self, value: winrt.windows.foundation.Point) -> None: ...

@typing.final
class KeyTimeHelper_Static(type):
    def from_time_span(cls, time_span: datetime.timedelta, /) -> KeyTime: ...

@typing.final
class KeyTimeHelper(winrt.system.Object, metaclass=KeyTimeHelper_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> KeyTimeHelper: ...

@typing.final
class LinearColorKeyFrame(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LinearColorKeyFrame: ...
    def __new__(cls: typing.Type[LinearColorKeyFrame]) -> LinearColorKeyFrame:...

@typing.final
class LinearDoubleKeyFrame(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LinearDoubleKeyFrame: ...
    def __new__(cls: typing.Type[LinearDoubleKeyFrame]) -> LinearDoubleKeyFrame:...

@typing.final
class LinearPointKeyFrame(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LinearPointKeyFrame: ...
    def __new__(cls: typing.Type[LinearPointKeyFrame]) -> LinearPointKeyFrame:...

@typing.final
class NavigationThemeTransition_Static(type):
    @_property
    def default_navigation_transition_info_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class NavigationThemeTransition(winrt.system.Object, metaclass=NavigationThemeTransition_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationThemeTransition: ...
    def __new__(cls: typing.Type[NavigationThemeTransition]) -> NavigationThemeTransition:...
    @_property
    def default_navigation_transition_info(self) -> typing.Optional[NavigationTransitionInfo]: ...
    @default_navigation_transition_info.setter
    def default_navigation_transition_info(self, value: typing.Optional[NavigationTransitionInfo]) -> None: ...

@typing.final
class NavigationTransitionInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationTransitionInfo: ...
    def get_navigation_state_core(self) -> str: ...
    def set_navigation_state_core(self, navigation_state: str, /) -> None: ...

@typing.final
class ObjectAnimationUsingKeyFrames_Static(type):
    @_property
    def enable_dependent_animation_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class ObjectAnimationUsingKeyFrames(winrt.system.Object, metaclass=ObjectAnimationUsingKeyFrames_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ObjectAnimationUsingKeyFrames: ...
    def __new__(cls: typing.Type[ObjectAnimationUsingKeyFrames]) -> ObjectAnimationUsingKeyFrames:...
    @_property
    def enable_dependent_animation(self) -> bool: ...
    @enable_dependent_animation.setter
    def enable_dependent_animation(self, value: bool) -> None: ...
    @_property
    def key_frames(self) -> typing.Optional[ObjectKeyFrameCollection]: ...

@typing.final
class ObjectKeyFrame_Static(type):
    @_property
    def key_time_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def value_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class ObjectKeyFrame(winrt.system.Object, metaclass=ObjectKeyFrame_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ObjectKeyFrame: ...
    @_property
    def value(self) -> typing.Optional[winrt.system.Object]: ...
    @value.setter
    def value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def key_time(self) -> KeyTime: ...
    @key_time.setter
    def key_time(self, value: KeyTime) -> None: ...

@typing.final
class ObjectKeyFrameCollection(winrt.system.Object, winrt._winrt.MutableSequence[ObjectKeyFrame]):
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[ObjectKeyFrame]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> ObjectKeyFrame: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[ObjectKeyFrame]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: ObjectKeyFrame) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[ObjectKeyFrame]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ObjectKeyFrameCollection: ...
    def __new__(cls: typing.Type[ObjectKeyFrameCollection]) -> ObjectKeyFrameCollection:...
    def append(self, value: typing.Optional[ObjectKeyFrame], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[ObjectKeyFrame]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[ObjectKeyFrame]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[ObjectKeyFrame], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ObjectKeyFrame]]: ...
    def index_of(self, value: typing.Optional[ObjectKeyFrame], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[ObjectKeyFrame], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[ObjectKeyFrame], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[ObjectKeyFrame], /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class PaneThemeTransition_Static(type):
    @_property
    def edge_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class PaneThemeTransition(winrt.system.Object, metaclass=PaneThemeTransition_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PaneThemeTransition: ...
    def __new__(cls: typing.Type[PaneThemeTransition]) -> PaneThemeTransition:...
    @_property
    def edge(self) -> winrt.windows.ui.xaml.controls.primitives.EdgeTransitionLocation: ...
    @edge.setter
    def edge(self, value: winrt.windows.ui.xaml.controls.primitives.EdgeTransitionLocation) -> None: ...

@typing.final
class PointAnimation_Static(type):
    @_property
    def by_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def easing_function_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def enable_dependent_animation_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def from_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def to_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class PointAnimation(winrt.system.Object, metaclass=PointAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PointAnimation: ...
    def __new__(cls: typing.Type[PointAnimation]) -> PointAnimation:...
    @_property
    def to(self) -> typing.Optional[typing.Optional[winrt.windows.foundation.Point]]: ...
    @to.setter
    def to(self, value: typing.Optional[typing.Optional[winrt.windows.foundation.Point]]) -> None: ...
    @_property
    def from_(self) -> typing.Optional[typing.Optional[winrt.windows.foundation.Point]]: ...
    @from_.setter
    def from_(self, value: typing.Optional[typing.Optional[winrt.windows.foundation.Point]]) -> None: ...
    @_property
    def enable_dependent_animation(self) -> bool: ...
    @enable_dependent_animation.setter
    def enable_dependent_animation(self, value: bool) -> None: ...
    @_property
    def easing_function(self) -> typing.Optional[EasingFunctionBase]: ...
    @easing_function.setter
    def easing_function(self, value: typing.Optional[EasingFunctionBase]) -> None: ...
    @_property
    def by(self) -> typing.Optional[typing.Optional[winrt.windows.foundation.Point]]: ...
    @by.setter
    def by(self, value: typing.Optional[typing.Optional[winrt.windows.foundation.Point]]) -> None: ...

@typing.final
class PointAnimationUsingKeyFrames_Static(type):
    @_property
    def enable_dependent_animation_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class PointAnimationUsingKeyFrames(winrt.system.Object, metaclass=PointAnimationUsingKeyFrames_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PointAnimationUsingKeyFrames: ...
    def __new__(cls: typing.Type[PointAnimationUsingKeyFrames]) -> PointAnimationUsingKeyFrames:...
    @_property
    def enable_dependent_animation(self) -> bool: ...
    @enable_dependent_animation.setter
    def enable_dependent_animation(self, value: bool) -> None: ...
    @_property
    def key_frames(self) -> typing.Optional[PointKeyFrameCollection]: ...

@typing.final
class PointKeyFrame_Static(type):
    @_property
    def key_time_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def value_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class PointKeyFrame(winrt.system.Object, metaclass=PointKeyFrame_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PointKeyFrame: ...
    @_property
    def value(self) -> winrt.windows.foundation.Point: ...
    @value.setter
    def value(self, value: winrt.windows.foundation.Point) -> None: ...
    @_property
    def key_time(self) -> KeyTime: ...
    @key_time.setter
    def key_time(self, value: KeyTime) -> None: ...

@typing.final
class PointKeyFrameCollection(winrt.system.Object, winrt._winrt.MutableSequence[PointKeyFrame]):
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[PointKeyFrame]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> PointKeyFrame: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[PointKeyFrame]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: PointKeyFrame) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[PointKeyFrame]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PointKeyFrameCollection: ...
    def __new__(cls: typing.Type[PointKeyFrameCollection]) -> PointKeyFrameCollection:...
    def append(self, value: typing.Optional[PointKeyFrame], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[PointKeyFrame]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[PointKeyFrame]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[PointKeyFrame], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[PointKeyFrame]]: ...
    def index_of(self, value: typing.Optional[PointKeyFrame], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[PointKeyFrame], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[PointKeyFrame], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[PointKeyFrame], /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class PointerDownThemeAnimation_Static(type):
    @_property
    def target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class PointerDownThemeAnimation(winrt.system.Object, metaclass=PointerDownThemeAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PointerDownThemeAnimation: ...
    def __new__(cls: typing.Type[PointerDownThemeAnimation]) -> PointerDownThemeAnimation:...
    @_property
    def target_name(self) -> str: ...
    @target_name.setter
    def target_name(self, value: str) -> None: ...

@typing.final
class PointerUpThemeAnimation_Static(type):
    @_property
    def target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class PointerUpThemeAnimation(winrt.system.Object, metaclass=PointerUpThemeAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PointerUpThemeAnimation: ...
    def __new__(cls: typing.Type[PointerUpThemeAnimation]) -> PointerUpThemeAnimation:...
    @_property
    def target_name(self) -> str: ...
    @target_name.setter
    def target_name(self, value: str) -> None: ...

@typing.final
class PopInThemeAnimation_Static(type):
    @_property
    def from_horizontal_offset_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def from_vertical_offset_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class PopInThemeAnimation(winrt.system.Object, metaclass=PopInThemeAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PopInThemeAnimation: ...
    def __new__(cls: typing.Type[PopInThemeAnimation]) -> PopInThemeAnimation:...
    @_property
    def target_name(self) -> str: ...
    @target_name.setter
    def target_name(self, value: str) -> None: ...
    @_property
    def from_vertical_offset(self) -> winrt.system.Double: ...
    @from_vertical_offset.setter
    def from_vertical_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def from_horizontal_offset(self) -> winrt.system.Double: ...
    @from_horizontal_offset.setter
    def from_horizontal_offset(self, value: winrt.system.Double) -> None: ...

@typing.final
class PopOutThemeAnimation_Static(type):
    @_property
    def target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class PopOutThemeAnimation(winrt.system.Object, metaclass=PopOutThemeAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PopOutThemeAnimation: ...
    def __new__(cls: typing.Type[PopOutThemeAnimation]) -> PopOutThemeAnimation:...
    @_property
    def target_name(self) -> str: ...
    @target_name.setter
    def target_name(self, value: str) -> None: ...

@typing.final
class PopupThemeTransition_Static(type):
    @_property
    def from_horizontal_offset_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def from_vertical_offset_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class PopupThemeTransition(winrt.system.Object, metaclass=PopupThemeTransition_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PopupThemeTransition: ...
    def __new__(cls: typing.Type[PopupThemeTransition]) -> PopupThemeTransition:...
    @_property
    def from_vertical_offset(self) -> winrt.system.Double: ...
    @from_vertical_offset.setter
    def from_vertical_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def from_horizontal_offset(self) -> winrt.system.Double: ...
    @from_horizontal_offset.setter
    def from_horizontal_offset(self, value: winrt.system.Double) -> None: ...

@typing.final
class PowerEase_Static(type):
    @_property
    def power_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class PowerEase(winrt.system.Object, metaclass=PowerEase_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PowerEase: ...
    def __new__(cls: typing.Type[PowerEase]) -> PowerEase:...
    @_property
    def power(self) -> winrt.system.Double: ...
    @power.setter
    def power(self, value: winrt.system.Double) -> None: ...

@typing.final
class QuadraticEase(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> QuadraticEase: ...
    def __new__(cls: typing.Type[QuadraticEase]) -> QuadraticEase:...

@typing.final
class QuarticEase(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> QuarticEase: ...
    def __new__(cls: typing.Type[QuarticEase]) -> QuarticEase:...

@typing.final
class QuinticEase(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> QuinticEase: ...
    def __new__(cls: typing.Type[QuinticEase]) -> QuinticEase:...

@typing.final
class ReorderThemeTransition(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ReorderThemeTransition: ...
    def __new__(cls: typing.Type[ReorderThemeTransition]) -> ReorderThemeTransition:...

@typing.final
class RepeatBehaviorHelper_Static(type):
    def equals(cls, target: RepeatBehavior, value: RepeatBehavior, /) -> bool: ...
    def from_count(cls, count: winrt.system.Double, /) -> RepeatBehavior: ...
    def from_duration(cls, duration: datetime.timedelta, /) -> RepeatBehavior: ...
    def get_has_count(cls, target: RepeatBehavior, /) -> bool: ...
    def get_has_duration(cls, target: RepeatBehavior, /) -> bool: ...
    @_property
    def forever(cls) -> RepeatBehavior: ...

@typing.final
class RepeatBehaviorHelper(winrt.system.Object, metaclass=RepeatBehaviorHelper_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RepeatBehaviorHelper: ...

@typing.final
class RepositionThemeAnimation_Static(type):
    @_property
    def from_horizontal_offset_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def from_vertical_offset_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class RepositionThemeAnimation(winrt.system.Object, metaclass=RepositionThemeAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RepositionThemeAnimation: ...
    def __new__(cls: typing.Type[RepositionThemeAnimation]) -> RepositionThemeAnimation:...
    @_property
    def target_name(self) -> str: ...
    @target_name.setter
    def target_name(self, value: str) -> None: ...
    @_property
    def from_vertical_offset(self) -> winrt.system.Double: ...
    @from_vertical_offset.setter
    def from_vertical_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def from_horizontal_offset(self) -> winrt.system.Double: ...
    @from_horizontal_offset.setter
    def from_horizontal_offset(self, value: winrt.system.Double) -> None: ...

@typing.final
class RepositionThemeTransition_Static(type):
    @_property
    def is_staggering_enabled_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class RepositionThemeTransition(winrt.system.Object, metaclass=RepositionThemeTransition_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RepositionThemeTransition: ...
    def __new__(cls: typing.Type[RepositionThemeTransition]) -> RepositionThemeTransition:...
    @_property
    def is_staggering_enabled(self) -> bool: ...
    @is_staggering_enabled.setter
    def is_staggering_enabled(self, value: bool) -> None: ...

@typing.final
class SineEase(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SineEase: ...
    def __new__(cls: typing.Type[SineEase]) -> SineEase:...

@typing.final
class SlideNavigationTransitionInfo_Static(type):
    @_property
    def effect_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class SlideNavigationTransitionInfo(winrt.system.Object, metaclass=SlideNavigationTransitionInfo_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SlideNavigationTransitionInfo: ...
    def __new__(cls: typing.Type[SlideNavigationTransitionInfo]) -> SlideNavigationTransitionInfo:...
    @_property
    def effect(self) -> SlideNavigationTransitionEffect: ...
    @effect.setter
    def effect(self, value: SlideNavigationTransitionEffect) -> None: ...

@typing.final
class SplineColorKeyFrame_Static(type):
    @_property
    def key_spline_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class SplineColorKeyFrame(winrt.system.Object, metaclass=SplineColorKeyFrame_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SplineColorKeyFrame: ...
    def __new__(cls: typing.Type[SplineColorKeyFrame]) -> SplineColorKeyFrame:...
    @_property
    def key_spline(self) -> typing.Optional[KeySpline]: ...
    @key_spline.setter
    def key_spline(self, value: typing.Optional[KeySpline]) -> None: ...

@typing.final
class SplineDoubleKeyFrame_Static(type):
    @_property
    def key_spline_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class SplineDoubleKeyFrame(winrt.system.Object, metaclass=SplineDoubleKeyFrame_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SplineDoubleKeyFrame: ...
    def __new__(cls: typing.Type[SplineDoubleKeyFrame]) -> SplineDoubleKeyFrame:...
    @_property
    def key_spline(self) -> typing.Optional[KeySpline]: ...
    @key_spline.setter
    def key_spline(self, value: typing.Optional[KeySpline]) -> None: ...

@typing.final
class SplinePointKeyFrame_Static(type):
    @_property
    def key_spline_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class SplinePointKeyFrame(winrt.system.Object, metaclass=SplinePointKeyFrame_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SplinePointKeyFrame: ...
    def __new__(cls: typing.Type[SplinePointKeyFrame]) -> SplinePointKeyFrame:...
    @_property
    def key_spline(self) -> typing.Optional[KeySpline]: ...
    @key_spline.setter
    def key_spline(self, value: typing.Optional[KeySpline]) -> None: ...

@typing.final
class SplitCloseThemeAnimation_Static(type):
    @_property
    def closed_length_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def closed_target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def closed_target_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def content_target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def content_target_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def content_translation_direction_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def content_translation_offset_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def offset_from_center_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def opened_length_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def opened_target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def opened_target_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class SplitCloseThemeAnimation(winrt.system.Object, metaclass=SplitCloseThemeAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SplitCloseThemeAnimation: ...
    def __new__(cls: typing.Type[SplitCloseThemeAnimation]) -> SplitCloseThemeAnimation:...
    @_property
    def opened_target_name(self) -> str: ...
    @opened_target_name.setter
    def opened_target_name(self, value: str) -> None: ...
    @_property
    def opened_target(self) -> typing.Optional[winrt.windows.ui.xaml.DependencyObject]: ...
    @opened_target.setter
    def opened_target(self, value: typing.Optional[winrt.windows.ui.xaml.DependencyObject]) -> None: ...
    @_property
    def opened_length(self) -> winrt.system.Double: ...
    @opened_length.setter
    def opened_length(self, value: winrt.system.Double) -> None: ...
    @_property
    def offset_from_center(self) -> winrt.system.Double: ...
    @offset_from_center.setter
    def offset_from_center(self, value: winrt.system.Double) -> None: ...
    @_property
    def content_translation_offset(self) -> winrt.system.Double: ...
    @content_translation_offset.setter
    def content_translation_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def content_translation_direction(self) -> winrt.windows.ui.xaml.controls.primitives.AnimationDirection: ...
    @content_translation_direction.setter
    def content_translation_direction(self, value: winrt.windows.ui.xaml.controls.primitives.AnimationDirection) -> None: ...
    @_property
    def content_target_name(self) -> str: ...
    @content_target_name.setter
    def content_target_name(self, value: str) -> None: ...
    @_property
    def content_target(self) -> typing.Optional[winrt.windows.ui.xaml.DependencyObject]: ...
    @content_target.setter
    def content_target(self, value: typing.Optional[winrt.windows.ui.xaml.DependencyObject]) -> None: ...
    @_property
    def closed_target_name(self) -> str: ...
    @closed_target_name.setter
    def closed_target_name(self, value: str) -> None: ...
    @_property
    def closed_target(self) -> typing.Optional[winrt.windows.ui.xaml.DependencyObject]: ...
    @closed_target.setter
    def closed_target(self, value: typing.Optional[winrt.windows.ui.xaml.DependencyObject]) -> None: ...
    @_property
    def closed_length(self) -> winrt.system.Double: ...
    @closed_length.setter
    def closed_length(self, value: winrt.system.Double) -> None: ...

@typing.final
class SplitOpenThemeAnimation_Static(type):
    @_property
    def closed_length_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def closed_target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def closed_target_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def content_target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def content_target_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def content_translation_direction_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def content_translation_offset_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def offset_from_center_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def opened_length_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def opened_target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def opened_target_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class SplitOpenThemeAnimation(winrt.system.Object, metaclass=SplitOpenThemeAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SplitOpenThemeAnimation: ...
    def __new__(cls: typing.Type[SplitOpenThemeAnimation]) -> SplitOpenThemeAnimation:...
    @_property
    def opened_target_name(self) -> str: ...
    @opened_target_name.setter
    def opened_target_name(self, value: str) -> None: ...
    @_property
    def opened_target(self) -> typing.Optional[winrt.windows.ui.xaml.DependencyObject]: ...
    @opened_target.setter
    def opened_target(self, value: typing.Optional[winrt.windows.ui.xaml.DependencyObject]) -> None: ...
    @_property
    def opened_length(self) -> winrt.system.Double: ...
    @opened_length.setter
    def opened_length(self, value: winrt.system.Double) -> None: ...
    @_property
    def offset_from_center(self) -> winrt.system.Double: ...
    @offset_from_center.setter
    def offset_from_center(self, value: winrt.system.Double) -> None: ...
    @_property
    def content_translation_offset(self) -> winrt.system.Double: ...
    @content_translation_offset.setter
    def content_translation_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def content_translation_direction(self) -> winrt.windows.ui.xaml.controls.primitives.AnimationDirection: ...
    @content_translation_direction.setter
    def content_translation_direction(self, value: winrt.windows.ui.xaml.controls.primitives.AnimationDirection) -> None: ...
    @_property
    def content_target_name(self) -> str: ...
    @content_target_name.setter
    def content_target_name(self, value: str) -> None: ...
    @_property
    def content_target(self) -> typing.Optional[winrt.windows.ui.xaml.DependencyObject]: ...
    @content_target.setter
    def content_target(self, value: typing.Optional[winrt.windows.ui.xaml.DependencyObject]) -> None: ...
    @_property
    def closed_target_name(self) -> str: ...
    @closed_target_name.setter
    def closed_target_name(self, value: str) -> None: ...
    @_property
    def closed_target(self) -> typing.Optional[winrt.windows.ui.xaml.DependencyObject]: ...
    @closed_target.setter
    def closed_target(self, value: typing.Optional[winrt.windows.ui.xaml.DependencyObject]) -> None: ...
    @_property
    def closed_length(self) -> winrt.system.Double: ...
    @closed_length.setter
    def closed_length(self, value: winrt.system.Double) -> None: ...

@typing.final
class Storyboard_Static(type):
    def get_target_name(cls, element: typing.Optional[Timeline], /) -> str: ...
    def get_target_property(cls, element: typing.Optional[Timeline], /) -> str: ...
    def set_target(cls, timeline: typing.Optional[Timeline], target: typing.Optional[winrt.windows.ui.xaml.DependencyObject], /) -> None: ...
    def set_target_name(cls, element: typing.Optional[Timeline], name: str, /) -> None: ...
    def set_target_property(cls, element: typing.Optional[Timeline], path: str, /) -> None: ...
    @_property
    def target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def target_property_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class Storyboard(winrt.system.Object, metaclass=Storyboard_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Storyboard: ...
    def __new__(cls: typing.Type[Storyboard]) -> Storyboard:...
    def begin(self) -> None: ...
    def get_current_state(self) -> ClockState: ...
    def get_current_time(self) -> datetime.timedelta: ...
    def pause(self) -> None: ...
    def resume(self) -> None: ...
    def seek(self, offset: datetime.timedelta, /) -> None: ...
    def seek_aligned_to_last_tick(self, offset: datetime.timedelta, /) -> None: ...
    def skip_to_fill(self) -> None: ...
    def stop(self) -> None: ...
    @_property
    def children(self) -> typing.Optional[TimelineCollection]: ...

@typing.final
class SuppressNavigationTransitionInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SuppressNavigationTransitionInfo: ...
    def __new__(cls: typing.Type[SuppressNavigationTransitionInfo]) -> SuppressNavigationTransitionInfo:...

@typing.final
class SwipeBackThemeAnimation_Static(type):
    @_property
    def from_horizontal_offset_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def from_vertical_offset_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class SwipeBackThemeAnimation(winrt.system.Object, metaclass=SwipeBackThemeAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SwipeBackThemeAnimation: ...
    def __new__(cls: typing.Type[SwipeBackThemeAnimation]) -> SwipeBackThemeAnimation:...
    @_property
    def target_name(self) -> str: ...
    @target_name.setter
    def target_name(self, value: str) -> None: ...
    @_property
    def from_vertical_offset(self) -> winrt.system.Double: ...
    @from_vertical_offset.setter
    def from_vertical_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def from_horizontal_offset(self) -> winrt.system.Double: ...
    @from_horizontal_offset.setter
    def from_horizontal_offset(self, value: winrt.system.Double) -> None: ...

@typing.final
class SwipeHintThemeAnimation_Static(type):
    @_property
    def target_name_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def to_horizontal_offset_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def to_vertical_offset_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class SwipeHintThemeAnimation(winrt.system.Object, metaclass=SwipeHintThemeAnimation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SwipeHintThemeAnimation: ...
    def __new__(cls: typing.Type[SwipeHintThemeAnimation]) -> SwipeHintThemeAnimation:...
    @_property
    def to_vertical_offset(self) -> winrt.system.Double: ...
    @to_vertical_offset.setter
    def to_vertical_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def to_horizontal_offset(self) -> winrt.system.Double: ...
    @to_horizontal_offset.setter
    def to_horizontal_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def target_name(self) -> str: ...
    @target_name.setter
    def target_name(self, value: str) -> None: ...

@typing.final
class Timeline_Static(type):
    @_property
    def allow_dependent_animations(cls) -> bool: ...
    @allow_dependent_animations.setter
    def allow_dependent_animations(cls, value: bool) -> None: ...
    @_property
    def auto_reverse_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def begin_time_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def duration_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def fill_behavior_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def repeat_behavior_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...
    @_property
    def speed_ratio_property(cls) -> typing.Optional[winrt.windows.ui.xaml.DependencyProperty]: ...

@typing.final
class Timeline(winrt.system.Object, metaclass=Timeline_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Timeline: ...
    def add_completed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def speed_ratio(self) -> winrt.system.Double: ...
    @speed_ratio.setter
    def speed_ratio(self, value: winrt.system.Double) -> None: ...
    @_property
    def repeat_behavior(self) -> RepeatBehavior: ...
    @repeat_behavior.setter
    def repeat_behavior(self, value: RepeatBehavior) -> None: ...
    @_property
    def fill_behavior(self) -> FillBehavior: ...
    @fill_behavior.setter
    def fill_behavior(self, value: FillBehavior) -> None: ...
    @_property
    def duration(self) -> winrt.windows.ui.xaml.Duration: ...
    @duration.setter
    def duration(self, value: winrt.windows.ui.xaml.Duration) -> None: ...
    @_property
    def begin_time(self) -> typing.Optional[typing.Optional[datetime.timedelta]]: ...
    @begin_time.setter
    def begin_time(self, value: typing.Optional[typing.Optional[datetime.timedelta]]) -> None: ...
    @_property
    def auto_reverse(self) -> bool: ...
    @auto_reverse.setter
    def auto_reverse(self, value: bool) -> None: ...

@typing.final
class TimelineCollection(winrt.system.Object, winrt._winrt.MutableSequence[Timeline]):
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[Timeline]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> Timeline: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[Timeline]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: Timeline) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[Timeline]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TimelineCollection: ...
    def __new__(cls: typing.Type[TimelineCollection]) -> TimelineCollection:...
    def append(self, value: typing.Optional[Timeline], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[Timeline]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[Timeline]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[Timeline], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[Timeline]]: ...
    def index_of(self, value: typing.Optional[Timeline], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[Timeline], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[Timeline], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[Timeline], /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class Transition(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Transition: ...

@typing.final
class TransitionCollection(winrt.system.Object, winrt._winrt.MutableSequence[Transition]):
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[Transition]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> Transition: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[Transition]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: Transition) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[Transition]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TransitionCollection: ...
    def __new__(cls: typing.Type[TransitionCollection]) -> TransitionCollection:...
    def append(self, value: typing.Optional[Transition], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[Transition]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[Transition]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[Transition], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[Transition]]: ...
    def index_of(self, value: typing.Optional[Transition], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[Transition], /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[Transition], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[Transition], /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

