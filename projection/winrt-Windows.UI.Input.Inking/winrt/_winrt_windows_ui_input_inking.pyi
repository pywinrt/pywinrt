# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.foundation.numerics as windows_foundation_numerics
import winrt.windows.storage.streams as windows_storage_streams
import winrt.windows.ui as windows_ui
import winrt.windows.ui.core as windows_ui_core
import winrt.windows.ui.input as windows_ui_input

from winrt.windows.ui.input.inking import HandwritingLineHeight, InkDrawingAttributesKind, InkHighContrastAdjustment, InkInputProcessingMode, InkInputRightDragAction, InkManipulationMode, InkPersistenceFormat, InkPresenterPredefinedConfiguration, InkPresenterStencilKind, InkRecognitionTarget, PenHandedness, PenTipShape

Self = typing.TypeVar('Self')

@typing.final
class InkDrawingAttributes_Static(type):
    # Windows.UI.Input.Inking.InkDrawingAttributes Windows.UI.Input.Inking.InkDrawingAttributes::CreateForPencil()
    def create_for_pencil(cls) -> InkDrawingAttributes: ...

@typing.final
class InkDrawingAttributes(winrt.system.Object, metaclass=InkDrawingAttributes_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Size Windows.UI.Input.Inking.InkDrawingAttributes::get_Size()
    @_property
    def size(self) -> windows_foundation.Size: ...
    # System.Void Windows.UI.Input.Inking.InkDrawingAttributes::put_Size(Windows.Foundation.Size)
    @size.setter
    def size(self, value: windows_foundation.Size) -> None: ...
    # Windows.UI.Input.Inking.PenTipShape Windows.UI.Input.Inking.InkDrawingAttributes::get_PenTip()
    @_property
    def pen_tip(self) -> PenTipShape: ...
    # System.Void Windows.UI.Input.Inking.InkDrawingAttributes::put_PenTip(Windows.UI.Input.Inking.PenTipShape)
    @pen_tip.setter
    def pen_tip(self, value: PenTipShape) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkDrawingAttributes::get_IgnorePressure()
    @_property
    def ignore_pressure(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkDrawingAttributes::put_IgnorePressure(System.Boolean)
    @ignore_pressure.setter
    def ignore_pressure(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkDrawingAttributes::get_FitToCurve()
    @_property
    def fit_to_curve(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkDrawingAttributes::put_FitToCurve(System.Boolean)
    @fit_to_curve.setter
    def fit_to_curve(self, value: bool) -> None: ...
    # Windows.UI.Color Windows.UI.Input.Inking.InkDrawingAttributes::get_Color()
    @_property
    def color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.Input.Inking.InkDrawingAttributes::put_Color(Windows.UI.Color)
    @color.setter
    def color(self, value: windows_ui.Color) -> None: ...
    # Windows.Foundation.Numerics.Matrix3x2 Windows.UI.Input.Inking.InkDrawingAttributes::get_PenTipTransform()
    @_property
    def pen_tip_transform(self) -> windows_foundation_numerics.Matrix3x2: ...
    # System.Void Windows.UI.Input.Inking.InkDrawingAttributes::put_PenTipTransform(Windows.Foundation.Numerics.Matrix3x2)
    @pen_tip_transform.setter
    def pen_tip_transform(self, value: windows_foundation_numerics.Matrix3x2) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkDrawingAttributes::get_DrawAsHighlighter()
    @_property
    def draw_as_highlighter(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkDrawingAttributes::put_DrawAsHighlighter(System.Boolean)
    @draw_as_highlighter.setter
    def draw_as_highlighter(self, value: bool) -> None: ...
    # Windows.UI.Input.Inking.InkDrawingAttributesKind Windows.UI.Input.Inking.InkDrawingAttributes::get_Kind()
    @_property
    def kind(self) -> InkDrawingAttributesKind: ...
    # Windows.UI.Input.Inking.InkDrawingAttributesPencilProperties Windows.UI.Input.Inking.InkDrawingAttributes::get_PencilProperties()
    @_property
    def pencil_properties(self) -> InkDrawingAttributesPencilProperties: ...
    # System.Boolean Windows.UI.Input.Inking.InkDrawingAttributes::get_IgnoreTilt()
    @_property
    def ignore_tilt(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkDrawingAttributes::put_IgnoreTilt(System.Boolean)
    @ignore_tilt.setter
    def ignore_tilt(self, value: bool) -> None: ...
    # Windows.UI.Input.Inking.InkModelerAttributes Windows.UI.Input.Inking.InkDrawingAttributes::get_ModelerAttributes()
    @_property
    def modeler_attributes(self) -> InkModelerAttributes: ...

@typing.final
class InkDrawingAttributesPencilProperties(winrt.system.Object):
    # System.Double Windows.UI.Input.Inking.InkDrawingAttributesPencilProperties::get_Opacity()
    @_property
    def opacity(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Input.Inking.InkDrawingAttributesPencilProperties::put_Opacity(System.Double)
    @opacity.setter
    def opacity(self, value: winrt.system.Double) -> None: ...

@typing.final
class InkInputConfiguration(winrt.system.Object):
    # System.Boolean Windows.UI.Input.Inking.InkInputConfiguration::get_IsPrimaryBarrelButtonInputEnabled()
    @_property
    def is_primary_barrel_button_input_enabled(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkInputConfiguration::put_IsPrimaryBarrelButtonInputEnabled(System.Boolean)
    @is_primary_barrel_button_input_enabled.setter
    def is_primary_barrel_button_input_enabled(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkInputConfiguration::get_IsEraserInputEnabled()
    @_property
    def is_eraser_input_enabled(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkInputConfiguration::put_IsEraserInputEnabled(System.Boolean)
    @is_eraser_input_enabled.setter
    def is_eraser_input_enabled(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkInputConfiguration::get_IsPenHapticFeedbackEnabled()
    @_property
    def is_pen_haptic_feedback_enabled(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkInputConfiguration::put_IsPenHapticFeedbackEnabled(System.Boolean)
    @is_pen_haptic_feedback_enabled.setter
    def is_pen_haptic_feedback_enabled(self, value: bool) -> None: ...

@typing.final
class InkInputProcessingConfiguration(winrt.system.Object):
    # Windows.UI.Input.Inking.InkInputRightDragAction Windows.UI.Input.Inking.InkInputProcessingConfiguration::get_RightDragAction()
    @_property
    def right_drag_action(self) -> InkInputRightDragAction: ...
    # System.Void Windows.UI.Input.Inking.InkInputProcessingConfiguration::put_RightDragAction(Windows.UI.Input.Inking.InkInputRightDragAction)
    @right_drag_action.setter
    def right_drag_action(self, value: InkInputRightDragAction) -> None: ...
    # Windows.UI.Input.Inking.InkInputProcessingMode Windows.UI.Input.Inking.InkInputProcessingConfiguration::get_Mode()
    @_property
    def mode(self) -> InkInputProcessingMode: ...
    # System.Void Windows.UI.Input.Inking.InkInputProcessingConfiguration::put_Mode(Windows.UI.Input.Inking.InkInputProcessingMode)
    @mode.setter
    def mode(self, value: InkInputProcessingMode) -> None: ...

@typing.final
class InkManager(winrt.system.Object, ImplementsIInkRecognizerContainer, ImplementsIInkStrokeContainer):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.UI.Input.Inking.InkManager::AddStroke(Windows.UI.Input.Inking.InkStroke)
    def add_stroke(self, stroke: InkStroke, /) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkManager::CanPasteFromClipboard()
    def can_paste_from_clipboard(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkManager::CopySelectedToClipboard()
    def copy_selected_to_clipboard(self) -> None: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.InkManager::DeleteSelected()
    def delete_selected(self) -> windows_foundation.Rect: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkRecognitionResult> Windows.UI.Input.Inking.InkManager::GetRecognitionResults()
    def get_recognition_results(self) -> typing.Sequence[InkRecognitionResult]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkRecognizer> Windows.UI.Input.Inking.InkManager::GetRecognizers()
    def get_recognizers(self) -> typing.Sequence[InkRecognizer]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkStroke> Windows.UI.Input.Inking.InkManager::GetStrokes()
    def get_strokes(self) -> typing.Sequence[InkStroke]: ...
    # Windows.Foundation.IAsyncActionWithProgress`1<System.UInt64> Windows.UI.Input.Inking.InkManager::LoadAsync(Windows.Storage.Streams.IInputStream)
    def load_async(self, input_stream: windows_storage_streams.ImplementsIInputStream, /) -> windows_foundation.IAsyncActionWithProgress[winrt.system.UInt64]: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.InkManager::MoveSelected(Windows.Foundation.Point)
    def move_selected(self, translation: windows_foundation.Point, /) -> windows_foundation.Rect: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.InkManager::PasteFromClipboard(Windows.Foundation.Point)
    def paste_from_clipboard(self, position: windows_foundation.Point, /) -> windows_foundation.Rect: ...
    # System.Void Windows.UI.Input.Inking.InkManager::ProcessPointerDown(Windows.UI.Input.PointerPoint)
    def process_pointer_down(self, pointer_point: windows_ui_input.PointerPoint, /) -> None: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.InkManager::ProcessPointerUp(Windows.UI.Input.PointerPoint)
    def process_pointer_up(self, pointer_point: windows_ui_input.PointerPoint, /) -> windows_foundation.Rect: ...
    # System.Object Windows.UI.Input.Inking.InkManager::ProcessPointerUpdate(Windows.UI.Input.PointerPoint)
    def process_pointer_update(self, pointer_point: windows_ui_input.PointerPoint, /) -> winrt.system.Object: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkRecognitionResult>> Windows.UI.Input.Inking.InkManager::RecognizeAsync(Windows.UI.Input.Inking.InkStrokeContainer,Windows.UI.Input.Inking.InkRecognitionTarget)
    def recognize_async(self, stroke_collection: InkStrokeContainer, recognition_target: InkRecognitionTarget, /) -> windows_foundation.IAsyncOperation[typing.Sequence[InkRecognitionResult]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkRecognitionResult>> Windows.UI.Input.Inking.InkManager::RecognizeAsync(Windows.UI.Input.Inking.InkRecognitionTarget)
    def recognize_async2(self, recognition_target: InkRecognitionTarget, /) -> windows_foundation.IAsyncOperation[typing.Sequence[InkRecognitionResult]]: ...
    # Windows.Foundation.IAsyncOperationWithProgress`2<System.UInt32,System.UInt32> Windows.UI.Input.Inking.InkManager::SaveAsync(Windows.Storage.Streams.IOutputStream)
    def save_async(self, output_stream: windows_storage_streams.ImplementsIOutputStream, /) -> windows_foundation.IAsyncOperationWithProgress[winrt.system.UInt32, winrt.system.UInt32]: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.InkManager::SelectWithLine(Windows.Foundation.Point,Windows.Foundation.Point)
    def select_with_line(self, from_: windows_foundation.Point, to: windows_foundation.Point, /) -> windows_foundation.Rect: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.InkManager::SelectWithPolyLine(Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Point>)
    def select_with_poly_line(self, polyline: typing.Iterable[windows_foundation.Point], /) -> windows_foundation.Rect: ...
    # System.Void Windows.UI.Input.Inking.InkManager::SetDefaultDrawingAttributes(Windows.UI.Input.Inking.InkDrawingAttributes)
    def set_default_drawing_attributes(self, drawing_attributes: InkDrawingAttributes, /) -> None: ...
    # System.Void Windows.UI.Input.Inking.InkManager::SetDefaultRecognizer(Windows.UI.Input.Inking.InkRecognizer)
    def set_default_recognizer(self, recognizer: InkRecognizer, /) -> None: ...
    # System.Void Windows.UI.Input.Inking.InkManager::UpdateRecognitionResults(Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkRecognitionResult>)
    def update_recognition_results(self, recognition_results: typing.Sequence[InkRecognitionResult], /) -> None: ...
    # Windows.UI.Input.Inking.InkManipulationMode Windows.UI.Input.Inking.InkManager::get_Mode()
    @_property
    def mode(self) -> InkManipulationMode: ...
    # System.Void Windows.UI.Input.Inking.InkManager::put_Mode(Windows.UI.Input.Inking.InkManipulationMode)
    @mode.setter
    def mode(self, value: InkManipulationMode) -> None: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.InkManager::get_BoundingRect()
    @_property
    def bounding_rect(self) -> windows_foundation.Rect: ...

@typing.final
class InkModelerAttributes(winrt.system.Object):
    # System.Single Windows.UI.Input.Inking.InkModelerAttributes::get_ScalingFactor()
    @_property
    def scaling_factor(self) -> winrt.system.Single: ...
    # System.Void Windows.UI.Input.Inking.InkModelerAttributes::put_ScalingFactor(System.Single)
    @scaling_factor.setter
    def scaling_factor(self, value: winrt.system.Single) -> None: ...
    # Windows.Foundation.TimeSpan Windows.UI.Input.Inking.InkModelerAttributes::get_PredictionTime()
    @_property
    def prediction_time(self) -> datetime.timedelta: ...
    # System.Void Windows.UI.Input.Inking.InkModelerAttributes::put_PredictionTime(Windows.Foundation.TimeSpan)
    @prediction_time.setter
    def prediction_time(self, value: datetime.timedelta) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkModelerAttributes::get_UseVelocityBasedPressure()
    @_property
    def use_velocity_based_pressure(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkModelerAttributes::put_UseVelocityBasedPressure(System.Boolean)
    @use_velocity_based_pressure.setter
    def use_velocity_based_pressure(self, value: bool) -> None: ...

@typing.final
class InkPoint(winrt.system.Object):
    @typing.overload
    def __new__(cls: typing.Type[Self], position: windows_foundation.Point, pressure: winrt.system.Single, tilt_x: winrt.system.Single, tilt_y: winrt.system.Single, timestamp: winrt.system.UInt64) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], position: windows_foundation.Point, pressure: winrt.system.Single) -> Self: ...
    # Windows.Foundation.Point Windows.UI.Input.Inking.InkPoint::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...
    # System.Single Windows.UI.Input.Inking.InkPoint::get_Pressure()
    @_property
    def pressure(self) -> winrt.system.Single: ...
    # System.Single Windows.UI.Input.Inking.InkPoint::get_TiltX()
    @_property
    def tilt_x(self) -> winrt.system.Single: ...
    # System.Single Windows.UI.Input.Inking.InkPoint::get_TiltY()
    @_property
    def tilt_y(self) -> winrt.system.Single: ...
    # System.UInt64 Windows.UI.Input.Inking.InkPoint::get_Timestamp()
    @_property
    def timestamp(self) -> winrt.system.UInt64: ...

@typing.final
class InkPresenter(winrt.system.Object):
    # Windows.UI.Input.Inking.InkSynchronizer Windows.UI.Input.Inking.InkPresenter::ActivateCustomDrying()
    def activate_custom_drying(self) -> InkSynchronizer: ...
    # Windows.UI.Input.Inking.InkDrawingAttributes Windows.UI.Input.Inking.InkPresenter::CopyDefaultDrawingAttributes()
    def copy_default_drawing_attributes(self) -> InkDrawingAttributes: ...
    # System.Void Windows.UI.Input.Inking.InkPresenter::SetPredefinedConfiguration(Windows.UI.Input.Inking.InkPresenterPredefinedConfiguration)
    def set_predefined_configuration(self, value: InkPresenterPredefinedConfiguration, /) -> None: ...
    # System.Void Windows.UI.Input.Inking.InkPresenter::UpdateDefaultDrawingAttributes(Windows.UI.Input.Inking.InkDrawingAttributes)
    def update_default_drawing_attributes(self, value: InkDrawingAttributes, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.Inking.InkPresenter::add_StrokesCollected(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.Inking.InkPresenter,Windows.UI.Input.Inking.InkStrokesCollectedEventArgs>)
    def add_strokes_collected(self, handler: windows_foundation.TypedEventHandler[InkPresenter, InkStrokesCollectedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.Inking.InkPresenter::remove_StrokesCollected(Windows.Foundation.EventRegistrationToken)
    def remove_strokes_collected(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.Inking.InkPresenter::add_StrokesErased(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.Inking.InkPresenter,Windows.UI.Input.Inking.InkStrokesErasedEventArgs>)
    def add_strokes_erased(self, handler: windows_foundation.TypedEventHandler[InkPresenter, InkStrokesErasedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.Inking.InkPresenter::remove_StrokesErased(Windows.Foundation.EventRegistrationToken)
    def remove_strokes_erased(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.UI.Input.Inking.InkStrokeContainer Windows.UI.Input.Inking.InkPresenter::get_StrokeContainer()
    @_property
    def stroke_container(self) -> InkStrokeContainer: ...
    # System.Void Windows.UI.Input.Inking.InkPresenter::put_StrokeContainer(Windows.UI.Input.Inking.InkStrokeContainer)
    @stroke_container.setter
    def stroke_container(self, value: InkStrokeContainer) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkPresenter::get_IsInputEnabled()
    @_property
    def is_input_enabled(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkPresenter::put_IsInputEnabled(System.Boolean)
    @is_input_enabled.setter
    def is_input_enabled(self, value: bool) -> None: ...
    # Windows.UI.Core.CoreInputDeviceTypes Windows.UI.Input.Inking.InkPresenter::get_InputDeviceTypes()
    @_property
    def input_device_types(self) -> windows_ui_core.CoreInputDeviceTypes: ...
    # System.Void Windows.UI.Input.Inking.InkPresenter::put_InputDeviceTypes(Windows.UI.Core.CoreInputDeviceTypes)
    @input_device_types.setter
    def input_device_types(self, value: windows_ui_core.CoreInputDeviceTypes) -> None: ...
    # Windows.UI.Input.Inking.InkInputProcessingConfiguration Windows.UI.Input.Inking.InkPresenter::get_InputProcessingConfiguration()
    @_property
    def input_processing_configuration(self) -> InkInputProcessingConfiguration: ...
    # Windows.UI.Input.Inking.InkStrokeInput Windows.UI.Input.Inking.InkPresenter::get_StrokeInput()
    @_property
    def stroke_input(self) -> InkStrokeInput: ...
    # Windows.UI.Input.Inking.InkUnprocessedInput Windows.UI.Input.Inking.InkPresenter::get_UnprocessedInput()
    @_property
    def unprocessed_input(self) -> InkUnprocessedInput: ...
    # Windows.UI.Input.Inking.InkHighContrastAdjustment Windows.UI.Input.Inking.InkPresenter::get_HighContrastAdjustment()
    @_property
    def high_contrast_adjustment(self) -> InkHighContrastAdjustment: ...
    # System.Void Windows.UI.Input.Inking.InkPresenter::put_HighContrastAdjustment(Windows.UI.Input.Inking.InkHighContrastAdjustment)
    @high_contrast_adjustment.setter
    def high_contrast_adjustment(self, value: InkHighContrastAdjustment) -> None: ...
    # Windows.UI.Input.Inking.InkInputConfiguration Windows.UI.Input.Inking.InkPresenter::get_InputConfiguration()
    @_property
    def input_configuration(self) -> InkInputConfiguration: ...

@typing.final
class InkPresenterProtractor(winrt.system.Object, ImplementsIInkPresenterStencil):
    def __new__(cls: typing.Type[Self], ink_presenter: InkPresenter) -> Self: ...
    # System.Double Windows.UI.Input.Inking.InkPresenterProtractor::get_Radius()
    @_property
    def radius(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterProtractor::put_Radius(System.Double)
    @radius.setter
    def radius(self, value: winrt.system.Double) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkPresenterProtractor::get_IsResizable()
    @_property
    def is_resizable(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterProtractor::put_IsResizable(System.Boolean)
    @is_resizable.setter
    def is_resizable(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkPresenterProtractor::get_IsCenterMarkerVisible()
    @_property
    def is_center_marker_visible(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterProtractor::put_IsCenterMarkerVisible(System.Boolean)
    @is_center_marker_visible.setter
    def is_center_marker_visible(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkPresenterProtractor::get_IsAngleReadoutVisible()
    @_property
    def is_angle_readout_visible(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterProtractor::put_IsAngleReadoutVisible(System.Boolean)
    @is_angle_readout_visible.setter
    def is_angle_readout_visible(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkPresenterProtractor::get_AreTickMarksVisible()
    @_property
    def are_tick_marks_visible(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterProtractor::put_AreTickMarksVisible(System.Boolean)
    @are_tick_marks_visible.setter
    def are_tick_marks_visible(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkPresenterProtractor::get_AreRaysVisible()
    @_property
    def are_rays_visible(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterProtractor::put_AreRaysVisible(System.Boolean)
    @are_rays_visible.setter
    def are_rays_visible(self, value: bool) -> None: ...
    # Windows.UI.Color Windows.UI.Input.Inking.InkPresenterProtractor::get_AccentColor()
    @_property
    def accent_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterProtractor::put_AccentColor(Windows.UI.Color)
    @accent_color.setter
    def accent_color(self, value: windows_ui.Color) -> None: ...
    # Windows.Foundation.Numerics.Matrix3x2 Windows.UI.Input.Inking.InkPresenterProtractor::get_Transform()
    @_property
    def transform(self) -> windows_foundation_numerics.Matrix3x2: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterProtractor::put_Transform(Windows.Foundation.Numerics.Matrix3x2)
    @transform.setter
    def transform(self, value: windows_foundation_numerics.Matrix3x2) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkPresenterProtractor::get_IsVisible()
    @_property
    def is_visible(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterProtractor::put_IsVisible(System.Boolean)
    @is_visible.setter
    def is_visible(self, value: bool) -> None: ...
    # Windows.UI.Color Windows.UI.Input.Inking.InkPresenterProtractor::get_ForegroundColor()
    @_property
    def foreground_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterProtractor::put_ForegroundColor(Windows.UI.Color)
    @foreground_color.setter
    def foreground_color(self, value: windows_ui.Color) -> None: ...
    # Windows.UI.Color Windows.UI.Input.Inking.InkPresenterProtractor::get_BackgroundColor()
    @_property
    def background_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterProtractor::put_BackgroundColor(Windows.UI.Color)
    @background_color.setter
    def background_color(self, value: windows_ui.Color) -> None: ...
    # Windows.UI.Input.Inking.InkPresenterStencilKind Windows.UI.Input.Inking.InkPresenterProtractor::get_Kind()
    @_property
    def kind(self) -> InkPresenterStencilKind: ...

@typing.final
class InkPresenterRuler(winrt.system.Object, ImplementsIInkPresenterStencil):
    def __new__(cls: typing.Type[Self], ink_presenter: InkPresenter) -> Self: ...
    # System.Double Windows.UI.Input.Inking.InkPresenterRuler::get_Width()
    @_property
    def width(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterRuler::put_Width(System.Double)
    @width.setter
    def width(self, value: winrt.system.Double) -> None: ...
    # System.Double Windows.UI.Input.Inking.InkPresenterRuler::get_Length()
    @_property
    def length(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterRuler::put_Length(System.Double)
    @length.setter
    def length(self, value: winrt.system.Double) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkPresenterRuler::get_IsCompassVisible()
    @_property
    def is_compass_visible(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterRuler::put_IsCompassVisible(System.Boolean)
    @is_compass_visible.setter
    def is_compass_visible(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkPresenterRuler::get_AreTickMarksVisible()
    @_property
    def are_tick_marks_visible(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterRuler::put_AreTickMarksVisible(System.Boolean)
    @are_tick_marks_visible.setter
    def are_tick_marks_visible(self, value: bool) -> None: ...
    # Windows.Foundation.Numerics.Matrix3x2 Windows.UI.Input.Inking.InkPresenterRuler::get_Transform()
    @_property
    def transform(self) -> windows_foundation_numerics.Matrix3x2: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterRuler::put_Transform(Windows.Foundation.Numerics.Matrix3x2)
    @transform.setter
    def transform(self, value: windows_foundation_numerics.Matrix3x2) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkPresenterRuler::get_IsVisible()
    @_property
    def is_visible(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterRuler::put_IsVisible(System.Boolean)
    @is_visible.setter
    def is_visible(self, value: bool) -> None: ...
    # Windows.UI.Color Windows.UI.Input.Inking.InkPresenterRuler::get_ForegroundColor()
    @_property
    def foreground_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterRuler::put_ForegroundColor(Windows.UI.Color)
    @foreground_color.setter
    def foreground_color(self, value: windows_ui.Color) -> None: ...
    # Windows.UI.Color Windows.UI.Input.Inking.InkPresenterRuler::get_BackgroundColor()
    @_property
    def background_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.Input.Inking.InkPresenterRuler::put_BackgroundColor(Windows.UI.Color)
    @background_color.setter
    def background_color(self, value: windows_ui.Color) -> None: ...
    # Windows.UI.Input.Inking.InkPresenterStencilKind Windows.UI.Input.Inking.InkPresenterRuler::get_Kind()
    @_property
    def kind(self) -> InkPresenterStencilKind: ...

@typing.final
class InkRecognitionResult(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkStroke> Windows.UI.Input.Inking.InkRecognitionResult::GetStrokes()
    def get_strokes(self) -> typing.Sequence[InkStroke]: ...
    # Windows.Foundation.Collections.IVectorView`1<System.String> Windows.UI.Input.Inking.InkRecognitionResult::GetTextCandidates()
    def get_text_candidates(self) -> typing.Sequence[str]: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.InkRecognitionResult::get_BoundingRect()
    @_property
    def bounding_rect(self) -> windows_foundation.Rect: ...

@typing.final
class InkRecognizer(winrt.system.Object):
    # System.String Windows.UI.Input.Inking.InkRecognizer::get_Name()
    @_property
    def name(self) -> str: ...

@typing.final
class InkRecognizerContainer(winrt.system.Object, ImplementsIInkRecognizerContainer):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkRecognizer> Windows.UI.Input.Inking.InkRecognizerContainer::GetRecognizers()
    def get_recognizers(self) -> typing.Sequence[InkRecognizer]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkRecognitionResult>> Windows.UI.Input.Inking.InkRecognizerContainer::RecognizeAsync(Windows.UI.Input.Inking.InkStrokeContainer,Windows.UI.Input.Inking.InkRecognitionTarget)
    def recognize_async(self, stroke_collection: InkStrokeContainer, recognition_target: InkRecognitionTarget, /) -> windows_foundation.IAsyncOperation[typing.Sequence[InkRecognitionResult]]: ...
    # System.Void Windows.UI.Input.Inking.InkRecognizerContainer::SetDefaultRecognizer(Windows.UI.Input.Inking.InkRecognizer)
    def set_default_recognizer(self, recognizer: InkRecognizer, /) -> None: ...

@typing.final
class InkStroke(winrt.system.Object):
    # Windows.UI.Input.Inking.InkStroke Windows.UI.Input.Inking.InkStroke::Clone()
    def clone(self) -> InkStroke: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkPoint> Windows.UI.Input.Inking.InkStroke::GetInkPoints()
    def get_ink_points(self) -> typing.Sequence[InkPoint]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkStrokeRenderingSegment> Windows.UI.Input.Inking.InkStroke::GetRenderingSegments()
    def get_rendering_segments(self) -> typing.Sequence[InkStrokeRenderingSegment]: ...
    # System.Boolean Windows.UI.Input.Inking.InkStroke::get_Selected()
    @_property
    def selected(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkStroke::put_Selected(System.Boolean)
    @selected.setter
    def selected(self, value: bool) -> None: ...
    # Windows.UI.Input.Inking.InkDrawingAttributes Windows.UI.Input.Inking.InkStroke::get_DrawingAttributes()
    @_property
    def drawing_attributes(self) -> InkDrawingAttributes: ...
    # System.Void Windows.UI.Input.Inking.InkStroke::put_DrawingAttributes(Windows.UI.Input.Inking.InkDrawingAttributes)
    @drawing_attributes.setter
    def drawing_attributes(self, value: InkDrawingAttributes) -> None: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.InkStroke::get_BoundingRect()
    @_property
    def bounding_rect(self) -> windows_foundation.Rect: ...
    # System.Boolean Windows.UI.Input.Inking.InkStroke::get_Recognized()
    @_property
    def recognized(self) -> bool: ...
    # Windows.Foundation.Numerics.Matrix3x2 Windows.UI.Input.Inking.InkStroke::get_PointTransform()
    @_property
    def point_transform(self) -> windows_foundation_numerics.Matrix3x2: ...
    # System.Void Windows.UI.Input.Inking.InkStroke::put_PointTransform(Windows.Foundation.Numerics.Matrix3x2)
    @point_transform.setter
    def point_transform(self, value: windows_foundation_numerics.Matrix3x2) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.DateTime> Windows.UI.Input.Inking.InkStroke::get_StrokeStartedTime()
    @_property
    def stroke_started_time(self) -> typing.Optional[datetime.datetime]: ...
    # System.Void Windows.UI.Input.Inking.InkStroke::put_StrokeStartedTime(Windows.Foundation.IReference`1<Windows.Foundation.DateTime>)
    @stroke_started_time.setter
    def stroke_started_time(self, value: typing.Optional[datetime.datetime]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.UI.Input.Inking.InkStroke::get_StrokeDuration()
    @_property
    def stroke_duration(self) -> typing.Optional[datetime.timedelta]: ...
    # System.Void Windows.UI.Input.Inking.InkStroke::put_StrokeDuration(Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan>)
    @stroke_duration.setter
    def stroke_duration(self, value: typing.Optional[datetime.timedelta]) -> None: ...
    # System.UInt32 Windows.UI.Input.Inking.InkStroke::get_Id()
    @_property
    def id(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.UI.Input.Inking.InkStroke::get_PointerId()
    @_property
    def pointer_id(self) -> winrt.system.UInt32: ...

@typing.final
class InkStrokeBuilder(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.UI.Input.PointerPoint Windows.UI.Input.Inking.InkStrokeBuilder::AppendToStroke(Windows.UI.Input.PointerPoint)
    def append_to_stroke(self, pointer_point: windows_ui_input.PointerPoint, /) -> windows_ui_input.PointerPoint: ...
    # System.Void Windows.UI.Input.Inking.InkStrokeBuilder::BeginStroke(Windows.UI.Input.PointerPoint)
    def begin_stroke(self, pointer_point: windows_ui_input.PointerPoint, /) -> None: ...
    # Windows.UI.Input.Inking.InkStroke Windows.UI.Input.Inking.InkStrokeBuilder::CreateStroke(Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Point>)
    def create_stroke(self, points: typing.Iterable[windows_foundation.Point], /) -> InkStroke: ...
    @typing.overload
    # Windows.UI.Input.Inking.InkStroke Windows.UI.Input.Inking.InkStrokeBuilder::CreateStrokeFromInkPoints(Windows.Foundation.Collections.IIterable`1<Windows.UI.Input.Inking.InkPoint>,Windows.Foundation.Numerics.Matrix3x2)
    def create_stroke_from_ink_points(self, ink_points: typing.Iterable[InkPoint], transform: windows_foundation_numerics.Matrix3x2, /) -> InkStroke: ...
    @typing.overload
    # Windows.UI.Input.Inking.InkStroke Windows.UI.Input.Inking.InkStrokeBuilder::CreateStrokeFromInkPoints(Windows.Foundation.Collections.IIterable`1<Windows.UI.Input.Inking.InkPoint>,Windows.Foundation.Numerics.Matrix3x2,Windows.Foundation.IReference`1<Windows.Foundation.DateTime>,Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan>)
    def create_stroke_from_ink_points(self, ink_points: typing.Iterable[InkPoint], transform: windows_foundation_numerics.Matrix3x2, stroke_started_time: typing.Optional[datetime.datetime], stroke_duration: typing.Optional[datetime.timedelta], /) -> InkStroke: ...
    # Windows.UI.Input.Inking.InkStroke Windows.UI.Input.Inking.InkStrokeBuilder::EndStroke(Windows.UI.Input.PointerPoint)
    def end_stroke(self, pointer_point: windows_ui_input.PointerPoint, /) -> InkStroke: ...
    # System.Void Windows.UI.Input.Inking.InkStrokeBuilder::SetDefaultDrawingAttributes(Windows.UI.Input.Inking.InkDrawingAttributes)
    def set_default_drawing_attributes(self, drawing_attributes: InkDrawingAttributes, /) -> None: ...

@typing.final
class InkStrokeContainer(winrt.system.Object, ImplementsIInkStrokeContainer):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.UI.Input.Inking.InkStrokeContainer::AddStroke(Windows.UI.Input.Inking.InkStroke)
    def add_stroke(self, stroke: InkStroke, /) -> None: ...
    # System.Void Windows.UI.Input.Inking.InkStrokeContainer::AddStrokes(Windows.Foundation.Collections.IIterable`1<Windows.UI.Input.Inking.InkStroke>)
    def add_strokes(self, strokes: typing.Iterable[InkStroke], /) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.InkStrokeContainer::CanPasteFromClipboard()
    def can_paste_from_clipboard(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.InkStrokeContainer::Clear()
    def clear(self) -> None: ...
    # System.Void Windows.UI.Input.Inking.InkStrokeContainer::CopySelectedToClipboard()
    def copy_selected_to_clipboard(self) -> None: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.InkStrokeContainer::DeleteSelected()
    def delete_selected(self) -> windows_foundation.Rect: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkRecognitionResult> Windows.UI.Input.Inking.InkStrokeContainer::GetRecognitionResults()
    def get_recognition_results(self) -> typing.Sequence[InkRecognitionResult]: ...
    # Windows.UI.Input.Inking.InkStroke Windows.UI.Input.Inking.InkStrokeContainer::GetStrokeById(System.UInt32)
    def get_stroke_by_id(self, id: winrt.system.UInt32, /) -> InkStroke: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkStroke> Windows.UI.Input.Inking.InkStrokeContainer::GetStrokes()
    def get_strokes(self) -> typing.Sequence[InkStroke]: ...
    # Windows.Foundation.IAsyncActionWithProgress`1<System.UInt64> Windows.UI.Input.Inking.InkStrokeContainer::LoadAsync(Windows.Storage.Streams.IInputStream)
    def load_async(self, input_stream: windows_storage_streams.ImplementsIInputStream, /) -> windows_foundation.IAsyncActionWithProgress[winrt.system.UInt64]: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.InkStrokeContainer::MoveSelected(Windows.Foundation.Point)
    def move_selected(self, translation: windows_foundation.Point, /) -> windows_foundation.Rect: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.InkStrokeContainer::PasteFromClipboard(Windows.Foundation.Point)
    def paste_from_clipboard(self, position: windows_foundation.Point, /) -> windows_foundation.Rect: ...
    # Windows.Foundation.IAsyncOperationWithProgress`2<System.UInt32,System.UInt32> Windows.UI.Input.Inking.InkStrokeContainer::SaveAsync(Windows.Storage.Streams.IOutputStream)
    def save_async(self, output_stream: windows_storage_streams.ImplementsIOutputStream, /) -> windows_foundation.IAsyncOperationWithProgress[winrt.system.UInt32, winrt.system.UInt32]: ...
    # Windows.Foundation.IAsyncOperationWithProgress`2<System.UInt32,System.UInt32> Windows.UI.Input.Inking.InkStrokeContainer::SaveAsync(Windows.Storage.Streams.IOutputStream,Windows.UI.Input.Inking.InkPersistenceFormat)
    def save_with_format_async(self, output_stream: windows_storage_streams.ImplementsIOutputStream, ink_persistence_format: InkPersistenceFormat, /) -> windows_foundation.IAsyncOperationWithProgress[winrt.system.UInt32, winrt.system.UInt32]: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.InkStrokeContainer::SelectWithLine(Windows.Foundation.Point,Windows.Foundation.Point)
    def select_with_line(self, from_: windows_foundation.Point, to: windows_foundation.Point, /) -> windows_foundation.Rect: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.InkStrokeContainer::SelectWithPolyLine(Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Point>)
    def select_with_poly_line(self, polyline: typing.Iterable[windows_foundation.Point], /) -> windows_foundation.Rect: ...
    # System.Void Windows.UI.Input.Inking.InkStrokeContainer::UpdateRecognitionResults(Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkRecognitionResult>)
    def update_recognition_results(self, recognition_results: typing.Sequence[InkRecognitionResult], /) -> None: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.InkStrokeContainer::get_BoundingRect()
    @_property
    def bounding_rect(self) -> windows_foundation.Rect: ...

@typing.final
class InkStrokeInput(winrt.system.Object):
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.Inking.InkStrokeInput::add_StrokeCanceled(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.Inking.InkStrokeInput,Windows.UI.Core.PointerEventArgs>)
    def add_stroke_canceled(self, handler: windows_foundation.TypedEventHandler[InkStrokeInput, windows_ui_core.PointerEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.Inking.InkStrokeInput::remove_StrokeCanceled(Windows.Foundation.EventRegistrationToken)
    def remove_stroke_canceled(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.Inking.InkStrokeInput::add_StrokeContinued(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.Inking.InkStrokeInput,Windows.UI.Core.PointerEventArgs>)
    def add_stroke_continued(self, handler: windows_foundation.TypedEventHandler[InkStrokeInput, windows_ui_core.PointerEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.Inking.InkStrokeInput::remove_StrokeContinued(Windows.Foundation.EventRegistrationToken)
    def remove_stroke_continued(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.Inking.InkStrokeInput::add_StrokeEnded(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.Inking.InkStrokeInput,Windows.UI.Core.PointerEventArgs>)
    def add_stroke_ended(self, handler: windows_foundation.TypedEventHandler[InkStrokeInput, windows_ui_core.PointerEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.Inking.InkStrokeInput::remove_StrokeEnded(Windows.Foundation.EventRegistrationToken)
    def remove_stroke_ended(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.Inking.InkStrokeInput::add_StrokeStarted(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.Inking.InkStrokeInput,Windows.UI.Core.PointerEventArgs>)
    def add_stroke_started(self, handler: windows_foundation.TypedEventHandler[InkStrokeInput, windows_ui_core.PointerEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.Inking.InkStrokeInput::remove_StrokeStarted(Windows.Foundation.EventRegistrationToken)
    def remove_stroke_started(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.UI.Input.Inking.InkPresenter Windows.UI.Input.Inking.InkStrokeInput::get_InkPresenter()
    @_property
    def ink_presenter(self) -> InkPresenter: ...

@typing.final
class InkStrokeRenderingSegment(winrt.system.Object):
    # Windows.Foundation.Point Windows.UI.Input.Inking.InkStrokeRenderingSegment::get_BezierControlPoint1()
    @_property
    def bezier_control_point1(self) -> windows_foundation.Point: ...
    # Windows.Foundation.Point Windows.UI.Input.Inking.InkStrokeRenderingSegment::get_BezierControlPoint2()
    @_property
    def bezier_control_point2(self) -> windows_foundation.Point: ...
    # Windows.Foundation.Point Windows.UI.Input.Inking.InkStrokeRenderingSegment::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...
    # System.Single Windows.UI.Input.Inking.InkStrokeRenderingSegment::get_Pressure()
    @_property
    def pressure(self) -> winrt.system.Single: ...
    # System.Single Windows.UI.Input.Inking.InkStrokeRenderingSegment::get_TiltX()
    @_property
    def tilt_x(self) -> winrt.system.Single: ...
    # System.Single Windows.UI.Input.Inking.InkStrokeRenderingSegment::get_TiltY()
    @_property
    def tilt_y(self) -> winrt.system.Single: ...
    # System.Single Windows.UI.Input.Inking.InkStrokeRenderingSegment::get_Twist()
    @_property
    def twist(self) -> winrt.system.Single: ...

@typing.final
class InkStrokesCollectedEventArgs(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkStroke> Windows.UI.Input.Inking.InkStrokesCollectedEventArgs::get_Strokes()
    @_property
    def strokes(self) -> typing.Sequence[InkStroke]: ...

@typing.final
class InkStrokesErasedEventArgs(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkStroke> Windows.UI.Input.Inking.InkStrokesErasedEventArgs::get_Strokes()
    @_property
    def strokes(self) -> typing.Sequence[InkStroke]: ...

@typing.final
class InkSynchronizer(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkStroke> Windows.UI.Input.Inking.InkSynchronizer::BeginDry()
    def begin_dry(self) -> typing.Sequence[InkStroke]: ...
    # System.Void Windows.UI.Input.Inking.InkSynchronizer::EndDry()
    def end_dry(self) -> None: ...

@typing.final
class InkUnprocessedInput(winrt.system.Object):
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.Inking.InkUnprocessedInput::add_PointerEntered(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.Inking.InkUnprocessedInput,Windows.UI.Core.PointerEventArgs>)
    def add_pointer_entered(self, handler: windows_foundation.TypedEventHandler[InkUnprocessedInput, windows_ui_core.PointerEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.Inking.InkUnprocessedInput::remove_PointerEntered(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_entered(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.Inking.InkUnprocessedInput::add_PointerExited(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.Inking.InkUnprocessedInput,Windows.UI.Core.PointerEventArgs>)
    def add_pointer_exited(self, handler: windows_foundation.TypedEventHandler[InkUnprocessedInput, windows_ui_core.PointerEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.Inking.InkUnprocessedInput::remove_PointerExited(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_exited(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.Inking.InkUnprocessedInput::add_PointerHovered(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.Inking.InkUnprocessedInput,Windows.UI.Core.PointerEventArgs>)
    def add_pointer_hovered(self, handler: windows_foundation.TypedEventHandler[InkUnprocessedInput, windows_ui_core.PointerEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.Inking.InkUnprocessedInput::remove_PointerHovered(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_hovered(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.Inking.InkUnprocessedInput::add_PointerLost(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.Inking.InkUnprocessedInput,Windows.UI.Core.PointerEventArgs>)
    def add_pointer_lost(self, handler: windows_foundation.TypedEventHandler[InkUnprocessedInput, windows_ui_core.PointerEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.Inking.InkUnprocessedInput::remove_PointerLost(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_lost(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.Inking.InkUnprocessedInput::add_PointerMoved(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.Inking.InkUnprocessedInput,Windows.UI.Core.PointerEventArgs>)
    def add_pointer_moved(self, handler: windows_foundation.TypedEventHandler[InkUnprocessedInput, windows_ui_core.PointerEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.Inking.InkUnprocessedInput::remove_PointerMoved(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_moved(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.Inking.InkUnprocessedInput::add_PointerPressed(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.Inking.InkUnprocessedInput,Windows.UI.Core.PointerEventArgs>)
    def add_pointer_pressed(self, handler: windows_foundation.TypedEventHandler[InkUnprocessedInput, windows_ui_core.PointerEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.Inking.InkUnprocessedInput::remove_PointerPressed(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_pressed(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Input.Inking.InkUnprocessedInput::add_PointerReleased(Windows.Foundation.TypedEventHandler`2<Windows.UI.Input.Inking.InkUnprocessedInput,Windows.UI.Core.PointerEventArgs>)
    def add_pointer_released(self, handler: windows_foundation.TypedEventHandler[InkUnprocessedInput, windows_ui_core.PointerEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Input.Inking.InkUnprocessedInput::remove_PointerReleased(Windows.Foundation.EventRegistrationToken)
    def remove_pointer_released(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.UI.Input.Inking.InkPresenter Windows.UI.Input.Inking.InkUnprocessedInput::get_InkPresenter()
    @_property
    def ink_presenter(self) -> InkPresenter: ...

@typing.final
class PenAndInkSettings_Static(type):
    # Windows.UI.Input.Inking.PenAndInkSettings Windows.UI.Input.Inking.PenAndInkSettings::GetDefault()
    def get_default(cls) -> PenAndInkSettings: ...

@typing.final
class PenAndInkSettings(winrt.system.Object, metaclass=PenAndInkSettings_Static):
    # System.Void Windows.UI.Input.Inking.PenAndInkSettings::SetPenHandedness(Windows.UI.Input.Inking.PenHandedness)
    def set_pen_handedness(self, value: PenHandedness, /) -> None: ...
    # System.String Windows.UI.Input.Inking.PenAndInkSettings::get_FontFamilyName()
    @_property
    def font_family_name(self) -> str: ...
    # Windows.UI.Input.Inking.HandwritingLineHeight Windows.UI.Input.Inking.PenAndInkSettings::get_HandwritingLineHeight()
    @_property
    def handwriting_line_height(self) -> HandwritingLineHeight: ...
    # System.Boolean Windows.UI.Input.Inking.PenAndInkSettings::get_IsHandwritingDirectlyIntoTextFieldEnabled()
    @_property
    def is_handwriting_directly_into_text_field_enabled(self) -> bool: ...
    # System.Boolean Windows.UI.Input.Inking.PenAndInkSettings::get_IsTouchHandwritingEnabled()
    @_property
    def is_touch_handwriting_enabled(self) -> bool: ...
    # Windows.UI.Input.Inking.PenHandedness Windows.UI.Input.Inking.PenAndInkSettings::get_PenHandedness()
    @_property
    def pen_handedness(self) -> PenHandedness: ...
    # System.Boolean Windows.UI.Input.Inking.PenAndInkSettings::get_UserConsentsToHandwritingTelemetryCollection()
    @_property
    def user_consents_to_handwriting_telemetry_collection(self) -> bool: ...

class ImplementsIInkPointFactory():
    # Windows.UI.Input.Inking.InkPoint Windows.UI.Input.Inking.IInkPointFactory::CreateInkPoint(Windows.Foundation.Point,System.Single)
    @abstractmethod
    def create_ink_point(self, position: windows_foundation.Point, pressure: winrt.system.Single, /) -> InkPoint: ...

@typing.final
class IInkPointFactory(winrt.system.Object, ImplementsIInkPointFactory):
    # Windows.UI.Input.Inking.InkPoint Windows.UI.Input.Inking.IInkPointFactory::CreateInkPoint(Windows.Foundation.Point,System.Single)
    def create_ink_point(self, position: windows_foundation.Point, pressure: winrt.system.Single, /) -> InkPoint: ...

class ImplementsIInkPresenterRulerFactory():
    # Windows.UI.Input.Inking.InkPresenterRuler Windows.UI.Input.Inking.IInkPresenterRulerFactory::Create(Windows.UI.Input.Inking.InkPresenter)
    @abstractmethod
    def create(self, ink_presenter: InkPresenter, /) -> InkPresenterRuler: ...

@typing.final
class IInkPresenterRulerFactory(winrt.system.Object, ImplementsIInkPresenterRulerFactory):
    # Windows.UI.Input.Inking.InkPresenterRuler Windows.UI.Input.Inking.IInkPresenterRulerFactory::Create(Windows.UI.Input.Inking.InkPresenter)
    def create(self, ink_presenter: InkPresenter, /) -> InkPresenterRuler: ...

class ImplementsIInkPresenterStencil():
    # Windows.UI.Color Windows.UI.Input.Inking.IInkPresenterStencil::get_BackgroundColor()
    @_property
    @abstractmethod
    def background_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.Input.Inking.IInkPresenterStencil::put_BackgroundColor(Windows.UI.Color)
    @background_color.setter
    @abstractmethod
    def background_color(self, value: windows_ui.Color) -> None: ...
    # Windows.UI.Color Windows.UI.Input.Inking.IInkPresenterStencil::get_ForegroundColor()
    @_property
    @abstractmethod
    def foreground_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.Input.Inking.IInkPresenterStencil::put_ForegroundColor(Windows.UI.Color)
    @foreground_color.setter
    @abstractmethod
    def foreground_color(self, value: windows_ui.Color) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.IInkPresenterStencil::get_IsVisible()
    @_property
    @abstractmethod
    def is_visible(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.IInkPresenterStencil::put_IsVisible(System.Boolean)
    @is_visible.setter
    @abstractmethod
    def is_visible(self, value: bool) -> None: ...
    # Windows.UI.Input.Inking.InkPresenterStencilKind Windows.UI.Input.Inking.IInkPresenterStencil::get_Kind()
    @_property
    @abstractmethod
    def kind(self) -> InkPresenterStencilKind: ...
    # Windows.Foundation.Numerics.Matrix3x2 Windows.UI.Input.Inking.IInkPresenterStencil::get_Transform()
    @_property
    @abstractmethod
    def transform(self) -> windows_foundation_numerics.Matrix3x2: ...
    # System.Void Windows.UI.Input.Inking.IInkPresenterStencil::put_Transform(Windows.Foundation.Numerics.Matrix3x2)
    @transform.setter
    @abstractmethod
    def transform(self, value: windows_foundation_numerics.Matrix3x2) -> None: ...

@typing.final
class IInkPresenterStencil(winrt.system.Object, ImplementsIInkPresenterStencil):
    # Windows.UI.Color Windows.UI.Input.Inking.IInkPresenterStencil::get_BackgroundColor()
    @_property
    def background_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.Input.Inking.IInkPresenterStencil::put_BackgroundColor(Windows.UI.Color)
    @background_color.setter
    def background_color(self, value: windows_ui.Color) -> None: ...
    # Windows.UI.Color Windows.UI.Input.Inking.IInkPresenterStencil::get_ForegroundColor()
    @_property
    def foreground_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.Input.Inking.IInkPresenterStencil::put_ForegroundColor(Windows.UI.Color)
    @foreground_color.setter
    def foreground_color(self, value: windows_ui.Color) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.IInkPresenterStencil::get_IsVisible()
    @_property
    def is_visible(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.IInkPresenterStencil::put_IsVisible(System.Boolean)
    @is_visible.setter
    def is_visible(self, value: bool) -> None: ...
    # Windows.UI.Input.Inking.InkPresenterStencilKind Windows.UI.Input.Inking.IInkPresenterStencil::get_Kind()
    @_property
    def kind(self) -> InkPresenterStencilKind: ...
    # Windows.Foundation.Numerics.Matrix3x2 Windows.UI.Input.Inking.IInkPresenterStencil::get_Transform()
    @_property
    def transform(self) -> windows_foundation_numerics.Matrix3x2: ...
    # System.Void Windows.UI.Input.Inking.IInkPresenterStencil::put_Transform(Windows.Foundation.Numerics.Matrix3x2)
    @transform.setter
    def transform(self, value: windows_foundation_numerics.Matrix3x2) -> None: ...

class ImplementsIInkRecognizerContainer():
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkRecognizer> Windows.UI.Input.Inking.IInkRecognizerContainer::GetRecognizers()
    @abstractmethod
    def get_recognizers(self) -> typing.Sequence[InkRecognizer]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkRecognitionResult>> Windows.UI.Input.Inking.IInkRecognizerContainer::RecognizeAsync(Windows.UI.Input.Inking.InkStrokeContainer,Windows.UI.Input.Inking.InkRecognitionTarget)
    @abstractmethod
    def recognize_async(self, stroke_collection: InkStrokeContainer, recognition_target: InkRecognitionTarget, /) -> windows_foundation.IAsyncOperation[typing.Sequence[InkRecognitionResult]]: ...
    # System.Void Windows.UI.Input.Inking.IInkRecognizerContainer::SetDefaultRecognizer(Windows.UI.Input.Inking.InkRecognizer)
    @abstractmethod
    def set_default_recognizer(self, recognizer: InkRecognizer, /) -> None: ...

@typing.final
class IInkRecognizerContainer(winrt.system.Object, ImplementsIInkRecognizerContainer):
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkRecognizer> Windows.UI.Input.Inking.IInkRecognizerContainer::GetRecognizers()
    def get_recognizers(self) -> typing.Sequence[InkRecognizer]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkRecognitionResult>> Windows.UI.Input.Inking.IInkRecognizerContainer::RecognizeAsync(Windows.UI.Input.Inking.InkStrokeContainer,Windows.UI.Input.Inking.InkRecognitionTarget)
    def recognize_async(self, stroke_collection: InkStrokeContainer, recognition_target: InkRecognitionTarget, /) -> windows_foundation.IAsyncOperation[typing.Sequence[InkRecognitionResult]]: ...
    # System.Void Windows.UI.Input.Inking.IInkRecognizerContainer::SetDefaultRecognizer(Windows.UI.Input.Inking.InkRecognizer)
    def set_default_recognizer(self, recognizer: InkRecognizer, /) -> None: ...

class ImplementsIInkStrokeContainer():
    # System.Void Windows.UI.Input.Inking.IInkStrokeContainer::AddStroke(Windows.UI.Input.Inking.InkStroke)
    @abstractmethod
    def add_stroke(self, stroke: InkStroke, /) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.IInkStrokeContainer::CanPasteFromClipboard()
    @abstractmethod
    def can_paste_from_clipboard(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.IInkStrokeContainer::CopySelectedToClipboard()
    @abstractmethod
    def copy_selected_to_clipboard(self) -> None: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.IInkStrokeContainer::DeleteSelected()
    @abstractmethod
    def delete_selected(self) -> windows_foundation.Rect: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkRecognitionResult> Windows.UI.Input.Inking.IInkStrokeContainer::GetRecognitionResults()
    @abstractmethod
    def get_recognition_results(self) -> typing.Sequence[InkRecognitionResult]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkStroke> Windows.UI.Input.Inking.IInkStrokeContainer::GetStrokes()
    @abstractmethod
    def get_strokes(self) -> typing.Sequence[InkStroke]: ...
    # Windows.Foundation.IAsyncActionWithProgress`1<System.UInt64> Windows.UI.Input.Inking.IInkStrokeContainer::LoadAsync(Windows.Storage.Streams.IInputStream)
    @abstractmethod
    def load_async(self, input_stream: windows_storage_streams.ImplementsIInputStream, /) -> windows_foundation.IAsyncActionWithProgress[winrt.system.UInt64]: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.IInkStrokeContainer::MoveSelected(Windows.Foundation.Point)
    @abstractmethod
    def move_selected(self, translation: windows_foundation.Point, /) -> windows_foundation.Rect: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.IInkStrokeContainer::PasteFromClipboard(Windows.Foundation.Point)
    @abstractmethod
    def paste_from_clipboard(self, position: windows_foundation.Point, /) -> windows_foundation.Rect: ...
    # Windows.Foundation.IAsyncOperationWithProgress`2<System.UInt32,System.UInt32> Windows.UI.Input.Inking.IInkStrokeContainer::SaveAsync(Windows.Storage.Streams.IOutputStream)
    @abstractmethod
    def save_async(self, output_stream: windows_storage_streams.ImplementsIOutputStream, /) -> windows_foundation.IAsyncOperationWithProgress[winrt.system.UInt32, winrt.system.UInt32]: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.IInkStrokeContainer::SelectWithLine(Windows.Foundation.Point,Windows.Foundation.Point)
    @abstractmethod
    def select_with_line(self, from_: windows_foundation.Point, to: windows_foundation.Point, /) -> windows_foundation.Rect: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.IInkStrokeContainer::SelectWithPolyLine(Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Point>)
    @abstractmethod
    def select_with_poly_line(self, polyline: typing.Iterable[windows_foundation.Point], /) -> windows_foundation.Rect: ...
    # System.Void Windows.UI.Input.Inking.IInkStrokeContainer::UpdateRecognitionResults(Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkRecognitionResult>)
    @abstractmethod
    def update_recognition_results(self, recognition_results: typing.Sequence[InkRecognitionResult], /) -> None: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.IInkStrokeContainer::get_BoundingRect()
    @_property
    @abstractmethod
    def bounding_rect(self) -> windows_foundation.Rect: ...

@typing.final
class IInkStrokeContainer(winrt.system.Object, ImplementsIInkStrokeContainer):
    # System.Void Windows.UI.Input.Inking.IInkStrokeContainer::AddStroke(Windows.UI.Input.Inking.InkStroke)
    def add_stroke(self, stroke: InkStroke, /) -> None: ...
    # System.Boolean Windows.UI.Input.Inking.IInkStrokeContainer::CanPasteFromClipboard()
    def can_paste_from_clipboard(self) -> bool: ...
    # System.Void Windows.UI.Input.Inking.IInkStrokeContainer::CopySelectedToClipboard()
    def copy_selected_to_clipboard(self) -> None: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.IInkStrokeContainer::DeleteSelected()
    def delete_selected(self) -> windows_foundation.Rect: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkRecognitionResult> Windows.UI.Input.Inking.IInkStrokeContainer::GetRecognitionResults()
    def get_recognition_results(self) -> typing.Sequence[InkRecognitionResult]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkStroke> Windows.UI.Input.Inking.IInkStrokeContainer::GetStrokes()
    def get_strokes(self) -> typing.Sequence[InkStroke]: ...
    # Windows.Foundation.IAsyncActionWithProgress`1<System.UInt64> Windows.UI.Input.Inking.IInkStrokeContainer::LoadAsync(Windows.Storage.Streams.IInputStream)
    def load_async(self, input_stream: windows_storage_streams.ImplementsIInputStream, /) -> windows_foundation.IAsyncActionWithProgress[winrt.system.UInt64]: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.IInkStrokeContainer::MoveSelected(Windows.Foundation.Point)
    def move_selected(self, translation: windows_foundation.Point, /) -> windows_foundation.Rect: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.IInkStrokeContainer::PasteFromClipboard(Windows.Foundation.Point)
    def paste_from_clipboard(self, position: windows_foundation.Point, /) -> windows_foundation.Rect: ...
    # Windows.Foundation.IAsyncOperationWithProgress`2<System.UInt32,System.UInt32> Windows.UI.Input.Inking.IInkStrokeContainer::SaveAsync(Windows.Storage.Streams.IOutputStream)
    def save_async(self, output_stream: windows_storage_streams.ImplementsIOutputStream, /) -> windows_foundation.IAsyncOperationWithProgress[winrt.system.UInt32, winrt.system.UInt32]: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.IInkStrokeContainer::SelectWithLine(Windows.Foundation.Point,Windows.Foundation.Point)
    def select_with_line(self, from_: windows_foundation.Point, to: windows_foundation.Point, /) -> windows_foundation.Rect: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.IInkStrokeContainer::SelectWithPolyLine(Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Point>)
    def select_with_poly_line(self, polyline: typing.Iterable[windows_foundation.Point], /) -> windows_foundation.Rect: ...
    # System.Void Windows.UI.Input.Inking.IInkStrokeContainer::UpdateRecognitionResults(Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.Inking.InkRecognitionResult>)
    def update_recognition_results(self, recognition_results: typing.Sequence[InkRecognitionResult], /) -> None: ...
    # Windows.Foundation.Rect Windows.UI.Input.Inking.IInkStrokeContainer::get_BoundingRect()
    @_property
    def bounding_rect(self) -> windows_foundation.Rect: ...

