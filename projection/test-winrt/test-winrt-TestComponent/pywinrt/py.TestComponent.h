// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#pragma once

#include "pybase.h"
static_assert(winrt::check_version(PYWINRT_VERSION, "0.0.0"), "Mismatched Py/WinRT headers.");
#include <winrt/Windows.Foundation.h>
#include <winrt/Windows.Foundation.Collections.h>

#include <winrt/TestComponent.h>

namespace py::proj::TestComponent
{
}

namespace py
{
    template<>
    inline constexpr const char* buffer_format<winrt::TestComponent::Blittable> = "T{B:a:H:b:I:c:Q:d:h:e:i:f:q:g:f:h:d:i:T{I2H8B}:j:}";

    template<>
    inline constexpr const char* buffer_format<winrt::TestComponent::Nested> = "T{T{B:a:H:b:I:c:Q:d:h:e:i:f:q:g:f:h:d:i:T{I2H8B}:j:}:blittable:T{?:a:u:b:P:c:P:d:}:non_blittable:}";

    template<>
    inline constexpr const char* buffer_format<winrt::TestComponent::NonBlittable> = "T{?:a:u:b:P:c:P:d:}";


    template<>
    struct py_type<winrt::TestComponent::Class>
    {
        static constexpr std::string_view qualified_name = "test_winrt.testcomponent.Class";
        static constexpr const char* module_name = "test_winrt.testcomponent";
        static constexpr const char* type_name = "Class";
    };

    template<>
    struct py_type<winrt::TestComponent::Composable>
    {
        static constexpr std::string_view qualified_name = "test_winrt.testcomponent.Composable";
        static constexpr const char* module_name = "test_winrt.testcomponent";
        static constexpr const char* type_name = "Composable";
    };

    template<>
    struct py_type<winrt::TestComponent::Derived>
    {
        static constexpr std::string_view qualified_name = "test_winrt.testcomponent.Derived";
        static constexpr const char* module_name = "test_winrt.testcomponent";
        static constexpr const char* type_name = "Derived";
    };

    template<>
    struct py_type<winrt::TestComponent::OverloadClass>
    {
        static constexpr std::string_view qualified_name = "test_winrt.testcomponent.OverloadClass";
        static constexpr const char* module_name = "test_winrt.testcomponent";
        static constexpr const char* type_name = "OverloadClass";
    };

    template<>
    struct py_type<winrt::TestComponent::Override>
    {
        static constexpr std::string_view qualified_name = "test_winrt.testcomponent.Override";
        static constexpr const char* module_name = "test_winrt.testcomponent";
        static constexpr const char* type_name = "Override";
    };

    template<>
    struct py_type<winrt::TestComponent::TestRunner>
    {
        static constexpr std::string_view qualified_name = "test_winrt.testcomponent.TestRunner";
        static constexpr const char* module_name = "test_winrt.testcomponent";
        static constexpr const char* type_name = "TestRunner";
    };

    template<>
    struct py_type<winrt::TestComponent::IRequiredFour>
    {
        static constexpr std::string_view qualified_name = "test_winrt.testcomponent._IRequiredFour";
        static constexpr const char* module_name = "test_winrt.testcomponent";
        static constexpr const char* type_name = "_IRequiredFour";
    };

    template<>
    struct py_type<winrt::TestComponent::IRequiredOne>
    {
        static constexpr std::string_view qualified_name = "test_winrt.testcomponent._IRequiredOne";
        static constexpr const char* module_name = "test_winrt.testcomponent";
        static constexpr const char* type_name = "_IRequiredOne";
    };

    template<>
    struct py_type<winrt::TestComponent::IRequiredThree>
    {
        static constexpr std::string_view qualified_name = "test_winrt.testcomponent._IRequiredThree";
        static constexpr const char* module_name = "test_winrt.testcomponent";
        static constexpr const char* type_name = "_IRequiredThree";
    };

    template<>
    struct py_type<winrt::TestComponent::IRequiredTwo>
    {
        static constexpr std::string_view qualified_name = "test_winrt.testcomponent._IRequiredTwo";
        static constexpr const char* module_name = "test_winrt.testcomponent";
        static constexpr const char* type_name = "_IRequiredTwo";
    };

    template<>
    struct py_type<winrt::TestComponent::ITests>
    {
        static constexpr std::string_view qualified_name = "test_winrt.testcomponent._ITests";
        static constexpr const char* module_name = "test_winrt.testcomponent";
        static constexpr const char* type_name = "_ITests";
    };

    template<>
    struct py_type<winrt::TestComponent::Blittable>
    {
        static constexpr std::string_view from_tuple = "test_winrt._test_winrt_testcomponent.Blittable_from_tuple";
        static constexpr std::string_view qualified_name = "test_winrt.testcomponent.Blittable";
        static constexpr const char* module_name = "test_winrt.testcomponent";
        static constexpr const char* type_name = "Blittable";
    };

    template<>
    struct py_type<winrt::TestComponent::Nested>
    {
        static constexpr std::string_view from_tuple = "test_winrt._test_winrt_testcomponent.Nested_from_tuple";
        static constexpr std::string_view qualified_name = "test_winrt.testcomponent.Nested";
        static constexpr const char* module_name = "test_winrt.testcomponent";
        static constexpr const char* type_name = "Nested";
    };

    template<>
    struct py_type<winrt::TestComponent::NonBlittable>
    {
        static constexpr std::string_view from_tuple = "test_winrt._test_winrt_testcomponent.NonBlittable_from_tuple";
        static constexpr std::string_view qualified_name = "test_winrt.testcomponent.NonBlittable";
        static constexpr const char* module_name = "test_winrt.testcomponent";
        static constexpr const char* type_name = "NonBlittable";
    };
}

#if __has_include("py.Windows.Foundation.h")
#include "py.Windows.Foundation.h"
#endif

#if __has_include("py.Windows.Foundation.Collections.h")
#include "py.Windows.Foundation.Collections.h"
#endif

namespace py::impl::TestComponent
{
    struct Array10Handler
    {
        static winrt::TestComponent::Array10Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::array_view<double const> param0, winrt::array_view<double> param1, winrt::com_array<double>& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    auto param2_buf = py::convert_to<py::pybuf_view<double, false>>(return_value.get(), 1);
                    param2 = winrt::com_array<double>{param2_buf.begin(), param2_buf.end()};

                    auto return_buf = py::convert_to<py::pybuf_view<double, false>>(return_value.get(), 0);
                    return winrt::com_array<double>{return_buf.begin(), return_buf.end()};
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Array11Handler
    {
        static winrt::TestComponent::Array11Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::array_view<char16_t const> param0, winrt::array_view<char16_t> param1, winrt::com_array<char16_t>& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    auto param2_buf = py::convert_to<py::pybuf_view<char16_t, false>>(return_value.get(), 1);
                    param2 = winrt::com_array<char16_t>{param2_buf.begin(), param2_buf.end()};

                    auto return_buf = py::convert_to<py::pybuf_view<char16_t, false>>(return_value.get(), 0);
                    return winrt::com_array<char16_t>{return_buf.begin(), return_buf.end()};
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Array12Handler
    {
        static winrt::TestComponent::Array12Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::array_view<winrt::hstring const> param0, winrt::array_view<winrt::hstring> param1, winrt::com_array<winrt::hstring>& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    auto param2_buf = py::convert_to<py::pybuf_view<winrt::hstring, false>>(return_value.get(), 1);
                    param2 = winrt::com_array<winrt::hstring>{param2_buf.begin(), param2_buf.end()};

                    auto return_buf = py::convert_to<py::pybuf_view<winrt::hstring, false>>(return_value.get(), 0);
                    return winrt::com_array<winrt::hstring>{return_buf.begin(), return_buf.end()};
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Array13Handler
    {
        static winrt::TestComponent::Array13Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::array_view<winrt::TestComponent::Blittable const> param0, winrt::array_view<winrt::TestComponent::Blittable> param1, winrt::com_array<winrt::TestComponent::Blittable>& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    auto param2_buf = py::convert_to<py::pybuf_view<winrt::TestComponent::Blittable, false>>(return_value.get(), 1);
                    param2 = winrt::com_array<winrt::TestComponent::Blittable>{param2_buf.begin(), param2_buf.end()};

                    auto return_buf = py::convert_to<py::pybuf_view<winrt::TestComponent::Blittable, false>>(return_value.get(), 0);
                    return winrt::com_array<winrt::TestComponent::Blittable>{return_buf.begin(), return_buf.end()};
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Array14Handler
    {
        static winrt::TestComponent::Array14Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::array_view<winrt::TestComponent::NonBlittable const> param0, winrt::array_view<winrt::TestComponent::NonBlittable> param1, winrt::com_array<winrt::TestComponent::NonBlittable>& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    auto param2_buf = py::convert_to<py::pybuf_view<winrt::TestComponent::NonBlittable, false>>(return_value.get(), 1);
                    param2 = winrt::com_array<winrt::TestComponent::NonBlittable>{param2_buf.begin(), param2_buf.end()};

                    auto return_buf = py::convert_to<py::pybuf_view<winrt::TestComponent::NonBlittable, false>>(return_value.get(), 0);
                    return winrt::com_array<winrt::TestComponent::NonBlittable>{return_buf.begin(), return_buf.end()};
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Array15Handler
    {
        static winrt::TestComponent::Array15Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::array_view<winrt::TestComponent::Nested const> param0, winrt::array_view<winrt::TestComponent::Nested> param1, winrt::com_array<winrt::TestComponent::Nested>& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    auto param2_buf = py::convert_to<py::pybuf_view<winrt::TestComponent::Nested, false>>(return_value.get(), 1);
                    param2 = winrt::com_array<winrt::TestComponent::Nested>{param2_buf.begin(), param2_buf.end()};

                    auto return_buf = py::convert_to<py::pybuf_view<winrt::TestComponent::Nested, false>>(return_value.get(), 0);
                    return winrt::com_array<winrt::TestComponent::Nested>{return_buf.begin(), return_buf.end()};
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Array16Handler
    {
        static winrt::TestComponent::Array16Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::array_view<winrt::Windows::Foundation::IStringable const> param0, winrt::array_view<winrt::Windows::Foundation::IStringable> param1, winrt::com_array<winrt::Windows::Foundation::IStringable>& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    auto param2_buf = py::convert_to<py::pybuf_view<winrt::Windows::Foundation::IStringable, false>>(return_value.get(), 1);
                    param2 = winrt::com_array<winrt::Windows::Foundation::IStringable>{param2_buf.begin(), param2_buf.end()};

                    auto return_buf = py::convert_to<py::pybuf_view<winrt::Windows::Foundation::IStringable, false>>(return_value.get(), 0);
                    return winrt::com_array<winrt::Windows::Foundation::IStringable>{return_buf.begin(), return_buf.end()};
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Array1Handler
    {
        static winrt::TestComponent::Array1Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::array_view<bool const> param0, winrt::array_view<bool> param1, winrt::com_array<bool>& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    auto param2_buf = py::convert_to<py::pybuf_view<bool, false>>(return_value.get(), 1);
                    param2 = winrt::com_array<bool>{param2_buf.begin(), param2_buf.end()};

                    auto return_buf = py::convert_to<py::pybuf_view<bool, false>>(return_value.get(), 0);
                    return winrt::com_array<bool>{return_buf.begin(), return_buf.end()};
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Array2Handler
    {
        static winrt::TestComponent::Array2Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::array_view<uint8_t const> param0, winrt::array_view<uint8_t> param1, winrt::com_array<uint8_t>& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    auto param2_buf = py::convert_to<py::pybuf_view<uint8_t, false>>(return_value.get(), 1);
                    param2 = winrt::com_array<uint8_t>{param2_buf.begin(), param2_buf.end()};

                    auto return_buf = py::convert_to<py::pybuf_view<uint8_t, false>>(return_value.get(), 0);
                    return winrt::com_array<uint8_t>{return_buf.begin(), return_buf.end()};
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Array3Handler
    {
        static winrt::TestComponent::Array3Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::array_view<uint16_t const> param0, winrt::array_view<uint16_t> param1, winrt::com_array<uint16_t>& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    auto param2_buf = py::convert_to<py::pybuf_view<uint16_t, false>>(return_value.get(), 1);
                    param2 = winrt::com_array<uint16_t>{param2_buf.begin(), param2_buf.end()};

                    auto return_buf = py::convert_to<py::pybuf_view<uint16_t, false>>(return_value.get(), 0);
                    return winrt::com_array<uint16_t>{return_buf.begin(), return_buf.end()};
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Array4Handler
    {
        static winrt::TestComponent::Array4Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::array_view<uint32_t const> param0, winrt::array_view<uint32_t> param1, winrt::com_array<uint32_t>& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    auto param2_buf = py::convert_to<py::pybuf_view<uint32_t, false>>(return_value.get(), 1);
                    param2 = winrt::com_array<uint32_t>{param2_buf.begin(), param2_buf.end()};

                    auto return_buf = py::convert_to<py::pybuf_view<uint32_t, false>>(return_value.get(), 0);
                    return winrt::com_array<uint32_t>{return_buf.begin(), return_buf.end()};
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Array5Handler
    {
        static winrt::TestComponent::Array5Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::array_view<uint64_t const> param0, winrt::array_view<uint64_t> param1, winrt::com_array<uint64_t>& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    auto param2_buf = py::convert_to<py::pybuf_view<uint64_t, false>>(return_value.get(), 1);
                    param2 = winrt::com_array<uint64_t>{param2_buf.begin(), param2_buf.end()};

                    auto return_buf = py::convert_to<py::pybuf_view<uint64_t, false>>(return_value.get(), 0);
                    return winrt::com_array<uint64_t>{return_buf.begin(), return_buf.end()};
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Array6Handler
    {
        static winrt::TestComponent::Array6Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::array_view<int16_t const> param0, winrt::array_view<int16_t> param1, winrt::com_array<int16_t>& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    auto param2_buf = py::convert_to<py::pybuf_view<int16_t, false>>(return_value.get(), 1);
                    param2 = winrt::com_array<int16_t>{param2_buf.begin(), param2_buf.end()};

                    auto return_buf = py::convert_to<py::pybuf_view<int16_t, false>>(return_value.get(), 0);
                    return winrt::com_array<int16_t>{return_buf.begin(), return_buf.end()};
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Array7Handler
    {
        static winrt::TestComponent::Array7Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::array_view<int32_t const> param0, winrt::array_view<int32_t> param1, winrt::com_array<int32_t>& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    auto param2_buf = py::convert_to<py::pybuf_view<int32_t, false>>(return_value.get(), 1);
                    param2 = winrt::com_array<int32_t>{param2_buf.begin(), param2_buf.end()};

                    auto return_buf = py::convert_to<py::pybuf_view<int32_t, false>>(return_value.get(), 0);
                    return winrt::com_array<int32_t>{return_buf.begin(), return_buf.end()};
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Array8Handler
    {
        static winrt::TestComponent::Array8Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::array_view<int64_t const> param0, winrt::array_view<int64_t> param1, winrt::com_array<int64_t>& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    auto param2_buf = py::convert_to<py::pybuf_view<int64_t, false>>(return_value.get(), 1);
                    param2 = winrt::com_array<int64_t>{param2_buf.begin(), param2_buf.end()};

                    auto return_buf = py::convert_to<py::pybuf_view<int64_t, false>>(return_value.get(), 0);
                    return winrt::com_array<int64_t>{return_buf.begin(), return_buf.end()};
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Array9Handler
    {
        static winrt::TestComponent::Array9Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::array_view<float const> param0, winrt::array_view<float> param1, winrt::com_array<float>& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    auto param2_buf = py::convert_to<py::pybuf_view<float, false>>(return_value.get(), 1);
                    param2 = winrt::com_array<float>{param2_buf.begin(), param2_buf.end()};

                    auto return_buf = py::convert_to<py::pybuf_view<float, false>>(return_value.get(), 0);
                    return winrt::com_array<float>{return_buf.begin(), return_buf.end()};
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Async1Handler
    {
        static winrt::TestComponent::Async1Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::Windows::Foundation::IAsyncAction const& param0, bool param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    return py::convert_to<winrt::Windows::Foundation::IAsyncAction>(return_value.get());
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Async2Handler
    {
        static winrt::TestComponent::Async2Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::Windows::Foundation::IAsyncAction const& param0, bool param1, int32_t param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param2{py::convert(param2)};
                    if (!py_param2)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    return py::convert_to<winrt::Windows::Foundation::IAsyncActionWithProgress<int32_t>>(return_value.get());
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Async3Handler
    {
        static winrt::TestComponent::Async3Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::Windows::Foundation::IAsyncAction const& param0, bool param1, int32_t param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param2{py::convert(param2)};
                    if (!py_param2)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(3, py_param0.get(), py_param1.get(), py_param2.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    return py::convert_to<winrt::Windows::Foundation::IAsyncOperation<int32_t>>(return_value.get());
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Async4Handler
    {
        static winrt::TestComponent::Async4Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::Windows::Foundation::IAsyncAction const& param0, bool param1, int32_t param2, int32_t param3)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param2{py::convert(param2)};
                    if (!py_param2)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param3{py::convert(param3)};
                    if (!py_param3)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(4, py_param0.get(), py_param1.get(), py_param2.get(), py_param3.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    return py::convert_to<winrt::Windows::Foundation::IAsyncOperationWithProgress<int32_t, int32_t>>(return_value.get());
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Collection1Handler
    {
        static winrt::TestComponent::Collection1Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::Windows::Foundation::Collections::IIterable<winrt::hstring> const& param0, winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(return_value.get(), 1);

                    return py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Collection2Handler
    {
        static winrt::TestComponent::Collection2Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::hstring>> const& param0, winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::hstring>>& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::hstring>>>(return_value.get(), 1);

                    return py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::hstring>>>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Collection3Handler
    {
        static winrt::TestComponent::Collection3Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::Windows::Foundation::Collections::IMap<winrt::hstring, winrt::hstring> const& param0, winrt::Windows::Foundation::Collections::IMap<winrt::hstring, winrt::hstring>& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<winrt::Windows::Foundation::Collections::IMap<winrt::hstring, winrt::hstring>>(return_value.get(), 1);

                    return py::convert_to<winrt::Windows::Foundation::Collections::IMap<winrt::hstring, winrt::hstring>>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Collection4Handler
    {
        static winrt::TestComponent::Collection4Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring> const& param0, winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(return_value.get(), 1);

                    return py::convert_to<winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring>>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Collection5Handler
    {
        static winrt::TestComponent::Collection5Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::Windows::Foundation::Collections::IVector<winrt::hstring> const& param0, winrt::Windows::Foundation::Collections::IVector<winrt::hstring>& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<winrt::Windows::Foundation::Collections::IVector<winrt::hstring>>(return_value.get(), 1);

                    return py::convert_to<winrt::Windows::Foundation::Collections::IVector<winrt::hstring>>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Collection6Handler
    {
        static winrt::TestComponent::Collection6Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::Windows::Foundation::Collections::IVectorView<winrt::hstring> const& param0, winrt::Windows::Foundation::Collections::IVectorView<winrt::hstring>& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<winrt::Windows::Foundation::Collections::IVectorView<winrt::hstring>>(return_value.get(), 1);

                    return py::convert_to<winrt::Windows::Foundation::Collections::IVectorView<winrt::hstring>>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Param10Handler
    {
        static winrt::TestComponent::Param10Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](double param0, double& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<double>(return_value.get(), 1);

                    return py::convert_to<double>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Param11Handler
    {
        static winrt::TestComponent::Param11Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](char16_t param0, char16_t& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<char16_t>(return_value.get(), 1);

                    return py::convert_to<char16_t>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Param12Handler
    {
        static winrt::TestComponent::Param12Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::hstring const& param0, winrt::hstring& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<winrt::hstring>(return_value.get(), 1);

                    return py::convert_to<winrt::hstring>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Param13Handler
    {
        static winrt::TestComponent::Param13Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::TestComponent::Blittable param0, winrt::TestComponent::Blittable const& param1, winrt::TestComponent::Blittable& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param2 = py::convert_to<winrt::TestComponent::Blittable>(return_value.get(), 1);

                    return py::convert_to<winrt::TestComponent::Blittable>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Param14Handler
    {
        static winrt::TestComponent::Param14Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::TestComponent::NonBlittable param0, winrt::TestComponent::NonBlittable const& param1, winrt::TestComponent::NonBlittable& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param2 = py::convert_to<winrt::TestComponent::NonBlittable>(return_value.get(), 1);

                    return py::convert_to<winrt::TestComponent::NonBlittable>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Param15Handler
    {
        static winrt::TestComponent::Param15Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::TestComponent::Nested param0, winrt::TestComponent::Nested const& param1, winrt::TestComponent::Nested& param2)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle py_param1{py::convert(param1)};
                    if (!py_param1)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                    if (!args)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallObject(delegate.callable(), args.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param2 = py::convert_to<winrt::TestComponent::Nested>(return_value.get(), 1);

                    return py::convert_to<winrt::TestComponent::Nested>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Param1Handler
    {
        static winrt::TestComponent::Param1Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](bool param0, bool& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<bool>(return_value.get(), 1);

                    return py::convert_to<bool>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Param2Handler
    {
        static winrt::TestComponent::Param2Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](uint8_t param0, uint8_t& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<uint8_t>(return_value.get(), 1);

                    return py::convert_to<uint8_t>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Param3Handler
    {
        static winrt::TestComponent::Param3Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](uint16_t param0, uint16_t& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<uint16_t>(return_value.get(), 1);

                    return py::convert_to<uint16_t>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Param4Handler
    {
        static winrt::TestComponent::Param4Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](uint32_t param0, uint32_t& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<uint32_t>(return_value.get(), 1);

                    return py::convert_to<uint32_t>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Param5Handler
    {
        static winrt::TestComponent::Param5Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](uint64_t param0, uint64_t& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<uint64_t>(return_value.get(), 1);

                    return py::convert_to<uint64_t>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Param6Handler
    {
        static winrt::TestComponent::Param6Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](int16_t param0, int16_t& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<int16_t>(return_value.get(), 1);

                    return py::convert_to<int16_t>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Param7Handler
    {
        static winrt::TestComponent::Param7Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](int32_t param0, int32_t& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<int32_t>(return_value.get(), 1);

                    return py::convert_to<int32_t>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Param8Handler
    {
        static winrt::TestComponent::Param8Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](int64_t param0, int64_t& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<int64_t>(return_value.get(), 1);

                    return py::convert_to<int64_t>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct Param9Handler
    {
        static winrt::TestComponent::Param9Handler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](float param0, float& param1)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }

                    param1 = py::convert_to<float>(return_value.get(), 1);

                    return py::convert_to<float>(return_value.get(), 0);
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };

    struct TestHandler
    {
        static winrt::TestComponent::TestHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](winrt::TestComponent::ITests const& param0)
            {
                auto gil = py::ensure_gil();

                try
                {
                    py::pyobj_handle py_param0{py::convert(param0)};
                    if (!py_param0)
                    {
                        throw python_exception();
                    }

                    py::pyobj_handle return_value{PyObject_CallOneArg(delegate.callable(), py_param0.get())};
                    if (!return_value)
                    {
                        throw python_exception();
                    }
                }
                catch (python_exception)
                {
                    py::write_unraisable_and_throw();
                }
            };
        };
    };
}

namespace py::wrapper::TestComponent
{
    using Class = py::winrt_wrapper<winrt::TestComponent::Class>;
    using Composable = py::winrt_wrapper<winrt::TestComponent::Composable>;
    using Derived = py::winrt_wrapper<winrt::TestComponent::Derived>;
    using OverloadClass = py::winrt_wrapper<winrt::TestComponent::OverloadClass>;
    using Override = py::winrt_wrapper<winrt::TestComponent::Override>;
    using TestRunner = py::winrt_wrapper<winrt::TestComponent::TestRunner>;
    using IRequiredFour = py::winrt_wrapper<winrt::TestComponent::IRequiredFour>;
    using IRequiredOne = py::winrt_wrapper<winrt::TestComponent::IRequiredOne>;
    using IRequiredThree = py::winrt_wrapper<winrt::TestComponent::IRequiredThree>;
    using IRequiredTwo = py::winrt_wrapper<winrt::TestComponent::IRequiredTwo>;
    using ITests = py::winrt_wrapper<winrt::TestComponent::ITests>;
    using Blittable = py::winrt_struct_wrapper<winrt::TestComponent::Blittable>;
    using Nested = py::winrt_struct_wrapper<winrt::TestComponent::Nested>;
    using NonBlittable = py::winrt_struct_wrapper<winrt::TestComponent::NonBlittable>;
}

namespace py
{
    template <>
    struct delegate_python_type<winrt::TestComponent::Array10Handler>
    {
        using type = py::impl::TestComponent::Array10Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array11Handler>
    {
        using type = py::impl::TestComponent::Array11Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array12Handler>
    {
        using type = py::impl::TestComponent::Array12Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array13Handler>
    {
        using type = py::impl::TestComponent::Array13Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array14Handler>
    {
        using type = py::impl::TestComponent::Array14Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array15Handler>
    {
        using type = py::impl::TestComponent::Array15Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array16Handler>
    {
        using type = py::impl::TestComponent::Array16Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array1Handler>
    {
        using type = py::impl::TestComponent::Array1Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array2Handler>
    {
        using type = py::impl::TestComponent::Array2Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array3Handler>
    {
        using type = py::impl::TestComponent::Array3Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array4Handler>
    {
        using type = py::impl::TestComponent::Array4Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array5Handler>
    {
        using type = py::impl::TestComponent::Array5Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array6Handler>
    {
        using type = py::impl::TestComponent::Array6Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array7Handler>
    {
        using type = py::impl::TestComponent::Array7Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array8Handler>
    {
        using type = py::impl::TestComponent::Array8Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Array9Handler>
    {
        using type = py::impl::TestComponent::Array9Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Async1Handler>
    {
        using type = py::impl::TestComponent::Async1Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Async2Handler>
    {
        using type = py::impl::TestComponent::Async2Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Async3Handler>
    {
        using type = py::impl::TestComponent::Async3Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Async4Handler>
    {
        using type = py::impl::TestComponent::Async4Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Collection1Handler>
    {
        using type = py::impl::TestComponent::Collection1Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Collection2Handler>
    {
        using type = py::impl::TestComponent::Collection2Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Collection3Handler>
    {
        using type = py::impl::TestComponent::Collection3Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Collection4Handler>
    {
        using type = py::impl::TestComponent::Collection4Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Collection5Handler>
    {
        using type = py::impl::TestComponent::Collection5Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Collection6Handler>
    {
        using type = py::impl::TestComponent::Collection6Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param10Handler>
    {
        using type = py::impl::TestComponent::Param10Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param11Handler>
    {
        using type = py::impl::TestComponent::Param11Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param12Handler>
    {
        using type = py::impl::TestComponent::Param12Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param13Handler>
    {
        using type = py::impl::TestComponent::Param13Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param14Handler>
    {
        using type = py::impl::TestComponent::Param14Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param15Handler>
    {
        using type = py::impl::TestComponent::Param15Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param1Handler>
    {
        using type = py::impl::TestComponent::Param1Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param2Handler>
    {
        using type = py::impl::TestComponent::Param2Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param3Handler>
    {
        using type = py::impl::TestComponent::Param3Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param4Handler>
    {
        using type = py::impl::TestComponent::Param4Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param5Handler>
    {
        using type = py::impl::TestComponent::Param5Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param6Handler>
    {
        using type = py::impl::TestComponent::Param6Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param7Handler>
    {
        using type = py::impl::TestComponent::Param7Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param8Handler>
    {
        using type = py::impl::TestComponent::Param8Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::Param9Handler>
    {
        using type = py::impl::TestComponent::Param9Handler;
    };

    template <>
    struct delegate_python_type<winrt::TestComponent::TestHandler>
    {
        using type = py::impl::TestComponent::TestHandler;
    };

}
