// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240111.5

#pragma once
#ifndef WINRT_TestComponent_1_H
#define WINRT_TestComponent_1_H
#include "winrt/impl/TestComponent.0.h"
WINRT_EXPORT namespace winrt::TestComponent
{
    struct WINRT_IMPL_EMPTY_BASES IClass :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IClass>
    {
        IClass(std::nullptr_t = nullptr) noexcept {}
        IClass(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IComposable :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IComposable>
    {
        IComposable(std::nullptr_t = nullptr) noexcept {}
        IComposable(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IComposableFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IComposableFactory>
    {
        IComposableFactory(std::nullptr_t = nullptr) noexcept {}
        IComposableFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IComposableStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IComposableStatics>
    {
        IComposableStatics(std::nullptr_t = nullptr) noexcept {}
        IComposableStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IDerived :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDerived>
    {
        IDerived(std::nullptr_t = nullptr) noexcept {}
        IDerived(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IDerivedFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDerivedFactory>
    {
        IDerivedFactory(std::nullptr_t = nullptr) noexcept {}
        IDerivedFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IOverloadClass :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IOverloadClass>
    {
        IOverloadClass(std::nullptr_t = nullptr) noexcept {}
        IOverloadClass(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IOverloadClassFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IOverloadClassFactory>
    {
        IOverloadClassFactory(std::nullptr_t = nullptr) noexcept {}
        IOverloadClassFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IOverloadClassOverrides :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IOverloadClassOverrides>
    {
        IOverloadClassOverrides(std::nullptr_t = nullptr) noexcept {}
        IOverloadClassOverrides(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IOverloadClassOverrides2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IOverloadClassOverrides2>
    {
        IOverloadClassOverrides2(std::nullptr_t = nullptr) noexcept {}
        IOverloadClassOverrides2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IOverloadClassProtected :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IOverloadClassProtected>
    {
        IOverloadClassProtected(std::nullptr_t = nullptr) noexcept {}
        IOverloadClassProtected(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IOverride :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IOverride>
    {
        IOverride(std::nullptr_t = nullptr) noexcept {}
        IOverride(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IOverrideFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IOverrideFactory>
    {
        IOverrideFactory(std::nullptr_t = nullptr) noexcept {}
        IOverrideFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IOverrideOverrides :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IOverrideOverrides>
    {
        IOverrideOverrides(std::nullptr_t = nullptr) noexcept {}
        IOverrideOverrides(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IOverrideProtected :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IOverrideProtected>
    {
        IOverrideProtected(std::nullptr_t = nullptr) noexcept {}
        IOverrideProtected(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IRequiredFour :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRequiredFour>,
        impl::require<winrt::TestComponent::IRequiredFour, winrt::TestComponent::IRequiredOne, winrt::TestComponent::IRequiredTwo, winrt::TestComponent::IRequiredThree>
    {
        IRequiredFour(std::nullptr_t = nullptr) noexcept {}
        IRequiredFour(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IRequiredOne :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRequiredOne>
    {
        IRequiredOne(std::nullptr_t = nullptr) noexcept {}
        IRequiredOne(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IRequiredThree :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRequiredThree>,
        impl::require<winrt::TestComponent::IRequiredThree, winrt::TestComponent::IRequiredOne, winrt::TestComponent::IRequiredTwo>
    {
        IRequiredThree(std::nullptr_t = nullptr) noexcept {}
        IRequiredThree(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IRequiredTwo :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRequiredTwo>,
        impl::require<winrt::TestComponent::IRequiredTwo, winrt::TestComponent::IRequiredOne>
    {
        IRequiredTwo(std::nullptr_t = nullptr) noexcept {}
        IRequiredTwo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ITestRunnerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITestRunnerStatics>
    {
        ITestRunnerStatics(std::nullptr_t = nullptr) noexcept {}
        ITestRunnerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ITests :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITests>
    {
        ITests(std::nullptr_t = nullptr) noexcept {}
        ITests(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
}
#endif
