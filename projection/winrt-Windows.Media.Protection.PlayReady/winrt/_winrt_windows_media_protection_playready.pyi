# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.media.core as windows_media_core
import winrt.windows.media.protection as windows_media_protection
import winrt.windows.storage as windows_storage

from winrt.windows.media.protection.playready import NDCertificateFeature, NDCertificatePlatformID, NDCertificateType, NDClosedCaptionFormat, NDContentIDType, NDMediaStreamType, NDProximityDetectionType, NDStartAsyncOptions, PlayReadyDecryptorSetup, PlayReadyEncryptionAlgorithm, PlayReadyHardwareDRMFeatures, PlayReadyITADataFormat

Self = typing.TypeVar('Self')

@typing.final
class NDClient(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NDClient: ...
    def __new__(cls: typing.Type[NDClient], download_engine: INDDownloadEngine, stream_parser: INDStreamParser, p_messenger: INDMessenger) -> NDClient: ...
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def close(self) -> None: ...
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def license_fetch_async(self, license_fetch_descriptor: INDLicenseFetchDescriptor, /) -> windows_foundation.IAsyncOperation[INDLicenseFetchResult]: ...
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def re_registration_async(self, registration_custom_data: INDCustomData, /) -> windows_foundation.IAsyncAction: ...
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def start_async(self, content_url: windows_foundation.Uri, start_async_options: winrt.system.UInt32, registration_custom_data: INDCustomData, license_fetch_descriptor: INDLicenseFetchDescriptor, /) -> windows_foundation.IAsyncOperation[INDStartResult]: ...
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def add_closed_caption_data_received(self, handler: windows_foundation.TypedEventHandler[NDClient, INDClosedCaptionDataReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def remove_closed_caption_data_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def add_license_fetch_completed(self, handler: windows_foundation.TypedEventHandler[NDClient, INDLicenseFetchCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def remove_license_fetch_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def add_proximity_detection_completed(self, handler: windows_foundation.TypedEventHandler[NDClient, INDProximityDetectionCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def remove_proximity_detection_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def add_re_registration_needed(self, handler: windows_foundation.TypedEventHandler[NDClient, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def remove_re_registration_needed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def add_registration_completed(self, handler: windows_foundation.TypedEventHandler[NDClient, INDRegistrationCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def remove_registration_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class NDCustomData(INDCustomData, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NDCustomData: ...
    def __new__(cls: typing.Type[NDCustomData], custom_data_type_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], custom_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer]) -> NDCustomData: ...
    @_property
    def custom_data(self) -> winrt.system.UInt8: ...
    @_property
    def custom_data_type_id(self) -> winrt.system.UInt8: ...

@typing.final
class NDDownloadEngineNotifier(INDDownloadEngineNotifier, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NDDownloadEngineNotifier: ...
    def __new__(cls: typing.Type[NDDownloadEngineNotifier]) -> NDDownloadEngineNotifier: ...
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_content_id_received(self, license_fetch_descriptor: INDLicenseFetchDescriptor, /) -> None: ...
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_data_received(self, data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], bytes_received: winrt.system.UInt32, /) -> None: ...
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_end_of_stream(self) -> None: ...
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_network_error(self) -> None: ...
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_play_ready_object_received(self, data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_stream_opened(self) -> None: ...

@typing.final
class NDLicenseFetchDescriptor(INDLicenseFetchDescriptor, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NDLicenseFetchDescriptor: ...
    def __new__(cls: typing.Type[NDLicenseFetchDescriptor], content_id_type: NDContentIDType, content_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], license_fetch_challenge_custom_data: INDCustomData) -> NDLicenseFetchDescriptor: ...
    @_property
    def license_fetch_challenge_custom_data(self) -> INDCustomData: ...
    @license_fetch_challenge_custom_data.setter
    def license_fetch_challenge_custom_data(self, value: INDCustomData) -> None: ...
    @_property
    def content_id(self) -> winrt.system.UInt8: ...
    @_property
    def content_id_type(self) -> NDContentIDType: ...

@typing.final
class NDStorageFileHelper(INDStorageFileHelper, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NDStorageFileHelper: ...
    def __new__(cls: typing.Type[NDStorageFileHelper]) -> NDStorageFileHelper: ...
    # @deprecated("INDStorageFileHelper is deprecated and might not work on all platforms. For more info, see MSDN.")
    def get_file_u_r_ls(self, file: windows_storage.IStorageFile, /) -> typing.MutableSequence[str]: ...

@typing.final
class NDStreamParserNotifier(INDStreamParserNotifier, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NDStreamParserNotifier: ...
    def __new__(cls: typing.Type[NDStreamParserNotifier]) -> NDStreamParserNotifier: ...
    # @deprecated("INDStreamParserNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_begin_setup_decryptor(self, descriptor: windows_media_core.IMediaStreamDescriptor, key_id: _uuid.UUID, pro_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...
    # @deprecated("INDStreamParserNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_content_id_received(self, license_fetch_descriptor: INDLicenseFetchDescriptor, /) -> None: ...
    # @deprecated("INDStreamParserNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_media_stream_descriptor_created(self, audio_stream_descriptors: typing.MutableSequence[windows_media_core.AudioStreamDescriptor], video_stream_descriptors: typing.MutableSequence[windows_media_core.VideoStreamDescriptor], /) -> None: ...
    # @deprecated("INDStreamParserNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_sample_parsed(self, stream_id: winrt.system.UInt32, stream_type: NDMediaStreamType, stream_sample: windows_media_core.MediaStreamSample, pts: winrt.system.Int64, cc_format: NDClosedCaptionFormat, cc_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...

@typing.final
class NDTCPMessenger(INDMessenger, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NDTCPMessenger: ...
    def __new__(cls: typing.Type[NDTCPMessenger], remote_host_name: str, remote_host_port: winrt.system.UInt32) -> NDTCPMessenger: ...
    # @deprecated("INDMessenger is deprecated and might not work on all platforms. For more info, see MSDN.")
    def send_license_fetch_request_async(self, session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], challenge_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncOperation[INDSendResult]: ...
    # @deprecated("INDMessenger is deprecated and might not work on all platforms. For more info, see MSDN.")
    def send_proximity_detection_response_async(self, pd_type: NDProximityDetectionType, transmitter_channel_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], response_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncOperation[INDSendResult]: ...
    # @deprecated("INDMessenger is deprecated and might not work on all platforms. For more info, see MSDN.")
    def send_proximity_detection_start_async(self, pd_type: NDProximityDetectionType, transmitter_channel_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], challenge_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncOperation[INDSendResult]: ...
    # @deprecated("INDMessenger is deprecated and might not work on all platforms. For more info, see MSDN.")
    def send_registration_request_async(self, session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], challenge_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncOperation[INDSendResult]: ...

@typing.final
class PlayReadyContentHeader(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyContentHeader: ...
    @typing.overload
    def __new__(cls: typing.Type[PlayReadyContentHeader], dw_flags: winrt.system.UInt32, content_key_ids: typing.Union[winrt.system.Array[_uuid.UUID], winrt.system.ReadableBuffer], content_key_id_strings: typing.Union[winrt.system.Array[str], winrt.system.ReadableBuffer], content_encryption_algorithm: PlayReadyEncryptionAlgorithm, license_acquisition_url: windows_foundation.Uri, license_acquisition_user_interface_url: windows_foundation.Uri, custom_attributes: str, domain_service_id: _uuid.UUID) -> PlayReadyContentHeader: ...
    @typing.overload
    def __new__(cls: typing.Type[PlayReadyContentHeader], header_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], license_acquisition_url: windows_foundation.Uri, license_acquisition_user_interface_url: windows_foundation.Uri, custom_attributes: str, domain_service_id: _uuid.UUID) -> PlayReadyContentHeader: ...
    @typing.overload
    def __new__(cls: typing.Type[PlayReadyContentHeader], content_key_id: _uuid.UUID, content_key_id_string: str, content_encryption_algorithm: PlayReadyEncryptionAlgorithm, license_acquisition_url: windows_foundation.Uri, license_acquisition_user_interface_url: windows_foundation.Uri, custom_attributes: str, domain_service_id: _uuid.UUID) -> PlayReadyContentHeader: ...
    @typing.overload
    def __new__(cls: typing.Type[PlayReadyContentHeader], header_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer]) -> PlayReadyContentHeader: ...
    def get_serialized_header(self) -> winrt.system.Array[winrt.system.UInt8]: ...
    @_property
    def custom_attributes(self) -> str: ...
    @_property
    def decryptor_setup(self) -> PlayReadyDecryptorSetup: ...
    @_property
    def domain_service_id(self) -> _uuid.UUID: ...
    @_property
    def encryption_type(self) -> PlayReadyEncryptionAlgorithm: ...
    @_property
    def header_with_embedded_updates(self) -> PlayReadyContentHeader: ...
    @_property
    def key_id(self) -> _uuid.UUID: ...
    @_property
    def key_id_string(self) -> str: ...
    @_property
    def license_acquisition_url(self) -> windows_foundation.Uri: ...
    @_property
    def license_acquisition_user_interface_url(self) -> windows_foundation.Uri: ...
    @_property
    def key_id_strings(self) -> str: ...
    @_property
    def key_ids(self) -> _uuid.UUID: ...

@typing.final
class PlayReadyContentResolver_Static(type):
    def service_request(cls, content_header: PlayReadyContentHeader, /) -> IPlayReadyServiceRequest: ...

@typing.final
class PlayReadyContentResolver(winrt.system.Object, metaclass=PlayReadyContentResolver_Static):
    pass

@typing.final
class PlayReadyDomain(IPlayReadyDomain, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyDomain: ...
    @_property
    def account_id(self) -> _uuid.UUID: ...
    @_property
    def domain_join_url(self) -> windows_foundation.Uri: ...
    @_property
    def friendly_name(self) -> str: ...
    @_property
    def revision(self) -> winrt.system.UInt32: ...
    @_property
    def service_id(self) -> _uuid.UUID: ...

@typing.final
class PlayReadyDomainIterable(winrt.system.Object):
    def __iter__(self) -> windows_foundation_collections.IIterator[IPlayReadyDomain]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyDomainIterable: ...
    def __new__(cls: typing.Type[PlayReadyDomainIterable], domain_account_id: _uuid.UUID) -> PlayReadyDomainIterable: ...
    def first(self) -> windows_foundation_collections.IIterator[IPlayReadyDomain]: ...

@typing.final
class PlayReadyDomainIterator(windows_foundation_collections.IIterator[IPlayReadyDomain], winrt.system.Object):
    def __iter__(self: Self) -> Self: ...
    def __next__(self) -> IPlayReadyDomain: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyDomainIterator: ...
    def get_many(self, items: typing.Union[winrt.system.Array[IPlayReadyDomain], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def move_next(self) -> bool: ...
    @_property
    def current(self) -> IPlayReadyDomain: ...
    @_property
    def has_current(self) -> bool: ...

@typing.final
class PlayReadyDomainJoinServiceRequest(IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyDomainJoinServiceRequest: ...
    def __new__(cls: typing.Type[PlayReadyDomainJoinServiceRequest]) -> PlayReadyDomainJoinServiceRequest: ...
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    @_property
    def type(self) -> _uuid.UUID: ...
    @_property
    def domain_service_id(self) -> _uuid.UUID: ...
    @domain_service_id.setter
    def domain_service_id(self, value: _uuid.UUID) -> None: ...
    @_property
    def domain_friendly_name(self) -> str: ...
    @domain_friendly_name.setter
    def domain_friendly_name(self, value: str) -> None: ...
    @_property
    def domain_account_id(self) -> _uuid.UUID: ...
    @domain_account_id.setter
    def domain_account_id(self, value: _uuid.UUID) -> None: ...
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    @_property
    def challenge_custom_data(self) -> str: ...
    @challenge_custom_data.setter
    def challenge_custom_data(self, value: str) -> None: ...
    @_property
    def response_custom_data(self) -> str: ...

@typing.final
class PlayReadyDomainLeaveServiceRequest(IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyDomainLeaveServiceRequest: ...
    def __new__(cls: typing.Type[PlayReadyDomainLeaveServiceRequest]) -> PlayReadyDomainLeaveServiceRequest: ...
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    @_property
    def type(self) -> _uuid.UUID: ...
    @_property
    def domain_service_id(self) -> _uuid.UUID: ...
    @domain_service_id.setter
    def domain_service_id(self, value: _uuid.UUID) -> None: ...
    @_property
    def domain_account_id(self) -> _uuid.UUID: ...
    @domain_account_id.setter
    def domain_account_id(self, value: _uuid.UUID) -> None: ...
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    @_property
    def challenge_custom_data(self) -> str: ...
    @challenge_custom_data.setter
    def challenge_custom_data(self, value: str) -> None: ...
    @_property
    def response_custom_data(self) -> str: ...

@typing.final
class PlayReadyITADataGenerator(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyITADataGenerator: ...
    def __new__(cls: typing.Type[PlayReadyITADataGenerator]) -> PlayReadyITADataGenerator: ...
    def generate_data(self, guid_c_p_system_id: _uuid.UUID, count_of_streams: winrt.system.UInt32, configuration: windows_foundation_collections.IPropertySet, format: PlayReadyITADataFormat, /) -> winrt.system.Array[winrt.system.UInt8]: ...

@typing.final
class PlayReadyIndividualizationServiceRequest(IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyIndividualizationServiceRequest: ...
    def __new__(cls: typing.Type[PlayReadyIndividualizationServiceRequest]) -> PlayReadyIndividualizationServiceRequest: ...
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    @_property
    def type(self) -> _uuid.UUID: ...
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    @_property
    def challenge_custom_data(self) -> str: ...
    @challenge_custom_data.setter
    def challenge_custom_data(self, value: str) -> None: ...
    @_property
    def response_custom_data(self) -> str: ...

@typing.final
class PlayReadyLicense(IPlayReadyLicense, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyLicense: ...
    def get_k_i_d_at_chain_depth(self, chain_depth: winrt.system.UInt32, /) -> _uuid.UUID: ...
    @_property
    def chain_depth(self) -> winrt.system.UInt32: ...
    @_property
    def domain_account_id(self) -> _uuid.UUID: ...
    @_property
    def expiration_date(self) -> typing.Optional[datetime.datetime]: ...
    @_property
    def expire_after_first_play(self) -> winrt.system.UInt32: ...
    @_property
    def fully_evaluated(self) -> bool: ...
    @_property
    def usable_for_play(self) -> bool: ...
    @_property
    def expires_in_real_time(self) -> bool: ...
    @_property
    def in_memory_only(self) -> bool: ...
    @_property
    def secure_stop_id(self) -> _uuid.UUID: ...
    @_property
    def security_level(self) -> winrt.system.UInt32: ...

@typing.final
class PlayReadyLicenseAcquisitionServiceRequest(IPlayReadyLicenseAcquisitionServiceRequest, IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyLicenseAcquisitionServiceRequest: ...
    def __new__(cls: typing.Type[PlayReadyLicenseAcquisitionServiceRequest]) -> PlayReadyLicenseAcquisitionServiceRequest: ...
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    def create_license_iterable(self, content_header: PlayReadyContentHeader, fully_evaluated: bool, /) -> PlayReadyLicenseIterable: ...
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    @_property
    def type(self) -> _uuid.UUID: ...
    @_property
    def domain_service_id(self) -> _uuid.UUID: ...
    @domain_service_id.setter
    def domain_service_id(self, value: _uuid.UUID) -> None: ...
    @_property
    def content_header(self) -> PlayReadyContentHeader: ...
    @content_header.setter
    def content_header(self, value: PlayReadyContentHeader) -> None: ...
    @_property
    def session_id(self) -> _uuid.UUID: ...
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    @_property
    def challenge_custom_data(self) -> str: ...
    @challenge_custom_data.setter
    def challenge_custom_data(self, value: str) -> None: ...
    @_property
    def response_custom_data(self) -> str: ...

@typing.final
class PlayReadyLicenseIterable(winrt.system.Object):
    def __iter__(self) -> windows_foundation_collections.IIterator[IPlayReadyLicense]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyLicenseIterable: ...
    @typing.overload
    def __new__(cls: typing.Type[PlayReadyLicenseIterable]) -> PlayReadyLicenseIterable: ...
    @typing.overload
    def __new__(cls: typing.Type[PlayReadyLicenseIterable], content_header: PlayReadyContentHeader, fully_evaluated: bool) -> PlayReadyLicenseIterable: ...
    def first(self) -> windows_foundation_collections.IIterator[IPlayReadyLicense]: ...

@typing.final
class PlayReadyLicenseIterator(windows_foundation_collections.IIterator[IPlayReadyLicense], winrt.system.Object):
    def __iter__(self: Self) -> Self: ...
    def __next__(self) -> IPlayReadyLicense: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyLicenseIterator: ...
    def get_many(self, items: typing.Union[winrt.system.Array[IPlayReadyLicense], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def move_next(self) -> bool: ...
    @_property
    def current(self) -> IPlayReadyLicense: ...
    @_property
    def has_current(self) -> bool: ...

@typing.final
class PlayReadyLicenseManagement_Static(type):
    def delete_licenses(cls, content_header: PlayReadyContentHeader, /) -> windows_foundation.IAsyncAction: ...

@typing.final
class PlayReadyLicenseManagement(winrt.system.Object, metaclass=PlayReadyLicenseManagement_Static):
    pass

@typing.final
class PlayReadyLicenseSession(IPlayReadyLicenseSession2, IPlayReadyLicenseSession, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyLicenseSession: ...
    def __new__(cls: typing.Type[PlayReadyLicenseSession], configuration: windows_foundation_collections.IPropertySet) -> PlayReadyLicenseSession: ...
    def configure_media_protection_manager(self, mpm: windows_media_protection.MediaProtectionManager, /) -> None: ...
    def create_l_a_service_request(self) -> IPlayReadyLicenseAcquisitionServiceRequest: ...
    def create_license_iterable(self, content_header: PlayReadyContentHeader, fully_evaluated: bool, /) -> PlayReadyLicenseIterable: ...

@typing.final
class PlayReadyMeteringReportServiceRequest(IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyMeteringReportServiceRequest: ...
    def __new__(cls: typing.Type[PlayReadyMeteringReportServiceRequest]) -> PlayReadyMeteringReportServiceRequest: ...
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    @_property
    def type(self) -> _uuid.UUID: ...
    @_property
    def metering_certificate(self) -> winrt.system.UInt8: ...
    @metering_certificate.setter
    def metering_certificate(self, value: winrt.system.UInt8) -> None: ...
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    @_property
    def challenge_custom_data(self) -> str: ...
    @challenge_custom_data.setter
    def challenge_custom_data(self, value: str) -> None: ...
    @_property
    def response_custom_data(self) -> str: ...

@typing.final
class PlayReadyRevocationServiceRequest(IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadyRevocationServiceRequest: ...
    def __new__(cls: typing.Type[PlayReadyRevocationServiceRequest]) -> PlayReadyRevocationServiceRequest: ...
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    @_property
    def type(self) -> _uuid.UUID: ...
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    @_property
    def challenge_custom_data(self) -> str: ...
    @challenge_custom_data.setter
    def challenge_custom_data(self, value: str) -> None: ...
    @_property
    def response_custom_data(self) -> str: ...

@typing.final
class PlayReadySecureStopIterable(winrt.system.Object):
    def __iter__(self) -> windows_foundation_collections.IIterator[IPlayReadySecureStopServiceRequest]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadySecureStopIterable: ...
    def __new__(cls: typing.Type[PlayReadySecureStopIterable], publisher_cert_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer]) -> PlayReadySecureStopIterable: ...
    def first(self) -> windows_foundation_collections.IIterator[IPlayReadySecureStopServiceRequest]: ...

@typing.final
class PlayReadySecureStopIterator(windows_foundation_collections.IIterator[IPlayReadySecureStopServiceRequest], winrt.system.Object):
    def __iter__(self: Self) -> Self: ...
    def __next__(self) -> IPlayReadySecureStopServiceRequest: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadySecureStopIterator: ...
    def get_many(self, items: typing.Union[winrt.system.Array[IPlayReadySecureStopServiceRequest], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def move_next(self) -> bool: ...
    @_property
    def current(self) -> IPlayReadySecureStopServiceRequest: ...
    @_property
    def has_current(self) -> bool: ...

@typing.final
class PlayReadySecureStopServiceRequest(IPlayReadySecureStopServiceRequest, IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadySecureStopServiceRequest: ...
    @typing.overload
    def __new__(cls: typing.Type[PlayReadySecureStopServiceRequest], publisher_cert_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer]) -> PlayReadySecureStopServiceRequest: ...
    @typing.overload
    def __new__(cls: typing.Type[PlayReadySecureStopServiceRequest], session_id: _uuid.UUID, publisher_cert_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer]) -> PlayReadySecureStopServiceRequest: ...
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    @_property
    def type(self) -> _uuid.UUID: ...
    @_property
    def publisher_certificate(self) -> winrt.system.UInt8: ...
    @_property
    def session_id(self) -> _uuid.UUID: ...
    @_property
    def start_time(self) -> datetime.datetime: ...
    @_property
    def stopped(self) -> bool: ...
    @_property
    def update_time(self) -> datetime.datetime: ...
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    @_property
    def challenge_custom_data(self) -> str: ...
    @challenge_custom_data.setter
    def challenge_custom_data(self, value: str) -> None: ...
    @_property
    def response_custom_data(self) -> str: ...

@typing.final
class PlayReadySoapMessage(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayReadySoapMessage: ...
    def get_message_body(self) -> winrt.system.Array[winrt.system.UInt8]: ...
    @_property
    def message_headers(self) -> windows_foundation_collections.IPropertySet: ...
    @_property
    def uri(self) -> windows_foundation.Uri: ...

@typing.final
class PlayReadyStatics_Static(type):
    def check_supported_hardware(cls, hwdrm_feature: PlayReadyHardwareDRMFeatures, /) -> bool: ...
    def reset_hardware_drm_disabled(cls) -> None: ...
    @_property
    def domain_join_service_request_type(cls) -> _uuid.UUID: ...
    @_property
    def domain_leave_service_request_type(cls) -> _uuid.UUID: ...
    @_property
    def individualization_service_request_type(cls) -> _uuid.UUID: ...
    @_property
    def license_acquirer_service_request_type(cls) -> _uuid.UUID: ...
    @_property
    def media_protection_system_id(cls) -> _uuid.UUID: ...
    @_property
    def metering_report_service_request_type(cls) -> _uuid.UUID: ...
    @_property
    def play_ready_security_version(cls) -> winrt.system.UInt32: ...
    @_property
    def revocation_service_request_type(cls) -> _uuid.UUID: ...
    @_property
    def play_ready_certificate_security_level(cls) -> winrt.system.UInt32: ...
    @_property
    def secure_stop_service_request_type(cls) -> _uuid.UUID: ...
    @_property
    def protection_system_id(cls) -> _uuid.UUID: ...
    @_property
    def input_trust_authority_to_create(cls) -> str: ...
    @_property
    def hardware_drm_disabled_until_time(cls) -> typing.Optional[datetime.datetime]: ...
    @_property
    def hardware_drm_disabled_at_time(cls) -> typing.Optional[datetime.datetime]: ...

@typing.final
class PlayReadyStatics(winrt.system.Object, metaclass=PlayReadyStatics_Static):
    pass

class INDClosedCaptionDataReceivedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDClosedCaptionDataReceivedEventArgs: ...
    @_property
    def closed_caption_data(self) -> winrt.system.UInt8: ...
    @_property
    def closed_caption_data_format(self) -> NDClosedCaptionFormat: ...
    @_property
    def presentation_timestamp(self) -> winrt.system.Int64: ...

class INDCustomData(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDCustomData: ...
    @_property
    def custom_data(self) -> winrt.system.UInt8: ...
    @_property
    def custom_data_type_id(self) -> winrt.system.UInt8: ...

class INDDownloadEngine(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDDownloadEngine: ...
    # @deprecated("INDDownloadEngine is deprecated and might not work on all platforms. For more info, see MSDN.")
    def close(self) -> None: ...
    # @deprecated("INDDownloadEngine is deprecated and might not work on all platforms. For more info, see MSDN.")
    def open(self, uri: windows_foundation.Uri, session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...
    # @deprecated("INDDownloadEngine is deprecated and might not work on all platforms. For more info, see MSDN.")
    def pause(self) -> None: ...
    # @deprecated("INDDownloadEngine is deprecated and might not work on all platforms. For more info, see MSDN.")
    def resume(self) -> None: ...
    # @deprecated("INDDownloadEngine is deprecated and might not work on all platforms. For more info, see MSDN.")
    def seek(self, start_position: datetime.timedelta, /) -> None: ...
    @_property
    def buffer_full_max_threshold_in_samples(self) -> winrt.system.UInt32: ...
    @_property
    def buffer_full_min_threshold_in_samples(self) -> winrt.system.UInt32: ...
    @_property
    def can_seek(self) -> bool: ...
    @_property
    def notifier(self) -> NDDownloadEngineNotifier: ...

class INDDownloadEngineNotifier(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDDownloadEngineNotifier: ...
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_content_id_received(self, license_fetch_descriptor: INDLicenseFetchDescriptor, /) -> None: ...
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_data_received(self, data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], bytes_received: winrt.system.UInt32, /) -> None: ...
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_end_of_stream(self) -> None: ...
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_network_error(self) -> None: ...
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_play_ready_object_received(self, data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_stream_opened(self) -> None: ...

class INDLicenseFetchCompletedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDLicenseFetchCompletedEventArgs: ...
    @_property
    def response_custom_data(self) -> INDCustomData: ...

class INDLicenseFetchDescriptor(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDLicenseFetchDescriptor: ...
    @_property
    def content_id(self) -> winrt.system.UInt8: ...
    @_property
    def content_id_type(self) -> NDContentIDType: ...
    @_property
    def license_fetch_challenge_custom_data(self) -> INDCustomData: ...
    @license_fetch_challenge_custom_data.setter
    def license_fetch_challenge_custom_data(self, value: INDCustomData) -> None: ...

class INDLicenseFetchResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDLicenseFetchResult: ...
    @_property
    def response_custom_data(self) -> INDCustomData: ...

class INDMessenger(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDMessenger: ...
    # @deprecated("INDMessenger is deprecated and might not work on all platforms. For more info, see MSDN.")
    def send_license_fetch_request_async(self, session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], challenge_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncOperation[INDSendResult]: ...
    # @deprecated("INDMessenger is deprecated and might not work on all platforms. For more info, see MSDN.")
    def send_proximity_detection_response_async(self, pd_type: NDProximityDetectionType, transmitter_channel_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], response_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncOperation[INDSendResult]: ...
    # @deprecated("INDMessenger is deprecated and might not work on all platforms. For more info, see MSDN.")
    def send_proximity_detection_start_async(self, pd_type: NDProximityDetectionType, transmitter_channel_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], challenge_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncOperation[INDSendResult]: ...
    # @deprecated("INDMessenger is deprecated and might not work on all platforms. For more info, see MSDN.")
    def send_registration_request_async(self, session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], challenge_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncOperation[INDSendResult]: ...

class INDProximityDetectionCompletedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDProximityDetectionCompletedEventArgs: ...
    @_property
    def proximity_detection_retry_count(self) -> winrt.system.UInt32: ...

class INDRegistrationCompletedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDRegistrationCompletedEventArgs: ...
    @_property
    def response_custom_data(self) -> INDCustomData: ...
    @_property
    def transmitter_certificate_accepted(self) -> bool: ...
    @transmitter_certificate_accepted.setter
    def transmitter_certificate_accepted(self, value: bool) -> None: ...
    @_property
    def transmitter_properties(self) -> INDTransmitterProperties: ...

class INDSendResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDSendResult: ...
    @_property
    def response(self) -> winrt.system.UInt8: ...

class INDStartResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDStartResult: ...
    @_property
    def media_stream_source(self) -> windows_media_core.MediaStreamSource: ...

class INDStorageFileHelper(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDStorageFileHelper: ...
    # @deprecated("INDStorageFileHelper is deprecated and might not work on all platforms. For more info, see MSDN.")
    def get_file_u_r_ls(self, file: windows_storage.IStorageFile, /) -> typing.MutableSequence[str]: ...

class INDStreamParser(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDStreamParser: ...
    # @deprecated("INDStreamParser is deprecated and might not work on all platforms. For more info, see MSDN.")
    def begin_of_stream(self) -> None: ...
    # @deprecated("INDStreamParser is deprecated and might not work on all platforms. For more info, see MSDN.")
    def end_of_stream(self) -> None: ...
    # @deprecated("INDStreamParser is deprecated and might not work on all platforms. For more info, see MSDN.")
    def get_stream_information(self, descriptor: windows_media_core.IMediaStreamDescriptor, /) -> typing.Tuple[winrt.system.UInt32, NDMediaStreamType]: ...
    # @deprecated("INDStreamParser is deprecated and might not work on all platforms. For more info, see MSDN.")
    def parse_data(self, data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...
    @_property
    def notifier(self) -> NDStreamParserNotifier: ...

class INDStreamParserNotifier(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDStreamParserNotifier: ...
    # @deprecated("INDStreamParserNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_begin_setup_decryptor(self, descriptor: windows_media_core.IMediaStreamDescriptor, key_id: _uuid.UUID, pro_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...
    # @deprecated("INDStreamParserNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_content_id_received(self, license_fetch_descriptor: INDLicenseFetchDescriptor, /) -> None: ...
    # @deprecated("INDStreamParserNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_media_stream_descriptor_created(self, audio_stream_descriptors: typing.MutableSequence[windows_media_core.AudioStreamDescriptor], video_stream_descriptors: typing.MutableSequence[windows_media_core.VideoStreamDescriptor], /) -> None: ...
    # @deprecated("INDStreamParserNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_sample_parsed(self, stream_id: winrt.system.UInt32, stream_type: NDMediaStreamType, stream_sample: windows_media_core.MediaStreamSample, pts: winrt.system.Int64, cc_format: NDClosedCaptionFormat, cc_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...

class INDTransmitterProperties(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> INDTransmitterProperties: ...
    @_property
    def certificate_type(self) -> NDCertificateType: ...
    @_property
    def client_id(self) -> winrt.system.UInt8: ...
    @_property
    def expiration_date(self) -> datetime.datetime: ...
    @_property
    def model_digest(self) -> winrt.system.UInt8: ...
    @_property
    def model_manufacturer_name(self) -> str: ...
    @_property
    def model_name(self) -> str: ...
    @_property
    def model_number(self) -> str: ...
    @_property
    def platform_identifier(self) -> NDCertificatePlatformID: ...
    @_property
    def security_level(self) -> winrt.system.UInt32: ...
    @_property
    def security_version(self) -> winrt.system.UInt32: ...
    @_property
    def supported_features(self) -> NDCertificateFeature: ...

class IPlayReadyDomain(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPlayReadyDomain: ...
    @_property
    def account_id(self) -> _uuid.UUID: ...
    @_property
    def domain_join_url(self) -> windows_foundation.Uri: ...
    @_property
    def friendly_name(self) -> str: ...
    @_property
    def revision(self) -> winrt.system.UInt32: ...
    @_property
    def service_id(self) -> _uuid.UUID: ...

class IPlayReadyLicense(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPlayReadyLicense: ...
    def get_k_i_d_at_chain_depth(self, chain_depth: winrt.system.UInt32, /) -> _uuid.UUID: ...
    @_property
    def chain_depth(self) -> winrt.system.UInt32: ...
    @_property
    def domain_account_id(self) -> _uuid.UUID: ...
    @_property
    def expiration_date(self) -> typing.Optional[datetime.datetime]: ...
    @_property
    def expire_after_first_play(self) -> winrt.system.UInt32: ...
    @_property
    def fully_evaluated(self) -> bool: ...
    @_property
    def usable_for_play(self) -> bool: ...

class IPlayReadyLicenseAcquisitionServiceRequest(IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPlayReadyLicenseAcquisitionServiceRequest: ...
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    @_property
    def content_header(self) -> PlayReadyContentHeader: ...
    @content_header.setter
    def content_header(self, value: PlayReadyContentHeader) -> None: ...
    @_property
    def domain_service_id(self) -> _uuid.UUID: ...
    @domain_service_id.setter
    def domain_service_id(self, value: _uuid.UUID) -> None: ...
    @_property
    def challenge_custom_data(self) -> str: ...
    @challenge_custom_data.setter
    def challenge_custom_data(self, value: str) -> None: ...
    @_property
    def response_custom_data(self) -> str: ...
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    @_property
    def type(self) -> _uuid.UUID: ...

class IPlayReadyLicenseSession(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPlayReadyLicenseSession: ...
    def configure_media_protection_manager(self, mpm: windows_media_protection.MediaProtectionManager, /) -> None: ...
    def create_l_a_service_request(self) -> IPlayReadyLicenseAcquisitionServiceRequest: ...

class IPlayReadyLicenseSession2(IPlayReadyLicenseSession, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPlayReadyLicenseSession2: ...
    def configure_media_protection_manager(self, mpm: windows_media_protection.MediaProtectionManager, /) -> None: ...
    def create_l_a_service_request(self) -> IPlayReadyLicenseAcquisitionServiceRequest: ...
    def create_license_iterable(self, content_header: PlayReadyContentHeader, fully_evaluated: bool, /) -> PlayReadyLicenseIterable: ...

class IPlayReadySecureStopServiceRequest(IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPlayReadySecureStopServiceRequest: ...
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    @_property
    def publisher_certificate(self) -> winrt.system.UInt8: ...
    @_property
    def session_id(self) -> _uuid.UUID: ...
    @_property
    def start_time(self) -> datetime.datetime: ...
    @_property
    def stopped(self) -> bool: ...
    @_property
    def update_time(self) -> datetime.datetime: ...
    @_property
    def challenge_custom_data(self) -> str: ...
    @challenge_custom_data.setter
    def challenge_custom_data(self, value: str) -> None: ...
    @_property
    def response_custom_data(self) -> str: ...
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    @_property
    def type(self) -> _uuid.UUID: ...

class IPlayReadyServiceRequest(windows_media_protection.IMediaProtectionServiceRequest, winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPlayReadyServiceRequest: ...
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    @_property
    def challenge_custom_data(self) -> str: ...
    @challenge_custom_data.setter
    def challenge_custom_data(self, value: str) -> None: ...
    @_property
    def response_custom_data(self) -> str: ...
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    @_property
    def type(self) -> _uuid.UUID: ...

