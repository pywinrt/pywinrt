# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.media.core as windows_media_core
import winrt.windows.media.protection as windows_media_protection
import winrt.windows.storage as windows_storage

from winrt.windows.media.protection.playready import NDCertificateFeature, NDCertificatePlatformID, NDCertificateType, NDClosedCaptionFormat, NDContentIDType, NDMediaStreamType, NDProximityDetectionType, NDStartAsyncOptions, PlayReadyDecryptorSetup, PlayReadyEncryptionAlgorithm, PlayReadyHardwareDRMFeatures, PlayReadyITADataFormat

Self = typing.TypeVar('Self')

@typing.final
class NDClient(winrt.system.Object):
    def __new__(cls: typing.Type[Self], download_engine: INDDownloadEngine, stream_parser: INDStreamParser, p_messenger: INDMessenger) -> Self: ...
    # System.Void Windows.Media.Protection.PlayReady.NDClient::Close()
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def close(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Media.Protection.PlayReady.INDLicenseFetchResult> Windows.Media.Protection.PlayReady.NDClient::LicenseFetchAsync(Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptor)
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def license_fetch_async(self, license_fetch_descriptor: INDLicenseFetchDescriptor, /) -> windows_foundation.IAsyncOperation[INDLicenseFetchResult]: ...
    # Windows.Foundation.IAsyncAction Windows.Media.Protection.PlayReady.NDClient::ReRegistrationAsync(Windows.Media.Protection.PlayReady.INDCustomData)
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def re_registration_async(self, registration_custom_data: INDCustomData, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Media.Protection.PlayReady.INDStartResult> Windows.Media.Protection.PlayReady.NDClient::StartAsync(Windows.Foundation.Uri,System.UInt32,Windows.Media.Protection.PlayReady.INDCustomData,Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptor)
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def start_async(self, content_url: windows_foundation.Uri, start_async_options: winrt.system.UInt32, registration_custom_data: INDCustomData, license_fetch_descriptor: INDLicenseFetchDescriptor, /) -> windows_foundation.IAsyncOperation[INDStartResult]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.Protection.PlayReady.NDClient::add_ClosedCaptionDataReceived(Windows.Foundation.TypedEventHandler`2<Windows.Media.Protection.PlayReady.NDClient,Windows.Media.Protection.PlayReady.INDClosedCaptionDataReceivedEventArgs>)
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def add_closed_caption_data_received(self, handler: windows_foundation.TypedEventHandler[NDClient, INDClosedCaptionDataReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.Protection.PlayReady.NDClient::remove_ClosedCaptionDataReceived(Windows.Foundation.EventRegistrationToken)
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def remove_closed_caption_data_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.Protection.PlayReady.NDClient::add_LicenseFetchCompleted(Windows.Foundation.TypedEventHandler`2<Windows.Media.Protection.PlayReady.NDClient,Windows.Media.Protection.PlayReady.INDLicenseFetchCompletedEventArgs>)
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def add_license_fetch_completed(self, handler: windows_foundation.TypedEventHandler[NDClient, INDLicenseFetchCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.Protection.PlayReady.NDClient::remove_LicenseFetchCompleted(Windows.Foundation.EventRegistrationToken)
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def remove_license_fetch_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.Protection.PlayReady.NDClient::add_ProximityDetectionCompleted(Windows.Foundation.TypedEventHandler`2<Windows.Media.Protection.PlayReady.NDClient,Windows.Media.Protection.PlayReady.INDProximityDetectionCompletedEventArgs>)
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def add_proximity_detection_completed(self, handler: windows_foundation.TypedEventHandler[NDClient, INDProximityDetectionCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.Protection.PlayReady.NDClient::remove_ProximityDetectionCompleted(Windows.Foundation.EventRegistrationToken)
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def remove_proximity_detection_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.Protection.PlayReady.NDClient::add_ReRegistrationNeeded(Windows.Foundation.TypedEventHandler`2<Windows.Media.Protection.PlayReady.NDClient,System.Object>)
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def add_re_registration_needed(self, handler: windows_foundation.TypedEventHandler[NDClient, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.Protection.PlayReady.NDClient::remove_ReRegistrationNeeded(Windows.Foundation.EventRegistrationToken)
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def remove_re_registration_needed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.Protection.PlayReady.NDClient::add_RegistrationCompleted(Windows.Foundation.TypedEventHandler`2<Windows.Media.Protection.PlayReady.NDClient,Windows.Media.Protection.PlayReady.INDRegistrationCompletedEventArgs>)
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def add_registration_completed(self, handler: windows_foundation.TypedEventHandler[NDClient, INDRegistrationCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.Protection.PlayReady.NDClient::remove_RegistrationCompleted(Windows.Foundation.EventRegistrationToken)
    # @deprecated("INDClient is deprecated and might not work on all platforms. For more info, see MSDN.")
    def remove_registration_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class NDCustomData(winrt.system.Object, INDCustomData):
    def __new__(cls: typing.Type[Self], custom_data_type_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], custom_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer]) -> Self: ...
    # System.Byte[] Windows.Media.Protection.PlayReady.NDCustomData::get_CustomData()
    @_property
    def custom_data(self) -> winrt.system.UInt8: ...
    # System.Byte[] Windows.Media.Protection.PlayReady.NDCustomData::get_CustomDataTypeID()
    @_property
    def custom_data_type_id(self) -> winrt.system.UInt8: ...

@typing.final
class NDDownloadEngineNotifier(winrt.system.Object, INDDownloadEngineNotifier):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.Media.Protection.PlayReady.NDDownloadEngineNotifier::OnContentIDReceived(Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptor)
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_content_id_received(self, license_fetch_descriptor: INDLicenseFetchDescriptor, /) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.NDDownloadEngineNotifier::OnDataReceived(System.Byte[],System.UInt32)
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_data_received(self, data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], bytes_received: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.NDDownloadEngineNotifier::OnEndOfStream()
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_end_of_stream(self) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.NDDownloadEngineNotifier::OnNetworkError()
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_network_error(self) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.NDDownloadEngineNotifier::OnPlayReadyObjectReceived(System.Byte[])
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_play_ready_object_received(self, data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.NDDownloadEngineNotifier::OnStreamOpened()
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_stream_opened(self) -> None: ...

@typing.final
class NDLicenseFetchDescriptor(winrt.system.Object, INDLicenseFetchDescriptor):
    def __new__(cls: typing.Type[Self], content_id_type: NDContentIDType, content_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], license_fetch_challenge_custom_data: INDCustomData) -> Self: ...
    # Windows.Media.Protection.PlayReady.INDCustomData Windows.Media.Protection.PlayReady.NDLicenseFetchDescriptor::get_LicenseFetchChallengeCustomData()
    @_property
    def license_fetch_challenge_custom_data(self) -> INDCustomData: ...
    # System.Void Windows.Media.Protection.PlayReady.NDLicenseFetchDescriptor::put_LicenseFetchChallengeCustomData(Windows.Media.Protection.PlayReady.INDCustomData)
    @license_fetch_challenge_custom_data.setter
    def license_fetch_challenge_custom_data(self, value: INDCustomData) -> None: ...
    # System.Byte[] Windows.Media.Protection.PlayReady.NDLicenseFetchDescriptor::get_ContentID()
    @_property
    def content_id(self) -> winrt.system.UInt8: ...
    # Windows.Media.Protection.PlayReady.NDContentIDType Windows.Media.Protection.PlayReady.NDLicenseFetchDescriptor::get_ContentIDType()
    @_property
    def content_id_type(self) -> NDContentIDType: ...

@typing.final
class NDStorageFileHelper(winrt.system.Object, INDStorageFileHelper):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Windows.Media.Protection.PlayReady.NDStorageFileHelper::GetFileURLs(Windows.Storage.IStorageFile)
    # @deprecated("INDStorageFileHelper is deprecated and might not work on all platforms. For more info, see MSDN.")
    def get_file_u_r_ls(self, file: windows_storage.IStorageFile, /) -> typing.MutableSequence[str]: ...

@typing.final
class NDStreamParserNotifier(winrt.system.Object, INDStreamParserNotifier):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.Media.Protection.PlayReady.NDStreamParserNotifier::OnBeginSetupDecryptor(Windows.Media.Core.IMediaStreamDescriptor,System.Guid,System.Byte[])
    # @deprecated("INDStreamParserNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_begin_setup_decryptor(self, descriptor: windows_media_core.IMediaStreamDescriptor, key_id: _uuid.UUID, pro_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.NDStreamParserNotifier::OnContentIDReceived(Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptor)
    # @deprecated("INDStreamParserNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_content_id_received(self, license_fetch_descriptor: INDLicenseFetchDescriptor, /) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.NDStreamParserNotifier::OnMediaStreamDescriptorCreated(Windows.Foundation.Collections.IVector`1<Windows.Media.Core.AudioStreamDescriptor>,Windows.Foundation.Collections.IVector`1<Windows.Media.Core.VideoStreamDescriptor>)
    # @deprecated("INDStreamParserNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_media_stream_descriptor_created(self, audio_stream_descriptors: typing.MutableSequence[windows_media_core.AudioStreamDescriptor], video_stream_descriptors: typing.MutableSequence[windows_media_core.VideoStreamDescriptor], /) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.NDStreamParserNotifier::OnSampleParsed(System.UInt32,Windows.Media.Protection.PlayReady.NDMediaStreamType,Windows.Media.Core.MediaStreamSample,System.Int64,Windows.Media.Protection.PlayReady.NDClosedCaptionFormat,System.Byte[])
    # @deprecated("INDStreamParserNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    def on_sample_parsed(self, stream_id: winrt.system.UInt32, stream_type: NDMediaStreamType, stream_sample: windows_media_core.MediaStreamSample, pts: winrt.system.Int64, cc_format: NDClosedCaptionFormat, cc_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...

@typing.final
class NDTCPMessenger(winrt.system.Object, INDMessenger):
    def __new__(cls: typing.Type[Self], remote_host_name: str, remote_host_port: winrt.system.UInt32) -> Self: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Media.Protection.PlayReady.INDSendResult> Windows.Media.Protection.PlayReady.NDTCPMessenger::SendLicenseFetchRequestAsync(System.Byte[],System.Byte[])
    # @deprecated("INDMessenger is deprecated and might not work on all platforms. For more info, see MSDN.")
    def send_license_fetch_request_async(self, session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], challenge_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncOperation[INDSendResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Media.Protection.PlayReady.INDSendResult> Windows.Media.Protection.PlayReady.NDTCPMessenger::SendProximityDetectionResponseAsync(Windows.Media.Protection.PlayReady.NDProximityDetectionType,System.Byte[],System.Byte[],System.Byte[])
    # @deprecated("INDMessenger is deprecated and might not work on all platforms. For more info, see MSDN.")
    def send_proximity_detection_response_async(self, pd_type: NDProximityDetectionType, transmitter_channel_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], response_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncOperation[INDSendResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Media.Protection.PlayReady.INDSendResult> Windows.Media.Protection.PlayReady.NDTCPMessenger::SendProximityDetectionStartAsync(Windows.Media.Protection.PlayReady.NDProximityDetectionType,System.Byte[],System.Byte[],System.Byte[])
    # @deprecated("INDMessenger is deprecated and might not work on all platforms. For more info, see MSDN.")
    def send_proximity_detection_start_async(self, pd_type: NDProximityDetectionType, transmitter_channel_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], challenge_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncOperation[INDSendResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Media.Protection.PlayReady.INDSendResult> Windows.Media.Protection.PlayReady.NDTCPMessenger::SendRegistrationRequestAsync(System.Byte[],System.Byte[])
    # @deprecated("INDMessenger is deprecated and might not work on all platforms. For more info, see MSDN.")
    def send_registration_request_async(self, session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], challenge_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncOperation[INDSendResult]: ...

@typing.final
class PlayReadyContentHeader(winrt.system.Object):
    @typing.overload
    def __new__(cls: typing.Type[Self], dw_flags: winrt.system.UInt32, content_key_ids: typing.Union[winrt.system.Array[_uuid.UUID], winrt.system.ReadableBuffer], content_key_id_strings: typing.Union[winrt.system.Array[str], winrt.system.ReadableBuffer], content_encryption_algorithm: PlayReadyEncryptionAlgorithm, license_acquisition_url: windows_foundation.Uri, license_acquisition_user_interface_url: windows_foundation.Uri, custom_attributes: str, domain_service_id: _uuid.UUID) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], header_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], license_acquisition_url: windows_foundation.Uri, license_acquisition_user_interface_url: windows_foundation.Uri, custom_attributes: str, domain_service_id: _uuid.UUID) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], content_key_id: _uuid.UUID, content_key_id_string: str, content_encryption_algorithm: PlayReadyEncryptionAlgorithm, license_acquisition_url: windows_foundation.Uri, license_acquisition_user_interface_url: windows_foundation.Uri, custom_attributes: str, domain_service_id: _uuid.UUID) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], header_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer]) -> Self: ...
    # System.Byte[] Windows.Media.Protection.PlayReady.PlayReadyContentHeader::GetSerializedHeader()
    def get_serialized_header(self) -> winrt.system.Array[winrt.system.UInt8]: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadyContentHeader::get_CustomAttributes()
    @_property
    def custom_attributes(self) -> str: ...
    # Windows.Media.Protection.PlayReady.PlayReadyDecryptorSetup Windows.Media.Protection.PlayReady.PlayReadyContentHeader::get_DecryptorSetup()
    @_property
    def decryptor_setup(self) -> PlayReadyDecryptorSetup: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyContentHeader::get_DomainServiceId()
    @_property
    def domain_service_id(self) -> _uuid.UUID: ...
    # Windows.Media.Protection.PlayReady.PlayReadyEncryptionAlgorithm Windows.Media.Protection.PlayReady.PlayReadyContentHeader::get_EncryptionType()
    @_property
    def encryption_type(self) -> PlayReadyEncryptionAlgorithm: ...
    # Windows.Media.Protection.PlayReady.PlayReadyContentHeader Windows.Media.Protection.PlayReady.PlayReadyContentHeader::get_HeaderWithEmbeddedUpdates()
    @_property
    def header_with_embedded_updates(self) -> PlayReadyContentHeader: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyContentHeader::get_KeyId()
    @_property
    def key_id(self) -> _uuid.UUID: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadyContentHeader::get_KeyIdString()
    @_property
    def key_id_string(self) -> str: ...
    # Windows.Foundation.Uri Windows.Media.Protection.PlayReady.PlayReadyContentHeader::get_LicenseAcquisitionUrl()
    @_property
    def license_acquisition_url(self) -> windows_foundation.Uri: ...
    # Windows.Foundation.Uri Windows.Media.Protection.PlayReady.PlayReadyContentHeader::get_LicenseAcquisitionUserInterfaceUrl()
    @_property
    def license_acquisition_user_interface_url(self) -> windows_foundation.Uri: ...
    # System.String[] Windows.Media.Protection.PlayReady.PlayReadyContentHeader::get_KeyIdStrings()
    @_property
    def key_id_strings(self) -> str: ...
    # System.Guid[] Windows.Media.Protection.PlayReady.PlayReadyContentHeader::get_KeyIds()
    @_property
    def key_ids(self) -> _uuid.UUID: ...

@typing.final
class PlayReadyContentResolver_Static(type):
    # Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest Windows.Media.Protection.PlayReady.PlayReadyContentResolver::ServiceRequest(Windows.Media.Protection.PlayReady.PlayReadyContentHeader)
    def service_request(cls, content_header: PlayReadyContentHeader, /) -> IPlayReadyServiceRequest: ...

@typing.final
class PlayReadyContentResolver(winrt.system.Object, metaclass=PlayReadyContentResolver_Static):
    pass

@typing.final
class PlayReadyDomain(winrt.system.Object, IPlayReadyDomain):
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyDomain::get_AccountId()
    @_property
    def account_id(self) -> _uuid.UUID: ...
    # Windows.Foundation.Uri Windows.Media.Protection.PlayReady.PlayReadyDomain::get_DomainJoinUrl()
    @_property
    def domain_join_url(self) -> windows_foundation.Uri: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadyDomain::get_FriendlyName()
    @_property
    def friendly_name(self) -> str: ...
    # System.UInt32 Windows.Media.Protection.PlayReady.PlayReadyDomain::get_Revision()
    @_property
    def revision(self) -> winrt.system.UInt32: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyDomain::get_ServiceId()
    @_property
    def service_id(self) -> _uuid.UUID: ...

@typing.final
class PlayReadyDomainIterable(winrt.system.Object):
    def __iter__(self) -> windows_foundation_collections.IIterator[IPlayReadyDomain]: ...
    def __new__(cls: typing.Type[Self], domain_account_id: _uuid.UUID) -> Self: ...
    # Windows.Foundation.Collections.IIterator`1<Windows.Media.Protection.PlayReady.IPlayReadyDomain> Windows.Media.Protection.PlayReady.PlayReadyDomainIterable::First()
    def first(self) -> windows_foundation_collections.IIterator[IPlayReadyDomain]: ...

@typing.final
class PlayReadyDomainIterator(winrt.system.Object, windows_foundation_collections.IIterator[IPlayReadyDomain]):
    def __iter__(self: Self) -> Self: ...
    def __next__(self) -> IPlayReadyDomain: ...
    # System.UInt32 Windows.Media.Protection.PlayReady.PlayReadyDomainIterator::GetMany(Windows.Media.Protection.PlayReady.IPlayReadyDomain[])
    def get_many(self, items: typing.Union[winrt.system.Array[IPlayReadyDomain], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    # System.Boolean Windows.Media.Protection.PlayReady.PlayReadyDomainIterator::MoveNext()
    def move_next(self) -> bool: ...
    # Windows.Media.Protection.PlayReady.IPlayReadyDomain Windows.Media.Protection.PlayReady.PlayReadyDomainIterator::get_Current()
    @_property
    def current(self) -> IPlayReadyDomain: ...
    # System.Boolean Windows.Media.Protection.PlayReady.PlayReadyDomainIterator::get_HasCurrent()
    @_property
    def has_current(self) -> bool: ...

@typing.final
class PlayReadyDomainJoinServiceRequest(winrt.system.Object, IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.IAsyncAction Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest::BeginServiceRequest()
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Media.Protection.PlayReady.PlayReadySoapMessage Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest::GenerateManualEnablingChallenge()
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    # Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest::NextServiceRequest()
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    # Windows.Foundation.HResult Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest::ProcessManualEnablingResponse(System.Byte[])
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest::get_ProtectionSystem()
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest::get_Type()
    @_property
    def type(self) -> _uuid.UUID: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest::get_DomainServiceId()
    @_property
    def domain_service_id(self) -> _uuid.UUID: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest::put_DomainServiceId(System.Guid)
    @domain_service_id.setter
    def domain_service_id(self, value: _uuid.UUID) -> None: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest::get_DomainFriendlyName()
    @_property
    def domain_friendly_name(self) -> str: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest::put_DomainFriendlyName(System.String)
    @domain_friendly_name.setter
    def domain_friendly_name(self, value: str) -> None: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest::get_DomainAccountId()
    @_property
    def domain_account_id(self) -> _uuid.UUID: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest::put_DomainAccountId(System.Guid)
    @domain_account_id.setter
    def domain_account_id(self, value: _uuid.UUID) -> None: ...
    # Windows.Foundation.Uri Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest::get_Uri()
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest::put_Uri(Windows.Foundation.Uri)
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest::get_ChallengeCustomData()
    @_property
    def challenge_custom_data(self) -> str: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest::put_ChallengeCustomData(System.String)
    @challenge_custom_data.setter
    def challenge_custom_data(self, value: str) -> None: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadyDomainJoinServiceRequest::get_ResponseCustomData()
    @_property
    def response_custom_data(self) -> str: ...

@typing.final
class PlayReadyDomainLeaveServiceRequest(winrt.system.Object, IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.IAsyncAction Windows.Media.Protection.PlayReady.PlayReadyDomainLeaveServiceRequest::BeginServiceRequest()
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Media.Protection.PlayReady.PlayReadySoapMessage Windows.Media.Protection.PlayReady.PlayReadyDomainLeaveServiceRequest::GenerateManualEnablingChallenge()
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    # Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest Windows.Media.Protection.PlayReady.PlayReadyDomainLeaveServiceRequest::NextServiceRequest()
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    # Windows.Foundation.HResult Windows.Media.Protection.PlayReady.PlayReadyDomainLeaveServiceRequest::ProcessManualEnablingResponse(System.Byte[])
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyDomainLeaveServiceRequest::get_ProtectionSystem()
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyDomainLeaveServiceRequest::get_Type()
    @_property
    def type(self) -> _uuid.UUID: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyDomainLeaveServiceRequest::get_DomainServiceId()
    @_property
    def domain_service_id(self) -> _uuid.UUID: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyDomainLeaveServiceRequest::put_DomainServiceId(System.Guid)
    @domain_service_id.setter
    def domain_service_id(self, value: _uuid.UUID) -> None: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyDomainLeaveServiceRequest::get_DomainAccountId()
    @_property
    def domain_account_id(self) -> _uuid.UUID: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyDomainLeaveServiceRequest::put_DomainAccountId(System.Guid)
    @domain_account_id.setter
    def domain_account_id(self, value: _uuid.UUID) -> None: ...
    # Windows.Foundation.Uri Windows.Media.Protection.PlayReady.PlayReadyDomainLeaveServiceRequest::get_Uri()
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyDomainLeaveServiceRequest::put_Uri(Windows.Foundation.Uri)
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadyDomainLeaveServiceRequest::get_ChallengeCustomData()
    @_property
    def challenge_custom_data(self) -> str: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyDomainLeaveServiceRequest::put_ChallengeCustomData(System.String)
    @challenge_custom_data.setter
    def challenge_custom_data(self, value: str) -> None: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadyDomainLeaveServiceRequest::get_ResponseCustomData()
    @_property
    def response_custom_data(self) -> str: ...

@typing.final
class PlayReadyITADataGenerator(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Byte[] Windows.Media.Protection.PlayReady.PlayReadyITADataGenerator::GenerateData(System.Guid,System.UInt32,Windows.Foundation.Collections.IPropertySet,Windows.Media.Protection.PlayReady.PlayReadyITADataFormat)
    def generate_data(self, guid_c_p_system_id: _uuid.UUID, count_of_streams: winrt.system.UInt32, configuration: windows_foundation_collections.IPropertySet, format: PlayReadyITADataFormat, /) -> winrt.system.Array[winrt.system.UInt8]: ...

@typing.final
class PlayReadyIndividualizationServiceRequest(winrt.system.Object, IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.IAsyncAction Windows.Media.Protection.PlayReady.PlayReadyIndividualizationServiceRequest::BeginServiceRequest()
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Media.Protection.PlayReady.PlayReadySoapMessage Windows.Media.Protection.PlayReady.PlayReadyIndividualizationServiceRequest::GenerateManualEnablingChallenge()
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    # Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest Windows.Media.Protection.PlayReady.PlayReadyIndividualizationServiceRequest::NextServiceRequest()
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    # Windows.Foundation.HResult Windows.Media.Protection.PlayReady.PlayReadyIndividualizationServiceRequest::ProcessManualEnablingResponse(System.Byte[])
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyIndividualizationServiceRequest::get_ProtectionSystem()
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyIndividualizationServiceRequest::get_Type()
    @_property
    def type(self) -> _uuid.UUID: ...
    # Windows.Foundation.Uri Windows.Media.Protection.PlayReady.PlayReadyIndividualizationServiceRequest::get_Uri()
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyIndividualizationServiceRequest::put_Uri(Windows.Foundation.Uri)
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadyIndividualizationServiceRequest::get_ChallengeCustomData()
    @_property
    def challenge_custom_data(self) -> str: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyIndividualizationServiceRequest::put_ChallengeCustomData(System.String)
    @challenge_custom_data.setter
    def challenge_custom_data(self, value: str) -> None: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadyIndividualizationServiceRequest::get_ResponseCustomData()
    @_property
    def response_custom_data(self) -> str: ...

@typing.final
class PlayReadyLicense(winrt.system.Object, IPlayReadyLicense):
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyLicense::GetKIDAtChainDepth(System.UInt32)
    def get_k_i_d_at_chain_depth(self, chain_depth: winrt.system.UInt32, /) -> _uuid.UUID: ...
    # System.UInt32 Windows.Media.Protection.PlayReady.PlayReadyLicense::get_ChainDepth()
    @_property
    def chain_depth(self) -> winrt.system.UInt32: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyLicense::get_DomainAccountID()
    @_property
    def domain_account_id(self) -> _uuid.UUID: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.DateTime> Windows.Media.Protection.PlayReady.PlayReadyLicense::get_ExpirationDate()
    @_property
    def expiration_date(self) -> typing.Optional[datetime.datetime]: ...
    # System.UInt32 Windows.Media.Protection.PlayReady.PlayReadyLicense::get_ExpireAfterFirstPlay()
    @_property
    def expire_after_first_play(self) -> winrt.system.UInt32: ...
    # System.Boolean Windows.Media.Protection.PlayReady.PlayReadyLicense::get_FullyEvaluated()
    @_property
    def fully_evaluated(self) -> bool: ...
    # System.Boolean Windows.Media.Protection.PlayReady.PlayReadyLicense::get_UsableForPlay()
    @_property
    def usable_for_play(self) -> bool: ...
    # System.Boolean Windows.Media.Protection.PlayReady.PlayReadyLicense::get_ExpiresInRealTime()
    @_property
    def expires_in_real_time(self) -> bool: ...
    # System.Boolean Windows.Media.Protection.PlayReady.PlayReadyLicense::get_InMemoryOnly()
    @_property
    def in_memory_only(self) -> bool: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyLicense::get_SecureStopId()
    @_property
    def secure_stop_id(self) -> _uuid.UUID: ...
    # System.UInt32 Windows.Media.Protection.PlayReady.PlayReadyLicense::get_SecurityLevel()
    @_property
    def security_level(self) -> winrt.system.UInt32: ...

@typing.final
class PlayReadyLicenseAcquisitionServiceRequest(winrt.system.Object, IPlayReadyLicenseAcquisitionServiceRequest, IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.IAsyncAction Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest::BeginServiceRequest()
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Media.Protection.PlayReady.PlayReadyLicenseIterable Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest::CreateLicenseIterable(Windows.Media.Protection.PlayReady.PlayReadyContentHeader,System.Boolean)
    def create_license_iterable(self, content_header: PlayReadyContentHeader, fully_evaluated: bool, /) -> PlayReadyLicenseIterable: ...
    # Windows.Media.Protection.PlayReady.PlayReadySoapMessage Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest::GenerateManualEnablingChallenge()
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    # Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest::NextServiceRequest()
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    # Windows.Foundation.HResult Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest::ProcessManualEnablingResponse(System.Byte[])
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest::get_ProtectionSystem()
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest::get_Type()
    @_property
    def type(self) -> _uuid.UUID: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest::get_DomainServiceId()
    @_property
    def domain_service_id(self) -> _uuid.UUID: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest::put_DomainServiceId(System.Guid)
    @domain_service_id.setter
    def domain_service_id(self, value: _uuid.UUID) -> None: ...
    # Windows.Media.Protection.PlayReady.PlayReadyContentHeader Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest::get_ContentHeader()
    @_property
    def content_header(self) -> PlayReadyContentHeader: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest::put_ContentHeader(Windows.Media.Protection.PlayReady.PlayReadyContentHeader)
    @content_header.setter
    def content_header(self, value: PlayReadyContentHeader) -> None: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest::get_SessionId()
    @_property
    def session_id(self) -> _uuid.UUID: ...
    # Windows.Foundation.Uri Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest::get_Uri()
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest::put_Uri(Windows.Foundation.Uri)
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest::get_ChallengeCustomData()
    @_property
    def challenge_custom_data(self) -> str: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest::put_ChallengeCustomData(System.String)
    @challenge_custom_data.setter
    def challenge_custom_data(self, value: str) -> None: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadyLicenseAcquisitionServiceRequest::get_ResponseCustomData()
    @_property
    def response_custom_data(self) -> str: ...

@typing.final
class PlayReadyLicenseIterable(winrt.system.Object):
    def __iter__(self) -> windows_foundation_collections.IIterator[IPlayReadyLicense]: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], content_header: PlayReadyContentHeader, fully_evaluated: bool) -> Self: ...
    # Windows.Foundation.Collections.IIterator`1<Windows.Media.Protection.PlayReady.IPlayReadyLicense> Windows.Media.Protection.PlayReady.PlayReadyLicenseIterable::First()
    def first(self) -> windows_foundation_collections.IIterator[IPlayReadyLicense]: ...

@typing.final
class PlayReadyLicenseIterator(winrt.system.Object, windows_foundation_collections.IIterator[IPlayReadyLicense]):
    def __iter__(self: Self) -> Self: ...
    def __next__(self) -> IPlayReadyLicense: ...
    # System.UInt32 Windows.Media.Protection.PlayReady.PlayReadyLicenseIterator::GetMany(Windows.Media.Protection.PlayReady.IPlayReadyLicense[])
    def get_many(self, items: typing.Union[winrt.system.Array[IPlayReadyLicense], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    # System.Boolean Windows.Media.Protection.PlayReady.PlayReadyLicenseIterator::MoveNext()
    def move_next(self) -> bool: ...
    # Windows.Media.Protection.PlayReady.IPlayReadyLicense Windows.Media.Protection.PlayReady.PlayReadyLicenseIterator::get_Current()
    @_property
    def current(self) -> IPlayReadyLicense: ...
    # System.Boolean Windows.Media.Protection.PlayReady.PlayReadyLicenseIterator::get_HasCurrent()
    @_property
    def has_current(self) -> bool: ...

@typing.final
class PlayReadyLicenseManagement_Static(type):
    # Windows.Foundation.IAsyncAction Windows.Media.Protection.PlayReady.PlayReadyLicenseManagement::DeleteLicenses(Windows.Media.Protection.PlayReady.PlayReadyContentHeader)
    def delete_licenses(cls, content_header: PlayReadyContentHeader, /) -> windows_foundation.IAsyncAction: ...

@typing.final
class PlayReadyLicenseManagement(winrt.system.Object, metaclass=PlayReadyLicenseManagement_Static):
    pass

@typing.final
class PlayReadyLicenseSession(winrt.system.Object, IPlayReadyLicenseSession2, IPlayReadyLicenseSession):
    def __new__(cls: typing.Type[Self], configuration: windows_foundation_collections.IPropertySet) -> Self: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyLicenseSession::ConfigureMediaProtectionManager(Windows.Media.Protection.MediaProtectionManager)
    def configure_media_protection_manager(self, mpm: windows_media_protection.MediaProtectionManager, /) -> None: ...
    # Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest Windows.Media.Protection.PlayReady.PlayReadyLicenseSession::CreateLAServiceRequest()
    def create_l_a_service_request(self) -> IPlayReadyLicenseAcquisitionServiceRequest: ...
    # Windows.Media.Protection.PlayReady.PlayReadyLicenseIterable Windows.Media.Protection.PlayReady.PlayReadyLicenseSession::CreateLicenseIterable(Windows.Media.Protection.PlayReady.PlayReadyContentHeader,System.Boolean)
    def create_license_iterable(self, content_header: PlayReadyContentHeader, fully_evaluated: bool, /) -> PlayReadyLicenseIterable: ...

@typing.final
class PlayReadyMeteringReportServiceRequest(winrt.system.Object, IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.IAsyncAction Windows.Media.Protection.PlayReady.PlayReadyMeteringReportServiceRequest::BeginServiceRequest()
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Media.Protection.PlayReady.PlayReadySoapMessage Windows.Media.Protection.PlayReady.PlayReadyMeteringReportServiceRequest::GenerateManualEnablingChallenge()
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    # Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest Windows.Media.Protection.PlayReady.PlayReadyMeteringReportServiceRequest::NextServiceRequest()
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    # Windows.Foundation.HResult Windows.Media.Protection.PlayReady.PlayReadyMeteringReportServiceRequest::ProcessManualEnablingResponse(System.Byte[])
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyMeteringReportServiceRequest::get_ProtectionSystem()
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyMeteringReportServiceRequest::get_Type()
    @_property
    def type(self) -> _uuid.UUID: ...
    # System.Byte[] Windows.Media.Protection.PlayReady.PlayReadyMeteringReportServiceRequest::get_MeteringCertificate()
    @_property
    def metering_certificate(self) -> winrt.system.UInt8: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyMeteringReportServiceRequest::put_MeteringCertificate(System.Byte[])
    @metering_certificate.setter
    def metering_certificate(self, value: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer]) -> None: ...
    # Windows.Foundation.Uri Windows.Media.Protection.PlayReady.PlayReadyMeteringReportServiceRequest::get_Uri()
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyMeteringReportServiceRequest::put_Uri(Windows.Foundation.Uri)
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadyMeteringReportServiceRequest::get_ChallengeCustomData()
    @_property
    def challenge_custom_data(self) -> str: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyMeteringReportServiceRequest::put_ChallengeCustomData(System.String)
    @challenge_custom_data.setter
    def challenge_custom_data(self, value: str) -> None: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadyMeteringReportServiceRequest::get_ResponseCustomData()
    @_property
    def response_custom_data(self) -> str: ...

@typing.final
class PlayReadyRevocationServiceRequest(winrt.system.Object, IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.IAsyncAction Windows.Media.Protection.PlayReady.PlayReadyRevocationServiceRequest::BeginServiceRequest()
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Media.Protection.PlayReady.PlayReadySoapMessage Windows.Media.Protection.PlayReady.PlayReadyRevocationServiceRequest::GenerateManualEnablingChallenge()
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    # Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest Windows.Media.Protection.PlayReady.PlayReadyRevocationServiceRequest::NextServiceRequest()
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    # Windows.Foundation.HResult Windows.Media.Protection.PlayReady.PlayReadyRevocationServiceRequest::ProcessManualEnablingResponse(System.Byte[])
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyRevocationServiceRequest::get_ProtectionSystem()
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyRevocationServiceRequest::get_Type()
    @_property
    def type(self) -> _uuid.UUID: ...
    # Windows.Foundation.Uri Windows.Media.Protection.PlayReady.PlayReadyRevocationServiceRequest::get_Uri()
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyRevocationServiceRequest::put_Uri(Windows.Foundation.Uri)
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadyRevocationServiceRequest::get_ChallengeCustomData()
    @_property
    def challenge_custom_data(self) -> str: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyRevocationServiceRequest::put_ChallengeCustomData(System.String)
    @challenge_custom_data.setter
    def challenge_custom_data(self, value: str) -> None: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadyRevocationServiceRequest::get_ResponseCustomData()
    @_property
    def response_custom_data(self) -> str: ...

@typing.final
class PlayReadySecureStopIterable(winrt.system.Object):
    def __iter__(self) -> windows_foundation_collections.IIterator[IPlayReadySecureStopServiceRequest]: ...
    def __new__(cls: typing.Type[Self], publisher_cert_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer]) -> Self: ...
    # Windows.Foundation.Collections.IIterator`1<Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest> Windows.Media.Protection.PlayReady.PlayReadySecureStopIterable::First()
    def first(self) -> windows_foundation_collections.IIterator[IPlayReadySecureStopServiceRequest]: ...

@typing.final
class PlayReadySecureStopIterator(winrt.system.Object, windows_foundation_collections.IIterator[IPlayReadySecureStopServiceRequest]):
    def __iter__(self: Self) -> Self: ...
    def __next__(self) -> IPlayReadySecureStopServiceRequest: ...
    # System.UInt32 Windows.Media.Protection.PlayReady.PlayReadySecureStopIterator::GetMany(Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest[])
    def get_many(self, items: typing.Union[winrt.system.Array[IPlayReadySecureStopServiceRequest], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    # System.Boolean Windows.Media.Protection.PlayReady.PlayReadySecureStopIterator::MoveNext()
    def move_next(self) -> bool: ...
    # Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest Windows.Media.Protection.PlayReady.PlayReadySecureStopIterator::get_Current()
    @_property
    def current(self) -> IPlayReadySecureStopServiceRequest: ...
    # System.Boolean Windows.Media.Protection.PlayReady.PlayReadySecureStopIterator::get_HasCurrent()
    @_property
    def has_current(self) -> bool: ...

@typing.final
class PlayReadySecureStopServiceRequest(winrt.system.Object, IPlayReadySecureStopServiceRequest, IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest):
    @typing.overload
    def __new__(cls: typing.Type[Self], publisher_cert_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer]) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], session_id: _uuid.UUID, publisher_cert_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer]) -> Self: ...
    # Windows.Foundation.IAsyncAction Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest::BeginServiceRequest()
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Media.Protection.PlayReady.PlayReadySoapMessage Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest::GenerateManualEnablingChallenge()
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    # Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest::NextServiceRequest()
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    # Windows.Foundation.HResult Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest::ProcessManualEnablingResponse(System.Byte[])
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest::get_ProtectionSystem()
    @_property
    def protection_system(self) -> _uuid.UUID: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest::get_Type()
    @_property
    def type(self) -> _uuid.UUID: ...
    # System.Byte[] Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest::get_PublisherCertificate()
    @_property
    def publisher_certificate(self) -> winrt.system.UInt8: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest::get_SessionID()
    @_property
    def session_id(self) -> _uuid.UUID: ...
    # Windows.Foundation.DateTime Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest::get_StartTime()
    @_property
    def start_time(self) -> datetime.datetime: ...
    # System.Boolean Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest::get_Stopped()
    @_property
    def stopped(self) -> bool: ...
    # Windows.Foundation.DateTime Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest::get_UpdateTime()
    @_property
    def update_time(self) -> datetime.datetime: ...
    # Windows.Foundation.Uri Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest::get_Uri()
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest::put_Uri(Windows.Foundation.Uri)
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest::get_ChallengeCustomData()
    @_property
    def challenge_custom_data(self) -> str: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest::put_ChallengeCustomData(System.String)
    @challenge_custom_data.setter
    def challenge_custom_data(self, value: str) -> None: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadySecureStopServiceRequest::get_ResponseCustomData()
    @_property
    def response_custom_data(self) -> str: ...

@typing.final
class PlayReadySoapMessage(winrt.system.Object):
    # System.Byte[] Windows.Media.Protection.PlayReady.PlayReadySoapMessage::GetMessageBody()
    def get_message_body(self) -> winrt.system.Array[winrt.system.UInt8]: ...
    # Windows.Foundation.Collections.IPropertySet Windows.Media.Protection.PlayReady.PlayReadySoapMessage::get_MessageHeaders()
    @_property
    def message_headers(self) -> windows_foundation_collections.IPropertySet: ...
    # Windows.Foundation.Uri Windows.Media.Protection.PlayReady.PlayReadySoapMessage::get_Uri()
    @_property
    def uri(self) -> windows_foundation.Uri: ...

@typing.final
class PlayReadyStatics_Static(type):
    # System.Boolean Windows.Media.Protection.PlayReady.PlayReadyStatics::CheckSupportedHardware(Windows.Media.Protection.PlayReady.PlayReadyHardwareDRMFeatures)
    def check_supported_hardware(cls, hwdrm_feature: PlayReadyHardwareDRMFeatures, /) -> bool: ...
    # System.Void Windows.Media.Protection.PlayReady.PlayReadyStatics::ResetHardwareDRMDisabled()
    def reset_hardware_drm_disabled(cls) -> None: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyStatics::get_DomainJoinServiceRequestType()
    @_property
    def domain_join_service_request_type(cls) -> _uuid.UUID: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyStatics::get_DomainLeaveServiceRequestType()
    @_property
    def domain_leave_service_request_type(cls) -> _uuid.UUID: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyStatics::get_IndividualizationServiceRequestType()
    @_property
    def individualization_service_request_type(cls) -> _uuid.UUID: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyStatics::get_LicenseAcquirerServiceRequestType()
    @_property
    def license_acquirer_service_request_type(cls) -> _uuid.UUID: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyStatics::get_MediaProtectionSystemId()
    @_property
    def media_protection_system_id(cls) -> _uuid.UUID: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyStatics::get_MeteringReportServiceRequestType()
    @_property
    def metering_report_service_request_type(cls) -> _uuid.UUID: ...
    # System.UInt32 Windows.Media.Protection.PlayReady.PlayReadyStatics::get_PlayReadySecurityVersion()
    @_property
    def play_ready_security_version(cls) -> winrt.system.UInt32: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyStatics::get_RevocationServiceRequestType()
    @_property
    def revocation_service_request_type(cls) -> _uuid.UUID: ...
    # System.UInt32 Windows.Media.Protection.PlayReady.PlayReadyStatics::get_PlayReadyCertificateSecurityLevel()
    @_property
    def play_ready_certificate_security_level(cls) -> winrt.system.UInt32: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyStatics::get_SecureStopServiceRequestType()
    @_property
    def secure_stop_service_request_type(cls) -> _uuid.UUID: ...
    # System.Guid Windows.Media.Protection.PlayReady.PlayReadyStatics::get_ProtectionSystemId()
    @_property
    def protection_system_id(cls) -> _uuid.UUID: ...
    # System.String Windows.Media.Protection.PlayReady.PlayReadyStatics::get_InputTrustAuthorityToCreate()
    @_property
    def input_trust_authority_to_create(cls) -> str: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.DateTime> Windows.Media.Protection.PlayReady.PlayReadyStatics::get_HardwareDRMDisabledUntilTime()
    @_property
    def hardware_drm_disabled_until_time(cls) -> typing.Optional[datetime.datetime]: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.DateTime> Windows.Media.Protection.PlayReady.PlayReadyStatics::get_HardwareDRMDisabledAtTime()
    @_property
    def hardware_drm_disabled_at_time(cls) -> typing.Optional[datetime.datetime]: ...

@typing.final
class PlayReadyStatics(winrt.system.Object, metaclass=PlayReadyStatics_Static):
    pass

class INDClosedCaptionDataReceivedEventArgs(winrt._winrt.IInspectable):
    # System.Byte[] Windows.Media.Protection.PlayReady.INDClosedCaptionDataReceivedEventArgs::get_ClosedCaptionData()
    @_property
    @abstractmethod
    def closed_caption_data(self) -> winrt.system.UInt8: ...
    # Windows.Media.Protection.PlayReady.NDClosedCaptionFormat Windows.Media.Protection.PlayReady.INDClosedCaptionDataReceivedEventArgs::get_ClosedCaptionDataFormat()
    @_property
    @abstractmethod
    def closed_caption_data_format(self) -> NDClosedCaptionFormat: ...
    # System.Int64 Windows.Media.Protection.PlayReady.INDClosedCaptionDataReceivedEventArgs::get_PresentationTimestamp()
    @_property
    @abstractmethod
    def presentation_timestamp(self) -> winrt.system.Int64: ...

class INDCustomData(winrt._winrt.IInspectable):
    # System.Byte[] Windows.Media.Protection.PlayReady.INDCustomData::get_CustomData()
    @_property
    @abstractmethod
    def custom_data(self) -> winrt.system.UInt8: ...
    # System.Byte[] Windows.Media.Protection.PlayReady.INDCustomData::get_CustomDataTypeID()
    @_property
    @abstractmethod
    def custom_data_type_id(self) -> winrt.system.UInt8: ...

class INDDownloadEngine(winrt._winrt.IInspectable):
    # System.Void Windows.Media.Protection.PlayReady.INDDownloadEngine::Close()
    # @deprecated("INDDownloadEngine is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def close(self) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.INDDownloadEngine::Open(Windows.Foundation.Uri,System.Byte[])
    # @deprecated("INDDownloadEngine is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def open(self, uri: windows_foundation.Uri, session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.INDDownloadEngine::Pause()
    # @deprecated("INDDownloadEngine is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def pause(self) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.INDDownloadEngine::Resume()
    # @deprecated("INDDownloadEngine is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def resume(self) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.INDDownloadEngine::Seek(Windows.Foundation.TimeSpan)
    # @deprecated("INDDownloadEngine is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def seek(self, start_position: datetime.timedelta, /) -> None: ...
    # System.UInt32 Windows.Media.Protection.PlayReady.INDDownloadEngine::get_BufferFullMaxThresholdInSamples()
    @_property
    @abstractmethod
    def buffer_full_max_threshold_in_samples(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Media.Protection.PlayReady.INDDownloadEngine::get_BufferFullMinThresholdInSamples()
    @_property
    @abstractmethod
    def buffer_full_min_threshold_in_samples(self) -> winrt.system.UInt32: ...
    # System.Boolean Windows.Media.Protection.PlayReady.INDDownloadEngine::get_CanSeek()
    @_property
    @abstractmethod
    def can_seek(self) -> bool: ...
    # Windows.Media.Protection.PlayReady.NDDownloadEngineNotifier Windows.Media.Protection.PlayReady.INDDownloadEngine::get_Notifier()
    @_property
    @abstractmethod
    def notifier(self) -> NDDownloadEngineNotifier: ...

class INDDownloadEngineNotifier(winrt._winrt.IInspectable):
    # System.Void Windows.Media.Protection.PlayReady.INDDownloadEngineNotifier::OnContentIDReceived(Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptor)
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def on_content_id_received(self, license_fetch_descriptor: INDLicenseFetchDescriptor, /) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.INDDownloadEngineNotifier::OnDataReceived(System.Byte[],System.UInt32)
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def on_data_received(self, data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], bytes_received: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.INDDownloadEngineNotifier::OnEndOfStream()
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def on_end_of_stream(self) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.INDDownloadEngineNotifier::OnNetworkError()
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def on_network_error(self) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.INDDownloadEngineNotifier::OnPlayReadyObjectReceived(System.Byte[])
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def on_play_ready_object_received(self, data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.INDDownloadEngineNotifier::OnStreamOpened()
    # @deprecated("INDDownloadEngineNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def on_stream_opened(self) -> None: ...

class INDLicenseFetchCompletedEventArgs(winrt._winrt.IInspectable):
    # Windows.Media.Protection.PlayReady.INDCustomData Windows.Media.Protection.PlayReady.INDLicenseFetchCompletedEventArgs::get_ResponseCustomData()
    @_property
    @abstractmethod
    def response_custom_data(self) -> INDCustomData: ...

class INDLicenseFetchDescriptor(winrt._winrt.IInspectable):
    # System.Byte[] Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptor::get_ContentID()
    @_property
    @abstractmethod
    def content_id(self) -> winrt.system.UInt8: ...
    # Windows.Media.Protection.PlayReady.NDContentIDType Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptor::get_ContentIDType()
    @_property
    @abstractmethod
    def content_id_type(self) -> NDContentIDType: ...
    # Windows.Media.Protection.PlayReady.INDCustomData Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptor::get_LicenseFetchChallengeCustomData()
    @_property
    @abstractmethod
    def license_fetch_challenge_custom_data(self) -> INDCustomData: ...
    # System.Void Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptor::put_LicenseFetchChallengeCustomData(Windows.Media.Protection.PlayReady.INDCustomData)
    @license_fetch_challenge_custom_data.setter
    @abstractmethod
    def license_fetch_challenge_custom_data(self, value: INDCustomData) -> None: ...

class INDLicenseFetchResult(winrt._winrt.IInspectable):
    # Windows.Media.Protection.PlayReady.INDCustomData Windows.Media.Protection.PlayReady.INDLicenseFetchResult::get_ResponseCustomData()
    @_property
    @abstractmethod
    def response_custom_data(self) -> INDCustomData: ...

class INDMessenger(winrt._winrt.IInspectable):
    # Windows.Foundation.IAsyncOperation`1<Windows.Media.Protection.PlayReady.INDSendResult> Windows.Media.Protection.PlayReady.INDMessenger::SendLicenseFetchRequestAsync(System.Byte[],System.Byte[])
    # @deprecated("INDMessenger is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def send_license_fetch_request_async(self, session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], challenge_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncOperation[INDSendResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Media.Protection.PlayReady.INDSendResult> Windows.Media.Protection.PlayReady.INDMessenger::SendProximityDetectionResponseAsync(Windows.Media.Protection.PlayReady.NDProximityDetectionType,System.Byte[],System.Byte[],System.Byte[])
    # @deprecated("INDMessenger is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def send_proximity_detection_response_async(self, pd_type: NDProximityDetectionType, transmitter_channel_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], response_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncOperation[INDSendResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Media.Protection.PlayReady.INDSendResult> Windows.Media.Protection.PlayReady.INDMessenger::SendProximityDetectionStartAsync(Windows.Media.Protection.PlayReady.NDProximityDetectionType,System.Byte[],System.Byte[],System.Byte[])
    # @deprecated("INDMessenger is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def send_proximity_detection_start_async(self, pd_type: NDProximityDetectionType, transmitter_channel_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], challenge_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncOperation[INDSendResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Media.Protection.PlayReady.INDSendResult> Windows.Media.Protection.PlayReady.INDMessenger::SendRegistrationRequestAsync(System.Byte[],System.Byte[])
    # @deprecated("INDMessenger is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def send_registration_request_async(self, session_id_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], challenge_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.IAsyncOperation[INDSendResult]: ...

class INDProximityDetectionCompletedEventArgs(winrt._winrt.IInspectable):
    # System.UInt32 Windows.Media.Protection.PlayReady.INDProximityDetectionCompletedEventArgs::get_ProximityDetectionRetryCount()
    @_property
    @abstractmethod
    def proximity_detection_retry_count(self) -> winrt.system.UInt32: ...

class INDRegistrationCompletedEventArgs(winrt._winrt.IInspectable):
    # Windows.Media.Protection.PlayReady.INDCustomData Windows.Media.Protection.PlayReady.INDRegistrationCompletedEventArgs::get_ResponseCustomData()
    @_property
    @abstractmethod
    def response_custom_data(self) -> INDCustomData: ...
    # System.Boolean Windows.Media.Protection.PlayReady.INDRegistrationCompletedEventArgs::get_TransmitterCertificateAccepted()
    @_property
    @abstractmethod
    def transmitter_certificate_accepted(self) -> bool: ...
    # System.Void Windows.Media.Protection.PlayReady.INDRegistrationCompletedEventArgs::put_TransmitterCertificateAccepted(System.Boolean)
    @transmitter_certificate_accepted.setter
    @abstractmethod
    def transmitter_certificate_accepted(self, value: bool) -> None: ...
    # Windows.Media.Protection.PlayReady.INDTransmitterProperties Windows.Media.Protection.PlayReady.INDRegistrationCompletedEventArgs::get_TransmitterProperties()
    @_property
    @abstractmethod
    def transmitter_properties(self) -> INDTransmitterProperties: ...

class INDSendResult(winrt._winrt.IInspectable):
    # System.Byte[] Windows.Media.Protection.PlayReady.INDSendResult::get_Response()
    @_property
    @abstractmethod
    def response(self) -> winrt.system.UInt8: ...

class INDStartResult(winrt._winrt.IInspectable):
    # Windows.Media.Core.MediaStreamSource Windows.Media.Protection.PlayReady.INDStartResult::get_MediaStreamSource()
    @_property
    @abstractmethod
    def media_stream_source(self) -> windows_media_core.MediaStreamSource: ...

class INDStorageFileHelper(winrt._winrt.IInspectable):
    # Windows.Foundation.Collections.IVector`1<System.String> Windows.Media.Protection.PlayReady.INDStorageFileHelper::GetFileURLs(Windows.Storage.IStorageFile)
    # @deprecated("INDStorageFileHelper is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def get_file_u_r_ls(self, file: windows_storage.IStorageFile, /) -> typing.MutableSequence[str]: ...

class INDStreamParser(winrt._winrt.IInspectable):
    # System.Void Windows.Media.Protection.PlayReady.INDStreamParser::BeginOfStream()
    # @deprecated("INDStreamParser is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def begin_of_stream(self) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.INDStreamParser::EndOfStream()
    # @deprecated("INDStreamParser is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def end_of_stream(self) -> None: ...
    # System.UInt32 Windows.Media.Protection.PlayReady.INDStreamParser::GetStreamInformation(Windows.Media.Core.IMediaStreamDescriptor,Windows.Media.Protection.PlayReady.NDMediaStreamType&)
    # @deprecated("INDStreamParser is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def get_stream_information(self, descriptor: windows_media_core.IMediaStreamDescriptor, /) -> typing.Tuple[winrt.system.UInt32, NDMediaStreamType]: ...
    # System.Void Windows.Media.Protection.PlayReady.INDStreamParser::ParseData(System.Byte[])
    # @deprecated("INDStreamParser is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def parse_data(self, data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...
    # Windows.Media.Protection.PlayReady.NDStreamParserNotifier Windows.Media.Protection.PlayReady.INDStreamParser::get_Notifier()
    @_property
    @abstractmethod
    def notifier(self) -> NDStreamParserNotifier: ...

class INDStreamParserNotifier(winrt._winrt.IInspectable):
    # System.Void Windows.Media.Protection.PlayReady.INDStreamParserNotifier::OnBeginSetupDecryptor(Windows.Media.Core.IMediaStreamDescriptor,System.Guid,System.Byte[])
    # @deprecated("INDStreamParserNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def on_begin_setup_decryptor(self, descriptor: windows_media_core.IMediaStreamDescriptor, key_id: _uuid.UUID, pro_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.INDStreamParserNotifier::OnContentIDReceived(Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptor)
    # @deprecated("INDStreamParserNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def on_content_id_received(self, license_fetch_descriptor: INDLicenseFetchDescriptor, /) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.INDStreamParserNotifier::OnMediaStreamDescriptorCreated(Windows.Foundation.Collections.IVector`1<Windows.Media.Core.AudioStreamDescriptor>,Windows.Foundation.Collections.IVector`1<Windows.Media.Core.VideoStreamDescriptor>)
    # @deprecated("INDStreamParserNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def on_media_stream_descriptor_created(self, audio_stream_descriptors: typing.MutableSequence[windows_media_core.AudioStreamDescriptor], video_stream_descriptors: typing.MutableSequence[windows_media_core.VideoStreamDescriptor], /) -> None: ...
    # System.Void Windows.Media.Protection.PlayReady.INDStreamParserNotifier::OnSampleParsed(System.UInt32,Windows.Media.Protection.PlayReady.NDMediaStreamType,Windows.Media.Core.MediaStreamSample,System.Int64,Windows.Media.Protection.PlayReady.NDClosedCaptionFormat,System.Byte[])
    # @deprecated("INDStreamParserNotifier is deprecated and might not work on all platforms. For more info, see MSDN.")
    @abstractmethod
    def on_sample_parsed(self, stream_id: winrt.system.UInt32, stream_type: NDMediaStreamType, stream_sample: windows_media_core.MediaStreamSample, pts: winrt.system.Int64, cc_format: NDClosedCaptionFormat, cc_data_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...

class INDTransmitterProperties(winrt._winrt.IInspectable):
    # Windows.Media.Protection.PlayReady.NDCertificateType Windows.Media.Protection.PlayReady.INDTransmitterProperties::get_CertificateType()
    @_property
    @abstractmethod
    def certificate_type(self) -> NDCertificateType: ...
    # System.Byte[] Windows.Media.Protection.PlayReady.INDTransmitterProperties::get_ClientID()
    @_property
    @abstractmethod
    def client_id(self) -> winrt.system.UInt8: ...
    # Windows.Foundation.DateTime Windows.Media.Protection.PlayReady.INDTransmitterProperties::get_ExpirationDate()
    @_property
    @abstractmethod
    def expiration_date(self) -> datetime.datetime: ...
    # System.Byte[] Windows.Media.Protection.PlayReady.INDTransmitterProperties::get_ModelDigest()
    @_property
    @abstractmethod
    def model_digest(self) -> winrt.system.UInt8: ...
    # System.String Windows.Media.Protection.PlayReady.INDTransmitterProperties::get_ModelManufacturerName()
    @_property
    @abstractmethod
    def model_manufacturer_name(self) -> str: ...
    # System.String Windows.Media.Protection.PlayReady.INDTransmitterProperties::get_ModelName()
    @_property
    @abstractmethod
    def model_name(self) -> str: ...
    # System.String Windows.Media.Protection.PlayReady.INDTransmitterProperties::get_ModelNumber()
    @_property
    @abstractmethod
    def model_number(self) -> str: ...
    # Windows.Media.Protection.PlayReady.NDCertificatePlatformID Windows.Media.Protection.PlayReady.INDTransmitterProperties::get_PlatformIdentifier()
    @_property
    @abstractmethod
    def platform_identifier(self) -> NDCertificatePlatformID: ...
    # System.UInt32 Windows.Media.Protection.PlayReady.INDTransmitterProperties::get_SecurityLevel()
    @_property
    @abstractmethod
    def security_level(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.Media.Protection.PlayReady.INDTransmitterProperties::get_SecurityVersion()
    @_property
    @abstractmethod
    def security_version(self) -> winrt.system.UInt32: ...
    # Windows.Media.Protection.PlayReady.NDCertificateFeature[] Windows.Media.Protection.PlayReady.INDTransmitterProperties::get_SupportedFeatures()
    @_property
    @abstractmethod
    def supported_features(self) -> NDCertificateFeature: ...

class IPlayReadyDomain(winrt._winrt.IInspectable):
    # System.Guid Windows.Media.Protection.PlayReady.IPlayReadyDomain::get_AccountId()
    @_property
    @abstractmethod
    def account_id(self) -> _uuid.UUID: ...
    # Windows.Foundation.Uri Windows.Media.Protection.PlayReady.IPlayReadyDomain::get_DomainJoinUrl()
    @_property
    @abstractmethod
    def domain_join_url(self) -> windows_foundation.Uri: ...
    # System.String Windows.Media.Protection.PlayReady.IPlayReadyDomain::get_FriendlyName()
    @_property
    @abstractmethod
    def friendly_name(self) -> str: ...
    # System.UInt32 Windows.Media.Protection.PlayReady.IPlayReadyDomain::get_Revision()
    @_property
    @abstractmethod
    def revision(self) -> winrt.system.UInt32: ...
    # System.Guid Windows.Media.Protection.PlayReady.IPlayReadyDomain::get_ServiceId()
    @_property
    @abstractmethod
    def service_id(self) -> _uuid.UUID: ...

class IPlayReadyLicense(winrt._winrt.IInspectable):
    # System.Guid Windows.Media.Protection.PlayReady.IPlayReadyLicense::GetKIDAtChainDepth(System.UInt32)
    @abstractmethod
    def get_k_i_d_at_chain_depth(self, chain_depth: winrt.system.UInt32, /) -> _uuid.UUID: ...
    # System.UInt32 Windows.Media.Protection.PlayReady.IPlayReadyLicense::get_ChainDepth()
    @_property
    @abstractmethod
    def chain_depth(self) -> winrt.system.UInt32: ...
    # System.Guid Windows.Media.Protection.PlayReady.IPlayReadyLicense::get_DomainAccountID()
    @_property
    @abstractmethod
    def domain_account_id(self) -> _uuid.UUID: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.DateTime> Windows.Media.Protection.PlayReady.IPlayReadyLicense::get_ExpirationDate()
    @_property
    @abstractmethod
    def expiration_date(self) -> typing.Optional[datetime.datetime]: ...
    # System.UInt32 Windows.Media.Protection.PlayReady.IPlayReadyLicense::get_ExpireAfterFirstPlay()
    @_property
    @abstractmethod
    def expire_after_first_play(self) -> winrt.system.UInt32: ...
    # System.Boolean Windows.Media.Protection.PlayReady.IPlayReadyLicense::get_FullyEvaluated()
    @_property
    @abstractmethod
    def fully_evaluated(self) -> bool: ...
    # System.Boolean Windows.Media.Protection.PlayReady.IPlayReadyLicense::get_UsableForPlay()
    @_property
    @abstractmethod
    def usable_for_play(self) -> bool: ...

class IPlayReadyLicenseAcquisitionServiceRequest(IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest, winrt._winrt.IInspectable):
    # Windows.Media.Protection.PlayReady.PlayReadyContentHeader Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest::get_ContentHeader()
    @_property
    @abstractmethod
    def content_header(self) -> PlayReadyContentHeader: ...
    # System.Void Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest::put_ContentHeader(Windows.Media.Protection.PlayReady.PlayReadyContentHeader)
    @content_header.setter
    @abstractmethod
    def content_header(self, value: PlayReadyContentHeader) -> None: ...
    # System.Guid Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest::get_DomainServiceId()
    @_property
    @abstractmethod
    def domain_service_id(self) -> _uuid.UUID: ...
    # System.Void Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest::put_DomainServiceId(System.Guid)
    @domain_service_id.setter
    @abstractmethod
    def domain_service_id(self, value: _uuid.UUID) -> None: ...

class IPlayReadyLicenseSession(winrt._winrt.IInspectable):
    # System.Void Windows.Media.Protection.PlayReady.IPlayReadyLicenseSession::ConfigureMediaProtectionManager(Windows.Media.Protection.MediaProtectionManager)
    @abstractmethod
    def configure_media_protection_manager(self, mpm: windows_media_protection.MediaProtectionManager, /) -> None: ...
    # Windows.Media.Protection.PlayReady.IPlayReadyLicenseAcquisitionServiceRequest Windows.Media.Protection.PlayReady.IPlayReadyLicenseSession::CreateLAServiceRequest()
    @abstractmethod
    def create_l_a_service_request(self) -> IPlayReadyLicenseAcquisitionServiceRequest: ...

class IPlayReadyLicenseSession2(IPlayReadyLicenseSession, winrt._winrt.IInspectable):
    # Windows.Media.Protection.PlayReady.PlayReadyLicenseIterable Windows.Media.Protection.PlayReady.IPlayReadyLicenseSession2::CreateLicenseIterable(Windows.Media.Protection.PlayReady.PlayReadyContentHeader,System.Boolean)
    @abstractmethod
    def create_license_iterable(self, content_header: PlayReadyContentHeader, fully_evaluated: bool, /) -> PlayReadyLicenseIterable: ...

class IPlayReadySecureStopServiceRequest(IPlayReadyServiceRequest, windows_media_protection.IMediaProtectionServiceRequest, winrt._winrt.IInspectable):
    # System.Byte[] Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest::get_PublisherCertificate()
    @_property
    @abstractmethod
    def publisher_certificate(self) -> winrt.system.UInt8: ...
    # System.Guid Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest::get_SessionID()
    @_property
    @abstractmethod
    def session_id(self) -> _uuid.UUID: ...
    # Windows.Foundation.DateTime Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest::get_StartTime()
    @_property
    @abstractmethod
    def start_time(self) -> datetime.datetime: ...
    # System.Boolean Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest::get_Stopped()
    @_property
    @abstractmethod
    def stopped(self) -> bool: ...
    # Windows.Foundation.DateTime Windows.Media.Protection.PlayReady.IPlayReadySecureStopServiceRequest::get_UpdateTime()
    @_property
    @abstractmethod
    def update_time(self) -> datetime.datetime: ...

class IPlayReadyServiceRequest(windows_media_protection.IMediaProtectionServiceRequest, winrt._winrt.IInspectable):
    # Windows.Foundation.IAsyncAction Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest::BeginServiceRequest()
    @abstractmethod
    def begin_service_request(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Media.Protection.PlayReady.PlayReadySoapMessage Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest::GenerateManualEnablingChallenge()
    @abstractmethod
    def generate_manual_enabling_challenge(self) -> PlayReadySoapMessage: ...
    # Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest::NextServiceRequest()
    @abstractmethod
    def next_service_request(self) -> IPlayReadyServiceRequest: ...
    # Windows.Foundation.HResult Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest::ProcessManualEnablingResponse(System.Byte[])
    @abstractmethod
    def process_manual_enabling_response(self, response_bytes: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> windows_foundation.HResult: ...
    # System.String Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest::get_ChallengeCustomData()
    @_property
    @abstractmethod
    def challenge_custom_data(self) -> str: ...
    # System.Void Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest::put_ChallengeCustomData(System.String)
    @challenge_custom_data.setter
    @abstractmethod
    def challenge_custom_data(self, value: str) -> None: ...
    # System.String Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest::get_ResponseCustomData()
    @_property
    @abstractmethod
    def response_custom_data(self) -> str: ...
    # Windows.Foundation.Uri Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest::get_Uri()
    @_property
    @abstractmethod
    def uri(self) -> windows_foundation.Uri: ...
    # System.Void Windows.Media.Protection.PlayReady.IPlayReadyServiceRequest::put_Uri(Windows.Foundation.Uri)
    @uri.setter
    @abstractmethod
    def uri(self, value: windows_foundation.Uri) -> None: ...

