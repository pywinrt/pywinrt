# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.storage as windows_storage

from winrt.windows.media.playlists import PlaylistFormat

Self = typing.TypeVar('Self')

@typing.final
class Playlist_Static(type):
    def load_async(cls, file: windows_storage.ImplementsIStorageFile, /) -> windows_foundation.IAsyncOperation[Playlist]: ...

@typing.final
class Playlist(winrt.system.Object, metaclass=Playlist_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    def save_as_async(self, save_location: windows_storage.ImplementsIStorageFolder, desired_name: str, option: windows_storage.NameCollisionOption, /) -> windows_foundation.IAsyncOperation[windows_storage.StorageFile]: ...
    def save_as_with_format_async(self, save_location: windows_storage.ImplementsIStorageFolder, desired_name: str, option: windows_storage.NameCollisionOption, playlist_format: PlaylistFormat, /) -> windows_foundation.IAsyncOperation[windows_storage.StorageFile]: ...
    def save_async(self) -> windows_foundation.IAsyncAction: ...
    @_property
    def files(self) -> typing.MutableSequence[windows_storage.StorageFile]: ...

