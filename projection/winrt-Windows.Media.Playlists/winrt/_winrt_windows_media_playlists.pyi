# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage

from winrt.windows.media.playlists import PlaylistFormat

Self = typing.TypeVar('Self')

@typing.final
class Playlist_Static(type):
    def load_async(cls, file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> winrt.windows.foundation.IAsyncOperation[Playlist]: ...

@typing.final
class Playlist(winrt.system.Object, metaclass=Playlist_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Playlist: ...
    def __new__(cls: typing.Type[Playlist]) -> Playlist:...
    @typing.overload
    def save_as_async(self, save_location: typing.Optional[winrt.windows.storage.IStorageFolder], desired_name: str, option: winrt.windows.storage.NameCollisionOption, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]: ...
    @typing.overload
    def save_as_async(self, save_location: typing.Optional[winrt.windows.storage.IStorageFolder], desired_name: str, option: winrt.windows.storage.NameCollisionOption, playlist_format: PlaylistFormat, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]: ...
    def save_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    @_property
    def files(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.storage.StorageFile]]: ...

