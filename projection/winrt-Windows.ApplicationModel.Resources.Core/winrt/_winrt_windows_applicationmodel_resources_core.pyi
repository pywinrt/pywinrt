# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.storage as windows_storage
import winrt.windows.storage.streams as windows_storage_streams
import winrt.windows.ui as windows_ui

from winrt.windows.applicationmodel.resources.core import ResourceCandidateKind, ResourceQualifierPersistence

Self = typing.TypeVar('Self')

@typing.final
class ResourceLayoutInfo:
    @_property
    def major_version(self) -> winrt.system.UInt32: ...
    @_property
    def minor_version(self) -> winrt.system.UInt32: ...
    @_property
    def resource_subtree_count(self) -> winrt.system.UInt32: ...
    @_property
    def named_resource_count(self) -> winrt.system.UInt32: ...
    @_property
    def checksum(self) -> winrt.system.Int32: ...
    def __new__(cls, major_version: winrt.system.UInt32 = 0, minor_version: winrt.system.UInt32 = 0, resource_subtree_count: winrt.system.UInt32 = 0, named_resource_count: winrt.system.UInt32 = 0, checksum: winrt.system.Int32 = 0) -> ResourceLayoutInfo: ...

@typing.final
class NamedResource(winrt.system.Object):
    # Windows.ApplicationModel.Resources.Core.ResourceCandidate Windows.ApplicationModel.Resources.Core.NamedResource::Resolve()
    def resolve(self) -> ResourceCandidate: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Resources.Core.ResourceCandidate> Windows.ApplicationModel.Resources.Core.NamedResource::ResolveAll()
    def resolve_all(self) -> typing.Sequence[ResourceCandidate]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Resources.Core.ResourceCandidate> Windows.ApplicationModel.Resources.Core.NamedResource::ResolveAll(Windows.ApplicationModel.Resources.Core.ResourceContext)
    def resolve_all_for_context(self, resource_context: ResourceContext, /) -> typing.Sequence[ResourceCandidate]: ...
    # Windows.ApplicationModel.Resources.Core.ResourceCandidate Windows.ApplicationModel.Resources.Core.NamedResource::Resolve(Windows.ApplicationModel.Resources.Core.ResourceContext)
    def resolve_for_context(self, resource_context: ResourceContext, /) -> ResourceCandidate: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Resources.Core.ResourceCandidate> Windows.ApplicationModel.Resources.Core.NamedResource::get_Candidates()
    @_property
    def candidates(self) -> typing.Sequence[ResourceCandidate]: ...
    # Windows.Foundation.Uri Windows.ApplicationModel.Resources.Core.NamedResource::get_Uri()
    @_property
    def uri(self) -> windows_foundation.Uri: ...

@typing.final
class ResourceCandidate(winrt.system.Object):
    # System.String Windows.ApplicationModel.Resources.Core.ResourceCandidate::GetQualifierValue(System.String)
    def get_qualifier_value(self, qualifier_name: str, /) -> str: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Storage.StorageFile> Windows.ApplicationModel.Resources.Core.ResourceCandidate::GetValueAsFileAsync()
    def get_value_as_file_async(self) -> windows_foundation.IAsyncOperation[windows_storage.StorageFile]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStream> Windows.ApplicationModel.Resources.Core.ResourceCandidate::GetValueAsStreamAsync()
    def get_value_as_stream_async(self) -> windows_foundation.IAsyncOperation[windows_storage_streams.IRandomAccessStream]: ...
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceCandidate::get_IsDefault()
    @_property
    def is_default(self) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceCandidate::get_IsMatch()
    @_property
    def is_match(self) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceCandidate::get_IsMatchAsDefault()
    @_property
    def is_match_as_default(self) -> bool: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Resources.Core.ResourceQualifier> Windows.ApplicationModel.Resources.Core.ResourceCandidate::get_Qualifiers()
    @_property
    def qualifiers(self) -> typing.Sequence[ResourceQualifier]: ...
    # System.String Windows.ApplicationModel.Resources.Core.ResourceCandidate::get_ValueAsString()
    @_property
    def value_as_string(self) -> str: ...
    # Windows.ApplicationModel.Resources.Core.ResourceCandidateKind Windows.ApplicationModel.Resources.Core.ResourceCandidate::get_Kind()
    @_property
    def kind(self) -> ResourceCandidateKind: ...

@typing.final
class ResourceCandidateVectorView(winrt.system.Object, winrt._winrt.Sequence[ResourceCandidate]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[ResourceCandidate]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> ResourceCandidate: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[ResourceCandidate]: ...
    # Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Resources.Core.ResourceCandidate> Windows.ApplicationModel.Resources.Core.ResourceCandidateVectorView::First()
    def first(self) -> windows_foundation_collections.IIterator[ResourceCandidate]: ...
    # Windows.ApplicationModel.Resources.Core.ResourceCandidate Windows.ApplicationModel.Resources.Core.ResourceCandidateVectorView::GetAt(System.UInt32)
    def get_at(self, index: winrt.system.UInt32, /) -> ResourceCandidate: ...
    # System.UInt32 Windows.ApplicationModel.Resources.Core.ResourceCandidateVectorView::GetMany(System.UInt32,Windows.ApplicationModel.Resources.Core.ResourceCandidate[])
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[ResourceCandidate], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceCandidateVectorView::IndexOf(Windows.ApplicationModel.Resources.Core.ResourceCandidate,System.UInt32&)
    def index_of(self, value: ResourceCandidate, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    # System.UInt32 Windows.ApplicationModel.Resources.Core.ResourceCandidateVectorView::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class ResourceContext_Static(winrt._winrt.IInspectable_Static):
    # Windows.ApplicationModel.Resources.Core.ResourceContext Windows.ApplicationModel.Resources.Core.ResourceContext::CreateMatchingContext(Windows.Foundation.Collections.IIterable`1<Windows.ApplicationModel.Resources.Core.ResourceQualifier>)
    def create_matching_context(cls, result: typing.Iterable[ResourceQualifier], /) -> ResourceContext: ...
    # Windows.ApplicationModel.Resources.Core.ResourceContext Windows.ApplicationModel.Resources.Core.ResourceContext::GetForCurrentView()
    def get_for_current_view(cls) -> ResourceContext: ...
    # Windows.ApplicationModel.Resources.Core.ResourceContext Windows.ApplicationModel.Resources.Core.ResourceContext::GetForUIContext(Windows.UI.UIContext)
    def get_for_ui_context(cls, context: windows_ui.UIContext, /) -> ResourceContext: ...
    # Windows.ApplicationModel.Resources.Core.ResourceContext Windows.ApplicationModel.Resources.Core.ResourceContext::GetForViewIndependentUse()
    def get_for_view_independent_use(cls) -> ResourceContext: ...
    # System.Void Windows.ApplicationModel.Resources.Core.ResourceContext::ResetGlobalQualifierValues()
    def reset_global_qualifier_values(cls) -> None: ...
    # System.Void Windows.ApplicationModel.Resources.Core.ResourceContext::ResetGlobalQualifierValues(Windows.Foundation.Collections.IIterable`1<System.String>)
    def reset_global_qualifier_values_for_specified_qualifiers(cls, qualifier_names: typing.Iterable[str], /) -> None: ...
    # System.Void Windows.ApplicationModel.Resources.Core.ResourceContext::SetGlobalQualifierValue(System.String,System.String)
    def set_global_qualifier_value(cls, key: str, value: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.Resources.Core.ResourceContext::SetGlobalQualifierValue(System.String,System.String,Windows.ApplicationModel.Resources.Core.ResourceQualifierPersistence)
    def set_global_qualifier_value_with_persistence(cls, key: str, value: str, persistence: ResourceQualifierPersistence, /) -> None: ...

@typing.final
class ResourceContext(winrt.system.Object, metaclass=ResourceContext_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.ApplicationModel.Resources.Core.ResourceContext Windows.ApplicationModel.Resources.Core.ResourceContext::Clone()
    def clone(self) -> ResourceContext: ...
    # System.Void Windows.ApplicationModel.Resources.Core.ResourceContext::OverrideToMatch(Windows.Foundation.Collections.IIterable`1<Windows.ApplicationModel.Resources.Core.ResourceQualifier>)
    def override_to_match(self, result: typing.Iterable[ResourceQualifier], /) -> None: ...
    # System.Void Windows.ApplicationModel.Resources.Core.ResourceContext::Reset()
    def reset(self) -> None: ...
    # System.Void Windows.ApplicationModel.Resources.Core.ResourceContext::Reset(Windows.Foundation.Collections.IIterable`1<System.String>)
    def reset_qualifier_values(self, qualifier_names: typing.Iterable[str], /) -> None: ...
    # Windows.Foundation.Collections.IVectorView`1<System.String> Windows.ApplicationModel.Resources.Core.ResourceContext::get_Languages()
    @_property
    def languages(self) -> typing.Sequence[str]: ...
    # System.Void Windows.ApplicationModel.Resources.Core.ResourceContext::put_Languages(Windows.Foundation.Collections.IVectorView`1<System.String>)
    @languages.setter
    def languages(self, value: typing.Sequence[str]) -> None: ...
    # Windows.Foundation.Collections.IObservableMap`2<System.String,System.String> Windows.ApplicationModel.Resources.Core.ResourceContext::get_QualifierValues()
    @_property
    def qualifier_values(self) -> windows_foundation_collections.IObservableMap[str, str]: ...

@typing.final
class ResourceContextLanguagesVectorView(winrt.system.Object, winrt._winrt.Sequence[str]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> str: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[str]: ...
    # Windows.Foundation.Collections.IIterator`1<System.String> Windows.ApplicationModel.Resources.Core.ResourceContextLanguagesVectorView::First()
    def first(self) -> windows_foundation_collections.IIterator[str]: ...
    # System.String Windows.ApplicationModel.Resources.Core.ResourceContextLanguagesVectorView::GetAt(System.UInt32)
    def get_at(self, index: winrt.system.UInt32, /) -> str: ...
    # System.UInt32 Windows.ApplicationModel.Resources.Core.ResourceContextLanguagesVectorView::GetMany(System.UInt32,System.String[])
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[str], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceContextLanguagesVectorView::IndexOf(System.String,System.UInt32&)
    def index_of(self, value: str, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    # System.UInt32 Windows.ApplicationModel.Resources.Core.ResourceContextLanguagesVectorView::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class ResourceManager_Static(winrt._winrt.IInspectable_Static):
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceManager::IsResourceReference(System.String)
    def is_resource_reference(cls, resource_reference: str, /) -> bool: ...
    # Windows.ApplicationModel.Resources.Core.ResourceManager Windows.ApplicationModel.Resources.Core.ResourceManager::get_Current()
    @_property
    def current(cls) -> ResourceManager: ...

@typing.final
class ResourceManager(winrt.system.Object, metaclass=ResourceManager_Static):
    # Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Resources.Core.NamedResource> Windows.ApplicationModel.Resources.Core.ResourceManager::GetAllNamedResourcesForPackage(System.String,Windows.ApplicationModel.Resources.Core.ResourceLayoutInfo)
    def get_all_named_resources_for_package(self, package_name: str, resource_layout_info: ResourceLayoutInfo, /) -> typing.Sequence[NamedResource]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Resources.Core.ResourceMap> Windows.ApplicationModel.Resources.Core.ResourceManager::GetAllSubtreesForPackage(System.String,Windows.ApplicationModel.Resources.Core.ResourceLayoutInfo)
    def get_all_subtrees_for_package(self, package_name: str, resource_layout_info: ResourceLayoutInfo, /) -> typing.Sequence[ResourceMap]: ...
    # System.Void Windows.ApplicationModel.Resources.Core.ResourceManager::LoadPriFiles(Windows.Foundation.Collections.IIterable`1<Windows.Storage.IStorageFile>)
    def load_pri_files(self, files: typing.Iterable[windows_storage.IStorageFile], /) -> None: ...
    # System.Void Windows.ApplicationModel.Resources.Core.ResourceManager::UnloadPriFiles(Windows.Foundation.Collections.IIterable`1<Windows.Storage.IStorageFile>)
    def unload_pri_files(self, files: typing.Iterable[windows_storage.IStorageFile], /) -> None: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,Windows.ApplicationModel.Resources.Core.ResourceMap> Windows.ApplicationModel.Resources.Core.ResourceManager::get_AllResourceMaps()
    @_property
    def all_resource_maps(self) -> typing.Mapping[str, ResourceMap]: ...
    # Windows.ApplicationModel.Resources.Core.ResourceContext Windows.ApplicationModel.Resources.Core.ResourceManager::get_DefaultContext()
    @_property
    def default_context(self) -> ResourceContext: ...
    # Windows.ApplicationModel.Resources.Core.ResourceMap Windows.ApplicationModel.Resources.Core.ResourceManager::get_MainResourceMap()
    @_property
    def main_resource_map(self) -> ResourceMap: ...

@typing.final
class ResourceMap(winrt.system.Object, winrt._winrt.Mapping[str, NamedResource]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool: ...
    def __getitem__(self, key: str) -> NamedResource: ...
    # Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<System.String,Windows.ApplicationModel.Resources.Core.NamedResource>> Windows.ApplicationModel.Resources.Core.ResourceMap::First()
    def first(self) -> windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[str, NamedResource]]: ...
    # Windows.ApplicationModel.Resources.Core.ResourceMap Windows.ApplicationModel.Resources.Core.ResourceMap::GetSubtree(System.String)
    def get_subtree(self, reference: str, /) -> ResourceMap: ...
    # Windows.ApplicationModel.Resources.Core.ResourceCandidate Windows.ApplicationModel.Resources.Core.ResourceMap::GetValue(System.String)
    def get_value(self, resource: str, /) -> ResourceCandidate: ...
    # Windows.ApplicationModel.Resources.Core.ResourceCandidate Windows.ApplicationModel.Resources.Core.ResourceMap::GetValue(System.String,Windows.ApplicationModel.Resources.Core.ResourceContext)
    def get_value_for_context(self, resource: str, context: ResourceContext, /) -> ResourceCandidate: ...
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceMap::HasKey(System.String)
    def has_key(self, key: str, /) -> bool: ...
    # Windows.ApplicationModel.Resources.Core.NamedResource Windows.ApplicationModel.Resources.Core.ResourceMap::Lookup(System.String)
    def lookup(self, key: str, /) -> NamedResource: ...
    # System.Void Windows.ApplicationModel.Resources.Core.ResourceMap::Split(Windows.Foundation.Collections.IMapView`2<System.String,Windows.ApplicationModel.Resources.Core.NamedResource>&,Windows.Foundation.Collections.IMapView`2<System.String,Windows.ApplicationModel.Resources.Core.NamedResource>&)
    def split(self) -> typing.Tuple[typing.Mapping[str, NamedResource], typing.Mapping[str, NamedResource]]: ...
    # Windows.Foundation.Uri Windows.ApplicationModel.Resources.Core.ResourceMap::get_Uri()
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    # System.UInt32 Windows.ApplicationModel.Resources.Core.ResourceMap::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class ResourceMapIterator(winrt.system.Object, windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[str, NamedResource]]):
    def __iter__(self: Self) -> Self: ...
    def __next__(self) -> windows_foundation_collections.IKeyValuePair[str, NamedResource]: ...
    # System.UInt32 Windows.ApplicationModel.Resources.Core.ResourceMapIterator::GetMany(Windows.Foundation.Collections.IKeyValuePair`2<System.String,Windows.ApplicationModel.Resources.Core.NamedResource>[])
    def get_many(self, items: typing.Union[winrt.system.Array[windows_foundation_collections.IKeyValuePair[str, NamedResource]], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceMapIterator::MoveNext()
    def move_next(self) -> bool: ...
    # Windows.Foundation.Collections.IKeyValuePair`2<System.String,Windows.ApplicationModel.Resources.Core.NamedResource> Windows.ApplicationModel.Resources.Core.ResourceMapIterator::get_Current()
    @_property
    def current(self) -> windows_foundation_collections.IKeyValuePair[str, NamedResource]: ...
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceMapIterator::get_HasCurrent()
    @_property
    def has_current(self) -> bool: ...

@typing.final
class ResourceMapMapView(winrt.system.Object, winrt._winrt.Mapping[str, ResourceMap]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool: ...
    def __getitem__(self, key: str) -> ResourceMap: ...
    # Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<System.String,Windows.ApplicationModel.Resources.Core.ResourceMap>> Windows.ApplicationModel.Resources.Core.ResourceMapMapView::First()
    def first(self) -> windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[str, ResourceMap]]: ...
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceMapMapView::HasKey(System.String)
    def has_key(self, key: str, /) -> bool: ...
    # Windows.ApplicationModel.Resources.Core.ResourceMap Windows.ApplicationModel.Resources.Core.ResourceMapMapView::Lookup(System.String)
    def lookup(self, key: str, /) -> ResourceMap: ...
    # System.Void Windows.ApplicationModel.Resources.Core.ResourceMapMapView::Split(Windows.Foundation.Collections.IMapView`2<System.String,Windows.ApplicationModel.Resources.Core.ResourceMap>&,Windows.Foundation.Collections.IMapView`2<System.String,Windows.ApplicationModel.Resources.Core.ResourceMap>&)
    def split(self) -> typing.Tuple[typing.Mapping[str, ResourceMap], typing.Mapping[str, ResourceMap]]: ...
    # System.UInt32 Windows.ApplicationModel.Resources.Core.ResourceMapMapView::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class ResourceMapMapViewIterator(winrt.system.Object, windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[str, ResourceMap]]):
    def __iter__(self: Self) -> Self: ...
    def __next__(self) -> windows_foundation_collections.IKeyValuePair[str, ResourceMap]: ...
    # System.UInt32 Windows.ApplicationModel.Resources.Core.ResourceMapMapViewIterator::GetMany(Windows.Foundation.Collections.IKeyValuePair`2<System.String,Windows.ApplicationModel.Resources.Core.ResourceMap>[])
    def get_many(self, items: typing.Union[winrt.system.Array[windows_foundation_collections.IKeyValuePair[str, ResourceMap]], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceMapMapViewIterator::MoveNext()
    def move_next(self) -> bool: ...
    # Windows.Foundation.Collections.IKeyValuePair`2<System.String,Windows.ApplicationModel.Resources.Core.ResourceMap> Windows.ApplicationModel.Resources.Core.ResourceMapMapViewIterator::get_Current()
    @_property
    def current(self) -> windows_foundation_collections.IKeyValuePair[str, ResourceMap]: ...
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceMapMapViewIterator::get_HasCurrent()
    @_property
    def has_current(self) -> bool: ...

@typing.final
class ResourceQualifier(winrt.system.Object):
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceQualifier::get_IsDefault()
    @_property
    def is_default(self) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceQualifier::get_IsMatch()
    @_property
    def is_match(self) -> bool: ...
    # System.String Windows.ApplicationModel.Resources.Core.ResourceQualifier::get_QualifierName()
    @_property
    def qualifier_name(self) -> str: ...
    # System.String Windows.ApplicationModel.Resources.Core.ResourceQualifier::get_QualifierValue()
    @_property
    def qualifier_value(self) -> str: ...
    # System.Double Windows.ApplicationModel.Resources.Core.ResourceQualifier::get_Score()
    @_property
    def score(self) -> winrt.system.Double: ...

@typing.final
class ResourceQualifierMapView(winrt.system.Object, winrt._winrt.Mapping[str, str]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool: ...
    def __getitem__(self, key: str) -> str: ...
    # Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<System.String,System.String>> Windows.ApplicationModel.Resources.Core.ResourceQualifierMapView::First()
    def first(self) -> windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[str, str]]: ...
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceQualifierMapView::HasKey(System.String)
    def has_key(self, key: str, /) -> bool: ...
    # System.String Windows.ApplicationModel.Resources.Core.ResourceQualifierMapView::Lookup(System.String)
    def lookup(self, key: str, /) -> str: ...
    # System.Void Windows.ApplicationModel.Resources.Core.ResourceQualifierMapView::Split(Windows.Foundation.Collections.IMapView`2<System.String,System.String>&,Windows.Foundation.Collections.IMapView`2<System.String,System.String>&)
    def split(self) -> typing.Tuple[typing.Mapping[str, str], typing.Mapping[str, str]]: ...
    # System.UInt32 Windows.ApplicationModel.Resources.Core.ResourceQualifierMapView::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class ResourceQualifierObservableMap(winrt.system.Object, windows_foundation_collections.IObservableMap[str, str], winrt._winrt.MutableMapping[str, str]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool: ...
    def __getitem__(self, key: str) -> str: ...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    # System.Void Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap::Clear()
    def clear(self) -> None: ...
    # Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<System.String,System.String>> Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap::First()
    def first(self) -> windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[str, str]]: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.String> Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap::GetView()
    def get_view(self) -> typing.Mapping[str, str]: ...
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap::HasKey(System.String)
    def has_key(self, key: str, /) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap::Insert(System.String,System.String)
    def insert(self, key: str, value: str, /) -> bool: ...
    # System.String Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap::Lookup(System.String)
    def lookup(self, key: str, /) -> str: ...
    # System.Void Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap::Remove(System.String)
    def remove(self, key: str, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap::add_MapChanged(Windows.Foundation.Collections.MapChangedEventHandler`2<System.String,System.String>)
    def add_map_changed(self, vhnd: windows_foundation_collections.MapChangedEventHandler[str, str], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap::remove_MapChanged(Windows.Foundation.EventRegistrationToken)
    def remove_map_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.UInt32 Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class ResourceQualifierVectorView(winrt.system.Object, winrt._winrt.Sequence[ResourceQualifier]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[ResourceQualifier]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> ResourceQualifier: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[ResourceQualifier]: ...
    # Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Resources.Core.ResourceQualifier> Windows.ApplicationModel.Resources.Core.ResourceQualifierVectorView::First()
    def first(self) -> windows_foundation_collections.IIterator[ResourceQualifier]: ...
    # Windows.ApplicationModel.Resources.Core.ResourceQualifier Windows.ApplicationModel.Resources.Core.ResourceQualifierVectorView::GetAt(System.UInt32)
    def get_at(self, index: winrt.system.UInt32, /) -> ResourceQualifier: ...
    # System.UInt32 Windows.ApplicationModel.Resources.Core.ResourceQualifierVectorView::GetMany(System.UInt32,Windows.ApplicationModel.Resources.Core.ResourceQualifier[])
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[ResourceQualifier], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    # System.Boolean Windows.ApplicationModel.Resources.Core.ResourceQualifierVectorView::IndexOf(Windows.ApplicationModel.Resources.Core.ResourceQualifier,System.UInt32&)
    def index_of(self, value: ResourceQualifier, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    # System.UInt32 Windows.ApplicationModel.Resources.Core.ResourceQualifierVectorView::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

