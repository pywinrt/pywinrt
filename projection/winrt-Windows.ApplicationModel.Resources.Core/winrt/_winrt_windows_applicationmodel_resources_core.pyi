# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage
import winrt.windows.storage.streams
import winrt.windows.ui

from winrt.windows.applicationmodel.resources.core import ResourceCandidateKind, ResourceQualifierPersistence

Self = typing.TypeVar('Self')

@typing.final
class ResourceLayoutInfo:
    major_version: winrt.system.UInt32
    minor_version: winrt.system.UInt32
    resource_subtree_count: winrt.system.UInt32
    named_resource_count: winrt.system.UInt32
    checksum: winrt.system.Int32
    def __init__(self, major_version: winrt.system.UInt32, minor_version: winrt.system.UInt32, resource_subtree_count: winrt.system.UInt32, named_resource_count: winrt.system.UInt32, checksum: winrt.system.Int32) -> None: ...

@typing.final
class NamedResource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NamedResource: ...
    @typing.overload
    def resolve(self) -> typing.Optional[ResourceCandidate]: ...
    @typing.overload
    def resolve(self, resource_context: typing.Optional[ResourceContext], /) -> typing.Optional[ResourceCandidate]: ...
    @typing.overload
    def resolve_all(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ResourceCandidate]]: ...
    @typing.overload
    def resolve_all(self, resource_context: typing.Optional[ResourceContext], /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ResourceCandidate]]: ...
    @_property
    def candidates(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ResourceCandidate]]: ...
    @_property
    def uri(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...

@typing.final
class ResourceCandidate(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceCandidate: ...
    def get_qualifier_value(self, qualifier_name: str, /) -> str: ...
    def get_value_as_file_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFile]: ...
    def get_value_as_stream_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IRandomAccessStream]: ...
    @_property
    def is_default(self) -> bool: ...
    @_property
    def is_match(self) -> bool: ...
    @_property
    def is_match_as_default(self) -> bool: ...
    @_property
    def qualifiers(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ResourceQualifier]]: ...
    @_property
    def value_as_string(self) -> str: ...
    @_property
    def kind(self) -> ResourceCandidateKind: ...

@typing.final
class ResourceCandidateVectorView(winrt.system.Object, winrt._winrt.Sequence[ResourceCandidate]):
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[ResourceCandidate]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> ResourceCandidate: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[ResourceCandidate]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceCandidateVectorView: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[ResourceCandidate]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[ResourceCandidate]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[ResourceCandidate], /) -> winrt.system.UInt32: ...
    def index_of(self, value: typing.Optional[ResourceCandidate], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class ResourceContext_Static(type):
    def create_matching_context(cls, result: typing.Iterable[ResourceQualifier], /) -> typing.Optional[ResourceContext]: ...
    def get_for_current_view(cls) -> typing.Optional[ResourceContext]: ...
    def get_for_u_i_context(cls, context: typing.Optional[winrt.windows.ui.UIContext], /) -> typing.Optional[ResourceContext]: ...
    def get_for_view_independent_use(cls) -> typing.Optional[ResourceContext]: ...
    @typing.overload
    def reset_global_qualifier_values(cls) -> None: ...
    @typing.overload
    def reset_global_qualifier_values(cls, qualifier_names: typing.Iterable[str], /) -> None: ...
    @typing.overload
    def set_global_qualifier_value(cls, key: str, value: str, /) -> None: ...
    @typing.overload
    def set_global_qualifier_value(cls, key: str, value: str, persistence: ResourceQualifierPersistence, /) -> None: ...

@typing.final
class ResourceContext(winrt.system.Object, metaclass=ResourceContext_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceContext: ...
    def __new__(cls: typing.Type[ResourceContext]) -> ResourceContext:...
    def clone(self) -> typing.Optional[ResourceContext]: ...
    def override_to_match(self, result: typing.Iterable[ResourceQualifier], /) -> None: ...
    @typing.overload
    def reset(self) -> None: ...
    @typing.overload
    def reset(self, qualifier_names: typing.Iterable[str], /) -> None: ...
    @_property
    def languages(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @languages.setter
    def languages(self, value: typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]) -> None: ...
    @_property
    def qualifier_values(self) -> typing.Optional[winrt.windows.foundation.collections.IObservableMap[str, str]]: ...

@typing.final
class ResourceContextLanguagesVectorView(winrt.system.Object, winrt._winrt.Sequence[str]):
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[str]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> str: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[str]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceContextLanguagesVectorView: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[str]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> str: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[str], /) -> winrt.system.UInt32: ...
    def index_of(self, value: str, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class ResourceManager_Static(type):
    def is_resource_reference(cls, resource_reference: str, /) -> bool: ...
    @_property
    def current(cls) -> typing.Optional[ResourceManager]: ...

@typing.final
class ResourceManager(winrt.system.Object, metaclass=ResourceManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceManager: ...
    def get_all_named_resources_for_package(self, package_name: str, resource_layout_info: ResourceLayoutInfo, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[NamedResource]]: ...
    def get_all_subtrees_for_package(self, package_name: str, resource_layout_info: ResourceLayoutInfo, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ResourceMap]]: ...
    def load_pri_files(self, files: typing.Iterable[winrt.windows.storage.IStorageFile], /) -> None: ...
    def unload_pri_files(self, files: typing.Iterable[winrt.windows.storage.IStorageFile], /) -> None: ...
    @_property
    def all_resource_maps(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, ResourceMap]]: ...
    @_property
    def default_context(self) -> typing.Optional[ResourceContext]: ...
    @_property
    def main_resource_map(self) -> typing.Optional[ResourceMap]: ...

@typing.final
class ResourceMap(winrt.system.Object, winrt._winrt.Mapping[str, NamedResource]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __getitem__(self, key: str) -> NamedResource: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceMap: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, NamedResource]]]: ...
    def get_subtree(self, reference: str, /) -> typing.Optional[ResourceMap]: ...
    @typing.overload
    def get_value(self, resource: str, /) -> typing.Optional[ResourceCandidate]: ...
    @typing.overload
    def get_value(self, resource: str, context: typing.Optional[ResourceContext], /) -> typing.Optional[ResourceCandidate]: ...
    def has_key(self, key: str, /) -> bool: ...
    def lookup(self, key: str, /) -> typing.Optional[NamedResource]: ...
    def split(self) -> typing.Tuple[typing.Optional[winrt.windows.foundation.collections.IMapView[str, NamedResource]], typing.Optional[winrt.windows.foundation.collections.IMapView[str, NamedResource]]]: ...
    @_property
    def uri(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class ResourceMapIterator(winrt.system.Object):
    def __iter__(self: Self) -> Self: ...
    def __next__(self) -> winrt.windows.foundation.collections.IKeyValuePair[str, NamedResource]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceMapIterator: ...
    def get_many(self, items: winrt.system.Array[winrt.windows.foundation.collections.IKeyValuePair[str, NamedResource]], /) -> winrt.system.UInt32: ...
    def move_next(self) -> bool: ...
    @_property
    def current(self) -> typing.Optional[winrt.windows.foundation.collections.IKeyValuePair[str, NamedResource]]: ...
    @_property
    def has_current(self) -> bool: ...

@typing.final
class ResourceMapMapView(winrt.system.Object, winrt._winrt.Mapping[str, ResourceMap]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __getitem__(self, key: str) -> ResourceMap: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceMapMapView: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, ResourceMap]]]: ...
    def has_key(self, key: str, /) -> bool: ...
    def lookup(self, key: str, /) -> typing.Optional[ResourceMap]: ...
    def split(self) -> typing.Tuple[typing.Optional[winrt.windows.foundation.collections.IMapView[str, ResourceMap]], typing.Optional[winrt.windows.foundation.collections.IMapView[str, ResourceMap]]]: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class ResourceMapMapViewIterator(winrt.system.Object):
    def __iter__(self: Self) -> Self: ...
    def __next__(self) -> winrt.windows.foundation.collections.IKeyValuePair[str, ResourceMap]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceMapMapViewIterator: ...
    def get_many(self, items: winrt.system.Array[winrt.windows.foundation.collections.IKeyValuePair[str, ResourceMap]], /) -> winrt.system.UInt32: ...
    def move_next(self) -> bool: ...
    @_property
    def current(self) -> typing.Optional[winrt.windows.foundation.collections.IKeyValuePair[str, ResourceMap]]: ...
    @_property
    def has_current(self) -> bool: ...

@typing.final
class ResourceQualifier(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceQualifier: ...
    @_property
    def is_default(self) -> bool: ...
    @_property
    def is_match(self) -> bool: ...
    @_property
    def qualifier_name(self) -> str: ...
    @_property
    def qualifier_value(self) -> str: ...
    @_property
    def score(self) -> winrt.system.Double: ...

@typing.final
class ResourceQualifierMapView(winrt.system.Object, winrt._winrt.Mapping[str, str]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __getitem__(self, key: str) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceQualifierMapView: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, str]]]: ...
    def has_key(self, key: str, /) -> bool: ...
    def lookup(self, key: str, /) -> str: ...
    def split(self) -> typing.Tuple[typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]], typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]]: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class ResourceQualifierObservableMap(winrt.system.Object, winrt._winrt.MutableMapping[str, str]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __getitem__(self, key: str) -> str: ...
    def __delitem__(self, key: str) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceQualifierObservableMap: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, str]]]: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]: ...
    def has_key(self, key: str, /) -> bool: ...
    def insert(self, key: str, value: str, /) -> bool: ...
    def lookup(self, key: str, /) -> str: ...
    def remove(self, key: str, /) -> None: ...
    def add_map_changed(self, vhnd: winrt.windows.foundation.collections.MapChangedEventHandler[str, str], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_map_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class ResourceQualifierVectorView(winrt.system.Object, winrt._winrt.Sequence[ResourceQualifier]):
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[ResourceQualifier]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> ResourceQualifier: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[ResourceQualifier]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceQualifierVectorView: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[ResourceQualifier]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[ResourceQualifier]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[ResourceQualifier], /) -> winrt.system.UInt32: ...
    def index_of(self, value: typing.Optional[ResourceQualifier], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

