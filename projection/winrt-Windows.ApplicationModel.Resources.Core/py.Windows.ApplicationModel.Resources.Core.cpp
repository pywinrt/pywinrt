// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.ApplicationModel.Resources.Core.h"


namespace py::cpp::Windows::ApplicationModel::Resources::Core
{
    // ----- NamedResource class --------------------

    static PyObject* _new_NamedResource(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::NamedResource>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::NamedResource>::type_name);
        return nullptr;
    }

    static void _dealloc_NamedResource(py::wrapper::Windows::ApplicationModel::Resources::Core::NamedResource* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* NamedResource_Resolve(py::wrapper::Windows::ApplicationModel::Resources::Core::NamedResource* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.NamedResource", L"Resolve", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.Resolve());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.NamedResource", L"Resolve", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Resources::Core::ResourceContext>(args, 0);

                return py::convert(self->obj.Resolve(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* NamedResource_ResolveAll(py::wrapper::Windows::ApplicationModel::Resources::Core::NamedResource* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.NamedResource", L"ResolveAll", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.ResolveAll());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.NamedResource", L"ResolveAll", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Resources::Core::ResourceContext>(args, 0);

                return py::convert(self->obj.ResolveAll(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* NamedResource_get_Candidates(py::wrapper::Windows::ApplicationModel::Resources::Core::NamedResource* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.NamedResource", L"Candidates"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Candidates());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NamedResource_get_Uri(py::wrapper::Windows::ApplicationModel::Resources::Core::NamedResource* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.NamedResource", L"Uri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_NamedResource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Resources::Core::NamedResource>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_NamedResource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::NamedResource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_NamedResource[] = {
        { "resolve", reinterpret_cast<PyCFunction>(NamedResource_Resolve), METH_VARARGS, nullptr },
        { "resolve_all", reinterpret_cast<PyCFunction>(NamedResource_ResolveAll), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_NamedResource, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_NamedResource), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_NamedResource[] = {
        { "candidates", reinterpret_cast<getter>(NamedResource_get_Candidates), nullptr, nullptr, nullptr },
        { "uri", reinterpret_cast<getter>(NamedResource_get_Uri), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_NamedResource[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_NamedResource) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_NamedResource) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_NamedResource) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_NamedResource) },
        { },
    };

    static PyType_Spec type_spec_NamedResource =
    {
        "winrt._winrt_windows_applicationmodel_resources_core.NamedResource",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::NamedResource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_NamedResource
    };

    // ----- ResourceCandidate class --------------------

    static PyObject* _new_ResourceCandidate(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidate>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidate>::type_name);
        return nullptr;
    }

    static void _dealloc_ResourceCandidate(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceCandidate_GetQualifierValue(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceCandidate", L"GetQualifierValue", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetQualifierValue(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_GetValueAsFileAsync(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceCandidate", L"GetValueAsFileAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetValueAsFileAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_GetValueAsStreamAsync(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceCandidate", L"GetValueAsStreamAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetValueAsStreamAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_get_IsDefault(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceCandidate", L"IsDefault"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsDefault());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_get_IsMatch(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceCandidate", L"IsMatch"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsMatch());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_get_IsMatchAsDefault(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceCandidate", L"IsMatchAsDefault"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsMatchAsDefault());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_get_Qualifiers(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceCandidate", L"Qualifiers"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Qualifiers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_get_ValueAsString(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceCandidate", L"ValueAsString"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ValueAsString());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceCandidate_get_Kind(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceCandidate", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceCandidate(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidate>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceCandidate(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidate>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceCandidate[] = {
        { "get_qualifier_value", reinterpret_cast<PyCFunction>(ResourceCandidate_GetQualifierValue), METH_VARARGS, nullptr },
        { "get_value_as_file_async", reinterpret_cast<PyCFunction>(ResourceCandidate_GetValueAsFileAsync), METH_VARARGS, nullptr },
        { "get_value_as_stream_async", reinterpret_cast<PyCFunction>(ResourceCandidate_GetValueAsStreamAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ResourceCandidate, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceCandidate), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceCandidate[] = {
        { "is_default", reinterpret_cast<getter>(ResourceCandidate_get_IsDefault), nullptr, nullptr, nullptr },
        { "is_match", reinterpret_cast<getter>(ResourceCandidate_get_IsMatch), nullptr, nullptr, nullptr },
        { "is_match_as_default", reinterpret_cast<getter>(ResourceCandidate_get_IsMatchAsDefault), nullptr, nullptr, nullptr },
        { "qualifiers", reinterpret_cast<getter>(ResourceCandidate_get_Qualifiers), nullptr, nullptr, nullptr },
        { "value_as_string", reinterpret_cast<getter>(ResourceCandidate_get_ValueAsString), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(ResourceCandidate_get_Kind), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceCandidate[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceCandidate) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceCandidate) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceCandidate) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceCandidate) },
        { },
    };

    static PyType_Spec type_spec_ResourceCandidate =
    {
        "winrt._winrt_windows_applicationmodel_resources_core.ResourceCandidate",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidate),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceCandidate
    };

    // ----- ResourceCandidateVectorView class --------------------

    static PyObject* _new_ResourceCandidateVectorView(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView>::type_name);
        return nullptr;
    }

    static void _dealloc_ResourceCandidateVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceCandidateVectorView_First(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceCandidateVectorView", L"First", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceCandidateVectorView_GetAt(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceCandidateVectorView", L"GetAt", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceCandidateVectorView_GetMany(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceCandidateVectorView", L"GetMany", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<py::pybuf_view<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidate, true>>(args, 1);

                return py::convert(self->obj.GetMany(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceCandidateVectorView_IndexOf(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceCandidateVectorView", L"IndexOf", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidate>(args, 0);
                uint32_t param1 {  };

                auto return_value = self->obj.IndexOf(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceCandidateVectorView_get_Size(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceCandidateVectorView", L"Size"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceCandidateVectorView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceCandidateVectorView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceCandidateVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _seq_length_ResourceCandidateVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _seq_item_ResourceCandidateVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self, Py_ssize_t i) noexcept
    {
        try
        {
            return py::convert(self->obj.GetAt(static_cast<uint32_t>(i)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _seq_subscript_ResourceCandidateVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView* self, PyObject* slice) noexcept
    {
        try
        {
            if (PyIndex_Check(slice))
            {
                pyobj_handle index{PyNumber_Index(slice)};

                if (!index)
                {
                    return nullptr;
                }

                auto i = PyNumber_AsSsize_t(index.get(), PyExc_IndexError);

                if (i == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }

                return _seq_item_ResourceCandidateVectorView(self, i);
            }

            if (!PySlice_Check(slice))
            {
                PyErr_Format(
                    PyExc_TypeError,
                    "indicies must be integers, not '%s'",
                    Py_TYPE(slice)->tp_name);
            }

            Py_ssize_t start, stop, step, length;

            if (PySlice_GetIndicesEx(
                    slice, self->obj.Size(), &start, &stop, &step, &length)
                < 0)
            {
                return nullptr;
            }

            if (step != 1)
            {
                PyErr_SetString(
                    PyExc_NotImplementedError,
                    "slices with step other than 1 are not implemented");
                return nullptr;
            }

            winrt::com_array<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidate> items(static_cast<uint32_t>(length), empty_instance<winrt::Windows::ApplicationModel::Resources::Core::ResourceCandidate>::get());

            auto count = self->obj.GetMany(static_cast<uint32_t>(start), items);

            if (count != static_cast<uint32_t>(length))
            {
                PyErr_Format(
                    PyExc_RuntimeError,
                    "returned count %d did not match requested length %zd",
                    count,
                    length);
                return nullptr;
            }

            return convert(items);}
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceCandidateVectorView[] = {
        { "first", reinterpret_cast<PyCFunction>(ResourceCandidateVectorView_First), METH_VARARGS, nullptr },
        { "get_at", reinterpret_cast<PyCFunction>(ResourceCandidateVectorView_GetAt), METH_VARARGS, nullptr },
        { "get_many", reinterpret_cast<PyCFunction>(ResourceCandidateVectorView_GetMany), METH_VARARGS, nullptr },
        { "index_of", reinterpret_cast<PyCFunction>(ResourceCandidateVectorView_IndexOf), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ResourceCandidateVectorView, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceCandidateVectorView), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceCandidateVectorView[] = {
        { "size", reinterpret_cast<getter>(ResourceCandidateVectorView_get_Size), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceCandidateVectorView[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceCandidateVectorView) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceCandidateVectorView) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceCandidateVectorView) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceCandidateVectorView) },
        { Py_tp_iter, reinterpret_cast<void*>(_iterator_ResourceCandidateVectorView) },
        { Py_sq_length, reinterpret_cast<void*>(_seq_length_ResourceCandidateVectorView) },
        { Py_sq_item, reinterpret_cast<void*>(_seq_item_ResourceCandidateVectorView) },
        { Py_mp_subscript, reinterpret_cast<void*>(_seq_subscript_ResourceCandidateVectorView) },
        { },
    };

    static PyType_Spec type_spec_ResourceCandidateVectorView =
    {
        "winrt._winrt_windows_applicationmodel_resources_core.ResourceCandidateVectorView",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceCandidateVectorView
    };

    // ----- ResourceContext class --------------------

    static PyObject* _new_ResourceContext(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Resources::Core::ResourceContext instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_ResourceContext(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContext* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceContext_Clone(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContext* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContext", L"Clone", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.Clone());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_CreateMatchingContext(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContext", L"CreateMatchingContext", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Resources::Core::ResourceContext::CreateMatchingContext(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContext", L"GetForCurrentView", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Resources::Core::ResourceContext::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_GetForUIContext(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContext", L"GetForUIContext", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::UIContext>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Resources::Core::ResourceContext::GetForUIContext(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_GetForViewIndependentUse(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContext", L"GetForViewIndependentUse", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Resources::Core::ResourceContext::GetForViewIndependentUse());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_OverrideToMatch(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContext* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContext", L"OverrideToMatch", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>>(args, 0);

                self->obj.OverrideToMatch(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_Reset(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContext* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContext", L"Reset", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Reset();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContext", L"Reset", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                self->obj.Reset(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_ResetGlobalQualifierValues(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContext", L"ResetGlobalQualifierValues", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                winrt::Windows::ApplicationModel::Resources::Core::ResourceContext::ResetGlobalQualifierValues();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContext", L"ResetGlobalQualifierValues", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                winrt::Windows::ApplicationModel::Resources::Core::ResourceContext::ResetGlobalQualifierValues(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_SetGlobalQualifierValue(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContext", L"SetGlobalQualifierValue", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::ApplicationModel::Resources::Core::ResourceContext::SetGlobalQualifierValue(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContext", L"SetGlobalQualifierValue", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierPersistence>(args, 2);

                winrt::Windows::ApplicationModel::Resources::Core::ResourceContext::SetGlobalQualifierValue(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContext_get_Languages(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContext* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContext", L"Languages"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ResourceContext_put_Languages(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContext* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContext", L"Languages"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IVectorView<winrt::hstring>>(arg);

            self->obj.Languages(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ResourceContext_get_QualifierValues(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContext* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContext", L"QualifierValues"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.QualifierValues());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceContext(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Resources::Core::ResourceContext>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceContext(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceContext>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceContext[] = {
        { "clone", reinterpret_cast<PyCFunction>(ResourceContext_Clone), METH_VARARGS, nullptr },
        { "override_to_match", reinterpret_cast<PyCFunction>(ResourceContext_OverrideToMatch), METH_VARARGS, nullptr },
        { "reset", reinterpret_cast<PyCFunction>(ResourceContext_Reset), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ResourceContext, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceContext), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceContext[] = {
        { "languages", reinterpret_cast<getter>(ResourceContext_get_Languages), reinterpret_cast<setter>(ResourceContext_put_Languages), nullptr, nullptr },
        { "qualifier_values", reinterpret_cast<getter>(ResourceContext_get_QualifierValues), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceContext[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceContext) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceContext) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceContext) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceContext) },
        { },
    };

    static PyType_Spec type_spec_ResourceContext =
    {
        "winrt._winrt_windows_applicationmodel_resources_core.ResourceContext",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContext),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceContext
    };

    static PyGetSetDef getset_ResourceContext_Static[] = {
        { }
    };

    static PyMethodDef methods_ResourceContext_Static[] = {
        { "create_matching_context", reinterpret_cast<PyCFunction>(ResourceContext_CreateMatchingContext), METH_VARARGS, nullptr },
        { "get_for_current_view", reinterpret_cast<PyCFunction>(ResourceContext_GetForCurrentView), METH_VARARGS, nullptr },
        { "get_for_u_i_context", reinterpret_cast<PyCFunction>(ResourceContext_GetForUIContext), METH_VARARGS, nullptr },
        { "get_for_view_independent_use", reinterpret_cast<PyCFunction>(ResourceContext_GetForViewIndependentUse), METH_VARARGS, nullptr },
        { "reset_global_qualifier_values", reinterpret_cast<PyCFunction>(ResourceContext_ResetGlobalQualifierValues), METH_VARARGS, nullptr },
        { "set_global_qualifier_value", reinterpret_cast<PyCFunction>(ResourceContext_SetGlobalQualifierValue), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_ResourceContext_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ResourceContext_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_ResourceContext_Static) },
        { }
    };

    static PyType_Spec type_spec_ResourceContext_Static =
    {
        "winrt._winrt_windows_applicationmodel_resources_core.ResourceContext_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_ResourceContext_Static
    };

    // ----- ResourceContextLanguagesVectorView class --------------------

    static PyObject* _new_ResourceContextLanguagesVectorView(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView>::type_name);
        return nullptr;
    }

    static void _dealloc_ResourceContextLanguagesVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceContextLanguagesVectorView_First(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContextLanguagesVectorView", L"First", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContextLanguagesVectorView_GetAt(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContextLanguagesVectorView", L"GetAt", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContextLanguagesVectorView_GetMany(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContextLanguagesVectorView", L"GetMany", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<py::pybuf_view<winrt::hstring, true>>(args, 1);

                return py::convert(self->obj.GetMany(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContextLanguagesVectorView_IndexOf(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContextLanguagesVectorView", L"IndexOf", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                uint32_t param1 {  };

                auto return_value = self->obj.IndexOf(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceContextLanguagesVectorView_get_Size(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceContextLanguagesVectorView", L"Size"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceContextLanguagesVectorView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceContextLanguagesVectorView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceContextLanguagesVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _seq_length_ResourceContextLanguagesVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _seq_item_ResourceContextLanguagesVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self, Py_ssize_t i) noexcept
    {
        try
        {
            return py::convert(self->obj.GetAt(static_cast<uint32_t>(i)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _seq_subscript_ResourceContextLanguagesVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView* self, PyObject* slice) noexcept
    {
        try
        {
            if (PyIndex_Check(slice))
            {
                pyobj_handle index{PyNumber_Index(slice)};

                if (!index)
                {
                    return nullptr;
                }

                auto i = PyNumber_AsSsize_t(index.get(), PyExc_IndexError);

                if (i == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }

                return _seq_item_ResourceContextLanguagesVectorView(self, i);
            }

            if (!PySlice_Check(slice))
            {
                PyErr_Format(
                    PyExc_TypeError,
                    "indicies must be integers, not '%s'",
                    Py_TYPE(slice)->tp_name);
            }

            Py_ssize_t start, stop, step, length;

            if (PySlice_GetIndicesEx(
                    slice, self->obj.Size(), &start, &stop, &step, &length)
                < 0)
            {
                return nullptr;
            }

            if (step != 1)
            {
                PyErr_SetString(
                    PyExc_NotImplementedError,
                    "slices with step other than 1 are not implemented");
                return nullptr;
            }

            winrt::com_array<winrt::hstring> items(static_cast<uint32_t>(length), empty_instance<winrt::hstring>::get());

            auto count = self->obj.GetMany(static_cast<uint32_t>(start), items);

            if (count != static_cast<uint32_t>(length))
            {
                PyErr_Format(
                    PyExc_RuntimeError,
                    "returned count %d did not match requested length %zd",
                    count,
                    length);
                return nullptr;
            }

            return convert(items);}
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceContextLanguagesVectorView[] = {
        { "first", reinterpret_cast<PyCFunction>(ResourceContextLanguagesVectorView_First), METH_VARARGS, nullptr },
        { "get_at", reinterpret_cast<PyCFunction>(ResourceContextLanguagesVectorView_GetAt), METH_VARARGS, nullptr },
        { "get_many", reinterpret_cast<PyCFunction>(ResourceContextLanguagesVectorView_GetMany), METH_VARARGS, nullptr },
        { "index_of", reinterpret_cast<PyCFunction>(ResourceContextLanguagesVectorView_IndexOf), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ResourceContextLanguagesVectorView, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceContextLanguagesVectorView), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceContextLanguagesVectorView[] = {
        { "size", reinterpret_cast<getter>(ResourceContextLanguagesVectorView_get_Size), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceContextLanguagesVectorView[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceContextLanguagesVectorView) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceContextLanguagesVectorView) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceContextLanguagesVectorView) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceContextLanguagesVectorView) },
        { Py_tp_iter, reinterpret_cast<void*>(_iterator_ResourceContextLanguagesVectorView) },
        { Py_sq_length, reinterpret_cast<void*>(_seq_length_ResourceContextLanguagesVectorView) },
        { Py_sq_item, reinterpret_cast<void*>(_seq_item_ResourceContextLanguagesVectorView) },
        { Py_mp_subscript, reinterpret_cast<void*>(_seq_subscript_ResourceContextLanguagesVectorView) },
        { },
    };

    static PyType_Spec type_spec_ResourceContextLanguagesVectorView =
    {
        "winrt._winrt_windows_applicationmodel_resources_core.ResourceContextLanguagesVectorView",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceContextLanguagesVectorView
    };

    // ----- ResourceManager class --------------------

    static PyObject* _new_ResourceManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceManager>::type_name);
        return nullptr;
    }

    static void _dealloc_ResourceManager(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceManager_GetAllNamedResourcesForPackage(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceManager", L"GetAllNamedResourcesForPackage", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>(args, 1);

                return py::convert(self->obj.GetAllNamedResourcesForPackage(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceManager_GetAllSubtreesForPackage(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceManager", L"GetAllSubtreesForPackage", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>(args, 1);

                return py::convert(self->obj.GetAllSubtreesForPackage(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceManager_IsResourceReference(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceManager", L"IsResourceReference", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Resources::Core::ResourceManager::IsResourceReference(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceManager_LoadPriFiles(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceManager", L"LoadPriFiles", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Storage::IStorageFile>>(args, 0);

                self->obj.LoadPriFiles(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceManager_UnloadPriFiles(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceManager", L"UnloadPriFiles", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Storage::IStorageFile>>(args, 0);

                self->obj.UnloadPriFiles(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceManager_get_AllResourceMaps(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceManager", L"AllResourceMaps"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AllResourceMaps());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceManager_get_DefaultContext(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceManager", L"DefaultContext"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DefaultContext());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceManager_get_MainResourceMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceManager", L"MainResourceMap"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MainResourceMap());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceManager_get_Current(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceManager", L"Current"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::ApplicationModel::Resources::Core::ResourceManager::Current());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Resources::Core::ResourceManager>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceManager[] = {
        { "get_all_named_resources_for_package", reinterpret_cast<PyCFunction>(ResourceManager_GetAllNamedResourcesForPackage), METH_VARARGS, nullptr },
        { "get_all_subtrees_for_package", reinterpret_cast<PyCFunction>(ResourceManager_GetAllSubtreesForPackage), METH_VARARGS, nullptr },
        { "load_pri_files", reinterpret_cast<PyCFunction>(ResourceManager_LoadPriFiles), METH_VARARGS, nullptr },
        { "unload_pri_files", reinterpret_cast<PyCFunction>(ResourceManager_UnloadPriFiles), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ResourceManager, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceManager), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceManager[] = {
        { "all_resource_maps", reinterpret_cast<getter>(ResourceManager_get_AllResourceMaps), nullptr, nullptr, nullptr },
        { "default_context", reinterpret_cast<getter>(ResourceManager_get_DefaultContext), nullptr, nullptr, nullptr },
        { "main_resource_map", reinterpret_cast<getter>(ResourceManager_get_MainResourceMap), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceManager) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceManager) },
        { },
    };

    static PyType_Spec type_spec_ResourceManager =
    {
        "winrt._winrt_windows_applicationmodel_resources_core.ResourceManager",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceManager
    };

    static PyGetSetDef getset_ResourceManager_Static[] = {
        { "current", reinterpret_cast<getter>(ResourceManager_get_Current), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_ResourceManager_Static[] = {
        { "is_resource_reference", reinterpret_cast<PyCFunction>(ResourceManager_IsResourceReference), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_ResourceManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ResourceManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_ResourceManager_Static) },
        { }
    };

    static PyType_Spec type_spec_ResourceManager_Static =
    {
        "winrt._winrt_windows_applicationmodel_resources_core.ResourceManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_ResourceManager_Static
    };

    // ----- ResourceMap class --------------------

    static PyObject* _new_ResourceMap(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMap>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMap>::type_name);
        return nullptr;
    }

    static void _dealloc_ResourceMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceMap_First(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMap", L"First", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMap_GetSubtree(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMap", L"GetSubtree", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetSubtree(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMap_GetValue(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMap", L"GetValue", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetValue(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMap", L"GetValue", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::ApplicationModel::Resources::Core::ResourceContext>(args, 1);

                return py::convert(self->obj.GetValue(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMap_HasKey(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMap", L"HasKey", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.HasKey(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMap_Lookup(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMap", L"Lookup", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.Lookup(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMap_Split(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMap", L"Split", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::Windows::ApplicationModel::Resources::Core::NamedResource> param0 { nullptr };
                winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::Windows::ApplicationModel::Resources::Core::NamedResource> param1 { nullptr };

                self->obj.Split(param0, param1);

                py::pyobj_handle out0{ py::convert(param0) };
                if (!out0)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out0.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMap_get_Uri(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMap", L"Uri"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceMap_get_Size(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMap", L"Size"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceMap(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Resources::Core::ResourceMap>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceMap(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceMap>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self) noexcept
    {
        try
        {
            py::pyobj_handle iter{py::convert(self->obj.First())};

            if (!iter)
            {
                return nullptr;
            }

            return py::wrap_mapping_iter(iter.get());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int _map_contains_ResourceMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, PyObject* key) noexcept
    {
        try
        {
            return static_cast<int>(self->obj.HasKey(py::convert_to<winrt::hstring>(key)));
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static Py_ssize_t _map_length_ResourceMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _map_subscript_ResourceMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap* self, PyObject* key) noexcept
    {
        try
        {
            auto value = self->obj.TryLookup(py::convert_to<winrt::hstring>(key));

            if (!value) {
                PyErr_SetObject(PyExc_KeyError, key);
                return nullptr;
            }

            return py::convert(value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceMap[] = {
        { "first", reinterpret_cast<PyCFunction>(ResourceMap_First), METH_VARARGS, nullptr },
        { "get_subtree", reinterpret_cast<PyCFunction>(ResourceMap_GetSubtree), METH_VARARGS, nullptr },
        { "get_value", reinterpret_cast<PyCFunction>(ResourceMap_GetValue), METH_VARARGS, nullptr },
        { "has_key", reinterpret_cast<PyCFunction>(ResourceMap_HasKey), METH_VARARGS, nullptr },
        { "lookup", reinterpret_cast<PyCFunction>(ResourceMap_Lookup), METH_VARARGS, nullptr },
        { "split", reinterpret_cast<PyCFunction>(ResourceMap_Split), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ResourceMap, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceMap), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceMap[] = {
        { "uri", reinterpret_cast<getter>(ResourceMap_get_Uri), nullptr, nullptr, nullptr },
        { "size", reinterpret_cast<getter>(ResourceMap_get_Size), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceMap[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceMap) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceMap) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceMap) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceMap) },
        { Py_tp_iter, reinterpret_cast<void*>(_iterator_ResourceMap) },
        { Py_sq_contains, reinterpret_cast<void*>(_map_contains_ResourceMap) },
        { Py_mp_length, reinterpret_cast<void*>(_map_length_ResourceMap) },
        { Py_mp_subscript, reinterpret_cast<void*>(_map_subscript_ResourceMap) },
        { },
    };

    static PyType_Spec type_spec_ResourceMap =
    {
        "winrt._winrt_windows_applicationmodel_resources_core.ResourceMap",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMap),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceMap
    };

    // ----- ResourceMapIterator class --------------------

    static PyObject* _new_ResourceMapIterator(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapIterator>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapIterator>::type_name);
        return nullptr;
    }

    static void _dealloc_ResourceMapIterator(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapIterator* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceMapIterator_GetMany(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapIterator* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMapIterator", L"GetMany", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<py::pybuf_view<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::Windows::ApplicationModel::Resources::Core::NamedResource>, true>>(args, 0);

                return py::convert(self->obj.GetMany(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMapIterator_MoveNext(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapIterator* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMapIterator", L"MoveNext", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.MoveNext());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMapIterator_get_Current(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapIterator* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMapIterator", L"Current"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Current());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceMapIterator_get_HasCurrent(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapIterator* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMapIterator", L"HasCurrent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.HasCurrent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceMapIterator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapIterator>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceMapIterator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapIterator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceMapIterator(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapIterator* self) noexcept
    {
        return reinterpret_cast<PyObject*>(self);
    }

    static PyObject* _iterator_next_ResourceMapIterator(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapIterator* self) noexcept
    {
        try
        {
            if (self->obj.HasCurrent())
            {
                auto cur = self->obj.Current();
                self->obj.MoveNext();
                return py::convert(cur);
            }
            else
            {
                return nullptr;
            }}
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceMapIterator[] = {
        { "get_many", reinterpret_cast<PyCFunction>(ResourceMapIterator_GetMany), METH_VARARGS, nullptr },
        { "move_next", reinterpret_cast<PyCFunction>(ResourceMapIterator_MoveNext), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ResourceMapIterator, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceMapIterator), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceMapIterator[] = {
        { "current", reinterpret_cast<getter>(ResourceMapIterator_get_Current), nullptr, nullptr, nullptr },
        { "has_current", reinterpret_cast<getter>(ResourceMapIterator_get_HasCurrent), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceMapIterator[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceMapIterator) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceMapIterator) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceMapIterator) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceMapIterator) },
        { Py_tp_iter, reinterpret_cast<void*>(_iterator_ResourceMapIterator) },
        { Py_tp_iternext, reinterpret_cast<void*>(_iterator_next_ResourceMapIterator) },
        { },
    };

    static PyType_Spec type_spec_ResourceMapIterator =
    {
        "winrt._winrt_windows_applicationmodel_resources_core.ResourceMapIterator",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapIterator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceMapIterator
    };

    // ----- ResourceMapMapView class --------------------

    static PyObject* _new_ResourceMapMapView(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapView>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapView>::type_name);
        return nullptr;
    }

    static void _dealloc_ResourceMapMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceMapMapView_First(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMapMapView", L"First", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMapMapView_HasKey(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMapMapView", L"HasKey", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.HasKey(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMapMapView_Lookup(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMapMapView", L"Lookup", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.Lookup(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMapMapView_Split(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMapMapView", L"Split", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::Windows::ApplicationModel::Resources::Core::ResourceMap> param0 { nullptr };
                winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::Windows::ApplicationModel::Resources::Core::ResourceMap> param1 { nullptr };

                self->obj.Split(param0, param1);

                py::pyobj_handle out0{ py::convert(param0) };
                if (!out0)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out0.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMapMapView_get_Size(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMapMapView", L"Size"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceMapMapView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapView>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceMapMapView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceMapMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self) noexcept
    {
        try
        {
            py::pyobj_handle iter{py::convert(self->obj.First())};

            if (!iter)
            {
                return nullptr;
            }

            return py::wrap_mapping_iter(iter.get());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int _map_contains_ResourceMapMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self, PyObject* key) noexcept
    {
        try
        {
            return static_cast<int>(self->obj.HasKey(py::convert_to<winrt::hstring>(key)));
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static Py_ssize_t _map_length_ResourceMapMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _map_subscript_ResourceMapMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView* self, PyObject* key) noexcept
    {
        try
        {
            auto value = self->obj.TryLookup(py::convert_to<winrt::hstring>(key));

            if (!value) {
                PyErr_SetObject(PyExc_KeyError, key);
                return nullptr;
            }

            return py::convert(value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceMapMapView[] = {
        { "first", reinterpret_cast<PyCFunction>(ResourceMapMapView_First), METH_VARARGS, nullptr },
        { "has_key", reinterpret_cast<PyCFunction>(ResourceMapMapView_HasKey), METH_VARARGS, nullptr },
        { "lookup", reinterpret_cast<PyCFunction>(ResourceMapMapView_Lookup), METH_VARARGS, nullptr },
        { "split", reinterpret_cast<PyCFunction>(ResourceMapMapView_Split), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ResourceMapMapView, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceMapMapView), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceMapMapView[] = {
        { "size", reinterpret_cast<getter>(ResourceMapMapView_get_Size), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceMapMapView[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceMapMapView) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceMapMapView) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceMapMapView) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceMapMapView) },
        { Py_tp_iter, reinterpret_cast<void*>(_iterator_ResourceMapMapView) },
        { Py_sq_contains, reinterpret_cast<void*>(_map_contains_ResourceMapMapView) },
        { Py_mp_length, reinterpret_cast<void*>(_map_length_ResourceMapMapView) },
        { Py_mp_subscript, reinterpret_cast<void*>(_map_subscript_ResourceMapMapView) },
        { },
    };

    static PyType_Spec type_spec_ResourceMapMapView =
    {
        "winrt._winrt_windows_applicationmodel_resources_core.ResourceMapMapView",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceMapMapView
    };

    // ----- ResourceMapMapViewIterator class --------------------

    static PyObject* _new_ResourceMapMapViewIterator(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator>::type_name);
        return nullptr;
    }

    static void _dealloc_ResourceMapMapViewIterator(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceMapMapViewIterator_GetMany(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMapMapViewIterator", L"GetMany", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<py::pybuf_view<winrt::Windows::Foundation::Collections::IKeyValuePair<winrt::hstring, winrt::Windows::ApplicationModel::Resources::Core::ResourceMap>, true>>(args, 0);

                return py::convert(self->obj.GetMany(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMapMapViewIterator_MoveNext(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMapMapViewIterator", L"MoveNext", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.MoveNext());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceMapMapViewIterator_get_Current(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMapMapViewIterator", L"Current"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Current());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceMapMapViewIterator_get_HasCurrent(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceMapMapViewIterator", L"HasCurrent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.HasCurrent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceMapMapViewIterator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceMapMapViewIterator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceMapMapViewIterator(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator* self) noexcept
    {
        return reinterpret_cast<PyObject*>(self);
    }

    static PyObject* _iterator_next_ResourceMapMapViewIterator(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator* self) noexcept
    {
        try
        {
            if (self->obj.HasCurrent())
            {
                auto cur = self->obj.Current();
                self->obj.MoveNext();
                return py::convert(cur);
            }
            else
            {
                return nullptr;
            }}
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceMapMapViewIterator[] = {
        { "get_many", reinterpret_cast<PyCFunction>(ResourceMapMapViewIterator_GetMany), METH_VARARGS, nullptr },
        { "move_next", reinterpret_cast<PyCFunction>(ResourceMapMapViewIterator_MoveNext), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ResourceMapMapViewIterator, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceMapMapViewIterator), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceMapMapViewIterator[] = {
        { "current", reinterpret_cast<getter>(ResourceMapMapViewIterator_get_Current), nullptr, nullptr, nullptr },
        { "has_current", reinterpret_cast<getter>(ResourceMapMapViewIterator_get_HasCurrent), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceMapMapViewIterator[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceMapMapViewIterator) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceMapMapViewIterator) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceMapMapViewIterator) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceMapMapViewIterator) },
        { Py_tp_iter, reinterpret_cast<void*>(_iterator_ResourceMapMapViewIterator) },
        { Py_tp_iternext, reinterpret_cast<void*>(_iterator_next_ResourceMapMapViewIterator) },
        { },
    };

    static PyType_Spec type_spec_ResourceMapMapViewIterator =
    {
        "winrt._winrt_windows_applicationmodel_resources_core.ResourceMapMapViewIterator",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceMapMapViewIterator
    };

    // ----- ResourceQualifier class --------------------

    static PyObject* _new_ResourceQualifier(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>::type_name);
        return nullptr;
    }

    static void _dealloc_ResourceQualifier(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifier* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceQualifier_get_IsDefault(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifier* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifier", L"IsDefault"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsDefault());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceQualifier_get_IsMatch(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifier* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifier", L"IsMatch"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsMatch());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceQualifier_get_QualifierName(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifier* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifier", L"QualifierName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.QualifierName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceQualifier_get_QualifierValue(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifier* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifier", L"QualifierValue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.QualifierValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceQualifier_get_Score(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifier* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifier", L"Score"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Score());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceQualifier(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceQualifier(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceQualifier[] = {
        { "_assign_array_", _assign_array_ResourceQualifier, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceQualifier), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceQualifier[] = {
        { "is_default", reinterpret_cast<getter>(ResourceQualifier_get_IsDefault), nullptr, nullptr, nullptr },
        { "is_match", reinterpret_cast<getter>(ResourceQualifier_get_IsMatch), nullptr, nullptr, nullptr },
        { "qualifier_name", reinterpret_cast<getter>(ResourceQualifier_get_QualifierName), nullptr, nullptr, nullptr },
        { "qualifier_value", reinterpret_cast<getter>(ResourceQualifier_get_QualifierValue), nullptr, nullptr, nullptr },
        { "score", reinterpret_cast<getter>(ResourceQualifier_get_Score), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceQualifier[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceQualifier) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceQualifier) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceQualifier) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceQualifier) },
        { },
    };

    static PyType_Spec type_spec_ResourceQualifier =
    {
        "winrt._winrt_windows_applicationmodel_resources_core.ResourceQualifier",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifier),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceQualifier
    };

    // ----- ResourceQualifierMapView class --------------------

    static PyObject* _new_ResourceQualifierMapView(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView>::type_name);
        return nullptr;
    }

    static void _dealloc_ResourceQualifierMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceQualifierMapView_First(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierMapView", L"First", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierMapView_HasKey(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierMapView", L"HasKey", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.HasKey(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierMapView_Lookup(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierMapView", L"Lookup", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.Lookup(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierMapView_Split(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierMapView", L"Split", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring> param0 { nullptr };
                winrt::Windows::Foundation::Collections::IMapView<winrt::hstring, winrt::hstring> param1 { nullptr };

                self->obj.Split(param0, param1);

                py::pyobj_handle out0{ py::convert(param0) };
                if (!out0)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out0.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierMapView_get_Size(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierMapView", L"Size"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceQualifierMapView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceQualifierMapView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceQualifierMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self) noexcept
    {
        try
        {
            py::pyobj_handle iter{py::convert(self->obj.First())};

            if (!iter)
            {
                return nullptr;
            }

            return py::wrap_mapping_iter(iter.get());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int _map_contains_ResourceQualifierMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self, PyObject* key) noexcept
    {
        try
        {
            return static_cast<int>(self->obj.HasKey(py::convert_to<winrt::hstring>(key)));
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static Py_ssize_t _map_length_ResourceQualifierMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _map_subscript_ResourceQualifierMapView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView* self, PyObject* key) noexcept
    {
        try
        {
            auto value = self->obj.TryLookup(py::convert_to<winrt::hstring>(key));

            if (!value) {
                PyErr_SetObject(PyExc_KeyError, key);
                return nullptr;
            }

            return py::convert(value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceQualifierMapView[] = {
        { "first", reinterpret_cast<PyCFunction>(ResourceQualifierMapView_First), METH_VARARGS, nullptr },
        { "has_key", reinterpret_cast<PyCFunction>(ResourceQualifierMapView_HasKey), METH_VARARGS, nullptr },
        { "lookup", reinterpret_cast<PyCFunction>(ResourceQualifierMapView_Lookup), METH_VARARGS, nullptr },
        { "split", reinterpret_cast<PyCFunction>(ResourceQualifierMapView_Split), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ResourceQualifierMapView, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceQualifierMapView), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceQualifierMapView[] = {
        { "size", reinterpret_cast<getter>(ResourceQualifierMapView_get_Size), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceQualifierMapView[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceQualifierMapView) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceQualifierMapView) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceQualifierMapView) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceQualifierMapView) },
        { Py_tp_iter, reinterpret_cast<void*>(_iterator_ResourceQualifierMapView) },
        { Py_sq_contains, reinterpret_cast<void*>(_map_contains_ResourceQualifierMapView) },
        { Py_mp_length, reinterpret_cast<void*>(_map_length_ResourceQualifierMapView) },
        { Py_mp_subscript, reinterpret_cast<void*>(_map_subscript_ResourceQualifierMapView) },
        { },
    };

    static PyType_Spec type_spec_ResourceQualifierMapView =
    {
        "winrt._winrt_windows_applicationmodel_resources_core.ResourceQualifierMapView",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceQualifierMapView
    };

    // ----- ResourceQualifierObservableMap class --------------------

    static PyObject* _new_ResourceQualifierObservableMap(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap>::type_name);
        return nullptr;
    }

    static void _dealloc_ResourceQualifierObservableMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceQualifierObservableMap_Clear(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap", L"Clear", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_First(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap", L"First", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_GetView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap", L"GetView", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_HasKey(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap", L"HasKey", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.HasKey(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_Insert(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap", L"Insert", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.Insert(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_Lookup(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap", L"Lookup", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.Lookup(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_Remove(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap", L"Remove", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Remove(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_get_Size(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap", L"Size"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_add_MapChanged(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap", L"MapChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::MapChangedEventHandler<winrt::hstring, winrt::hstring>>(arg);

            return py::convert(self->obj.MapChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierObservableMap_remove_MapChanged(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap", L"MapChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.MapChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceQualifierObservableMap(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceQualifierObservableMap(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceQualifierObservableMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self) noexcept
    {
        try
        {
            py::pyobj_handle iter{py::convert(self->obj.First())};

            if (!iter)
            {
                return nullptr;
            }

            return py::wrap_mapping_iter(iter.get());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int _map_contains_ResourceQualifierObservableMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* key) noexcept
    {
        try
        {
            return static_cast<int>(self->obj.HasKey(py::convert_to<winrt::hstring>(key)));
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static Py_ssize_t _map_length_ResourceQualifierObservableMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _map_subscript_ResourceQualifierObservableMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* key) noexcept
    {
        try
        {
            auto value = self->obj.TryLookup(py::convert_to<winrt::hstring>(key));

            if (!value) {
                PyErr_SetObject(PyExc_KeyError, key);
                return nullptr;
            }

            return py::convert(value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int _map_assign_ResourceQualifierObservableMap(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap* self, PyObject* key, PyObject* value) noexcept
    {
        try
        {
            auto _key = py::convert_to<winrt::hstring>(key);

            if (value == nullptr) {
                if (!self->obj.TryRemove(_key)) {
                    PyErr_SetObject(PyExc_KeyError, key);
                    return -1;
                }

                return 0;
            }

            self->obj.Insert(_key, py::convert_to<winrt::hstring>(value));

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyMethodDef _methods_ResourceQualifierObservableMap[] = {
        { "clear", reinterpret_cast<PyCFunction>(ResourceQualifierObservableMap_Clear), METH_VARARGS, nullptr },
        { "first", reinterpret_cast<PyCFunction>(ResourceQualifierObservableMap_First), METH_VARARGS, nullptr },
        { "get_view", reinterpret_cast<PyCFunction>(ResourceQualifierObservableMap_GetView), METH_VARARGS, nullptr },
        { "has_key", reinterpret_cast<PyCFunction>(ResourceQualifierObservableMap_HasKey), METH_VARARGS, nullptr },
        { "insert", reinterpret_cast<PyCFunction>(ResourceQualifierObservableMap_Insert), METH_VARARGS, nullptr },
        { "lookup", reinterpret_cast<PyCFunction>(ResourceQualifierObservableMap_Lookup), METH_VARARGS, nullptr },
        { "remove", reinterpret_cast<PyCFunction>(ResourceQualifierObservableMap_Remove), METH_VARARGS, nullptr },
        { "add_map_changed", reinterpret_cast<PyCFunction>(ResourceQualifierObservableMap_add_MapChanged), METH_O, nullptr },
        { "remove_map_changed", reinterpret_cast<PyCFunction>(ResourceQualifierObservableMap_remove_MapChanged), METH_O, nullptr },
        { "_assign_array_", _assign_array_ResourceQualifierObservableMap, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceQualifierObservableMap), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceQualifierObservableMap[] = {
        { "size", reinterpret_cast<getter>(ResourceQualifierObservableMap_get_Size), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceQualifierObservableMap[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceQualifierObservableMap) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceQualifierObservableMap) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceQualifierObservableMap) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceQualifierObservableMap) },
        { Py_tp_iter, reinterpret_cast<void*>(_iterator_ResourceQualifierObservableMap) },
        { Py_sq_contains, reinterpret_cast<void*>(_map_contains_ResourceQualifierObservableMap) },
        { Py_mp_length, reinterpret_cast<void*>(_map_length_ResourceQualifierObservableMap) },
        { Py_mp_subscript, reinterpret_cast<void*>(_map_subscript_ResourceQualifierObservableMap) },
        { Py_mp_ass_subscript, reinterpret_cast<void*>(_map_assign_ResourceQualifierObservableMap) },
        { },
    };

    static PyType_Spec type_spec_ResourceQualifierObservableMap =
    {
        "winrt._winrt_windows_applicationmodel_resources_core.ResourceQualifierObservableMap",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceQualifierObservableMap
    };

    // ----- ResourceQualifierVectorView class --------------------

    static PyObject* _new_ResourceQualifierVectorView(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView>::type_name);
        return nullptr;
    }

    static void _dealloc_ResourceQualifierVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceQualifierVectorView_First(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierVectorView", L"First", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierVectorView_GetAt(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierVectorView", L"GetAt", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierVectorView_GetMany(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierVectorView", L"GetMany", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<py::pybuf_view<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier, true>>(args, 1);

                return py::convert(self->obj.GetMany(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierVectorView_IndexOf(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierVectorView", L"IndexOf", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>(args, 0);
                uint32_t param1 {  };

                auto return_value = self->obj.IndexOf(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceQualifierVectorView_get_Size(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.Resources.Core.ResourceQualifierVectorView", L"Size"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceQualifierVectorView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceQualifierVectorView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_ResourceQualifierVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _seq_length_ResourceQualifierVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _seq_item_ResourceQualifierVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self, Py_ssize_t i) noexcept
    {
        try
        {
            return py::convert(self->obj.GetAt(static_cast<uint32_t>(i)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _seq_subscript_ResourceQualifierVectorView(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView* self, PyObject* slice) noexcept
    {
        try
        {
            if (PyIndex_Check(slice))
            {
                pyobj_handle index{PyNumber_Index(slice)};

                if (!index)
                {
                    return nullptr;
                }

                auto i = PyNumber_AsSsize_t(index.get(), PyExc_IndexError);

                if (i == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }

                return _seq_item_ResourceQualifierVectorView(self, i);
            }

            if (!PySlice_Check(slice))
            {
                PyErr_Format(
                    PyExc_TypeError,
                    "indicies must be integers, not '%s'",
                    Py_TYPE(slice)->tp_name);
            }

            Py_ssize_t start, stop, step, length;

            if (PySlice_GetIndicesEx(
                    slice, self->obj.Size(), &start, &stop, &step, &length)
                < 0)
            {
                return nullptr;
            }

            if (step != 1)
            {
                PyErr_SetString(
                    PyExc_NotImplementedError,
                    "slices with step other than 1 are not implemented");
                return nullptr;
            }

            winrt::com_array<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier> items(static_cast<uint32_t>(length), empty_instance<winrt::Windows::ApplicationModel::Resources::Core::ResourceQualifier>::get());

            auto count = self->obj.GetMany(static_cast<uint32_t>(start), items);

            if (count != static_cast<uint32_t>(length))
            {
                PyErr_Format(
                    PyExc_RuntimeError,
                    "returned count %d did not match requested length %zd",
                    count,
                    length);
                return nullptr;
            }

            return convert(items);}
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceQualifierVectorView[] = {
        { "first", reinterpret_cast<PyCFunction>(ResourceQualifierVectorView_First), METH_VARARGS, nullptr },
        { "get_at", reinterpret_cast<PyCFunction>(ResourceQualifierVectorView_GetAt), METH_VARARGS, nullptr },
        { "get_many", reinterpret_cast<PyCFunction>(ResourceQualifierVectorView_GetMany), METH_VARARGS, nullptr },
        { "index_of", reinterpret_cast<PyCFunction>(ResourceQualifierVectorView_IndexOf), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ResourceQualifierVectorView, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceQualifierVectorView), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceQualifierVectorView[] = {
        { "size", reinterpret_cast<getter>(ResourceQualifierVectorView_get_Size), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceQualifierVectorView[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceQualifierVectorView) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceQualifierVectorView) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceQualifierVectorView) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceQualifierVectorView) },
        { Py_tp_iter, reinterpret_cast<void*>(_iterator_ResourceQualifierVectorView) },
        { Py_sq_length, reinterpret_cast<void*>(_seq_length_ResourceQualifierVectorView) },
        { Py_sq_item, reinterpret_cast<void*>(_seq_item_ResourceQualifierVectorView) },
        { Py_mp_subscript, reinterpret_cast<void*>(_seq_subscript_ResourceQualifierVectorView) },
        { },
    };

    static PyType_Spec type_spec_ResourceQualifierVectorView =
    {
        "winrt._winrt_windows_applicationmodel_resources_core.ResourceQualifierVectorView",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceQualifierVectorView
    };

    // ----- ResourceLayoutInfo struct --------------------

    winrt_struct_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>* _new_ResourceLayoutInfo(PyTypeObject* subclass, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>*>(subclass->tp_alloc(subclass, 0));

        if (!self)
        {
            return nullptr;
        }

        std::construct_at(&self->obj);

        return self;
    }

    int _init_ResourceLayoutInfo(winrt_struct_wrapper<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>* self, PyObject* args, PyObject* kwds) noexcept
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            self->obj = {};
            return 0;
        }

        uint32_t _MajorVersion{};
        uint32_t _MinorVersion{};
        uint32_t _ResourceSubtreeCount{};
        uint32_t _NamedResourceCount{};
        int32_t _Checksum{};

        static const char* kwlist[] = {"major_version", "minor_version", "resource_subtree_count", "named_resource_count", "checksum", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "IIIIi", const_cast<char**>(kwlist), &_MajorVersion, &_MinorVersion, &_ResourceSubtreeCount, &_NamedResourceCount, &_Checksum))
        {
            return -1;
        }

        try
        {
            self->obj = {_MajorVersion, _MinorVersion, _ResourceSubtreeCount, _NamedResourceCount, _Checksum};
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static void _dealloc_ResourceLayoutInfo(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_ResourceLayoutInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_ResourceLayoutInfo[] = {
        { "_assign_array_", _assign_array_ResourceLayoutInfo, METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyObject* ResourceLayoutInfo_get_MajorVersion(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MajorVersion);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ResourceLayoutInfo_set_MajorVersion(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.MajorVersion = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ResourceLayoutInfo_get_MinorVersion(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MinorVersion);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ResourceLayoutInfo_set_MinorVersion(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.MinorVersion = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ResourceLayoutInfo_get_ResourceSubtreeCount(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResourceSubtreeCount);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ResourceLayoutInfo_set_ResourceSubtreeCount(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.ResourceSubtreeCount = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ResourceLayoutInfo_get_NamedResourceCount(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NamedResourceCount);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ResourceLayoutInfo_set_NamedResourceCount(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.NamedResourceCount = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ResourceLayoutInfo_get_Checksum(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Checksum);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ResourceLayoutInfo_set_Checksum(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.Checksum = py::converter<int32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_ResourceLayoutInfo[] = {
        { "major_version", reinterpret_cast<getter>(ResourceLayoutInfo_get_MajorVersion), reinterpret_cast<setter>(ResourceLayoutInfo_set_MajorVersion), nullptr, nullptr },
        { "minor_version", reinterpret_cast<getter>(ResourceLayoutInfo_get_MinorVersion), reinterpret_cast<setter>(ResourceLayoutInfo_set_MinorVersion), nullptr, nullptr },
        { "resource_subtree_count", reinterpret_cast<getter>(ResourceLayoutInfo_get_ResourceSubtreeCount), reinterpret_cast<setter>(ResourceLayoutInfo_set_ResourceSubtreeCount), nullptr, nullptr },
        { "named_resource_count", reinterpret_cast<getter>(ResourceLayoutInfo_get_NamedResourceCount), reinterpret_cast<setter>(ResourceLayoutInfo_set_NamedResourceCount), nullptr, nullptr },
        { "checksum", reinterpret_cast<getter>(ResourceLayoutInfo_get_Checksum), reinterpret_cast<setter>(ResourceLayoutInfo_set_Checksum), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ResourceLayoutInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceLayoutInfo) },
        { Py_tp_init, reinterpret_cast<void*>(_init_ResourceLayoutInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceLayoutInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceLayoutInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceLayoutInfo) },
        { },
    };

    static PyType_Spec type_spec_ResourceLayoutInfo =
    {
        "winrt._winrt_windows_applicationmodel_resources_core.ResourceLayoutInfo",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceLayoutInfo
    };

    // ----- Windows.ApplicationModel.Resources.Core Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::ApplicationModel::Resources::Core");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_applicationmodel_resources_core",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::ApplicationModel::Resources::Core

PyMODINIT_FUNC PyInit__winrt_windows_applicationmodel_resources_core(void) noexcept
{
    using namespace py::cpp::Windows::ApplicationModel::Resources::Core;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_NamedResource, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceCandidate, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceCandidateVectorView, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_ResourceContext_Static{PyType_FromSpec(&type_spec_ResourceContext_Static)};
    if (!type_ResourceContext_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceContext, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ResourceContext_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceContextLanguagesVectorView, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_ResourceManager_Static{PyType_FromSpec(&type_spec_ResourceManager_Static)};
    if (!type_ResourceManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ResourceManager_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceMap, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceMapIterator, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceMapMapView, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceMapMapViewIterator, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceQualifier, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceQualifierMapView, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceQualifierObservableMap, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceQualifierVectorView, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceLayoutInfo, nullptr, nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
