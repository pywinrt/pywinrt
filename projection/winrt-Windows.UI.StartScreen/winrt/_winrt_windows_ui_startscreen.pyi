# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.core as windows_applicationmodel_core
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.perception.spatial as windows_perception_spatial
import winrt.windows.system as windows_system
import winrt.windows.ui as windows_ui
import winrt.windows.ui.popups as windows_ui_popups

from winrt.windows.ui.startscreen import ForegroundText, JumpListItemKind, JumpListSystemGroupKind, TileMixedRealityModelActivationBehavior, TileOptions, TileSize

Self = typing.TypeVar('Self')

@typing.final
class JumpList_Static(type):
    # System.Boolean Windows.UI.StartScreen.JumpList::IsSupported()
    def is_supported(cls) -> bool: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.UI.StartScreen.JumpList> Windows.UI.StartScreen.JumpList::LoadCurrentAsync()
    def load_current_async(cls) -> windows_foundation.IAsyncOperation[JumpList]: ...

@typing.final
class JumpList(winrt.system.Object, metaclass=JumpList_Static):
    # Windows.Foundation.IAsyncAction Windows.UI.StartScreen.JumpList::SaveAsync()
    def save_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.UI.StartScreen.JumpListSystemGroupKind Windows.UI.StartScreen.JumpList::get_SystemGroupKind()
    @_property
    def system_group_kind(self) -> JumpListSystemGroupKind: ...
    # System.Void Windows.UI.StartScreen.JumpList::put_SystemGroupKind(Windows.UI.StartScreen.JumpListSystemGroupKind)
    @system_group_kind.setter
    def system_group_kind(self, value: JumpListSystemGroupKind) -> None: ...
    # Windows.Foundation.Collections.IVector`1<Windows.UI.StartScreen.JumpListItem> Windows.UI.StartScreen.JumpList::get_Items()
    @_property
    def items(self) -> typing.MutableSequence[JumpListItem]: ...

@typing.final
class JumpListItem_Static(type):
    # Windows.UI.StartScreen.JumpListItem Windows.UI.StartScreen.JumpListItem::CreateSeparator()
    def create_separator(cls) -> JumpListItem: ...
    # Windows.UI.StartScreen.JumpListItem Windows.UI.StartScreen.JumpListItem::CreateWithArguments(System.String,System.String)
    def create_with_arguments(cls, arguments: str, display_name: str, /) -> JumpListItem: ...

@typing.final
class JumpListItem(winrt.system.Object, metaclass=JumpListItem_Static):
    # Windows.Foundation.Uri Windows.UI.StartScreen.JumpListItem::get_Logo()
    @_property
    def logo(self) -> windows_foundation.Uri: ...
    # System.Void Windows.UI.StartScreen.JumpListItem::put_Logo(Windows.Foundation.Uri)
    @logo.setter
    def logo(self, value: windows_foundation.Uri) -> None: ...
    # System.String Windows.UI.StartScreen.JumpListItem::get_GroupName()
    @_property
    def group_name(self) -> str: ...
    # System.Void Windows.UI.StartScreen.JumpListItem::put_GroupName(System.String)
    @group_name.setter
    def group_name(self, value: str) -> None: ...
    # System.String Windows.UI.StartScreen.JumpListItem::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # System.Void Windows.UI.StartScreen.JumpListItem::put_DisplayName(System.String)
    @display_name.setter
    def display_name(self, value: str) -> None: ...
    # System.String Windows.UI.StartScreen.JumpListItem::get_Description()
    @_property
    def description(self) -> str: ...
    # System.Void Windows.UI.StartScreen.JumpListItem::put_Description(System.String)
    @description.setter
    def description(self, value: str) -> None: ...
    # System.String Windows.UI.StartScreen.JumpListItem::get_Arguments()
    @_property
    def arguments(self) -> str: ...
    # Windows.UI.StartScreen.JumpListItemKind Windows.UI.StartScreen.JumpListItem::get_Kind()
    @_property
    def kind(self) -> JumpListItemKind: ...
    # System.Boolean Windows.UI.StartScreen.JumpListItem::get_RemovedByUser()
    @_property
    def removed_by_user(self) -> bool: ...

@typing.final
class SecondaryTile_Static(type):
    # System.Boolean Windows.UI.StartScreen.SecondaryTile::Exists(System.String)
    def exists(cls, tile_id: str, /) -> bool: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.UI.StartScreen.SecondaryTile>> Windows.UI.StartScreen.SecondaryTile::FindAllAsync()
    def find_all_async(cls) -> windows_foundation.IAsyncOperation[typing.Sequence[SecondaryTile]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.UI.StartScreen.SecondaryTile>> Windows.UI.StartScreen.SecondaryTile::FindAllAsync(System.String)
    def find_all_for_application_async(cls, application_id: str, /) -> windows_foundation.IAsyncOperation[typing.Sequence[SecondaryTile]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.UI.StartScreen.SecondaryTile>> Windows.UI.StartScreen.SecondaryTile::FindAllForPackageAsync()
    def find_all_for_package_async(cls) -> windows_foundation.IAsyncOperation[typing.Sequence[SecondaryTile]]: ...

@typing.final
class SecondaryTile(winrt.system.Object, metaclass=SecondaryTile_Static):
    @typing.overload
    def __new__(cls: typing.Type[Self], tile_id: str, display_name: str, arguments: str, square150x150_logo: windows_foundation.Uri, desired_size: TileSize) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], tile_id: str, short_name: str, display_name: str, arguments: str, tile_options: TileOptions, logo_reference: windows_foundation.Uri) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], tile_id: str, short_name: str, display_name: str, arguments: str, tile_options: TileOptions, logo_reference: windows_foundation.Uri, wide_logo_reference: windows_foundation.Uri) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], tile_id: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.StartScreen.SecondaryTile::RequestCreateAsync()
    def request_create_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.StartScreen.SecondaryTile::RequestCreateAsync(Windows.Foundation.Point)
    def request_create_async_with_point(self, invocation_point: windows_foundation.Point, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.StartScreen.SecondaryTile::RequestCreateForSelectionAsync(Windows.Foundation.Rect)
    def request_create_async_with_rect(self, selection: windows_foundation.Rect, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.StartScreen.SecondaryTile::RequestCreateForSelectionAsync(Windows.Foundation.Rect,Windows.UI.Popups.Placement)
    def request_create_async_with_rect_and_placement(self, selection: windows_foundation.Rect, preferred_placement: windows_ui_popups.Placement, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.StartScreen.SecondaryTile::RequestDeleteAsync()
    def request_delete_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.StartScreen.SecondaryTile::RequestDeleteAsync(Windows.Foundation.Point)
    def request_delete_async_with_point(self, invocation_point: windows_foundation.Point, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.StartScreen.SecondaryTile::RequestDeleteForSelectionAsync(Windows.Foundation.Rect)
    def request_delete_async_with_rect(self, selection: windows_foundation.Rect, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.StartScreen.SecondaryTile::RequestDeleteForSelectionAsync(Windows.Foundation.Rect,Windows.UI.Popups.Placement)
    def request_delete_async_with_rect_and_placement(self, selection: windows_foundation.Rect, preferred_placement: windows_ui_popups.Placement, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.StartScreen.SecondaryTile::UpdateAsync()
    def update_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.StartScreen.SecondaryTile::add_VisualElementsRequested(Windows.Foundation.TypedEventHandler`2<Windows.UI.StartScreen.SecondaryTile,Windows.UI.StartScreen.VisualElementsRequestedEventArgs>)
    def add_visual_elements_requested(self, handler: windows_foundation.TypedEventHandler[SecondaryTile, VisualElementsRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.StartScreen.SecondaryTile::remove_VisualElementsRequested(Windows.Foundation.EventRegistrationToken)
    def remove_visual_elements_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Windows.UI.StartScreen.SecondaryTile::get_ShortName()
    @_property
    def short_name(self) -> str: ...
    # System.Void Windows.UI.StartScreen.SecondaryTile::put_ShortName(System.String)
    @short_name.setter
    def short_name(self, value: str) -> None: ...
    # Windows.Foundation.Uri Windows.UI.StartScreen.SecondaryTile::get_Logo()
    @_property
    def logo(self) -> windows_foundation.Uri: ...
    # System.Void Windows.UI.StartScreen.SecondaryTile::put_Logo(Windows.Foundation.Uri)
    @logo.setter
    def logo(self, value: windows_foundation.Uri) -> None: ...
    # System.String Windows.UI.StartScreen.SecondaryTile::get_TileId()
    @_property
    def tile_id(self) -> str: ...
    # System.Void Windows.UI.StartScreen.SecondaryTile::put_TileId(System.String)
    @tile_id.setter
    def tile_id(self, value: str) -> None: ...
    # System.Boolean Windows.UI.StartScreen.SecondaryTile::get_LockScreenDisplayBadgeAndTileText()
    @_property
    def lock_screen_display_badge_and_tile_text(self) -> bool: ...
    # System.Void Windows.UI.StartScreen.SecondaryTile::put_LockScreenDisplayBadgeAndTileText(System.Boolean)
    @lock_screen_display_badge_and_tile_text.setter
    def lock_screen_display_badge_and_tile_text(self, value: bool) -> None: ...
    # Windows.Foundation.Uri Windows.UI.StartScreen.SecondaryTile::get_LockScreenBadgeLogo()
    @_property
    def lock_screen_badge_logo(self) -> windows_foundation.Uri: ...
    # System.Void Windows.UI.StartScreen.SecondaryTile::put_LockScreenBadgeLogo(Windows.Foundation.Uri)
    @lock_screen_badge_logo.setter
    def lock_screen_badge_logo(self, value: windows_foundation.Uri) -> None: ...
    # System.String Windows.UI.StartScreen.SecondaryTile::get_Arguments()
    @_property
    def arguments(self) -> str: ...
    # System.Void Windows.UI.StartScreen.SecondaryTile::put_Arguments(System.String)
    @arguments.setter
    def arguments(self, value: str) -> None: ...
    # Windows.UI.StartScreen.ForegroundText Windows.UI.StartScreen.SecondaryTile::get_ForegroundText()
    @_property
    def foreground_text(self) -> ForegroundText: ...
    # System.Void Windows.UI.StartScreen.SecondaryTile::put_ForegroundText(Windows.UI.StartScreen.ForegroundText)
    @foreground_text.setter
    def foreground_text(self, value: ForegroundText) -> None: ...
    # System.String Windows.UI.StartScreen.SecondaryTile::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # System.Void Windows.UI.StartScreen.SecondaryTile::put_DisplayName(System.String)
    @display_name.setter
    def display_name(self, value: str) -> None: ...
    # Windows.UI.Color Windows.UI.StartScreen.SecondaryTile::get_BackgroundColor()
    @_property
    def background_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.StartScreen.SecondaryTile::put_BackgroundColor(Windows.UI.Color)
    @background_color.setter
    def background_color(self, value: windows_ui.Color) -> None: ...
    # Windows.Foundation.Uri Windows.UI.StartScreen.SecondaryTile::get_WideLogo()
    @_property
    def wide_logo(self) -> windows_foundation.Uri: ...
    # System.Void Windows.UI.StartScreen.SecondaryTile::put_WideLogo(Windows.Foundation.Uri)
    @wide_logo.setter
    def wide_logo(self, value: windows_foundation.Uri) -> None: ...
    # Windows.UI.StartScreen.TileOptions Windows.UI.StartScreen.SecondaryTile::get_TileOptions()
    @_property
    def tile_options(self) -> TileOptions: ...
    # System.Void Windows.UI.StartScreen.SecondaryTile::put_TileOptions(Windows.UI.StartScreen.TileOptions)
    @tile_options.setter
    def tile_options(self, value: TileOptions) -> None: ...
    # Windows.Foundation.Uri Windows.UI.StartScreen.SecondaryTile::get_SmallLogo()
    @_property
    def small_logo(self) -> windows_foundation.Uri: ...
    # System.Void Windows.UI.StartScreen.SecondaryTile::put_SmallLogo(Windows.Foundation.Uri)
    @small_logo.setter
    def small_logo(self, value: windows_foundation.Uri) -> None: ...
    # System.Boolean Windows.UI.StartScreen.SecondaryTile::get_RoamingEnabled()
    @_property
    def roaming_enabled(self) -> bool: ...
    # System.Void Windows.UI.StartScreen.SecondaryTile::put_RoamingEnabled(System.Boolean)
    @roaming_enabled.setter
    def roaming_enabled(self, value: bool) -> None: ...
    # System.String Windows.UI.StartScreen.SecondaryTile::get_PhoneticName()
    @_property
    def phonetic_name(self) -> str: ...
    # System.Void Windows.UI.StartScreen.SecondaryTile::put_PhoneticName(System.String)
    @phonetic_name.setter
    def phonetic_name(self, value: str) -> None: ...
    # Windows.UI.StartScreen.SecondaryTileVisualElements Windows.UI.StartScreen.SecondaryTile::get_VisualElements()
    @_property
    def visual_elements(self) -> SecondaryTileVisualElements: ...

@typing.final
class SecondaryTileVisualElements(winrt.system.Object):
    # Windows.Foundation.Uri Windows.UI.StartScreen.SecondaryTileVisualElements::get_Square150x150Logo()
    @_property
    def square150x150_logo(self) -> windows_foundation.Uri: ...
    # System.Void Windows.UI.StartScreen.SecondaryTileVisualElements::put_Square150x150Logo(Windows.Foundation.Uri)
    @square150x150_logo.setter
    def square150x150_logo(self, value: windows_foundation.Uri) -> None: ...
    # System.Boolean Windows.UI.StartScreen.SecondaryTileVisualElements::get_ShowNameOnWide310x150Logo()
    @_property
    def show_name_on_wide310x150_logo(self) -> bool: ...
    # System.Void Windows.UI.StartScreen.SecondaryTileVisualElements::put_ShowNameOnWide310x150Logo(System.Boolean)
    @show_name_on_wide310x150_logo.setter
    def show_name_on_wide310x150_logo(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.StartScreen.SecondaryTileVisualElements::get_ShowNameOnSquare310x310Logo()
    @_property
    def show_name_on_square310x310_logo(self) -> bool: ...
    # System.Void Windows.UI.StartScreen.SecondaryTileVisualElements::put_ShowNameOnSquare310x310Logo(System.Boolean)
    @show_name_on_square310x310_logo.setter
    def show_name_on_square310x310_logo(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.StartScreen.SecondaryTileVisualElements::get_ShowNameOnSquare150x150Logo()
    @_property
    def show_name_on_square150x150_logo(self) -> bool: ...
    # System.Void Windows.UI.StartScreen.SecondaryTileVisualElements::put_ShowNameOnSquare150x150Logo(System.Boolean)
    @show_name_on_square150x150_logo.setter
    def show_name_on_square150x150_logo(self, value: bool) -> None: ...
    # Windows.UI.StartScreen.ForegroundText Windows.UI.StartScreen.SecondaryTileVisualElements::get_ForegroundText()
    @_property
    def foreground_text(self) -> ForegroundText: ...
    # System.Void Windows.UI.StartScreen.SecondaryTileVisualElements::put_ForegroundText(Windows.UI.StartScreen.ForegroundText)
    @foreground_text.setter
    def foreground_text(self, value: ForegroundText) -> None: ...
    # Windows.UI.Color Windows.UI.StartScreen.SecondaryTileVisualElements::get_BackgroundColor()
    @_property
    def background_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.StartScreen.SecondaryTileVisualElements::put_BackgroundColor(Windows.UI.Color)
    @background_color.setter
    def background_color(self, value: windows_ui.Color) -> None: ...
    # Windows.Foundation.Uri Windows.UI.StartScreen.SecondaryTileVisualElements::get_Wide310x150Logo()
    @_property
    def wide310x150_logo(self) -> windows_foundation.Uri: ...
    # System.Void Windows.UI.StartScreen.SecondaryTileVisualElements::put_Wide310x150Logo(Windows.Foundation.Uri)
    @wide310x150_logo.setter
    def wide310x150_logo(self, value: windows_foundation.Uri) -> None: ...
    # Windows.Foundation.Uri Windows.UI.StartScreen.SecondaryTileVisualElements::get_Square70x70Logo()
    @_property
    def square70x70_logo(self) -> windows_foundation.Uri: ...
    # System.Void Windows.UI.StartScreen.SecondaryTileVisualElements::put_Square70x70Logo(Windows.Foundation.Uri)
    @square70x70_logo.setter
    def square70x70_logo(self, value: windows_foundation.Uri) -> None: ...
    # Windows.Foundation.Uri Windows.UI.StartScreen.SecondaryTileVisualElements::get_Square310x310Logo()
    @_property
    def square310x310_logo(self) -> windows_foundation.Uri: ...
    # System.Void Windows.UI.StartScreen.SecondaryTileVisualElements::put_Square310x310Logo(Windows.Foundation.Uri)
    @square310x310_logo.setter
    def square310x310_logo(self, value: windows_foundation.Uri) -> None: ...
    # Windows.Foundation.Uri Windows.UI.StartScreen.SecondaryTileVisualElements::get_Square30x30Logo()
    @_property
    def square30x30_logo(self) -> windows_foundation.Uri: ...
    # System.Void Windows.UI.StartScreen.SecondaryTileVisualElements::put_Square30x30Logo(Windows.Foundation.Uri)
    @square30x30_logo.setter
    def square30x30_logo(self, value: windows_foundation.Uri) -> None: ...
    # Windows.Foundation.Uri Windows.UI.StartScreen.SecondaryTileVisualElements::get_Square71x71Logo()
    @_property
    def square71x71_logo(self) -> windows_foundation.Uri: ...
    # System.Void Windows.UI.StartScreen.SecondaryTileVisualElements::put_Square71x71Logo(Windows.Foundation.Uri)
    @square71x71_logo.setter
    def square71x71_logo(self, value: windows_foundation.Uri) -> None: ...
    # Windows.Foundation.Uri Windows.UI.StartScreen.SecondaryTileVisualElements::get_Square44x44Logo()
    @_property
    def square44x44_logo(self) -> windows_foundation.Uri: ...
    # System.Void Windows.UI.StartScreen.SecondaryTileVisualElements::put_Square44x44Logo(Windows.Foundation.Uri)
    @square44x44_logo.setter
    def square44x44_logo(self, value: windows_foundation.Uri) -> None: ...
    # Windows.UI.StartScreen.TileMixedRealityModel Windows.UI.StartScreen.SecondaryTileVisualElements::get_MixedRealityModel()
    @_property
    def mixed_reality_model(self) -> TileMixedRealityModel: ...

@typing.final
class StartScreenManager_Static(type):
    # Windows.UI.StartScreen.StartScreenManager Windows.UI.StartScreen.StartScreenManager::GetDefault()
    def get_default(cls) -> StartScreenManager: ...
    # Windows.UI.StartScreen.StartScreenManager Windows.UI.StartScreen.StartScreenManager::GetForUser(Windows.System.User)
    def get_for_user(cls, user: windows_system.User, /) -> StartScreenManager: ...

@typing.final
class StartScreenManager(winrt.system.Object, metaclass=StartScreenManager_Static):
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.StartScreen.StartScreenManager::ContainsAppListEntryAsync(Windows.ApplicationModel.Core.AppListEntry)
    def contains_app_list_entry_async(self, app_list_entry: windows_applicationmodel_core.AppListEntry, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.StartScreen.StartScreenManager::ContainsSecondaryTileAsync(System.String)
    def contains_secondary_tile_async(self, tile_id: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.StartScreen.StartScreenManager::RequestAddAppListEntryAsync(Windows.ApplicationModel.Core.AppListEntry)
    def request_add_app_list_entry_async(self, app_list_entry: windows_applicationmodel_core.AppListEntry, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Boolean Windows.UI.StartScreen.StartScreenManager::SupportsAppListEntry(Windows.ApplicationModel.Core.AppListEntry)
    def supports_app_list_entry(self, app_list_entry: windows_applicationmodel_core.AppListEntry, /) -> bool: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.StartScreen.StartScreenManager::TryRemoveSecondaryTileAsync(System.String)
    def try_remove_secondary_tile_async(self, tile_id: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.System.User Windows.UI.StartScreen.StartScreenManager::get_User()
    @_property
    def user(self) -> windows_system.User: ...

@typing.final
class TileMixedRealityModel(winrt.system.Object):
    # Windows.Foundation.Uri Windows.UI.StartScreen.TileMixedRealityModel::get_Uri()
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    # System.Void Windows.UI.StartScreen.TileMixedRealityModel::put_Uri(Windows.Foundation.Uri)
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Perception.Spatial.SpatialBoundingBox> Windows.UI.StartScreen.TileMixedRealityModel::get_BoundingBox()
    @_property
    def bounding_box(self) -> typing.Optional[windows_perception_spatial.SpatialBoundingBox]: ...
    # System.Void Windows.UI.StartScreen.TileMixedRealityModel::put_BoundingBox(Windows.Foundation.IReference`1<Windows.Perception.Spatial.SpatialBoundingBox>)
    @bounding_box.setter
    def bounding_box(self, value: typing.Optional[windows_perception_spatial.SpatialBoundingBox]) -> None: ...
    # Windows.UI.StartScreen.TileMixedRealityModelActivationBehavior Windows.UI.StartScreen.TileMixedRealityModel::get_ActivationBehavior()
    @_property
    def activation_behavior(self) -> TileMixedRealityModelActivationBehavior: ...
    # System.Void Windows.UI.StartScreen.TileMixedRealityModel::put_ActivationBehavior(Windows.UI.StartScreen.TileMixedRealityModelActivationBehavior)
    @activation_behavior.setter
    def activation_behavior(self, value: TileMixedRealityModelActivationBehavior) -> None: ...

@typing.final
class VisualElementsRequest(winrt.system.Object):
    # Windows.UI.StartScreen.VisualElementsRequestDeferral Windows.UI.StartScreen.VisualElementsRequest::GetDeferral()
    def get_deferral(self) -> VisualElementsRequestDeferral: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.StartScreen.SecondaryTileVisualElements> Windows.UI.StartScreen.VisualElementsRequest::get_AlternateVisualElements()
    @_property
    def alternate_visual_elements(self) -> typing.Sequence[SecondaryTileVisualElements]: ...
    # Windows.Foundation.DateTime Windows.UI.StartScreen.VisualElementsRequest::get_Deadline()
    @_property
    def deadline(self) -> datetime.datetime: ...
    # Windows.UI.StartScreen.SecondaryTileVisualElements Windows.UI.StartScreen.VisualElementsRequest::get_VisualElements()
    @_property
    def visual_elements(self) -> SecondaryTileVisualElements: ...

@typing.final
class VisualElementsRequestDeferral(winrt.system.Object):
    # System.Void Windows.UI.StartScreen.VisualElementsRequestDeferral::Complete()
    def complete(self) -> None: ...

@typing.final
class VisualElementsRequestedEventArgs(winrt.system.Object):
    # Windows.UI.StartScreen.VisualElementsRequest Windows.UI.StartScreen.VisualElementsRequestedEventArgs::get_Request()
    @_property
    def request(self) -> VisualElementsRequest: ...

