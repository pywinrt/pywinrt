# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.1.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.core as windows_applicationmodel_core
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.perception.spatial as windows_perception_spatial
import winrt.windows.system as windows_system
import winrt.windows.ui as windows_ui
import winrt.windows.ui.popups as windows_ui_popups

from winrt.windows.ui.startscreen import ForegroundText, JumpListItemKind, JumpListSystemGroupKind, TileMixedRealityModelActivationBehavior, TileOptions, TileSize

Self = typing.TypeVar('Self')

@typing.final
class JumpList_Static(type):
    def is_supported(cls) -> bool: ...
    def load_current_async(cls) -> windows_foundation.IAsyncOperation[JumpList]: ...

@typing.final
class JumpList(winrt.system.Object, metaclass=JumpList_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> JumpList: ...
    def save_async(self) -> windows_foundation.IAsyncAction: ...
    @_property
    def system_group_kind(self) -> JumpListSystemGroupKind: ...
    @system_group_kind.setter
    def system_group_kind(self, value: JumpListSystemGroupKind) -> None: ...
    @_property
    def items(self) -> typing.Optional[windows_foundation_collections.IVector[JumpListItem]]: ...

@typing.final
class JumpListItem_Static(type):
    def create_separator(cls) -> typing.Optional[JumpListItem]: ...
    def create_with_arguments(cls, arguments: str, display_name: str, /) -> typing.Optional[JumpListItem]: ...

@typing.final
class JumpListItem(winrt.system.Object, metaclass=JumpListItem_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> JumpListItem: ...
    @_property
    def logo(self) -> typing.Optional[windows_foundation.Uri]: ...
    @logo.setter
    def logo(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def group_name(self) -> str: ...
    @group_name.setter
    def group_name(self, value: str) -> None: ...
    @_property
    def display_name(self) -> str: ...
    @display_name.setter
    def display_name(self, value: str) -> None: ...
    @_property
    def description(self) -> str: ...
    @description.setter
    def description(self, value: str) -> None: ...
    @_property
    def arguments(self) -> str: ...
    @_property
    def kind(self) -> JumpListItemKind: ...
    @_property
    def removed_by_user(self) -> bool: ...

@typing.final
class SecondaryTile_Static(type):
    def exists(cls, tile_id: str, /) -> bool: ...
    @typing.overload
    def find_all_async(cls) -> windows_foundation.IAsyncOperation[windows_foundation_collections.IVectorView[SecondaryTile]]: ...
    @typing.overload
    def find_all_async(cls, application_id: str, /) -> windows_foundation.IAsyncOperation[windows_foundation_collections.IVectorView[SecondaryTile]]: ...
    def find_all_for_package_async(cls) -> windows_foundation.IAsyncOperation[windows_foundation_collections.IVectorView[SecondaryTile]]: ...

@typing.final
class SecondaryTile(winrt.system.Object, metaclass=SecondaryTile_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SecondaryTile: ...
    @typing.overload
    def __new__(cls: typing.Type[SecondaryTile], tile_id: str, display_name: str, arguments: str, square150x150_logo: typing.Optional[windows_foundation.Uri], desired_size: TileSize) -> SecondaryTile: ...
    @typing.overload
    def __new__(cls: typing.Type[SecondaryTile], tile_id: str, short_name: str, display_name: str, arguments: str, tile_options: TileOptions, logo_reference: typing.Optional[windows_foundation.Uri]) -> SecondaryTile: ...
    @typing.overload
    def __new__(cls: typing.Type[SecondaryTile], tile_id: str, short_name: str, display_name: str, arguments: str, tile_options: TileOptions, logo_reference: typing.Optional[windows_foundation.Uri], wide_logo_reference: typing.Optional[windows_foundation.Uri]) -> SecondaryTile: ...
    @typing.overload
    def __new__(cls: typing.Type[SecondaryTile], tile_id: str) -> SecondaryTile: ...
    @typing.overload
    def __new__(cls: typing.Type[SecondaryTile]) -> SecondaryTile: ...
    @typing.overload
    def request_create_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def request_create_async(self, invocation_point: windows_foundation.Point, /) -> windows_foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def request_create_for_selection_async(self, selection: windows_foundation.Rect, /) -> windows_foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def request_create_for_selection_async(self, selection: windows_foundation.Rect, preferred_placement: windows_ui_popups.Placement, /) -> windows_foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def request_delete_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def request_delete_async(self, invocation_point: windows_foundation.Point, /) -> windows_foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def request_delete_for_selection_async(self, selection: windows_foundation.Rect, /) -> windows_foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def request_delete_for_selection_async(self, selection: windows_foundation.Rect, preferred_placement: windows_ui_popups.Placement, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def update_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def add_visual_elements_requested(self, handler: windows_foundation.TypedEventHandler[SecondaryTile, VisualElementsRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_visual_elements_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def short_name(self) -> str: ...
    @short_name.setter
    def short_name(self, value: str) -> None: ...
    @_property
    def logo(self) -> typing.Optional[windows_foundation.Uri]: ...
    @logo.setter
    def logo(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def tile_id(self) -> str: ...
    @tile_id.setter
    def tile_id(self, value: str) -> None: ...
    @_property
    def lock_screen_display_badge_and_tile_text(self) -> bool: ...
    @lock_screen_display_badge_and_tile_text.setter
    def lock_screen_display_badge_and_tile_text(self, value: bool) -> None: ...
    @_property
    def lock_screen_badge_logo(self) -> typing.Optional[windows_foundation.Uri]: ...
    @lock_screen_badge_logo.setter
    def lock_screen_badge_logo(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def arguments(self) -> str: ...
    @arguments.setter
    def arguments(self, value: str) -> None: ...
    @_property
    def foreground_text(self) -> ForegroundText: ...
    @foreground_text.setter
    def foreground_text(self, value: ForegroundText) -> None: ...
    @_property
    def display_name(self) -> str: ...
    @display_name.setter
    def display_name(self, value: str) -> None: ...
    @_property
    def background_color(self) -> windows_ui.Color: ...
    @background_color.setter
    def background_color(self, value: windows_ui.Color) -> None: ...
    @_property
    def wide_logo(self) -> typing.Optional[windows_foundation.Uri]: ...
    @wide_logo.setter
    def wide_logo(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def tile_options(self) -> TileOptions: ...
    @tile_options.setter
    def tile_options(self, value: TileOptions) -> None: ...
    @_property
    def small_logo(self) -> typing.Optional[windows_foundation.Uri]: ...
    @small_logo.setter
    def small_logo(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def roaming_enabled(self) -> bool: ...
    @roaming_enabled.setter
    def roaming_enabled(self, value: bool) -> None: ...
    @_property
    def phonetic_name(self) -> str: ...
    @phonetic_name.setter
    def phonetic_name(self, value: str) -> None: ...
    @_property
    def visual_elements(self) -> typing.Optional[SecondaryTileVisualElements]: ...

@typing.final
class SecondaryTileVisualElements(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SecondaryTileVisualElements: ...
    @_property
    def square150x150_logo(self) -> typing.Optional[windows_foundation.Uri]: ...
    @square150x150_logo.setter
    def square150x150_logo(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def show_name_on_wide310x150_logo(self) -> bool: ...
    @show_name_on_wide310x150_logo.setter
    def show_name_on_wide310x150_logo(self, value: bool) -> None: ...
    @_property
    def show_name_on_square310x310_logo(self) -> bool: ...
    @show_name_on_square310x310_logo.setter
    def show_name_on_square310x310_logo(self, value: bool) -> None: ...
    @_property
    def show_name_on_square150x150_logo(self) -> bool: ...
    @show_name_on_square150x150_logo.setter
    def show_name_on_square150x150_logo(self, value: bool) -> None: ...
    @_property
    def foreground_text(self) -> ForegroundText: ...
    @foreground_text.setter
    def foreground_text(self, value: ForegroundText) -> None: ...
    @_property
    def background_color(self) -> windows_ui.Color: ...
    @background_color.setter
    def background_color(self, value: windows_ui.Color) -> None: ...
    @_property
    def wide310x150_logo(self) -> typing.Optional[windows_foundation.Uri]: ...
    @wide310x150_logo.setter
    def wide310x150_logo(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def square70x70_logo(self) -> typing.Optional[windows_foundation.Uri]: ...
    @square70x70_logo.setter
    def square70x70_logo(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def square310x310_logo(self) -> typing.Optional[windows_foundation.Uri]: ...
    @square310x310_logo.setter
    def square310x310_logo(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def square30x30_logo(self) -> typing.Optional[windows_foundation.Uri]: ...
    @square30x30_logo.setter
    def square30x30_logo(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def square71x71_logo(self) -> typing.Optional[windows_foundation.Uri]: ...
    @square71x71_logo.setter
    def square71x71_logo(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def square44x44_logo(self) -> typing.Optional[windows_foundation.Uri]: ...
    @square44x44_logo.setter
    def square44x44_logo(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def mixed_reality_model(self) -> typing.Optional[TileMixedRealityModel]: ...

@typing.final
class StartScreenManager_Static(type):
    def get_default(cls) -> typing.Optional[StartScreenManager]: ...
    def get_for_user(cls, user: typing.Optional[windows_system.User], /) -> typing.Optional[StartScreenManager]: ...

@typing.final
class StartScreenManager(winrt.system.Object, metaclass=StartScreenManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StartScreenManager: ...
    def contains_app_list_entry_async(self, app_list_entry: typing.Optional[windows_applicationmodel_core.AppListEntry], /) -> windows_foundation.IAsyncOperation[bool]: ...
    def contains_secondary_tile_async(self, tile_id: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def request_add_app_list_entry_async(self, app_list_entry: typing.Optional[windows_applicationmodel_core.AppListEntry], /) -> windows_foundation.IAsyncOperation[bool]: ...
    def supports_app_list_entry(self, app_list_entry: typing.Optional[windows_applicationmodel_core.AppListEntry], /) -> bool: ...
    def try_remove_secondary_tile_async(self, tile_id: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    @_property
    def user(self) -> typing.Optional[windows_system.User]: ...

@typing.final
class TileMixedRealityModel(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TileMixedRealityModel: ...
    @_property
    def uri(self) -> typing.Optional[windows_foundation.Uri]: ...
    @uri.setter
    def uri(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def bounding_box(self) -> typing.Optional[typing.Optional[windows_perception_spatial.SpatialBoundingBox]]: ...
    @bounding_box.setter
    def bounding_box(self, value: typing.Optional[typing.Optional[windows_perception_spatial.SpatialBoundingBox]]) -> None: ...
    @_property
    def activation_behavior(self) -> TileMixedRealityModelActivationBehavior: ...
    @activation_behavior.setter
    def activation_behavior(self, value: TileMixedRealityModelActivationBehavior) -> None: ...

@typing.final
class VisualElementsRequest(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VisualElementsRequest: ...
    def get_deferral(self) -> typing.Optional[VisualElementsRequestDeferral]: ...
    @_property
    def alternate_visual_elements(self) -> typing.Optional[windows_foundation_collections.IVectorView[SecondaryTileVisualElements]]: ...
    @_property
    def deadline(self) -> datetime.datetime: ...
    @_property
    def visual_elements(self) -> typing.Optional[SecondaryTileVisualElements]: ...

@typing.final
class VisualElementsRequestDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VisualElementsRequestDeferral: ...
    def complete(self) -> None: ...

@typing.final
class VisualElementsRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VisualElementsRequestedEventArgs: ...
    @_property
    def request(self) -> typing.Optional[VisualElementsRequest]: ...

