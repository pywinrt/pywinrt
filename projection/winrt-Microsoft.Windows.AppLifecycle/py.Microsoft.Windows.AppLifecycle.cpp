// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Microsoft.Windows.AppLifecycle.h"


namespace py::cpp::Microsoft::Windows::AppLifecycle
{
    // ----- ActivationRegistrationManager class --------------------

    static PyObject* _new_ActivationRegistrationManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::AppLifecycle::ActivationRegistrationManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::AppLifecycle::ActivationRegistrationManager>::type_name);
        return nullptr;
    }

    static PyObject* ActivationRegistrationManager_RegisterForFileTypeActivation(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 5)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AppLifecycle.ActivationRegistrationManager", L"RegisterForFileTypeActivation", 5))
            {
                py::set_arg_count_version_error(5);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<py::pybuf_view<winrt::hstring, false>>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<py::pybuf_view<winrt::hstring, false>>(args, 3);
                auto param4 = py::convert_to<winrt::hstring>(args, 4);

                winrt::Microsoft::Windows::AppLifecycle::ActivationRegistrationManager::RegisterForFileTypeActivation(param0, param1, param2, param3, param4);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ActivationRegistrationManager_RegisterForProtocolActivation(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AppLifecycle.ActivationRegistrationManager", L"RegisterForProtocolActivation", 4))
            {
                py::set_arg_count_version_error(4);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);

                winrt::Microsoft::Windows::AppLifecycle::ActivationRegistrationManager::RegisterForProtocolActivation(param0, param1, param2, param3);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ActivationRegistrationManager_RegisterForStartupActivation(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AppLifecycle.ActivationRegistrationManager", L"RegisterForStartupActivation", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Microsoft::Windows::AppLifecycle::ActivationRegistrationManager::RegisterForStartupActivation(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ActivationRegistrationManager_UnregisterForFileTypeActivation(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AppLifecycle.ActivationRegistrationManager", L"UnregisterForFileTypeActivation", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<py::pybuf_view<winrt::hstring, false>>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Microsoft::Windows::AppLifecycle::ActivationRegistrationManager::UnregisterForFileTypeActivation(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ActivationRegistrationManager_UnregisterForProtocolActivation(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AppLifecycle.ActivationRegistrationManager", L"UnregisterForProtocolActivation", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Microsoft::Windows::AppLifecycle::ActivationRegistrationManager::UnregisterForProtocolActivation(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ActivationRegistrationManager_UnregisterForStartupActivation(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AppLifecycle.ActivationRegistrationManager", L"UnregisterForStartupActivation", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Microsoft::Windows::AppLifecycle::ActivationRegistrationManager::UnregisterForStartupActivation(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_ActivationRegistrationManager[] = {
        { }
    };

    static PyGetSetDef _getset_ActivationRegistrationManager[] = {
        { }
    };

    static PyType_Slot _type_slots_ActivationRegistrationManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ActivationRegistrationManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ActivationRegistrationManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ActivationRegistrationManager) },
        { },
    };

    static PyType_Spec type_spec_ActivationRegistrationManager =
    {
        "winrt._winrt_microsoft_windows_applifecycle.ActivationRegistrationManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ActivationRegistrationManager
    };

    static PyGetSetDef getset_ActivationRegistrationManager_Static[] = {
        { }
    };

    static PyMethodDef methods_ActivationRegistrationManager_Static[] = {
        { "register_for_file_type_activation", reinterpret_cast<PyCFunction>(ActivationRegistrationManager_RegisterForFileTypeActivation), METH_VARARGS, nullptr },
        { "register_for_protocol_activation", reinterpret_cast<PyCFunction>(ActivationRegistrationManager_RegisterForProtocolActivation), METH_VARARGS, nullptr },
        { "register_for_startup_activation", reinterpret_cast<PyCFunction>(ActivationRegistrationManager_RegisterForStartupActivation), METH_VARARGS, nullptr },
        { "unregister_for_file_type_activation", reinterpret_cast<PyCFunction>(ActivationRegistrationManager_UnregisterForFileTypeActivation), METH_VARARGS, nullptr },
        { "unregister_for_protocol_activation", reinterpret_cast<PyCFunction>(ActivationRegistrationManager_UnregisterForProtocolActivation), METH_VARARGS, nullptr },
        { "unregister_for_startup_activation", reinterpret_cast<PyCFunction>(ActivationRegistrationManager_UnregisterForStartupActivation), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_ActivationRegistrationManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ActivationRegistrationManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_ActivationRegistrationManager_Static) },
        { }
    };

    static PyType_Spec type_spec_ActivationRegistrationManager_Static =
    {
        "winrt._winrt_microsoft_windows_applifecycle.ActivationRegistrationManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_ActivationRegistrationManager_Static
    };

    // ----- AppActivationArguments class --------------------

    static PyObject* _new_AppActivationArguments(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::AppLifecycle::AppActivationArguments>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::AppLifecycle::AppActivationArguments>::type_name);
        return nullptr;
    }

    static void _dealloc_AppActivationArguments(py::wrapper::Microsoft::Windows::AppLifecycle::AppActivationArguments* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppActivationArguments_get_Data(py::wrapper::Microsoft::Windows::AppLifecycle::AppActivationArguments* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AppLifecycle.AppActivationArguments", L"Data"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Data());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppActivationArguments_get_Kind(py::wrapper::Microsoft::Windows::AppLifecycle::AppActivationArguments* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AppLifecycle.AppActivationArguments", L"Kind"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppActivationArguments(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::AppLifecycle::AppActivationArguments>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppActivationArguments(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::AppLifecycle::AppActivationArguments>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppActivationArguments[] = {
        { "_assign_array_", _assign_array_AppActivationArguments, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppActivationArguments), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppActivationArguments[] = {
        { "data", reinterpret_cast<getter>(AppActivationArguments_get_Data), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(AppActivationArguments_get_Kind), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppActivationArguments[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppActivationArguments) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppActivationArguments) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppActivationArguments) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppActivationArguments) },
        { },
    };

    static PyType_Spec type_spec_AppActivationArguments =
    {
        "winrt._winrt_microsoft_windows_applifecycle.AppActivationArguments",
        sizeof(py::wrapper::Microsoft::Windows::AppLifecycle::AppActivationArguments),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppActivationArguments
    };

    // ----- AppInstance class --------------------

    static PyObject* _new_AppInstance(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::AppLifecycle::AppInstance>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::AppLifecycle::AppInstance>::type_name);
        return nullptr;
    }

    static void _dealloc_AppInstance(py::wrapper::Microsoft::Windows::AppLifecycle::AppInstance* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppInstance_FindOrRegisterForKey(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AppLifecycle.AppInstance", L"FindOrRegisterForKey", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Microsoft::Windows::AppLifecycle::AppInstance::FindOrRegisterForKey(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstance_GetActivatedEventArgs(py::wrapper::Microsoft::Windows::AppLifecycle::AppInstance* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AppLifecycle.AppInstance", L"GetActivatedEventArgs", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetActivatedEventArgs());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstance_GetCurrent(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AppLifecycle.AppInstance", L"GetCurrent", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Microsoft::Windows::AppLifecycle::AppInstance::GetCurrent());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstance_GetInstances(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AppLifecycle.AppInstance", L"GetInstances", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Microsoft::Windows::AppLifecycle::AppInstance::GetInstances());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstance_RedirectActivationToAsync(py::wrapper::Microsoft::Windows::AppLifecycle::AppInstance* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AppLifecycle.AppInstance", L"RedirectActivationToAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Microsoft::Windows::AppLifecycle::AppActivationArguments>(args, 0);

                return py::convert(self->obj.RedirectActivationToAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstance_Restart(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AppLifecycle.AppInstance", L"Restart", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Microsoft::Windows::AppLifecycle::AppInstance::Restart(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstance_UnregisterKey(py::wrapper::Microsoft::Windows::AppLifecycle::AppInstance* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.AppLifecycle.AppInstance", L"UnregisterKey", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.UnregisterKey();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppInstance_get_IsCurrent(py::wrapper::Microsoft::Windows::AppLifecycle::AppInstance* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AppLifecycle.AppInstance", L"IsCurrent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsCurrent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstance_get_Key(py::wrapper::Microsoft::Windows::AppLifecycle::AppInstance* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AppLifecycle.AppInstance", L"Key"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Key());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstance_get_ProcessId(py::wrapper::Microsoft::Windows::AppLifecycle::AppInstance* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Microsoft.Windows.AppLifecycle.AppInstance", L"ProcessId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProcessId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstance_add_Activated(py::wrapper::Microsoft::Windows::AppLifecycle::AppInstance* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.AppLifecycle.AppInstance", L"Activated"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Microsoft::Windows::AppLifecycle::AppActivationArguments>>(arg);

            return py::convert(self->obj.Activated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppInstance_remove_Activated(py::wrapper::Microsoft::Windows::AppLifecycle::AppInstance* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Microsoft.Windows.AppLifecycle.AppInstance", L"Activated"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Activated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppInstance(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::AppLifecycle::AppInstance>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppInstance(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Microsoft::Windows::AppLifecycle::AppInstance>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppInstance[] = {
        { "get_activated_event_args", reinterpret_cast<PyCFunction>(AppInstance_GetActivatedEventArgs), METH_VARARGS, nullptr },
        { "redirect_activation_to_async", reinterpret_cast<PyCFunction>(AppInstance_RedirectActivationToAsync), METH_VARARGS, nullptr },
        { "unregister_key", reinterpret_cast<PyCFunction>(AppInstance_UnregisterKey), METH_VARARGS, nullptr },
        { "add_activated", reinterpret_cast<PyCFunction>(AppInstance_add_Activated), METH_O, nullptr },
        { "remove_activated", reinterpret_cast<PyCFunction>(AppInstance_remove_Activated), METH_O, nullptr },
        { "_assign_array_", _assign_array_AppInstance, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppInstance), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppInstance[] = {
        { "is_current", reinterpret_cast<getter>(AppInstance_get_IsCurrent), nullptr, nullptr, nullptr },
        { "key", reinterpret_cast<getter>(AppInstance_get_Key), nullptr, nullptr, nullptr },
        { "process_id", reinterpret_cast<getter>(AppInstance_get_ProcessId), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppInstance[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppInstance) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppInstance) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppInstance) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppInstance) },
        { },
    };

    static PyType_Spec type_spec_AppInstance =
    {
        "winrt._winrt_microsoft_windows_applifecycle.AppInstance",
        sizeof(py::wrapper::Microsoft::Windows::AppLifecycle::AppInstance),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppInstance
    };

    static PyGetSetDef getset_AppInstance_Static[] = {
        { }
    };

    static PyMethodDef methods_AppInstance_Static[] = {
        { "find_or_register_for_key", reinterpret_cast<PyCFunction>(AppInstance_FindOrRegisterForKey), METH_VARARGS, nullptr },
        { "get_current", reinterpret_cast<PyCFunction>(AppInstance_GetCurrent), METH_VARARGS, nullptr },
        { "get_instances", reinterpret_cast<PyCFunction>(AppInstance_GetInstances), METH_VARARGS, nullptr },
        { "restart", reinterpret_cast<PyCFunction>(AppInstance_Restart), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_AppInstance_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_AppInstance_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_AppInstance_Static) },
        { }
    };

    static PyType_Spec type_spec_AppInstance_Static =
    {
        "winrt._winrt_microsoft_windows_applifecycle.AppInstance_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_AppInstance_Static
    };

    // ----- Microsoft.Windows.AppLifecycle Initialization --------------------
    PyDoc_STRVAR(module_doc, "Microsoft::Windows::AppLifecycle");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_microsoft_windows_applifecycle",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Microsoft::Windows::AppLifecycle

PyMODINIT_FUNC PyInit__winrt_microsoft_windows_applifecycle(void) noexcept
{
    using namespace py::cpp::Microsoft::Windows::AppLifecycle;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_ActivationRegistrationManager_Static{PyType_FromSpec(&type_spec_ActivationRegistrationManager_Static)};
    if (!type_ActivationRegistrationManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ActivationRegistrationManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ActivationRegistrationManager_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppActivationArguments, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_AppInstance_Static{PyType_FromSpec(&type_spec_AppInstance_Static)};
    if (!type_AppInstance_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppInstance, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_AppInstance_Static.get())) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
