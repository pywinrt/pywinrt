# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.core
import winrt.windows.foundation
import winrt.windows.foundation.collections

from winrt.microsoft.windows.applifecycle import ExtendedActivationKind

Self = typing.TypeVar('Self')

@typing.final
class ActivationRegistrationManager_Static(type):
    def register_for_file_type_activation(cls, supported_file_types: winrt.system.Array[str], logo: str, display_name: str, supported_verbs: winrt.system.Array[str], exe_path: str, /) -> None: ...
    def register_for_protocol_activation(cls, scheme: str, logo: str, display_name: str, exe_path: str, /) -> None: ...
    def register_for_startup_activation(cls, task_id: str, exe_path: str, /) -> None: ...
    def unregister_for_file_type_activation(cls, file_types: winrt.system.Array[str], exe_path: str, /) -> None: ...
    def unregister_for_protocol_activation(cls, scheme: str, exe_path: str, /) -> None: ...
    def unregister_for_startup_activation(cls, task_id: str, /) -> None: ...

@typing.final
class ActivationRegistrationManager(winrt.system.Object, metaclass=ActivationRegistrationManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ActivationRegistrationManager: ...

@typing.final
class AppActivationArguments(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppActivationArguments: ...
    @_property
    def data(self) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def kind(self) -> ExtendedActivationKind: ...

@typing.final
class AppInstance_Static(type):
    def find_or_register_for_key(cls, key: str, /) -> typing.Optional[AppInstance]: ...
    def get_current(cls) -> typing.Optional[AppInstance]: ...
    def get_instances(cls) -> typing.Optional[winrt.windows.foundation.collections.IVector[AppInstance]]: ...
    def restart(cls, arguments: str, /) -> winrt.windows.applicationmodel.core.AppRestartFailureReason: ...

@typing.final
class AppInstance(winrt.system.Object, metaclass=AppInstance_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppInstance: ...
    def get_activated_event_args(self) -> typing.Optional[AppActivationArguments]: ...
    def redirect_activation_to_async(self, args: typing.Optional[AppActivationArguments], /) -> winrt.windows.foundation.IAsyncAction: ...
    def unregister_key(self) -> None: ...
    def add_activated(self, handler: winrt.windows.foundation.EventHandler[AppActivationArguments], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_activated(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_current(self) -> bool: ...
    @_property
    def key(self) -> str: ...
    @_property
    def process_id(self) -> winrt.system.UInt32: ...

