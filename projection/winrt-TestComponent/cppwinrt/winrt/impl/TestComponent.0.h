// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240111.5

#pragma once
#ifndef WINRT_TestComponent_0_H
#define WINRT_TestComponent_0_H
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    template <typename T> struct WINRT_IMPL_EMPTY_BASES EventHandler;
    struct EventRegistrationToken;
    struct IAsyncAction;
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IReference;
    template <typename TSender, typename TResult> struct WINRT_IMPL_EMPTY_BASES TypedEventHandler;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IIterable;
    template <typename K, typename V> struct WINRT_IMPL_EMPTY_BASES IKeyValuePair;
    template <typename K, typename V> struct WINRT_IMPL_EMPTY_BASES IMapView;
    template <typename K, typename V> struct WINRT_IMPL_EMPTY_BASES IMap;
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IVectorView;
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IVector;
}
WINRT_EXPORT namespace winrt::TestComponent
{
    struct ITestRunnerStatics;
    struct ITests;
    struct TestRunner;
    struct Blittable;
    struct Nested;
    struct NonBlittable;
    struct Array10Handler;
    struct Array11Handler;
    struct Array12Handler;
    struct Array13Handler;
    struct Array14Handler;
    struct Array15Handler;
    struct Array1Handler;
    struct Array2Handler;
    struct Array3Handler;
    struct Array4Handler;
    struct Array5Handler;
    struct Array6Handler;
    struct Array7Handler;
    struct Array8Handler;
    struct Array9Handler;
    struct Async1Handler;
    struct Async2Handler;
    struct Async3Handler;
    struct Async4Handler;
    struct Collection1Handler;
    struct Collection2Handler;
    struct Collection3Handler;
    struct Collection4Handler;
    struct Collection5Handler;
    struct Collection6Handler;
    struct Param10Handler;
    struct Param11Handler;
    struct Param12Handler;
    struct Param13Handler;
    struct Param14Handler;
    struct Param15Handler;
    struct Param1Handler;
    struct Param2Handler;
    struct Param3Handler;
    struct Param4Handler;
    struct Param5Handler;
    struct Param6Handler;
    struct Param7Handler;
    struct Param8Handler;
    struct Param9Handler;
    struct TestHandler;
}
namespace winrt::impl
{
    template <> struct category<winrt::TestComponent::ITestRunnerStatics>{ using type = interface_category; };
    template <> struct category<winrt::TestComponent::ITests>{ using type = interface_category; };
    template <> struct category<winrt::TestComponent::TestRunner>{ using type = class_category; };
    template <> struct category<winrt::TestComponent::Blittable>{ using type = struct_category<uint8_t, uint16_t, uint32_t, uint64_t, int16_t, int32_t, int64_t, float, double, winrt::guid>; };
    template <> struct category<winrt::TestComponent::Nested>{ using type = struct_category<winrt::TestComponent::Blittable, winrt::TestComponent::NonBlittable>; };
    template <> struct category<winrt::TestComponent::NonBlittable>{ using type = struct_category<bool, char16_t, hstring, winrt::Windows::Foundation::IReference<int64_t>>; };
    template <> struct category<winrt::TestComponent::Array10Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Array11Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Array12Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Array13Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Array14Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Array15Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Array1Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Array2Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Array3Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Array4Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Array5Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Array6Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Array7Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Array8Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Array9Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Async1Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Async2Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Async3Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Async4Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Collection1Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Collection2Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Collection3Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Collection4Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Collection5Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Collection6Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Param10Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Param11Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Param12Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Param13Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Param14Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Param15Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Param1Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Param2Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Param3Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Param4Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Param5Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Param6Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Param7Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Param8Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::Param9Handler>{ using type = delegate_category; };
    template <> struct category<winrt::TestComponent::TestHandler>{ using type = delegate_category; };
    template <> inline constexpr auto& name_v<winrt::TestComponent::TestRunner> = L"TestComponent.TestRunner";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Blittable> = L"TestComponent.Blittable";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Nested> = L"TestComponent.Nested";
    template <> inline constexpr auto& name_v<winrt::TestComponent::NonBlittable> = L"TestComponent.NonBlittable";
    template <> inline constexpr auto& name_v<winrt::TestComponent::ITestRunnerStatics> = L"TestComponent.ITestRunnerStatics";
    template <> inline constexpr auto& name_v<winrt::TestComponent::ITests> = L"TestComponent.ITests";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Array10Handler> = L"TestComponent.Array10Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Array11Handler> = L"TestComponent.Array11Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Array12Handler> = L"TestComponent.Array12Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Array13Handler> = L"TestComponent.Array13Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Array14Handler> = L"TestComponent.Array14Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Array15Handler> = L"TestComponent.Array15Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Array1Handler> = L"TestComponent.Array1Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Array2Handler> = L"TestComponent.Array2Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Array3Handler> = L"TestComponent.Array3Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Array4Handler> = L"TestComponent.Array4Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Array5Handler> = L"TestComponent.Array5Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Array6Handler> = L"TestComponent.Array6Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Array7Handler> = L"TestComponent.Array7Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Array8Handler> = L"TestComponent.Array8Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Array9Handler> = L"TestComponent.Array9Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Async1Handler> = L"TestComponent.Async1Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Async2Handler> = L"TestComponent.Async2Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Async3Handler> = L"TestComponent.Async3Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Async4Handler> = L"TestComponent.Async4Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Collection1Handler> = L"TestComponent.Collection1Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Collection2Handler> = L"TestComponent.Collection2Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Collection3Handler> = L"TestComponent.Collection3Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Collection4Handler> = L"TestComponent.Collection4Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Collection5Handler> = L"TestComponent.Collection5Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Collection6Handler> = L"TestComponent.Collection6Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Param10Handler> = L"TestComponent.Param10Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Param11Handler> = L"TestComponent.Param11Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Param12Handler> = L"TestComponent.Param12Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Param13Handler> = L"TestComponent.Param13Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Param14Handler> = L"TestComponent.Param14Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Param15Handler> = L"TestComponent.Param15Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Param1Handler> = L"TestComponent.Param1Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Param2Handler> = L"TestComponent.Param2Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Param3Handler> = L"TestComponent.Param3Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Param4Handler> = L"TestComponent.Param4Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Param5Handler> = L"TestComponent.Param5Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Param6Handler> = L"TestComponent.Param6Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Param7Handler> = L"TestComponent.Param7Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Param8Handler> = L"TestComponent.Param8Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::Param9Handler> = L"TestComponent.Param9Handler";
    template <> inline constexpr auto& name_v<winrt::TestComponent::TestHandler> = L"TestComponent.TestHandler";
    template <> inline constexpr guid guid_v<winrt::TestComponent::ITestRunnerStatics>{ 0x1C772E53,0x4E68,0x56DB,{ 0xB2,0x83,0x2F,0xBC,0xF4,0xCE,0xBB,0xE5 } }; // 1C772E53-4E68-56DB-B283-2FBCF4CEBBE5
    template <> inline constexpr guid guid_v<winrt::TestComponent::ITests>{ 0x44F5EA16,0xA160,0x59E7,{ 0x95,0xA2,0xCD,0x66,0x61,0x09,0x06,0xEA } }; // 44F5EA16-A160-59E7-95A2-CD66610906EA
    template <> inline constexpr guid guid_v<winrt::TestComponent::Array10Handler>{ 0xC901DD1B,0x433D,0x565E,{ 0xA8,0xE7,0x0D,0xBD,0x77,0x76,0x1A,0xEA } }; // C901DD1B-433D-565E-A8E7-0DBD77761AEA
    template <> inline constexpr guid guid_v<winrt::TestComponent::Array11Handler>{ 0xB4D851CD,0x5C24,0x5511,{ 0xA6,0xAC,0xF5,0x65,0x85,0x00,0x2A,0x46 } }; // B4D851CD-5C24-5511-A6AC-F56585002A46
    template <> inline constexpr guid guid_v<winrt::TestComponent::Array12Handler>{ 0xAB959AC1,0x7EF5,0x5F76,{ 0x9A,0xDD,0x82,0x03,0xBD,0xEB,0xB1,0xCE } }; // AB959AC1-7EF5-5F76-9ADD-8203BDEBB1CE
    template <> inline constexpr guid guid_v<winrt::TestComponent::Array13Handler>{ 0x55FD07CF,0x8767,0x55FF,{ 0xA1,0x88,0x75,0x5A,0x95,0x3E,0xD0,0x52 } }; // 55FD07CF-8767-55FF-A188-755A953ED052
    template <> inline constexpr guid guid_v<winrt::TestComponent::Array14Handler>{ 0xCDD9A4DB,0xC841,0x5CE4,{ 0xA8,0x8B,0xBB,0x17,0xF9,0xD0,0x12,0x49 } }; // CDD9A4DB-C841-5CE4-A88B-BB17F9D01249
    template <> inline constexpr guid guid_v<winrt::TestComponent::Array15Handler>{ 0xF6C65099,0xAA85,0x51A0,{ 0x81,0xED,0x81,0x93,0xDE,0x43,0x83,0xE1 } }; // F6C65099-AA85-51A0-81ED-8193DE4383E1
    template <> inline constexpr guid guid_v<winrt::TestComponent::Array1Handler>{ 0x1E06318F,0xE65A,0x5D7B,{ 0xB5,0x2A,0xCA,0x18,0x8D,0x50,0xD4,0x31 } }; // 1E06318F-E65A-5D7B-B52A-CA188D50D431
    template <> inline constexpr guid guid_v<winrt::TestComponent::Array2Handler>{ 0x9E2F3897,0xE409,0x5157,{ 0x87,0x8E,0x9F,0x27,0xDA,0x62,0x4F,0x7C } }; // 9E2F3897-E409-5157-878E-9F27DA624F7C
    template <> inline constexpr guid guid_v<winrt::TestComponent::Array3Handler>{ 0x73FAD5AB,0xA41E,0x54EC,{ 0x88,0xC1,0x37,0xB8,0xB9,0xE2,0xB5,0xE1 } }; // 73FAD5AB-A41E-54EC-88C1-37B8B9E2B5E1
    template <> inline constexpr guid guid_v<winrt::TestComponent::Array4Handler>{ 0x4B806F71,0x54A2,0x523A,{ 0xAE,0x7E,0x5D,0x3C,0xB1,0x5F,0x2A,0xB2 } }; // 4B806F71-54A2-523A-AE7E-5D3CB15F2AB2
    template <> inline constexpr guid guid_v<winrt::TestComponent::Array5Handler>{ 0xE7FDD481,0xC62A,0x59A7,{ 0xB5,0x7B,0xD2,0x3E,0xCB,0x77,0xBF,0x72 } }; // E7FDD481-C62A-59A7-B57B-D23ECB77BF72
    template <> inline constexpr guid guid_v<winrt::TestComponent::Array6Handler>{ 0x7C5E0781,0x0707,0x5B67,{ 0xB7,0xDF,0x82,0x2C,0x15,0xE8,0xA3,0x1B } }; // 7C5E0781-0707-5B67-B7DF-822C15E8A31B
    template <> inline constexpr guid guid_v<winrt::TestComponent::Array7Handler>{ 0x418AACFB,0xC605,0x58F7,{ 0x9B,0x41,0xD5,0x86,0xE1,0xBB,0xDE,0x8A } }; // 418AACFB-C605-58F7-9B41-D586E1BBDE8A
    template <> inline constexpr guid guid_v<winrt::TestComponent::Array8Handler>{ 0x13D30DB4,0xB4E9,0x5607,{ 0x8B,0x68,0x45,0x50,0xF4,0x83,0x5A,0x06 } }; // 13D30DB4-B4E9-5607-8B68-4550F4835A06
    template <> inline constexpr guid guid_v<winrt::TestComponent::Array9Handler>{ 0x3CF48A93,0xEECE,0x5489,{ 0x8C,0xC4,0x35,0x84,0x02,0x2A,0x91,0x1F } }; // 3CF48A93-EECE-5489-8CC4-3584022A911F
    template <> inline constexpr guid guid_v<winrt::TestComponent::Async1Handler>{ 0x7DFEC79C,0x8249,0x5B15,{ 0xB0,0xFE,0xCE,0x00,0x04,0x8B,0x39,0xF1 } }; // 7DFEC79C-8249-5B15-B0FE-CE00048B39F1
    template <> inline constexpr guid guid_v<winrt::TestComponent::Async2Handler>{ 0x3BEC45A5,0x43E9,0x593E,{ 0xAD,0x73,0xAA,0x79,0xFA,0xF7,0xAE,0x97 } }; // 3BEC45A5-43E9-593E-AD73-AA79FAF7AE97
    template <> inline constexpr guid guid_v<winrt::TestComponent::Async3Handler>{ 0x8EFF5348,0x9556,0x5757,{ 0xAA,0x68,0xD3,0x84,0x95,0x74,0x59,0xB2 } }; // 8EFF5348-9556-5757-AA68-D384957459B2
    template <> inline constexpr guid guid_v<winrt::TestComponent::Async4Handler>{ 0x508C3203,0x26CB,0x5680,{ 0xAF,0x4F,0xD2,0x2C,0xE2,0xFB,0x8F,0x0C } }; // 508C3203-26CB-5680-AF4F-D22CE2FB8F0C
    template <> inline constexpr guid guid_v<winrt::TestComponent::Collection1Handler>{ 0x27440614,0xA595,0x5B17,{ 0x8E,0x79,0x75,0x84,0x18,0x86,0x32,0x5C } }; // 27440614-A595-5B17-8E79-75841886325C
    template <> inline constexpr guid guid_v<winrt::TestComponent::Collection2Handler>{ 0x4886E659,0xFB0E,0x505D,{ 0xA5,0x56,0x5A,0xB1,0x56,0xAA,0x12,0xD7 } }; // 4886E659-FB0E-505D-A556-5AB156AA12D7
    template <> inline constexpr guid guid_v<winrt::TestComponent::Collection3Handler>{ 0x55FA40AF,0x75DF,0x5CAB,{ 0x97,0xEF,0x28,0x14,0x76,0x84,0x11,0x2E } }; // 55FA40AF-75DF-5CAB-97EF-28147684112E
    template <> inline constexpr guid guid_v<winrt::TestComponent::Collection4Handler>{ 0x21B1A617,0x354D,0x5245,{ 0x8F,0x26,0x44,0x6F,0x49,0x0F,0xEA,0x5F } }; // 21B1A617-354D-5245-8F26-446F490FEA5F
    template <> inline constexpr guid guid_v<winrt::TestComponent::Collection5Handler>{ 0x8568C69E,0x59E5,0x54FD,{ 0xB1,0xE3,0x05,0x43,0x39,0xAB,0xC0,0xB8 } }; // 8568C69E-59E5-54FD-B1E3-054339ABC0B8
    template <> inline constexpr guid guid_v<winrt::TestComponent::Collection6Handler>{ 0x806A6057,0xFF30,0x5333,{ 0xA7,0x45,0x91,0x6A,0x9E,0x67,0x32,0x48 } }; // 806A6057-FF30-5333-A745-916A9E673248
    template <> inline constexpr guid guid_v<winrt::TestComponent::Param10Handler>{ 0xC082714A,0x9E96,0x589C,{ 0xAC,0x8C,0xE9,0xA7,0x85,0xD2,0xF7,0x20 } }; // C082714A-9E96-589C-AC8C-E9A785D2F720
    template <> inline constexpr guid guid_v<winrt::TestComponent::Param11Handler>{ 0x96F98092,0xF685,0x53B6,{ 0x96,0x7F,0xE7,0xFE,0x69,0x25,0x69,0xE6 } }; // 96F98092-F685-53B6-967F-E7FE692569E6
    template <> inline constexpr guid guid_v<winrt::TestComponent::Param12Handler>{ 0x747A342C,0x51D1,0x5704,{ 0xA7,0xBC,0x1C,0x46,0x9A,0x6F,0xA3,0x27 } }; // 747A342C-51D1-5704-A7BC-1C469A6FA327
    template <> inline constexpr guid guid_v<winrt::TestComponent::Param13Handler>{ 0xF5C8589F,0xFCB0,0x5D45,{ 0x9F,0x53,0xD0,0x40,0x42,0xC1,0x47,0x8D } }; // F5C8589F-FCB0-5D45-9F53-D04042C1478D
    template <> inline constexpr guid guid_v<winrt::TestComponent::Param14Handler>{ 0x89CF0047,0x9FC3,0x5993,{ 0x9D,0x3D,0xA3,0x7E,0xA8,0x62,0x35,0xDD } }; // 89CF0047-9FC3-5993-9D3D-A37EA86235DD
    template <> inline constexpr guid guid_v<winrt::TestComponent::Param15Handler>{ 0x78F2E0F2,0x927B,0x5A01,{ 0x8B,0x3A,0x7A,0x85,0x3F,0x5A,0x76,0x37 } }; // 78F2E0F2-927B-5A01-8B3A-7A853F5A7637
    template <> inline constexpr guid guid_v<winrt::TestComponent::Param1Handler>{ 0xB68E5D93,0x6F27,0x5BC4,{ 0xA9,0x71,0x53,0x8A,0x21,0x6F,0x62,0xD5 } }; // B68E5D93-6F27-5BC4-A971-538A216F62D5
    template <> inline constexpr guid guid_v<winrt::TestComponent::Param2Handler>{ 0xF262E6CB,0x0A25,0x594F,{ 0xB2,0xAD,0x27,0xC9,0x67,0x49,0xCD,0x7F } }; // F262E6CB-0A25-594F-B2AD-27C96749CD7F
    template <> inline constexpr guid guid_v<winrt::TestComponent::Param3Handler>{ 0x8BD8057F,0x9D25,0x5F06,{ 0x87,0x35,0x4A,0x36,0xAD,0x98,0xA6,0x8D } }; // 8BD8057F-9D25-5F06-8735-4A36AD98A68D
    template <> inline constexpr guid guid_v<winrt::TestComponent::Param4Handler>{ 0x2153224C,0x2886,0x5D5A,{ 0xAF,0xC2,0x72,0x47,0xCF,0x6B,0xA9,0xE7 } }; // 2153224C-2886-5D5A-AFC2-7247CF6BA9E7
    template <> inline constexpr guid guid_v<winrt::TestComponent::Param5Handler>{ 0xB5AE4AAA,0x7255,0x5B2C,{ 0xAF,0x1C,0xC0,0x4A,0x2F,0xB3,0x23,0x3B } }; // B5AE4AAA-7255-5B2C-AF1C-C04A2FB3233B
    template <> inline constexpr guid guid_v<winrt::TestComponent::Param6Handler>{ 0xE0DF3BDA,0x25A7,0x503A,{ 0xA5,0x4A,0xFB,0x08,0x4E,0x58,0x88,0x04 } }; // E0DF3BDA-25A7-503A-A54A-FB084E588804
    template <> inline constexpr guid guid_v<winrt::TestComponent::Param7Handler>{ 0x6BF8C743,0xF72E,0x55E8,{ 0x97,0xE4,0xCB,0xF4,0xD7,0x9F,0x9D,0xF0 } }; // 6BF8C743-F72E-55E8-97E4-CBF4D79F9DF0
    template <> inline constexpr guid guid_v<winrt::TestComponent::Param8Handler>{ 0x871C3026,0x1BAB,0x54CA,{ 0xA4,0x71,0x8F,0x38,0x9A,0x22,0xDA,0x83 } }; // 871C3026-1BAB-54CA-A471-8F389A22DA83
    template <> inline constexpr guid guid_v<winrt::TestComponent::Param9Handler>{ 0x557F874C,0x407B,0x538E,{ 0xA7,0xE6,0xD1,0x58,0xCA,0x4E,0x84,0x78 } }; // 557F874C-407B-538E-A7E6-D158CA4E8478
    template <> inline constexpr guid guid_v<winrt::TestComponent::TestHandler>{ 0x256D039D,0xCEDF,0x5C56,{ 0xBA,0xAD,0xEF,0xE6,0x71,0x64,0xC9,0x56 } }; // 256D039D-CEDF-5C56-BAAD-EFE67164C956
    template <> struct abi<winrt::TestComponent::ITestRunnerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall TestProducer(void*) noexcept = 0;
            virtual int32_t __stdcall TestConsumer(void*, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall TestSelf() noexcept = 0;
            virtual int32_t __stdcall MakeTests(void**) noexcept = 0;
            virtual int32_t __stdcall CreateInt32Vector(void**) noexcept = 0;
            virtual int32_t __stdcall CreateStringVector(void**) noexcept = 0;
            virtual int32_t __stdcall CreateStringableVector(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::ITests>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Percentage(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall Simple() noexcept = 0;
            virtual int32_t __stdcall Param1(bool, bool*, bool*) noexcept = 0;
            virtual int32_t __stdcall Param2(uint8_t, uint8_t*, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall Param3(uint16_t, uint16_t*, uint16_t*) noexcept = 0;
            virtual int32_t __stdcall Param4(uint32_t, uint32_t*, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall Param5(uint64_t, uint64_t*, uint64_t*) noexcept = 0;
            virtual int32_t __stdcall Param6(int16_t, int16_t*, int16_t*) noexcept = 0;
            virtual int32_t __stdcall Param7(int32_t, int32_t*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall Param8(int64_t, int64_t*, int64_t*) noexcept = 0;
            virtual int32_t __stdcall Param9(float, float*, float*) noexcept = 0;
            virtual int32_t __stdcall Param10(double, double*, double*) noexcept = 0;
            virtual int32_t __stdcall Param11(char16_t, char16_t*, char16_t*) noexcept = 0;
            virtual int32_t __stdcall Param12(void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall Param13(struct struct_TestComponent_Blittable, struct struct_TestComponent_Blittable const&, struct struct_TestComponent_Blittable*, struct struct_TestComponent_Blittable*) noexcept = 0;
            virtual int32_t __stdcall Param14(struct struct_TestComponent_NonBlittable, struct struct_TestComponent_NonBlittable const&, struct struct_TestComponent_NonBlittable*, struct struct_TestComponent_NonBlittable*) noexcept = 0;
            virtual int32_t __stdcall Param15(struct struct_TestComponent_Nested, struct struct_TestComponent_Nested const&, struct struct_TestComponent_Nested*, struct struct_TestComponent_Nested*) noexcept = 0;
            virtual int32_t __stdcall Param1Call(void*) noexcept = 0;
            virtual int32_t __stdcall Param2Call(void*) noexcept = 0;
            virtual int32_t __stdcall Param3Call(void*) noexcept = 0;
            virtual int32_t __stdcall Param4Call(void*) noexcept = 0;
            virtual int32_t __stdcall Param5Call(void*) noexcept = 0;
            virtual int32_t __stdcall Param6Call(void*) noexcept = 0;
            virtual int32_t __stdcall Param7Call(void*) noexcept = 0;
            virtual int32_t __stdcall Param8Call(void*) noexcept = 0;
            virtual int32_t __stdcall Param9Call(void*) noexcept = 0;
            virtual int32_t __stdcall Param10Call(void*) noexcept = 0;
            virtual int32_t __stdcall Param11Call(void*) noexcept = 0;
            virtual int32_t __stdcall Param12Call(void*) noexcept = 0;
            virtual int32_t __stdcall Param13Call(void*) noexcept = 0;
            virtual int32_t __stdcall Param14Call(void*) noexcept = 0;
            virtual int32_t __stdcall Param15Call(void*) noexcept = 0;
            virtual int32_t __stdcall Array1(uint32_t, bool*, uint32_t, bool*, uint32_t*, bool**, uint32_t* __resultSize, bool**) noexcept = 0;
            virtual int32_t __stdcall Array2(uint32_t, uint8_t*, uint32_t, uint8_t*, uint32_t*, uint8_t**, uint32_t* __resultSize, uint8_t**) noexcept = 0;
            virtual int32_t __stdcall Array3(uint32_t, uint16_t*, uint32_t, uint16_t*, uint32_t*, uint16_t**, uint32_t* __resultSize, uint16_t**) noexcept = 0;
            virtual int32_t __stdcall Array4(uint32_t, uint32_t*, uint32_t, uint32_t*, uint32_t*, uint32_t**, uint32_t* __resultSize, uint32_t**) noexcept = 0;
            virtual int32_t __stdcall Array5(uint32_t, uint64_t*, uint32_t, uint64_t*, uint32_t*, uint64_t**, uint32_t* __resultSize, uint64_t**) noexcept = 0;
            virtual int32_t __stdcall Array6(uint32_t, int16_t*, uint32_t, int16_t*, uint32_t*, int16_t**, uint32_t* __resultSize, int16_t**) noexcept = 0;
            virtual int32_t __stdcall Array7(uint32_t, int32_t*, uint32_t, int32_t*, uint32_t*, int32_t**, uint32_t* __resultSize, int32_t**) noexcept = 0;
            virtual int32_t __stdcall Array8(uint32_t, int64_t*, uint32_t, int64_t*, uint32_t*, int64_t**, uint32_t* __resultSize, int64_t**) noexcept = 0;
            virtual int32_t __stdcall Array9(uint32_t, float*, uint32_t, float*, uint32_t*, float**, uint32_t* __resultSize, float**) noexcept = 0;
            virtual int32_t __stdcall Array10(uint32_t, double*, uint32_t, double*, uint32_t*, double**, uint32_t* __resultSize, double**) noexcept = 0;
            virtual int32_t __stdcall Array11(uint32_t, char16_t*, uint32_t, char16_t*, uint32_t*, char16_t**, uint32_t* __resultSize, char16_t**) noexcept = 0;
            virtual int32_t __stdcall Array12(uint32_t, void**, uint32_t, void**, uint32_t*, void***, uint32_t* __resultSize, void***) noexcept = 0;
            virtual int32_t __stdcall Array13(uint32_t, struct struct_TestComponent_Blittable*, uint32_t, struct struct_TestComponent_Blittable*, uint32_t*, struct struct_TestComponent_Blittable**, uint32_t* __resultSize, struct struct_TestComponent_Blittable**) noexcept = 0;
            virtual int32_t __stdcall Array14(uint32_t, struct struct_TestComponent_NonBlittable*, uint32_t, struct struct_TestComponent_NonBlittable*, uint32_t*, struct struct_TestComponent_NonBlittable**, uint32_t* __resultSize, struct struct_TestComponent_NonBlittable**) noexcept = 0;
            virtual int32_t __stdcall Array15(uint32_t, struct struct_TestComponent_Nested*, uint32_t, struct struct_TestComponent_Nested*, uint32_t*, struct struct_TestComponent_Nested**, uint32_t* __resultSize, struct struct_TestComponent_Nested**) noexcept = 0;
            virtual int32_t __stdcall Array1Call(void*) noexcept = 0;
            virtual int32_t __stdcall Array2Call(void*) noexcept = 0;
            virtual int32_t __stdcall Array3Call(void*) noexcept = 0;
            virtual int32_t __stdcall Array4Call(void*) noexcept = 0;
            virtual int32_t __stdcall Array5Call(void*) noexcept = 0;
            virtual int32_t __stdcall Array6Call(void*) noexcept = 0;
            virtual int32_t __stdcall Array7Call(void*) noexcept = 0;
            virtual int32_t __stdcall Array8Call(void*) noexcept = 0;
            virtual int32_t __stdcall Array9Call(void*) noexcept = 0;
            virtual int32_t __stdcall Array10Call(void*) noexcept = 0;
            virtual int32_t __stdcall Array11Call(void*) noexcept = 0;
            virtual int32_t __stdcall Array12Call(void*) noexcept = 0;
            virtual int32_t __stdcall Array13Call(void*) noexcept = 0;
            virtual int32_t __stdcall Array14Call(void*) noexcept = 0;
            virtual int32_t __stdcall Array15Call(void*) noexcept = 0;
            virtual int32_t __stdcall Collection1(void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall Collection2(void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall Collection3(void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall Collection4(void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall Collection5(void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall Collection6(void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall Collection1Call(void*) noexcept = 0;
            virtual int32_t __stdcall Collection2Call(void*) noexcept = 0;
            virtual int32_t __stdcall Collection3Call(void*) noexcept = 0;
            virtual int32_t __stdcall Collection4Call(void*) noexcept = 0;
            virtual int32_t __stdcall Collection5Call(void*) noexcept = 0;
            virtual int32_t __stdcall Collection6Call(void*) noexcept = 0;
            virtual int32_t __stdcall Async1(void*, bool, void**) noexcept = 0;
            virtual int32_t __stdcall Async2(void*, bool, int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall Async3(void*, bool, int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall Async4(void*, bool, int32_t, int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall Async1Call(void*) noexcept = 0;
            virtual int32_t __stdcall Async2Call(void*) noexcept = 0;
            virtual int32_t __stdcall Async3Call(void*) noexcept = 0;
            virtual int32_t __stdcall Async4Call(void*) noexcept = 0;
            virtual int32_t __stdcall add_Event1(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Event1(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Event2(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Event2(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall Event1Call(int32_t) noexcept = 0;
            virtual int32_t __stdcall Event2Call(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Array10Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t, double*, uint32_t, double*, uint32_t*, double**, uint32_t* __resultSize, double**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Array11Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t, char16_t*, uint32_t, char16_t*, uint32_t*, char16_t**, uint32_t* __resultSize, char16_t**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Array12Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t, void**, uint32_t, void**, uint32_t*, void***, uint32_t* __resultSize, void***) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Array13Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t, struct struct_TestComponent_Blittable*, uint32_t, struct struct_TestComponent_Blittable*, uint32_t*, struct struct_TestComponent_Blittable**, uint32_t* __resultSize, struct struct_TestComponent_Blittable**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Array14Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t, struct struct_TestComponent_NonBlittable*, uint32_t, struct struct_TestComponent_NonBlittable*, uint32_t*, struct struct_TestComponent_NonBlittable**, uint32_t* __resultSize, struct struct_TestComponent_NonBlittable**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Array15Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t, struct struct_TestComponent_Nested*, uint32_t, struct struct_TestComponent_Nested*, uint32_t*, struct struct_TestComponent_Nested**, uint32_t* __resultSize, struct struct_TestComponent_Nested**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Array1Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t, bool*, uint32_t, bool*, uint32_t*, bool**, uint32_t* __resultSize, bool**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Array2Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t, uint8_t*, uint32_t, uint8_t*, uint32_t*, uint8_t**, uint32_t* __resultSize, uint8_t**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Array3Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t, uint16_t*, uint32_t, uint16_t*, uint32_t*, uint16_t**, uint32_t* __resultSize, uint16_t**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Array4Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t, uint32_t*, uint32_t, uint32_t*, uint32_t*, uint32_t**, uint32_t* __resultSize, uint32_t**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Array5Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t, uint64_t*, uint32_t, uint64_t*, uint32_t*, uint64_t**, uint32_t* __resultSize, uint64_t**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Array6Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t, int16_t*, uint32_t, int16_t*, uint32_t*, int16_t**, uint32_t* __resultSize, int16_t**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Array7Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t, int32_t*, uint32_t, int32_t*, uint32_t*, int32_t**, uint32_t* __resultSize, int32_t**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Array8Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t, int64_t*, uint32_t, int64_t*, uint32_t*, int64_t**, uint32_t* __resultSize, int64_t**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Array9Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t, float*, uint32_t, float*, uint32_t*, float**, uint32_t* __resultSize, float**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Async1Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, bool, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Async2Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, bool, int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Async3Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, bool, int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Async4Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, bool, int32_t, int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Collection1Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Collection2Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Collection3Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Collection4Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Collection5Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Collection6Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Param10Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(double, double*, double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Param11Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(char16_t, char16_t*, char16_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Param12Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Param13Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(struct struct_TestComponent_Blittable, struct struct_TestComponent_Blittable const&, struct struct_TestComponent_Blittable*, struct struct_TestComponent_Blittable*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Param14Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(struct struct_TestComponent_NonBlittable, struct struct_TestComponent_NonBlittable const&, struct struct_TestComponent_NonBlittable*, struct struct_TestComponent_NonBlittable*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Param15Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(struct struct_TestComponent_Nested, struct struct_TestComponent_Nested const&, struct struct_TestComponent_Nested*, struct struct_TestComponent_Nested*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Param1Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(bool, bool*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Param2Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint8_t, uint8_t*, uint8_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Param3Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint16_t, uint16_t*, uint16_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Param4Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t, uint32_t*, uint32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Param5Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint64_t, uint64_t*, uint64_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Param6Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(int16_t, int16_t*, int16_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Param7Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(int32_t, int32_t*, int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Param8Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(int64_t, int64_t*, int64_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::Param9Handler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(float, float*, float*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::TestComponent::TestHandler>
    {
        struct WINRT_IMPL_NOVTABLE type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_TestComponent_ITestRunnerStatics
    {
        auto TestProducer(winrt::TestComponent::ITests const& callee) const;
        auto TestConsumer(winrt::TestComponent::TestHandler const& caller) const;
        auto TestSelf() const;
        auto MakeTests() const;
        auto CreateInt32Vector() const;
        auto CreateStringVector() const;
        auto CreateStringableVector() const;
    };
    template <> struct consume<winrt::TestComponent::ITestRunnerStatics>
    {
        template <typename D> using type = consume_TestComponent_ITestRunnerStatics<D>;
    };
    template <typename D>
    struct consume_TestComponent_ITests
    {
        [[nodiscard]] auto Percentage() const;
        auto Simple() const;
        auto Param1(bool a, bool& b) const;
        auto Param2(uint8_t a, uint8_t& b) const;
        auto Param3(uint16_t a, uint16_t& b) const;
        auto Param4(uint32_t a, uint32_t& b) const;
        auto Param5(uint64_t a, uint64_t& b) const;
        auto Param6(int16_t a, int16_t& b) const;
        auto Param7(int32_t a, int32_t& b) const;
        auto Param8(int64_t a, int64_t& b) const;
        auto Param9(float a, float& b) const;
        auto Param10(double a, double& b) const;
        auto Param11(char16_t a, char16_t& b) const;
        auto Param12(param::hstring const& a, hstring& b) const;
        auto Param13(winrt::TestComponent::Blittable const& a, winrt::TestComponent::Blittable const& b, winrt::TestComponent::Blittable& c) const;
        auto Param14(winrt::TestComponent::NonBlittable const& a, winrt::TestComponent::NonBlittable const& b, winrt::TestComponent::NonBlittable& c) const;
        auto Param15(winrt::TestComponent::Nested const& a, winrt::TestComponent::Nested const& b, winrt::TestComponent::Nested& c) const;
        auto Param1Call(winrt::TestComponent::Param1Handler const& handler) const;
        auto Param2Call(winrt::TestComponent::Param2Handler const& handler) const;
        auto Param3Call(winrt::TestComponent::Param3Handler const& handler) const;
        auto Param4Call(winrt::TestComponent::Param4Handler const& handler) const;
        auto Param5Call(winrt::TestComponent::Param5Handler const& handler) const;
        auto Param6Call(winrt::TestComponent::Param6Handler const& handler) const;
        auto Param7Call(winrt::TestComponent::Param7Handler const& handler) const;
        auto Param8Call(winrt::TestComponent::Param8Handler const& handler) const;
        auto Param9Call(winrt::TestComponent::Param9Handler const& handler) const;
        auto Param10Call(winrt::TestComponent::Param10Handler const& handler) const;
        auto Param11Call(winrt::TestComponent::Param11Handler const& handler) const;
        auto Param12Call(winrt::TestComponent::Param12Handler const& handler) const;
        auto Param13Call(winrt::TestComponent::Param13Handler const& handler) const;
        auto Param14Call(winrt::TestComponent::Param14Handler const& handler) const;
        auto Param15Call(winrt::TestComponent::Param15Handler const& handler) const;
        auto Array1(array_view<bool const> a, array_view<bool> b, com_array<bool>& c) const;
        auto Array2(array_view<uint8_t const> a, array_view<uint8_t> b, com_array<uint8_t>& c) const;
        auto Array3(array_view<uint16_t const> a, array_view<uint16_t> b, com_array<uint16_t>& c) const;
        auto Array4(array_view<uint32_t const> a, array_view<uint32_t> b, com_array<uint32_t>& c) const;
        auto Array5(array_view<uint64_t const> a, array_view<uint64_t> b, com_array<uint64_t>& c) const;
        auto Array6(array_view<int16_t const> a, array_view<int16_t> b, com_array<int16_t>& c) const;
        auto Array7(array_view<int32_t const> a, array_view<int32_t> b, com_array<int32_t>& c) const;
        auto Array8(array_view<int64_t const> a, array_view<int64_t> b, com_array<int64_t>& c) const;
        auto Array9(array_view<float const> a, array_view<float> b, com_array<float>& c) const;
        auto Array10(array_view<double const> a, array_view<double> b, com_array<double>& c) const;
        auto Array11(array_view<char16_t const> a, array_view<char16_t> b, com_array<char16_t>& c) const;
        auto Array12(array_view<hstring const> a, array_view<hstring> b, com_array<hstring>& c) const;
        auto Array13(array_view<winrt::TestComponent::Blittable const> a, array_view<winrt::TestComponent::Blittable> b, com_array<winrt::TestComponent::Blittable>& c) const;
        auto Array14(array_view<winrt::TestComponent::NonBlittable const> a, array_view<winrt::TestComponent::NonBlittable> b, com_array<winrt::TestComponent::NonBlittable>& c) const;
        auto Array15(array_view<winrt::TestComponent::Nested const> a, array_view<winrt::TestComponent::Nested> b, com_array<winrt::TestComponent::Nested>& c) const;
        auto Array1Call(winrt::TestComponent::Array1Handler const& handler) const;
        auto Array2Call(winrt::TestComponent::Array2Handler const& handler) const;
        auto Array3Call(winrt::TestComponent::Array3Handler const& handler) const;
        auto Array4Call(winrt::TestComponent::Array4Handler const& handler) const;
        auto Array5Call(winrt::TestComponent::Array5Handler const& handler) const;
        auto Array6Call(winrt::TestComponent::Array6Handler const& handler) const;
        auto Array7Call(winrt::TestComponent::Array7Handler const& handler) const;
        auto Array8Call(winrt::TestComponent::Array8Handler const& handler) const;
        auto Array9Call(winrt::TestComponent::Array9Handler const& handler) const;
        auto Array10Call(winrt::TestComponent::Array10Handler const& handler) const;
        auto Array11Call(winrt::TestComponent::Array11Handler const& handler) const;
        auto Array12Call(winrt::TestComponent::Array12Handler const& handler) const;
        auto Array13Call(winrt::TestComponent::Array13Handler const& handler) const;
        auto Array14Call(winrt::TestComponent::Array14Handler const& handler) const;
        auto Array15Call(winrt::TestComponent::Array15Handler const& handler) const;
        auto Collection1(param::iterable<hstring> const& a, winrt::Windows::Foundation::Collections::IIterable<hstring>& b) const;
        auto Collection2(param::iterable<winrt::Windows::Foundation::Collections::IKeyValuePair<hstring, hstring>> const& a, winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Collections::IKeyValuePair<hstring, hstring>>& b) const;
        auto Collection3(param::map<hstring, hstring> const& a, winrt::Windows::Foundation::Collections::IMap<hstring, hstring>& b) const;
        auto Collection4(param::map_view<hstring, hstring> const& a, winrt::Windows::Foundation::Collections::IMapView<hstring, hstring>& b) const;
        auto Collection5(param::vector<hstring> const& a, winrt::Windows::Foundation::Collections::IVector<hstring>& b) const;
        auto Collection6(param::vector_view<hstring> const& a, winrt::Windows::Foundation::Collections::IVectorView<hstring>& b) const;
        auto Collection1Call(winrt::TestComponent::Collection1Handler const& handler) const;
        auto Collection2Call(winrt::TestComponent::Collection2Handler const& handler) const;
        auto Collection3Call(winrt::TestComponent::Collection3Handler const& handler) const;
        auto Collection4Call(winrt::TestComponent::Collection4Handler const& handler) const;
        auto Collection5Call(winrt::TestComponent::Collection5Handler const& handler) const;
        auto Collection6Call(winrt::TestComponent::Collection6Handler const& handler) const;
        auto Async1(winrt::Windows::Foundation::IAsyncAction const& suspend, bool fail) const;
        auto Async2(winrt::Windows::Foundation::IAsyncAction const& suspend, bool fail, int32_t progress) const;
        auto Async3(winrt::Windows::Foundation::IAsyncAction const& suspend, bool fail, int32_t result) const;
        auto Async4(winrt::Windows::Foundation::IAsyncAction const& suspend, bool fail, int32_t result, int32_t progress) const;
        auto Async1Call(winrt::TestComponent::Async1Handler const& handler) const;
        auto Async2Call(winrt::TestComponent::Async2Handler const& handler) const;
        auto Async3Call(winrt::TestComponent::Async3Handler const& handler) const;
        auto Async4Call(winrt::TestComponent::Async4Handler const& handler) const;
        auto Event1(winrt::Windows::Foundation::EventHandler<int32_t> const& handler) const;
        using Event1_revoker = impl::event_revoker<winrt::TestComponent::ITests, &impl::abi_t<winrt::TestComponent::ITests>::remove_Event1>;
        [[nodiscard]] auto Event1(auto_revoke_t, winrt::Windows::Foundation::EventHandler<int32_t> const& handler) const;
        auto Event1(winrt::event_token const& token) const noexcept;
        auto Event2(winrt::Windows::Foundation::TypedEventHandler<winrt::TestComponent::ITests, int32_t> const& handler) const;
        using Event2_revoker = impl::event_revoker<winrt::TestComponent::ITests, &impl::abi_t<winrt::TestComponent::ITests>::remove_Event2>;
        [[nodiscard]] auto Event2(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::TestComponent::ITests, int32_t> const& handler) const;
        auto Event2(winrt::event_token const& token) const noexcept;
        auto Event1Call(int32_t value) const;
        auto Event2Call(int32_t value) const;
    };
    template <> struct consume<winrt::TestComponent::ITests>
    {
        template <typename D> using type = consume_TestComponent_ITests<D>;
    };
    struct struct_TestComponent_Blittable
    {
        uint8_t A;
        uint16_t B;
        uint32_t C;
        uint64_t D;
        int16_t E;
        int32_t F;
        int64_t G;
        float H;
        double I;
        winrt::guid J;
    };
    template <> struct abi<TestComponent::Blittable>
    {
        using type = struct_TestComponent_Blittable;
    };
    struct struct_TestComponent_Nested
    {
        struct{ uint8_t A; uint16_t B; uint32_t C; uint64_t D; int16_t E; int32_t F; int64_t G; float H; double I; winrt::guid J; } Blittable;
        struct{ bool A; char16_t B; void* C; void* D; } NonBlittable;
    };
    template <> struct abi<TestComponent::Nested>
    {
        using type = struct_TestComponent_Nested;
    };
    struct struct_TestComponent_NonBlittable
    {
        bool A;
        char16_t B;
        void* C;
        void* D;
    };
    template <> struct abi<TestComponent::NonBlittable>
    {
        using type = struct_TestComponent_NonBlittable;
    };
}
#endif
