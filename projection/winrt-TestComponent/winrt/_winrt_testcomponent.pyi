# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections

from winrt.testcomponent import Array10Handler, Array11Handler, Array12Handler, Array13Handler, Array14Handler, Array15Handler, Array16Handler, Array1Handler, Array2Handler, Array3Handler, Array4Handler, Array5Handler, Array6Handler, Array7Handler, Array8Handler, Array9Handler, Async1Handler, Async2Handler, Async3Handler, Async4Handler, Collection1Handler, Collection2Handler, Collection3Handler, Collection4Handler, Collection5Handler, Collection6Handler, Param10Handler, Param11Handler, Param12Handler, Param13Handler, Param14Handler, Param15Handler, Param1Handler, Param2Handler, Param3Handler, Param4Handler, Param5Handler, Param6Handler, Param7Handler, Param8Handler, Param9Handler, TestHandler

Self = typing.TypeVar('Self')

@typing.final
class Blittable:
    @_property
    def a(self) -> winrt.system.UInt8: ...
    @_property
    def b(self) -> winrt.system.UInt16: ...
    @_property
    def c(self) -> winrt.system.UInt32: ...
    @_property
    def d(self) -> winrt.system.UInt64: ...
    @_property
    def e(self) -> winrt.system.Int16: ...
    @_property
    def f(self) -> winrt.system.Int32: ...
    @_property
    def g(self) -> winrt.system.Int64: ...
    @_property
    def h(self) -> winrt.system.Single: ...
    @_property
    def i(self) -> winrt.system.Double: ...
    @_property
    def j(self) -> _uuid.UUID: ...
    def __new__(cls, a: winrt.system.UInt8 = 0, b: winrt.system.UInt16 = 0, c: winrt.system.UInt32 = 0, d: winrt.system.UInt64 = 0, e: winrt.system.Int16 = 0, f: winrt.system.Int32 = 0, g: winrt.system.Int64 = 0, h: winrt.system.Single = 0, i: winrt.system.Double = 0, j: _uuid.UUID = _uuid.UUID(int=0)) -> Blittable: ...
    def __replace__(self, /, **changes: typing.Any) -> Blittable: ...
    def unpack(self) -> typing.Tuple[winrt.system.UInt8, winrt.system.UInt16, winrt.system.UInt32, winrt.system.UInt64, winrt.system.Int16, winrt.system.Int32, winrt.system.Int64, winrt.system.Single, winrt.system.Double, _uuid.UUID]: ...

@typing.final
class Nested:
    @_property
    def blittable(self) -> Blittable: ...
    @_property
    def non_blittable(self) -> NonBlittable: ...
    def __new__(cls, blittable: Blittable = Blittable(), non_blittable: NonBlittable = NonBlittable()) -> Nested: ...
    def __replace__(self, /, **changes: typing.Any) -> Nested: ...
    def unpack(self) -> typing.Tuple[Blittable, NonBlittable]: ...

@typing.final
class NonBlittable:
    @_property
    def a(self) -> bool: ...
    @_property
    def b(self) -> winrt.system.Char16: ...
    @_property
    def c(self) -> str: ...
    @_property
    def d(self) -> typing.Optional[winrt.system.Int64]: ...
    def __new__(cls, a: bool = False, b: winrt.system.Char16 = "", c: str = "", d: typing.Optional[winrt.system.Int64] = None) -> NonBlittable: ...
    def __replace__(self, /, **changes: typing.Any) -> NonBlittable: ...
    def unpack(self) -> typing.Tuple[bool, winrt.system.Char16, str, typing.Optional[winrt.system.Int64]]: ...

@typing.final
class Class(winrt.system.Object, IRequiredOne):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Int32 TestComponent.Class::One()
    def one(self) -> winrt.system.Int32: ...

class Composable_Static(winrt._winrt.IInspectable_Static):
    # System.Int32 TestComponent.Composable::ExpectComposable(TestComponent.Composable)
    def expect_composable(cls, t: Composable, /) -> winrt.system.Int32: ...
    # System.Int32 TestComponent.Composable::ExpectRequiredFour(TestComponent.IRequiredFour)
    def expect_required_four(cls, t: IRequiredFour, /) -> winrt.system.Int32: ...
    # System.Int32 TestComponent.Composable::ExpectRequiredOne(TestComponent.IRequiredOne)
    def expect_required_one(cls, t: IRequiredOne, /) -> winrt.system.Int32: ...
    # System.Int32 TestComponent.Composable::ExpectRequiredThree(TestComponent.IRequiredThree)
    def expect_required_three(cls, t: IRequiredThree, /) -> winrt.system.Int32: ...
    # System.Int32 TestComponent.Composable::ExpectRequiredTwo(TestComponent.IRequiredTwo)
    def expect_required_two(cls, t: IRequiredTwo, /) -> winrt.system.Int32: ...

class Composable(winrt.system.Object, IRequiredFour, IRequiredThree, IRequiredTwo, IRequiredOne, metaclass=Composable_Static):
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], init: winrt.system.Int32) -> Self: ...
    # System.Int32 TestComponent.Composable::Four()
    def four(self) -> winrt.system.Int32: ...
    # System.Int32 TestComponent.Composable::One()
    def one(self) -> winrt.system.Int32: ...
    # System.Int32 TestComponent.Composable::Three()
    def three(self) -> winrt.system.Int32: ...
    # System.Int32 TestComponent.Composable::Two()
    def two(self) -> winrt.system.Int32: ...
    # System.Int32 TestComponent.Composable::get_Value()
    @_property
    def value(self) -> winrt.system.Int32: ...
    # System.Void TestComponent.Composable::put_Value(System.Int32)
    @value.setter
    @typing.final
    def value(self, value: winrt.system.Int32) -> None: ...

class Derived_Static(Composable_Static):
    pass

class Derived(Composable, metaclass=Derived_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...

class OverloadClass_Static(winrt._winrt.IInspectable_Static):
    pass

class OverloadClass(winrt.system.Object, metaclass=OverloadClass_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @typing.final
    # System.Void TestComponent.OverloadClass::Overload()
    def overload(self) -> None: ...
    # System.Void TestComponent.OverloadClass::Overload(System.Int32)
    def _overload_with_one(self, a: winrt.system.Int32, /) -> None: ...
    @typing.final
    # System.Void TestComponent.OverloadClass::Overload(System.Int32,System.Int32,System.Int32)
    def _overload_with_three(self, a: winrt.system.Int32, b: winrt.system.Int32, c: winrt.system.Int32, /) -> None: ...
    # System.Void TestComponent.OverloadClass::Overload(System.Int32,System.Int32)
    def _overload_with_two(self, a: winrt.system.Int32, b: winrt.system.Int32, /) -> None: ...

class Override_Static(winrt._winrt.IInspectable_Static):
    pass

class Override(winrt.system.Object, metaclass=Override_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @typing.final
    # System.Void TestComponent.Override::CallOverridable()
    def call_overridable(self) -> None: ...
    @typing.final
    # System.Void TestComponent.Override::CallProtected()
    def call_protected(self) -> None: ...
    # System.Void TestComponent.Override::OnOverridable()
    def _on_overridable(self) -> None: ...
    @typing.final
    # System.Void TestComponent.Override::OnProtected()
    def _on_protected(self) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken TestComponent.Override::add_OverridableCalled(Windows.Foundation.EventHandler`1<System.Object>)
    def add_overridable_called(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void TestComponent.Override::remove_OverridableCalled(Windows.Foundation.EventRegistrationToken)
    def remove_overridable_called(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken TestComponent.Override::add_ProtectedCalled(Windows.Foundation.EventHandler`1<System.Object>)
    def add_protected_called(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void TestComponent.Override::remove_ProtectedCalled(Windows.Foundation.EventRegistrationToken)
    def remove_protected_called(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...

@typing.final
class TestRunner_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.IAsyncAction TestComponent.TestRunner::CreateAsyncAction(System.UInt32)
    def create_async_action(cls, milliseconds: winrt.system.UInt32, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.Collections.IVector`1<System.Int32> TestComponent.TestRunner::CreateInt32Vector()
    def create_int32_vector(cls) -> typing.MutableSequence[winrt.system.Int32]: ...
    # Windows.Foundation.Collections.IVector`1<System.String> TestComponent.TestRunner::CreateStringVector()
    def create_string_vector(cls) -> typing.MutableSequence[str]: ...
    # Windows.Foundation.Collections.IVector`1<Windows.Foundation.IStringable> TestComponent.TestRunner::CreateStringableVector()
    def create_stringable_vector(cls) -> typing.MutableSequence[windows_foundation.IStringable]: ...
    # Windows.Foundation.TimeSpan TestComponent.TestRunner::CreateTimeSpan(System.UInt32)
    def create_time_span(cls, milliseconds: winrt.system.UInt32, /) -> datetime.timedelta: ...
    # System.String TestComponent.TestRunner::ExpectObject(System.Object)
    def expect_object(cls, value: winrt.system.Object, /) -> str: ...
    # TestComponent.ITests TestComponent.TestRunner::MakeTests()
    def make_tests(cls) -> ITests: ...
    # System.UInt32 TestComponent.TestRunner::TestConsumer(TestComponent.TestHandler)
    def test_consumer(cls, caller: TestHandler, /) -> winrt.system.UInt32: ...
    # System.Void TestComponent.TestRunner::TestProducer(TestComponent.ITests)
    def test_producer(cls, callee: ITests, /) -> None: ...
    # System.Void TestComponent.TestRunner::TestSelf()
    def test_self(cls) -> None: ...

@typing.final
class TestRunner(winrt.system.Object, metaclass=TestRunner_Static):
    pass

@typing.final
class _IRequiredFour: ...

class IRequiredFour(IRequiredThree, IRequiredTwo, IRequiredOne, winrt._winrt.IInspectable):
    # System.Int32 TestComponent.IRequiredFour::Four()
    @abstractmethod
    def four(self) -> winrt.system.Int32: ...

@typing.final
class _IRequiredOne: ...

class IRequiredOne(winrt._winrt.IInspectable):
    # System.Int32 TestComponent.IRequiredOne::One()
    @abstractmethod
    def one(self) -> winrt.system.Int32: ...

@typing.final
class _IRequiredThree: ...

class IRequiredThree(IRequiredTwo, IRequiredOne, winrt._winrt.IInspectable):
    # System.Int32 TestComponent.IRequiredThree::Three()
    @abstractmethod
    def three(self) -> winrt.system.Int32: ...

@typing.final
class _IRequiredTwo: ...

class IRequiredTwo(IRequiredOne, winrt._winrt.IInspectable):
    # System.Int32 TestComponent.IRequiredTwo::Two()
    @abstractmethod
    def two(self) -> winrt.system.Int32: ...

@typing.final
class _ITests: ...

class ITests(winrt._winrt.IInspectable):
    # System.Boolean[] TestComponent.ITests::Array1(System.Boolean[],System.Boolean[],System.Boolean[]&)
    @abstractmethod
    def array1(self, a: typing.Union[winrt.system.Array[bool], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[bool], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[bool], winrt.system.Array[bool]]: ...
    # System.Double[] TestComponent.ITests::Array10(System.Double[],System.Double[],System.Double[]&)
    @abstractmethod
    def array10(self, a: typing.Union[winrt.system.Array[winrt.system.Double], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.Double], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.Double], winrt.system.Array[winrt.system.Double]]: ...
    # System.Void TestComponent.ITests::Array10Call(TestComponent.Array10Handler)
    @abstractmethod
    def array10_call(self, handler: Array10Handler, /) -> None: ...
    # System.Char[] TestComponent.ITests::Array11(System.Char[],System.Char[],System.Char[]&)
    @abstractmethod
    def array11(self, a: typing.Union[winrt.system.Array[winrt.system.Char16], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.Char16], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.Char16], winrt.system.Array[winrt.system.Char16]]: ...
    # System.Void TestComponent.ITests::Array11Call(TestComponent.Array11Handler)
    @abstractmethod
    def array11_call(self, handler: Array11Handler, /) -> None: ...
    # System.String[] TestComponent.ITests::Array12(System.String[],System.String[],System.String[]&)
    @abstractmethod
    def array12(self, a: typing.Union[winrt.system.Array[str], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[str], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[str], winrt.system.Array[str]]: ...
    # System.Void TestComponent.ITests::Array12Call(TestComponent.Array12Handler)
    @abstractmethod
    def array12_call(self, handler: Array12Handler, /) -> None: ...
    # TestComponent.Blittable[] TestComponent.ITests::Array13(TestComponent.Blittable[],TestComponent.Blittable[],TestComponent.Blittable[]&)
    @abstractmethod
    def array13(self, a: typing.Union[winrt.system.Array[Blittable], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[Blittable], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[Blittable], winrt.system.Array[Blittable]]: ...
    # System.Void TestComponent.ITests::Array13Call(TestComponent.Array13Handler)
    @abstractmethod
    def array13_call(self, handler: Array13Handler, /) -> None: ...
    # TestComponent.NonBlittable[] TestComponent.ITests::Array14(TestComponent.NonBlittable[],TestComponent.NonBlittable[],TestComponent.NonBlittable[]&)
    @abstractmethod
    def array14(self, a: typing.Union[winrt.system.Array[NonBlittable], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[NonBlittable], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[NonBlittable], winrt.system.Array[NonBlittable]]: ...
    # System.Void TestComponent.ITests::Array14Call(TestComponent.Array14Handler)
    @abstractmethod
    def array14_call(self, handler: Array14Handler, /) -> None: ...
    # TestComponent.Nested[] TestComponent.ITests::Array15(TestComponent.Nested[],TestComponent.Nested[],TestComponent.Nested[]&)
    @abstractmethod
    def array15(self, a: typing.Union[winrt.system.Array[Nested], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[Nested], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[Nested], winrt.system.Array[Nested]]: ...
    # System.Void TestComponent.ITests::Array15Call(TestComponent.Array15Handler)
    @abstractmethod
    def array15_call(self, handler: Array15Handler, /) -> None: ...
    # Windows.Foundation.IStringable[] TestComponent.ITests::Array16(Windows.Foundation.IStringable[],Windows.Foundation.IStringable[],Windows.Foundation.IStringable[]&)
    @abstractmethod
    def array16(self, a: typing.Union[winrt.system.Array[windows_foundation.IStringable], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[windows_foundation.IStringable], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[windows_foundation.IStringable], winrt.system.Array[windows_foundation.IStringable]]: ...
    # System.Void TestComponent.ITests::Array16Call(TestComponent.Array16Handler)
    @abstractmethod
    def array16_call(self, handler: Array16Handler, /) -> None: ...
    # System.Void TestComponent.ITests::Array1Call(TestComponent.Array1Handler)
    @abstractmethod
    def array1_call(self, handler: Array1Handler, /) -> None: ...
    # System.Byte[] TestComponent.ITests::Array2(System.Byte[],System.Byte[],System.Byte[]&)
    @abstractmethod
    def array2(self, a: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.UInt8], winrt.system.Array[winrt.system.UInt8]]: ...
    # System.Void TestComponent.ITests::Array2Call(TestComponent.Array2Handler)
    @abstractmethod
    def array2_call(self, handler: Array2Handler, /) -> None: ...
    # System.UInt16[] TestComponent.ITests::Array3(System.UInt16[],System.UInt16[],System.UInt16[]&)
    @abstractmethod
    def array3(self, a: typing.Union[winrt.system.Array[winrt.system.UInt16], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.UInt16], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.UInt16], winrt.system.Array[winrt.system.UInt16]]: ...
    # System.Void TestComponent.ITests::Array3Call(TestComponent.Array3Handler)
    @abstractmethod
    def array3_call(self, handler: Array3Handler, /) -> None: ...
    # System.UInt32[] TestComponent.ITests::Array4(System.UInt32[],System.UInt32[],System.UInt32[]&)
    @abstractmethod
    def array4(self, a: typing.Union[winrt.system.Array[winrt.system.UInt32], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.UInt32], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.UInt32], winrt.system.Array[winrt.system.UInt32]]: ...
    # System.Void TestComponent.ITests::Array4Call(TestComponent.Array4Handler)
    @abstractmethod
    def array4_call(self, handler: Array4Handler, /) -> None: ...
    # System.UInt64[] TestComponent.ITests::Array5(System.UInt64[],System.UInt64[],System.UInt64[]&)
    @abstractmethod
    def array5(self, a: typing.Union[winrt.system.Array[winrt.system.UInt64], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.UInt64], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.UInt64], winrt.system.Array[winrt.system.UInt64]]: ...
    # System.Void TestComponent.ITests::Array5Call(TestComponent.Array5Handler)
    @abstractmethod
    def array5_call(self, handler: Array5Handler, /) -> None: ...
    # System.Int16[] TestComponent.ITests::Array6(System.Int16[],System.Int16[],System.Int16[]&)
    @abstractmethod
    def array6(self, a: typing.Union[winrt.system.Array[winrt.system.Int16], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.Int16], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.Int16], winrt.system.Array[winrt.system.Int16]]: ...
    # System.Void TestComponent.ITests::Array6Call(TestComponent.Array6Handler)
    @abstractmethod
    def array6_call(self, handler: Array6Handler, /) -> None: ...
    # System.Int32[] TestComponent.ITests::Array7(System.Int32[],System.Int32[],System.Int32[]&)
    @abstractmethod
    def array7(self, a: typing.Union[winrt.system.Array[winrt.system.Int32], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.Int32], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.Int32], winrt.system.Array[winrt.system.Int32]]: ...
    # System.Void TestComponent.ITests::Array7Call(TestComponent.Array7Handler)
    @abstractmethod
    def array7_call(self, handler: Array7Handler, /) -> None: ...
    # System.Int64[] TestComponent.ITests::Array8(System.Int64[],System.Int64[],System.Int64[]&)
    @abstractmethod
    def array8(self, a: typing.Union[winrt.system.Array[winrt.system.Int64], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.Int64], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.Int64], winrt.system.Array[winrt.system.Int64]]: ...
    # System.Void TestComponent.ITests::Array8Call(TestComponent.Array8Handler)
    @abstractmethod
    def array8_call(self, handler: Array8Handler, /) -> None: ...
    # System.Single[] TestComponent.ITests::Array9(System.Single[],System.Single[],System.Single[]&)
    @abstractmethod
    def array9(self, a: typing.Union[winrt.system.Array[winrt.system.Single], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.Single], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.Single], winrt.system.Array[winrt.system.Single]]: ...
    # System.Void TestComponent.ITests::Array9Call(TestComponent.Array9Handler)
    @abstractmethod
    def array9_call(self, handler: Array9Handler, /) -> None: ...
    # Windows.Foundation.IAsyncAction TestComponent.ITests::Async1(Windows.Foundation.IAsyncAction,System.Boolean)
    @abstractmethod
    def async1(self, suspend: windows_foundation.IAsyncAction, fail: bool, /) -> windows_foundation.IAsyncAction: ...
    # System.Void TestComponent.ITests::Async1Call(TestComponent.Async1Handler)
    @abstractmethod
    def async1_call(self, handler: Async1Handler, /) -> None: ...
    # Windows.Foundation.IAsyncActionWithProgress`1<System.Int32> TestComponent.ITests::Async2(Windows.Foundation.IAsyncAction,System.Boolean,System.Int32)
    @abstractmethod
    def async2(self, suspend: windows_foundation.IAsyncAction, fail: bool, progress: winrt.system.Int32, /) -> windows_foundation.IAsyncActionWithProgress[winrt.system.Int32]: ...
    # System.Void TestComponent.ITests::Async2Call(TestComponent.Async2Handler)
    @abstractmethod
    def async2_call(self, handler: Async2Handler, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.Int32> TestComponent.ITests::Async3(Windows.Foundation.IAsyncAction,System.Boolean,System.Int32)
    @abstractmethod
    def async3(self, suspend: windows_foundation.IAsyncAction, fail: bool, result: winrt.system.Int32, /) -> windows_foundation.IAsyncOperation[winrt.system.Int32]: ...
    # System.Void TestComponent.ITests::Async3Call(TestComponent.Async3Handler)
    @abstractmethod
    def async3_call(self, handler: Async3Handler, /) -> None: ...
    # Windows.Foundation.IAsyncOperationWithProgress`2<System.Int32,System.Int32> TestComponent.ITests::Async4(Windows.Foundation.IAsyncAction,System.Boolean,System.Int32,System.Int32)
    @abstractmethod
    def async4(self, suspend: windows_foundation.IAsyncAction, fail: bool, result: winrt.system.Int32, progress: winrt.system.Int32, /) -> windows_foundation.IAsyncOperationWithProgress[winrt.system.Int32, winrt.system.Int32]: ...
    # System.Void TestComponent.ITests::Async4Call(TestComponent.Async4Handler)
    @abstractmethod
    def async4_call(self, handler: Async4Handler, /) -> None: ...
    # System.Object TestComponent.ITests::Box1(System.Byte,System.Object)
    @abstractmethod
    def box1(self, param: winrt.system.UInt8, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box10(System.Double,System.Object)
    @abstractmethod
    def box10(self, param: winrt.system.Double, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box11(System.Guid,System.Object)
    @abstractmethod
    def box11(self, param: _uuid.UUID, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box12(System.Char,System.Object)
    @abstractmethod
    def box12(self, param: winrt.system.Char16, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box13(System.String,System.Object)
    @abstractmethod
    def box13(self, param: str, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box14(Windows.Foundation.TimeSpan,System.Object)
    @abstractmethod
    def box14(self, param: datetime.timedelta, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box15(TestComponent.Blittable,System.Object)
    @abstractmethod
    def box15(self, param: typing.Union[Blittable, typing.Tuple[winrt.system.UInt8, winrt.system.UInt16, winrt.system.UInt32, winrt.system.UInt64, winrt.system.Int16, winrt.system.Int32, winrt.system.Int64, winrt.system.Single, winrt.system.Double, _uuid.UUID]], boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box16(TestComponent.NonBlittable,System.Object)
    @abstractmethod
    def box16(self, param: typing.Union[NonBlittable, typing.Tuple[bool, winrt.system.Char16, str, typing.Optional[winrt.system.Int64]]], boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box17(Windows.Foundation.DateTime,System.Object)
    @abstractmethod
    def box17(self, param: datetime.datetime, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box18(System.Int64[],System.Object)
    @abstractmethod
    def box18(self, param: typing.Union[winrt.system.Array[winrt.system.Int64], winrt.system.ReadableBuffer], boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box19(System.Boolean[],System.Object)
    @abstractmethod
    def box19(self, param: typing.Union[winrt.system.Array[bool], winrt.system.ReadableBuffer], boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box2(System.UInt16,System.Object)
    @abstractmethod
    def box2(self, param: winrt.system.UInt16, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box20(System.String[],System.Object)
    @abstractmethod
    def box20(self, param: typing.Union[winrt.system.Array[str], winrt.system.ReadableBuffer], boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box21(Windows.Foundation.TimeSpan[],System.Object)
    @abstractmethod
    def box21(self, param: typing.Union[winrt.system.Array[datetime.timedelta], winrt.system.ReadableBuffer], boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box3(System.UInt32,System.Object)
    @abstractmethod
    def box3(self, param: winrt.system.UInt32, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box4(System.UInt64,System.Object)
    @abstractmethod
    def box4(self, param: winrt.system.UInt64, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box5(System.Int16,System.Object)
    @abstractmethod
    def box5(self, param: winrt.system.Int16, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box6(System.Int32,System.Object)
    @abstractmethod
    def box6(self, param: winrt.system.Int32, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box7(System.Int64,System.Object)
    @abstractmethod
    def box7(self, param: winrt.system.Int64, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box8(System.Boolean,System.Object)
    @abstractmethod
    def box8(self, param: bool, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object TestComponent.ITests::Box9(System.Single,System.Object)
    @abstractmethod
    def box9(self, param: winrt.system.Single, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    # Windows.Foundation.Collections.IIterable`1<System.String> TestComponent.ITests::Collection1(Windows.Foundation.Collections.IIterable`1<System.String>,Windows.Foundation.Collections.IIterable`1<System.String>&)
    @abstractmethod
    def collection1(self, a: typing.Iterable[str], /) -> typing.Tuple[typing.Iterable[str], typing.Iterable[str]]: ...
    # System.Void TestComponent.ITests::Collection1Call(TestComponent.Collection1Handler)
    @abstractmethod
    def collection1_call(self, handler: Collection1Handler, /) -> None: ...
    # Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<System.String,System.String>> TestComponent.ITests::Collection2(Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<System.String,System.String>>,Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<System.String,System.String>>&)
    @abstractmethod
    def collection2(self, a: typing.Iterable[windows_foundation_collections.IKeyValuePair[str, str]], /) -> typing.Tuple[typing.Iterable[windows_foundation_collections.IKeyValuePair[str, str]], typing.Iterable[windows_foundation_collections.IKeyValuePair[str, str]]]: ...
    # System.Void TestComponent.ITests::Collection2Call(TestComponent.Collection2Handler)
    @abstractmethod
    def collection2_call(self, handler: Collection2Handler, /) -> None: ...
    # Windows.Foundation.Collections.IMap`2<System.String,System.String> TestComponent.ITests::Collection3(Windows.Foundation.Collections.IMap`2<System.String,System.String>,Windows.Foundation.Collections.IMap`2<System.String,System.String>&)
    @abstractmethod
    def collection3(self, a: typing.MutableMapping[str, str], /) -> typing.Tuple[typing.MutableMapping[str, str], typing.MutableMapping[str, str]]: ...
    # System.Void TestComponent.ITests::Collection3Call(TestComponent.Collection3Handler)
    @abstractmethod
    def collection3_call(self, handler: Collection3Handler, /) -> None: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.String> TestComponent.ITests::Collection4(Windows.Foundation.Collections.IMapView`2<System.String,System.String>,Windows.Foundation.Collections.IMapView`2<System.String,System.String>&)
    @abstractmethod
    def collection4(self, a: typing.Mapping[str, str], /) -> typing.Tuple[typing.Mapping[str, str], typing.Mapping[str, str]]: ...
    # System.Void TestComponent.ITests::Collection4Call(TestComponent.Collection4Handler)
    @abstractmethod
    def collection4_call(self, handler: Collection4Handler, /) -> None: ...
    # Windows.Foundation.Collections.IVector`1<System.String> TestComponent.ITests::Collection5(Windows.Foundation.Collections.IVector`1<System.String>,Windows.Foundation.Collections.IVector`1<System.String>&)
    @abstractmethod
    def collection5(self, a: typing.MutableSequence[str], /) -> typing.Tuple[typing.MutableSequence[str], typing.MutableSequence[str]]: ...
    # System.Void TestComponent.ITests::Collection5Call(TestComponent.Collection5Handler)
    @abstractmethod
    def collection5_call(self, handler: Collection5Handler, /) -> None: ...
    # Windows.Foundation.Collections.IVectorView`1<System.String> TestComponent.ITests::Collection6(Windows.Foundation.Collections.IVectorView`1<System.String>,Windows.Foundation.Collections.IVectorView`1<System.String>&)
    @abstractmethod
    def collection6(self, a: typing.Sequence[str], /) -> typing.Tuple[typing.Sequence[str], typing.Sequence[str]]: ...
    # System.Void TestComponent.ITests::Collection6Call(TestComponent.Collection6Handler)
    @abstractmethod
    def collection6_call(self, handler: Collection6Handler, /) -> None: ...
    # System.Void TestComponent.ITests::Event1Call(System.Int32)
    @abstractmethod
    def event1_call(self, value: winrt.system.Int32, /) -> None: ...
    # System.Void TestComponent.ITests::Event2Call(System.Int32)
    @abstractmethod
    def event2_call(self, value: winrt.system.Int32, /) -> None: ...
    # Windows.Foundation.Collections.IVectorView`1<TestComponent.Blittable> TestComponent.ITests::GetBlittableVectorSubset(Windows.Foundation.Collections.IVectorView`1<TestComponent.Blittable>,System.Int32)
    @abstractmethod
    def get_blittable_vector_subset(self, blittable_vector: typing.Sequence[Blittable], start_index: winrt.system.Int32, /) -> typing.Sequence[Blittable]: ...
    # Windows.Foundation.Collections.IVectorView`1<System.Boolean> TestComponent.ITests::GetBooleanVectorSubset(Windows.Foundation.Collections.IVectorView`1<System.Boolean>,System.Int32)
    @abstractmethod
    def get_boolean_vector_subset(self, boolean_vector: typing.Sequence[bool], start_index: winrt.system.Int32, /) -> typing.Sequence[bool]: ...
    # Windows.Foundation.Collections.IVectorView`1<TestComponent.Class> TestComponent.ITests::GetClassVectorSubset(Windows.Foundation.Collections.IVectorView`1<TestComponent.Class>,System.Int32)
    @abstractmethod
    def get_class_vector_subset(self, class_vector: typing.Sequence[Class], start_index: winrt.system.Int32, /) -> typing.Sequence[Class]: ...
    # Windows.Foundation.Collections.IVectorView`1<TestComponent.Composable> TestComponent.ITests::GetComposableClassVectorSubset(Windows.Foundation.Collections.IVectorView`1<TestComponent.Composable>,System.Int32)
    @abstractmethod
    def get_composable_class_vector_subset(self, class_vector: typing.Sequence[Composable], start_index: winrt.system.Int32, /) -> typing.Sequence[Composable]: ...
    # Windows.Foundation.Collections.IVectorView`1<TestComponent.IRequiredOne> TestComponent.ITests::GetInterfaceVectorSubset(Windows.Foundation.Collections.IVectorView`1<TestComponent.IRequiredOne>,System.Int32)
    @abstractmethod
    def get_interface_vector_subset(self, interface_vector: typing.Sequence[IRequiredOne], start_index: winrt.system.Int32, /) -> typing.Sequence[IRequiredOne]: ...
    # Windows.Foundation.Collections.IVectorView`1<TestComponent.NonBlittable> TestComponent.ITests::GetNonBlittableVectorSubset(Windows.Foundation.Collections.IVectorView`1<TestComponent.NonBlittable>,System.Int32)
    @abstractmethod
    def get_non_blittable_vector_subset(self, non_blittable_vector: typing.Sequence[NonBlittable], start_index: winrt.system.Int32, /) -> typing.Sequence[NonBlittable]: ...
    # Windows.Foundation.Collections.IVectorView`1<System.Object> TestComponent.ITests::GetObjectVectorSubset(Windows.Foundation.Collections.IVectorView`1<System.Object>,System.Int32)
    @abstractmethod
    def get_object_vector_subset(self, object_vector: typing.Sequence[winrt.system.Object], start_index: winrt.system.Int32, /) -> typing.Sequence[winrt.system.Object]: ...
    # Windows.Foundation.Collections.IVectorView`1<System.String> TestComponent.ITests::GetStringVectorSubset(Windows.Foundation.Collections.IVectorView`1<System.String>,System.Int32)
    @abstractmethod
    def get_string_vector_subset(self, string_vector: typing.Sequence[str], start_index: winrt.system.Int32, /) -> typing.Sequence[str]: ...
    # System.Boolean TestComponent.ITests::Param1(System.Boolean,System.Boolean&)
    @abstractmethod
    def param1(self, a: bool, /) -> typing.Tuple[bool, bool]: ...
    # System.Double TestComponent.ITests::Param10(System.Double,System.Double&)
    @abstractmethod
    def param10(self, a: winrt.system.Double, /) -> typing.Tuple[winrt.system.Double, winrt.system.Double]: ...
    # System.Void TestComponent.ITests::Param10Call(TestComponent.Param10Handler)
    @abstractmethod
    def param10_call(self, handler: Param10Handler, /) -> None: ...
    # System.Char TestComponent.ITests::Param11(System.Char,System.Char&)
    @abstractmethod
    def param11(self, a: winrt.system.Char16, /) -> typing.Tuple[winrt.system.Char16, winrt.system.Char16]: ...
    # System.Void TestComponent.ITests::Param11Call(TestComponent.Param11Handler)
    @abstractmethod
    def param11_call(self, handler: Param11Handler, /) -> None: ...
    # System.String TestComponent.ITests::Param12(System.String,System.String&)
    @abstractmethod
    def param12(self, a: str, /) -> typing.Tuple[str, str]: ...
    # System.Void TestComponent.ITests::Param12Call(TestComponent.Param12Handler)
    @abstractmethod
    def param12_call(self, handler: Param12Handler, /) -> None: ...
    # TestComponent.Blittable TestComponent.ITests::Param13(TestComponent.Blittable,TestComponent.Blittable& modopt(System.Runtime.CompilerServices.IsConst),TestComponent.Blittable&)
    @abstractmethod
    def param13(self, a: typing.Union[Blittable, typing.Tuple[winrt.system.UInt8, winrt.system.UInt16, winrt.system.UInt32, winrt.system.UInt64, winrt.system.Int16, winrt.system.Int32, winrt.system.Int64, winrt.system.Single, winrt.system.Double, _uuid.UUID]], b: Blittable, /) -> typing.Tuple[Blittable, Blittable]: ...
    # System.Void TestComponent.ITests::Param13Call(TestComponent.Param13Handler)
    @abstractmethod
    def param13_call(self, handler: Param13Handler, /) -> None: ...
    # TestComponent.NonBlittable TestComponent.ITests::Param14(TestComponent.NonBlittable,TestComponent.NonBlittable& modopt(System.Runtime.CompilerServices.IsConst),TestComponent.NonBlittable&)
    @abstractmethod
    def param14(self, a: typing.Union[NonBlittable, typing.Tuple[bool, winrt.system.Char16, str, typing.Optional[winrt.system.Int64]]], b: NonBlittable, /) -> typing.Tuple[NonBlittable, NonBlittable]: ...
    # System.Void TestComponent.ITests::Param14Call(TestComponent.Param14Handler)
    @abstractmethod
    def param14_call(self, handler: Param14Handler, /) -> None: ...
    # TestComponent.Nested TestComponent.ITests::Param15(TestComponent.Nested,TestComponent.Nested& modopt(System.Runtime.CompilerServices.IsConst),TestComponent.Nested&)
    @abstractmethod
    def param15(self, a: typing.Union[Nested, typing.Tuple[Blittable, NonBlittable]], b: Nested, /) -> typing.Tuple[Nested, Nested]: ...
    # System.Void TestComponent.ITests::Param15Call(TestComponent.Param15Handler)
    @abstractmethod
    def param15_call(self, handler: Param15Handler, /) -> None: ...
    # System.Void TestComponent.ITests::Param1Call(TestComponent.Param1Handler)
    @abstractmethod
    def param1_call(self, handler: Param1Handler, /) -> None: ...
    # System.Byte TestComponent.ITests::Param2(System.Byte,System.Byte&)
    @abstractmethod
    def param2(self, a: winrt.system.UInt8, /) -> typing.Tuple[winrt.system.UInt8, winrt.system.UInt8]: ...
    # System.Void TestComponent.ITests::Param2Call(TestComponent.Param2Handler)
    @abstractmethod
    def param2_call(self, handler: Param2Handler, /) -> None: ...
    # System.UInt16 TestComponent.ITests::Param3(System.UInt16,System.UInt16&)
    @abstractmethod
    def param3(self, a: winrt.system.UInt16, /) -> typing.Tuple[winrt.system.UInt16, winrt.system.UInt16]: ...
    # System.Void TestComponent.ITests::Param3Call(TestComponent.Param3Handler)
    @abstractmethod
    def param3_call(self, handler: Param3Handler, /) -> None: ...
    # System.UInt32 TestComponent.ITests::Param4(System.UInt32,System.UInt32&)
    @abstractmethod
    def param4(self, a: winrt.system.UInt32, /) -> typing.Tuple[winrt.system.UInt32, winrt.system.UInt32]: ...
    # System.Void TestComponent.ITests::Param4Call(TestComponent.Param4Handler)
    @abstractmethod
    def param4_call(self, handler: Param4Handler, /) -> None: ...
    # System.UInt64 TestComponent.ITests::Param5(System.UInt64,System.UInt64&)
    @abstractmethod
    def param5(self, a: winrt.system.UInt64, /) -> typing.Tuple[winrt.system.UInt64, winrt.system.UInt64]: ...
    # System.Void TestComponent.ITests::Param5Call(TestComponent.Param5Handler)
    @abstractmethod
    def param5_call(self, handler: Param5Handler, /) -> None: ...
    # System.Int16 TestComponent.ITests::Param6(System.Int16,System.Int16&)
    @abstractmethod
    def param6(self, a: winrt.system.Int16, /) -> typing.Tuple[winrt.system.Int16, winrt.system.Int16]: ...
    # System.Void TestComponent.ITests::Param6Call(TestComponent.Param6Handler)
    @abstractmethod
    def param6_call(self, handler: Param6Handler, /) -> None: ...
    # System.Int32 TestComponent.ITests::Param7(System.Int32,System.Int32&)
    @abstractmethod
    def param7(self, a: winrt.system.Int32, /) -> typing.Tuple[winrt.system.Int32, winrt.system.Int32]: ...
    # System.Void TestComponent.ITests::Param7Call(TestComponent.Param7Handler)
    @abstractmethod
    def param7_call(self, handler: Param7Handler, /) -> None: ...
    # System.Int64 TestComponent.ITests::Param8(System.Int64,System.Int64&)
    @abstractmethod
    def param8(self, a: winrt.system.Int64, /) -> typing.Tuple[winrt.system.Int64, winrt.system.Int64]: ...
    # System.Void TestComponent.ITests::Param8Call(TestComponent.Param8Handler)
    @abstractmethod
    def param8_call(self, handler: Param8Handler, /) -> None: ...
    # System.Single TestComponent.ITests::Param9(System.Single,System.Single&)
    @abstractmethod
    def param9(self, a: winrt.system.Single, /) -> typing.Tuple[winrt.system.Single, winrt.system.Single]: ...
    # System.Void TestComponent.ITests::Param9Call(TestComponent.Param9Handler)
    @abstractmethod
    def param9_call(self, handler: Param9Handler, /) -> None: ...
    # System.Void TestComponent.ITests::Simple()
    @abstractmethod
    def simple(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken TestComponent.ITests::add_Event1(Windows.Foundation.EventHandler`1<System.Int32>)
    @abstractmethod
    def add_event1(self, handler: windows_foundation.EventHandler[winrt.system.Int32], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void TestComponent.ITests::remove_Event1(Windows.Foundation.EventRegistrationToken)
    @abstractmethod
    def remove_event1(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken TestComponent.ITests::add_Event2(Windows.Foundation.TypedEventHandler`2<TestComponent.ITests,System.Int32>)
    @abstractmethod
    def add_event2(self, handler: windows_foundation.TypedEventHandler[ITests, winrt.system.Int32], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void TestComponent.ITests::remove_Event2(Windows.Foundation.EventRegistrationToken)
    @abstractmethod
    def remove_event2(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.UInt32 TestComponent.ITests::get_Percentage()
    @_property
    @abstractmethod
    def percentage(self) -> winrt.system.UInt32: ...

