# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections

from winrt.testcomponent import Array10Handler, Array11Handler, Array12Handler, Array13Handler, Array14Handler, Array15Handler, Array16Handler, Array1Handler, Array2Handler, Array3Handler, Array4Handler, Array5Handler, Array6Handler, Array7Handler, Array8Handler, Array9Handler, Async1Handler, Async2Handler, Async3Handler, Async4Handler, Collection1Handler, Collection2Handler, Collection3Handler, Collection4Handler, Collection5Handler, Collection6Handler, Param10Handler, Param11Handler, Param12Handler, Param13Handler, Param14Handler, Param15Handler, Param1Handler, Param2Handler, Param3Handler, Param4Handler, Param5Handler, Param6Handler, Param7Handler, Param8Handler, Param9Handler, TestHandler

Self = typing.TypeVar('Self')

@typing.final
class Blittable:
    a: winrt.system.UInt8
    b: winrt.system.UInt16
    c: winrt.system.UInt32
    d: winrt.system.UInt64
    e: winrt.system.Int16
    f: winrt.system.Int32
    g: winrt.system.Int64
    h: winrt.system.Single
    i: winrt.system.Double
    j: _uuid.UUID
    def __init__(self, a: winrt.system.UInt8 = 0, b: winrt.system.UInt16 = 0, c: winrt.system.UInt32 = 0, d: winrt.system.UInt64 = 0, e: winrt.system.Int16 = 0, f: winrt.system.Int32 = 0, g: winrt.system.Int64 = 0, h: winrt.system.Single = 0, i: winrt.system.Double = 0, j: _uuid.UUID = _uuid.UUID(int=0)) -> None: ...

@typing.final
class Nested:
    blittable: Blittable
    non_blittable: NonBlittable
    def __init__(self, blittable: Blittable = Blittable(), non_blittable: NonBlittable = NonBlittable()) -> None: ...

@typing.final
class NonBlittable:
    a: bool
    b: winrt.system.Char16
    c: str
    d: typing.Optional[winrt.system.Int64]
    def __init__(self, a: bool = False, b: winrt.system.Char16 = "", c: str = "", d: typing.Optional[winrt.system.Int64] = None) -> None: ...

@typing.final
class Class(winrt.system.Object, ImplementsIRequiredOne):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Class: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    def one(self) -> winrt.system.Int32: ...

class Composable_Static(type):
    def expect_composable(cls, t: Composable, /) -> winrt.system.Int32: ...
    def expect_required_four(cls, t: ImplementsIRequiredFour, /) -> winrt.system.Int32: ...
    def expect_required_one(cls, t: ImplementsIRequiredOne, /) -> winrt.system.Int32: ...
    def expect_required_three(cls, t: ImplementsIRequiredThree, /) -> winrt.system.Int32: ...
    def expect_required_two(cls, t: ImplementsIRequiredTwo, /) -> winrt.system.Int32: ...

class Composable(winrt.system.Object, ImplementsIRequiredFour, ImplementsIRequiredThree, ImplementsIRequiredTwo, ImplementsIRequiredOne, metaclass=Composable_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Composable: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], init: winrt.system.Int32) -> Self: ...
    def four(self) -> winrt.system.Int32: ...
    def one(self) -> winrt.system.Int32: ...
    def three(self) -> winrt.system.Int32: ...
    def two(self) -> winrt.system.Int32: ...
    @_property
    def value(self) -> winrt.system.Int32: ...
    @value.setter
    def value(self, value: winrt.system.Int32) -> None: ...

class Derived_Static(Composable_Static):
    pass

class Derived(Composable, metaclass=Derived_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Derived: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class TestRunner_Static(type):
    def create_async_action(cls, milliseconds: winrt.system.UInt32, /) -> windows_foundation.IAsyncAction: ...
    def create_int32_vector(cls) -> typing.MutableSequence[winrt.system.Int32]: ...
    def create_string_vector(cls) -> typing.MutableSequence[str]: ...
    def create_stringable_vector(cls) -> typing.MutableSequence[windows_foundation.IStringable]: ...
    def create_time_span(cls, milliseconds: winrt.system.UInt32, /) -> datetime.timedelta: ...
    def expect_object(cls, value: winrt.system.Object, /) -> str: ...
    def make_tests(cls) -> ITests: ...
    def test_consumer(cls, caller: TestHandler, /) -> winrt.system.UInt32: ...
    def test_producer(cls, callee: ImplementsITests, /) -> None: ...
    def test_self(cls) -> None: ...

@typing.final
class TestRunner(winrt.system.Object, metaclass=TestRunner_Static):
    pass

class ImplementsIRequiredFour():
    pass

class IRequiredFour(winrt.system.Object, ImplementsIRequiredFour, ImplementsIRequiredThree, ImplementsIRequiredTwo, ImplementsIRequiredOne):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IRequiredFour: ...
    def four(self) -> winrt.system.Int32: ...
    def one(self) -> winrt.system.Int32: ...
    def three(self) -> winrt.system.Int32: ...
    def two(self) -> winrt.system.Int32: ...

class ImplementsIRequiredOne():
    pass

class IRequiredOne(winrt.system.Object, ImplementsIRequiredOne):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IRequiredOne: ...
    def one(self) -> winrt.system.Int32: ...

class ImplementsIRequiredThree():
    pass

class IRequiredThree(winrt.system.Object, ImplementsIRequiredThree, ImplementsIRequiredTwo, ImplementsIRequiredOne):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IRequiredThree: ...
    def one(self) -> winrt.system.Int32: ...
    def three(self) -> winrt.system.Int32: ...
    def two(self) -> winrt.system.Int32: ...

class ImplementsIRequiredTwo():
    pass

class IRequiredTwo(winrt.system.Object, ImplementsIRequiredTwo, ImplementsIRequiredOne):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IRequiredTwo: ...
    def one(self) -> winrt.system.Int32: ...
    def two(self) -> winrt.system.Int32: ...

class ImplementsITests():
    pass

class ITests(winrt.system.Object, ImplementsITests):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ITests: ...
    def array1(self, a: typing.Union[winrt.system.Array[bool], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[bool], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[bool], winrt.system.Array[bool]]: ...
    def array10(self, a: typing.Union[winrt.system.Array[winrt.system.Double], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.Double], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.Double], winrt.system.Array[winrt.system.Double]]: ...
    def array10_call(self, handler: Array10Handler, /) -> None: ...
    def array11(self, a: typing.Union[winrt.system.Array[winrt.system.Char16], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.Char16], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.Char16], winrt.system.Array[winrt.system.Char16]]: ...
    def array11_call(self, handler: Array11Handler, /) -> None: ...
    def array12(self, a: typing.Union[winrt.system.Array[str], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[str], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[str], winrt.system.Array[str]]: ...
    def array12_call(self, handler: Array12Handler, /) -> None: ...
    def array13(self, a: typing.Union[winrt.system.Array[Blittable], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[Blittable], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[Blittable], winrt.system.Array[Blittable]]: ...
    def array13_call(self, handler: Array13Handler, /) -> None: ...
    def array14(self, a: typing.Union[winrt.system.Array[NonBlittable], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[NonBlittable], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[NonBlittable], winrt.system.Array[NonBlittable]]: ...
    def array14_call(self, handler: Array14Handler, /) -> None: ...
    def array15(self, a: typing.Union[winrt.system.Array[Nested], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[Nested], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[Nested], winrt.system.Array[Nested]]: ...
    def array15_call(self, handler: Array15Handler, /) -> None: ...
    def array16(self, a: typing.Union[winrt.system.Array[windows_foundation.ImplementsIStringable], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[windows_foundation.IStringable], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[windows_foundation.IStringable], winrt.system.Array[windows_foundation.IStringable]]: ...
    def array16_call(self, handler: Array16Handler, /) -> None: ...
    def array1_call(self, handler: Array1Handler, /) -> None: ...
    def array2(self, a: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.UInt8], winrt.system.Array[winrt.system.UInt8]]: ...
    def array2_call(self, handler: Array2Handler, /) -> None: ...
    def array3(self, a: typing.Union[winrt.system.Array[winrt.system.UInt16], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.UInt16], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.UInt16], winrt.system.Array[winrt.system.UInt16]]: ...
    def array3_call(self, handler: Array3Handler, /) -> None: ...
    def array4(self, a: typing.Union[winrt.system.Array[winrt.system.UInt32], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.UInt32], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.UInt32], winrt.system.Array[winrt.system.UInt32]]: ...
    def array4_call(self, handler: Array4Handler, /) -> None: ...
    def array5(self, a: typing.Union[winrt.system.Array[winrt.system.UInt64], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.UInt64], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.UInt64], winrt.system.Array[winrt.system.UInt64]]: ...
    def array5_call(self, handler: Array5Handler, /) -> None: ...
    def array6(self, a: typing.Union[winrt.system.Array[winrt.system.Int16], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.Int16], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.Int16], winrt.system.Array[winrt.system.Int16]]: ...
    def array6_call(self, handler: Array6Handler, /) -> None: ...
    def array7(self, a: typing.Union[winrt.system.Array[winrt.system.Int32], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.Int32], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.Int32], winrt.system.Array[winrt.system.Int32]]: ...
    def array7_call(self, handler: Array7Handler, /) -> None: ...
    def array8(self, a: typing.Union[winrt.system.Array[winrt.system.Int64], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.Int64], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.Int64], winrt.system.Array[winrt.system.Int64]]: ...
    def array8_call(self, handler: Array8Handler, /) -> None: ...
    def array9(self, a: typing.Union[winrt.system.Array[winrt.system.Single], winrt.system.ReadableBuffer], b: typing.Union[winrt.system.Array[winrt.system.Single], winrt.system.WriteableBuffer], /) -> typing.Tuple[winrt.system.Array[winrt.system.Single], winrt.system.Array[winrt.system.Single]]: ...
    def array9_call(self, handler: Array9Handler, /) -> None: ...
    def async1(self, suspend: windows_foundation.ImplementsIAsyncAction, fail: bool, /) -> windows_foundation.IAsyncAction: ...
    def async1_call(self, handler: Async1Handler, /) -> None: ...
    def async2(self, suspend: windows_foundation.ImplementsIAsyncAction, fail: bool, progress: winrt.system.Int32, /) -> windows_foundation.IAsyncActionWithProgress[winrt.system.Int32]: ...
    def async2_call(self, handler: Async2Handler, /) -> None: ...
    def async3(self, suspend: windows_foundation.ImplementsIAsyncAction, fail: bool, result: winrt.system.Int32, /) -> windows_foundation.IAsyncOperation[winrt.system.Int32]: ...
    def async3_call(self, handler: Async3Handler, /) -> None: ...
    def async4(self, suspend: windows_foundation.ImplementsIAsyncAction, fail: bool, result: winrt.system.Int32, progress: winrt.system.Int32, /) -> windows_foundation.IAsyncOperationWithProgress[winrt.system.Int32, winrt.system.Int32]: ...
    def async4_call(self, handler: Async4Handler, /) -> None: ...
    def box1(self, param: winrt.system.UInt8, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box10(self, param: winrt.system.Double, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box11(self, param: _uuid.UUID, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box12(self, param: winrt.system.Char16, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box13(self, param: str, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box14(self, param: datetime.timedelta, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box15(self, param: Blittable, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box16(self, param: NonBlittable, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box17(self, param: datetime.datetime, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box18(self, param: typing.Union[winrt.system.Array[winrt.system.Int64], winrt.system.ReadableBuffer], boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box19(self, param: typing.Union[winrt.system.Array[bool], winrt.system.ReadableBuffer], boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box2(self, param: winrt.system.UInt16, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box20(self, param: typing.Union[winrt.system.Array[str], winrt.system.ReadableBuffer], boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box21(self, param: typing.Union[winrt.system.Array[datetime.timedelta], winrt.system.ReadableBuffer], boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box3(self, param: winrt.system.UInt32, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box4(self, param: winrt.system.UInt64, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box5(self, param: winrt.system.Int16, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box6(self, param: winrt.system.Int32, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box7(self, param: winrt.system.Int64, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box8(self, param: bool, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def box9(self, param: winrt.system.Single, boxed_param: winrt.system.Object, /) -> winrt.system.Object: ...
    def collection1(self, a: typing.Iterable[str], /) -> typing.Tuple[typing.Iterable[str], typing.Iterable[str]]: ...
    def collection1_call(self, handler: Collection1Handler, /) -> None: ...
    def collection2(self, a: typing.Iterable[windows_foundation_collections.ImplementsIKeyValuePair[str, str]], /) -> typing.Tuple[typing.Iterable[windows_foundation_collections.IKeyValuePair[str, str]], typing.Iterable[windows_foundation_collections.IKeyValuePair[str, str]]]: ...
    def collection2_call(self, handler: Collection2Handler, /) -> None: ...
    def collection3(self, a: typing.MutableMapping[str, str], /) -> typing.Tuple[typing.MutableMapping[str, str], typing.MutableMapping[str, str]]: ...
    def collection3_call(self, handler: Collection3Handler, /) -> None: ...
    def collection4(self, a: typing.Mapping[str, str], /) -> typing.Tuple[typing.Mapping[str, str], typing.Mapping[str, str]]: ...
    def collection4_call(self, handler: Collection4Handler, /) -> None: ...
    def collection5(self, a: typing.MutableSequence[str], /) -> typing.Tuple[typing.MutableSequence[str], typing.MutableSequence[str]]: ...
    def collection5_call(self, handler: Collection5Handler, /) -> None: ...
    def collection6(self, a: typing.Sequence[str], /) -> typing.Tuple[typing.Sequence[str], typing.Sequence[str]]: ...
    def collection6_call(self, handler: Collection6Handler, /) -> None: ...
    def event1_call(self, value: winrt.system.Int32, /) -> None: ...
    def event2_call(self, value: winrt.system.Int32, /) -> None: ...
    def get_blittable_vector_subset(self, blittable_vector: typing.Sequence[Blittable], start_index: winrt.system.Int32, /) -> typing.Sequence[Blittable]: ...
    def get_boolean_vector_subset(self, boolean_vector: typing.Sequence[bool], start_index: winrt.system.Int32, /) -> typing.Sequence[bool]: ...
    def get_class_vector_subset(self, class_vector: typing.Sequence[Class], start_index: winrt.system.Int32, /) -> typing.Sequence[Class]: ...
    def get_composable_class_vector_subset(self, class_vector: typing.Sequence[Composable], start_index: winrt.system.Int32, /) -> typing.Sequence[Composable]: ...
    def get_interface_vector_subset(self, interface_vector: typing.Sequence[ImplementsIRequiredOne], start_index: winrt.system.Int32, /) -> typing.Sequence[IRequiredOne]: ...
    def get_non_blittable_vector_subset(self, non_blittable_vector: typing.Sequence[NonBlittable], start_index: winrt.system.Int32, /) -> typing.Sequence[NonBlittable]: ...
    def get_object_vector_subset(self, object_vector: typing.Sequence[winrt.system.Object], start_index: winrt.system.Int32, /) -> typing.Sequence[winrt.system.Object]: ...
    def get_string_vector_subset(self, string_vector: typing.Sequence[str], start_index: winrt.system.Int32, /) -> typing.Sequence[str]: ...
    def param1(self, a: bool, /) -> typing.Tuple[bool, bool]: ...
    def param10(self, a: winrt.system.Double, /) -> typing.Tuple[winrt.system.Double, winrt.system.Double]: ...
    def param10_call(self, handler: Param10Handler, /) -> None: ...
    def param11(self, a: winrt.system.Char16, /) -> typing.Tuple[winrt.system.Char16, winrt.system.Char16]: ...
    def param11_call(self, handler: Param11Handler, /) -> None: ...
    def param12(self, a: str, /) -> typing.Tuple[str, str]: ...
    def param12_call(self, handler: Param12Handler, /) -> None: ...
    def param13(self, a: Blittable, b: Blittable, /) -> typing.Tuple[Blittable, Blittable]: ...
    def param13_call(self, handler: Param13Handler, /) -> None: ...
    def param14(self, a: NonBlittable, b: NonBlittable, /) -> typing.Tuple[NonBlittable, NonBlittable]: ...
    def param14_call(self, handler: Param14Handler, /) -> None: ...
    def param15(self, a: Nested, b: Nested, /) -> typing.Tuple[Nested, Nested]: ...
    def param15_call(self, handler: Param15Handler, /) -> None: ...
    def param1_call(self, handler: Param1Handler, /) -> None: ...
    def param2(self, a: winrt.system.UInt8, /) -> typing.Tuple[winrt.system.UInt8, winrt.system.UInt8]: ...
    def param2_call(self, handler: Param2Handler, /) -> None: ...
    def param3(self, a: winrt.system.UInt16, /) -> typing.Tuple[winrt.system.UInt16, winrt.system.UInt16]: ...
    def param3_call(self, handler: Param3Handler, /) -> None: ...
    def param4(self, a: winrt.system.UInt32, /) -> typing.Tuple[winrt.system.UInt32, winrt.system.UInt32]: ...
    def param4_call(self, handler: Param4Handler, /) -> None: ...
    def param5(self, a: winrt.system.UInt64, /) -> typing.Tuple[winrt.system.UInt64, winrt.system.UInt64]: ...
    def param5_call(self, handler: Param5Handler, /) -> None: ...
    def param6(self, a: winrt.system.Int16, /) -> typing.Tuple[winrt.system.Int16, winrt.system.Int16]: ...
    def param6_call(self, handler: Param6Handler, /) -> None: ...
    def param7(self, a: winrt.system.Int32, /) -> typing.Tuple[winrt.system.Int32, winrt.system.Int32]: ...
    def param7_call(self, handler: Param7Handler, /) -> None: ...
    def param8(self, a: winrt.system.Int64, /) -> typing.Tuple[winrt.system.Int64, winrt.system.Int64]: ...
    def param8_call(self, handler: Param8Handler, /) -> None: ...
    def param9(self, a: winrt.system.Single, /) -> typing.Tuple[winrt.system.Single, winrt.system.Single]: ...
    def param9_call(self, handler: Param9Handler, /) -> None: ...
    def simple(self) -> None: ...
    def add_event1(self, handler: windows_foundation.EventHandler[winrt.system.Int32], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_event1(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_event2(self, handler: windows_foundation.TypedEventHandler[ITests, winrt.system.Int32], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_event2(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def percentage(self) -> winrt.system.UInt32: ...

