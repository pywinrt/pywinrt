# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import typing
import uuid as _uuid

import winrt.system
from winrt._winrt_testcomponent import (
    Blittable,
    Nested,
    NonBlittable,
    Class,
    Composable,
    Derived,
    OverloadClass,
    TestRunner,
    IRequiredFour,
    IRequiredOne,
    IRequiredThree,
    IRequiredTwo,
    ITests,
)
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from winrt._winrt_testcomponent import (
        Composable_Static,
        Derived_Static,
        OverloadClass_Static,
    )
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from winrt._winrt_testcomponent import (
        ImplementsIRequiredFour,
        ImplementsIRequiredOne,
        ImplementsIRequiredThree,
        ImplementsIRequiredTwo,
        ImplementsITests,
    )

if typing.TYPE_CHECKING:
    import winrt.windows.foundation as windows_foundation
    import winrt.windows.foundation.collections as windows_foundation_collections

_dll_search_path_cookie_ = winrt.system._register_dll_search_path(__file__)

__all__ = [
    "Blittable",
    "Nested",
    "NonBlittable",
    "Class",
    "Composable",
    "Derived",
    "OverloadClass",
    "TestRunner",
    "IRequiredFour",
    "IRequiredOne",
    "IRequiredThree",
    "IRequiredTwo",
    "ITests",
    "Array10Handler",
    "Array11Handler",
    "Array12Handler",
    "Array13Handler",
    "Array14Handler",
    "Array15Handler",
    "Array16Handler",
    "Array1Handler",
    "Array2Handler",
    "Array3Handler",
    "Array4Handler",
    "Array5Handler",
    "Array6Handler",
    "Array7Handler",
    "Array8Handler",
    "Array9Handler",
    "Async1Handler",
    "Async2Handler",
    "Async3Handler",
    "Async4Handler",
    "Collection1Handler",
    "Collection2Handler",
    "Collection3Handler",
    "Collection4Handler",
    "Collection5Handler",
    "Collection6Handler",
    "Param10Handler",
    "Param11Handler",
    "Param12Handler",
    "Param13Handler",
    "Param14Handler",
    "Param15Handler",
    "Param1Handler",
    "Param2Handler",
    "Param3Handler",
    "Param4Handler",
    "Param5Handler",
    "Param6Handler",
    "Param7Handler",
    "Param8Handler",
    "Param9Handler",
    "TestHandler",
]

Array10Handler = typing.Callable[[winrt.system.Array[winrt.system.Double], winrt.system.Array[winrt.system.Double]], typing.Tuple[winrt.system.Array[winrt.system.Double], winrt.system.Array[winrt.system.Double]]]
Array11Handler = typing.Callable[[winrt.system.Array[winrt.system.Char16], winrt.system.Array[winrt.system.Char16]], typing.Tuple[winrt.system.Array[winrt.system.Char16], winrt.system.Array[winrt.system.Char16]]]
Array12Handler = typing.Callable[[winrt.system.Array[str], winrt.system.Array[str]], typing.Tuple[winrt.system.Array[str], winrt.system.Array[str]]]
Array13Handler = typing.Callable[[winrt.system.Array[Blittable], winrt.system.Array[Blittable]], typing.Tuple[winrt.system.Array[Blittable], winrt.system.Array[Blittable]]]
Array14Handler = typing.Callable[[winrt.system.Array[NonBlittable], winrt.system.Array[NonBlittable]], typing.Tuple[winrt.system.Array[NonBlittable], winrt.system.Array[NonBlittable]]]
Array15Handler = typing.Callable[[winrt.system.Array[Nested], winrt.system.Array[Nested]], typing.Tuple[winrt.system.Array[Nested], winrt.system.Array[Nested]]]
Array16Handler = typing.Callable[[winrt.system.Array["windows_foundation.IStringable"], winrt.system.Array["windows_foundation.IStringable"]], typing.Tuple[winrt.system.Array["windows_foundation.IStringable"], winrt.system.Array["windows_foundation.IStringable"]]]
Array1Handler = typing.Callable[[winrt.system.Array[bool], winrt.system.Array[bool]], typing.Tuple[winrt.system.Array[bool], winrt.system.Array[bool]]]
Array2Handler = typing.Callable[[winrt.system.Array[winrt.system.UInt8], winrt.system.Array[winrt.system.UInt8]], typing.Tuple[winrt.system.Array[winrt.system.UInt8], winrt.system.Array[winrt.system.UInt8]]]
Array3Handler = typing.Callable[[winrt.system.Array[winrt.system.UInt16], winrt.system.Array[winrt.system.UInt16]], typing.Tuple[winrt.system.Array[winrt.system.UInt16], winrt.system.Array[winrt.system.UInt16]]]
Array4Handler = typing.Callable[[winrt.system.Array[winrt.system.UInt32], winrt.system.Array[winrt.system.UInt32]], typing.Tuple[winrt.system.Array[winrt.system.UInt32], winrt.system.Array[winrt.system.UInt32]]]
Array5Handler = typing.Callable[[winrt.system.Array[winrt.system.UInt64], winrt.system.Array[winrt.system.UInt64]], typing.Tuple[winrt.system.Array[winrt.system.UInt64], winrt.system.Array[winrt.system.UInt64]]]
Array6Handler = typing.Callable[[winrt.system.Array[winrt.system.Int16], winrt.system.Array[winrt.system.Int16]], typing.Tuple[winrt.system.Array[winrt.system.Int16], winrt.system.Array[winrt.system.Int16]]]
Array7Handler = typing.Callable[[winrt.system.Array[winrt.system.Int32], winrt.system.Array[winrt.system.Int32]], typing.Tuple[winrt.system.Array[winrt.system.Int32], winrt.system.Array[winrt.system.Int32]]]
Array8Handler = typing.Callable[[winrt.system.Array[winrt.system.Int64], winrt.system.Array[winrt.system.Int64]], typing.Tuple[winrt.system.Array[winrt.system.Int64], winrt.system.Array[winrt.system.Int64]]]
Array9Handler = typing.Callable[[winrt.system.Array[winrt.system.Single], winrt.system.Array[winrt.system.Single]], typing.Tuple[winrt.system.Array[winrt.system.Single], winrt.system.Array[winrt.system.Single]]]
Async1Handler = typing.Callable[["windows_foundation.IAsyncAction", bool], "windows_foundation.IAsyncAction"]
Async2Handler = typing.Callable[["windows_foundation.IAsyncAction", bool, winrt.system.Int32], "windows_foundation.IAsyncActionWithProgress[winrt.system.Int32]"]
Async3Handler = typing.Callable[["windows_foundation.IAsyncAction", bool, winrt.system.Int32], "windows_foundation.IAsyncOperation[winrt.system.Int32]"]
Async4Handler = typing.Callable[["windows_foundation.IAsyncAction", bool, winrt.system.Int32, winrt.system.Int32], "windows_foundation.IAsyncOperationWithProgress[winrt.system.Int32, winrt.system.Int32]"]
Collection1Handler = typing.Callable[[typing.Iterable[str]], typing.Tuple[typing.Iterable[str], typing.Iterable[str]]]
Collection2Handler = typing.Callable[[typing.Iterable["windows_foundation_collections.IKeyValuePair[str, str]"]], typing.Tuple[typing.Iterable["windows_foundation_collections.IKeyValuePair[str, str]"], typing.Iterable["windows_foundation_collections.IKeyValuePair[str, str]"]]]
Collection3Handler = typing.Callable[[typing.MutableMapping[str, str]], typing.Tuple[typing.MutableMapping[str, str], typing.MutableMapping[str, str]]]
Collection4Handler = typing.Callable[[typing.Mapping[str, str]], typing.Tuple[typing.Mapping[str, str], typing.Mapping[str, str]]]
Collection5Handler = typing.Callable[[typing.MutableSequence[str]], typing.Tuple[typing.MutableSequence[str], typing.MutableSequence[str]]]
Collection6Handler = typing.Callable[[typing.Sequence[str]], typing.Tuple[typing.Sequence[str], typing.Sequence[str]]]
Param10Handler = typing.Callable[[winrt.system.Double], typing.Tuple[winrt.system.Double, winrt.system.Double]]
Param11Handler = typing.Callable[[winrt.system.Char16], typing.Tuple[winrt.system.Char16, winrt.system.Char16]]
Param12Handler = typing.Callable[[str], typing.Tuple[str, str]]
Param13Handler = typing.Callable[[Blittable, Blittable], typing.Tuple[Blittable, Blittable]]
Param14Handler = typing.Callable[[NonBlittable, NonBlittable], typing.Tuple[NonBlittable, NonBlittable]]
Param15Handler = typing.Callable[[Nested, Nested], typing.Tuple[Nested, Nested]]
Param1Handler = typing.Callable[[bool], typing.Tuple[bool, bool]]
Param2Handler = typing.Callable[[winrt.system.UInt8], typing.Tuple[winrt.system.UInt8, winrt.system.UInt8]]
Param3Handler = typing.Callable[[winrt.system.UInt16], typing.Tuple[winrt.system.UInt16, winrt.system.UInt16]]
Param4Handler = typing.Callable[[winrt.system.UInt32], typing.Tuple[winrt.system.UInt32, winrt.system.UInt32]]
Param5Handler = typing.Callable[[winrt.system.UInt64], typing.Tuple[winrt.system.UInt64, winrt.system.UInt64]]
Param6Handler = typing.Callable[[winrt.system.Int16], typing.Tuple[winrt.system.Int16, winrt.system.Int16]]
Param7Handler = typing.Callable[[winrt.system.Int32], typing.Tuple[winrt.system.Int32, winrt.system.Int32]]
Param8Handler = typing.Callable[[winrt.system.Int64], typing.Tuple[winrt.system.Int64, winrt.system.Int64]]
Param9Handler = typing.Callable[[winrt.system.Single], typing.Tuple[winrt.system.Single, winrt.system.Single]]
TestHandler = typing.Callable[[ITests], None]
