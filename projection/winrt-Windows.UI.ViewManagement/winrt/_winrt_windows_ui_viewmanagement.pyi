# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.devices.enumeration as windows_devices_enumeration
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.ui as windows_ui
import winrt.windows.ui.core as windows_ui_core
import winrt.windows.ui.popups as windows_ui_popups
import winrt.windows.ui.windowmanagement as windows_ui_windowmanagement

from winrt.windows.ui.viewmanagement import ApplicationViewBoundsMode, ApplicationViewMode, ApplicationViewOrientation, ApplicationViewState, ApplicationViewSwitchingOptions, ApplicationViewWindowingMode, FullScreenSystemOverlayMode, HandPreference, ScreenCaptureDisabledBehavior, UIColorType, UIElementType, UserInteractionMode, ViewSizePreference

Self = typing.TypeVar('Self')

@typing.final
class AccessibilitySettings(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.ViewManagement.AccessibilitySettings::add_HighContrastChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.ViewManagement.AccessibilitySettings,System.Object>)
    def add_high_contrast_changed(self, handler: windows_foundation.TypedEventHandler[AccessibilitySettings, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.ViewManagement.AccessibilitySettings::remove_HighContrastChanged(Windows.Foundation.EventRegistrationToken)
    def remove_high_contrast_changed(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Boolean Windows.UI.ViewManagement.AccessibilitySettings::get_HighContrast()
    @_property
    def high_contrast(self) -> bool: ...
    # System.String Windows.UI.ViewManagement.AccessibilitySettings::get_HighContrastScheme()
    @_property
    def high_contrast_scheme(self) -> str: ...

@typing.final
class ActivationViewSwitcher(winrt.system.Object):
    # System.Boolean Windows.UI.ViewManagement.ActivationViewSwitcher::IsViewPresentedOnActivationVirtualDesktop(System.Int32)
    def is_view_presented_on_activation_virtual_desktop(self, view_id: winrt.system.Int32, /) -> bool: ...
    # Windows.Foundation.IAsyncAction Windows.UI.ViewManagement.ActivationViewSwitcher::ShowAsStandaloneAsync(System.Int32)
    def show_as_standalone_async(self, view_id: winrt.system.Int32, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.UI.ViewManagement.ActivationViewSwitcher::ShowAsStandaloneAsync(System.Int32,Windows.UI.ViewManagement.ViewSizePreference)
    def show_as_standalone_with_size_preference_async(self, view_id: winrt.system.Int32, size_preference: ViewSizePreference, /) -> windows_foundation.IAsyncAction: ...

@typing.final
class ApplicationView_Static(type):
    # System.Void Windows.UI.ViewManagement.ApplicationView::ClearAllPersistedState()
    def clear_all_persisted_state(cls) -> None: ...
    # System.Void Windows.UI.ViewManagement.ApplicationView::ClearPersistedState(System.String)
    def clear_persisted_state(cls, key: str, /) -> None: ...
    # System.Int32 Windows.UI.ViewManagement.ApplicationView::GetApplicationViewIdForWindow(Windows.UI.Core.ICoreWindow)
    def get_application_view_id_for_window(cls, window: windows_ui_core.ICoreWindow, /) -> winrt.system.Int32: ...
    # Windows.UI.ViewManagement.ApplicationView Windows.UI.ViewManagement.ApplicationView::GetForCurrentView()
    def get_for_current_view(cls) -> ApplicationView: ...
    # System.Boolean Windows.UI.ViewManagement.ApplicationView::TryUnsnap()
    # @deprecated("TryUnsnap may be altered or unavailable for releases after Windows 8.1. Apps can be continuously resized, but cannot be snapped, starting in Windows 8.1.")
    def try_unsnap(cls) -> bool: ...
    # System.Boolean Windows.UI.ViewManagement.ApplicationView::TryUnsnapToFullscreen()
    # @deprecated("IApplicationViewFullscreenStatics is deprecated after Windows 8. Please use other resize APIs.")
    def try_unsnap_to_fullscreen(cls) -> bool: ...
    # Windows.UI.ViewManagement.ApplicationViewState Windows.UI.ViewManagement.ApplicationView::get_Value()
    @_property
    def value(cls) -> ApplicationViewState: ...
    # System.Boolean Windows.UI.ViewManagement.ApplicationView::get_TerminateAppOnFinalViewClose()
    @_property
    def terminate_app_on_final_view_close(cls) -> bool: ...
    # System.Void Windows.UI.ViewManagement.ApplicationView::put_TerminateAppOnFinalViewClose(System.Boolean)
    @terminate_app_on_final_view_close.setter
    def terminate_app_on_final_view_close(cls, value: bool) -> None: ...
    # Windows.UI.ViewManagement.ApplicationViewWindowingMode Windows.UI.ViewManagement.ApplicationView::get_PreferredLaunchWindowingMode()
    @_property
    def preferred_launch_windowing_mode(cls) -> ApplicationViewWindowingMode: ...
    # System.Void Windows.UI.ViewManagement.ApplicationView::put_PreferredLaunchWindowingMode(Windows.UI.ViewManagement.ApplicationViewWindowingMode)
    @preferred_launch_windowing_mode.setter
    def preferred_launch_windowing_mode(cls, value: ApplicationViewWindowingMode) -> None: ...
    # Windows.Foundation.Size Windows.UI.ViewManagement.ApplicationView::get_PreferredLaunchViewSize()
    @_property
    def preferred_launch_view_size(cls) -> windows_foundation.Size: ...
    # System.Void Windows.UI.ViewManagement.ApplicationView::put_PreferredLaunchViewSize(Windows.Foundation.Size)
    @preferred_launch_view_size.setter
    def preferred_launch_view_size(cls, value: windows_foundation.Size) -> None: ...

@typing.final
class ApplicationView(winrt.system.Object, metaclass=ApplicationView_Static):
    # System.Void Windows.UI.ViewManagement.ApplicationView::ExitFullScreenMode()
    def exit_full_screen_mode(self) -> None: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.WindowManagement.DisplayRegion> Windows.UI.ViewManagement.ApplicationView::GetDisplayRegions()
    def get_display_regions(self) -> typing.Sequence[windows_ui_windowmanagement.DisplayRegion]: ...
    # System.Boolean Windows.UI.ViewManagement.ApplicationView::IsViewModeSupported(Windows.UI.ViewManagement.ApplicationViewMode)
    def is_view_mode_supported(self, view_mode: ApplicationViewMode, /) -> bool: ...
    # System.Boolean Windows.UI.ViewManagement.ApplicationView::SetDesiredBoundsMode(Windows.UI.ViewManagement.ApplicationViewBoundsMode)
    def set_desired_bounds_mode(self, bounds_mode: ApplicationViewBoundsMode, /) -> bool: ...
    # System.Void Windows.UI.ViewManagement.ApplicationView::SetPreferredMinSize(Windows.Foundation.Size)
    def set_preferred_min_size(self, min_size: windows_foundation.Size, /) -> None: ...
    # System.Void Windows.UI.ViewManagement.ApplicationView::ShowStandardSystemOverlays()
    def show_standard_system_overlays(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.ViewManagement.ApplicationView::TryConsolidateAsync()
    def try_consolidate_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Boolean Windows.UI.ViewManagement.ApplicationView::TryEnterFullScreenMode()
    def try_enter_full_screen_mode(self) -> bool: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.ViewManagement.ApplicationView::TryEnterViewModeAsync(Windows.UI.ViewManagement.ApplicationViewMode)
    def try_enter_view_mode_async(self, view_mode: ApplicationViewMode, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.ViewManagement.ApplicationView::TryEnterViewModeAsync(Windows.UI.ViewManagement.ApplicationViewMode,Windows.UI.ViewManagement.ViewModePreferences)
    def try_enter_view_mode_with_preferences_async(self, view_mode: ApplicationViewMode, view_mode_preferences: ViewModePreferences, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Boolean Windows.UI.ViewManagement.ApplicationView::TryResizeView(Windows.Foundation.Size)
    def try_resize_view(self, value: windows_foundation.Size, /) -> bool: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.ViewManagement.ApplicationView::add_Consolidated(Windows.Foundation.TypedEventHandler`2<Windows.UI.ViewManagement.ApplicationView,Windows.UI.ViewManagement.ApplicationViewConsolidatedEventArgs>)
    def add_consolidated(self, handler: windows_foundation.TypedEventHandler[ApplicationView, ApplicationViewConsolidatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.ViewManagement.ApplicationView::remove_Consolidated(Windows.Foundation.EventRegistrationToken)
    def remove_consolidated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.ViewManagement.ApplicationView::add_VisibleBoundsChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.ViewManagement.ApplicationView,System.Object>)
    def add_visible_bounds_changed(self, handler: windows_foundation.TypedEventHandler[ApplicationView, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.ViewManagement.ApplicationView::remove_VisibleBoundsChanged(Windows.Foundation.EventRegistrationToken)
    def remove_visible_bounds_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Boolean Windows.UI.ViewManagement.ApplicationView::get_IsScreenCaptureEnabled()
    @_property
    def is_screen_capture_enabled(self) -> bool: ...
    # System.Void Windows.UI.ViewManagement.ApplicationView::put_IsScreenCaptureEnabled(System.Boolean)
    @is_screen_capture_enabled.setter
    def is_screen_capture_enabled(self, value: bool) -> None: ...
    # System.String Windows.UI.ViewManagement.ApplicationView::get_Title()
    @_property
    def title(self) -> str: ...
    # System.Void Windows.UI.ViewManagement.ApplicationView::put_Title(System.String)
    @title.setter
    def title(self, value: str) -> None: ...
    # System.Boolean Windows.UI.ViewManagement.ApplicationView::get_AdjacentToLeftDisplayEdge()
    @_property
    def adjacent_to_left_display_edge(self) -> bool: ...
    # System.Boolean Windows.UI.ViewManagement.ApplicationView::get_AdjacentToRightDisplayEdge()
    @_property
    def adjacent_to_right_display_edge(self) -> bool: ...
    # System.Int32 Windows.UI.ViewManagement.ApplicationView::get_Id()
    @_property
    def id(self) -> winrt.system.Int32: ...
    # System.Boolean Windows.UI.ViewManagement.ApplicationView::get_IsFullScreen()
    @_property
    def is_full_screen(self) -> bool: ...
    # System.Boolean Windows.UI.ViewManagement.ApplicationView::get_IsOnLockScreen()
    @_property
    def is_on_lock_screen(self) -> bool: ...
    # Windows.UI.ViewManagement.ApplicationViewOrientation Windows.UI.ViewManagement.ApplicationView::get_Orientation()
    @_property
    def orientation(self) -> ApplicationViewOrientation: ...
    # System.Boolean Windows.UI.ViewManagement.ApplicationView::get_SuppressSystemOverlays()
    @_property
    def suppress_system_overlays(self) -> bool: ...
    # System.Void Windows.UI.ViewManagement.ApplicationView::put_SuppressSystemOverlays(System.Boolean)
    @suppress_system_overlays.setter
    def suppress_system_overlays(self, value: bool) -> None: ...
    # Windows.UI.ViewManagement.ApplicationViewBoundsMode Windows.UI.ViewManagement.ApplicationView::get_DesiredBoundsMode()
    @_property
    def desired_bounds_mode(self) -> ApplicationViewBoundsMode: ...
    # Windows.Foundation.Rect Windows.UI.ViewManagement.ApplicationView::get_VisibleBounds()
    @_property
    def visible_bounds(self) -> windows_foundation.Rect: ...
    # Windows.UI.ViewManagement.FullScreenSystemOverlayMode Windows.UI.ViewManagement.ApplicationView::get_FullScreenSystemOverlayMode()
    @_property
    def full_screen_system_overlay_mode(self) -> FullScreenSystemOverlayMode: ...
    # System.Void Windows.UI.ViewManagement.ApplicationView::put_FullScreenSystemOverlayMode(Windows.UI.ViewManagement.FullScreenSystemOverlayMode)
    @full_screen_system_overlay_mode.setter
    def full_screen_system_overlay_mode(self, value: FullScreenSystemOverlayMode) -> None: ...
    # Windows.UI.ViewManagement.ApplicationViewTitleBar Windows.UI.ViewManagement.ApplicationView::get_TitleBar()
    @_property
    def title_bar(self) -> ApplicationViewTitleBar: ...
    # System.Boolean Windows.UI.ViewManagement.ApplicationView::get_IsFullScreenMode()
    @_property
    def is_full_screen_mode(self) -> bool: ...
    # Windows.UI.ViewManagement.ApplicationViewMode Windows.UI.ViewManagement.ApplicationView::get_ViewMode()
    @_property
    def view_mode(self) -> ApplicationViewMode: ...
    # System.String Windows.UI.ViewManagement.ApplicationView::get_PersistedStateId()
    @_property
    def persisted_state_id(self) -> str: ...
    # System.Void Windows.UI.ViewManagement.ApplicationView::put_PersistedStateId(System.String)
    @persisted_state_id.setter
    def persisted_state_id(self, value: str) -> None: ...
    # Windows.UI.WindowManagement.WindowingEnvironment Windows.UI.ViewManagement.ApplicationView::get_WindowingEnvironment()
    @_property
    def windowing_environment(self) -> windows_ui_windowmanagement.WindowingEnvironment: ...
    # Windows.UI.UIContext Windows.UI.ViewManagement.ApplicationView::get_UIContext()
    @_property
    def ui_context(self) -> windows_ui.UIContext: ...

@typing.final
class ApplicationViewConsolidatedEventArgs(winrt.system.Object):
    # System.Boolean Windows.UI.ViewManagement.ApplicationViewConsolidatedEventArgs::get_IsUserInitiated()
    @_property
    def is_user_initiated(self) -> bool: ...
    # System.Boolean Windows.UI.ViewManagement.ApplicationViewConsolidatedEventArgs::get_IsAppInitiated()
    @_property
    def is_app_initiated(self) -> bool: ...

@typing.final
class ApplicationViewScaling_Static(type):
    # System.Boolean Windows.UI.ViewManagement.ApplicationViewScaling::TrySetDisableLayoutScaling(System.Boolean)
    def try_set_disable_layout_scaling(cls, disable_layout_scaling: bool, /) -> bool: ...
    # System.Boolean Windows.UI.ViewManagement.ApplicationViewScaling::get_DisableLayoutScaling()
    @_property
    def disable_layout_scaling(cls) -> bool: ...

@typing.final
class ApplicationViewScaling(winrt.system.Object, metaclass=ApplicationViewScaling_Static):
    pass

@typing.final
class ApplicationViewSwitcher_Static(type):
    # System.Void Windows.UI.ViewManagement.ApplicationViewSwitcher::DisableShowingMainViewOnActivation()
    def disable_showing_main_view_on_activation(cls) -> None: ...
    # System.Void Windows.UI.ViewManagement.ApplicationViewSwitcher::DisableSystemViewActivationPolicy()
    def disable_system_view_activation_policy(cls) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.ViewManagement.ApplicationViewSwitcher::PrepareForCustomAnimatedSwitchAsync(System.Int32,System.Int32,Windows.UI.ViewManagement.ApplicationViewSwitchingOptions)
    def prepare_for_custom_animated_switch_async(cls, to_view_id: winrt.system.Int32, from_view_id: winrt.system.Int32, options: ApplicationViewSwitchingOptions, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncAction Windows.UI.ViewManagement.ApplicationViewSwitcher::SwitchAsync(System.Int32)
    def switch_async(cls, view_id: winrt.system.Int32, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.UI.ViewManagement.ApplicationViewSwitcher::SwitchAsync(System.Int32,System.Int32)
    def switch_from_view_async(cls, to_view_id: winrt.system.Int32, from_view_id: winrt.system.Int32, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.UI.ViewManagement.ApplicationViewSwitcher::SwitchAsync(System.Int32,System.Int32,Windows.UI.ViewManagement.ApplicationViewSwitchingOptions)
    def switch_from_view_with_options_async(cls, to_view_id: winrt.system.Int32, from_view_id: winrt.system.Int32, options: ApplicationViewSwitchingOptions, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.ViewManagement.ApplicationViewSwitcher::TryShowAsStandaloneAsync(System.Int32)
    def try_show_as_standalone_async(cls, view_id: winrt.system.Int32, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.ViewManagement.ApplicationViewSwitcher::TryShowAsStandaloneAsync(System.Int32,Windows.UI.ViewManagement.ViewSizePreference,System.Int32,Windows.UI.ViewManagement.ViewSizePreference)
    def try_show_as_standalone_with_anchor_view_and_size_preference_async(cls, view_id: winrt.system.Int32, size_preference: ViewSizePreference, anchor_view_id: winrt.system.Int32, anchor_size_preference: ViewSizePreference, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.ViewManagement.ApplicationViewSwitcher::TryShowAsStandaloneAsync(System.Int32,Windows.UI.ViewManagement.ViewSizePreference)
    def try_show_as_standalone_with_size_preference_async(cls, view_id: winrt.system.Int32, size_preference: ViewSizePreference, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.ViewManagement.ApplicationViewSwitcher::TryShowAsViewModeAsync(System.Int32,Windows.UI.ViewManagement.ApplicationViewMode)
    def try_show_as_view_mode_async(cls, view_id: winrt.system.Int32, view_mode: ApplicationViewMode, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.ViewManagement.ApplicationViewSwitcher::TryShowAsViewModeAsync(System.Int32,Windows.UI.ViewManagement.ApplicationViewMode,Windows.UI.ViewManagement.ViewModePreferences)
    def try_show_as_view_mode_with_preferences_async(cls, view_id: winrt.system.Int32, view_mode: ApplicationViewMode, view_mode_preferences: ViewModePreferences, /) -> windows_foundation.IAsyncOperation[bool]: ...

@typing.final
class ApplicationViewSwitcher(winrt.system.Object, metaclass=ApplicationViewSwitcher_Static):
    pass

@typing.final
class ApplicationViewTitleBar(winrt.system.Object):
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.ViewManagement.ApplicationViewTitleBar::get_InactiveForegroundColor()
    @_property
    def inactive_foreground_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.ViewManagement.ApplicationViewTitleBar::put_InactiveForegroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @inactive_foreground_color.setter
    def inactive_foreground_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.ViewManagement.ApplicationViewTitleBar::get_InactiveBackgroundColor()
    @_property
    def inactive_background_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.ViewManagement.ApplicationViewTitleBar::put_InactiveBackgroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @inactive_background_color.setter
    def inactive_background_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.ViewManagement.ApplicationViewTitleBar::get_ForegroundColor()
    @_property
    def foreground_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.ViewManagement.ApplicationViewTitleBar::put_ForegroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @foreground_color.setter
    def foreground_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.ViewManagement.ApplicationViewTitleBar::get_ButtonPressedForegroundColor()
    @_property
    def button_pressed_foreground_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.ViewManagement.ApplicationViewTitleBar::put_ButtonPressedForegroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @button_pressed_foreground_color.setter
    def button_pressed_foreground_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.ViewManagement.ApplicationViewTitleBar::get_ButtonPressedBackgroundColor()
    @_property
    def button_pressed_background_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.ViewManagement.ApplicationViewTitleBar::put_ButtonPressedBackgroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @button_pressed_background_color.setter
    def button_pressed_background_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.ViewManagement.ApplicationViewTitleBar::get_ButtonInactiveForegroundColor()
    @_property
    def button_inactive_foreground_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.ViewManagement.ApplicationViewTitleBar::put_ButtonInactiveForegroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @button_inactive_foreground_color.setter
    def button_inactive_foreground_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.ViewManagement.ApplicationViewTitleBar::get_ButtonInactiveBackgroundColor()
    @_property
    def button_inactive_background_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.ViewManagement.ApplicationViewTitleBar::put_ButtonInactiveBackgroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @button_inactive_background_color.setter
    def button_inactive_background_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.ViewManagement.ApplicationViewTitleBar::get_ButtonHoverForegroundColor()
    @_property
    def button_hover_foreground_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.ViewManagement.ApplicationViewTitleBar::put_ButtonHoverForegroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @button_hover_foreground_color.setter
    def button_hover_foreground_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.ViewManagement.ApplicationViewTitleBar::get_ButtonHoverBackgroundColor()
    @_property
    def button_hover_background_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.ViewManagement.ApplicationViewTitleBar::put_ButtonHoverBackgroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @button_hover_background_color.setter
    def button_hover_background_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.ViewManagement.ApplicationViewTitleBar::get_ButtonForegroundColor()
    @_property
    def button_foreground_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.ViewManagement.ApplicationViewTitleBar::put_ButtonForegroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @button_foreground_color.setter
    def button_foreground_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.ViewManagement.ApplicationViewTitleBar::get_ButtonBackgroundColor()
    @_property
    def button_background_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.ViewManagement.ApplicationViewTitleBar::put_ButtonBackgroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @button_background_color.setter
    def button_background_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.ViewManagement.ApplicationViewTitleBar::get_BackgroundColor()
    @_property
    def background_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.ViewManagement.ApplicationViewTitleBar::put_BackgroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @background_color.setter
    def background_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...

@typing.final
class ApplicationViewTransferContext_Static(type):
    # System.String Windows.UI.ViewManagement.ApplicationViewTransferContext::get_DataPackageFormatId()
    @_property
    def data_package_format_id(cls) -> str: ...

@typing.final
class ApplicationViewTransferContext(winrt.system.Object, metaclass=ApplicationViewTransferContext_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Int32 Windows.UI.ViewManagement.ApplicationViewTransferContext::get_ViewId()
    @_property
    def view_id(self) -> winrt.system.Int32: ...
    # System.Void Windows.UI.ViewManagement.ApplicationViewTransferContext::put_ViewId(System.Int32)
    @view_id.setter
    def view_id(self, value: winrt.system.Int32) -> None: ...

@typing.final
class InputPane_Static(type):
    # Windows.UI.ViewManagement.InputPane Windows.UI.ViewManagement.InputPane::GetForCurrentView()
    def get_for_current_view(cls) -> InputPane: ...
    # Windows.UI.ViewManagement.InputPane Windows.UI.ViewManagement.InputPane::GetForUIContext(Windows.UI.UIContext)
    def get_for_ui_context(cls, context: windows_ui.UIContext, /) -> InputPane: ...

@typing.final
class InputPane(winrt.system.Object, metaclass=InputPane_Static):
    # System.Boolean Windows.UI.ViewManagement.InputPane::TryHide()
    def try_hide(self) -> bool: ...
    # System.Boolean Windows.UI.ViewManagement.InputPane::TryShow()
    def try_show(self) -> bool: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.ViewManagement.InputPane::add_Hiding(Windows.Foundation.TypedEventHandler`2<Windows.UI.ViewManagement.InputPane,Windows.UI.ViewManagement.InputPaneVisibilityEventArgs>)
    def add_hiding(self, handler: windows_foundation.TypedEventHandler[InputPane, InputPaneVisibilityEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.ViewManagement.InputPane::remove_Hiding(Windows.Foundation.EventRegistrationToken)
    def remove_hiding(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.ViewManagement.InputPane::add_Showing(Windows.Foundation.TypedEventHandler`2<Windows.UI.ViewManagement.InputPane,Windows.UI.ViewManagement.InputPaneVisibilityEventArgs>)
    def add_showing(self, handler: windows_foundation.TypedEventHandler[InputPane, InputPaneVisibilityEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.ViewManagement.InputPane::remove_Showing(Windows.Foundation.EventRegistrationToken)
    def remove_showing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.Rect Windows.UI.ViewManagement.InputPane::get_OccludedRect()
    @_property
    def occluded_rect(self) -> windows_foundation.Rect: ...
    # System.Boolean Windows.UI.ViewManagement.InputPane::get_Visible()
    @_property
    def visible(self) -> bool: ...
    # System.Void Windows.UI.ViewManagement.InputPane::put_Visible(System.Boolean)
    @visible.setter
    def visible(self, value: bool) -> None: ...

@typing.final
class InputPaneVisibilityEventArgs(winrt.system.Object):
    # System.Boolean Windows.UI.ViewManagement.InputPaneVisibilityEventArgs::get_EnsuredFocusedElementInView()
    @_property
    def ensured_focused_element_in_view(self) -> bool: ...
    # System.Void Windows.UI.ViewManagement.InputPaneVisibilityEventArgs::put_EnsuredFocusedElementInView(System.Boolean)
    @ensured_focused_element_in_view.setter
    def ensured_focused_element_in_view(self, value: bool) -> None: ...
    # Windows.Foundation.Rect Windows.UI.ViewManagement.InputPaneVisibilityEventArgs::get_OccludedRect()
    @_property
    def occluded_rect(self) -> windows_foundation.Rect: ...

@typing.final
class ProjectionManager_Static(type):
    # System.String Windows.UI.ViewManagement.ProjectionManager::GetDeviceSelector()
    def get_device_selector(cls) -> str: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.ViewManagement.ProjectionManager::RequestStartProjectingAsync(System.Int32,System.Int32,Windows.Foundation.Rect)
    def request_start_projecting_async(cls, projection_view_id: winrt.system.Int32, anchor_view_id: winrt.system.Int32, selection: windows_foundation.Rect, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.ViewManagement.ProjectionManager::RequestStartProjectingAsync(System.Int32,System.Int32,Windows.Foundation.Rect,Windows.UI.Popups.Placement)
    def request_start_projecting_with_placement_async(cls, projection_view_id: winrt.system.Int32, anchor_view_id: winrt.system.Int32, selection: windows_foundation.Rect, preffered_placement: windows_ui_popups.Placement, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncAction Windows.UI.ViewManagement.ProjectionManager::StartProjectingAsync(System.Int32,System.Int32)
    def start_projecting_async(cls, projection_view_id: winrt.system.Int32, anchor_view_id: winrt.system.Int32, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.UI.ViewManagement.ProjectionManager::StartProjectingAsync(System.Int32,System.Int32,Windows.Devices.Enumeration.DeviceInformation)
    def start_projecting_with_device_info_async(cls, projection_view_id: winrt.system.Int32, anchor_view_id: winrt.system.Int32, display_device_info: windows_devices_enumeration.DeviceInformation, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.UI.ViewManagement.ProjectionManager::StopProjectingAsync(System.Int32,System.Int32)
    def stop_projecting_async(cls, projection_view_id: winrt.system.Int32, anchor_view_id: winrt.system.Int32, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.UI.ViewManagement.ProjectionManager::SwapDisplaysForViewsAsync(System.Int32,System.Int32)
    def swap_displays_for_views_async(cls, projection_view_id: winrt.system.Int32, anchor_view_id: winrt.system.Int32, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.ViewManagement.ProjectionManager::add_ProjectionDisplayAvailableChanged(Windows.Foundation.EventHandler`1<System.Object>)
    def add_projection_display_available_changed(cls, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.ViewManagement.ProjectionManager::remove_ProjectionDisplayAvailableChanged(Windows.Foundation.EventRegistrationToken)
    def remove_projection_display_available_changed(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Boolean Windows.UI.ViewManagement.ProjectionManager::get_ProjectionDisplayAvailable()
    @_property
    def projection_display_available(cls) -> bool: ...

@typing.final
class ProjectionManager(winrt.system.Object, metaclass=ProjectionManager_Static):
    pass

@typing.final
class StatusBar_Static(type):
    # Windows.UI.ViewManagement.StatusBar Windows.UI.ViewManagement.StatusBar::GetForCurrentView()
    def get_for_current_view(cls) -> StatusBar: ...

@typing.final
class StatusBar(winrt.system.Object, metaclass=StatusBar_Static):
    # Windows.Foundation.IAsyncAction Windows.UI.ViewManagement.StatusBar::HideAsync()
    def hide_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.UI.ViewManagement.StatusBar::ShowAsync()
    def show_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.ViewManagement.StatusBar::add_Hiding(Windows.Foundation.TypedEventHandler`2<Windows.UI.ViewManagement.StatusBar,System.Object>)
    def add_hiding(self, event_handler: windows_foundation.TypedEventHandler[StatusBar, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.ViewManagement.StatusBar::remove_Hiding(Windows.Foundation.EventRegistrationToken)
    def remove_hiding(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.ViewManagement.StatusBar::add_Showing(Windows.Foundation.TypedEventHandler`2<Windows.UI.ViewManagement.StatusBar,System.Object>)
    def add_showing(self, event_handler: windows_foundation.TypedEventHandler[StatusBar, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.ViewManagement.StatusBar::remove_Showing(Windows.Foundation.EventRegistrationToken)
    def remove_showing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.ViewManagement.StatusBar::get_ForegroundColor()
    @_property
    def foreground_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.ViewManagement.StatusBar::put_ForegroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @foreground_color.setter
    def foreground_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # System.Double Windows.UI.ViewManagement.StatusBar::get_BackgroundOpacity()
    @_property
    def background_opacity(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.ViewManagement.StatusBar::put_BackgroundOpacity(System.Double)
    @background_opacity.setter
    def background_opacity(self, value: winrt.system.Double) -> None: ...
    # Windows.Foundation.IReference`1<Windows.UI.Color> Windows.UI.ViewManagement.StatusBar::get_BackgroundColor()
    @_property
    def background_color(self) -> typing.Optional[windows_ui.Color]: ...
    # System.Void Windows.UI.ViewManagement.StatusBar::put_BackgroundColor(Windows.Foundation.IReference`1<Windows.UI.Color>)
    @background_color.setter
    def background_color(self, value: typing.Optional[windows_ui.Color]) -> None: ...
    # Windows.Foundation.Rect Windows.UI.ViewManagement.StatusBar::get_OccludedRect()
    @_property
    def occluded_rect(self) -> windows_foundation.Rect: ...
    # Windows.UI.ViewManagement.StatusBarProgressIndicator Windows.UI.ViewManagement.StatusBar::get_ProgressIndicator()
    @_property
    def progress_indicator(self) -> StatusBarProgressIndicator: ...

@typing.final
class StatusBarProgressIndicator(winrt.system.Object):
    # Windows.Foundation.IAsyncAction Windows.UI.ViewManagement.StatusBarProgressIndicator::HideAsync()
    def hide_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.UI.ViewManagement.StatusBarProgressIndicator::ShowAsync()
    def show_async(self) -> windows_foundation.IAsyncAction: ...
    # System.String Windows.UI.ViewManagement.StatusBarProgressIndicator::get_Text()
    @_property
    def text(self) -> str: ...
    # System.Void Windows.UI.ViewManagement.StatusBarProgressIndicator::put_Text(System.String)
    @text.setter
    def text(self, value: str) -> None: ...
    # Windows.Foundation.IReference`1<System.Double> Windows.UI.ViewManagement.StatusBarProgressIndicator::get_ProgressValue()
    @_property
    def progress_value(self) -> typing.Optional[winrt.system.Double]: ...
    # System.Void Windows.UI.ViewManagement.StatusBarProgressIndicator::put_ProgressValue(Windows.Foundation.IReference`1<System.Double>)
    @progress_value.setter
    def progress_value(self, value: typing.Optional[winrt.system.Double]) -> None: ...

@typing.final
class UISettings(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.UI.Color Windows.UI.ViewManagement.UISettings::GetColorValue(Windows.UI.ViewManagement.UIColorType)
    def get_color_value(self, desired_color: UIColorType, /) -> windows_ui.Color: ...
    # Windows.UI.Color Windows.UI.ViewManagement.UISettings::UIElementColor(Windows.UI.ViewManagement.UIElementType)
    def ui_element_color(self, desired_element: UIElementType, /) -> windows_ui.Color: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.ViewManagement.UISettings::add_TextScaleFactorChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.ViewManagement.UISettings,System.Object>)
    def add_text_scale_factor_changed(self, handler: windows_foundation.TypedEventHandler[UISettings, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.ViewManagement.UISettings::remove_TextScaleFactorChanged(Windows.Foundation.EventRegistrationToken)
    def remove_text_scale_factor_changed(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.ViewManagement.UISettings::add_ColorValuesChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.ViewManagement.UISettings,System.Object>)
    def add_color_values_changed(self, handler: windows_foundation.TypedEventHandler[UISettings, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.ViewManagement.UISettings::remove_ColorValuesChanged(Windows.Foundation.EventRegistrationToken)
    def remove_color_values_changed(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.ViewManagement.UISettings::add_AdvancedEffectsEnabledChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.ViewManagement.UISettings,System.Object>)
    def add_advanced_effects_enabled_changed(self, handler: windows_foundation.TypedEventHandler[UISettings, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.ViewManagement.UISettings::remove_AdvancedEffectsEnabledChanged(Windows.Foundation.EventRegistrationToken)
    def remove_advanced_effects_enabled_changed(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.ViewManagement.UISettings::add_AutoHideScrollBarsChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.ViewManagement.UISettings,Windows.UI.ViewManagement.UISettingsAutoHideScrollBarsChangedEventArgs>)
    def add_auto_hide_scroll_bars_changed(self, handler: windows_foundation.TypedEventHandler[UISettings, UISettingsAutoHideScrollBarsChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.ViewManagement.UISettings::remove_AutoHideScrollBarsChanged(Windows.Foundation.EventRegistrationToken)
    def remove_auto_hide_scroll_bars_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.ViewManagement.UISettings::add_AnimationsEnabledChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.ViewManagement.UISettings,Windows.UI.ViewManagement.UISettingsAnimationsEnabledChangedEventArgs>)
    def add_animations_enabled_changed(self, handler: windows_foundation.TypedEventHandler[UISettings, UISettingsAnimationsEnabledChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.ViewManagement.UISettings::remove_AnimationsEnabledChanged(Windows.Foundation.EventRegistrationToken)
    def remove_animations_enabled_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.ViewManagement.UISettings::add_MessageDurationChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.ViewManagement.UISettings,Windows.UI.ViewManagement.UISettingsMessageDurationChangedEventArgs>)
    def add_message_duration_changed(self, handler: windows_foundation.TypedEventHandler[UISettings, UISettingsMessageDurationChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.ViewManagement.UISettings::remove_MessageDurationChanged(Windows.Foundation.EventRegistrationToken)
    def remove_message_duration_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Boolean Windows.UI.ViewManagement.UISettings::get_AnimationsEnabled()
    @_property
    def animations_enabled(self) -> bool: ...
    # System.UInt32 Windows.UI.ViewManagement.UISettings::get_CaretBlinkRate()
    @_property
    def caret_blink_rate(self) -> winrt.system.UInt32: ...
    # System.Boolean Windows.UI.ViewManagement.UISettings::get_CaretBrowsingEnabled()
    @_property
    def caret_browsing_enabled(self) -> bool: ...
    # System.UInt32 Windows.UI.ViewManagement.UISettings::get_CaretWidth()
    @_property
    def caret_width(self) -> winrt.system.UInt32: ...
    # Windows.Foundation.Size Windows.UI.ViewManagement.UISettings::get_CursorSize()
    @_property
    def cursor_size(self) -> windows_foundation.Size: ...
    # System.UInt32 Windows.UI.ViewManagement.UISettings::get_DoubleClickTime()
    @_property
    def double_click_time(self) -> winrt.system.UInt32: ...
    # Windows.UI.ViewManagement.HandPreference Windows.UI.ViewManagement.UISettings::get_HandPreference()
    @_property
    def hand_preference(self) -> HandPreference: ...
    # System.UInt32 Windows.UI.ViewManagement.UISettings::get_MessageDuration()
    @_property
    def message_duration(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.UI.ViewManagement.UISettings::get_MouseHoverTime()
    @_property
    def mouse_hover_time(self) -> winrt.system.UInt32: ...
    # Windows.Foundation.Size Windows.UI.ViewManagement.UISettings::get_ScrollBarArrowSize()
    @_property
    def scroll_bar_arrow_size(self) -> windows_foundation.Size: ...
    # Windows.Foundation.Size Windows.UI.ViewManagement.UISettings::get_ScrollBarSize()
    @_property
    def scroll_bar_size(self) -> windows_foundation.Size: ...
    # Windows.Foundation.Size Windows.UI.ViewManagement.UISettings::get_ScrollBarThumbBoxSize()
    @_property
    def scroll_bar_thumb_box_size(self) -> windows_foundation.Size: ...
    # System.Double Windows.UI.ViewManagement.UISettings::get_TextScaleFactor()
    @_property
    def text_scale_factor(self) -> winrt.system.Double: ...
    # System.Boolean Windows.UI.ViewManagement.UISettings::get_AdvancedEffectsEnabled()
    @_property
    def advanced_effects_enabled(self) -> bool: ...
    # System.Boolean Windows.UI.ViewManagement.UISettings::get_AutoHideScrollBars()
    @_property
    def auto_hide_scroll_bars(self) -> bool: ...

@typing.final
class UISettingsAnimationsEnabledChangedEventArgs(winrt.system.Object):
    pass

@typing.final
class UISettingsAutoHideScrollBarsChangedEventArgs(winrt.system.Object):
    pass

@typing.final
class UISettingsMessageDurationChangedEventArgs(winrt.system.Object):
    pass

@typing.final
class UIViewSettings_Static(type):
    # Windows.UI.ViewManagement.UIViewSettings Windows.UI.ViewManagement.UIViewSettings::GetForCurrentView()
    def get_for_current_view(cls) -> UIViewSettings: ...

@typing.final
class UIViewSettings(winrt.system.Object, metaclass=UIViewSettings_Static):
    # Windows.UI.ViewManagement.UserInteractionMode Windows.UI.ViewManagement.UIViewSettings::get_UserInteractionMode()
    @_property
    def user_interaction_mode(self) -> UserInteractionMode: ...

@typing.final
class ViewModePreferences_Static(type):
    # Windows.UI.ViewManagement.ViewModePreferences Windows.UI.ViewManagement.ViewModePreferences::CreateDefault(Windows.UI.ViewManagement.ApplicationViewMode)
    def create_default(cls, mode: ApplicationViewMode, /) -> ViewModePreferences: ...

@typing.final
class ViewModePreferences(winrt.system.Object, metaclass=ViewModePreferences_Static):
    # Windows.UI.ViewManagement.ViewSizePreference Windows.UI.ViewManagement.ViewModePreferences::get_ViewSizePreference()
    @_property
    def view_size_preference(self) -> ViewSizePreference: ...
    # System.Void Windows.UI.ViewManagement.ViewModePreferences::put_ViewSizePreference(Windows.UI.ViewManagement.ViewSizePreference)
    @view_size_preference.setter
    def view_size_preference(self, value: ViewSizePreference) -> None: ...
    # Windows.Foundation.Size Windows.UI.ViewManagement.ViewModePreferences::get_CustomSize()
    @_property
    def custom_size(self) -> windows_foundation.Size: ...
    # System.Void Windows.UI.ViewManagement.ViewModePreferences::put_CustomSize(Windows.Foundation.Size)
    @custom_size.setter
    def custom_size(self, value: windows_foundation.Size) -> None: ...

