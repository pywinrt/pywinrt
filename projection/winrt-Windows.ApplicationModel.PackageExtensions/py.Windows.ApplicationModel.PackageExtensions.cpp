// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.3.0

#include "py.Windows.ApplicationModel.PackageExtensions.h"

namespace py::cpp::Windows::ApplicationModel::PackageExtensions
{
    // ----- PackageExtension class --------------------

    static PyObject* _new_PackageExtension(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtension>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtension>::type_name);
        return nullptr;
    }

    static void _dealloc_PackageExtension(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtension* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PackageExtension_GetExtensionProperties(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtension* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtension", L"GetExtensionProperties", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert(self->obj.GetExtensionProperties());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PackageExtension_GetExtensionPropertiesAsync(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtension* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtension", L"GetExtensionPropertiesAsync", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert(self->obj.GetExtensionPropertiesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PackageExtension_GetPublicFolder(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtension* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtension", L"GetPublicFolder", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert(self->obj.GetPublicFolder());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PackageExtension_GetPublicFolderAsync(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtension* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtension", L"GetPublicFolderAsync", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert(self->obj.GetPublicFolderAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PackageExtension_GetPublicPath(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtension* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtension", L"GetPublicPath", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert(self->obj.GetPublicPath());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PackageExtension_get_Description(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtension* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtension", L"Description");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtension_get_DisplayName(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtension* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtension", L"DisplayName");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtension_get_Id(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtension* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtension", L"Id");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtension_get_Package(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtension* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtension", L"Package");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PackageExtension(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtension>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PackageExtension(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtension>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PackageExtension[] = {
        { "get_extension_properties", reinterpret_cast<PyCFunction>(PackageExtension_GetExtensionProperties), METH_VARARGS, nullptr },
        { "get_extension_properties_async", reinterpret_cast<PyCFunction>(PackageExtension_GetExtensionPropertiesAsync), METH_VARARGS, nullptr },
        { "get_public_folder", reinterpret_cast<PyCFunction>(PackageExtension_GetPublicFolder), METH_VARARGS, nullptr },
        { "get_public_folder_async", reinterpret_cast<PyCFunction>(PackageExtension_GetPublicFolderAsync), METH_VARARGS, nullptr },
        { "get_public_path", reinterpret_cast<PyCFunction>(PackageExtension_GetPublicPath), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_PackageExtension, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PackageExtension), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PackageExtension[] = {
        { "description", reinterpret_cast<getter>(PackageExtension_get_Description), nullptr, nullptr, nullptr },
        { "display_name", reinterpret_cast<getter>(PackageExtension_get_DisplayName), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(PackageExtension_get_Id), nullptr, nullptr, nullptr },
        { "package", reinterpret_cast<getter>(PackageExtension_get_Package), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PackageExtension[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_PackageExtension) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PackageExtension) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PackageExtension) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PackageExtension) },
        { }
    };

    static PyType_Spec type_spec_PackageExtension = {
        "winrt._winrt_windows_applicationmodel_packageextensions.PackageExtension",
        sizeof(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtension),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PackageExtension};

    // ----- PackageExtensionCatalog class --------------------

    static PyObject* _new_PackageExtensionCatalog(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog>::type_name);
        return nullptr;
    }

    static void _dealloc_PackageExtensionCatalog(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PackageExtensionCatalog_FindAll(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionCatalog", L"FindAll", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert(self->obj.FindAll());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PackageExtensionCatalog_FindAllAsync(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionCatalog", L"FindAllAsync", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert(self->obj.FindAllAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PackageExtensionCatalog_Open(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionCatalog", L"Open", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog::Open(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PackageExtensionCatalog_RequestRemovePackageAsync(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionCatalog", L"RequestRemovePackageAsync", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.RequestRemovePackageAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PackageExtensionCatalog_add_PackageInstalled(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionCatalog", L"PackageInstalled");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog, winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageInstalledEventArgs>>(arg);

            return py::convert(self->obj.PackageInstalled(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtensionCatalog_remove_PackageInstalled(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionCatalog", L"PackageInstalled");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PackageInstalled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtensionCatalog_add_PackageStatusChanged(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionCatalog", L"PackageStatusChanged");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog, winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageStatusChangedEventArgs>>(arg);

            return py::convert(self->obj.PackageStatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtensionCatalog_remove_PackageStatusChanged(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionCatalog", L"PackageStatusChanged");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PackageStatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtensionCatalog_add_PackageUninstalling(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionCatalog", L"PackageUninstalling");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog, winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUninstallingEventArgs>>(arg);

            return py::convert(self->obj.PackageUninstalling(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtensionCatalog_remove_PackageUninstalling(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionCatalog", L"PackageUninstalling");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PackageUninstalling(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtensionCatalog_add_PackageUpdated(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionCatalog", L"PackageUpdated");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog, winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatedEventArgs>>(arg);

            return py::convert(self->obj.PackageUpdated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtensionCatalog_remove_PackageUpdated(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionCatalog", L"PackageUpdated");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PackageUpdated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtensionCatalog_add_PackageUpdating(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionCatalog", L"PackageUpdating");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog, winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatingEventArgs>>(arg);

            return py::convert(self->obj.PackageUpdating(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtensionCatalog_remove_PackageUpdating(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog* self, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionCatalog", L"PackageUpdating");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PackageUpdating(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PackageExtensionCatalog(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PackageExtensionCatalog(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PackageExtensionCatalog[] = {
        { "find_all", reinterpret_cast<PyCFunction>(PackageExtensionCatalog_FindAll), METH_VARARGS, nullptr },
        { "find_all_async", reinterpret_cast<PyCFunction>(PackageExtensionCatalog_FindAllAsync), METH_VARARGS, nullptr },
        { "request_remove_package_async", reinterpret_cast<PyCFunction>(PackageExtensionCatalog_RequestRemovePackageAsync), METH_VARARGS, nullptr },
        { "add_package_installed", reinterpret_cast<PyCFunction>(PackageExtensionCatalog_add_PackageInstalled), METH_O, nullptr },
        { "remove_package_installed", reinterpret_cast<PyCFunction>(PackageExtensionCatalog_remove_PackageInstalled), METH_O, nullptr },
        { "add_package_status_changed", reinterpret_cast<PyCFunction>(PackageExtensionCatalog_add_PackageStatusChanged), METH_O, nullptr },
        { "remove_package_status_changed", reinterpret_cast<PyCFunction>(PackageExtensionCatalog_remove_PackageStatusChanged), METH_O, nullptr },
        { "add_package_uninstalling", reinterpret_cast<PyCFunction>(PackageExtensionCatalog_add_PackageUninstalling), METH_O, nullptr },
        { "remove_package_uninstalling", reinterpret_cast<PyCFunction>(PackageExtensionCatalog_remove_PackageUninstalling), METH_O, nullptr },
        { "add_package_updated", reinterpret_cast<PyCFunction>(PackageExtensionCatalog_add_PackageUpdated), METH_O, nullptr },
        { "remove_package_updated", reinterpret_cast<PyCFunction>(PackageExtensionCatalog_remove_PackageUpdated), METH_O, nullptr },
        { "add_package_updating", reinterpret_cast<PyCFunction>(PackageExtensionCatalog_add_PackageUpdating), METH_O, nullptr },
        { "remove_package_updating", reinterpret_cast<PyCFunction>(PackageExtensionCatalog_remove_PackageUpdating), METH_O, nullptr },
        { "_assign_array_", _assign_array_PackageExtensionCatalog, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PackageExtensionCatalog), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PackageExtensionCatalog[] = {
        { }
    };

    static PyType_Slot _type_slots_PackageExtensionCatalog[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_PackageExtensionCatalog) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PackageExtensionCatalog) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PackageExtensionCatalog) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PackageExtensionCatalog) },
        { }
    };

    static PyType_Spec type_spec_PackageExtensionCatalog = {
        "winrt._winrt_windows_applicationmodel_packageextensions.PackageExtensionCatalog",
        sizeof(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionCatalog),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PackageExtensionCatalog};

    static PyGetSetDef getset_PackageExtensionCatalog_Static[] = {
        { }
    };

    static PyMethodDef methods_PackageExtensionCatalog_Static[] = {
        { "open", reinterpret_cast<PyCFunction>(PackageExtensionCatalog_Open), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_PackageExtensionCatalog_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_PackageExtensionCatalog_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_PackageExtensionCatalog_Static) },
        { }
    };

    static PyType_Spec type_spec_PackageExtensionCatalog_Static =
    {
        "winrt._winrt_windows_applicationmodel_packageextensions.PackageExtensionCatalog_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_PackageExtensionCatalog_Static
    };

    // ----- PackageExtensionPackageInstalledEventArgs class --------------------

    static PyObject* _new_PackageExtensionPackageInstalledEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageInstalledEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageInstalledEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_PackageExtensionPackageInstalledEventArgs(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageInstalledEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PackageExtensionPackageInstalledEventArgs_get_Extensions(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageInstalledEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionPackageInstalledEventArgs", L"Extensions");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Extensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtensionPackageInstalledEventArgs_get_Package(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageInstalledEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionPackageInstalledEventArgs", L"Package");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtensionPackageInstalledEventArgs_get_PackageExtensionName(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageInstalledEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionPackageInstalledEventArgs", L"PackageExtensionName");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.PackageExtensionName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PackageExtensionPackageInstalledEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageInstalledEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PackageExtensionPackageInstalledEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageInstalledEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PackageExtensionPackageInstalledEventArgs[] = {
        { "_assign_array_", _assign_array_PackageExtensionPackageInstalledEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PackageExtensionPackageInstalledEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PackageExtensionPackageInstalledEventArgs[] = {
        { "extensions", reinterpret_cast<getter>(PackageExtensionPackageInstalledEventArgs_get_Extensions), nullptr, nullptr, nullptr },
        { "package", reinterpret_cast<getter>(PackageExtensionPackageInstalledEventArgs_get_Package), nullptr, nullptr, nullptr },
        { "package_extension_name", reinterpret_cast<getter>(PackageExtensionPackageInstalledEventArgs_get_PackageExtensionName), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PackageExtensionPackageInstalledEventArgs[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_PackageExtensionPackageInstalledEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PackageExtensionPackageInstalledEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PackageExtensionPackageInstalledEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PackageExtensionPackageInstalledEventArgs) },
        { }
    };

    static PyType_Spec type_spec_PackageExtensionPackageInstalledEventArgs = {
        "winrt._winrt_windows_applicationmodel_packageextensions.PackageExtensionPackageInstalledEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageInstalledEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PackageExtensionPackageInstalledEventArgs};

    // ----- PackageExtensionPackageStatusChangedEventArgs class --------------------

    static PyObject* _new_PackageExtensionPackageStatusChangedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageStatusChangedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageStatusChangedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_PackageExtensionPackageStatusChangedEventArgs(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageStatusChangedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PackageExtensionPackageStatusChangedEventArgs_get_Package(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageStatusChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionPackageStatusChangedEventArgs", L"Package");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtensionPackageStatusChangedEventArgs_get_PackageExtensionName(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageStatusChangedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionPackageStatusChangedEventArgs", L"PackageExtensionName");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.PackageExtensionName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PackageExtensionPackageStatusChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageStatusChangedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PackageExtensionPackageStatusChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageStatusChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PackageExtensionPackageStatusChangedEventArgs[] = {
        { "_assign_array_", _assign_array_PackageExtensionPackageStatusChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PackageExtensionPackageStatusChangedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PackageExtensionPackageStatusChangedEventArgs[] = {
        { "package", reinterpret_cast<getter>(PackageExtensionPackageStatusChangedEventArgs_get_Package), nullptr, nullptr, nullptr },
        { "package_extension_name", reinterpret_cast<getter>(PackageExtensionPackageStatusChangedEventArgs_get_PackageExtensionName), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PackageExtensionPackageStatusChangedEventArgs[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_PackageExtensionPackageStatusChangedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PackageExtensionPackageStatusChangedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PackageExtensionPackageStatusChangedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PackageExtensionPackageStatusChangedEventArgs) },
        { }
    };

    static PyType_Spec type_spec_PackageExtensionPackageStatusChangedEventArgs = {
        "winrt._winrt_windows_applicationmodel_packageextensions.PackageExtensionPackageStatusChangedEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageStatusChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PackageExtensionPackageStatusChangedEventArgs};

    // ----- PackageExtensionPackageUninstallingEventArgs class --------------------

    static PyObject* _new_PackageExtensionPackageUninstallingEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUninstallingEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUninstallingEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_PackageExtensionPackageUninstallingEventArgs(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUninstallingEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PackageExtensionPackageUninstallingEventArgs_get_Package(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUninstallingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionPackageUninstallingEventArgs", L"Package");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtensionPackageUninstallingEventArgs_get_PackageExtensionName(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUninstallingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionPackageUninstallingEventArgs", L"PackageExtensionName");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.PackageExtensionName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PackageExtensionPackageUninstallingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUninstallingEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PackageExtensionPackageUninstallingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUninstallingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PackageExtensionPackageUninstallingEventArgs[] = {
        { "_assign_array_", _assign_array_PackageExtensionPackageUninstallingEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PackageExtensionPackageUninstallingEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PackageExtensionPackageUninstallingEventArgs[] = {
        { "package", reinterpret_cast<getter>(PackageExtensionPackageUninstallingEventArgs_get_Package), nullptr, nullptr, nullptr },
        { "package_extension_name", reinterpret_cast<getter>(PackageExtensionPackageUninstallingEventArgs_get_PackageExtensionName), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PackageExtensionPackageUninstallingEventArgs[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_PackageExtensionPackageUninstallingEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PackageExtensionPackageUninstallingEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PackageExtensionPackageUninstallingEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PackageExtensionPackageUninstallingEventArgs) },
        { }
    };

    static PyType_Spec type_spec_PackageExtensionPackageUninstallingEventArgs = {
        "winrt._winrt_windows_applicationmodel_packageextensions.PackageExtensionPackageUninstallingEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUninstallingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PackageExtensionPackageUninstallingEventArgs};

    // ----- PackageExtensionPackageUpdatedEventArgs class --------------------

    static PyObject* _new_PackageExtensionPackageUpdatedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_PackageExtensionPackageUpdatedEventArgs(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PackageExtensionPackageUpdatedEventArgs_get_Extensions(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionPackageUpdatedEventArgs", L"Extensions");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Extensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtensionPackageUpdatedEventArgs_get_Package(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionPackageUpdatedEventArgs", L"Package");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtensionPackageUpdatedEventArgs_get_PackageExtensionName(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionPackageUpdatedEventArgs", L"PackageExtensionName");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.PackageExtensionName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PackageExtensionPackageUpdatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PackageExtensionPackageUpdatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PackageExtensionPackageUpdatedEventArgs[] = {
        { "_assign_array_", _assign_array_PackageExtensionPackageUpdatedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PackageExtensionPackageUpdatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PackageExtensionPackageUpdatedEventArgs[] = {
        { "extensions", reinterpret_cast<getter>(PackageExtensionPackageUpdatedEventArgs_get_Extensions), nullptr, nullptr, nullptr },
        { "package", reinterpret_cast<getter>(PackageExtensionPackageUpdatedEventArgs_get_Package), nullptr, nullptr, nullptr },
        { "package_extension_name", reinterpret_cast<getter>(PackageExtensionPackageUpdatedEventArgs_get_PackageExtensionName), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PackageExtensionPackageUpdatedEventArgs[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_PackageExtensionPackageUpdatedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PackageExtensionPackageUpdatedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PackageExtensionPackageUpdatedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PackageExtensionPackageUpdatedEventArgs) },
        { }
    };

    static PyType_Spec type_spec_PackageExtensionPackageUpdatedEventArgs = {
        "winrt._winrt_windows_applicationmodel_packageextensions.PackageExtensionPackageUpdatedEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PackageExtensionPackageUpdatedEventArgs};

    // ----- PackageExtensionPackageUpdatingEventArgs class --------------------

    static PyObject* _new_PackageExtensionPackageUpdatingEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatingEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatingEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_PackageExtensionPackageUpdatingEventArgs(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatingEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PackageExtensionPackageUpdatingEventArgs_get_Package(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionPackageUpdatingEventArgs", L"Package");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PackageExtensionPackageUpdatingEventArgs_get_PackageExtensionName(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.PackageExtensions.PackageExtensionPackageUpdatingEventArgs", L"PackageExtensionName");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.PackageExtensionName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PackageExtensionPackageUpdatingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatingEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PackageExtensionPackageUpdatingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PackageExtensionPackageUpdatingEventArgs[] = {
        { "_assign_array_", _assign_array_PackageExtensionPackageUpdatingEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PackageExtensionPackageUpdatingEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PackageExtensionPackageUpdatingEventArgs[] = {
        { "package", reinterpret_cast<getter>(PackageExtensionPackageUpdatingEventArgs_get_Package), nullptr, nullptr, nullptr },
        { "package_extension_name", reinterpret_cast<getter>(PackageExtensionPackageUpdatingEventArgs_get_PackageExtensionName), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PackageExtensionPackageUpdatingEventArgs[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_PackageExtensionPackageUpdatingEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PackageExtensionPackageUpdatingEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PackageExtensionPackageUpdatingEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PackageExtensionPackageUpdatingEventArgs) },
        { }
    };

    static PyType_Spec type_spec_PackageExtensionPackageUpdatingEventArgs = {
        "winrt._winrt_windows_applicationmodel_packageextensions.PackageExtensionPackageUpdatingEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::PackageExtensions::PackageExtensionPackageUpdatingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PackageExtensionPackageUpdatingEventArgs};

    // ----- Windows.ApplicationModel.PackageExtensions Initialization --------------------

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.PackageExtensions");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_windows_applicationmodel_packageextensions",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Windows::ApplicationModel::PackageExtensions

PyMODINIT_FUNC PyInit__winrt_windows_applicationmodel_packageextensions(void) noexcept
{
    using namespace py::cpp::Windows::ApplicationModel::PackageExtensions;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pytype_handle PackageExtension_type{py::register_python_type(module.get(), &type_spec_PackageExtension, object_bases.get(), nullptr)};
    if (!PackageExtension_type)
    {
        return nullptr;
    }

    py::pyobj_handle type_PackageExtensionCatalog_Static{PyType_FromSpec(&type_spec_PackageExtensionCatalog_Static)};
    if (!type_PackageExtensionCatalog_Static)
    {
        return nullptr;
    }

    py::pytype_handle PackageExtensionCatalog_type{py::register_python_type(module.get(), &type_spec_PackageExtensionCatalog, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_PackageExtensionCatalog_Static.get()))};
    if (!PackageExtensionCatalog_type)
    {
        return nullptr;
    }

    py::pytype_handle PackageExtensionPackageInstalledEventArgs_type{py::register_python_type(module.get(), &type_spec_PackageExtensionPackageInstalledEventArgs, object_bases.get(), nullptr)};
    if (!PackageExtensionPackageInstalledEventArgs_type)
    {
        return nullptr;
    }

    py::pytype_handle PackageExtensionPackageStatusChangedEventArgs_type{py::register_python_type(module.get(), &type_spec_PackageExtensionPackageStatusChangedEventArgs, object_bases.get(), nullptr)};
    if (!PackageExtensionPackageStatusChangedEventArgs_type)
    {
        return nullptr;
    }

    py::pytype_handle PackageExtensionPackageUninstallingEventArgs_type{py::register_python_type(module.get(), &type_spec_PackageExtensionPackageUninstallingEventArgs, object_bases.get(), nullptr)};
    if (!PackageExtensionPackageUninstallingEventArgs_type)
    {
        return nullptr;
    }

    py::pytype_handle PackageExtensionPackageUpdatedEventArgs_type{py::register_python_type(module.get(), &type_spec_PackageExtensionPackageUpdatedEventArgs, object_bases.get(), nullptr)};
    if (!PackageExtensionPackageUpdatedEventArgs_type)
    {
        return nullptr;
    }

    py::pytype_handle PackageExtensionPackageUpdatingEventArgs_type{py::register_python_type(module.get(), &type_spec_PackageExtensionPackageUpdatingEventArgs, object_bases.get(), nullptr)};
    if (!PackageExtensionPackageUpdatingEventArgs_type)
    {
        return nullptr;
    }


    return module.detach();
}
