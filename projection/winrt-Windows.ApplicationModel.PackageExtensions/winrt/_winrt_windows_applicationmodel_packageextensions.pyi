# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.3.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel as windows_applicationmodel
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.storage as windows_storage

Self = typing.TypeVar('Self')

@typing.final
class PackageExtension(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PackageExtension: ...
    def get_extension_properties(self) -> typing.Optional[windows_foundation_collections.IPropertySet]: ...
    def get_extension_properties_async(self) -> windows_foundation.IAsyncOperation[windows_foundation_collections.IPropertySet]: ...
    def get_public_folder(self) -> typing.Optional[windows_storage.StorageFolder]: ...
    def get_public_folder_async(self) -> windows_foundation.IAsyncOperation[windows_storage.StorageFolder]: ...
    def get_public_path(self) -> str: ...
    @_property
    def description(self) -> str: ...
    @_property
    def display_name(self) -> str: ...
    @_property
    def id(self) -> str: ...
    @_property
    def package(self) -> typing.Optional[windows_applicationmodel.Package]: ...

@typing.final
class PackageExtensionCatalog_Static(type):
    def open(cls, package_extension_name: str, /) -> typing.Optional[PackageExtensionCatalog]: ...

@typing.final
class PackageExtensionCatalog(winrt.system.Object, metaclass=PackageExtensionCatalog_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PackageExtensionCatalog: ...
    def find_all(self) -> typing.Optional[windows_foundation_collections.IVectorView[PackageExtension]]: ...
    def find_all_async(self) -> windows_foundation.IAsyncOperation[windows_foundation_collections.IVectorView[PackageExtension]]: ...
    def request_remove_package_async(self, package_full_name: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def add_package_installed(self, handler: windows_foundation.TypedEventHandler[PackageExtensionCatalog, PackageExtensionPackageInstalledEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_package_installed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_package_status_changed(self, handler: windows_foundation.TypedEventHandler[PackageExtensionCatalog, PackageExtensionPackageStatusChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_package_status_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_package_uninstalling(self, handler: windows_foundation.TypedEventHandler[PackageExtensionCatalog, PackageExtensionPackageUninstallingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_package_uninstalling(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_package_updated(self, handler: windows_foundation.TypedEventHandler[PackageExtensionCatalog, PackageExtensionPackageUpdatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_package_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_package_updating(self, handler: windows_foundation.TypedEventHandler[PackageExtensionCatalog, PackageExtensionPackageUpdatingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_package_updating(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class PackageExtensionPackageInstalledEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PackageExtensionPackageInstalledEventArgs: ...
    @_property
    def extensions(self) -> typing.Optional[windows_foundation_collections.IVectorView[PackageExtension]]: ...
    @_property
    def package(self) -> typing.Optional[windows_applicationmodel.Package]: ...
    @_property
    def package_extension_name(self) -> str: ...

@typing.final
class PackageExtensionPackageStatusChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PackageExtensionPackageStatusChangedEventArgs: ...
    @_property
    def package(self) -> typing.Optional[windows_applicationmodel.Package]: ...
    @_property
    def package_extension_name(self) -> str: ...

@typing.final
class PackageExtensionPackageUninstallingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PackageExtensionPackageUninstallingEventArgs: ...
    @_property
    def package(self) -> typing.Optional[windows_applicationmodel.Package]: ...
    @_property
    def package_extension_name(self) -> str: ...

@typing.final
class PackageExtensionPackageUpdatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PackageExtensionPackageUpdatedEventArgs: ...
    @_property
    def extensions(self) -> typing.Optional[windows_foundation_collections.IVectorView[PackageExtension]]: ...
    @_property
    def package(self) -> typing.Optional[windows_applicationmodel.Package]: ...
    @_property
    def package_extension_name(self) -> str: ...

@typing.final
class PackageExtensionPackageUpdatingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PackageExtensionPackageUpdatingEventArgs: ...
    @_property
    def package(self) -> typing.Optional[windows_applicationmodel.Package]: ...
    @_property
    def package_extension_name(self) -> str: ...

