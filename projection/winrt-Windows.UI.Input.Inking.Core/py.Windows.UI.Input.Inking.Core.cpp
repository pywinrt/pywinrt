// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.UI.Input.Inking.Core.h"


namespace py::cpp::Windows::UI::Input::Inking::Core
{
    // ----- CoreIncrementalInkStroke class --------------------

    static PyObject* _new_CoreIncrementalInkStroke(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Input::Inking::InkDrawingAttributes>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3x2>(args, 1);

                winrt::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CoreIncrementalInkStroke(py::wrapper::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CoreIncrementalInkStroke_AppendInkPoints(py::wrapper::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Core.CoreIncrementalInkStroke", L"AppendInkPoints", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::UI::Input::Inking::InkPoint>>(args, 0);

                return py::convert(self->obj.AppendInkPoints(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreIncrementalInkStroke_CreateInkStroke(py::wrapper::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Core.CoreIncrementalInkStroke", L"CreateInkStroke", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.CreateInkStroke());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreIncrementalInkStroke_get_BoundingRect(py::wrapper::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Core.CoreIncrementalInkStroke", L"BoundingRect"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BoundingRect());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIncrementalInkStroke_get_DrawingAttributes(py::wrapper::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Core.CoreIncrementalInkStroke", L"DrawingAttributes"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DrawingAttributes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreIncrementalInkStroke_get_PointTransform(py::wrapper::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Core.CoreIncrementalInkStroke", L"PointTransform"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PointTransform());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_CoreIncrementalInkStroke(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CoreIncrementalInkStroke(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreIncrementalInkStroke[] = {
        { "append_ink_points", reinterpret_cast<PyCFunction>(CoreIncrementalInkStroke_AppendInkPoints), METH_VARARGS, nullptr },
        { "create_ink_stroke", reinterpret_cast<PyCFunction>(CoreIncrementalInkStroke_CreateInkStroke), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_CoreIncrementalInkStroke, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CoreIncrementalInkStroke), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CoreIncrementalInkStroke[] = {
        { "bounding_rect", reinterpret_cast<getter>(CoreIncrementalInkStroke_get_BoundingRect), nullptr, nullptr, nullptr },
        { "drawing_attributes", reinterpret_cast<getter>(CoreIncrementalInkStroke_get_DrawingAttributes), nullptr, nullptr, nullptr },
        { "point_transform", reinterpret_cast<getter>(CoreIncrementalInkStroke_get_PointTransform), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CoreIncrementalInkStroke[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CoreIncrementalInkStroke) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CoreIncrementalInkStroke) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CoreIncrementalInkStroke) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CoreIncrementalInkStroke) },
        { },
    };

    static PyType_Spec type_spec_CoreIncrementalInkStroke =
    {
        "winrt._winrt_windows_ui_input_inking_core.CoreIncrementalInkStroke",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreIncrementalInkStroke
    };

    // ----- CoreInkIndependentInputSource class --------------------

    static PyObject* _new_CoreInkIndependentInputSource(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource>::type_name);
        return nullptr;
    }

    static void _dealloc_CoreInkIndependentInputSource(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CoreInkIndependentInputSource_Create(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"Create", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Input::Inking::InkPresenter>(args, 0);

                return py::convert(winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource::Create(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_get_InkPresenter(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"InkPresenter"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.InkPresenter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_get_PointerCursor(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"PointerCursor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PointerCursor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreInkIndependentInputSource_put_PointerCursor(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"PointerCursor"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreCursor>(arg);

            self->obj.PointerCursor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreInkIndependentInputSource_add_PointerEntering(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"PointerEntering"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerEntering(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_remove_PointerEntering(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"PointerEntering"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerEntering(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_add_PointerExiting(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"PointerExiting"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerExiting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_remove_PointerExiting(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"PointerExiting"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerExiting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_add_PointerHovering(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"PointerHovering"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerHovering(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_remove_PointerHovering(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"PointerHovering"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerHovering(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_add_PointerLost(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"PointerLost"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerLost(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_remove_PointerLost(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"PointerLost"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerLost(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_add_PointerMoving(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"PointerMoving"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerMoving(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_remove_PointerMoving(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"PointerMoving"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerMoving(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_add_PointerPressing(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"PointerPressing"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerPressing(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_remove_PointerPressing(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"PointerPressing"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerPressing(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_add_PointerReleasing(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"PointerReleasing"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, winrt::Windows::UI::Core::PointerEventArgs>>(arg);

            return py::convert(self->obj.PointerReleasing(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreInkIndependentInputSource_remove_PointerReleasing(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource", L"PointerReleasing"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PointerReleasing(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_CoreInkIndependentInputSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CoreInkIndependentInputSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreInkIndependentInputSource[] = {
        { "add_pointer_entering", reinterpret_cast<PyCFunction>(CoreInkIndependentInputSource_add_PointerEntering), METH_O, nullptr },
        { "remove_pointer_entering", reinterpret_cast<PyCFunction>(CoreInkIndependentInputSource_remove_PointerEntering), METH_O, nullptr },
        { "add_pointer_exiting", reinterpret_cast<PyCFunction>(CoreInkIndependentInputSource_add_PointerExiting), METH_O, nullptr },
        { "remove_pointer_exiting", reinterpret_cast<PyCFunction>(CoreInkIndependentInputSource_remove_PointerExiting), METH_O, nullptr },
        { "add_pointer_hovering", reinterpret_cast<PyCFunction>(CoreInkIndependentInputSource_add_PointerHovering), METH_O, nullptr },
        { "remove_pointer_hovering", reinterpret_cast<PyCFunction>(CoreInkIndependentInputSource_remove_PointerHovering), METH_O, nullptr },
        { "add_pointer_lost", reinterpret_cast<PyCFunction>(CoreInkIndependentInputSource_add_PointerLost), METH_O, nullptr },
        { "remove_pointer_lost", reinterpret_cast<PyCFunction>(CoreInkIndependentInputSource_remove_PointerLost), METH_O, nullptr },
        { "add_pointer_moving", reinterpret_cast<PyCFunction>(CoreInkIndependentInputSource_add_PointerMoving), METH_O, nullptr },
        { "remove_pointer_moving", reinterpret_cast<PyCFunction>(CoreInkIndependentInputSource_remove_PointerMoving), METH_O, nullptr },
        { "add_pointer_pressing", reinterpret_cast<PyCFunction>(CoreInkIndependentInputSource_add_PointerPressing), METH_O, nullptr },
        { "remove_pointer_pressing", reinterpret_cast<PyCFunction>(CoreInkIndependentInputSource_remove_PointerPressing), METH_O, nullptr },
        { "add_pointer_releasing", reinterpret_cast<PyCFunction>(CoreInkIndependentInputSource_add_PointerReleasing), METH_O, nullptr },
        { "remove_pointer_releasing", reinterpret_cast<PyCFunction>(CoreInkIndependentInputSource_remove_PointerReleasing), METH_O, nullptr },
        { "_assign_array_", _assign_array_CoreInkIndependentInputSource, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CoreInkIndependentInputSource), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CoreInkIndependentInputSource[] = {
        { "ink_presenter", reinterpret_cast<getter>(CoreInkIndependentInputSource_get_InkPresenter), nullptr, nullptr, nullptr },
        { "pointer_cursor", reinterpret_cast<getter>(CoreInkIndependentInputSource_get_PointerCursor), reinterpret_cast<setter>(CoreInkIndependentInputSource_put_PointerCursor), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CoreInkIndependentInputSource[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CoreInkIndependentInputSource) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CoreInkIndependentInputSource) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CoreInkIndependentInputSource) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CoreInkIndependentInputSource) },
        { },
    };

    static PyType_Spec type_spec_CoreInkIndependentInputSource =
    {
        "winrt._winrt_windows_ui_input_inking_core.CoreInkIndependentInputSource",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreInkIndependentInputSource
    };

    static PyGetSetDef getset_CoreInkIndependentInputSource_Static[] = {
        { }
    };

    static PyMethodDef methods_CoreInkIndependentInputSource_Static[] = {
        { "create", reinterpret_cast<PyCFunction>(CoreInkIndependentInputSource_Create), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_CoreInkIndependentInputSource_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_CoreInkIndependentInputSource_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_CoreInkIndependentInputSource_Static) },
        { }
    };

    static PyType_Spec type_spec_CoreInkIndependentInputSource_Static =
    {
        "winrt._winrt_windows_ui_input_inking_core.CoreInkIndependentInputSource_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_CoreInkIndependentInputSource_Static
    };

    // ----- CoreInkPresenterHost class --------------------

    static PyObject* _new_CoreInkPresenterHost(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::UI::Input::Inking::Core::CoreInkPresenterHost instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CoreInkPresenterHost(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkPresenterHost* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CoreInkPresenterHost_get_RootVisual(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkPresenterHost* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Core.CoreInkPresenterHost", L"RootVisual"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RootVisual());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreInkPresenterHost_put_RootVisual(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkPresenterHost* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Core.CoreInkPresenterHost", L"RootVisual"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Composition::ContainerVisual>(arg);

            self->obj.RootVisual(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreInkPresenterHost_get_InkPresenter(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkPresenterHost* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Core.CoreInkPresenterHost", L"InkPresenter"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.InkPresenter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_CoreInkPresenterHost(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Core::CoreInkPresenterHost>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CoreInkPresenterHost(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Core::CoreInkPresenterHost>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreInkPresenterHost[] = {
        { "_assign_array_", _assign_array_CoreInkPresenterHost, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CoreInkPresenterHost), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CoreInkPresenterHost[] = {
        { "root_visual", reinterpret_cast<getter>(CoreInkPresenterHost_get_RootVisual), reinterpret_cast<setter>(CoreInkPresenterHost_put_RootVisual), nullptr, nullptr },
        { "ink_presenter", reinterpret_cast<getter>(CoreInkPresenterHost_get_InkPresenter), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CoreInkPresenterHost[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CoreInkPresenterHost) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CoreInkPresenterHost) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CoreInkPresenterHost) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CoreInkPresenterHost) },
        { },
    };

    static PyType_Spec type_spec_CoreInkPresenterHost =
    {
        "winrt._winrt_windows_ui_input_inking_core.CoreInkPresenterHost",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Core::CoreInkPresenterHost),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreInkPresenterHost
    };

    // ----- CoreWetStrokeUpdateEventArgs class --------------------

    static PyObject* _new_CoreWetStrokeUpdateEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_CoreWetStrokeUpdateEventArgs(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CoreWetStrokeUpdateEventArgs_get_Disposition(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs", L"Disposition"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Disposition());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CoreWetStrokeUpdateEventArgs_put_Disposition(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs", L"Disposition"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeDisposition>(arg);

            self->obj.Disposition(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CoreWetStrokeUpdateEventArgs_get_NewInkPoints(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs", L"NewInkPoints"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.NewInkPoints());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateEventArgs_get_PointerId(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateEventArgs", L"PointerId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PointerId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_CoreWetStrokeUpdateEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CoreWetStrokeUpdateEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreWetStrokeUpdateEventArgs[] = {
        { "_assign_array_", _assign_array_CoreWetStrokeUpdateEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CoreWetStrokeUpdateEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CoreWetStrokeUpdateEventArgs[] = {
        { "disposition", reinterpret_cast<getter>(CoreWetStrokeUpdateEventArgs_get_Disposition), reinterpret_cast<setter>(CoreWetStrokeUpdateEventArgs_put_Disposition), nullptr, nullptr },
        { "new_ink_points", reinterpret_cast<getter>(CoreWetStrokeUpdateEventArgs_get_NewInkPoints), nullptr, nullptr, nullptr },
        { "pointer_id", reinterpret_cast<getter>(CoreWetStrokeUpdateEventArgs_get_PointerId), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CoreWetStrokeUpdateEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CoreWetStrokeUpdateEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CoreWetStrokeUpdateEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CoreWetStrokeUpdateEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CoreWetStrokeUpdateEventArgs) },
        { },
    };

    static PyType_Spec type_spec_CoreWetStrokeUpdateEventArgs =
    {
        "winrt._winrt_windows_ui_input_inking_core.CoreWetStrokeUpdateEventArgs",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreWetStrokeUpdateEventArgs
    };

    // ----- CoreWetStrokeUpdateSource class --------------------

    static PyObject* _new_CoreWetStrokeUpdateSource(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource>::type_name);
        return nullptr;
    }

    static void _dealloc_CoreWetStrokeUpdateSource(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CoreWetStrokeUpdateSource_Create(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource", L"Create", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Input::Inking::InkPresenter>(args, 0);

                return py::convert(winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource::Create(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_get_InkPresenter(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource", L"InkPresenter"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.InkPresenter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_add_WetStrokeCanceled(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource", L"WetStrokeCanceled"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource, winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs>>(arg);

            return py::convert(self->obj.WetStrokeCanceled(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_remove_WetStrokeCanceled(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource", L"WetStrokeCanceled"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.WetStrokeCanceled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_add_WetStrokeCompleted(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource", L"WetStrokeCompleted"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource, winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs>>(arg);

            return py::convert(self->obj.WetStrokeCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_remove_WetStrokeCompleted(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource", L"WetStrokeCompleted"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.WetStrokeCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_add_WetStrokeContinuing(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource", L"WetStrokeContinuing"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource, winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs>>(arg);

            return py::convert(self->obj.WetStrokeContinuing(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_remove_WetStrokeContinuing(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource", L"WetStrokeContinuing"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.WetStrokeContinuing(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_add_WetStrokeStarting(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource", L"WetStrokeStarting"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource, winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs>>(arg);

            return py::convert(self->obj.WetStrokeStarting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_remove_WetStrokeStarting(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource", L"WetStrokeStarting"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.WetStrokeStarting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_add_WetStrokeStopping(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource", L"WetStrokeStopping"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource, winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs>>(arg);

            return py::convert(self->obj.WetStrokeStopping(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CoreWetStrokeUpdateSource_remove_WetStrokeStopping(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource", L"WetStrokeStopping"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.WetStrokeStopping(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_CoreWetStrokeUpdateSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CoreWetStrokeUpdateSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CoreWetStrokeUpdateSource[] = {
        { "add_wet_stroke_canceled", reinterpret_cast<PyCFunction>(CoreWetStrokeUpdateSource_add_WetStrokeCanceled), METH_O, nullptr },
        { "remove_wet_stroke_canceled", reinterpret_cast<PyCFunction>(CoreWetStrokeUpdateSource_remove_WetStrokeCanceled), METH_O, nullptr },
        { "add_wet_stroke_completed", reinterpret_cast<PyCFunction>(CoreWetStrokeUpdateSource_add_WetStrokeCompleted), METH_O, nullptr },
        { "remove_wet_stroke_completed", reinterpret_cast<PyCFunction>(CoreWetStrokeUpdateSource_remove_WetStrokeCompleted), METH_O, nullptr },
        { "add_wet_stroke_continuing", reinterpret_cast<PyCFunction>(CoreWetStrokeUpdateSource_add_WetStrokeContinuing), METH_O, nullptr },
        { "remove_wet_stroke_continuing", reinterpret_cast<PyCFunction>(CoreWetStrokeUpdateSource_remove_WetStrokeContinuing), METH_O, nullptr },
        { "add_wet_stroke_starting", reinterpret_cast<PyCFunction>(CoreWetStrokeUpdateSource_add_WetStrokeStarting), METH_O, nullptr },
        { "remove_wet_stroke_starting", reinterpret_cast<PyCFunction>(CoreWetStrokeUpdateSource_remove_WetStrokeStarting), METH_O, nullptr },
        { "add_wet_stroke_stopping", reinterpret_cast<PyCFunction>(CoreWetStrokeUpdateSource_add_WetStrokeStopping), METH_O, nullptr },
        { "remove_wet_stroke_stopping", reinterpret_cast<PyCFunction>(CoreWetStrokeUpdateSource_remove_WetStrokeStopping), METH_O, nullptr },
        { "_assign_array_", _assign_array_CoreWetStrokeUpdateSource, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CoreWetStrokeUpdateSource), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CoreWetStrokeUpdateSource[] = {
        { "ink_presenter", reinterpret_cast<getter>(CoreWetStrokeUpdateSource_get_InkPresenter), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CoreWetStrokeUpdateSource[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CoreWetStrokeUpdateSource) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CoreWetStrokeUpdateSource) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CoreWetStrokeUpdateSource) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CoreWetStrokeUpdateSource) },
        { },
    };

    static PyType_Spec type_spec_CoreWetStrokeUpdateSource =
    {
        "winrt._winrt_windows_ui_input_inking_core.CoreWetStrokeUpdateSource",
        sizeof(py::wrapper::Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CoreWetStrokeUpdateSource
    };

    static PyGetSetDef getset_CoreWetStrokeUpdateSource_Static[] = {
        { }
    };

    static PyMethodDef methods_CoreWetStrokeUpdateSource_Static[] = {
        { "create", reinterpret_cast<PyCFunction>(CoreWetStrokeUpdateSource_Create), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_CoreWetStrokeUpdateSource_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_CoreWetStrokeUpdateSource_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_CoreWetStrokeUpdateSource_Static) },
        { }
    };

    static PyType_Spec type_spec_CoreWetStrokeUpdateSource_Static =
    {
        "winrt._winrt_windows_ui_input_inking_core.CoreWetStrokeUpdateSource_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_CoreWetStrokeUpdateSource_Static
    };

    // ----- Windows.UI.Input.Inking.Core Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::UI::Input::Inking::Core");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_ui_input_inking_core",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::UI::Input::Inking::Core

PyMODINIT_FUNC PyInit__winrt_windows_ui_input_inking_core(void) noexcept
{
    using namespace py::cpp::Windows::UI::Input::Inking::Core;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CoreIncrementalInkStroke, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_CoreInkIndependentInputSource_Static{PyType_FromSpec(&type_spec_CoreInkIndependentInputSource_Static)};
    if (!type_CoreInkIndependentInputSource_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CoreInkIndependentInputSource, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_CoreInkIndependentInputSource_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CoreInkPresenterHost, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CoreWetStrokeUpdateEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_CoreWetStrokeUpdateSource_Static{PyType_FromSpec(&type_spec_CoreWetStrokeUpdateSource_Static)};
    if (!type_CoreWetStrokeUpdateSource_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CoreWetStrokeUpdateSource, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_CoreWetStrokeUpdateSource_Static.get())) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
