# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.security.cryptography.core as windows_security_cryptography_core
import winrt.windows.storage.streams as windows_storage_streams

from winrt.windows.devices.smartcards import SmartCardActivationPolicyChangeResult, SmartCardAppletIdGroupActivationPolicy, SmartCardAutomaticResponseStatus, SmartCardCryptogramAlgorithm, SmartCardCryptogramGeneratorOperationStatus, SmartCardCryptogramMaterialPackageConfirmationResponseFormat, SmartCardCryptogramMaterialPackageFormat, SmartCardCryptogramMaterialProtectionMethod, SmartCardCryptogramMaterialType, SmartCardCryptogramPlacementOptions, SmartCardCryptogramStorageKeyAlgorithm, SmartCardCryptogramStorageKeyCapabilities, SmartCardCryptographicKeyAttestationStatus, SmartCardEmulationCategory, SmartCardEmulationType, SmartCardEmulatorConnectionDeactivatedReason, SmartCardEmulatorConnectionSource, SmartCardEmulatorEnablementPolicy, SmartCardLaunchBehavior, SmartCardPinCharacterPolicyOption, SmartCardReaderKind, SmartCardReaderStatus, SmartCardStatus, SmartCardTriggerType, SmartCardUnlockPromptingBehavior
from winrt.windows.devices.smartcards import SmartCardPinResetHandler

Self = typing.TypeVar('Self')

@typing.final
class CardAddedEventArgs(winrt.system.Object):
    # Windows.Devices.SmartCards.SmartCard Windows.Devices.SmartCards.CardAddedEventArgs::get_SmartCard()
    @_property
    def smart_card(self) -> SmartCard: ...

@typing.final
class CardRemovedEventArgs(winrt.system.Object):
    # Windows.Devices.SmartCards.SmartCard Windows.Devices.SmartCards.CardRemovedEventArgs::get_SmartCard()
    @_property
    def smart_card(self) -> SmartCard: ...

@typing.final
class KnownSmartCardAppletIds_Static(type):
    # Windows.Storage.Streams.IBuffer Windows.Devices.SmartCards.KnownSmartCardAppletIds::get_PaymentSystemEnvironment()
    @_property
    def payment_system_environment(cls) -> windows_storage_streams.IBuffer: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.SmartCards.KnownSmartCardAppletIds::get_ProximityPaymentSystemEnvironment()
    @_property
    def proximity_payment_system_environment(cls) -> windows_storage_streams.IBuffer: ...

@typing.final
class KnownSmartCardAppletIds(winrt.system.Object, metaclass=KnownSmartCardAppletIds_Static):
    pass

@typing.final
class SmartCard(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardConnection> Windows.Devices.SmartCards.SmartCard::ConnectAsync()
    def connect_async(self) -> windows_foundation.IAsyncOperation[SmartCardConnection]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IBuffer> Windows.Devices.SmartCards.SmartCard::GetAnswerToResetAsync()
    def get_answer_to_reset_async(self) -> windows_foundation.IAsyncOperation[windows_storage_streams.IBuffer]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardStatus> Windows.Devices.SmartCards.SmartCard::GetStatusAsync()
    def get_status_async(self) -> windows_foundation.IAsyncOperation[SmartCardStatus]: ...
    # Windows.Devices.SmartCards.SmartCardReader Windows.Devices.SmartCards.SmartCard::get_Reader()
    @_property
    def reader(self) -> SmartCardReader: ...

@typing.final
class SmartCardAppletIdGroup_Static(type):
    # System.UInt16 Windows.Devices.SmartCards.SmartCardAppletIdGroup::get_MaxAppletIds()
    @_property
    def max_applet_ids(cls) -> winrt.system.UInt16: ...

@typing.final
class SmartCardAppletIdGroup(winrt.system.Object, metaclass=SmartCardAppletIdGroup_Static):
    @typing.overload
    def __new__(cls: typing.Type[Self], display_name: str, applet_ids: typing.MutableSequence[windows_storage_streams.ImplementsIBuffer], emulation_category: SmartCardEmulationCategory, emulation_type: SmartCardEmulationType) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Devices.SmartCards.SmartCardEmulationType Windows.Devices.SmartCards.SmartCardAppletIdGroup::get_SmartCardEmulationType()
    @_property
    def smart_card_emulation_type(self) -> SmartCardEmulationType: ...
    # System.Void Windows.Devices.SmartCards.SmartCardAppletIdGroup::put_SmartCardEmulationType(Windows.Devices.SmartCards.SmartCardEmulationType)
    @smart_card_emulation_type.setter
    def smart_card_emulation_type(self, value: SmartCardEmulationType) -> None: ...
    # Windows.Devices.SmartCards.SmartCardEmulationCategory Windows.Devices.SmartCards.SmartCardAppletIdGroup::get_SmartCardEmulationCategory()
    @_property
    def smart_card_emulation_category(self) -> SmartCardEmulationCategory: ...
    # System.Void Windows.Devices.SmartCards.SmartCardAppletIdGroup::put_SmartCardEmulationCategory(Windows.Devices.SmartCards.SmartCardEmulationCategory)
    @smart_card_emulation_category.setter
    def smart_card_emulation_category(self, value: SmartCardEmulationCategory) -> None: ...
    # System.String Windows.Devices.SmartCards.SmartCardAppletIdGroup::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # System.Void Windows.Devices.SmartCards.SmartCardAppletIdGroup::put_DisplayName(System.String)
    @display_name.setter
    def display_name(self, value: str) -> None: ...
    # System.Boolean Windows.Devices.SmartCards.SmartCardAppletIdGroup::get_AutomaticEnablement()
    @_property
    def automatic_enablement(self) -> bool: ...
    # System.Void Windows.Devices.SmartCards.SmartCardAppletIdGroup::put_AutomaticEnablement(System.Boolean)
    @automatic_enablement.setter
    def automatic_enablement(self, value: bool) -> None: ...
    # Windows.Foundation.Collections.IVector`1<Windows.Storage.Streams.IBuffer> Windows.Devices.SmartCards.SmartCardAppletIdGroup::get_AppletIds()
    @_property
    def applet_ids(self) -> typing.MutableSequence[windows_storage_streams.IBuffer]: ...
    # System.Boolean Windows.Devices.SmartCards.SmartCardAppletIdGroup::get_SecureUserAuthenticationRequired()
    @_property
    def secure_user_authentication_required(self) -> bool: ...
    # System.Void Windows.Devices.SmartCards.SmartCardAppletIdGroup::put_SecureUserAuthenticationRequired(System.Boolean)
    @secure_user_authentication_required.setter
    def secure_user_authentication_required(self, value: bool) -> None: ...
    # Windows.Storage.Streams.IRandomAccessStreamReference Windows.Devices.SmartCards.SmartCardAppletIdGroup::get_Logo()
    @_property
    def logo(self) -> windows_storage_streams.IRandomAccessStreamReference: ...
    # System.Void Windows.Devices.SmartCards.SmartCardAppletIdGroup::put_Logo(Windows.Storage.Streams.IRandomAccessStreamReference)
    @logo.setter
    def logo(self, value: windows_storage_streams.ImplementsIRandomAccessStreamReference) -> None: ...
    # System.String Windows.Devices.SmartCards.SmartCardAppletIdGroup::get_Description()
    @_property
    def description(self) -> str: ...
    # System.Void Windows.Devices.SmartCards.SmartCardAppletIdGroup::put_Description(System.String)
    @description.setter
    def description(self, value: str) -> None: ...
    # Windows.Foundation.Collections.ValueSet Windows.Devices.SmartCards.SmartCardAppletIdGroup::get_Properties()
    @_property
    def properties(self) -> windows_foundation_collections.ValueSet: ...

@typing.final
class SmartCardAppletIdGroupRegistration(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardActivationPolicyChangeResult> Windows.Devices.SmartCards.SmartCardAppletIdGroupRegistration::RequestActivationPolicyChangeAsync(Windows.Devices.SmartCards.SmartCardAppletIdGroupActivationPolicy)
    def request_activation_policy_change_async(self, policy: SmartCardAppletIdGroupActivationPolicy, /) -> windows_foundation.IAsyncOperation[SmartCardActivationPolicyChangeResult]: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.SmartCards.SmartCardAppletIdGroupRegistration::SetAutomaticResponseApdusAsync(Windows.Foundation.Collections.IIterable`1<Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu>)
    def set_automatic_response_apdus_async(self, apdus: typing.Iterable[SmartCardAutomaticResponseApdu], /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.SmartCards.SmartCardAppletIdGroupRegistration::SetPropertiesAsync(Windows.Foundation.Collections.ValueSet)
    def set_properties_async(self, props: windows_foundation_collections.ValueSet, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Devices.SmartCards.SmartCardAppletIdGroupActivationPolicy Windows.Devices.SmartCards.SmartCardAppletIdGroupRegistration::get_ActivationPolicy()
    @_property
    def activation_policy(self) -> SmartCardAppletIdGroupActivationPolicy: ...
    # Windows.Devices.SmartCards.SmartCardAppletIdGroup Windows.Devices.SmartCards.SmartCardAppletIdGroupRegistration::get_AppletIdGroup()
    @_property
    def applet_id_group(self) -> SmartCardAppletIdGroup: ...
    # System.Guid Windows.Devices.SmartCards.SmartCardAppletIdGroupRegistration::get_Id()
    @_property
    def id(self) -> _uuid.UUID: ...
    # System.String Windows.Devices.SmartCards.SmartCardAppletIdGroupRegistration::get_SmartCardReaderId()
    @_property
    def smart_card_reader_id(self) -> str: ...

@typing.final
class SmartCardAutomaticResponseApdu(winrt.system.Object):
    def __new__(cls: typing.Type[Self], command_apdu: windows_storage_streams.ImplementsIBuffer, response_apdu: windows_storage_streams.ImplementsIBuffer) -> Self: ...
    # System.Boolean Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu::get_ShouldMatchLength()
    @_property
    def should_match_length(self) -> bool: ...
    # System.Void Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu::put_ShouldMatchLength(System.Boolean)
    @should_match_length.setter
    def should_match_length(self, value: bool) -> None: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu::get_ResponseApdu()
    @_property
    def response_apdu(self) -> windows_storage_streams.IBuffer: ...
    # System.Void Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu::put_ResponseApdu(Windows.Storage.Streams.IBuffer)
    @response_apdu.setter
    def response_apdu(self, value: windows_storage_streams.ImplementsIBuffer) -> None: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu::get_CommandApduBitMask()
    @_property
    def command_apdu_bit_mask(self) -> windows_storage_streams.IBuffer: ...
    # System.Void Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu::put_CommandApduBitMask(Windows.Storage.Streams.IBuffer)
    @command_apdu_bit_mask.setter
    def command_apdu_bit_mask(self, value: windows_storage_streams.ImplementsIBuffer) -> None: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu::get_CommandApdu()
    @_property
    def command_apdu(self) -> windows_storage_streams.IBuffer: ...
    # System.Void Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu::put_CommandApdu(Windows.Storage.Streams.IBuffer)
    @command_apdu.setter
    def command_apdu(self, value: windows_storage_streams.ImplementsIBuffer) -> None: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu::get_AppletId()
    @_property
    def applet_id(self) -> windows_storage_streams.IBuffer: ...
    # System.Void Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu::put_AppletId(Windows.Storage.Streams.IBuffer)
    @applet_id.setter
    def applet_id(self, value: windows_storage_streams.ImplementsIBuffer) -> None: ...
    # Windows.Foundation.IReference`1<System.UInt32> Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu::get_OutputState()
    @_property
    def output_state(self) -> typing.Optional[winrt.system.UInt32]: ...
    # System.Void Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu::put_OutputState(Windows.Foundation.IReference`1<System.UInt32>)
    @output_state.setter
    def output_state(self, value: typing.Optional[winrt.system.UInt32]) -> None: ...
    # Windows.Foundation.IReference`1<System.UInt32> Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu::get_InputState()
    @_property
    def input_state(self) -> typing.Optional[winrt.system.UInt32]: ...
    # System.Void Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu::put_InputState(Windows.Foundation.IReference`1<System.UInt32>)
    @input_state.setter
    def input_state(self, value: typing.Optional[winrt.system.UInt32]) -> None: ...
    # System.Boolean Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu::get_AllowWhenCryptogramGeneratorNotPrepared()
    @_property
    def allow_when_cryptogram_generator_not_prepared(self) -> bool: ...
    # System.Void Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu::put_AllowWhenCryptogramGeneratorNotPrepared(System.Boolean)
    @allow_when_cryptogram_generator_not_prepared.setter
    def allow_when_cryptogram_generator_not_prepared(self, value: bool) -> None: ...

@typing.final
class SmartCardChallengeContext(winrt.system.Object, windows_foundation.ImplementsIClosable):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.SmartCards.SmartCardChallengeContext::ChangeAdministrativeKeyAsync(Windows.Storage.Streams.IBuffer,Windows.Storage.Streams.IBuffer)
    def change_administrative_key_async(self, response: windows_storage_streams.ImplementsIBuffer, new_administrative_key: windows_storage_streams.ImplementsIBuffer, /) -> windows_foundation.IAsyncAction: ...
    # System.Void Windows.Devices.SmartCards.SmartCardChallengeContext::Close()
    def close(self) -> None: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.SmartCards.SmartCardChallengeContext::ProvisionAsync(Windows.Storage.Streams.IBuffer,System.Boolean)
    def provision_async(self, response: windows_storage_streams.ImplementsIBuffer, format_card: bool, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.SmartCards.SmartCardChallengeContext::ProvisionAsync(Windows.Storage.Streams.IBuffer,System.Boolean,System.Guid)
    def provision_async_with_new_card_id(self, response: windows_storage_streams.ImplementsIBuffer, format_card: bool, new_card_id: _uuid.UUID, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.SmartCards.SmartCardChallengeContext::VerifyResponseAsync(Windows.Storage.Streams.IBuffer)
    def verify_response_async(self, response: windows_storage_streams.ImplementsIBuffer, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.SmartCards.SmartCardChallengeContext::get_Challenge()
    @_property
    def challenge(self) -> windows_storage_streams.IBuffer: ...

@typing.final
class SmartCardConnection(winrt.system.Object, windows_foundation.ImplementsIClosable):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # System.Void Windows.Devices.SmartCards.SmartCardConnection::Close()
    def close(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IBuffer> Windows.Devices.SmartCards.SmartCardConnection::TransmitAsync(Windows.Storage.Streams.IBuffer)
    def transmit_async(self, command: windows_storage_streams.ImplementsIBuffer, /) -> windows_foundation.IAsyncOperation[windows_storage_streams.IBuffer]: ...

@typing.final
class SmartCardCryptogramGenerator_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardCryptogramGenerator> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::GetSmartCardCryptogramGeneratorAsync()
    def get_smart_card_cryptogram_generator_async(cls) -> windows_foundation.IAsyncOperation[SmartCardCryptogramGenerator]: ...
    # System.Boolean Windows.Devices.SmartCards.SmartCardCryptogramGenerator::IsSupported()
    def is_supported(cls) -> bool: ...

@typing.final
class SmartCardCryptogramGenerator(winrt.system.Object, metaclass=SmartCardCryptogramGenerator_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::CreateCryptogramMaterialStorageKeyAsync(Windows.Devices.SmartCards.SmartCardUnlockPromptingBehavior,System.String,Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyAlgorithm,Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCapabilities)
    def create_cryptogram_material_storage_key_async(self, prompting_behavior: SmartCardUnlockPromptingBehavior, storage_key_name: str, algorithm: SmartCardCryptogramStorageKeyAlgorithm, capabilities: SmartCardCryptogramStorageKeyCapabilities, /) -> windows_foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::DeleteCryptogramMaterialPackageAsync(System.String)
    def delete_cryptogram_material_package_async(self, material_package_name: str, /) -> windows_foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::DeleteCryptogramMaterialStorageKeyAsync(System.String)
    def delete_cryptogram_material_storage_key_async(self, storage_key_name: str, /) -> windows_foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::GetAllCryptogramMaterialCharacteristicsAsync(Windows.Devices.SmartCards.SmartCardUnlockPromptingBehavior,System.String)
    def get_all_cryptogram_material_characteristics_async(self, prompting_behavior: SmartCardUnlockPromptingBehavior, material_package_name: str, /) -> windows_foundation.IAsyncOperation[SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::GetAllCryptogramMaterialPackageCharacteristicsAsync()
    def get_all_cryptogram_material_package_characteristics_async(self) -> windows_foundation.IAsyncOperation[SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::GetAllCryptogramMaterialPackageCharacteristicsAsync(System.String)
    def get_all_cryptogram_material_package_characteristics_with_storage_key_async(self, storage_key_name: str, /) -> windows_foundation.IAsyncOperation[SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::GetAllCryptogramStorageKeyCharacteristicsAsync()
    def get_all_cryptogram_storage_key_characteristics_async(self) -> windows_foundation.IAsyncOperation[SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::ImportCryptogramMaterialPackageAsync(Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageFormat,System.String,System.String,Windows.Storage.Streams.IBuffer)
    def import_cryptogram_material_package_async(self, format: SmartCardCryptogramMaterialPackageFormat, storage_key_name: str, material_package_name: str, cryptogram_material_package: windows_storage_streams.ImplementsIBuffer, /) -> windows_foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyInfo> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::RequestCryptogramMaterialStorageKeyInfoAsync(Windows.Devices.SmartCards.SmartCardUnlockPromptingBehavior,System.String,Windows.Security.Cryptography.Core.CryptographicPublicKeyBlobType)
    def request_cryptogram_material_storage_key_info_async(self, prompting_behavior: SmartCardUnlockPromptingBehavior, storage_key_name: str, format: windows_security_cryptography_core.CryptographicPublicKeyBlobType, /) -> windows_foundation.IAsyncOperation[SmartCardCryptogramStorageKeyInfo]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::RequestUnlockCryptogramMaterialForUseAsync(Windows.Devices.SmartCards.SmartCardUnlockPromptingBehavior)
    def request_unlock_cryptogram_material_for_use_async(self, prompting_behavior: SmartCardUnlockPromptingBehavior, /) -> windows_foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardCryptogramMaterialPossessionProof> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::TryProvePossessionOfCryptogramMaterialPackageAsync(Windows.Devices.SmartCards.SmartCardUnlockPromptingBehavior,Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageConfirmationResponseFormat,System.String,System.String,Windows.Storage.Streams.IBuffer)
    def try_prove_possession_of_cryptogram_material_package_async(self, prompting_behavior: SmartCardUnlockPromptingBehavior, response_format: SmartCardCryptogramMaterialPackageConfirmationResponseFormat, material_package_name: str, material_name: str, challenge: windows_storage_streams.ImplementsIBuffer, /) -> windows_foundation.IAsyncOperation[SmartCardCryptogramMaterialPossessionProof]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::ValidateRequestApduAsync(Windows.Devices.SmartCards.SmartCardUnlockPromptingBehavior,Windows.Storage.Streams.IBuffer,Windows.Foundation.Collections.IIterable`1<Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep>)
    def validate_request_apdu_async(self, prompting_behavior: SmartCardUnlockPromptingBehavior, apdu_to_validate: windows_storage_streams.ImplementsIBuffer, cryptogram_placement_steps: typing.Iterable[SmartCardCryptogramPlacementStep], /) -> windows_foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.SmartCards.SmartCardCryptogramAlgorithm> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::get_SupportedCryptogramAlgorithms()
    @_property
    def supported_cryptogram_algorithms(self) -> typing.Sequence[SmartCardCryptogramAlgorithm]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageConfirmationResponseFormat> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::get_SupportedCryptogramMaterialPackageConfirmationResponseFormats()
    @_property
    def supported_cryptogram_material_package_confirmation_response_formats(self) -> typing.Sequence[SmartCardCryptogramMaterialPackageConfirmationResponseFormat]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageFormat> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::get_SupportedCryptogramMaterialPackageFormats()
    @_property
    def supported_cryptogram_material_package_formats(self) -> typing.Sequence[SmartCardCryptogramMaterialPackageFormat]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.SmartCards.SmartCardCryptogramMaterialType> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::get_SupportedCryptogramMaterialTypes()
    @_property
    def supported_cryptogram_material_types(self) -> typing.Sequence[SmartCardCryptogramMaterialType]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCapabilities> Windows.Devices.SmartCards.SmartCardCryptogramGenerator::get_SupportedSmartCardCryptogramStorageKeyCapabilities()
    @_property
    def supported_smart_card_cryptogram_storage_key_capabilities(self) -> typing.Sequence[SmartCardCryptogramStorageKeyCapabilities]: ...

@typing.final
class SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.SmartCards.SmartCardCryptogramMaterialCharacteristics> Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult::get_Characteristics()
    @_property
    def characteristics(self) -> typing.Sequence[SmartCardCryptogramMaterialCharacteristics]: ...
    # Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult::get_OperationStatus()
    @_property
    def operation_status(self) -> SmartCardCryptogramGeneratorOperationStatus: ...

@typing.final
class SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageCharacteristics> Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult::get_Characteristics()
    @_property
    def characteristics(self) -> typing.Sequence[SmartCardCryptogramMaterialPackageCharacteristics]: ...
    # Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult::get_OperationStatus()
    @_property
    def operation_status(self) -> SmartCardCryptogramGeneratorOperationStatus: ...

@typing.final
class SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCharacteristics> Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult::get_Characteristics()
    @_property
    def characteristics(self) -> typing.Sequence[SmartCardCryptogramStorageKeyCharacteristics]: ...
    # Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult::get_OperationStatus()
    @_property
    def operation_status(self) -> SmartCardCryptogramGeneratorOperationStatus: ...

@typing.final
class SmartCardCryptogramMaterialCharacteristics(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.SmartCards.SmartCardCryptogramAlgorithm> Windows.Devices.SmartCards.SmartCardCryptogramMaterialCharacteristics::get_AllowedAlgorithms()
    @_property
    def allowed_algorithms(self) -> typing.Sequence[SmartCardCryptogramAlgorithm]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageConfirmationResponseFormat> Windows.Devices.SmartCards.SmartCardCryptogramMaterialCharacteristics::get_AllowedProofOfPossessionAlgorithms()
    @_property
    def allowed_proof_of_possession_algorithms(self) -> typing.Sequence[SmartCardCryptogramMaterialPackageConfirmationResponseFormat]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.SmartCards.SmartCardCryptogramAlgorithm> Windows.Devices.SmartCards.SmartCardCryptogramMaterialCharacteristics::get_AllowedValidations()
    @_property
    def allowed_validations(self) -> typing.Sequence[SmartCardCryptogramAlgorithm]: ...
    # System.Int32 Windows.Devices.SmartCards.SmartCardCryptogramMaterialCharacteristics::get_MaterialLength()
    @_property
    def material_length(self) -> winrt.system.Int32: ...
    # System.String Windows.Devices.SmartCards.SmartCardCryptogramMaterialCharacteristics::get_MaterialName()
    @_property
    def material_name(self) -> str: ...
    # Windows.Devices.SmartCards.SmartCardCryptogramMaterialType Windows.Devices.SmartCards.SmartCardCryptogramMaterialCharacteristics::get_MaterialType()
    @_property
    def material_type(self) -> SmartCardCryptogramMaterialType: ...
    # Windows.Devices.SmartCards.SmartCardCryptogramMaterialProtectionMethod Windows.Devices.SmartCards.SmartCardCryptogramMaterialCharacteristics::get_ProtectionMethod()
    @_property
    def protection_method(self) -> SmartCardCryptogramMaterialProtectionMethod: ...
    # System.Int32 Windows.Devices.SmartCards.SmartCardCryptogramMaterialCharacteristics::get_ProtectionVersion()
    @_property
    def protection_version(self) -> winrt.system.Int32: ...

@typing.final
class SmartCardCryptogramMaterialPackageCharacteristics(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.DateTime Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageCharacteristics::get_DateImported()
    @_property
    def date_imported(self) -> datetime.datetime: ...
    # Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageFormat Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageCharacteristics::get_PackageFormat()
    @_property
    def package_format(self) -> SmartCardCryptogramMaterialPackageFormat: ...
    # System.String Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageCharacteristics::get_PackageName()
    @_property
    def package_name(self) -> str: ...
    # System.String Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageCharacteristics::get_StorageKeyName()
    @_property
    def storage_key_name(self) -> str: ...

@typing.final
class SmartCardCryptogramMaterialPossessionProof(winrt.system.Object):
    # Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus Windows.Devices.SmartCards.SmartCardCryptogramMaterialPossessionProof::get_OperationStatus()
    @_property
    def operation_status(self) -> SmartCardCryptogramGeneratorOperationStatus: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.SmartCards.SmartCardCryptogramMaterialPossessionProof::get_Proof()
    @_property
    def proof(self) -> windows_storage_streams.IBuffer: ...

@typing.final
class SmartCardCryptogramPlacementStep(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Int32 Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::get_TemplateOffset()
    @_property
    def template_offset(self) -> winrt.system.Int32: ...
    # System.Void Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::put_TemplateOffset(System.Int32)
    @template_offset.setter
    def template_offset(self, value: winrt.system.Int32) -> None: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::get_SourceData()
    @_property
    def source_data(self) -> windows_storage_streams.IBuffer: ...
    # System.Void Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::put_SourceData(Windows.Storage.Streams.IBuffer)
    @source_data.setter
    def source_data(self, value: windows_storage_streams.ImplementsIBuffer) -> None: ...
    # Windows.Devices.SmartCards.SmartCardCryptogramPlacementOptions Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::get_CryptogramPlacementOptions()
    @_property
    def cryptogram_placement_options(self) -> SmartCardCryptogramPlacementOptions: ...
    # System.Void Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::put_CryptogramPlacementOptions(Windows.Devices.SmartCards.SmartCardCryptogramPlacementOptions)
    @cryptogram_placement_options.setter
    def cryptogram_placement_options(self, value: SmartCardCryptogramPlacementOptions) -> None: ...
    # System.Int32 Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::get_CryptogramOffset()
    @_property
    def cryptogram_offset(self) -> winrt.system.Int32: ...
    # System.Void Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::put_CryptogramOffset(System.Int32)
    @cryptogram_offset.setter
    def cryptogram_offset(self, value: winrt.system.Int32) -> None: ...
    # System.String Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::get_CryptogramMaterialPackageName()
    @_property
    def cryptogram_material_package_name(self) -> str: ...
    # System.Void Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::put_CryptogramMaterialPackageName(System.String)
    @cryptogram_material_package_name.setter
    def cryptogram_material_package_name(self, value: str) -> None: ...
    # System.String Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::get_CryptogramMaterialName()
    @_property
    def cryptogram_material_name(self) -> str: ...
    # System.Void Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::put_CryptogramMaterialName(System.String)
    @cryptogram_material_name.setter
    def cryptogram_material_name(self, value: str) -> None: ...
    # System.Int32 Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::get_CryptogramLength()
    @_property
    def cryptogram_length(self) -> winrt.system.Int32: ...
    # System.Void Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::put_CryptogramLength(System.Int32)
    @cryptogram_length.setter
    def cryptogram_length(self, value: winrt.system.Int32) -> None: ...
    # Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::get_ChainedOutputStep()
    @_property
    def chained_output_step(self) -> SmartCardCryptogramPlacementStep: ...
    # System.Void Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::put_ChainedOutputStep(Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep)
    @chained_output_step.setter
    def chained_output_step(self, value: SmartCardCryptogramPlacementStep) -> None: ...
    # Windows.Devices.SmartCards.SmartCardCryptogramAlgorithm Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::get_Algorithm()
    @_property
    def algorithm(self) -> SmartCardCryptogramAlgorithm: ...
    # System.Void Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep::put_Algorithm(Windows.Devices.SmartCards.SmartCardCryptogramAlgorithm)
    @algorithm.setter
    def algorithm(self, value: SmartCardCryptogramAlgorithm) -> None: ...

@typing.final
class SmartCardCryptogramStorageKeyCharacteristics(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyAlgorithm Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCharacteristics::get_Algorithm()
    @_property
    def algorithm(self) -> SmartCardCryptogramStorageKeyAlgorithm: ...
    # Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCapabilities Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCharacteristics::get_Capabilities()
    @_property
    def capabilities(self) -> SmartCardCryptogramStorageKeyCapabilities: ...
    # Windows.Foundation.DateTime Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCharacteristics::get_DateCreated()
    @_property
    def date_created(self) -> datetime.datetime: ...
    # System.String Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCharacteristics::get_StorageKeyName()
    @_property
    def storage_key_name(self) -> str: ...

@typing.final
class SmartCardCryptogramStorageKeyInfo(winrt.system.Object):
    # Windows.Storage.Streams.IBuffer Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyInfo::get_Attestation()
    @_property
    def attestation(self) -> windows_storage_streams.IBuffer: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyInfo::get_AttestationCertificateChain()
    @_property
    def attestation_certificate_chain(self) -> windows_storage_streams.IBuffer: ...
    # Windows.Devices.SmartCards.SmartCardCryptographicKeyAttestationStatus Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyInfo::get_AttestationStatus()
    @_property
    def attestation_status(self) -> SmartCardCryptographicKeyAttestationStatus: ...
    # Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCapabilities Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyInfo::get_Capabilities()
    @_property
    def capabilities(self) -> SmartCardCryptogramStorageKeyCapabilities: ...
    # Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyInfo::get_OperationStatus()
    @_property
    def operation_status(self) -> SmartCardCryptogramGeneratorOperationStatus: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyInfo::get_PublicKey()
    @_property
    def public_key(self) -> windows_storage_streams.IBuffer: ...
    # Windows.Security.Cryptography.Core.CryptographicPublicKeyBlobType Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyInfo::get_PublicKeyBlobType()
    @_property
    def public_key_blob_type(self) -> windows_security_cryptography_core.CryptographicPublicKeyBlobType: ...
    # System.String Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyInfo::get_OperationalRequirements()
    @_property
    def operational_requirements(self) -> str: ...

@typing.final
class SmartCardEmulator_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Devices.SmartCards.SmartCardAppletIdGroupRegistration>> Windows.Devices.SmartCards.SmartCardEmulator::GetAppletIdGroupRegistrationsAsync()
    def get_applet_id_group_registrations_async(cls) -> windows_foundation.IAsyncOperation[typing.Sequence[SmartCardAppletIdGroupRegistration]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardEmulator> Windows.Devices.SmartCards.SmartCardEmulator::GetDefaultAsync()
    def get_default_async(cls) -> windows_foundation.IAsyncOperation[SmartCardEmulator]: ...
    # System.Boolean Windows.Devices.SmartCards.SmartCardEmulator::IsSupported()
    def is_supported(cls) -> bool: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardAppletIdGroupRegistration> Windows.Devices.SmartCards.SmartCardEmulator::RegisterAppletIdGroupAsync(Windows.Devices.SmartCards.SmartCardAppletIdGroup)
    def register_applet_id_group_async(cls, applet_id_group: SmartCardAppletIdGroup, /) -> windows_foundation.IAsyncOperation[SmartCardAppletIdGroupRegistration]: ...
    # Windows.Foundation.IAsyncAction Windows.Devices.SmartCards.SmartCardEmulator::UnregisterAppletIdGroupAsync(Windows.Devices.SmartCards.SmartCardAppletIdGroupRegistration)
    def unregister_applet_id_group_async(cls, registration: SmartCardAppletIdGroupRegistration, /) -> windows_foundation.IAsyncAction: ...
    # System.UInt16 Windows.Devices.SmartCards.SmartCardEmulator::get_MaxAppletIdGroupRegistrations()
    @_property
    def max_applet_id_group_registrations(cls) -> winrt.system.UInt16: ...

@typing.final
class SmartCardEmulator(winrt.system.Object, metaclass=SmartCardEmulator_Static):
    # System.Boolean Windows.Devices.SmartCards.SmartCardEmulator::IsHostCardEmulationSupported()
    def is_host_card_emulation_supported(self) -> bool: ...
    # System.Void Windows.Devices.SmartCards.SmartCardEmulator::Start()
    def start(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.SmartCards.SmartCardEmulator::add_ApduReceived(Windows.Foundation.TypedEventHandler`2<Windows.Devices.SmartCards.SmartCardEmulator,Windows.Devices.SmartCards.SmartCardEmulatorApduReceivedEventArgs>)
    def add_apdu_received(self, value: windows_foundation.TypedEventHandler[SmartCardEmulator, SmartCardEmulatorApduReceivedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.SmartCards.SmartCardEmulator::remove_ApduReceived(Windows.Foundation.EventRegistrationToken)
    def remove_apdu_received(self, value: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.SmartCards.SmartCardEmulator::add_ConnectionDeactivated(Windows.Foundation.TypedEventHandler`2<Windows.Devices.SmartCards.SmartCardEmulator,Windows.Devices.SmartCards.SmartCardEmulatorConnectionDeactivatedEventArgs>)
    def add_connection_deactivated(self, value: windows_foundation.TypedEventHandler[SmartCardEmulator, SmartCardEmulatorConnectionDeactivatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.SmartCards.SmartCardEmulator::remove_ConnectionDeactivated(Windows.Foundation.EventRegistrationToken)
    def remove_connection_deactivated(self, value: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Devices.SmartCards.SmartCardEmulatorEnablementPolicy Windows.Devices.SmartCards.SmartCardEmulator::get_EnablementPolicy()
    @_property
    def enablement_policy(self) -> SmartCardEmulatorEnablementPolicy: ...

@typing.final
class SmartCardEmulatorApduReceivedEventArgs(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.SmartCards.SmartCardEmulatorApduReceivedEventArgs::TryRespondAsync(Windows.Storage.Streams.IBuffer)
    def try_respond_async(self, response_apdu: windows_storage_streams.ImplementsIBuffer, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus> Windows.Devices.SmartCards.SmartCardEmulatorApduReceivedEventArgs::TryRespondWithCryptogramsAsync(Windows.Storage.Streams.IBuffer,Windows.Foundation.Collections.IIterable`1<Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep>,Windows.Foundation.IReference`1<System.UInt32>)
    def try_respond_with_cryptograms_and_state_async(self, response_template: windows_storage_streams.ImplementsIBuffer, cryptogram_placement_steps: typing.Iterable[SmartCardCryptogramPlacementStep], next_state: typing.Optional[winrt.system.UInt32], /) -> windows_foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus> Windows.Devices.SmartCards.SmartCardEmulatorApduReceivedEventArgs::TryRespondWithCryptogramsAsync(Windows.Storage.Streams.IBuffer,Windows.Foundation.Collections.IIterable`1<Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep>)
    def try_respond_with_cryptograms_async(self, response_template: windows_storage_streams.ImplementsIBuffer, cryptogram_placement_steps: typing.Iterable[SmartCardCryptogramPlacementStep], /) -> windows_foundation.IAsyncOperation[SmartCardCryptogramGeneratorOperationStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.SmartCards.SmartCardEmulatorApduReceivedEventArgs::TryRespondAsync(Windows.Storage.Streams.IBuffer,Windows.Foundation.IReference`1<System.UInt32>)
    def try_respond_with_state_async(self, response_apdu: windows_storage_streams.ImplementsIBuffer, next_state: typing.Optional[winrt.system.UInt32], /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Devices.SmartCards.SmartCardAutomaticResponseStatus Windows.Devices.SmartCards.SmartCardEmulatorApduReceivedEventArgs::get_AutomaticResponseStatus()
    @_property
    def automatic_response_status(self) -> SmartCardAutomaticResponseStatus: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.SmartCards.SmartCardEmulatorApduReceivedEventArgs::get_CommandApdu()
    @_property
    def command_apdu(self) -> windows_storage_streams.IBuffer: ...
    # Windows.Devices.SmartCards.SmartCardEmulatorConnectionProperties Windows.Devices.SmartCards.SmartCardEmulatorApduReceivedEventArgs::get_ConnectionProperties()
    @_property
    def connection_properties(self) -> SmartCardEmulatorConnectionProperties: ...
    # System.UInt32 Windows.Devices.SmartCards.SmartCardEmulatorApduReceivedEventArgs::get_State()
    @_property
    def state(self) -> winrt.system.UInt32: ...

@typing.final
class SmartCardEmulatorConnectionDeactivatedEventArgs(winrt.system.Object):
    # Windows.Devices.SmartCards.SmartCardEmulatorConnectionProperties Windows.Devices.SmartCards.SmartCardEmulatorConnectionDeactivatedEventArgs::get_ConnectionProperties()
    @_property
    def connection_properties(self) -> SmartCardEmulatorConnectionProperties: ...
    # Windows.Devices.SmartCards.SmartCardEmulatorConnectionDeactivatedReason Windows.Devices.SmartCards.SmartCardEmulatorConnectionDeactivatedEventArgs::get_Reason()
    @_property
    def reason(self) -> SmartCardEmulatorConnectionDeactivatedReason: ...

@typing.final
class SmartCardEmulatorConnectionProperties(winrt.system.Object):
    # System.Guid Windows.Devices.SmartCards.SmartCardEmulatorConnectionProperties::get_Id()
    @_property
    def id(self) -> _uuid.UUID: ...
    # Windows.Devices.SmartCards.SmartCardEmulatorConnectionSource Windows.Devices.SmartCards.SmartCardEmulatorConnectionProperties::get_Source()
    @_property
    def source(self) -> SmartCardEmulatorConnectionSource: ...

@typing.final
class SmartCardPinPolicy(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption Windows.Devices.SmartCards.SmartCardPinPolicy::get_UppercaseLetters()
    @_property
    def uppercase_letters(self) -> SmartCardPinCharacterPolicyOption: ...
    # System.Void Windows.Devices.SmartCards.SmartCardPinPolicy::put_UppercaseLetters(Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption)
    @uppercase_letters.setter
    def uppercase_letters(self, value: SmartCardPinCharacterPolicyOption) -> None: ...
    # Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption Windows.Devices.SmartCards.SmartCardPinPolicy::get_SpecialCharacters()
    @_property
    def special_characters(self) -> SmartCardPinCharacterPolicyOption: ...
    # System.Void Windows.Devices.SmartCards.SmartCardPinPolicy::put_SpecialCharacters(Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption)
    @special_characters.setter
    def special_characters(self, value: SmartCardPinCharacterPolicyOption) -> None: ...
    # System.UInt32 Windows.Devices.SmartCards.SmartCardPinPolicy::get_MinLength()
    @_property
    def min_length(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.SmartCards.SmartCardPinPolicy::put_MinLength(System.UInt32)
    @min_length.setter
    def min_length(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.Devices.SmartCards.SmartCardPinPolicy::get_MaxLength()
    @_property
    def max_length(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Devices.SmartCards.SmartCardPinPolicy::put_MaxLength(System.UInt32)
    @max_length.setter
    def max_length(self, value: winrt.system.UInt32) -> None: ...
    # Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption Windows.Devices.SmartCards.SmartCardPinPolicy::get_LowercaseLetters()
    @_property
    def lowercase_letters(self) -> SmartCardPinCharacterPolicyOption: ...
    # System.Void Windows.Devices.SmartCards.SmartCardPinPolicy::put_LowercaseLetters(Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption)
    @lowercase_letters.setter
    def lowercase_letters(self, value: SmartCardPinCharacterPolicyOption) -> None: ...
    # Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption Windows.Devices.SmartCards.SmartCardPinPolicy::get_Digits()
    @_property
    def digits(self) -> SmartCardPinCharacterPolicyOption: ...
    # System.Void Windows.Devices.SmartCards.SmartCardPinPolicy::put_Digits(Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption)
    @digits.setter
    def digits(self, value: SmartCardPinCharacterPolicyOption) -> None: ...

@typing.final
class SmartCardPinResetDeferral(winrt.system.Object):
    # System.Void Windows.Devices.SmartCards.SmartCardPinResetDeferral::Complete()
    def complete(self) -> None: ...

@typing.final
class SmartCardPinResetRequest(winrt.system.Object):
    # Windows.Devices.SmartCards.SmartCardPinResetDeferral Windows.Devices.SmartCards.SmartCardPinResetRequest::GetDeferral()
    def get_deferral(self) -> SmartCardPinResetDeferral: ...
    # System.Void Windows.Devices.SmartCards.SmartCardPinResetRequest::SetResponse(Windows.Storage.Streams.IBuffer)
    def set_response(self, response: windows_storage_streams.ImplementsIBuffer, /) -> None: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.SmartCards.SmartCardPinResetRequest::get_Challenge()
    @_property
    def challenge(self) -> windows_storage_streams.IBuffer: ...
    # Windows.Foundation.DateTime Windows.Devices.SmartCards.SmartCardPinResetRequest::get_Deadline()
    @_property
    def deadline(self) -> datetime.datetime: ...

@typing.final
class SmartCardProvisioning_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardProvisioning> Windows.Devices.SmartCards.SmartCardProvisioning::FromSmartCardAsync(Windows.Devices.SmartCards.SmartCard)
    def from_smart_card_async(cls, card: SmartCard, /) -> windows_foundation.IAsyncOperation[SmartCardProvisioning]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardProvisioning> Windows.Devices.SmartCards.SmartCardProvisioning::RequestAttestedVirtualSmartCardCreationAsync(System.String,Windows.Storage.Streams.IBuffer,Windows.Devices.SmartCards.SmartCardPinPolicy)
    def request_attested_virtual_smart_card_creation_async(cls, friendly_name: str, administrative_key: windows_storage_streams.ImplementsIBuffer, pin_policy: SmartCardPinPolicy, /) -> windows_foundation.IAsyncOperation[SmartCardProvisioning]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardProvisioning> Windows.Devices.SmartCards.SmartCardProvisioning::RequestAttestedVirtualSmartCardCreationAsync(System.String,Windows.Storage.Streams.IBuffer,Windows.Devices.SmartCards.SmartCardPinPolicy,System.Guid)
    def request_attested_virtual_smart_card_creation_async_with_card_id(cls, friendly_name: str, administrative_key: windows_storage_streams.ImplementsIBuffer, pin_policy: SmartCardPinPolicy, card_id: _uuid.UUID, /) -> windows_foundation.IAsyncOperation[SmartCardProvisioning]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardProvisioning> Windows.Devices.SmartCards.SmartCardProvisioning::RequestVirtualSmartCardCreationAsync(System.String,Windows.Storage.Streams.IBuffer,Windows.Devices.SmartCards.SmartCardPinPolicy)
    def request_virtual_smart_card_creation_async(cls, friendly_name: str, administrative_key: windows_storage_streams.ImplementsIBuffer, pin_policy: SmartCardPinPolicy, /) -> windows_foundation.IAsyncOperation[SmartCardProvisioning]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardProvisioning> Windows.Devices.SmartCards.SmartCardProvisioning::RequestVirtualSmartCardCreationAsync(System.String,Windows.Storage.Streams.IBuffer,Windows.Devices.SmartCards.SmartCardPinPolicy,System.Guid)
    def request_virtual_smart_card_creation_async_with_card_id(cls, friendly_name: str, administrative_key: windows_storage_streams.ImplementsIBuffer, pin_policy: SmartCardPinPolicy, card_id: _uuid.UUID, /) -> windows_foundation.IAsyncOperation[SmartCardProvisioning]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.SmartCards.SmartCardProvisioning::RequestVirtualSmartCardDeletionAsync(Windows.Devices.SmartCards.SmartCard)
    def request_virtual_smart_card_deletion_async(cls, card: SmartCard, /) -> windows_foundation.IAsyncOperation[bool]: ...

@typing.final
class SmartCardProvisioning(winrt.system.Object, metaclass=SmartCardProvisioning_Static):
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.Devices.SmartCards.SmartCardProvisioning::GetAuthorityKeyContainerNameAsync()
    def get_authority_key_container_name_async(self) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardChallengeContext> Windows.Devices.SmartCards.SmartCardProvisioning::GetChallengeContextAsync()
    def get_challenge_context_async(self) -> windows_foundation.IAsyncOperation[SmartCardChallengeContext]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Guid> Windows.Devices.SmartCards.SmartCardProvisioning::GetIdAsync()
    def get_id_async(self) -> windows_foundation.IAsyncOperation[_uuid.UUID]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.Devices.SmartCards.SmartCardProvisioning::GetNameAsync()
    def get_name_async(self) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.SmartCards.SmartCardProvisioning::RequestPinChangeAsync()
    def request_pin_change_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.SmartCards.SmartCardProvisioning::RequestPinResetAsync(Windows.Devices.SmartCards.SmartCardPinResetHandler)
    def request_pin_reset_async(self, handler: SmartCardPinResetHandler, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Devices.SmartCards.SmartCard Windows.Devices.SmartCards.SmartCardProvisioning::get_SmartCard()
    @_property
    def smart_card(self) -> SmartCard: ...

@typing.final
class SmartCardReader_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardReader> Windows.Devices.SmartCards.SmartCardReader::FromIdAsync(System.String)
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[SmartCardReader]: ...
    # System.String Windows.Devices.SmartCards.SmartCardReader::GetDeviceSelector()
    def get_device_selector(cls) -> str: ...
    # System.String Windows.Devices.SmartCards.SmartCardReader::GetDeviceSelector(Windows.Devices.SmartCards.SmartCardReaderKind)
    def get_device_selector_with_kind(cls, kind: SmartCardReaderKind, /) -> str: ...

@typing.final
class SmartCardReader(winrt.system.Object, metaclass=SmartCardReader_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Devices.SmartCards.SmartCard>> Windows.Devices.SmartCards.SmartCardReader::FindAllCardsAsync()
    def find_all_cards_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[SmartCard]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.SmartCards.SmartCardReaderStatus> Windows.Devices.SmartCards.SmartCardReader::GetStatusAsync()
    def get_status_async(self) -> windows_foundation.IAsyncOperation[SmartCardReaderStatus]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.SmartCards.SmartCardReader::add_CardAdded(Windows.Foundation.TypedEventHandler`2<Windows.Devices.SmartCards.SmartCardReader,Windows.Devices.SmartCards.CardAddedEventArgs>)
    def add_card_added(self, handler: windows_foundation.TypedEventHandler[SmartCardReader, CardAddedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.SmartCards.SmartCardReader::remove_CardAdded(Windows.Foundation.EventRegistrationToken)
    def remove_card_added(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.SmartCards.SmartCardReader::add_CardRemoved(Windows.Foundation.TypedEventHandler`2<Windows.Devices.SmartCards.SmartCardReader,Windows.Devices.SmartCards.CardRemovedEventArgs>)
    def add_card_removed(self, handler: windows_foundation.TypedEventHandler[SmartCardReader, CardRemovedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.SmartCards.SmartCardReader::remove_CardRemoved(Windows.Foundation.EventRegistrationToken)
    def remove_card_removed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Windows.Devices.SmartCards.SmartCardReader::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # Windows.Devices.SmartCards.SmartCardReaderKind Windows.Devices.SmartCards.SmartCardReader::get_Kind()
    @_property
    def kind(self) -> SmartCardReaderKind: ...
    # System.String Windows.Devices.SmartCards.SmartCardReader::get_Name()
    @_property
    def name(self) -> str: ...

@typing.final
class SmartCardTriggerDetails(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.SmartCards.SmartCardTriggerDetails::TryLaunchCurrentAppAsync(System.String)
    def try_launch_current_app_async(self, arguments: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.Devices.SmartCards.SmartCardTriggerDetails::TryLaunchCurrentAppAsync(System.String,Windows.Devices.SmartCards.SmartCardLaunchBehavior)
    def try_launch_current_app_with_behavior_async(self, arguments: str, behavior: SmartCardLaunchBehavior, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.SmartCards.SmartCardTriggerDetails::get_SourceAppletId()
    @_property
    def source_applet_id(self) -> windows_storage_streams.IBuffer: ...
    # Windows.Storage.Streams.IBuffer Windows.Devices.SmartCards.SmartCardTriggerDetails::get_TriggerData()
    @_property
    def trigger_data(self) -> windows_storage_streams.IBuffer: ...
    # Windows.Devices.SmartCards.SmartCardTriggerType Windows.Devices.SmartCards.SmartCardTriggerDetails::get_TriggerType()
    @_property
    def trigger_type(self) -> SmartCardTriggerType: ...
    # Windows.Devices.SmartCards.SmartCardEmulator Windows.Devices.SmartCards.SmartCardTriggerDetails::get_Emulator()
    @_property
    def emulator(self) -> SmartCardEmulator: ...
    # Windows.Devices.SmartCards.SmartCard Windows.Devices.SmartCards.SmartCardTriggerDetails::get_SmartCard()
    @_property
    def smart_card(self) -> SmartCard: ...

