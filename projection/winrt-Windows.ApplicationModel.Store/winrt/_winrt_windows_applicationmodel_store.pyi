# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.1.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.storage as windows_storage

from winrt.windows.applicationmodel.store import FulfillmentResult, ProductPurchaseStatus, ProductType
from winrt.windows.applicationmodel.store import LicenseChangedEventHandler

Self = typing.TypeVar('Self')

@typing.final
class CurrentApp_Static(type):
    def get_app_purchase_campaign_id_async(cls) -> windows_foundation.IAsyncOperation[str]: ...
    def get_app_receipt_async(cls) -> windows_foundation.IAsyncOperation[str]: ...
    def get_customer_collections_id_async(cls, service_ticket: str, publisher_user_id: str, /) -> windows_foundation.IAsyncOperation[str]: ...
    def get_customer_purchase_id_async(cls, service_ticket: str, publisher_user_id: str, /) -> windows_foundation.IAsyncOperation[str]: ...
    def get_product_receipt_async(cls, product_id: str, /) -> windows_foundation.IAsyncOperation[str]: ...
    def get_unfulfilled_consumables_async(cls) -> windows_foundation.IAsyncOperation[windows_foundation_collections.IVectorView[UnfulfilledConsumable]]: ...
    def load_listing_information_async(cls) -> windows_foundation.IAsyncOperation[ListingInformation]: ...
    def load_listing_information_by_keywords_async(cls, keywords: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[ListingInformation]: ...
    def load_listing_information_by_product_ids_async(cls, product_ids: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[ListingInformation]: ...
    def report_consumable_fulfillment_async(cls, product_id: str, transaction_id: _uuid.UUID, /) -> windows_foundation.IAsyncOperation[FulfillmentResult]: ...
    def report_product_fulfillment(cls, product_id: str, /) -> None: ...
    def request_app_purchase_async(cls, include_receipt: bool, /) -> windows_foundation.IAsyncOperation[str]: ...
    @typing.overload
    def request_product_purchase_async(cls, product_id: str, /) -> windows_foundation.IAsyncOperation[PurchaseResults]: ...
    @typing.overload
    def request_product_purchase_async(cls, product_id: str, include_receipt: bool, /) -> windows_foundation.IAsyncOperation[str]: ...
    @typing.overload
    def request_product_purchase_async(cls, product_id: str, offer_id: str, display_properties: typing.Optional[ProductPurchaseDisplayProperties], /) -> windows_foundation.IAsyncOperation[PurchaseResults]: ...
    @_property
    def app_id(cls) -> _uuid.UUID: ...
    @_property
    def license_information(cls) -> typing.Optional[LicenseInformation]: ...
    @_property
    def link_uri(cls) -> typing.Optional[windows_foundation.Uri]: ...

@typing.final
class CurrentApp(winrt.system.Object, metaclass=CurrentApp_Static):
    pass

@typing.final
class CurrentAppSimulator_Static(type):
    def get_app_purchase_campaign_id_async(cls) -> windows_foundation.IAsyncOperation[str]: ...
    def get_app_receipt_async(cls) -> windows_foundation.IAsyncOperation[str]: ...
    def get_product_receipt_async(cls, product_id: str, /) -> windows_foundation.IAsyncOperation[str]: ...
    def get_unfulfilled_consumables_async(cls) -> windows_foundation.IAsyncOperation[windows_foundation_collections.IVectorView[UnfulfilledConsumable]]: ...
    def load_listing_information_async(cls) -> windows_foundation.IAsyncOperation[ListingInformation]: ...
    def load_listing_information_by_keywords_async(cls, keywords: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[ListingInformation]: ...
    def load_listing_information_by_product_ids_async(cls, product_ids: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[ListingInformation]: ...
    def reload_simulator_async(cls, simulator_settings_file: typing.Optional[windows_storage.StorageFile], /) -> windows_foundation.IAsyncAction: ...
    def report_consumable_fulfillment_async(cls, product_id: str, transaction_id: _uuid.UUID, /) -> windows_foundation.IAsyncOperation[FulfillmentResult]: ...
    def request_app_purchase_async(cls, include_receipt: bool, /) -> windows_foundation.IAsyncOperation[str]: ...
    @typing.overload
    def request_product_purchase_async(cls, product_id: str, /) -> windows_foundation.IAsyncOperation[PurchaseResults]: ...
    @typing.overload
    def request_product_purchase_async(cls, product_id: str, include_receipt: bool, /) -> windows_foundation.IAsyncOperation[str]: ...
    @typing.overload
    def request_product_purchase_async(cls, product_id: str, offer_id: str, display_properties: typing.Optional[ProductPurchaseDisplayProperties], /) -> windows_foundation.IAsyncOperation[PurchaseResults]: ...
    @_property
    def app_id(cls) -> _uuid.UUID: ...
    @_property
    def license_information(cls) -> typing.Optional[LicenseInformation]: ...
    @_property
    def link_uri(cls) -> typing.Optional[windows_foundation.Uri]: ...

@typing.final
class CurrentAppSimulator(winrt.system.Object, metaclass=CurrentAppSimulator_Static):
    pass

@typing.final
class LicenseInformation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LicenseInformation: ...
    def add_license_changed(self, handler: typing.Optional[LicenseChangedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_license_changed(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def expiration_date(self) -> datetime.datetime: ...
    @_property
    def is_active(self) -> bool: ...
    @_property
    def is_trial(self) -> bool: ...
    @_property
    def product_licenses(self) -> typing.Optional[windows_foundation_collections.IMapView[str, ProductLicense]]: ...

@typing.final
class ListingInformation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ListingInformation: ...
    @_property
    def age_rating(self) -> winrt.system.UInt32: ...
    @_property
    def current_market(self) -> str: ...
    @_property
    def description(self) -> str: ...
    @_property
    def formatted_price(self) -> str: ...
    @_property
    def name(self) -> str: ...
    @_property
    def product_listings(self) -> typing.Optional[windows_foundation_collections.IMapView[str, ProductListing]]: ...
    @_property
    def currency_code(self) -> str: ...
    @_property
    def formatted_base_price(self) -> str: ...
    @_property
    def is_on_sale(self) -> bool: ...
    @_property
    def sale_end_date(self) -> datetime.datetime: ...

@typing.final
class ProductLicense(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProductLicense: ...
    @_property
    def expiration_date(self) -> datetime.datetime: ...
    @_property
    def is_active(self) -> bool: ...
    @_property
    def product_id(self) -> str: ...
    @_property
    def is_consumable(self) -> bool: ...

@typing.final
class ProductListing(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProductListing: ...
    @_property
    def formatted_price(self) -> str: ...
    @_property
    def name(self) -> str: ...
    @_property
    def product_id(self) -> str: ...
    @_property
    def formatted_base_price(self) -> str: ...
    @_property
    def is_on_sale(self) -> bool: ...
    @_property
    def sale_end_date(self) -> datetime.datetime: ...
    @_property
    def currency_code(self) -> str: ...
    @_property
    def description(self) -> str: ...
    @_property
    def image_uri(self) -> typing.Optional[windows_foundation.Uri]: ...
    @_property
    def keywords(self) -> typing.Optional[windows_foundation_collections.IIterable[str]]: ...
    @_property
    def tag(self) -> str: ...
    @_property
    def product_type(self) -> ProductType: ...

@typing.final
class ProductPurchaseDisplayProperties(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProductPurchaseDisplayProperties: ...
    @typing.overload
    def __new__(cls: typing.Type[ProductPurchaseDisplayProperties], name: str) -> ProductPurchaseDisplayProperties: ...
    @typing.overload
    def __new__(cls: typing.Type[ProductPurchaseDisplayProperties]) -> ProductPurchaseDisplayProperties: ...
    @_property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @_property
    def image(self) -> typing.Optional[windows_foundation.Uri]: ...
    @image.setter
    def image(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def description(self) -> str: ...
    @description.setter
    def description(self, value: str) -> None: ...

@typing.final
class PurchaseResults(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PurchaseResults: ...
    @_property
    def offer_id(self) -> str: ...
    @_property
    def receipt_xml(self) -> str: ...
    @_property
    def status(self) -> ProductPurchaseStatus: ...
    @_property
    def transaction_id(self) -> _uuid.UUID: ...

@typing.final
class UnfulfilledConsumable(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UnfulfilledConsumable: ...
    @_property
    def offer_id(self) -> str: ...
    @_property
    def product_id(self) -> str: ...
    @_property
    def transaction_id(self) -> _uuid.UUID: ...

