# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.storage as windows_storage

from winrt.windows.applicationmodel.store import FulfillmentResult, ProductPurchaseStatus, ProductType
from winrt.windows.applicationmodel.store import LicenseChangedEventHandler

Self = typing.TypeVar('Self')

@typing.final
class CurrentApp_Static(type):
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Store.CurrentApp::GetAppPurchaseCampaignIdAsync()
    def get_app_purchase_campaign_id_async(cls) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Store.CurrentApp::GetAppReceiptAsync()
    def get_app_receipt_async(cls) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Store.CurrentApp::GetCustomerCollectionsIdAsync(System.String,System.String)
    def get_customer_collections_id_async(cls, service_ticket: str, publisher_user_id: str, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Store.CurrentApp::GetCustomerPurchaseIdAsync(System.String,System.String)
    def get_customer_purchase_id_async(cls, service_ticket: str, publisher_user_id: str, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Store.CurrentApp::GetProductReceiptAsync(System.String)
    def get_product_receipt_async(cls, product_id: str, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>> Windows.ApplicationModel.Store.CurrentApp::GetUnfulfilledConsumablesAsync()
    def get_unfulfilled_consumables_async(cls) -> windows_foundation.IAsyncOperation[typing.Sequence[UnfulfilledConsumable]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation> Windows.ApplicationModel.Store.CurrentApp::LoadListingInformationAsync()
    def load_listing_information_async(cls) -> windows_foundation.IAsyncOperation[ListingInformation]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation> Windows.ApplicationModel.Store.CurrentApp::LoadListingInformationByKeywordsAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def load_listing_information_by_keywords_async(cls, keywords: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[ListingInformation]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation> Windows.ApplicationModel.Store.CurrentApp::LoadListingInformationByProductIdsAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def load_listing_information_by_product_ids_async(cls, product_ids: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[ListingInformation]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.FulfillmentResult> Windows.ApplicationModel.Store.CurrentApp::ReportConsumableFulfillmentAsync(System.String,System.Guid)
    def report_consumable_fulfillment_async(cls, product_id: str, transaction_id: _uuid.UUID, /) -> windows_foundation.IAsyncOperation[FulfillmentResult]: ...
    # System.Void Windows.ApplicationModel.Store.CurrentApp::ReportProductFulfillment(System.String)
    def report_product_fulfillment(cls, product_id: str, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Store.CurrentApp::RequestAppPurchaseAsync(System.Boolean)
    def request_app_purchase_async(cls, include_receipt: bool, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Store.CurrentApp::RequestProductPurchaseAsync(System.String,System.Boolean)
    # @deprecated("RequestProductPurchaseAsync(productId, includeReceipt) may be altered or unavailable for releases after Windows 8.1. Instead, use RequestProductPurchaseAsync(productId).")
    def request_product_purchase_async(cls, product_id: str, include_receipt: bool, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults> Windows.ApplicationModel.Store.CurrentApp::RequestProductPurchaseAsync(System.String,System.String,Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties)
    def request_product_purchase_with_display_properties_async(cls, product_id: str, offer_id: str, display_properties: ProductPurchaseDisplayProperties, /) -> windows_foundation.IAsyncOperation[PurchaseResults]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults> Windows.ApplicationModel.Store.CurrentApp::RequestProductPurchaseAsync(System.String)
    def request_product_purchase_with_results_async(cls, product_id: str, /) -> windows_foundation.IAsyncOperation[PurchaseResults]: ...
    # System.Guid Windows.ApplicationModel.Store.CurrentApp::get_AppId()
    @_property
    def app_id(cls) -> _uuid.UUID: ...
    # Windows.ApplicationModel.Store.LicenseInformation Windows.ApplicationModel.Store.CurrentApp::get_LicenseInformation()
    @_property
    def license_information(cls) -> LicenseInformation: ...
    # Windows.Foundation.Uri Windows.ApplicationModel.Store.CurrentApp::get_LinkUri()
    @_property
    def link_uri(cls) -> windows_foundation.Uri: ...

@typing.final
class CurrentApp(winrt.system.Object, metaclass=CurrentApp_Static):
    pass

@typing.final
class CurrentAppSimulator_Static(type):
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Store.CurrentAppSimulator::GetAppPurchaseCampaignIdAsync()
    def get_app_purchase_campaign_id_async(cls) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Store.CurrentAppSimulator::GetAppReceiptAsync()
    def get_app_receipt_async(cls) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Store.CurrentAppSimulator::GetProductReceiptAsync(System.String)
    def get_product_receipt_async(cls, product_id: str, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.UnfulfilledConsumable>> Windows.ApplicationModel.Store.CurrentAppSimulator::GetUnfulfilledConsumablesAsync()
    def get_unfulfilled_consumables_async(cls) -> windows_foundation.IAsyncOperation[typing.Sequence[UnfulfilledConsumable]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation> Windows.ApplicationModel.Store.CurrentAppSimulator::LoadListingInformationAsync()
    def load_listing_information_async(cls) -> windows_foundation.IAsyncOperation[ListingInformation]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation> Windows.ApplicationModel.Store.CurrentAppSimulator::LoadListingInformationByKeywordsAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def load_listing_information_by_keywords_async(cls, keywords: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[ListingInformation]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.ListingInformation> Windows.ApplicationModel.Store.CurrentAppSimulator::LoadListingInformationByProductIdsAsync(Windows.Foundation.Collections.IIterable`1<System.String>)
    def load_listing_information_by_product_ids_async(cls, product_ids: typing.Iterable[str], /) -> windows_foundation.IAsyncOperation[ListingInformation]: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Store.CurrentAppSimulator::ReloadSimulatorAsync(Windows.Storage.StorageFile)
    def reload_simulator_async(cls, simulator_settings_file: windows_storage.StorageFile, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.FulfillmentResult> Windows.ApplicationModel.Store.CurrentAppSimulator::ReportConsumableFulfillmentAsync(System.String,System.Guid)
    def report_consumable_fulfillment_async(cls, product_id: str, transaction_id: _uuid.UUID, /) -> windows_foundation.IAsyncOperation[FulfillmentResult]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Store.CurrentAppSimulator::RequestAppPurchaseAsync(System.Boolean)
    def request_app_purchase_async(cls, include_receipt: bool, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Store.CurrentAppSimulator::RequestProductPurchaseAsync(System.String,System.Boolean)
    # @deprecated("RequestProductPurchaseAsync(productId, includeReceipt) may be altered or unavailable for releases after Windows 8.1. Instead, use RequestProductPurchaseAsync(productId).")
    def request_product_purchase_async(cls, product_id: str, include_receipt: bool, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults> Windows.ApplicationModel.Store.CurrentAppSimulator::RequestProductPurchaseAsync(System.String,System.String,Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties)
    def request_product_purchase_with_display_properties_async(cls, product_id: str, offer_id: str, display_properties: ProductPurchaseDisplayProperties, /) -> windows_foundation.IAsyncOperation[PurchaseResults]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.PurchaseResults> Windows.ApplicationModel.Store.CurrentAppSimulator::RequestProductPurchaseAsync(System.String)
    def request_product_purchase_with_results_async(cls, product_id: str, /) -> windows_foundation.IAsyncOperation[PurchaseResults]: ...
    # System.Guid Windows.ApplicationModel.Store.CurrentAppSimulator::get_AppId()
    @_property
    def app_id(cls) -> _uuid.UUID: ...
    # Windows.ApplicationModel.Store.LicenseInformation Windows.ApplicationModel.Store.CurrentAppSimulator::get_LicenseInformation()
    @_property
    def license_information(cls) -> LicenseInformation: ...
    # Windows.Foundation.Uri Windows.ApplicationModel.Store.CurrentAppSimulator::get_LinkUri()
    @_property
    def link_uri(cls) -> windows_foundation.Uri: ...

@typing.final
class CurrentAppSimulator(winrt.system.Object, metaclass=CurrentAppSimulator_Static):
    pass

@typing.final
class LicenseInformation(winrt.system.Object):
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Store.LicenseInformation::add_LicenseChanged(Windows.ApplicationModel.Store.LicenseChangedEventHandler)
    def add_license_changed(self, handler: LicenseChangedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Store.LicenseInformation::remove_LicenseChanged(Windows.Foundation.EventRegistrationToken)
    def remove_license_changed(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.DateTime Windows.ApplicationModel.Store.LicenseInformation::get_ExpirationDate()
    @_property
    def expiration_date(self) -> datetime.datetime: ...
    # System.Boolean Windows.ApplicationModel.Store.LicenseInformation::get_IsActive()
    @_property
    def is_active(self) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Store.LicenseInformation::get_IsTrial()
    @_property
    def is_trial(self) -> bool: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,Windows.ApplicationModel.Store.ProductLicense> Windows.ApplicationModel.Store.LicenseInformation::get_ProductLicenses()
    @_property
    def product_licenses(self) -> typing.Mapping[str, ProductLicense]: ...

@typing.final
class ListingInformation(winrt.system.Object):
    # System.UInt32 Windows.ApplicationModel.Store.ListingInformation::get_AgeRating()
    @_property
    def age_rating(self) -> winrt.system.UInt32: ...
    # System.String Windows.ApplicationModel.Store.ListingInformation::get_CurrentMarket()
    @_property
    def current_market(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.ListingInformation::get_Description()
    @_property
    def description(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.ListingInformation::get_FormattedPrice()
    @_property
    def formatted_price(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.ListingInformation::get_Name()
    @_property
    def name(self) -> str: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,Windows.ApplicationModel.Store.ProductListing> Windows.ApplicationModel.Store.ListingInformation::get_ProductListings()
    @_property
    def product_listings(self) -> typing.Mapping[str, ProductListing]: ...
    # System.String Windows.ApplicationModel.Store.ListingInformation::get_CurrencyCode()
    @_property
    def currency_code(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.ListingInformation::get_FormattedBasePrice()
    @_property
    def formatted_base_price(self) -> str: ...
    # System.Boolean Windows.ApplicationModel.Store.ListingInformation::get_IsOnSale()
    @_property
    def is_on_sale(self) -> bool: ...
    # Windows.Foundation.DateTime Windows.ApplicationModel.Store.ListingInformation::get_SaleEndDate()
    @_property
    def sale_end_date(self) -> datetime.datetime: ...

@typing.final
class ProductLicense(winrt.system.Object):
    # Windows.Foundation.DateTime Windows.ApplicationModel.Store.ProductLicense::get_ExpirationDate()
    @_property
    def expiration_date(self) -> datetime.datetime: ...
    # System.Boolean Windows.ApplicationModel.Store.ProductLicense::get_IsActive()
    @_property
    def is_active(self) -> bool: ...
    # System.String Windows.ApplicationModel.Store.ProductLicense::get_ProductId()
    @_property
    def product_id(self) -> str: ...
    # System.Boolean Windows.ApplicationModel.Store.ProductLicense::get_IsConsumable()
    @_property
    def is_consumable(self) -> bool: ...

@typing.final
class ProductListing(winrt.system.Object):
    # System.String Windows.ApplicationModel.Store.ProductListing::get_FormattedPrice()
    @_property
    def formatted_price(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.ProductListing::get_Name()
    @_property
    def name(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.ProductListing::get_ProductId()
    @_property
    def product_id(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.ProductListing::get_FormattedBasePrice()
    @_property
    def formatted_base_price(self) -> str: ...
    # System.Boolean Windows.ApplicationModel.Store.ProductListing::get_IsOnSale()
    @_property
    def is_on_sale(self) -> bool: ...
    # Windows.Foundation.DateTime Windows.ApplicationModel.Store.ProductListing::get_SaleEndDate()
    @_property
    def sale_end_date(self) -> datetime.datetime: ...
    # System.String Windows.ApplicationModel.Store.ProductListing::get_CurrencyCode()
    @_property
    def currency_code(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.ProductListing::get_Description()
    @_property
    def description(self) -> str: ...
    # Windows.Foundation.Uri Windows.ApplicationModel.Store.ProductListing::get_ImageUri()
    @_property
    def image_uri(self) -> windows_foundation.Uri: ...
    # Windows.Foundation.Collections.IIterable`1<System.String> Windows.ApplicationModel.Store.ProductListing::get_Keywords()
    @_property
    def keywords(self) -> typing.Iterable[str]: ...
    # System.String Windows.ApplicationModel.Store.ProductListing::get_Tag()
    @_property
    def tag(self) -> str: ...
    # Windows.ApplicationModel.Store.ProductType Windows.ApplicationModel.Store.ProductListing::get_ProductType()
    @_property
    def product_type(self) -> ProductType: ...

@typing.final
class ProductPurchaseDisplayProperties(winrt.system.Object):
    @typing.overload
    def __new__(cls: typing.Type[Self], name: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties::get_Name()
    @_property
    def name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties::put_Name(System.String)
    @name.setter
    def name(self, value: str) -> None: ...
    # Windows.Foundation.Uri Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties::get_Image()
    @_property
    def image(self) -> windows_foundation.Uri: ...
    # System.Void Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties::put_Image(Windows.Foundation.Uri)
    @image.setter
    def image(self, value: windows_foundation.Uri) -> None: ...
    # System.String Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties::get_Description()
    @_property
    def description(self) -> str: ...
    # System.Void Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties::put_Description(System.String)
    @description.setter
    def description(self, value: str) -> None: ...

@typing.final
class PurchaseResults(winrt.system.Object):
    # System.String Windows.ApplicationModel.Store.PurchaseResults::get_OfferId()
    @_property
    def offer_id(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.PurchaseResults::get_ReceiptXml()
    @_property
    def receipt_xml(self) -> str: ...
    # Windows.ApplicationModel.Store.ProductPurchaseStatus Windows.ApplicationModel.Store.PurchaseResults::get_Status()
    @_property
    def status(self) -> ProductPurchaseStatus: ...
    # System.Guid Windows.ApplicationModel.Store.PurchaseResults::get_TransactionId()
    @_property
    def transaction_id(self) -> _uuid.UUID: ...

@typing.final
class UnfulfilledConsumable(winrt.system.Object):
    # System.String Windows.ApplicationModel.Store.UnfulfilledConsumable::get_OfferId()
    @_property
    def offer_id(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.UnfulfilledConsumable::get_ProductId()
    @_property
    def product_id(self) -> str: ...
    # System.Guid Windows.ApplicationModel.Store.UnfulfilledConsumable::get_TransactionId()
    @_property
    def transaction_id(self) -> _uuid.UUID: ...

