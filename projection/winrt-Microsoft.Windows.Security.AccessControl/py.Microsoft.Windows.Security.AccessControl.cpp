// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "py.Microsoft.Windows.Security.AccessControl.h"

namespace py::cpp::Microsoft::Windows::Security::AccessControl
{
    // ----- SecurityDescriptorHelpers class --------------------

    static PyObject* _new_SecurityDescriptorHelpers(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::Security::AccessControl::SecurityDescriptorHelpers>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::Security::AccessControl::SecurityDescriptorHelpers>::type_name);
        return nullptr;
    }

    static PyObject* SecurityDescriptorHelpers_GetSddlForAppContainerNames(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.Security.AccessControl.SecurityDescriptorHelpers", L"GetSddlForAppContainerNames", 3);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(3);
                    return nullptr;
                }

                auto param0 = py::convert_to<py::pybuf_view<winrt::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess, false>>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<uint32_t>(args, 2);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Microsoft::Windows::Security::AccessControl::SecurityDescriptorHelpers::GetSddlForAppContainerNames(param0, param1, param2);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SecurityDescriptorHelpers_GetSecurityDescriptorBytesFromAppContainerNames(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.Security.AccessControl.SecurityDescriptorHelpers", L"GetSecurityDescriptorBytesFromAppContainerNames", 3);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(3);
                    return nullptr;
                }

                auto param0 = py::convert_to<py::pybuf_view<winrt::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess, false>>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<uint32_t>(args, 2);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Microsoft::Windows::Security::AccessControl::SecurityDescriptorHelpers::GetSecurityDescriptorBytesFromAppContainerNames(param0, param1, param2);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_SecurityDescriptorHelpers[] = {
        { }};

    static PyGetSetDef _getset_SecurityDescriptorHelpers[] = {
        { }};

    static PyType_Slot _type_slots_SecurityDescriptorHelpers[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_SecurityDescriptorHelpers) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SecurityDescriptorHelpers) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SecurityDescriptorHelpers) },
        { }};

    static PyType_Spec type_spec_SecurityDescriptorHelpers = {
        "winrt._winrt_microsoft_windows_security_accesscontrol.SecurityDescriptorHelpers",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SecurityDescriptorHelpers};

    static PyGetSetDef getset_SecurityDescriptorHelpers_Static[] = {
        { }};

    static PyMethodDef methods_SecurityDescriptorHelpers_Static[] = {
        { "get_sddl_for_app_container_names", reinterpret_cast<PyCFunction>(SecurityDescriptorHelpers_GetSddlForAppContainerNames), METH_VARARGS, nullptr },
        { "get_security_descriptor_bytes_from_app_container_names", reinterpret_cast<PyCFunction>(SecurityDescriptorHelpers_GetSecurityDescriptorBytesFromAppContainerNames), METH_VARARGS, nullptr },
        { }};

    static PyType_Slot type_slots_SecurityDescriptorHelpers_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_SecurityDescriptorHelpers_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_SecurityDescriptorHelpers_Static) },
        { }
    };

    static PyType_Spec type_spec_SecurityDescriptorHelpers_Static = {
        "winrt._winrt_microsoft_windows_security_accesscontrol.SecurityDescriptorHelpers_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_SecurityDescriptorHelpers_Static};

    // ----- AppContainerNameAndAccess struct --------------------

    winrt::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess AppContainerNameAndAccess_from_tuple(PyObject* tuple)
    {
        if (PyTuple_GET_SIZE(tuple) != 2)
        {
            PyErr_SetString(PyExc_TypeError, "Incorrect number of fields");
            throw python_exception();
        }

        winrt::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess result{};

        result.appContainerName = py::convert_to<winrt::hstring>(tuple, 0);
        result.accessMask = py::convert_to<uint32_t>(tuple, 1);

        return result;
    }

    PyObject* _new_AppContainerNameAndAccess(PyTypeObject* subclass, PyObject* args, PyObject* kwds) noexcept
    {
        pyobj_handle self_obj{(subclass->tp_alloc(subclass, 0))};
        if (!self_obj)
        {
            return nullptr;
        }

        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess>*>(self_obj.get());
        std::construct_at(&self->obj);

        auto tuple_size = PyTuple_Size(args);
        if ((tuple_size == 0) && (!kwds))
        {
            return self_obj.detach();
        }

        PyObject* _appContainerName{};
        uint32_t _accessMask{};

        static const char* kwlist[] = {"app_container_name", "access_mask", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "|OI", const_cast<char**>(kwlist), &_appContainerName, &_accessMask))
        {
            return nullptr;
        }

        try
        {
            self->obj.appContainerName = _appContainerName ? py::convert_to<winrt::hstring>(_appContainerName) : winrt::hstring{};
            self->obj.accessMask = _accessMask;

            return self_obj.detach();
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_AppContainerNameAndAccess(py::wrapper::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_AppContainerNameAndAccess(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    PyObject* _replace_AppContainerNameAndAccess(py::wrapper::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess* self, PyObject* args, PyObject* kwds) noexcept
    {
        try
        {
            PyObject* _appContainerName{};
            uint32_t _accessMask{self->obj.accessMask};

            static const char* kwlist[] = {"app_container_name", "access_mask", nullptr};
            if (!PyArg_ParseTupleAndKeywords(args, kwds, "|$OI", const_cast<char**>(kwlist), &_appContainerName, &_accessMask))
            {
                return nullptr;
            }

            auto copy = self->obj;
            copy.appContainerName = _appContainerName ? py::convert_to<winrt::hstring>(_appContainerName) : self->obj.appContainerName;
            copy.accessMask = _accessMask;

            return convert(copy);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    PyObject* unpack_AppContainerNameAndAccess(py::wrapper::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess* self, PyObject* /*unused*/) noexcept
    {
        py::pyobj_handle appContainerName{convert(self->obj.appContainerName)};
        if (!appContainerName)
        {
            return nullptr;
        }

        py::pyobj_handle accessMask{convert(self->obj.accessMask)};
        if (!accessMask)
        {
            return nullptr;
        }

        pyobj_handle tuple{PyTuple_New(2)};
        if (!tuple)
        {
            return nullptr;
        }

        PyTuple_SET_ITEM(tuple.get(), 0, appContainerName.detach());
        PyTuple_SET_ITEM(tuple.get(), 1, accessMask.detach());

        return tuple.detach();
    }

    static PyMethodDef _methods_AppContainerNameAndAccess[] = {
        { "_assign_array_", _assign_array_AppContainerNameAndAccess, METH_O | METH_STATIC, nullptr },
        { "__replace__", reinterpret_cast<PyCFunction>(_replace_AppContainerNameAndAccess), METH_VARARGS | METH_KEYWORDS, nullptr },
        { "unpack", reinterpret_cast<PyCFunction>(unpack_AppContainerNameAndAccess), METH_NOARGS, nullptr },
        { }};

    static PyObject* AppContainerNameAndAccess_get_appContainerName(py::wrapper::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.appContainerName);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppContainerNameAndAccess_get_accessMask(py::wrapper::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.accessMask);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyGetSetDef _getset_AppContainerNameAndAccess[] = {
        { "app_container_name", reinterpret_cast<getter>(AppContainerNameAndAccess_get_appContainerName), nullptr, nullptr, nullptr },
        { "access_mask", reinterpret_cast<getter>(AppContainerNameAndAccess_get_accessMask), nullptr, nullptr, nullptr },
        { }};

    static PyObject* _richcompare_AppContainerNameAndAccess(py::wrapper::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess* self, PyObject* other, int op) noexcept
    {
        try
        {
            auto _other = py::convert_to<winrt::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess>(other);

            if (op == Py_EQ)
            {
                if (self->obj == _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            if (op == Py_NE)
            {
                if (self->obj != _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            Py_RETURN_NOTIMPLEMENTED;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _repr_AppContainerNameAndAccess(PyObject* self) noexcept
    {
        py::pyobj_handle appContainerName{PyObject_GetAttrString(self, "app_container_name")};
        if (!appContainerName)
        {
            return nullptr;
        }

        py::pyobj_handle accessMask{PyObject_GetAttrString(self, "access_mask")};
        if (!accessMask)
        {
            return nullptr;
        }

        return PyUnicode_FromFormat("AppContainerNameAndAccess(app_container_name=%R, access_mask=%R)", appContainerName.get(), accessMask.get());
    }

    static PyType_Slot _type_slots_AppContainerNameAndAccess[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppContainerNameAndAccess) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppContainerNameAndAccess) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppContainerNameAndAccess) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppContainerNameAndAccess) },
        { Py_tp_richcompare, reinterpret_cast<void*>(_richcompare_AppContainerNameAndAccess) },
        { Py_tp_repr, reinterpret_cast<void*>(_repr_AppContainerNameAndAccess) },
        { }};

    static PyType_Spec type_spec_AppContainerNameAndAccess = {
        "winrt._winrt_microsoft_windows_security_accesscontrol.AppContainerNameAndAccess",
        sizeof(py::wrapper::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppContainerNameAndAccess};

    // ----- Microsoft.Windows.Security.AccessControl Initialization --------------------

    PyDoc_STRVAR(module_doc, "Microsoft.Windows.Security.AccessControl");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_microsoft_windows_security_accesscontrol",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Microsoft::Windows::Security::AccessControl

PyMODINIT_FUNC PyInit__winrt_microsoft_windows_security_accesscontrol(void) noexcept
{
    using namespace py::cpp::Microsoft::Windows::Security::AccessControl;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto inspectable_meta_type = py::get_inspectable_meta_type();
    if (!inspectable_meta_type)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle SecurityDescriptorHelpers_Static_bases{PyTuple_Pack(1, reinterpret_cast<PyObject*>(inspectable_meta_type))};
    if (!SecurityDescriptorHelpers_Static_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_SecurityDescriptorHelpers_Static{PyType_FromSpecWithBases(&type_spec_SecurityDescriptorHelpers_Static, SecurityDescriptorHelpers_Static_bases.get())};
    if (!type_SecurityDescriptorHelpers_Static)
    {
        return nullptr;
    }

    py::pytype_handle SecurityDescriptorHelpers_type{py::register_python_type(module.get(), &type_spec_SecurityDescriptorHelpers, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_SecurityDescriptorHelpers_Static.get()))};
    if (!SecurityDescriptorHelpers_type)
    {
        return nullptr;
    }

    py::pytype_handle AppContainerNameAndAccess_type{py::register_python_type(module.get(), &type_spec_AppContainerNameAndAccess, nullptr, nullptr)};
    if (!AppContainerNameAndAccess_type)
    {
        return nullptr;
    }

    py::pyobj_handle AppContainerNameAndAccess_from_tuple_capsule{PyCapsule_New(reinterpret_cast<void*>(AppContainerNameAndAccess_from_tuple),"winrt._winrt_microsoft_windows_security_accesscontrol.AppContainerNameAndAccess_from_tuple", nullptr)};
    if (!AppContainerNameAndAccess_from_tuple_capsule)
    {
        return nullptr;
    }

    if (PyModule_AddObjectRef(module.get(), "AppContainerNameAndAccess_from_tuple", AppContainerNameAndAccess_from_tuple_capsule.get()) == -1)
    {
        return nullptr;
    }

    return module.detach();
}
