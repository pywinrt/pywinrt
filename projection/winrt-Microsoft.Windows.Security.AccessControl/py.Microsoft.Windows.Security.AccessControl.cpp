// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Microsoft.Windows.Security.AccessControl.h"


namespace py::cpp::Microsoft::Windows::Security::AccessControl
{
    // ----- SecurityDescriptorHelpers class --------------------

    static PyObject* _new_SecurityDescriptorHelpers(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Microsoft::Windows::Security::AccessControl::SecurityDescriptorHelpers>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Microsoft::Windows::Security::AccessControl::SecurityDescriptorHelpers>::type_name);
        return nullptr;
    }

    static PyObject* SecurityDescriptorHelpers_GetSddlForAppContainerNames(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.Security.AccessControl.SecurityDescriptorHelpers", L"GetSddlForAppContainerNames", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<py::pybuf_view<winrt::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess, false>>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<uint32_t>(args, 2);

                return py::convert(winrt::Microsoft::Windows::Security::AccessControl::SecurityDescriptorHelpers::GetSddlForAppContainerNames(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SecurityDescriptorHelpers_GetSecurityDescriptorBytesFromAppContainerNames(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Microsoft.Windows.Security.AccessControl.SecurityDescriptorHelpers", L"GetSecurityDescriptorBytesFromAppContainerNames", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<py::pybuf_view<winrt::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess, false>>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<uint32_t>(args, 2);

                return py::convert(winrt::Microsoft::Windows::Security::AccessControl::SecurityDescriptorHelpers::GetSecurityDescriptorBytesFromAppContainerNames(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_SecurityDescriptorHelpers[] = {
        { }
    };

    static PyGetSetDef _getset_SecurityDescriptorHelpers[] = {
        { }
    };

    static PyType_Slot _type_slots_SecurityDescriptorHelpers[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_SecurityDescriptorHelpers) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SecurityDescriptorHelpers) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SecurityDescriptorHelpers) },
        { },
    };

    static PyType_Spec type_spec_SecurityDescriptorHelpers =
    {
        "winrt._winrt_microsoft_windows_security_accesscontrol.SecurityDescriptorHelpers",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SecurityDescriptorHelpers
    };

    static PyGetSetDef getset_SecurityDescriptorHelpers_Static[] = {
        { }
    };

    static PyMethodDef methods_SecurityDescriptorHelpers_Static[] = {
        { "get_sddl_for_app_container_names", reinterpret_cast<PyCFunction>(SecurityDescriptorHelpers_GetSddlForAppContainerNames), METH_VARARGS, nullptr },
        { "get_security_descriptor_bytes_from_app_container_names", reinterpret_cast<PyCFunction>(SecurityDescriptorHelpers_GetSecurityDescriptorBytesFromAppContainerNames), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_SecurityDescriptorHelpers_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_SecurityDescriptorHelpers_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_SecurityDescriptorHelpers_Static) },
        { }
    };

    static PyType_Spec type_spec_SecurityDescriptorHelpers_Static =
    {
        "winrt._winrt_microsoft_windows_security_accesscontrol.SecurityDescriptorHelpers_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_SecurityDescriptorHelpers_Static
    };

    // ----- AppContainerNameAndAccess struct --------------------

    winrt_struct_wrapper<winrt::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess>* _new_AppContainerNameAndAccess(PyTypeObject* subclass, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess>*>(subclass->tp_alloc(subclass, 0));

        if (!self)
        {
            return nullptr;
        }

        std::construct_at(&self->obj);

        return self;
    }

    int _init_AppContainerNameAndAccess(winrt_struct_wrapper<winrt::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess>* self, PyObject* args, PyObject* kwds) noexcept
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            self->obj = {};
            return 0;
        }

        winrt::hstring _appContainerName{};
        uint32_t _accessMask{};

        static const char* kwlist[] = {"app_container_name", "access_mask", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "uI", const_cast<char**>(kwlist), &_appContainerName, &_accessMask))
        {
            return -1;
        }

        try
        {
            self->obj = {_appContainerName, _accessMask};
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static void _dealloc_AppContainerNameAndAccess(py::wrapper::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_AppContainerNameAndAccess(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_AppContainerNameAndAccess[] = {
        { "_assign_array_", _assign_array_AppContainerNameAndAccess, METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyObject* AppContainerNameAndAccess_get_appContainerName(py::wrapper::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.appContainerName);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppContainerNameAndAccess_set_appContainerName(py::wrapper::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.appContainerName = py::converter<winrt::hstring>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AppContainerNameAndAccess_get_accessMask(py::wrapper::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.accessMask);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AppContainerNameAndAccess_set_accessMask(py::wrapper::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.accessMask = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_AppContainerNameAndAccess[] = {
        { "app_container_name", reinterpret_cast<getter>(AppContainerNameAndAccess_get_appContainerName), reinterpret_cast<setter>(AppContainerNameAndAccess_set_appContainerName), nullptr, nullptr },
        { "access_mask", reinterpret_cast<getter>(AppContainerNameAndAccess_get_accessMask), reinterpret_cast<setter>(AppContainerNameAndAccess_set_accessMask), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppContainerNameAndAccess[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppContainerNameAndAccess) },
        { Py_tp_init, reinterpret_cast<void*>(_init_AppContainerNameAndAccess) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppContainerNameAndAccess) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppContainerNameAndAccess) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppContainerNameAndAccess) },
        { },
    };

    static PyType_Spec type_spec_AppContainerNameAndAccess =
    {
        "winrt._winrt_microsoft_windows_security_accesscontrol.AppContainerNameAndAccess",
        sizeof(py::wrapper::Microsoft::Windows::Security::AccessControl::AppContainerNameAndAccess),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppContainerNameAndAccess
    };

    // ----- Microsoft.Windows.Security.AccessControl Initialization --------------------
    PyDoc_STRVAR(module_doc, "Microsoft::Windows::Security::AccessControl");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_microsoft_windows_security_accesscontrol",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Microsoft::Windows::Security::AccessControl

PyMODINIT_FUNC PyInit__winrt_microsoft_windows_security_accesscontrol(void) noexcept
{
    using namespace py::cpp::Microsoft::Windows::Security::AccessControl;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_SecurityDescriptorHelpers_Static{PyType_FromSpec(&type_spec_SecurityDescriptorHelpers_Static)};
    if (!type_SecurityDescriptorHelpers_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SecurityDescriptorHelpers, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_SecurityDescriptorHelpers_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppContainerNameAndAccess, nullptr, nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
