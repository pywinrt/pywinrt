// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "py.Windows.Graphics.Effects.h"

namespace py::cpp::Windows::Graphics::Effects
{
    // ----- IGraphicsEffect interface --------------------

    static PyObject* _new_IGraphicsEffect(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Effects::IGraphicsEffect>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Effects::IGraphicsEffect>::type_name);
        return nullptr;
    }

    static void _dealloc_IGraphicsEffect(py::wrapper::Windows::Graphics::Effects::IGraphicsEffect* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IGraphicsEffect_get_Name(py::wrapper::Windows::Graphics::Effects::IGraphicsEffect* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Effects.IGraphicsEffect", L"Name");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Name();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IGraphicsEffect_put_Name(py::wrapper::Windows::Graphics::Effects::IGraphicsEffect* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Effects.IGraphicsEffect", L"Name");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            {
                auto _gil = release_gil();
                self->obj.Name(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_IGraphicsEffect(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Effects::IGraphicsEffect>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IGraphicsEffect(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Effects::IGraphicsEffect>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IGraphicsEffect[] = {
        { "_assign_array_", _assign_array_IGraphicsEffect, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IGraphicsEffect), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_IGraphicsEffect[] = {
        { "name", reinterpret_cast<getter>(IGraphicsEffect_get_Name), reinterpret_cast<setter>(IGraphicsEffect_put_Name), nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_IGraphicsEffect[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_IGraphicsEffect) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IGraphicsEffect) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IGraphicsEffect) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IGraphicsEffect) },
        { }};

    static PyType_Spec type_spec_IGraphicsEffect = {
        "winrt._winrt_windows_graphics_effects.IGraphicsEffect",
        sizeof(py::wrapper::Windows::Graphics::Effects::IGraphicsEffect),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IGraphicsEffect};

    struct ImplementsIGraphicsEffect : py::ImplementsInterfaceT<ImplementsIGraphicsEffect, winrt::Windows::Graphics::Effects::IGraphicsEffect>
    {
        ImplementsIGraphicsEffect() = delete;
        ImplementsIGraphicsEffect(PyObject* py_obj, winrt::impl::inspectable_abi* runtime_class) : py::ImplementsInterfaceT<ImplementsIGraphicsEffect, winrt::Windows::Graphics::Effects::IGraphicsEffect>(py_obj, runtime_class)
        {
        }

        auto Name()
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle value{PyObject_GetAttrString(self.get(), "name")};
                if (!value)
                {
                    throw python_exception();
                }

                return py::convert_to<winrt::hstring>(value.get());
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        void Name(winrt::hstring const& param0)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle value{py::convert(param0)};
                if (!value)
                {
                    throw python_exception();
                }

                if (PyObject_SetAttrString(self.get(), "name", value.get()) == -1)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }
    };

    static PyObject* _guid_ImplementsIGraphicsEffect(PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::guid_of<winrt::Windows::Graphics::Effects::IGraphicsEffect>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _make_ImplementsIGraphicsEffect(PyObject* /*unused*/, PyObject* args) noexcept
    {
        try
        {
            PyObject* py_obj;
            winrt::impl::inspectable_abi* runtime_class;

            if (!PyArg_ParseTuple(args, "On", &py_obj, &runtime_class))
            {
                return nullptr;
            }

            auto iface{std::make_unique<ImplementsIGraphicsEffect>(py_obj, runtime_class)};

            return PyLong_FromVoidPtr(iface.release());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef methods_ImplementsIGraphicsEffect[] = {
        { "_guid_", reinterpret_cast<PyCFunction>(_guid_ImplementsIGraphicsEffect), METH_NOARGS | METH_STATIC, nullptr },
        { "_make_", reinterpret_cast<PyCFunction>(_make_ImplementsIGraphicsEffect), METH_VARARGS | METH_STATIC, nullptr },
        { }};

    static PyType_Slot type_slots_ImplementsIGraphicsEffect[] = {
        { Py_tp_methods, reinterpret_cast<void*>(methods_ImplementsIGraphicsEffect) },
        { }};

    static PyType_Spec type_spec_ImplementsIGraphicsEffect = {
        "winrt._winrt_windows_graphics_effects.ImplementsIGraphicsEffect",
        0,
        0,
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,
        type_slots_ImplementsIGraphicsEffect};

    // ----- IGraphicsEffectSource interface --------------------

    static PyObject* _new_IGraphicsEffectSource(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>::type_name);
        return nullptr;
    }

    static void _dealloc_IGraphicsEffectSource(py::wrapper::Windows::Graphics::Effects::IGraphicsEffectSource* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_IGraphicsEffectSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IGraphicsEffectSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IGraphicsEffectSource[] = {
        { "_assign_array_", _assign_array_IGraphicsEffectSource, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IGraphicsEffectSource), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_IGraphicsEffectSource[] = {
        { }};

    static PyType_Slot _type_slots_IGraphicsEffectSource[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_IGraphicsEffectSource) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IGraphicsEffectSource) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IGraphicsEffectSource) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IGraphicsEffectSource) },
        { }};

    static PyType_Spec type_spec_IGraphicsEffectSource = {
        "winrt._winrt_windows_graphics_effects.IGraphicsEffectSource",
        sizeof(py::wrapper::Windows::Graphics::Effects::IGraphicsEffectSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IGraphicsEffectSource};

    struct ImplementsIGraphicsEffectSource : py::ImplementsInterfaceT<ImplementsIGraphicsEffectSource, winrt::Windows::Graphics::Effects::IGraphicsEffectSource>
    {
        ImplementsIGraphicsEffectSource() = delete;
        ImplementsIGraphicsEffectSource(PyObject* py_obj, winrt::impl::inspectable_abi* runtime_class) : py::ImplementsInterfaceT<ImplementsIGraphicsEffectSource, winrt::Windows::Graphics::Effects::IGraphicsEffectSource>(py_obj, runtime_class)
        {
        }
    };

    static PyObject* _guid_ImplementsIGraphicsEffectSource(PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::guid_of<winrt::Windows::Graphics::Effects::IGraphicsEffectSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _make_ImplementsIGraphicsEffectSource(PyObject* /*unused*/, PyObject* args) noexcept
    {
        try
        {
            PyObject* py_obj;
            winrt::impl::inspectable_abi* runtime_class;

            if (!PyArg_ParseTuple(args, "On", &py_obj, &runtime_class))
            {
                return nullptr;
            }

            auto iface{std::make_unique<ImplementsIGraphicsEffectSource>(py_obj, runtime_class)};

            return PyLong_FromVoidPtr(iface.release());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef methods_ImplementsIGraphicsEffectSource[] = {
        { "_guid_", reinterpret_cast<PyCFunction>(_guid_ImplementsIGraphicsEffectSource), METH_NOARGS | METH_STATIC, nullptr },
        { "_make_", reinterpret_cast<PyCFunction>(_make_ImplementsIGraphicsEffectSource), METH_VARARGS | METH_STATIC, nullptr },
        { }};

    static PyType_Slot type_slots_ImplementsIGraphicsEffectSource[] = {
        { Py_tp_methods, reinterpret_cast<void*>(methods_ImplementsIGraphicsEffectSource) },
        { }};

    static PyType_Spec type_spec_ImplementsIGraphicsEffectSource = {
        "winrt._winrt_windows_graphics_effects.ImplementsIGraphicsEffectSource",
        0,
        0,
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,
        type_slots_ImplementsIGraphicsEffectSource};

    // ----- Windows.Graphics.Effects Initialization --------------------

    PyDoc_STRVAR(module_doc, "Windows.Graphics.Effects");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_windows_graphics_effects",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Windows::Graphics::Effects

PyMODINIT_FUNC PyInit__winrt_windows_graphics_effects(void) noexcept
{
    using namespace py::cpp::Windows::Graphics::Effects;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pytype_handle IGraphicsEffect_type{py::register_python_type(module.get(), &type_spec_IGraphicsEffect, object_bases.get(), nullptr)};
    if (!IGraphicsEffect_type)
    {
        return nullptr;
    }

    py::pytype_handle ImplementsIGraphicsEffect_type{reinterpret_cast<PyTypeObject*>(PyType_FromModuleAndSpec(module.get(), &type_spec_ImplementsIGraphicsEffect, nullptr))};
    if (!ImplementsIGraphicsEffect_type)
    {
        return nullptr;
    }

    if (PyModule_AddType(module.get(), ImplementsIGraphicsEffect_type.get()) == -1)
    {
        return nullptr;
    }

    py::pytype_handle IGraphicsEffectSource_type{py::register_python_type(module.get(), &type_spec_IGraphicsEffectSource, object_bases.get(), nullptr)};
    if (!IGraphicsEffectSource_type)
    {
        return nullptr;
    }

    py::pytype_handle ImplementsIGraphicsEffectSource_type{reinterpret_cast<PyTypeObject*>(PyType_FromModuleAndSpec(module.get(), &type_spec_ImplementsIGraphicsEffectSource, nullptr))};
    if (!ImplementsIGraphicsEffectSource_type)
    {
        return nullptr;
    }

    if (PyModule_AddType(module.get(), ImplementsIGraphicsEffectSource_type.get()) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
