# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.system.threading as windows_system_threading

from winrt.windows.system.threading.core import SignalHandler

Self = typing.TypeVar('Self')

@typing.final
class PreallocatedWorkItem(winrt.system.Object):
    @typing.overload
    def __new__(cls: typing.Type[Self], handler: windows_system_threading.WorkItemHandler) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], handler: windows_system_threading.WorkItemHandler, priority: windows_system_threading.WorkItemPriority) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], handler: windows_system_threading.WorkItemHandler, priority: windows_system_threading.WorkItemPriority, options: windows_system_threading.WorkItemOptions) -> Self: ...
    # Windows.Foundation.IAsyncAction Windows.System.Threading.Core.PreallocatedWorkItem::RunAsync()
    def run_async(self) -> windows_foundation.IAsyncAction: ...

@typing.final
class SignalNotifier_Static(winrt._winrt.IInspectable_Static):
    # Windows.System.Threading.Core.SignalNotifier Windows.System.Threading.Core.SignalNotifier::AttachToEvent(System.String,Windows.System.Threading.Core.SignalHandler)
    def attach_to_event(cls, name: str, handler: SignalHandler, /) -> SignalNotifier: ...
    # Windows.System.Threading.Core.SignalNotifier Windows.System.Threading.Core.SignalNotifier::AttachToEvent(System.String,Windows.System.Threading.Core.SignalHandler,Windows.Foundation.TimeSpan)
    def attach_to_event_with_timeout(cls, name: str, handler: SignalHandler, timeout: datetime.timedelta, /) -> SignalNotifier: ...
    # Windows.System.Threading.Core.SignalNotifier Windows.System.Threading.Core.SignalNotifier::AttachToSemaphore(System.String,Windows.System.Threading.Core.SignalHandler)
    def attach_to_semaphore(cls, name: str, handler: SignalHandler, /) -> SignalNotifier: ...
    # Windows.System.Threading.Core.SignalNotifier Windows.System.Threading.Core.SignalNotifier::AttachToSemaphore(System.String,Windows.System.Threading.Core.SignalHandler,Windows.Foundation.TimeSpan)
    def attach_to_semaphore_with_timeout(cls, name: str, handler: SignalHandler, timeout: datetime.timedelta, /) -> SignalNotifier: ...

@typing.final
class SignalNotifier(winrt.system.Object, metaclass=SignalNotifier_Static):
    # System.Void Windows.System.Threading.Core.SignalNotifier::Enable()
    def enable(self) -> None: ...
    # System.Void Windows.System.Threading.Core.SignalNotifier::Terminate()
    def terminate(self) -> None: ...

