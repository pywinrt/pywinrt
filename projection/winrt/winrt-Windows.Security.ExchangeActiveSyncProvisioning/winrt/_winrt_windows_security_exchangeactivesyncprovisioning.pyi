# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation

from winrt.windows.security.exchangeactivesyncprovisioning import EasDisallowConvenienceLogonResult, EasEncryptionProviderType, EasMaxInactivityTimeLockResult, EasMaxPasswordFailedAttemptsResult, EasMinPasswordComplexCharactersResult, EasMinPasswordLengthResult, EasPasswordExpirationResult, EasPasswordHistoryResult, EasRequireEncryptionResult

Self = typing.TypeVar('Self')

@typing.final
class EasClientDeviceInformation(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation::get_FriendlyName()
    @_property
    def friendly_name(self) -> str: ...
    # System.Guid Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation::get_Id()
    @_property
    def id(self) -> _uuid.UUID: ...
    # System.String Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation::get_OperatingSystem()
    @_property
    def operating_system(self) -> str: ...
    # System.String Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation::get_SystemManufacturer()
    @_property
    def system_manufacturer(self) -> str: ...
    # System.String Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation::get_SystemProductName()
    @_property
    def system_product_name(self) -> str: ...
    # System.String Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation::get_SystemSku()
    @_property
    def system_sku(self) -> str: ...
    # System.String Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation::get_SystemFirmwareVersion()
    @_property
    def system_firmware_version(self) -> str: ...
    # System.String Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation::get_SystemHardwareVersion()
    @_property
    def system_hardware_version(self) -> str: ...

@typing.final
class EasClientSecurityPolicy(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults> Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::ApplyAsync()
    def apply_async(self) -> windows_foundation.IAsyncOperation[EasComplianceResults]: ...
    # Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::CheckCompliance()
    def check_compliance(self) -> EasComplianceResults: ...
    # System.Boolean Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::get_RequireEncryption()
    @_property
    def require_encryption(self) -> bool: ...
    # System.Void Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::put_RequireEncryption(System.Boolean)
    @require_encryption.setter
    def require_encryption(self, value: bool) -> None: ...
    # System.UInt32 Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::get_PasswordHistory()
    @_property
    def password_history(self) -> winrt.system.UInt32: ...
    # System.Void Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::put_PasswordHistory(System.UInt32)
    @password_history.setter
    def password_history(self, value: winrt.system.UInt32) -> None: ...
    # Windows.Foundation.TimeSpan Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::get_PasswordExpiration()
    @_property
    def password_expiration(self) -> datetime.timedelta: ...
    # System.Void Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::put_PasswordExpiration(Windows.Foundation.TimeSpan)
    @password_expiration.setter
    def password_expiration(self, value: datetime.timedelta) -> None: ...
    # System.Byte Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::get_MinPasswordLength()
    @_property
    def min_password_length(self) -> winrt.system.UInt8: ...
    # System.Void Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::put_MinPasswordLength(System.Byte)
    @min_password_length.setter
    def min_password_length(self, value: winrt.system.UInt8) -> None: ...
    # System.Byte Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::get_MinPasswordComplexCharacters()
    @_property
    def min_password_complex_characters(self) -> winrt.system.UInt8: ...
    # System.Void Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::put_MinPasswordComplexCharacters(System.Byte)
    @min_password_complex_characters.setter
    def min_password_complex_characters(self, value: winrt.system.UInt8) -> None: ...
    # System.Byte Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::get_MaxPasswordFailedAttempts()
    @_property
    def max_password_failed_attempts(self) -> winrt.system.UInt8: ...
    # System.Void Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::put_MaxPasswordFailedAttempts(System.Byte)
    @max_password_failed_attempts.setter
    def max_password_failed_attempts(self, value: winrt.system.UInt8) -> None: ...
    # Windows.Foundation.TimeSpan Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::get_MaxInactivityTimeLock()
    @_property
    def max_inactivity_time_lock(self) -> datetime.timedelta: ...
    # System.Void Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::put_MaxInactivityTimeLock(Windows.Foundation.TimeSpan)
    @max_inactivity_time_lock.setter
    def max_inactivity_time_lock(self, value: datetime.timedelta) -> None: ...
    # System.Boolean Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::get_DisallowConvenienceLogon()
    @_property
    def disallow_convenience_logon(self) -> bool: ...
    # System.Void Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy::put_DisallowConvenienceLogon(System.Boolean)
    @disallow_convenience_logon.setter
    def disallow_convenience_logon(self, value: bool) -> None: ...

@typing.final
class EasComplianceResults(winrt.system.Object):
    # System.Boolean Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults::get_Compliant()
    @_property
    def compliant(self) -> bool: ...
    # Windows.Security.ExchangeActiveSyncProvisioning.EasDisallowConvenienceLogonResult Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults::get_DisallowConvenienceLogonResult()
    @_property
    def disallow_convenience_logon_result(self) -> EasDisallowConvenienceLogonResult: ...
    # Windows.Security.ExchangeActiveSyncProvisioning.EasMaxInactivityTimeLockResult Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults::get_MaxInactivityTimeLockResult()
    @_property
    def max_inactivity_time_lock_result(self) -> EasMaxInactivityTimeLockResult: ...
    # Windows.Security.ExchangeActiveSyncProvisioning.EasMaxPasswordFailedAttemptsResult Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults::get_MaxPasswordFailedAttemptsResult()
    @_property
    def max_password_failed_attempts_result(self) -> EasMaxPasswordFailedAttemptsResult: ...
    # Windows.Security.ExchangeActiveSyncProvisioning.EasMinPasswordComplexCharactersResult Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults::get_MinPasswordComplexCharactersResult()
    @_property
    def min_password_complex_characters_result(self) -> EasMinPasswordComplexCharactersResult: ...
    # Windows.Security.ExchangeActiveSyncProvisioning.EasMinPasswordLengthResult Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults::get_MinPasswordLengthResult()
    @_property
    def min_password_length_result(self) -> EasMinPasswordLengthResult: ...
    # Windows.Security.ExchangeActiveSyncProvisioning.EasPasswordExpirationResult Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults::get_PasswordExpirationResult()
    @_property
    def password_expiration_result(self) -> EasPasswordExpirationResult: ...
    # Windows.Security.ExchangeActiveSyncProvisioning.EasPasswordHistoryResult Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults::get_PasswordHistoryResult()
    @_property
    def password_history_result(self) -> EasPasswordHistoryResult: ...
    # Windows.Security.ExchangeActiveSyncProvisioning.EasRequireEncryptionResult Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults::get_RequireEncryptionResult()
    @_property
    def require_encryption_result(self) -> EasRequireEncryptionResult: ...
    # Windows.Security.ExchangeActiveSyncProvisioning.EasEncryptionProviderType Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults::get_EncryptionProviderType()
    @_property
    def encryption_provider_type(self) -> EasEncryptionProviderType: ...

