# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.devices.geolocation as windows_devices_geolocation
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.foundation.numerics as windows_foundation_numerics
import winrt.windows.services.maps as windows_services_maps
import winrt.windows.services.maps.localsearch as windows_services_maps_localsearch
import winrt.windows.storage.streams as windows_storage_streams
import winrt.windows.ui as windows_ui
import winrt.windows.ui.xaml as windows_ui_xaml
import winrt.windows.ui.xaml.controls as windows_ui_xaml_controls

from winrt.windows.ui.xaml.controls.maps import MapAnimationKind, MapCameraChangeReason, MapColorScheme, MapElementCollisionBehavior, MapInteractionMode, MapLoadingStatus, MapModel3DShadingOption, MapPanInteractionMode, MapProjection, MapStyle, MapTileAnimationState, MapTileLayer, MapVisibleRegionKind, MapWatermarkMode

Self = typing.TypeVar('Self')

@typing.final
class MapZoomLevelRange:
    @_property
    def min(self) -> winrt.system.Double: ...
    @_property
    def max(self) -> winrt.system.Double: ...
    def __new__(cls, min: winrt.system.Double = 0, max: winrt.system.Double = 0) -> MapZoomLevelRange: ...
    def __replace__(self, /, **changes: typing.Any) -> MapZoomLevelRange: ...
    def unpack(self) -> typing.Tuple[winrt.system.Double, winrt.system.Double]: ...

class CustomMapTileDataSource_Static(MapTileDataSource_Static):
    pass

class CustomMapTileDataSource(MapTileDataSource, metaclass=CustomMapTileDataSource_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource::add_BitmapRequested(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource,Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs>)
    def add_bitmap_requested(self, handler: windows_foundation.TypedEventHandler[CustomMapTileDataSource, MapTileBitmapRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource::remove_BitmapRequested(Windows.Foundation.EventRegistrationToken)
    def remove_bitmap_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...

class HttpMapTileDataSource_Static(MapTileDataSource_Static):
    pass

class HttpMapTileDataSource(MapTileDataSource, metaclass=HttpMapTileDataSource_Static):
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], uri_format_string: str) -> Self: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource::add_UriRequested(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource,Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs>)
    def add_uri_requested(self, handler: windows_foundation.TypedEventHandler[HttpMapTileDataSource, MapTileUriRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource::remove_UriRequested(Windows.Foundation.EventRegistrationToken)
    def remove_uri_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.String Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource::get_UriFormatString()
    @_property
    def uri_format_string(self) -> str: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource::put_UriFormatString(System.String)
    @uri_format_string.setter
    @typing.final
    def uri_format_string(self, value: str) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource::get_AllowCaching()
    @_property
    def allow_caching(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource::put_AllowCaching(System.Boolean)
    @allow_caching.setter
    @typing.final
    def allow_caching(self, value: bool) -> None: ...
    # Windows.Foundation.Collections.IMap`2<System.String,System.String> Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource::get_AdditionalRequestHeaders()
    @_property
    @typing.final
    def additional_request_headers(self) -> typing.MutableMapping[str, str]: ...

class LocalMapTileDataSource_Static(MapTileDataSource_Static):
    pass

class LocalMapTileDataSource(MapTileDataSource, metaclass=LocalMapTileDataSource_Static):
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], uri_format_string: str) -> Self: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource::add_UriRequested(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource,Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs>)
    def add_uri_requested(self, handler: windows_foundation.TypedEventHandler[LocalMapTileDataSource, MapTileUriRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource::remove_UriRequested(Windows.Foundation.EventRegistrationToken)
    def remove_uri_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.String Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource::get_UriFormatString()
    @_property
    def uri_format_string(self) -> str: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource::put_UriFormatString(System.String)
    @uri_format_string.setter
    @typing.final
    def uri_format_string(self, value: str) -> None: ...

@typing.final
class MapActualCameraChangedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.UI.Xaml.Controls.Maps.MapCamera Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs::get_Camera()
    @_property
    def camera(self) -> MapCamera: ...
    # Windows.UI.Xaml.Controls.Maps.MapCameraChangeReason Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs::get_ChangeReason()
    @_property
    def change_reason(self) -> MapCameraChangeReason: ...

@typing.final
class MapActualCameraChangingEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.UI.Xaml.Controls.Maps.MapCamera Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs::get_Camera()
    @_property
    def camera(self) -> MapCamera: ...
    # Windows.UI.Xaml.Controls.Maps.MapCameraChangeReason Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs::get_ChangeReason()
    @_property
    def change_reason(self) -> MapCameraChangeReason: ...

@typing.final
class MapBillboard_Static(MapElement_Static):
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapBillboard::get_CollisionBehaviorDesiredProperty()
    @_property
    def collision_behavior_desired_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapBillboard::get_LocationProperty()
    @_property
    def location_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapBillboard::get_NormalizedAnchorPointProperty()
    @_property
    def normalized_anchor_point_property(cls) -> windows_ui_xaml.DependencyProperty: ...

@typing.final
class MapBillboard(MapElement, metaclass=MapBillboard_Static):
    def __new__(cls: typing.Type[Self], camera: MapCamera) -> Self: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Controls.Maps.MapBillboard::get_NormalizedAnchorPoint()
    @_property
    def normalized_anchor_point(self) -> windows_foundation.Point: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapBillboard::put_NormalizedAnchorPoint(Windows.Foundation.Point)
    @normalized_anchor_point.setter
    def normalized_anchor_point(self, value: typing.Union[windows_foundation.Point, typing.Tuple[winrt.system.Single, winrt.system.Single]]) -> None: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapBillboard::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapBillboard::put_Location(Windows.Devices.Geolocation.Geopoint)
    @location.setter
    def location(self, value: windows_devices_geolocation.Geopoint) -> None: ...
    # Windows.Storage.Streams.IRandomAccessStreamReference Windows.UI.Xaml.Controls.Maps.MapBillboard::get_Image()
    @_property
    def image(self) -> windows_storage_streams.IRandomAccessStreamReference: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapBillboard::put_Image(Windows.Storage.Streams.IRandomAccessStreamReference)
    @image.setter
    def image(self, value: windows_storage_streams.IRandomAccessStreamReference) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapElementCollisionBehavior Windows.UI.Xaml.Controls.Maps.MapBillboard::get_CollisionBehaviorDesired()
    @_property
    def collision_behavior_desired(self) -> MapElementCollisionBehavior: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapBillboard::put_CollisionBehaviorDesired(Windows.UI.Xaml.Controls.Maps.MapElementCollisionBehavior)
    @collision_behavior_desired.setter
    def collision_behavior_desired(self, value: MapElementCollisionBehavior) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapCamera Windows.UI.Xaml.Controls.Maps.MapBillboard::get_ReferenceCamera()
    @_property
    def reference_camera(self) -> MapCamera: ...

@typing.final
class MapCamera(windows_ui_xaml.DependencyObject):
    @typing.overload
    def __new__(cls: typing.Type[Self], location: windows_devices_geolocation.Geopoint) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], location: windows_devices_geolocation.Geopoint, heading_in_degrees: winrt.system.Double) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], location: windows_devices_geolocation.Geopoint, heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], location: windows_devices_geolocation.Geopoint, heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, roll_in_degrees: winrt.system.Double, field_of_view_in_degrees: winrt.system.Double) -> Self: ...
    # System.Double Windows.UI.Xaml.Controls.Maps.MapCamera::get_Roll()
    @_property
    def roll(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapCamera::put_Roll(System.Double)
    @roll.setter
    def roll(self, value: winrt.system.Double) -> None: ...
    # System.Double Windows.UI.Xaml.Controls.Maps.MapCamera::get_Pitch()
    @_property
    def pitch(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapCamera::put_Pitch(System.Double)
    @pitch.setter
    def pitch(self, value: winrt.system.Double) -> None: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapCamera::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapCamera::put_Location(Windows.Devices.Geolocation.Geopoint)
    @location.setter
    def location(self, value: windows_devices_geolocation.Geopoint) -> None: ...
    # System.Double Windows.UI.Xaml.Controls.Maps.MapCamera::get_Heading()
    @_property
    def heading(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapCamera::put_Heading(System.Double)
    @heading.setter
    def heading(self, value: winrt.system.Double) -> None: ...
    # System.Double Windows.UI.Xaml.Controls.Maps.MapCamera::get_FieldOfView()
    @_property
    def field_of_view(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapCamera::put_FieldOfView(System.Double)
    @field_of_view.setter
    def field_of_view(self, value: winrt.system.Double) -> None: ...

@typing.final
class MapContextRequestedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Xaml.Controls.Maps.MapElement> Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs::get_MapElements()
    @_property
    def map_elements(self) -> typing.Sequence[MapElement]: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapControl_Static(windows_ui_xaml_controls.Control_Static):
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapControl::GetLocation(Windows.UI.Xaml.DependencyObject)
    def get_location(cls, element: windows_ui_xaml.DependencyObject, /) -> windows_devices_geolocation.Geopoint: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Controls.Maps.MapControl::GetNormalizedAnchorPoint(Windows.UI.Xaml.DependencyObject)
    def get_normalized_anchor_point(cls, element: windows_ui_xaml.DependencyObject, /) -> windows_foundation.Point: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::SetLocation(Windows.UI.Xaml.DependencyObject,Windows.Devices.Geolocation.Geopoint)
    def set_location(cls, element: windows_ui_xaml.DependencyObject, value: windows_devices_geolocation.Geopoint, /) -> None: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::SetNormalizedAnchorPoint(Windows.UI.Xaml.DependencyObject,Windows.Foundation.Point)
    def set_normalized_anchor_point(cls, element: windows_ui_xaml.DependencyObject, value: typing.Union[windows_foundation.Point, typing.Tuple[winrt.system.Single, winrt.system.Single]], /) -> None: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_CenterProperty()
    @_property
    def center_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_ZoomLevelProperty()
    @_property
    def zoom_level_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_ChildrenProperty()
    @_property
    def children_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_ColorSchemeProperty()
    @_property
    def color_scheme_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_DesiredPitchProperty()
    @_property
    def desired_pitch_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_HeadingProperty()
    @_property
    def heading_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_LandmarksVisibleProperty()
    @_property
    def landmarks_visible_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_LoadingStatusProperty()
    @_property
    def loading_status_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_LocationProperty()
    @_property
    def location_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_MapElementsProperty()
    @_property
    def map_elements_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_MapServiceTokenProperty()
    @_property
    def map_service_token_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_NormalizedAnchorPointProperty()
    @_property
    def normalized_anchor_point_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_PedestrianFeaturesVisibleProperty()
    @_property
    def pedestrian_features_visible_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_PitchProperty()
    @_property
    def pitch_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_RoutesProperty()
    @_property
    def routes_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_StyleProperty()
    @_property  # type: ignore[misc]
    def style_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_TileSourcesProperty()
    @_property
    def tile_sources_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_TrafficFlowVisibleProperty()
    @_property
    def traffic_flow_visible_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_TransformOriginProperty()
    @_property
    def transform_origin_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_WatermarkModeProperty()
    @_property
    def watermark_mode_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_BusinessLandmarksVisibleProperty()
    @_property
    def business_landmarks_visible_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_Is3DSupportedProperty()
    @_property
    def is_3d_supported_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_IsStreetsideSupportedProperty()
    @_property
    def is_streetside_supported_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_PanInteractionModeProperty()
    @_property
    def pan_interaction_mode_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_RotateInteractionModeProperty()
    @_property
    def rotate_interaction_mode_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_SceneProperty()
    @_property
    def scene_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_TiltInteractionModeProperty()
    @_property
    def tilt_interaction_mode_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_TransitFeaturesVisibleProperty()
    @_property
    def transit_features_visible_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_ZoomInteractionModeProperty()
    @_property
    def zoom_interaction_mode_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_BusinessLandmarksEnabledProperty()
    @_property
    def business_landmarks_enabled_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_TransitFeaturesEnabledProperty()
    @_property
    def transit_features_enabled_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_MapProjectionProperty()
    @_property
    def map_projection_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_StyleSheetProperty()
    @_property
    def style_sheet_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_ViewPaddingProperty()
    @_property
    def view_padding_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_LayersProperty()
    @_property
    def layers_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_RegionProperty()
    @_property
    def region_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_CanTiltUpProperty()
    @_property
    def can_tilt_up_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_CanZoomInProperty()
    @_property
    def can_zoom_in_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_CanZoomOutProperty()
    @_property
    def can_zoom_out_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapControl::get_CanTiltDownProperty()
    @_property
    def can_tilt_down_property(cls) -> windows_ui_xaml.DependencyProperty: ...

@typing.final
class MapControl(windows_ui_xaml_controls.Control, metaclass=MapControl_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Xaml.Controls.Maps.MapElement> Windows.UI.Xaml.Controls.Maps.MapControl::FindMapElementsAtOffset(Windows.Foundation.Point)
    def find_map_elements_at_offset(self, offset: typing.Union[windows_foundation.Point, typing.Tuple[winrt.system.Single, winrt.system.Single]], /) -> typing.Sequence[MapElement]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Xaml.Controls.Maps.MapElement> Windows.UI.Xaml.Controls.Maps.MapControl::FindMapElementsAtOffset(Windows.Foundation.Point,System.Double)
    def find_map_elements_at_offset_with_radius(self, offset: typing.Union[windows_foundation.Point, typing.Tuple[winrt.system.Single, winrt.system.Single]], radius: winrt.system.Double, /) -> typing.Sequence[MapElement]: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::GetLocationFromOffset(Windows.Foundation.Point,Windows.Devices.Geolocation.Geopoint&)
    def get_location_from_offset(self, offset: typing.Union[windows_foundation.Point, typing.Tuple[winrt.system.Single, winrt.system.Single]], /) -> windows_devices_geolocation.Geopoint: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::GetLocationFromOffset(Windows.Foundation.Point,Windows.Devices.Geolocation.AltitudeReferenceSystem,Windows.Devices.Geolocation.Geopoint&)
    def get_location_from_offset_with_reference_system(self, offset: typing.Union[windows_foundation.Point, typing.Tuple[winrt.system.Single, winrt.system.Single]], desired_reference_system: windows_devices_geolocation.AltitudeReferenceSystem, /) -> windows_devices_geolocation.Geopoint: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::GetOffsetFromLocation(Windows.Devices.Geolocation.Geopoint,Windows.Foundation.Point&)
    def get_offset_from_location(self, location: windows_devices_geolocation.Geopoint, /) -> windows_foundation.Point: ...
    # Windows.Devices.Geolocation.Geopath Windows.UI.Xaml.Controls.Maps.MapControl::GetVisibleRegion(Windows.UI.Xaml.Controls.Maps.MapVisibleRegionKind)
    def get_visible_region(self, region: MapVisibleRegionKind, /) -> windows_devices_geolocation.Geopath: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::IsLocationInView(Windows.Devices.Geolocation.Geopoint,System.Boolean&)
    def is_location_in_view(self, location: windows_devices_geolocation.Geopoint, /) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::StartContinuousPan(System.Double,System.Double)
    def start_continuous_pan(self, horizontal_pixels_per_second: winrt.system.Double, vertical_pixels_per_second: winrt.system.Double, /) -> None: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::StartContinuousRotate(System.Double)
    def start_continuous_rotate(self, rate_in_degrees_per_second: winrt.system.Double, /) -> None: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::StartContinuousTilt(System.Double)
    def start_continuous_tilt(self, rate_in_degrees_per_second: winrt.system.Double, /) -> None: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::StartContinuousZoom(System.Double)
    def start_continuous_zoom(self, rate_of_change_per_second: winrt.system.Double, /) -> None: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::StopContinuousPan()
    def stop_continuous_pan(self) -> None: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::StopContinuousRotate()
    def stop_continuous_rotate(self) -> None: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::StopContinuousTilt()
    def stop_continuous_tilt(self) -> None: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::StopContinuousZoom()
    def stop_continuous_zoom(self) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapControl::TryGetLocationFromOffset(Windows.Foundation.Point,Windows.Devices.Geolocation.Geopoint&)
    def try_get_location_from_offset(self, offset: typing.Union[windows_foundation.Point, typing.Tuple[winrt.system.Single, winrt.system.Single]], /) -> typing.Tuple[bool, windows_devices_geolocation.Geopoint]: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapControl::TryGetLocationFromOffset(Windows.Foundation.Point,Windows.Devices.Geolocation.AltitudeReferenceSystem,Windows.Devices.Geolocation.Geopoint&)
    def try_get_location_from_offset_with_reference_system(self, offset: typing.Union[windows_foundation.Point, typing.Tuple[winrt.system.Single, winrt.system.Single]], desired_reference_system: windows_devices_geolocation.AltitudeReferenceSystem, /) -> typing.Tuple[bool, windows_devices_geolocation.Geopoint]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Xaml.Controls.Maps.MapControl::TryPanAsync(System.Double,System.Double)
    def try_pan_async(self, horizontal_pixels: winrt.system.Double, vertical_pixels: winrt.system.Double, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Xaml.Controls.Maps.MapControl::TryPanToAsync(Windows.Devices.Geolocation.Geopoint)
    def try_pan_to_async(self, location: windows_devices_geolocation.Geopoint, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Xaml.Controls.Maps.MapControl::TryRotateAsync(System.Double)
    def try_rotate_async(self, degrees: winrt.system.Double, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Xaml.Controls.Maps.MapControl::TryRotateToAsync(System.Double)
    def try_rotate_to_async(self, angle_in_degrees: winrt.system.Double, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Xaml.Controls.Maps.MapControl::TrySetSceneAsync(Windows.UI.Xaml.Controls.Maps.MapScene)
    def try_set_scene_async(self, scene: MapScene, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Xaml.Controls.Maps.MapControl::TrySetSceneAsync(Windows.UI.Xaml.Controls.Maps.MapScene,Windows.UI.Xaml.Controls.Maps.MapAnimationKind)
    def try_set_scene_with_animation_async(self, scene: MapScene, animation_kind: MapAnimationKind, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Xaml.Controls.Maps.MapControl::TrySetViewBoundsAsync(Windows.Devices.Geolocation.GeoboundingBox,Windows.Foundation.IReference`1<Windows.UI.Xaml.Thickness>,Windows.UI.Xaml.Controls.Maps.MapAnimationKind)
    def try_set_view_bounds_async(self, bounds: windows_devices_geolocation.GeoboundingBox, margin: typing.Optional[windows_ui_xaml.Thickness], animation: MapAnimationKind, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Xaml.Controls.Maps.MapControl::TrySetViewAsync(Windows.Devices.Geolocation.Geopoint,Windows.Foundation.IReference`1<System.Double>)
    def try_set_view_with_center_and_zoom_async(self, center: windows_devices_geolocation.Geopoint, zoom_level: typing.Optional[winrt.system.Double], /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Xaml.Controls.Maps.MapControl::TrySetViewAsync(Windows.Devices.Geolocation.Geopoint)
    def try_set_view_with_center_async(self, center: windows_devices_geolocation.Geopoint, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Xaml.Controls.Maps.MapControl::TrySetViewAsync(Windows.Devices.Geolocation.Geopoint,Windows.Foundation.IReference`1<System.Double>,Windows.Foundation.IReference`1<System.Double>,Windows.Foundation.IReference`1<System.Double>)
    def try_set_view_with_center_zoom_heading_and_pitch_async(self, center: windows_devices_geolocation.Geopoint, zoom_level: typing.Optional[winrt.system.Double], heading: typing.Optional[winrt.system.Double], desired_pitch: typing.Optional[winrt.system.Double], /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Xaml.Controls.Maps.MapControl::TrySetViewAsync(Windows.Devices.Geolocation.Geopoint,Windows.Foundation.IReference`1<System.Double>,Windows.Foundation.IReference`1<System.Double>,Windows.Foundation.IReference`1<System.Double>,Windows.UI.Xaml.Controls.Maps.MapAnimationKind)
    def try_set_view_with_center_zoom_heading_pitch_and_animation_async(self, center: windows_devices_geolocation.Geopoint, zoom_level: typing.Optional[winrt.system.Double], heading: typing.Optional[winrt.system.Double], desired_pitch: typing.Optional[winrt.system.Double], animation: MapAnimationKind, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Xaml.Controls.Maps.MapControl::TryTiltAsync(System.Double)
    def try_tilt_async(self, degrees: winrt.system.Double, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Xaml.Controls.Maps.MapControl::TryTiltToAsync(System.Double)
    def try_tilt_to_async(self, angle_in_degrees: winrt.system.Double, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Xaml.Controls.Maps.MapControl::TryZoomInAsync()
    def try_zoom_in_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Xaml.Controls.Maps.MapControl::TryZoomOutAsync()
    def try_zoom_out_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Xaml.Controls.Maps.MapControl::TryZoomToAsync(System.Double)
    def try_zoom_to_async(self, zoom_level: winrt.system.Double, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_CenterChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,System.Object>)
    def add_center_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_CenterChanged(Windows.Foundation.EventRegistrationToken)
    def remove_center_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_HeadingChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,System.Object>)
    def add_heading_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_HeadingChanged(Windows.Foundation.EventRegistrationToken)
    def remove_heading_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_LoadingStatusChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,System.Object>)
    def add_loading_status_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_LoadingStatusChanged(Windows.Foundation.EventRegistrationToken)
    def remove_loading_status_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_MapDoubleTapped(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapInputEventArgs>)
    def add_map_double_tapped(self, handler: windows_foundation.TypedEventHandler[MapControl, MapInputEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_MapDoubleTapped(Windows.Foundation.EventRegistrationToken)
    def remove_map_double_tapped(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_MapHolding(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapInputEventArgs>)
    def add_map_holding(self, handler: windows_foundation.TypedEventHandler[MapControl, MapInputEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_MapHolding(Windows.Foundation.EventRegistrationToken)
    def remove_map_holding(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_MapTapped(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapInputEventArgs>)
    def add_map_tapped(self, handler: windows_foundation.TypedEventHandler[MapControl, MapInputEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_MapTapped(Windows.Foundation.EventRegistrationToken)
    def remove_map_tapped(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_PitchChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,System.Object>)
    def add_pitch_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_PitchChanged(Windows.Foundation.EventRegistrationToken)
    def remove_pitch_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_TransformOriginChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,System.Object>)
    def add_transform_origin_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_TransformOriginChanged(Windows.Foundation.EventRegistrationToken)
    def remove_transform_origin_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_ZoomLevelChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,System.Object>)
    def add_zoom_level_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_ZoomLevelChanged(Windows.Foundation.EventRegistrationToken)
    def remove_zoom_level_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_ActualCameraChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs>)
    def add_actual_camera_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, MapActualCameraChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_ActualCameraChanged(Windows.Foundation.EventRegistrationToken)
    def remove_actual_camera_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_ActualCameraChanging(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs>)
    def add_actual_camera_changing(self, handler: windows_foundation.TypedEventHandler[MapControl, MapActualCameraChangingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_ActualCameraChanging(Windows.Foundation.EventRegistrationToken)
    def remove_actual_camera_changing(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_CustomExperienceChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapCustomExperienceChangedEventArgs>)
    def add_custom_experience_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, MapCustomExperienceChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_CustomExperienceChanged(Windows.Foundation.EventRegistrationToken)
    def remove_custom_experience_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_MapElementClick(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs>)
    def add_map_element_click(self, handler: windows_foundation.TypedEventHandler[MapControl, MapElementClickEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_MapElementClick(Windows.Foundation.EventRegistrationToken)
    def remove_map_element_click(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_MapElementPointerEntered(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs>)
    def add_map_element_pointer_entered(self, handler: windows_foundation.TypedEventHandler[MapControl, MapElementPointerEnteredEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_MapElementPointerEntered(Windows.Foundation.EventRegistrationToken)
    def remove_map_element_pointer_entered(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_MapElementPointerExited(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs>)
    def add_map_element_pointer_exited(self, handler: windows_foundation.TypedEventHandler[MapControl, MapElementPointerExitedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_MapElementPointerExited(Windows.Foundation.EventRegistrationToken)
    def remove_map_element_pointer_exited(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_TargetCameraChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs>)
    def add_target_camera_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, MapTargetCameraChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_TargetCameraChanged(Windows.Foundation.EventRegistrationToken)
    def remove_target_camera_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_MapRightTapped(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs>)
    def add_map_right_tapped(self, handler: windows_foundation.TypedEventHandler[MapControl, MapRightTappedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_MapRightTapped(Windows.Foundation.EventRegistrationToken)
    def remove_map_right_tapped(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControl::add_MapContextRequested(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs>)
    def add_map_context_requested(self, handler: windows_foundation.TypedEventHandler[MapControl, MapContextRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::remove_MapContextRequested(Windows.Foundation.EventRegistrationToken)
    def remove_map_context_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.Double Windows.UI.Xaml.Controls.Maps.MapControl::get_ZoomLevel()
    @_property
    def zoom_level(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_ZoomLevel(System.Double)
    @zoom_level.setter
    def zoom_level(self, value: winrt.system.Double) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapWatermarkMode Windows.UI.Xaml.Controls.Maps.MapControl::get_WatermarkMode()
    @_property
    def watermark_mode(self) -> MapWatermarkMode: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_WatermarkMode(Windows.UI.Xaml.Controls.Maps.MapWatermarkMode)
    @watermark_mode.setter
    def watermark_mode(self, value: MapWatermarkMode) -> None: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Controls.Maps.MapControl::get_TransformOrigin()
    @_property
    def transform_origin(self) -> windows_foundation.Point: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_TransformOrigin(Windows.Foundation.Point)
    @transform_origin.setter
    def transform_origin(self, value: typing.Union[windows_foundation.Point, typing.Tuple[winrt.system.Single, winrt.system.Single]]) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapControl::get_TrafficFlowVisible()
    @_property
    def traffic_flow_visible(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_TrafficFlowVisible(System.Boolean)
    @traffic_flow_visible.setter
    def traffic_flow_visible(self, value: bool) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapStyle Windows.UI.Xaml.Controls.Maps.MapControl::get_Style()
    @_property  # type: ignore[override]
    def style(self) -> MapStyle: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_Style(Windows.UI.Xaml.Controls.Maps.MapStyle)
    @style.setter
    def style(self, value: MapStyle) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapControl::get_PedestrianFeaturesVisible()
    @_property
    def pedestrian_features_visible(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_PedestrianFeaturesVisible(System.Boolean)
    @pedestrian_features_visible.setter
    def pedestrian_features_visible(self, value: bool) -> None: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapControl::get_MapServiceToken()
    @_property
    def map_service_token(self) -> str: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_MapServiceToken(System.String)
    @map_service_token.setter
    def map_service_token(self, value: str) -> None: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapControl::get_Center()
    @_property
    def center(self) -> windows_devices_geolocation.Geopoint: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_Center(Windows.Devices.Geolocation.Geopoint)
    @center.setter
    def center(self, value: windows_devices_geolocation.Geopoint) -> None: ...
    # System.Double Windows.UI.Xaml.Controls.Maps.MapControl::get_Heading()
    @_property
    def heading(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_Heading(System.Double)
    @heading.setter
    def heading(self, value: winrt.system.Double) -> None: ...
    # System.Double Windows.UI.Xaml.Controls.Maps.MapControl::get_DesiredPitch()
    @_property
    def desired_pitch(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_DesiredPitch(System.Double)
    @desired_pitch.setter
    def desired_pitch(self, value: winrt.system.Double) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapColorScheme Windows.UI.Xaml.Controls.Maps.MapControl::get_ColorScheme()
    @_property
    def color_scheme(self) -> MapColorScheme: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_ColorScheme(Windows.UI.Xaml.Controls.Maps.MapColorScheme)
    @color_scheme.setter
    def color_scheme(self, value: MapColorScheme) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapControl::get_LandmarksVisible()
    @_property
    def landmarks_visible(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_LandmarksVisible(System.Boolean)
    @landmarks_visible.setter
    def landmarks_visible(self, value: bool) -> None: ...
    # Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.DependencyObject> Windows.UI.Xaml.Controls.Maps.MapControl::get_Children()
    @_property
    def children(self) -> typing.MutableSequence[windows_ui_xaml.DependencyObject]: ...
    # Windows.UI.Xaml.Controls.Maps.MapLoadingStatus Windows.UI.Xaml.Controls.Maps.MapControl::get_LoadingStatus()
    @_property
    def loading_status(self) -> MapLoadingStatus: ...
    # Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.Maps.MapElement> Windows.UI.Xaml.Controls.Maps.MapControl::get_MapElements()
    @_property
    def map_elements(self) -> typing.MutableSequence[MapElement]: ...
    # System.Double Windows.UI.Xaml.Controls.Maps.MapControl::get_MaxZoomLevel()
    @_property
    def max_zoom_level(self) -> winrt.system.Double: ...
    # System.Double Windows.UI.Xaml.Controls.Maps.MapControl::get_MinZoomLevel()
    @_property
    def min_zoom_level(self) -> winrt.system.Double: ...
    # System.Double Windows.UI.Xaml.Controls.Maps.MapControl::get_Pitch()
    @_property
    def pitch(self) -> winrt.system.Double: ...
    # Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.Maps.MapRouteView> Windows.UI.Xaml.Controls.Maps.MapControl::get_Routes()
    @_property
    def routes(self) -> typing.MutableSequence[MapRouteView]: ...
    # Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.Maps.MapTileSource> Windows.UI.Xaml.Controls.Maps.MapControl::get_TileSources()
    @_property
    def tile_sources(self) -> typing.MutableSequence[MapTileSource]: ...
    # Windows.UI.Xaml.Controls.Maps.MapInteractionMode Windows.UI.Xaml.Controls.Maps.MapControl::get_RotateInteractionMode()
    @_property
    def rotate_interaction_mode(self) -> MapInteractionMode: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_RotateInteractionMode(Windows.UI.Xaml.Controls.Maps.MapInteractionMode)
    @rotate_interaction_mode.setter
    def rotate_interaction_mode(self, value: MapInteractionMode) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapInteractionMode Windows.UI.Xaml.Controls.Maps.MapControl::get_ZoomInteractionMode()
    @_property
    def zoom_interaction_mode(self) -> MapInteractionMode: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_ZoomInteractionMode(Windows.UI.Xaml.Controls.Maps.MapInteractionMode)
    @zoom_interaction_mode.setter
    def zoom_interaction_mode(self, value: MapInteractionMode) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapControl::get_TransitFeaturesVisible()
    @_property
    def transit_features_visible(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_TransitFeaturesVisible(System.Boolean)
    @transit_features_visible.setter
    def transit_features_visible(self, value: bool) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapInteractionMode Windows.UI.Xaml.Controls.Maps.MapControl::get_TiltInteractionMode()
    @_property
    def tilt_interaction_mode(self) -> MapInteractionMode: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_TiltInteractionMode(Windows.UI.Xaml.Controls.Maps.MapInteractionMode)
    @tilt_interaction_mode.setter
    def tilt_interaction_mode(self, value: MapInteractionMode) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapScene Windows.UI.Xaml.Controls.Maps.MapControl::get_Scene()
    @_property
    def scene(self) -> MapScene: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_Scene(Windows.UI.Xaml.Controls.Maps.MapScene)
    @scene.setter
    def scene(self, value: MapScene) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapControl::get_BusinessLandmarksVisible()
    @_property
    def business_landmarks_visible(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_BusinessLandmarksVisible(System.Boolean)
    @business_landmarks_visible.setter
    def business_landmarks_visible(self, value: bool) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapPanInteractionMode Windows.UI.Xaml.Controls.Maps.MapControl::get_PanInteractionMode()
    @_property
    def pan_interaction_mode(self) -> MapPanInteractionMode: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_PanInteractionMode(Windows.UI.Xaml.Controls.Maps.MapPanInteractionMode)
    @pan_interaction_mode.setter
    def pan_interaction_mode(self, value: MapPanInteractionMode) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapCustomExperience Windows.UI.Xaml.Controls.Maps.MapControl::get_CustomExperience()
    @_property
    def custom_experience(self) -> MapCustomExperience: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_CustomExperience(Windows.UI.Xaml.Controls.Maps.MapCustomExperience)
    @custom_experience.setter
    def custom_experience(self, value: MapCustomExperience) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapCamera Windows.UI.Xaml.Controls.Maps.MapControl::get_ActualCamera()
    @_property
    def actual_camera(self) -> MapCamera: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapControl::get_Is3DSupported()
    @_property
    def is_3d_supported(self) -> bool: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapControl::get_IsStreetsideSupported()
    @_property
    def is_streetside_supported(self) -> bool: ...
    # Windows.UI.Xaml.Controls.Maps.MapCamera Windows.UI.Xaml.Controls.Maps.MapControl::get_TargetCamera()
    @_property
    def target_camera(self) -> MapCamera: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapControl::get_TransitFeaturesEnabled()
    @_property
    def transit_features_enabled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_TransitFeaturesEnabled(System.Boolean)
    @transit_features_enabled.setter
    def transit_features_enabled(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapControl::get_BusinessLandmarksEnabled()
    @_property
    def business_landmarks_enabled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_BusinessLandmarksEnabled(System.Boolean)
    @business_landmarks_enabled.setter
    def business_landmarks_enabled(self, value: bool) -> None: ...
    # Windows.UI.Xaml.Thickness Windows.UI.Xaml.Controls.Maps.MapControl::get_ViewPadding()
    @_property
    def view_padding(self) -> windows_ui_xaml.Thickness: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_ViewPadding(Windows.UI.Xaml.Thickness)
    @view_padding.setter
    def view_padding(self, value: typing.Union[windows_ui_xaml.Thickness, typing.Tuple[winrt.system.Double, winrt.system.Double, winrt.system.Double, winrt.system.Double]]) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapStyleSheet Windows.UI.Xaml.Controls.Maps.MapControl::get_StyleSheet()
    @_property
    def style_sheet(self) -> MapStyleSheet: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_StyleSheet(Windows.UI.Xaml.Controls.Maps.MapStyleSheet)
    @style_sheet.setter
    def style_sheet(self, value: MapStyleSheet) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapProjection Windows.UI.Xaml.Controls.Maps.MapControl::get_MapProjection()
    @_property
    def map_projection(self) -> MapProjection: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_MapProjection(Windows.UI.Xaml.Controls.Maps.MapProjection)
    @map_projection.setter
    def map_projection(self, value: MapProjection) -> None: ...
    # Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.Maps.MapLayer> Windows.UI.Xaml.Controls.Maps.MapControl::get_Layers()
    @_property
    def layers(self) -> typing.MutableSequence[MapLayer]: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_Layers(Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.Maps.MapLayer>)
    @layers.setter
    def layers(self, value: typing.MutableSequence[MapLayer]) -> None: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapControl::get_Region()
    @_property
    def region(self) -> str: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControl::put_Region(System.String)
    @region.setter
    def region(self, value: str) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapControl::get_CanTiltDown()
    @_property
    def can_tilt_down(self) -> bool: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapControl::get_CanTiltUp()
    @_property
    def can_tilt_up(self) -> bool: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapControl::get_CanZoomIn()
    @_property
    def can_zoom_in(self) -> bool: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapControl::get_CanZoomOut()
    @_property
    def can_zoom_out(self) -> bool: ...

@typing.final
class MapControlBusinessLandmarkClickEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Services.Maps.LocalSearch.LocalLocation> Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkClickEventArgs::get_LocalLocations()
    @_property
    def local_locations(self) -> typing.Sequence[windows_services_maps_localsearch.LocalLocation]: ...

@typing.final
class MapControlBusinessLandmarkPointerEnteredEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Services.Maps.LocalSearch.LocalLocation> Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerEnteredEventArgs::get_LocalLocations()
    @_property
    def local_locations(self) -> typing.Sequence[windows_services_maps_localsearch.LocalLocation]: ...

@typing.final
class MapControlBusinessLandmarkPointerExitedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Services.Maps.LocalSearch.LocalLocation> Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerExitedEventArgs::get_LocalLocations()
    @_property
    def local_locations(self) -> typing.Sequence[windows_services_maps_localsearch.LocalLocation]: ...

@typing.final
class MapControlBusinessLandmarkRightTappedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Services.Maps.LocalSearch.LocalLocation> Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkRightTappedEventArgs::get_LocalLocations()
    @_property
    def local_locations(self) -> typing.Sequence[windows_services_maps_localsearch.LocalLocation]: ...

@typing.final
class MapControlDataHelper_Static(windows_ui_xaml.DependencyObject_Static):
    # Windows.UI.Xaml.Controls.Maps.MapControl Windows.UI.Xaml.Controls.Maps.MapControlDataHelper::CreateMapControl(System.Boolean)
    def create_map_control(cls, raster_render_mode: bool, /) -> MapControl: ...

@typing.final
class MapControlDataHelper(windows_ui_xaml.DependencyObject, metaclass=MapControlDataHelper_Static):
    def __new__(cls: typing.Type[Self], map: MapControl) -> Self: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControlDataHelper::add_BusinessLandmarkClick(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkClickEventArgs>)
    def add_business_landmark_click(self, value: windows_foundation.TypedEventHandler[MapControl, MapControlBusinessLandmarkClickEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControlDataHelper::remove_BusinessLandmarkClick(Windows.Foundation.EventRegistrationToken)
    def remove_business_landmark_click(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControlDataHelper::add_BusinessLandmarkRightTapped(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkRightTappedEventArgs>)
    def add_business_landmark_right_tapped(self, value: windows_foundation.TypedEventHandler[MapControl, MapControlBusinessLandmarkRightTappedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControlDataHelper::remove_BusinessLandmarkRightTapped(Windows.Foundation.EventRegistrationToken)
    def remove_business_landmark_right_tapped(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControlDataHelper::add_TransitFeatureClick(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureClickEventArgs>)
    def add_transit_feature_click(self, value: windows_foundation.TypedEventHandler[MapControl, MapControlTransitFeatureClickEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControlDataHelper::remove_TransitFeatureClick(Windows.Foundation.EventRegistrationToken)
    def remove_transit_feature_click(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControlDataHelper::add_TransitFeatureRightTapped(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureRightTappedEventArgs>)
    def add_transit_feature_right_tapped(self, value: windows_foundation.TypedEventHandler[MapControl, MapControlTransitFeatureRightTappedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControlDataHelper::remove_TransitFeatureRightTapped(Windows.Foundation.EventRegistrationToken)
    def remove_transit_feature_right_tapped(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControlDataHelper::add_BusinessLandmarkPointerEntered(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerEnteredEventArgs>)
    def add_business_landmark_pointer_entered(self, value: windows_foundation.TypedEventHandler[MapControl, MapControlBusinessLandmarkPointerEnteredEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControlDataHelper::remove_BusinessLandmarkPointerEntered(Windows.Foundation.EventRegistrationToken)
    def remove_business_landmark_pointer_entered(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControlDataHelper::add_BusinessLandmarkPointerExited(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerExitedEventArgs>)
    def add_business_landmark_pointer_exited(self, value: windows_foundation.TypedEventHandler[MapControl, MapControlBusinessLandmarkPointerExitedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControlDataHelper::remove_BusinessLandmarkPointerExited(Windows.Foundation.EventRegistrationToken)
    def remove_business_landmark_pointer_exited(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControlDataHelper::add_TransitFeaturePointerEntered(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerEnteredEventArgs>)
    def add_transit_feature_pointer_entered(self, value: windows_foundation.TypedEventHandler[MapControl, MapControlTransitFeaturePointerEnteredEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControlDataHelper::remove_TransitFeaturePointerEntered(Windows.Foundation.EventRegistrationToken)
    def remove_transit_feature_pointer_entered(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapControlDataHelper::add_TransitFeaturePointerExited(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl,Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerExitedEventArgs>)
    def add_transit_feature_pointer_exited(self, value: windows_foundation.TypedEventHandler[MapControl, MapControlTransitFeaturePointerExitedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapControlDataHelper::remove_TransitFeaturePointerExited(Windows.Foundation.EventRegistrationToken)
    def remove_transit_feature_pointer_exited(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...

@typing.final
class MapControlTransitFeatureClickEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureClickEventArgs::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureClickEventArgs::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Object> Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureClickEventArgs::get_TransitProperties()
    @_property
    def transit_properties(self) -> typing.Mapping[str, winrt.system.Object]: ...

@typing.final
class MapControlTransitFeaturePointerEnteredEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerEnteredEventArgs::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerEnteredEventArgs::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Object> Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerEnteredEventArgs::get_TransitProperties()
    @_property
    def transit_properties(self) -> typing.Mapping[str, winrt.system.Object]: ...

@typing.final
class MapControlTransitFeaturePointerExitedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerExitedEventArgs::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerExitedEventArgs::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Object> Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerExitedEventArgs::get_TransitProperties()
    @_property
    def transit_properties(self) -> typing.Mapping[str, winrt.system.Object]: ...

@typing.final
class MapControlTransitFeatureRightTappedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureRightTappedEventArgs::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureRightTappedEventArgs::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Object> Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureRightTappedEventArgs::get_TransitProperties()
    @_property
    def transit_properties(self) -> typing.Mapping[str, winrt.system.Object]: ...

class MapCustomExperience_Static(windows_ui_xaml.DependencyObject_Static):
    pass

class MapCustomExperience(windows_ui_xaml.DependencyObject, metaclass=MapCustomExperience_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class MapCustomExperienceChangedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...

class MapElement_Static(windows_ui_xaml.DependencyObject_Static):
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapElement::get_VisibleProperty()
    @_property
    @typing.final
    def visible_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapElement::get_ZIndexProperty()
    @_property
    @typing.final
    def z_index_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapElement::get_MapTabIndexProperty()
    @_property
    @typing.final
    def map_tab_index_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapElement::get_MapStyleSheetEntryProperty()
    @_property
    @typing.final
    def map_style_sheet_entry_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapElement::get_MapStyleSheetEntryStateProperty()
    @_property
    @typing.final
    def map_style_sheet_entry_state_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapElement::get_TagProperty()
    @_property
    @typing.final
    def tag_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapElement::get_IsEnabledProperty()
    @_property
    @typing.final
    def is_enabled_property(cls) -> windows_ui_xaml.DependencyProperty: ...

class MapElement(windows_ui_xaml.DependencyObject, metaclass=MapElement_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Int32 Windows.UI.Xaml.Controls.Maps.MapElement::get_ZIndex()
    @_property
    def z_index(self) -> winrt.system.Int32: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElement::put_ZIndex(System.Int32)
    @z_index.setter
    @typing.final
    def z_index(self, value: winrt.system.Int32) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapElement::get_Visible()
    @_property
    def visible(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElement::put_Visible(System.Boolean)
    @visible.setter
    @typing.final
    def visible(self, value: bool) -> None: ...
    # System.Int32 Windows.UI.Xaml.Controls.Maps.MapElement::get_MapTabIndex()
    @_property
    def map_tab_index(self) -> winrt.system.Int32: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElement::put_MapTabIndex(System.Int32)
    @map_tab_index.setter
    @typing.final
    def map_tab_index(self, value: winrt.system.Int32) -> None: ...
    # System.Object Windows.UI.Xaml.Controls.Maps.MapElement::get_Tag()
    @_property
    def tag(self) -> winrt.system.Object: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElement::put_Tag(System.Object)
    @tag.setter
    @typing.final
    def tag(self, value: winrt.system.Object) -> None: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapElement::get_MapStyleSheetEntryState()
    @_property
    def map_style_sheet_entry_state(self) -> str: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElement::put_MapStyleSheetEntryState(System.String)
    @map_style_sheet_entry_state.setter
    @typing.final
    def map_style_sheet_entry_state(self, value: str) -> None: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapElement::get_MapStyleSheetEntry()
    @_property
    def map_style_sheet_entry(self) -> str: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElement::put_MapStyleSheetEntry(System.String)
    @map_style_sheet_entry.setter
    @typing.final
    def map_style_sheet_entry(self, value: str) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapElement::get_IsEnabled()
    @_property
    def is_enabled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElement::put_IsEnabled(System.Boolean)
    @is_enabled.setter
    @typing.final
    def is_enabled(self, value: bool) -> None: ...

@typing.final
class MapElement3D_Static(MapElement_Static):
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapElement3D::get_HeadingProperty()
    @_property
    def heading_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapElement3D::get_LocationProperty()
    @_property
    def location_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapElement3D::get_PitchProperty()
    @_property
    def pitch_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapElement3D::get_RollProperty()
    @_property
    def roll_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapElement3D::get_ScaleProperty()
    @_property
    def scale_property(cls) -> windows_ui_xaml.DependencyProperty: ...

@typing.final
class MapElement3D(MapElement, metaclass=MapElement3D_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Numerics.Vector3 Windows.UI.Xaml.Controls.Maps.MapElement3D::get_Scale()
    @_property
    def scale(self) -> windows_foundation_numerics.Vector3: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElement3D::put_Scale(Windows.Foundation.Numerics.Vector3)
    @scale.setter
    def scale(self, value: typing.Union[windows_foundation_numerics.Vector3, typing.Tuple[winrt.system.Single, winrt.system.Single, winrt.system.Single]]) -> None: ...
    # System.Double Windows.UI.Xaml.Controls.Maps.MapElement3D::get_Roll()
    @_property
    def roll(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElement3D::put_Roll(System.Double)
    @roll.setter
    def roll(self, value: winrt.system.Double) -> None: ...
    # System.Double Windows.UI.Xaml.Controls.Maps.MapElement3D::get_Pitch()
    @_property
    def pitch(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElement3D::put_Pitch(System.Double)
    @pitch.setter
    def pitch(self, value: winrt.system.Double) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapModel3D Windows.UI.Xaml.Controls.Maps.MapElement3D::get_Model()
    @_property
    def model(self) -> MapModel3D: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElement3D::put_Model(Windows.UI.Xaml.Controls.Maps.MapModel3D)
    @model.setter
    def model(self, value: MapModel3D) -> None: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapElement3D::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElement3D::put_Location(Windows.Devices.Geolocation.Geopoint)
    @location.setter
    def location(self, value: windows_devices_geolocation.Geopoint) -> None: ...
    # System.Double Windows.UI.Xaml.Controls.Maps.MapElement3D::get_Heading()
    @_property
    def heading(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElement3D::put_Heading(System.Double)
    @heading.setter
    def heading(self, value: winrt.system.Double) -> None: ...

@typing.final
class MapElementClickEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.Maps.MapElement> Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs::get_MapElements()
    @_property
    def map_elements(self) -> typing.MutableSequence[MapElement]: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapElementPointerEnteredEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # Windows.UI.Xaml.Controls.Maps.MapElement Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs::get_MapElement()
    @_property
    def map_element(self) -> MapElement: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapElementPointerExitedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # Windows.UI.Xaml.Controls.Maps.MapElement Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs::get_MapElement()
    @_property
    def map_element(self) -> MapElement: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapElementsLayer_Static(MapLayer_Static):
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapElementsLayer::get_MapElementsProperty()
    @_property
    def map_elements_property(cls) -> windows_ui_xaml.DependencyProperty: ...

@typing.final
class MapElementsLayer(MapLayer, metaclass=MapElementsLayer_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapElementsLayer::add_MapContextRequested(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapElementsLayer,Windows.UI.Xaml.Controls.Maps.MapElementsLayerContextRequestedEventArgs>)
    def add_map_context_requested(self, handler: windows_foundation.TypedEventHandler[MapElementsLayer, MapElementsLayerContextRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElementsLayer::remove_MapContextRequested(Windows.Foundation.EventRegistrationToken)
    def remove_map_context_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapElementsLayer::add_MapElementClick(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapElementsLayer,Windows.UI.Xaml.Controls.Maps.MapElementsLayerClickEventArgs>)
    def add_map_element_click(self, handler: windows_foundation.TypedEventHandler[MapElementsLayer, MapElementsLayerClickEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElementsLayer::remove_MapElementClick(Windows.Foundation.EventRegistrationToken)
    def remove_map_element_click(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapElementsLayer::add_MapElementPointerEntered(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapElementsLayer,Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerEnteredEventArgs>)
    def add_map_element_pointer_entered(self, handler: windows_foundation.TypedEventHandler[MapElementsLayer, MapElementsLayerPointerEnteredEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElementsLayer::remove_MapElementPointerEntered(Windows.Foundation.EventRegistrationToken)
    def remove_map_element_pointer_entered(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapElementsLayer::add_MapElementPointerExited(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapElementsLayer,Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerExitedEventArgs>)
    def add_map_element_pointer_exited(self, handler: windows_foundation.TypedEventHandler[MapElementsLayer, MapElementsLayerPointerExitedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElementsLayer::remove_MapElementPointerExited(Windows.Foundation.EventRegistrationToken)
    def remove_map_element_pointer_exited(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.Maps.MapElement> Windows.UI.Xaml.Controls.Maps.MapElementsLayer::get_MapElements()
    @_property
    def map_elements(self) -> typing.MutableSequence[MapElement]: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapElementsLayer::put_MapElements(Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.Maps.MapElement>)
    @map_elements.setter
    def map_elements(self, value: typing.MutableSequence[MapElement]) -> None: ...

@typing.final
class MapElementsLayerClickEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapElementsLayerClickEventArgs::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.Maps.MapElement> Windows.UI.Xaml.Controls.Maps.MapElementsLayerClickEventArgs::get_MapElements()
    @_property
    def map_elements(self) -> typing.MutableSequence[MapElement]: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Controls.Maps.MapElementsLayerClickEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapElementsLayerContextRequestedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapElementsLayerContextRequestedEventArgs::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Xaml.Controls.Maps.MapElement> Windows.UI.Xaml.Controls.Maps.MapElementsLayerContextRequestedEventArgs::get_MapElements()
    @_property
    def map_elements(self) -> typing.Sequence[MapElement]: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Controls.Maps.MapElementsLayerContextRequestedEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapElementsLayerPointerEnteredEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerEnteredEventArgs::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # Windows.UI.Xaml.Controls.Maps.MapElement Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerEnteredEventArgs::get_MapElement()
    @_property
    def map_element(self) -> MapElement: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerEnteredEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapElementsLayerPointerExitedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerExitedEventArgs::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # Windows.UI.Xaml.Controls.Maps.MapElement Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerExitedEventArgs::get_MapElement()
    @_property
    def map_element(self) -> MapElement: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerExitedEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapIcon_Static(MapElement_Static):
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapIcon::get_LocationProperty()
    @_property
    def location_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapIcon::get_NormalizedAnchorPointProperty()
    @_property
    def normalized_anchor_point_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapIcon::get_TitleProperty()
    @_property
    def title_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapIcon::get_CollisionBehaviorDesiredProperty()
    @_property
    def collision_behavior_desired_property(cls) -> windows_ui_xaml.DependencyProperty: ...

@typing.final
class MapIcon(MapElement, metaclass=MapIcon_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapIcon::get_Title()
    @_property
    def title(self) -> str: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapIcon::put_Title(System.String)
    @title.setter
    def title(self, value: str) -> None: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Controls.Maps.MapIcon::get_NormalizedAnchorPoint()
    @_property
    def normalized_anchor_point(self) -> windows_foundation.Point: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapIcon::put_NormalizedAnchorPoint(Windows.Foundation.Point)
    @normalized_anchor_point.setter
    def normalized_anchor_point(self, value: typing.Union[windows_foundation.Point, typing.Tuple[winrt.system.Single, winrt.system.Single]]) -> None: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapIcon::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapIcon::put_Location(Windows.Devices.Geolocation.Geopoint)
    @location.setter
    def location(self, value: windows_devices_geolocation.Geopoint) -> None: ...
    # Windows.Storage.Streams.IRandomAccessStreamReference Windows.UI.Xaml.Controls.Maps.MapIcon::get_Image()
    @_property
    def image(self) -> windows_storage_streams.IRandomAccessStreamReference: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapIcon::put_Image(Windows.Storage.Streams.IRandomAccessStreamReference)
    @image.setter
    def image(self, value: windows_storage_streams.IRandomAccessStreamReference) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapElementCollisionBehavior Windows.UI.Xaml.Controls.Maps.MapIcon::get_CollisionBehaviorDesired()
    @_property
    def collision_behavior_desired(self) -> MapElementCollisionBehavior: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapIcon::put_CollisionBehaviorDesired(Windows.UI.Xaml.Controls.Maps.MapElementCollisionBehavior)
    @collision_behavior_desired.setter
    def collision_behavior_desired(self, value: MapElementCollisionBehavior) -> None: ...

@typing.final
class MapInputEventArgs(windows_ui_xaml.DependencyObject):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapInputEventArgs::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Controls.Maps.MapInputEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapItemsControl_Static(windows_ui_xaml.DependencyObject_Static):
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapItemsControl::get_ItemTemplateProperty()
    @_property
    def item_template_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapItemsControl::get_ItemsProperty()
    @_property
    def items_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapItemsControl::get_ItemsSourceProperty()
    @_property
    def items_source_property(cls) -> windows_ui_xaml.DependencyProperty: ...

@typing.final
class MapItemsControl(windows_ui_xaml.DependencyObject, metaclass=MapItemsControl_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Object Windows.UI.Xaml.Controls.Maps.MapItemsControl::get_ItemsSource()
    @_property
    def items_source(self) -> winrt.system.Object: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapItemsControl::put_ItemsSource(System.Object)
    @items_source.setter
    def items_source(self, value: winrt.system.Object) -> None: ...
    # Windows.UI.Xaml.DataTemplate Windows.UI.Xaml.Controls.Maps.MapItemsControl::get_ItemTemplate()
    @_property
    def item_template(self) -> windows_ui_xaml.DataTemplate: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapItemsControl::put_ItemTemplate(Windows.UI.Xaml.DataTemplate)
    @item_template.setter
    def item_template(self, value: windows_ui_xaml.DataTemplate) -> None: ...
    # Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.DependencyObject> Windows.UI.Xaml.Controls.Maps.MapItemsControl::get_Items()
    @_property
    def items(self) -> typing.MutableSequence[windows_ui_xaml.DependencyObject]: ...

class MapLayer_Static(windows_ui_xaml.DependencyObject_Static):
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapLayer::get_MapTabIndexProperty()
    @_property
    @typing.final
    def map_tab_index_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapLayer::get_VisibleProperty()
    @_property
    @typing.final
    def visible_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapLayer::get_ZIndexProperty()
    @_property
    @typing.final
    def z_index_property(cls) -> windows_ui_xaml.DependencyProperty: ...

class MapLayer(windows_ui_xaml.DependencyObject, metaclass=MapLayer_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Int32 Windows.UI.Xaml.Controls.Maps.MapLayer::get_ZIndex()
    @_property
    def z_index(self) -> winrt.system.Int32: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapLayer::put_ZIndex(System.Int32)
    @z_index.setter
    @typing.final
    def z_index(self, value: winrt.system.Int32) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapLayer::get_Visible()
    @_property
    def visible(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapLayer::put_Visible(System.Boolean)
    @visible.setter
    @typing.final
    def visible(self, value: bool) -> None: ...
    # System.Int32 Windows.UI.Xaml.Controls.Maps.MapLayer::get_MapTabIndex()
    @_property
    def map_tab_index(self) -> winrt.system.Int32: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapLayer::put_MapTabIndex(System.Int32)
    @map_tab_index.setter
    @typing.final
    def map_tab_index(self, value: winrt.system.Int32) -> None: ...

class MapModel3D_Static(windows_ui_xaml.DependencyObject_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.UI.Xaml.Controls.Maps.MapModel3D> Windows.UI.Xaml.Controls.Maps.MapModel3D::CreateFrom3MFAsync(Windows.Storage.Streams.IRandomAccessStreamReference)
    def create_from_3mf_async(cls, source: windows_storage_streams.IRandomAccessStreamReference, /) -> windows_foundation.IAsyncOperation[MapModel3D]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.UI.Xaml.Controls.Maps.MapModel3D> Windows.UI.Xaml.Controls.Maps.MapModel3D::CreateFrom3MFAsync(Windows.Storage.Streams.IRandomAccessStreamReference,Windows.UI.Xaml.Controls.Maps.MapModel3DShadingOption)
    def create_from_3mf_with_shading_option_async(cls, source: windows_storage_streams.IRandomAccessStreamReference, shading_option: MapModel3DShadingOption, /) -> windows_foundation.IAsyncOperation[MapModel3D]: ...

class MapModel3D(windows_ui_xaml.DependencyObject, metaclass=MapModel3D_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class MapPolygon_Static(MapElement_Static):
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapPolygon::get_PathProperty()
    @_property
    def path_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapPolygon::get_StrokeDashedProperty()
    @_property
    def stroke_dashed_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapPolygon::get_StrokeThicknessProperty()
    @_property
    def stroke_thickness_property(cls) -> windows_ui_xaml.DependencyProperty: ...

@typing.final
class MapPolygon(MapElement, metaclass=MapPolygon_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Double Windows.UI.Xaml.Controls.Maps.MapPolygon::get_StrokeThickness()
    @_property
    def stroke_thickness(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapPolygon::put_StrokeThickness(System.Double)
    @stroke_thickness.setter
    def stroke_thickness(self, value: winrt.system.Double) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapPolygon::get_StrokeDashed()
    @_property
    def stroke_dashed(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapPolygon::put_StrokeDashed(System.Boolean)
    @stroke_dashed.setter
    def stroke_dashed(self, value: bool) -> None: ...
    # Windows.UI.Color Windows.UI.Xaml.Controls.Maps.MapPolygon::get_StrokeColor()
    @_property
    def stroke_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapPolygon::put_StrokeColor(Windows.UI.Color)
    @stroke_color.setter
    def stroke_color(self, value: typing.Union[windows_ui.Color, typing.Tuple[winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8]]) -> None: ...
    # Windows.Devices.Geolocation.Geopath Windows.UI.Xaml.Controls.Maps.MapPolygon::get_Path()
    @_property
    def path(self) -> windows_devices_geolocation.Geopath: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapPolygon::put_Path(Windows.Devices.Geolocation.Geopath)
    @path.setter
    def path(self, value: windows_devices_geolocation.Geopath) -> None: ...
    # Windows.UI.Color Windows.UI.Xaml.Controls.Maps.MapPolygon::get_FillColor()
    @_property
    def fill_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapPolygon::put_FillColor(Windows.UI.Color)
    @fill_color.setter
    def fill_color(self, value: typing.Union[windows_ui.Color, typing.Tuple[winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8]]) -> None: ...
    # Windows.Foundation.Collections.IVector`1<Windows.Devices.Geolocation.Geopath> Windows.UI.Xaml.Controls.Maps.MapPolygon::get_Paths()
    @_property
    def paths(self) -> typing.MutableSequence[windows_devices_geolocation.Geopath]: ...

@typing.final
class MapPolyline_Static(MapElement_Static):
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapPolyline::get_PathProperty()
    @_property
    def path_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapPolyline::get_StrokeDashedProperty()
    @_property
    def stroke_dashed_property(cls) -> windows_ui_xaml.DependencyProperty: ...

@typing.final
class MapPolyline(MapElement, metaclass=MapPolyline_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Double Windows.UI.Xaml.Controls.Maps.MapPolyline::get_StrokeThickness()
    @_property
    def stroke_thickness(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapPolyline::put_StrokeThickness(System.Double)
    @stroke_thickness.setter
    def stroke_thickness(self, value: winrt.system.Double) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapPolyline::get_StrokeDashed()
    @_property
    def stroke_dashed(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapPolyline::put_StrokeDashed(System.Boolean)
    @stroke_dashed.setter
    def stroke_dashed(self, value: bool) -> None: ...
    # Windows.UI.Color Windows.UI.Xaml.Controls.Maps.MapPolyline::get_StrokeColor()
    @_property
    def stroke_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapPolyline::put_StrokeColor(Windows.UI.Color)
    @stroke_color.setter
    def stroke_color(self, value: typing.Union[windows_ui.Color, typing.Tuple[winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8]]) -> None: ...
    # Windows.Devices.Geolocation.Geopath Windows.UI.Xaml.Controls.Maps.MapPolyline::get_Path()
    @_property
    def path(self) -> windows_devices_geolocation.Geopath: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapPolyline::put_Path(Windows.Devices.Geolocation.Geopath)
    @path.setter
    def path(self, value: windows_devices_geolocation.Geopath) -> None: ...

@typing.final
class MapRightTappedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...

class MapRouteView_Static(windows_ui_xaml.DependencyObject_Static):
    pass

class MapRouteView(windows_ui_xaml.DependencyObject, metaclass=MapRouteView_Static):
    def __new__(cls: typing.Type[Self], route: windows_services_maps.MapRoute) -> Self: ...
    # Windows.UI.Color Windows.UI.Xaml.Controls.Maps.MapRouteView::get_RouteColor()
    @_property
    def route_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapRouteView::put_RouteColor(Windows.UI.Color)
    @route_color.setter
    @typing.final
    def route_color(self, value: typing.Union[windows_ui.Color, typing.Tuple[winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8]]) -> None: ...
    # Windows.UI.Color Windows.UI.Xaml.Controls.Maps.MapRouteView::get_OutlineColor()
    @_property
    def outline_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapRouteView::put_OutlineColor(Windows.UI.Color)
    @outline_color.setter
    @typing.final
    def outline_color(self, value: typing.Union[windows_ui.Color, typing.Tuple[winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8, winrt.system.UInt8]]) -> None: ...
    # Windows.Services.Maps.MapRoute Windows.UI.Xaml.Controls.Maps.MapRouteView::get_Route()
    @_property
    @typing.final
    def route(self) -> windows_services_maps.MapRoute: ...

@typing.final
class MapScene_Static(windows_ui_xaml.DependencyObject_Static):
    # Windows.UI.Xaml.Controls.Maps.MapScene Windows.UI.Xaml.Controls.Maps.MapScene::CreateFromBoundingBox(Windows.Devices.Geolocation.GeoboundingBox)
    def create_from_bounding_box(cls, bounds: windows_devices_geolocation.GeoboundingBox, /) -> MapScene: ...
    # Windows.UI.Xaml.Controls.Maps.MapScene Windows.UI.Xaml.Controls.Maps.MapScene::CreateFromBoundingBox(Windows.Devices.Geolocation.GeoboundingBox,System.Double,System.Double)
    def create_from_bounding_box_with_heading_and_pitch(cls, bounds: windows_devices_geolocation.GeoboundingBox, heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, /) -> MapScene: ...
    # Windows.UI.Xaml.Controls.Maps.MapScene Windows.UI.Xaml.Controls.Maps.MapScene::CreateFromCamera(Windows.UI.Xaml.Controls.Maps.MapCamera)
    def create_from_camera(cls, camera: MapCamera, /) -> MapScene: ...
    # Windows.UI.Xaml.Controls.Maps.MapScene Windows.UI.Xaml.Controls.Maps.MapScene::CreateFromLocation(Windows.Devices.Geolocation.Geopoint)
    def create_from_location(cls, location: windows_devices_geolocation.Geopoint, /) -> MapScene: ...
    # Windows.UI.Xaml.Controls.Maps.MapScene Windows.UI.Xaml.Controls.Maps.MapScene::CreateFromLocationAndRadius(Windows.Devices.Geolocation.Geopoint,System.Double)
    def create_from_location_and_radius(cls, location: windows_devices_geolocation.Geopoint, radius_in_meters: winrt.system.Double, /) -> MapScene: ...
    # Windows.UI.Xaml.Controls.Maps.MapScene Windows.UI.Xaml.Controls.Maps.MapScene::CreateFromLocationAndRadius(Windows.Devices.Geolocation.Geopoint,System.Double,System.Double,System.Double)
    def create_from_location_and_radius_with_heading_and_pitch(cls, location: windows_devices_geolocation.Geopoint, radius_in_meters: winrt.system.Double, heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, /) -> MapScene: ...
    # Windows.UI.Xaml.Controls.Maps.MapScene Windows.UI.Xaml.Controls.Maps.MapScene::CreateFromLocation(Windows.Devices.Geolocation.Geopoint,System.Double,System.Double)
    def create_from_location_with_heading_and_pitch(cls, location: windows_devices_geolocation.Geopoint, heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, /) -> MapScene: ...
    # Windows.UI.Xaml.Controls.Maps.MapScene Windows.UI.Xaml.Controls.Maps.MapScene::CreateFromLocations(Windows.Foundation.Collections.IIterable`1<Windows.Devices.Geolocation.Geopoint>)
    def create_from_locations(cls, locations: typing.Iterable[windows_devices_geolocation.Geopoint], /) -> MapScene: ...
    # Windows.UI.Xaml.Controls.Maps.MapScene Windows.UI.Xaml.Controls.Maps.MapScene::CreateFromLocations(Windows.Foundation.Collections.IIterable`1<Windows.Devices.Geolocation.Geopoint>,System.Double,System.Double)
    def create_from_locations_with_heading_and_pitch(cls, locations: typing.Iterable[windows_devices_geolocation.Geopoint], heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, /) -> MapScene: ...

@typing.final
class MapScene(windows_ui_xaml.DependencyObject, metaclass=MapScene_Static):
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Controls.Maps.MapScene::add_TargetCameraChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapScene,Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs>)
    def add_target_camera_changed(self, handler: windows_foundation.TypedEventHandler[MapScene, MapTargetCameraChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapScene::remove_TargetCameraChanged(Windows.Foundation.EventRegistrationToken)
    def remove_target_camera_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapCamera Windows.UI.Xaml.Controls.Maps.MapScene::get_TargetCamera()
    @_property
    def target_camera(self) -> MapCamera: ...

@typing.final
class MapStyleSheet_Static(windows_ui_xaml.DependencyObject_Static):
    # Windows.UI.Xaml.Controls.Maps.MapStyleSheet Windows.UI.Xaml.Controls.Maps.MapStyleSheet::Aerial()
    def aerial(cls) -> MapStyleSheet: ...
    # Windows.UI.Xaml.Controls.Maps.MapStyleSheet Windows.UI.Xaml.Controls.Maps.MapStyleSheet::AerialWithOverlay()
    def aerial_with_overlay(cls) -> MapStyleSheet: ...
    # Windows.UI.Xaml.Controls.Maps.MapStyleSheet Windows.UI.Xaml.Controls.Maps.MapStyleSheet::Combine(Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Controls.Maps.MapStyleSheet>)
    def combine(cls, style_sheets: typing.Iterable[MapStyleSheet], /) -> MapStyleSheet: ...
    # Windows.UI.Xaml.Controls.Maps.MapStyleSheet Windows.UI.Xaml.Controls.Maps.MapStyleSheet::ParseFromJson(System.String)
    def parse_from_json(cls, style_as_json: str, /) -> MapStyleSheet: ...
    # Windows.UI.Xaml.Controls.Maps.MapStyleSheet Windows.UI.Xaml.Controls.Maps.MapStyleSheet::RoadDark()
    def road_dark(cls) -> MapStyleSheet: ...
    # Windows.UI.Xaml.Controls.Maps.MapStyleSheet Windows.UI.Xaml.Controls.Maps.MapStyleSheet::RoadHighContrastDark()
    def road_high_contrast_dark(cls) -> MapStyleSheet: ...
    # Windows.UI.Xaml.Controls.Maps.MapStyleSheet Windows.UI.Xaml.Controls.Maps.MapStyleSheet::RoadHighContrastLight()
    def road_high_contrast_light(cls) -> MapStyleSheet: ...
    # Windows.UI.Xaml.Controls.Maps.MapStyleSheet Windows.UI.Xaml.Controls.Maps.MapStyleSheet::RoadLight()
    def road_light(cls) -> MapStyleSheet: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapStyleSheet::TryParseFromJson(System.String,Windows.UI.Xaml.Controls.Maps.MapStyleSheet&)
    def try_parse_from_json(cls, style_as_json: str, /) -> typing.Tuple[bool, MapStyleSheet]: ...

@typing.final
class MapStyleSheet(windows_ui_xaml.DependencyObject, metaclass=MapStyleSheet_Static):
    pass

@typing.final
class MapStyleSheetEntries_Static(winrt._winrt.IInspectable_Static):
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_AdminDistrict()
    @_property
    def admin_district(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_AdminDistrictCapital()
    @_property
    def admin_district_capital(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Airport()
    @_property
    def airport(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Area()
    @_property
    def area(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_ArterialRoad()
    @_property
    def arterial_road(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Building()
    @_property
    def building(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Business()
    @_property
    def business(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Capital()
    @_property
    def capital(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Cemetery()
    @_property
    def cemetery(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Continent()
    @_property
    def continent(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_ControlledAccessHighway()
    @_property
    def controlled_access_highway(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_CountryRegion()
    @_property
    def country_region(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_CountryRegionCapital()
    @_property
    def country_region_capital(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_District()
    @_property
    def district(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_DrivingRoute()
    @_property
    def driving_route(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Education()
    @_property
    def education(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_EducationBuilding()
    @_property
    def education_building(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_FoodPoint()
    @_property
    def food_point(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Forest()
    @_property
    def forest(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_GolfCourse()
    @_property
    def golf_course(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_HighSpeedRamp()
    @_property
    def high_speed_ramp(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Highway()
    @_property
    def highway(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_IndigenousPeoplesReserve()
    @_property
    def indigenous_peoples_reserve(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Island()
    @_property
    def island(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_MajorRoad()
    @_property
    def major_road(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Medical()
    @_property
    def medical(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_MedicalBuilding()
    @_property
    def medical_building(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Military()
    @_property
    def military(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_NaturalPoint()
    @_property
    def natural_point(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Nautical()
    @_property
    def nautical(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Neighborhood()
    @_property
    def neighborhood(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Park()
    @_property
    def park(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Peak()
    @_property
    def peak(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_PlayingField()
    @_property
    def playing_field(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Point()
    @_property
    def point(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_PointOfInterest()
    @_property
    def point_of_interest(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Political()
    @_property
    def political(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_PopulatedPlace()
    @_property
    def populated_place(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Railway()
    @_property
    def railway(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Ramp()
    @_property
    def ramp(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Reserve()
    @_property
    def reserve(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_River()
    @_property
    def river(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Road()
    @_property
    def road(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_RoadExit()
    @_property
    def road_exit(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_RoadShield()
    @_property
    def road_shield(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_RouteLine()
    @_property
    def route_line(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Runway()
    @_property
    def runway(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Sand()
    @_property
    def sand(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_ShoppingCenter()
    @_property
    def shopping_center(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Stadium()
    @_property
    def stadium(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Street()
    @_property
    def street(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Structure()
    @_property
    def structure(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_TollRoad()
    @_property
    def toll_road(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Trail()
    @_property
    def trail(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Transit()
    @_property
    def transit(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_TransitBuilding()
    @_property
    def transit_building(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Transportation()
    @_property
    def transportation(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_UnpavedStreet()
    @_property
    def unpaved_street(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Vegetation()
    @_property
    def vegetation(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_VolcanicPeak()
    @_property
    def volcanic_peak(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_WalkingRoute()
    @_property
    def walking_route(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_Water()
    @_property
    def water(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_WaterPoint()
    @_property
    def water_point(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries::get_WaterRoute()
    @_property
    def water_route(cls) -> str: ...

@typing.final
class MapStyleSheetEntries(winrt.system.Object, metaclass=MapStyleSheetEntries_Static):
    pass

@typing.final
class MapStyleSheetEntryStates_Static(winrt._winrt.IInspectable_Static):
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntryStates::get_Disabled()
    @_property
    def disabled(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntryStates::get_Hover()
    @_property
    def hover(cls) -> str: ...
    # System.String Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntryStates::get_Selected()
    @_property
    def selected(cls) -> str: ...

@typing.final
class MapStyleSheetEntryStates(winrt.system.Object, metaclass=MapStyleSheetEntryStates_Static):
    pass

@typing.final
class MapTargetCameraChangedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.UI.Xaml.Controls.Maps.MapCamera Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs::get_Camera()
    @_property
    def camera(self) -> MapCamera: ...
    # Windows.UI.Xaml.Controls.Maps.MapCameraChangeReason Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs::get_ChangeReason()
    @_property
    def change_reason(self) -> MapCameraChangeReason: ...

@typing.final
class MapTileBitmapRequest(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestDeferral Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequest::GetDeferral()
    def get_deferral(self) -> MapTileBitmapRequestDeferral: ...
    # Windows.Storage.Streams.IRandomAccessStreamReference Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequest::get_PixelData()
    @_property
    def pixel_data(self) -> windows_storage_streams.IRandomAccessStreamReference: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequest::put_PixelData(Windows.Storage.Streams.IRandomAccessStreamReference)
    @pixel_data.setter
    def pixel_data(self, value: windows_storage_streams.IRandomAccessStreamReference) -> None: ...

@typing.final
class MapTileBitmapRequestDeferral(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestDeferral::Complete()
    def complete(self) -> None: ...

@typing.final
class MapTileBitmapRequestedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequest Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs::get_Request()
    @_property
    def request(self) -> MapTileBitmapRequest: ...
    # System.Int32 Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs::get_X()
    @_property
    def x(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs::get_Y()
    @_property
    def y(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs::get_ZoomLevel()
    @_property
    def zoom_level(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs::get_FrameIndex()
    @_property
    def frame_index(self) -> winrt.system.Int32: ...

class MapTileDataSource_Static(windows_ui_xaml.DependencyObject_Static):
    pass

class MapTileDataSource(windows_ui_xaml.DependencyObject, metaclass=MapTileDataSource_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...

class MapTileSource_Static(windows_ui_xaml.DependencyObject_Static):
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapTileSource::get_AllowOverstretchProperty()
    @_property
    @typing.final
    def allow_overstretch_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapTileSource::get_BoundsProperty()
    @_property
    @typing.final
    def bounds_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapTileSource::get_DataSourceProperty()
    @_property
    @typing.final
    def data_source_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapTileSource::get_IsFadingEnabledProperty()
    @_property
    @typing.final
    def is_fading_enabled_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapTileSource::get_IsRetryEnabledProperty()
    @_property
    @typing.final
    def is_retry_enabled_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapTileSource::get_IsTransparencyEnabledProperty()
    @_property
    @typing.final
    def is_transparency_enabled_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapTileSource::get_LayerProperty()
    @_property
    @typing.final
    def layer_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapTileSource::get_TilePixelSizeProperty()
    @_property
    @typing.final
    def tile_pixel_size_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapTileSource::get_VisibleProperty()
    @_property
    @typing.final
    def visible_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapTileSource::get_ZIndexProperty()
    @_property
    @typing.final
    def z_index_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapTileSource::get_ZoomLevelRangeProperty()
    @_property
    @typing.final
    def zoom_level_range_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapTileSource::get_AnimationStateProperty()
    @_property
    @typing.final
    def animation_state_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapTileSource::get_AutoPlayProperty()
    @_property
    @typing.final
    def auto_play_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapTileSource::get_FrameCountProperty()
    @_property
    @typing.final
    def frame_count_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Controls.Maps.MapTileSource::get_FrameDurationProperty()
    @_property
    @typing.final
    def frame_duration_property(cls) -> windows_ui_xaml.DependencyProperty: ...

class MapTileSource(windows_ui_xaml.DependencyObject, metaclass=MapTileSource_Static):
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], data_source: MapTileDataSource) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], data_source: MapTileDataSource, zoom_level_range: typing.Union[MapZoomLevelRange, typing.Tuple[winrt.system.Double, winrt.system.Double]]) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], data_source: MapTileDataSource, zoom_level_range: typing.Union[MapZoomLevelRange, typing.Tuple[winrt.system.Double, winrt.system.Double]], bounds: windows_devices_geolocation.GeoboundingBox) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], data_source: MapTileDataSource, zoom_level_range: typing.Union[MapZoomLevelRange, typing.Tuple[winrt.system.Double, winrt.system.Double]], bounds: windows_devices_geolocation.GeoboundingBox, tile_size_in_pixels: winrt.system.Int32) -> Self: ...
    @typing.final
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileSource::Pause()
    def pause(self) -> None: ...
    @typing.final
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileSource::Play()
    def play(self) -> None: ...
    @typing.final
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileSource::Stop()
    def stop(self) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapZoomLevelRange Windows.UI.Xaml.Controls.Maps.MapTileSource::get_ZoomLevelRange()
    @_property
    def zoom_level_range(self) -> MapZoomLevelRange: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileSource::put_ZoomLevelRange(Windows.UI.Xaml.Controls.Maps.MapZoomLevelRange)
    @zoom_level_range.setter
    @typing.final
    def zoom_level_range(self, value: typing.Union[MapZoomLevelRange, typing.Tuple[winrt.system.Double, winrt.system.Double]]) -> None: ...
    # System.Int32 Windows.UI.Xaml.Controls.Maps.MapTileSource::get_ZIndex()
    @_property
    def z_index(self) -> winrt.system.Int32: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileSource::put_ZIndex(System.Int32)
    @z_index.setter
    @typing.final
    def z_index(self, value: winrt.system.Int32) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapTileSource::get_Visible()
    @_property
    def visible(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileSource::put_Visible(System.Boolean)
    @visible.setter
    @typing.final
    def visible(self, value: bool) -> None: ...
    # System.Int32 Windows.UI.Xaml.Controls.Maps.MapTileSource::get_TilePixelSize()
    @_property
    def tile_pixel_size(self) -> winrt.system.Int32: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileSource::put_TilePixelSize(System.Int32)
    @tile_pixel_size.setter
    @typing.final
    def tile_pixel_size(self, value: winrt.system.Int32) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapTileLayer Windows.UI.Xaml.Controls.Maps.MapTileSource::get_Layer()
    @_property
    def layer(self) -> MapTileLayer: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileSource::put_Layer(Windows.UI.Xaml.Controls.Maps.MapTileLayer)
    @layer.setter
    @typing.final
    def layer(self, value: MapTileLayer) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapTileSource::get_IsTransparencyEnabled()
    @_property
    def is_transparency_enabled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileSource::put_IsTransparencyEnabled(System.Boolean)
    @is_transparency_enabled.setter
    @typing.final
    def is_transparency_enabled(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapTileSource::get_IsRetryEnabled()
    @_property
    def is_retry_enabled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileSource::put_IsRetryEnabled(System.Boolean)
    @is_retry_enabled.setter
    @typing.final
    def is_retry_enabled(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapTileSource::get_IsFadingEnabled()
    @_property
    def is_fading_enabled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileSource::put_IsFadingEnabled(System.Boolean)
    @is_fading_enabled.setter
    @typing.final
    def is_fading_enabled(self, value: bool) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapTileDataSource Windows.UI.Xaml.Controls.Maps.MapTileSource::get_DataSource()
    @_property
    def data_source(self) -> MapTileDataSource: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileSource::put_DataSource(Windows.UI.Xaml.Controls.Maps.MapTileDataSource)
    @data_source.setter
    @typing.final
    def data_source(self, value: MapTileDataSource) -> None: ...
    # Windows.Devices.Geolocation.GeoboundingBox Windows.UI.Xaml.Controls.Maps.MapTileSource::get_Bounds()
    @_property
    def bounds(self) -> windows_devices_geolocation.GeoboundingBox: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileSource::put_Bounds(Windows.Devices.Geolocation.GeoboundingBox)
    @bounds.setter
    @typing.final
    def bounds(self, value: windows_devices_geolocation.GeoboundingBox) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapTileSource::get_AllowOverstretch()
    @_property
    def allow_overstretch(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileSource::put_AllowOverstretch(System.Boolean)
    @allow_overstretch.setter
    @typing.final
    def allow_overstretch(self, value: bool) -> None: ...
    # Windows.Foundation.TimeSpan Windows.UI.Xaml.Controls.Maps.MapTileSource::get_FrameDuration()
    @_property
    def frame_duration(self) -> datetime.timedelta: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileSource::put_FrameDuration(Windows.Foundation.TimeSpan)
    @frame_duration.setter
    @typing.final
    def frame_duration(self, value: datetime.timedelta) -> None: ...
    # System.Int32 Windows.UI.Xaml.Controls.Maps.MapTileSource::get_FrameCount()
    @_property
    def frame_count(self) -> winrt.system.Int32: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileSource::put_FrameCount(System.Int32)
    @frame_count.setter
    @typing.final
    def frame_count(self, value: winrt.system.Int32) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.MapTileSource::get_AutoPlay()
    @_property
    def auto_play(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileSource::put_AutoPlay(System.Boolean)
    @auto_play.setter
    @typing.final
    def auto_play(self, value: bool) -> None: ...
    # Windows.UI.Xaml.Controls.Maps.MapTileAnimationState Windows.UI.Xaml.Controls.Maps.MapTileSource::get_AnimationState()
    @_property
    @typing.final
    def animation_state(self) -> MapTileAnimationState: ...

@typing.final
class MapTileUriRequest(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.UI.Xaml.Controls.Maps.MapTileUriRequestDeferral Windows.UI.Xaml.Controls.Maps.MapTileUriRequest::GetDeferral()
    def get_deferral(self) -> MapTileUriRequestDeferral: ...
    # Windows.Foundation.Uri Windows.UI.Xaml.Controls.Maps.MapTileUriRequest::get_Uri()
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileUriRequest::put_Uri(Windows.Foundation.Uri)
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...

@typing.final
class MapTileUriRequestDeferral(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.MapTileUriRequestDeferral::Complete()
    def complete(self) -> None: ...

@typing.final
class MapTileUriRequestedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.UI.Xaml.Controls.Maps.MapTileUriRequest Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs::get_Request()
    @_property
    def request(self) -> MapTileUriRequest: ...
    # System.Int32 Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs::get_X()
    @_property
    def x(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs::get_Y()
    @_property
    def y(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs::get_ZoomLevel()
    @_property
    def zoom_level(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs::get_FrameIndex()
    @_property
    def frame_index(self) -> winrt.system.Int32: ...

@typing.final
class StreetsideExperience(MapCustomExperience):
    @typing.overload
    def __new__(cls: typing.Type[Self], panorama: StreetsidePanorama) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], panorama: StreetsidePanorama, heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, field_of_view_in_degrees: winrt.system.Double) -> Self: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.StreetsideExperience::get_ZoomButtonsVisible()
    @_property
    def zoom_buttons_visible(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.StreetsideExperience::put_ZoomButtonsVisible(System.Boolean)
    @zoom_buttons_visible.setter
    def zoom_buttons_visible(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.StreetsideExperience::get_StreetLabelsVisible()
    @_property
    def street_labels_visible(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.StreetsideExperience::put_StreetLabelsVisible(System.Boolean)
    @street_labels_visible.setter
    def street_labels_visible(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.StreetsideExperience::get_OverviewMapVisible()
    @_property
    def overview_map_visible(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.StreetsideExperience::put_OverviewMapVisible(System.Boolean)
    @overview_map_visible.setter
    def overview_map_visible(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.StreetsideExperience::get_ExitButtonVisible()
    @_property
    def exit_button_visible(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.StreetsideExperience::put_ExitButtonVisible(System.Boolean)
    @exit_button_visible.setter
    def exit_button_visible(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.StreetsideExperience::get_CursorVisible()
    @_property
    def cursor_visible(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.StreetsideExperience::put_CursorVisible(System.Boolean)
    @cursor_visible.setter
    def cursor_visible(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Xaml.Controls.Maps.StreetsideExperience::get_AddressTextVisible()
    @_property
    def address_text_visible(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Controls.Maps.StreetsideExperience::put_AddressTextVisible(System.Boolean)
    @address_text_visible.setter
    def address_text_visible(self, value: bool) -> None: ...

@typing.final
class StreetsidePanorama_Static(windows_ui_xaml.DependencyObject_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.UI.Xaml.Controls.Maps.StreetsidePanorama> Windows.UI.Xaml.Controls.Maps.StreetsidePanorama::FindNearbyAsync(Windows.Devices.Geolocation.Geopoint,System.Double)
    def find_nearby_with_location_and_radius_async(cls, location: windows_devices_geolocation.Geopoint, radius_in_meters: winrt.system.Double, /) -> windows_foundation.IAsyncOperation[StreetsidePanorama]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.UI.Xaml.Controls.Maps.StreetsidePanorama> Windows.UI.Xaml.Controls.Maps.StreetsidePanorama::FindNearbyAsync(Windows.Devices.Geolocation.Geopoint)
    def find_nearby_with_location_async(cls, location: windows_devices_geolocation.Geopoint, /) -> windows_foundation.IAsyncOperation[StreetsidePanorama]: ...

@typing.final
class StreetsidePanorama(windows_ui_xaml.DependencyObject, metaclass=StreetsidePanorama_Static):
    # Windows.Devices.Geolocation.Geopoint Windows.UI.Xaml.Controls.Maps.StreetsidePanorama::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...

