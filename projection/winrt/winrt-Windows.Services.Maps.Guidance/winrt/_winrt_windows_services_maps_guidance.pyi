# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.devices.geolocation as windows_devices_geolocation
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.services.maps as windows_services_maps
import winrt.windows.ui as windows_ui

from winrt.windows.services.maps.guidance import GuidanceAudioMeasurementSystem, GuidanceAudioNotificationKind, GuidanceAudioNotifications, GuidanceLaneMarkers, GuidanceManeuverKind, GuidanceMode

Self = typing.TypeVar('Self')

@typing.final
class GuidanceAudioNotificationRequestedEventArgs(winrt.system.Object):
    # Windows.Foundation.Collections.IVectorView`1<System.String> Windows.Services.Maps.Guidance.GuidanceAudioNotificationRequestedEventArgs::get_AudioFilePaths()
    @_property
    def audio_file_paths(self) -> typing.Sequence[str]: ...
    # Windows.Services.Maps.Guidance.GuidanceAudioNotificationKind Windows.Services.Maps.Guidance.GuidanceAudioNotificationRequestedEventArgs::get_AudioNotification()
    @_property
    def audio_notification(self) -> GuidanceAudioNotificationKind: ...
    # System.String Windows.Services.Maps.Guidance.GuidanceAudioNotificationRequestedEventArgs::get_AudioText()
    @_property
    def audio_text(self) -> str: ...

@typing.final
class GuidanceLaneInfo(winrt.system.Object):
    # System.Boolean Windows.Services.Maps.Guidance.GuidanceLaneInfo::get_IsOnRoute()
    @_property
    def is_on_route(self) -> bool: ...
    # Windows.Services.Maps.Guidance.GuidanceLaneMarkers Windows.Services.Maps.Guidance.GuidanceLaneInfo::get_LaneMarkers()
    @_property
    def lane_markers(self) -> GuidanceLaneMarkers: ...

@typing.final
class GuidanceManeuver(winrt.system.Object):
    # System.String Windows.Services.Maps.Guidance.GuidanceManeuver::get_DepartureRoadName()
    @_property
    def departure_road_name(self) -> str: ...
    # System.String Windows.Services.Maps.Guidance.GuidanceManeuver::get_DepartureShortRoadName()
    @_property
    def departure_short_road_name(self) -> str: ...
    # System.Int32 Windows.Services.Maps.Guidance.GuidanceManeuver::get_DistanceFromPreviousManeuver()
    @_property
    def distance_from_previous_maneuver(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.Services.Maps.Guidance.GuidanceManeuver::get_DistanceFromRouteStart()
    @_property
    def distance_from_route_start(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.Services.Maps.Guidance.GuidanceManeuver::get_EndAngle()
    @_property
    def end_angle(self) -> winrt.system.Int32: ...
    # System.String Windows.Services.Maps.Guidance.GuidanceManeuver::get_InstructionText()
    @_property
    def instruction_text(self) -> str: ...
    # Windows.Services.Maps.Guidance.GuidanceManeuverKind Windows.Services.Maps.Guidance.GuidanceManeuver::get_Kind()
    @_property
    def kind(self) -> GuidanceManeuverKind: ...
    # System.String Windows.Services.Maps.Guidance.GuidanceManeuver::get_NextRoadName()
    @_property
    def next_road_name(self) -> str: ...
    # System.String Windows.Services.Maps.Guidance.GuidanceManeuver::get_NextShortRoadName()
    @_property
    def next_short_road_name(self) -> str: ...
    # Windows.Services.Maps.Guidance.GuidanceRoadSignpost Windows.Services.Maps.Guidance.GuidanceManeuver::get_RoadSignpost()
    @_property
    def road_signpost(self) -> GuidanceRoadSignpost: ...
    # System.Int32 Windows.Services.Maps.Guidance.GuidanceManeuver::get_StartAngle()
    @_property
    def start_angle(self) -> winrt.system.Int32: ...
    # Windows.Devices.Geolocation.Geopoint Windows.Services.Maps.Guidance.GuidanceManeuver::get_StartLocation()
    @_property
    def start_location(self) -> windows_devices_geolocation.Geopoint: ...

@typing.final
class GuidanceMapMatchedCoordinate(winrt.system.Object):
    # System.Double Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate::get_CurrentHeading()
    @_property
    def current_heading(self) -> winrt.system.Double: ...
    # System.Double Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate::get_CurrentSpeed()
    @_property
    def current_speed(self) -> winrt.system.Double: ...
    # System.Boolean Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate::get_IsOnStreet()
    @_property
    def is_on_street(self) -> bool: ...
    # Windows.Devices.Geolocation.Geopoint Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate::get_Location()
    @_property
    def location(self) -> windows_devices_geolocation.Geopoint: ...
    # Windows.Services.Maps.Guidance.GuidanceRoadSegment Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate::get_Road()
    @_property
    def road(self) -> GuidanceRoadSegment: ...

@typing.final
class GuidanceNavigator_Static(winrt._winrt.IInspectable_Static):
    # Windows.Services.Maps.Guidance.GuidanceNavigator Windows.Services.Maps.Guidance.GuidanceNavigator::GetCurrent()
    def get_current(cls) -> GuidanceNavigator: ...
    # System.Boolean Windows.Services.Maps.Guidance.GuidanceNavigator::get_UseAppProvidedVoice()
    @_property
    def use_app_provided_voice(cls) -> bool: ...

@typing.final
class GuidanceNavigator(winrt.system.Object, metaclass=GuidanceNavigator_Static):
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::Pause()
    def pause(self) -> None: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::RepeatLastAudioNotification()
    def repeat_last_audio_notification(self) -> None: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::Resume()
    def resume(self) -> None: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::SetGuidanceVoice(System.Int32,System.String)
    def set_guidance_voice(self, voice_id: winrt.system.Int32, voice_folder: str, /) -> None: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::StartNavigating(Windows.Services.Maps.Guidance.GuidanceRoute)
    def start_navigating(self, route: GuidanceRoute, /) -> None: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::StartSimulating(Windows.Services.Maps.Guidance.GuidanceRoute,System.Int32)
    def start_simulating(self, route: GuidanceRoute, speed_in_meters_per_second: winrt.system.Int32, /) -> None: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::StartTracking()
    def start_tracking(self) -> None: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::Stop()
    def stop(self) -> None: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::UpdateUserLocation(Windows.Devices.Geolocation.Geocoordinate)
    def update_user_location(self, user_location: windows_devices_geolocation.Geocoordinate, /) -> None: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::UpdateUserLocation(Windows.Devices.Geolocation.Geocoordinate,Windows.Devices.Geolocation.BasicGeoposition)
    def update_user_location_with_position_override(self, user_location: windows_devices_geolocation.Geocoordinate, position_override: typing.Union[windows_devices_geolocation.BasicGeoposition, typing.Tuple[winrt.system.Double, winrt.system.Double, winrt.system.Double]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Services.Maps.Guidance.GuidanceNavigator::add_DestinationReached(Windows.Foundation.TypedEventHandler`2<Windows.Services.Maps.Guidance.GuidanceNavigator,System.Object>)
    def add_destination_reached(self, handler: windows_foundation.TypedEventHandler[GuidanceNavigator, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::remove_DestinationReached(Windows.Foundation.EventRegistrationToken)
    def remove_destination_reached(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Services.Maps.Guidance.GuidanceNavigator::add_GuidanceUpdated(Windows.Foundation.TypedEventHandler`2<Windows.Services.Maps.Guidance.GuidanceNavigator,Windows.Services.Maps.Guidance.GuidanceUpdatedEventArgs>)
    def add_guidance_updated(self, handler: windows_foundation.TypedEventHandler[GuidanceNavigator, GuidanceUpdatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::remove_GuidanceUpdated(Windows.Foundation.EventRegistrationToken)
    def remove_guidance_updated(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Services.Maps.Guidance.GuidanceNavigator::add_RerouteFailed(Windows.Foundation.TypedEventHandler`2<Windows.Services.Maps.Guidance.GuidanceNavigator,System.Object>)
    def add_reroute_failed(self, handler: windows_foundation.TypedEventHandler[GuidanceNavigator, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::remove_RerouteFailed(Windows.Foundation.EventRegistrationToken)
    def remove_reroute_failed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Services.Maps.Guidance.GuidanceNavigator::add_Rerouted(Windows.Foundation.TypedEventHandler`2<Windows.Services.Maps.Guidance.GuidanceNavigator,Windows.Services.Maps.Guidance.GuidanceReroutedEventArgs>)
    def add_rerouted(self, handler: windows_foundation.TypedEventHandler[GuidanceNavigator, GuidanceReroutedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::remove_Rerouted(Windows.Foundation.EventRegistrationToken)
    def remove_rerouted(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Services.Maps.Guidance.GuidanceNavigator::add_Rerouting(Windows.Foundation.TypedEventHandler`2<Windows.Services.Maps.Guidance.GuidanceNavigator,System.Object>)
    def add_rerouting(self, handler: windows_foundation.TypedEventHandler[GuidanceNavigator, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::remove_Rerouting(Windows.Foundation.EventRegistrationToken)
    def remove_rerouting(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Services.Maps.Guidance.GuidanceNavigator::add_UserLocationLost(Windows.Foundation.TypedEventHandler`2<Windows.Services.Maps.Guidance.GuidanceNavigator,System.Object>)
    def add_user_location_lost(self, handler: windows_foundation.TypedEventHandler[GuidanceNavigator, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::remove_UserLocationLost(Windows.Foundation.EventRegistrationToken)
    def remove_user_location_lost(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Services.Maps.Guidance.GuidanceNavigator::add_UserLocationRestored(Windows.Foundation.TypedEventHandler`2<Windows.Services.Maps.Guidance.GuidanceNavigator,System.Object>)
    def add_user_location_restored(self, handler: windows_foundation.TypedEventHandler[GuidanceNavigator, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::remove_UserLocationRestored(Windows.Foundation.EventRegistrationToken)
    def remove_user_location_restored(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Services.Maps.Guidance.GuidanceNavigator::add_AudioNotificationRequested(Windows.Foundation.TypedEventHandler`2<Windows.Services.Maps.Guidance.GuidanceNavigator,Windows.Services.Maps.Guidance.GuidanceAudioNotificationRequestedEventArgs>)
    def add_audio_notification_requested(self, value: windows_foundation.TypedEventHandler[GuidanceNavigator, GuidanceAudioNotificationRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::remove_AudioNotificationRequested(Windows.Foundation.EventRegistrationToken)
    def remove_audio_notification_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Services.Maps.Guidance.GuidanceAudioNotifications Windows.Services.Maps.Guidance.GuidanceNavigator::get_AudioNotifications()
    @_property
    def audio_notifications(self) -> GuidanceAudioNotifications: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::put_AudioNotifications(Windows.Services.Maps.Guidance.GuidanceAudioNotifications)
    @audio_notifications.setter
    def audio_notifications(self, value: GuidanceAudioNotifications) -> None: ...
    # Windows.Services.Maps.Guidance.GuidanceAudioMeasurementSystem Windows.Services.Maps.Guidance.GuidanceNavigator::get_AudioMeasurementSystem()
    @_property
    def audio_measurement_system(self) -> GuidanceAudioMeasurementSystem: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::put_AudioMeasurementSystem(Windows.Services.Maps.Guidance.GuidanceAudioMeasurementSystem)
    @audio_measurement_system.setter
    def audio_measurement_system(self, value: GuidanceAudioMeasurementSystem) -> None: ...
    # System.Boolean Windows.Services.Maps.Guidance.GuidanceNavigator::get_IsGuidanceAudioMuted()
    @_property
    def is_guidance_audio_muted(self) -> bool: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceNavigator::put_IsGuidanceAudioMuted(System.Boolean)
    @is_guidance_audio_muted.setter
    def is_guidance_audio_muted(self, value: bool) -> None: ...

@typing.final
class GuidanceReroutedEventArgs(winrt.system.Object):
    # Windows.Services.Maps.Guidance.GuidanceRoute Windows.Services.Maps.Guidance.GuidanceReroutedEventArgs::get_Route()
    @_property
    def route(self) -> GuidanceRoute: ...

@typing.final
class GuidanceRoadSegment(winrt.system.Object):
    # System.String Windows.Services.Maps.Guidance.GuidanceRoadSegment::get_Id()
    @_property
    def id(self) -> str: ...
    # System.Boolean Windows.Services.Maps.Guidance.GuidanceRoadSegment::get_IsHighway()
    @_property
    def is_highway(self) -> bool: ...
    # System.Boolean Windows.Services.Maps.Guidance.GuidanceRoadSegment::get_IsTollRoad()
    @_property
    def is_toll_road(self) -> bool: ...
    # System.Boolean Windows.Services.Maps.Guidance.GuidanceRoadSegment::get_IsTunnel()
    @_property
    def is_tunnel(self) -> bool: ...
    # Windows.Devices.Geolocation.Geopath Windows.Services.Maps.Guidance.GuidanceRoadSegment::get_Path()
    @_property
    def path(self) -> windows_devices_geolocation.Geopath: ...
    # System.String Windows.Services.Maps.Guidance.GuidanceRoadSegment::get_RoadName()
    @_property
    def road_name(self) -> str: ...
    # System.String Windows.Services.Maps.Guidance.GuidanceRoadSegment::get_ShortRoadName()
    @_property
    def short_road_name(self) -> str: ...
    # System.Double Windows.Services.Maps.Guidance.GuidanceRoadSegment::get_SpeedLimit()
    @_property
    def speed_limit(self) -> winrt.system.Double: ...
    # Windows.Foundation.TimeSpan Windows.Services.Maps.Guidance.GuidanceRoadSegment::get_TravelTime()
    @_property
    def travel_time(self) -> datetime.timedelta: ...
    # System.Boolean Windows.Services.Maps.Guidance.GuidanceRoadSegment::get_IsScenic()
    @_property
    def is_scenic(self) -> bool: ...

@typing.final
class GuidanceRoadSignpost(winrt.system.Object):
    # Windows.UI.Color Windows.Services.Maps.Guidance.GuidanceRoadSignpost::get_BackgroundColor()
    @_property
    def background_color(self) -> windows_ui.Color: ...
    # System.String Windows.Services.Maps.Guidance.GuidanceRoadSignpost::get_Exit()
    @_property
    def exit(self) -> str: ...
    # Windows.Foundation.Collections.IVectorView`1<System.String> Windows.Services.Maps.Guidance.GuidanceRoadSignpost::get_ExitDirections()
    @_property
    def exit_directions(self) -> typing.Sequence[str]: ...
    # System.String Windows.Services.Maps.Guidance.GuidanceRoadSignpost::get_ExitNumber()
    @_property
    def exit_number(self) -> str: ...
    # Windows.UI.Color Windows.Services.Maps.Guidance.GuidanceRoadSignpost::get_ForegroundColor()
    @_property
    def foreground_color(self) -> windows_ui.Color: ...

@typing.final
class GuidanceRoute_Static(winrt._winrt.IInspectable_Static):
    # System.Boolean Windows.Services.Maps.Guidance.GuidanceRoute::CanCreateFromMapRoute(Windows.Services.Maps.MapRoute)
    def can_create_from_map_route(cls, map_route: windows_services_maps.MapRoute, /) -> bool: ...
    # Windows.Services.Maps.Guidance.GuidanceRoute Windows.Services.Maps.Guidance.GuidanceRoute::TryCreateFromMapRoute(Windows.Services.Maps.MapRoute)
    def try_create_from_map_route(cls, map_route: windows_services_maps.MapRoute, /) -> typing.Optional[GuidanceRoute]: ...

@typing.final
class GuidanceRoute(winrt.system.Object, metaclass=GuidanceRoute_Static):
    # Windows.Services.Maps.MapRoute Windows.Services.Maps.Guidance.GuidanceRoute::ConvertToMapRoute()
    def convert_to_map_route(self) -> windows_services_maps.MapRoute: ...
    # Windows.Devices.Geolocation.GeoboundingBox Windows.Services.Maps.Guidance.GuidanceRoute::get_BoundingBox()
    @_property
    def bounding_box(self) -> windows_devices_geolocation.GeoboundingBox: ...
    # System.Int32 Windows.Services.Maps.Guidance.GuidanceRoute::get_Distance()
    @_property
    def distance(self) -> winrt.system.Int32: ...
    # Windows.Foundation.TimeSpan Windows.Services.Maps.Guidance.GuidanceRoute::get_Duration()
    @_property
    def duration(self) -> datetime.timedelta: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Services.Maps.Guidance.GuidanceManeuver> Windows.Services.Maps.Guidance.GuidanceRoute::get_Maneuvers()
    @_property
    def maneuvers(self) -> typing.Sequence[GuidanceManeuver]: ...
    # Windows.Devices.Geolocation.Geopath Windows.Services.Maps.Guidance.GuidanceRoute::get_Path()
    @_property
    def path(self) -> windows_devices_geolocation.Geopath: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Services.Maps.Guidance.GuidanceRoadSegment> Windows.Services.Maps.Guidance.GuidanceRoute::get_RoadSegments()
    @_property
    def road_segments(self) -> typing.Sequence[GuidanceRoadSegment]: ...

@typing.final
class GuidanceTelemetryCollector_Static(winrt._winrt.IInspectable_Static):
    # Windows.Services.Maps.Guidance.GuidanceTelemetryCollector Windows.Services.Maps.Guidance.GuidanceTelemetryCollector::GetCurrent()
    def get_current(cls) -> GuidanceTelemetryCollector: ...

@typing.final
class GuidanceTelemetryCollector(winrt.system.Object, metaclass=GuidanceTelemetryCollector_Static):
    # System.Void Windows.Services.Maps.Guidance.GuidanceTelemetryCollector::ClearLocalData()
    def clear_local_data(self) -> None: ...
    # System.Int32 Windows.Services.Maps.Guidance.GuidanceTelemetryCollector::get_UploadFrequency()
    @_property
    def upload_frequency(self) -> winrt.system.Int32: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceTelemetryCollector::put_UploadFrequency(System.Int32)
    @upload_frequency.setter
    def upload_frequency(self, value: winrt.system.Int32) -> None: ...
    # System.Double Windows.Services.Maps.Guidance.GuidanceTelemetryCollector::get_SpeedTrigger()
    @_property
    def speed_trigger(self) -> winrt.system.Double: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceTelemetryCollector::put_SpeedTrigger(System.Double)
    @speed_trigger.setter
    def speed_trigger(self, value: winrt.system.Double) -> None: ...
    # System.Boolean Windows.Services.Maps.Guidance.GuidanceTelemetryCollector::get_Enabled()
    @_property
    def enabled(self) -> bool: ...
    # System.Void Windows.Services.Maps.Guidance.GuidanceTelemetryCollector::put_Enabled(System.Boolean)
    @enabled.setter
    def enabled(self, value: bool) -> None: ...

@typing.final
class GuidanceUpdatedEventArgs(winrt.system.Object):
    # Windows.Services.Maps.Guidance.GuidanceManeuver Windows.Services.Maps.Guidance.GuidanceUpdatedEventArgs::get_AfterNextManeuver()
    @_property
    def after_next_maneuver(self) -> GuidanceManeuver: ...
    # System.Int32 Windows.Services.Maps.Guidance.GuidanceUpdatedEventArgs::get_AfterNextManeuverDistance()
    @_property
    def after_next_maneuver_distance(self) -> winrt.system.Int32: ...
    # Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate Windows.Services.Maps.Guidance.GuidanceUpdatedEventArgs::get_CurrentLocation()
    @_property
    def current_location(self) -> GuidanceMapMatchedCoordinate: ...
    # System.Int32 Windows.Services.Maps.Guidance.GuidanceUpdatedEventArgs::get_DistanceToDestination()
    @_property
    def distance_to_destination(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.Services.Maps.Guidance.GuidanceUpdatedEventArgs::get_ElapsedDistance()
    @_property
    def elapsed_distance(self) -> winrt.system.Int32: ...
    # Windows.Foundation.TimeSpan Windows.Services.Maps.Guidance.GuidanceUpdatedEventArgs::get_ElapsedTime()
    @_property
    def elapsed_time(self) -> datetime.timedelta: ...
    # System.Boolean Windows.Services.Maps.Guidance.GuidanceUpdatedEventArgs::get_IsNewManeuver()
    @_property
    def is_new_maneuver(self) -> bool: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Services.Maps.Guidance.GuidanceLaneInfo> Windows.Services.Maps.Guidance.GuidanceUpdatedEventArgs::get_LaneInfo()
    @_property
    def lane_info(self) -> typing.Sequence[GuidanceLaneInfo]: ...
    # Windows.Services.Maps.Guidance.GuidanceMode Windows.Services.Maps.Guidance.GuidanceUpdatedEventArgs::get_Mode()
    @_property
    def mode(self) -> GuidanceMode: ...
    # Windows.Services.Maps.Guidance.GuidanceManeuver Windows.Services.Maps.Guidance.GuidanceUpdatedEventArgs::get_NextManeuver()
    @_property
    def next_maneuver(self) -> GuidanceManeuver: ...
    # System.Int32 Windows.Services.Maps.Guidance.GuidanceUpdatedEventArgs::get_NextManeuverDistance()
    @_property
    def next_maneuver_distance(self) -> winrt.system.Int32: ...
    # System.String Windows.Services.Maps.Guidance.GuidanceUpdatedEventArgs::get_RoadName()
    @_property
    def road_name(self) -> str: ...
    # Windows.Services.Maps.Guidance.GuidanceRoute Windows.Services.Maps.Guidance.GuidanceUpdatedEventArgs::get_Route()
    @_property
    def route(self) -> GuidanceRoute: ...
    # Windows.Foundation.TimeSpan Windows.Services.Maps.Guidance.GuidanceUpdatedEventArgs::get_TimeToDestination()
    @_property
    def time_to_destination(self) -> datetime.timedelta: ...

