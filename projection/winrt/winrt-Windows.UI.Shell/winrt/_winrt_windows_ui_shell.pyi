# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.core as windows_applicationmodel_core
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.graphics.imaging as windows_graphics_imaging
import winrt.windows.storage.streams as windows_storage_streams
import winrt.windows.ui as windows_ui
import winrt.windows.ui.startscreen as windows_ui_startscreen

from winrt.windows.ui.shell import SecurityAppKind, SecurityAppState, SecurityAppSubstatus, ShareWindowCommand

Self = typing.TypeVar('Self')

@typing.final
class AdaptiveCardBuilder_Static(winrt._winrt.IInspectable_Static):
    # Windows.UI.Shell.IAdaptiveCard Windows.UI.Shell.AdaptiveCardBuilder::CreateAdaptiveCardFromJson(System.String)
    def create_adaptive_card_from_json(cls, value: str, /) -> IAdaptiveCard: ...

@typing.final
class AdaptiveCardBuilder(winrt.system.Object, metaclass=AdaptiveCardBuilder_Static):
    pass

@typing.final
class FocusSession(winrt.system.Object):
    # System.Void Windows.UI.Shell.FocusSession::End()
    def end(self) -> None: ...
    # System.String Windows.UI.Shell.FocusSession::get_Id()
    @_property
    def id(self) -> str: ...

@typing.final
class FocusSessionManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.UI.Shell.FocusSessionManager Windows.UI.Shell.FocusSessionManager::GetDefault()
    def get_default(cls) -> FocusSessionManager: ...
    # System.Boolean Windows.UI.Shell.FocusSessionManager::get_IsSupported()
    @_property
    def is_supported(cls) -> bool: ...

@typing.final
class FocusSessionManager(winrt.system.Object, metaclass=FocusSessionManager_Static):
    # System.Void Windows.UI.Shell.FocusSessionManager::DeactivateFocus()
    def deactivate_focus(self) -> None: ...
    # Windows.UI.Shell.FocusSession Windows.UI.Shell.FocusSessionManager::GetSession(System.String)
    def get_session(self, id: str, /) -> FocusSession: ...
    # Windows.UI.Shell.FocusSession Windows.UI.Shell.FocusSessionManager::TryStartFocusSession()
    def try_start_focus_session(self) -> typing.Optional[FocusSession]: ...
    # Windows.UI.Shell.FocusSession Windows.UI.Shell.FocusSessionManager::TryStartFocusSession(Windows.Foundation.DateTime)
    def try_start_focus_session2(self, end_time: datetime.datetime, /) -> typing.Optional[FocusSession]: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Shell.FocusSessionManager::add_IsFocusActiveChanged(Windows.Foundation.TypedEventHandler`2<Windows.UI.Shell.FocusSessionManager,System.Object>)
    def add_is_focus_active_changed(self, handler: windows_foundation.TypedEventHandler[FocusSessionManager, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Shell.FocusSessionManager::remove_IsFocusActiveChanged(Windows.Foundation.EventRegistrationToken)
    def remove_is_focus_active_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.Boolean Windows.UI.Shell.FocusSessionManager::get_IsFocusActive()
    @_property
    def is_focus_active(self) -> bool: ...

@typing.final
class SecurityAppManager(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Guid Windows.UI.Shell.SecurityAppManager::Register(Windows.UI.Shell.SecurityAppKind,System.String,Windows.Foundation.Uri,System.Boolean)
    def register(self, kind: SecurityAppKind, display_name: str, details_uri: windows_foundation.Uri, register_per_user: bool, /) -> _uuid.UUID: ...
    # System.Void Windows.UI.Shell.SecurityAppManager::Unregister(Windows.UI.Shell.SecurityAppKind,System.Guid)
    def unregister(self, kind: SecurityAppKind, guid_registration: _uuid.UUID, /) -> None: ...
    # System.Void Windows.UI.Shell.SecurityAppManager::UpdateState(Windows.UI.Shell.SecurityAppKind,System.Guid,Windows.UI.Shell.SecurityAppState,Windows.UI.Shell.SecurityAppSubstatus,Windows.Foundation.Uri)
    def update_state(self, kind: SecurityAppKind, guid_registration: _uuid.UUID, state: SecurityAppState, substatus: SecurityAppSubstatus, details_uri: windows_foundation.Uri, /) -> None: ...

@typing.final
class ShareWindowCommandEventArgs(winrt.system.Object):
    # Windows.UI.Shell.ShareWindowCommand Windows.UI.Shell.ShareWindowCommandEventArgs::get_Command()
    @_property
    def command(self) -> ShareWindowCommand: ...
    # System.Void Windows.UI.Shell.ShareWindowCommandEventArgs::put_Command(Windows.UI.Shell.ShareWindowCommand)
    @command.setter
    def command(self, value: ShareWindowCommand) -> None: ...
    # Windows.UI.WindowId Windows.UI.Shell.ShareWindowCommandEventArgs::get_WindowId()
    @_property
    def window_id(self) -> windows_ui.WindowId: ...

@typing.final
class ShareWindowCommandSource_Static(winrt._winrt.IInspectable_Static):
    # Windows.UI.Shell.ShareWindowCommandSource Windows.UI.Shell.ShareWindowCommandSource::GetForCurrentView()
    def get_for_current_view(cls) -> ShareWindowCommandSource: ...

@typing.final
class ShareWindowCommandSource(winrt.system.Object, metaclass=ShareWindowCommandSource_Static):
    # System.Void Windows.UI.Shell.ShareWindowCommandSource::ReportCommandChanged()
    def report_command_changed(self) -> None: ...
    # System.Void Windows.UI.Shell.ShareWindowCommandSource::Start()
    def start(self) -> None: ...
    # System.Void Windows.UI.Shell.ShareWindowCommandSource::Stop()
    def stop(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Shell.ShareWindowCommandSource::add_CommandInvoked(Windows.Foundation.TypedEventHandler`2<Windows.UI.Shell.ShareWindowCommandSource,Windows.UI.Shell.ShareWindowCommandEventArgs>)
    def add_command_invoked(self, handler: windows_foundation.TypedEventHandler[ShareWindowCommandSource, ShareWindowCommandEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Shell.ShareWindowCommandSource::remove_CommandInvoked(Windows.Foundation.EventRegistrationToken)
    def remove_command_invoked(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Shell.ShareWindowCommandSource::add_CommandRequested(Windows.Foundation.TypedEventHandler`2<Windows.UI.Shell.ShareWindowCommandSource,Windows.UI.Shell.ShareWindowCommandEventArgs>)
    def add_command_requested(self, handler: windows_foundation.TypedEventHandler[ShareWindowCommandSource, ShareWindowCommandEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Shell.ShareWindowCommandSource::remove_CommandRequested(Windows.Foundation.EventRegistrationToken)
    def remove_command_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...

@typing.final
class TaskbarManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.UI.Shell.TaskbarManager Windows.UI.Shell.TaskbarManager::GetDefault()
    def get_default(cls) -> TaskbarManager: ...

@typing.final
class TaskbarManager(winrt.system.Object, metaclass=TaskbarManager_Static):
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Shell.TaskbarManager::IsAppListEntryPinnedAsync(Windows.ApplicationModel.Core.AppListEntry)
    def is_app_list_entry_pinned_async(self, app_list_entry: windows_applicationmodel_core.AppListEntry, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Shell.TaskbarManager::IsCurrentAppPinnedAsync()
    def is_current_app_pinned_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Shell.TaskbarManager::IsSecondaryTilePinnedAsync(System.String)
    def is_secondary_tile_pinned_async(self, tile_id: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Shell.TaskbarManager::RequestPinAppListEntryAsync(Windows.ApplicationModel.Core.AppListEntry)
    def request_pin_app_list_entry_async(self, app_list_entry: windows_applicationmodel_core.AppListEntry, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Shell.TaskbarManager::RequestPinCurrentAppAsync()
    def request_pin_current_app_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Shell.TaskbarManager::RequestPinSecondaryTileAsync(Windows.UI.StartScreen.SecondaryTile)
    def request_pin_secondary_tile_async(self, secondary_tile: windows_ui_startscreen.SecondaryTile, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.UI.Shell.TaskbarManager::TryUnpinSecondaryTileAsync(System.String)
    def try_unpin_secondary_tile_async(self, tile_id: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # System.Boolean Windows.UI.Shell.TaskbarManager::get_IsPinningAllowed()
    @_property
    def is_pinning_allowed(self) -> bool: ...
    # System.Boolean Windows.UI.Shell.TaskbarManager::get_IsSupported()
    @_property
    def is_supported(self) -> bool: ...

@typing.final
class WindowTab(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.UI.Shell.WindowTab::ReportThumbnailAvailable()
    def report_thumbnail_available(self) -> None: ...
    # System.String Windows.UI.Shell.WindowTab::get_TreatAsSecondaryTileId()
    @_property
    def treat_as_secondary_tile_id(self) -> str: ...
    # System.Void Windows.UI.Shell.WindowTab::put_TreatAsSecondaryTileId(System.String)
    @treat_as_secondary_tile_id.setter
    def treat_as_secondary_tile_id(self, value: str) -> None: ...
    # System.String Windows.UI.Shell.WindowTab::get_Title()
    @_property
    def title(self) -> str: ...
    # System.Void Windows.UI.Shell.WindowTab::put_Title(System.String)
    @title.setter
    def title(self, value: str) -> None: ...
    # System.Object Windows.UI.Shell.WindowTab::get_Tag()
    @_property
    def tag(self) -> winrt.system.Object: ...
    # System.Void Windows.UI.Shell.WindowTab::put_Tag(System.Object)
    @tag.setter
    def tag(self, value: winrt.system.Object) -> None: ...
    # Windows.UI.Shell.WindowTabIcon Windows.UI.Shell.WindowTab::get_Icon()
    @_property
    def icon(self) -> WindowTabIcon: ...
    # System.Void Windows.UI.Shell.WindowTab::put_Icon(Windows.UI.Shell.WindowTabIcon)
    @icon.setter
    def icon(self, value: WindowTabIcon) -> None: ...
    # Windows.UI.Shell.WindowTabGroup Windows.UI.Shell.WindowTab::get_Group()
    @_property
    def group(self) -> WindowTabGroup: ...
    # System.Void Windows.UI.Shell.WindowTab::put_Group(Windows.UI.Shell.WindowTabGroup)
    @group.setter
    def group(self, value: WindowTabGroup) -> None: ...

@typing.final
class WindowTabCloseRequestedEventArgs(winrt.system.Object):
    # Windows.UI.Shell.WindowTab Windows.UI.Shell.WindowTabCloseRequestedEventArgs::get_Tab()
    @_property
    def tab(self) -> WindowTab: ...

@typing.final
class WindowTabCollection(winrt.system.Object, winrt._winrt.MutableSequence[WindowTab]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[WindowTab]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> WindowTab: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[WindowTab]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: WindowTab) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[WindowTab]) -> None: ...
    # System.Void Windows.UI.Shell.WindowTabCollection::Append(Windows.UI.Shell.WindowTab)
    def append(self, value: WindowTab, /) -> None: ...
    # System.Void Windows.UI.Shell.WindowTabCollection::Clear()
    def clear(self) -> None: ...
    # Windows.Foundation.Collections.IIterator`1<Windows.UI.Shell.WindowTab> Windows.UI.Shell.WindowTabCollection::First()
    def first(self) -> windows_foundation_collections.IIterator[WindowTab]: ...
    # Windows.UI.Shell.WindowTab Windows.UI.Shell.WindowTabCollection::GetAt(System.UInt32)
    def get_at(self, index: winrt.system.UInt32, /) -> WindowTab: ...
    # System.UInt32 Windows.UI.Shell.WindowTabCollection::GetMany(System.UInt32,Windows.UI.Shell.WindowTab[])
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[WindowTab], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Shell.WindowTab> Windows.UI.Shell.WindowTabCollection::GetView()
    def get_view(self) -> typing.Sequence[WindowTab]: ...
    # System.Boolean Windows.UI.Shell.WindowTabCollection::IndexOf(Windows.UI.Shell.WindowTab,System.UInt32&)
    def index_of(self, value: WindowTab, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    # System.Void Windows.UI.Shell.WindowTabCollection::InsertAt(System.UInt32,Windows.UI.Shell.WindowTab)
    def insert_at(self, index: winrt.system.UInt32, value: WindowTab, /) -> None: ...
    # System.Void Windows.UI.Shell.WindowTabCollection::MoveTab(Windows.UI.Shell.WindowTab,System.UInt32)
    def move_tab(self, tab: WindowTab, index: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.UI.Shell.WindowTabCollection::RemoveAt(System.UInt32)
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.UI.Shell.WindowTabCollection::RemoveAtEnd()
    def remove_at_end(self) -> None: ...
    # System.Void Windows.UI.Shell.WindowTabCollection::ReplaceAll(Windows.UI.Shell.WindowTab[])
    def replace_all(self, items: typing.Union[winrt.system.Array[WindowTab], winrt.system.ReadableBuffer], /) -> None: ...
    # System.Void Windows.UI.Shell.WindowTabCollection::SetAt(System.UInt32,Windows.UI.Shell.WindowTab)
    def set_at(self, index: winrt.system.UInt32, value: WindowTab, /) -> None: ...
    # System.UInt32 Windows.UI.Shell.WindowTabCollection::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class WindowTabGroup(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.UI.Shell.WindowTabGroup::get_Title()
    @_property
    def title(self) -> str: ...
    # System.Void Windows.UI.Shell.WindowTabGroup::put_Title(System.String)
    @title.setter
    def title(self, value: str) -> None: ...
    # Windows.UI.Shell.WindowTabIcon Windows.UI.Shell.WindowTabGroup::get_Icon()
    @_property
    def icon(self) -> WindowTabIcon: ...
    # System.Void Windows.UI.Shell.WindowTabGroup::put_Icon(Windows.UI.Shell.WindowTabIcon)
    @icon.setter
    def icon(self, value: WindowTabIcon) -> None: ...

@typing.final
class WindowTabIcon_Static(winrt._winrt.IInspectable_Static):
    # Windows.UI.Shell.WindowTabIcon Windows.UI.Shell.WindowTabIcon::CreateFromFontGlyph(System.String,System.String)
    def create_from_font_glyph(cls, glyph: str, font_family: str, /) -> WindowTabIcon: ...
    # Windows.UI.Shell.WindowTabIcon Windows.UI.Shell.WindowTabIcon::CreateFromFontGlyph(System.String,System.String,Windows.Foundation.Uri)
    def create_from_font_glyph_with_uri(cls, glyph: str, font_family: str, font_uri: windows_foundation.Uri, /) -> WindowTabIcon: ...
    # Windows.UI.Shell.WindowTabIcon Windows.UI.Shell.WindowTabIcon::CreateFromImage(Windows.Storage.Streams.IRandomAccessStreamReference)
    def create_from_image(cls, image: windows_storage_streams.IRandomAccessStreamReference, /) -> WindowTabIcon: ...

@typing.final
class WindowTabIcon(winrt.system.Object, metaclass=WindowTabIcon_Static):
    pass

@typing.final
class WindowTabManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.UI.Shell.WindowTabManager Windows.UI.Shell.WindowTabManager::GetForWindow(Windows.UI.WindowId)
    def get_for_window(cls, id: typing.Union[windows_ui.WindowId, typing.Tuple[winrt.system.UInt64]], /) -> WindowTabManager: ...
    # System.Boolean Windows.UI.Shell.WindowTabManager::IsSupported()
    def is_supported(cls) -> bool: ...
    # System.Boolean Windows.UI.Shell.WindowTabManager::IsTabTearOutSupported()
    def is_tab_tear_out_supported(cls) -> bool: ...

@typing.final
class WindowTabManager(winrt.system.Object, metaclass=WindowTabManager_Static):
    # System.Void Windows.UI.Shell.WindowTabManager::SetActiveTab(Windows.UI.Shell.WindowTab)
    def set_active_tab(self, tab: WindowTab, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Shell.WindowTabManager::add_TabCloseRequested(Windows.Foundation.TypedEventHandler`2<Windows.UI.Shell.WindowTabManager,Windows.UI.Shell.WindowTabCloseRequestedEventArgs>)
    def add_tab_close_requested(self, handler: windows_foundation.TypedEventHandler[WindowTabManager, WindowTabCloseRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Shell.WindowTabManager::remove_TabCloseRequested(Windows.Foundation.EventRegistrationToken)
    def remove_tab_close_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Shell.WindowTabManager::add_TabSwitchRequested(Windows.Foundation.TypedEventHandler`2<Windows.UI.Shell.WindowTabManager,Windows.UI.Shell.WindowTabSwitchRequestedEventArgs>)
    def add_tab_switch_requested(self, handler: windows_foundation.TypedEventHandler[WindowTabManager, WindowTabSwitchRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Shell.WindowTabManager::remove_TabSwitchRequested(Windows.Foundation.EventRegistrationToken)
    def remove_tab_switch_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Shell.WindowTabManager::add_TabTearOutRequested(Windows.Foundation.TypedEventHandler`2<Windows.UI.Shell.WindowTabManager,Windows.UI.Shell.WindowTabTearOutRequestedEventArgs>)
    def add_tab_tear_out_requested(self, handler: windows_foundation.TypedEventHandler[WindowTabManager, WindowTabTearOutRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Shell.WindowTabManager::remove_TabTearOutRequested(Windows.Foundation.EventRegistrationToken)
    def remove_tab_tear_out_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Shell.WindowTabManager::add_TabThumbnailRequested(Windows.Foundation.TypedEventHandler`2<Windows.UI.Shell.WindowTabManager,Windows.UI.Shell.WindowTabThumbnailRequestedEventArgs>)
    def add_tab_thumbnail_requested(self, handler: windows_foundation.TypedEventHandler[WindowTabManager, WindowTabThumbnailRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Shell.WindowTabManager::remove_TabThumbnailRequested(Windows.Foundation.EventRegistrationToken)
    def remove_tab_thumbnail_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.UI.Shell.WindowTabCollection Windows.UI.Shell.WindowTabManager::get_Tabs()
    @_property
    def tabs(self) -> WindowTabCollection: ...

@typing.final
class WindowTabSwitchRequestedEventArgs(winrt.system.Object):
    # Windows.UI.Shell.WindowTab Windows.UI.Shell.WindowTabSwitchRequestedEventArgs::get_Tab()
    @_property
    def tab(self) -> WindowTab: ...

@typing.final
class WindowTabTearOutRequestedEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Windows.UI.Shell.WindowTabTearOutRequestedEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # System.UInt64 Windows.UI.Shell.WindowTabTearOutRequestedEventArgs::get_WindowId()
    @_property
    def window_id(self) -> winrt.system.UInt64: ...
    # System.Void Windows.UI.Shell.WindowTabTearOutRequestedEventArgs::put_WindowId(System.UInt64)
    @window_id.setter
    def window_id(self, value: winrt.system.UInt64) -> None: ...
    # Windows.UI.Shell.WindowTab Windows.UI.Shell.WindowTabTearOutRequestedEventArgs::get_Tab()
    @_property
    def tab(self) -> WindowTab: ...

@typing.final
class WindowTabThumbnailRequestedEventArgs(winrt.system.Object):
    # Windows.Foundation.Deferral Windows.UI.Shell.WindowTabThumbnailRequestedEventArgs::GetDeferral()
    def get_deferral(self) -> windows_foundation.Deferral: ...
    # Windows.Storage.Streams.IRandomAccessStreamReference Windows.UI.Shell.WindowTabThumbnailRequestedEventArgs::get_Image()
    @_property
    def image(self) -> windows_storage_streams.IRandomAccessStreamReference: ...
    # System.Void Windows.UI.Shell.WindowTabThumbnailRequestedEventArgs::put_Image(Windows.Storage.Streams.IRandomAccessStreamReference)
    @image.setter
    def image(self, value: windows_storage_streams.IRandomAccessStreamReference) -> None: ...
    # System.Boolean Windows.UI.Shell.WindowTabThumbnailRequestedEventArgs::get_IsCompositedOnWindow()
    @_property
    def is_composited_on_window(self) -> bool: ...
    # Windows.Graphics.Imaging.BitmapSize Windows.UI.Shell.WindowTabThumbnailRequestedEventArgs::get_RequestedSize()
    @_property
    def requested_size(self) -> windows_graphics_imaging.BitmapSize: ...
    # Windows.UI.Shell.WindowTab Windows.UI.Shell.WindowTabThumbnailRequestedEventArgs::get_Tab()
    @_property
    def tab(self) -> WindowTab: ...

@typing.final
class _IAdaptiveCard: ...

class IAdaptiveCard(winrt._winrt.IInspectable):
    # System.String Windows.UI.Shell.IAdaptiveCard::ToJson()
    @abstractmethod
    def to_json(self) -> str: ...

@typing.final
class _IAdaptiveCardBuilderStatics: ...

class IAdaptiveCardBuilderStatics(winrt._winrt.IInspectable):
    # Windows.UI.Shell.IAdaptiveCard Windows.UI.Shell.IAdaptiveCardBuilderStatics::CreateAdaptiveCardFromJson(System.String)
    @abstractmethod
    def create_adaptive_card_from_json(self, value: str, /) -> IAdaptiveCard: ...

