// WARNING: Please don't edit this file. It was generated by Python/WinRT v3.2.1

#include "py.Windows.AI.ModelContextProtocol.h"

namespace py::cpp::Windows::AI::ModelContextProtocol
{
    // ----- ModelContextProtocolClientContext class --------------------

    static PyObject* _new_ModelContextProtocolClientContext(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolClientContext>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolClientContext>::type_name);
        return nullptr;
    }

    static void _dealloc_ModelContextProtocolClientContext(py::winrt_wrapper<winrt::Windows::Foundation::IInspectable>* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ModelContextProtocolClientContext_get_OwnerWindowId(py::winrt_wrapper<winrt::Windows::Foundation::IInspectable>* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.AI.ModelContextProtocol.ModelContextProtocolClientContext", L"OwnerWindowId");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.try_as<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolClientContext>().OwnerWindowId();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ModelContextProtocolClientContext_put_OwnerWindowId(py::winrt_wrapper<winrt::Windows::Foundation::IInspectable>* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.AI.ModelContextProtocol.ModelContextProtocolClientContext", L"OwnerWindowId");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::UI::WindowId>(arg);

            {
                auto _gil = release_gil();
                self->obj.try_as<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolClientContext>().OwnerWindowId(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_ModelContextProtocolClientContext(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolClientContext>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ModelContextProtocolClientContext(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolClientContext>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ModelContextProtocolClientContext[] = {
        { "_assign_array_", _assign_array_ModelContextProtocolClientContext, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ModelContextProtocolClientContext), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_ModelContextProtocolClientContext[] = {
        { "owner_window_id", reinterpret_cast<getter>(ModelContextProtocolClientContext_get_OwnerWindowId), reinterpret_cast<setter>(ModelContextProtocolClientContext_put_OwnerWindowId), nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_ModelContextProtocolClientContext[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ModelContextProtocolClientContext) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ModelContextProtocolClientContext) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ModelContextProtocolClientContext) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ModelContextProtocolClientContext) },
        { }};

    static PyType_Spec type_spec_ModelContextProtocolClientContext = {
        "winrt._winrt_windows_ai_modelcontextprotocol.ModelContextProtocolClientContext",
        sizeof(py::winrt_wrapper<winrt::Windows::Foundation::IInspectable>),
        0,
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,
        _type_slots_ModelContextProtocolClientContext};

    static PyGetSetDef getset_ModelContextProtocolClientContext_Static[] = {
        { }};

    static PyMethodDef methods_ModelContextProtocolClientContext_Static[] = {
        { }};

    static PyType_Slot type_slots_ModelContextProtocolClientContext_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ModelContextProtocolClientContext_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_ModelContextProtocolClientContext_Static) },
        { }
    };

    static PyType_Spec type_spec_ModelContextProtocolClientContext_Static = {
        "winrt._winrt_windows_ai_modelcontextprotocol.ModelContextProtocolClientContext_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,
        type_slots_ModelContextProtocolClientContext_Static};

    // ----- ModelContextProtocolServerCatalog class --------------------

    static PyObject* _new_ModelContextProtocolServerCatalog(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolServerCatalog>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolServerCatalog>::type_name);
        return nullptr;
    }

    static void _dealloc_ModelContextProtocolServerCatalog(py::winrt_wrapper<winrt::Windows::Foundation::IInspectable>* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ModelContextProtocolServerCatalog_ActivateServer(py::winrt_wrapper<winrt::Windows::Foundation::IInspectable>* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 2)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.AI.ModelContextProtocol.ModelContextProtocolServerCatalog", L"ActivateServer", 2);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(2);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::guid>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolClientContext>(args, 1);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.try_as<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolServerCatalog>().ActivateServer(param0, param1);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ModelContextProtocolServerCatalog_CreateClientContext(py::winrt_wrapper<winrt::Windows::Foundation::IInspectable>* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.AI.ModelContextProtocol.ModelContextProtocolServerCatalog", L"CreateClientContext", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.try_as<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolServerCatalog>().CreateClientContext();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ModelContextProtocolServerCatalog_GetServerInfos(py::winrt_wrapper<winrt::Windows::Foundation::IInspectable>* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.AI.ModelContextProtocol.ModelContextProtocolServerCatalog", L"GetServerInfos", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.try_as<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolServerCatalog>().GetServerInfos();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_ModelContextProtocolServerCatalog(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolServerCatalog>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ModelContextProtocolServerCatalog(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolServerCatalog>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ModelContextProtocolServerCatalog[] = {
        { "activate_server", reinterpret_cast<PyCFunction>(ModelContextProtocolServerCatalog_ActivateServer), METH_VARARGS, nullptr },
        { "create_client_context", reinterpret_cast<PyCFunction>(ModelContextProtocolServerCatalog_CreateClientContext), METH_VARARGS, nullptr },
        { "get_server_infos", reinterpret_cast<PyCFunction>(ModelContextProtocolServerCatalog_GetServerInfos), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ModelContextProtocolServerCatalog, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ModelContextProtocolServerCatalog), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_ModelContextProtocolServerCatalog[] = {
        { }};

    static PyType_Slot _type_slots_ModelContextProtocolServerCatalog[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ModelContextProtocolServerCatalog) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ModelContextProtocolServerCatalog) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ModelContextProtocolServerCatalog) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ModelContextProtocolServerCatalog) },
        { }};

    static PyType_Spec type_spec_ModelContextProtocolServerCatalog = {
        "winrt._winrt_windows_ai_modelcontextprotocol.ModelContextProtocolServerCatalog",
        sizeof(py::winrt_wrapper<winrt::Windows::Foundation::IInspectable>),
        0,
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,
        _type_slots_ModelContextProtocolServerCatalog};

    static PyGetSetDef getset_ModelContextProtocolServerCatalog_Static[] = {
        { }};

    static PyMethodDef methods_ModelContextProtocolServerCatalog_Static[] = {
        { }};

    static PyType_Slot type_slots_ModelContextProtocolServerCatalog_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ModelContextProtocolServerCatalog_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_ModelContextProtocolServerCatalog_Static) },
        { }
    };

    static PyType_Spec type_spec_ModelContextProtocolServerCatalog_Static = {
        "winrt._winrt_windows_ai_modelcontextprotocol.ModelContextProtocolServerCatalog_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,
        type_slots_ModelContextProtocolServerCatalog_Static};

    // ----- ModelContextProtocolServerInfo class --------------------

    static PyObject* _new_ModelContextProtocolServerInfo(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolServerInfo>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolServerInfo>::type_name);
        return nullptr;
    }

    static void _dealloc_ModelContextProtocolServerInfo(py::winrt_wrapper<winrt::Windows::Foundation::IInspectable>* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ModelContextProtocolServerInfo_GetPackage(py::winrt_wrapper<winrt::Windows::Foundation::IInspectable>* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.AI.ModelContextProtocol.ModelContextProtocolServerInfo", L"GetPackage", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.try_as<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolServerInfo>().GetPackage();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ModelContextProtocolServerInfo_get_Description(py::winrt_wrapper<winrt::Windows::Foundation::IInspectable>* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.AI.ModelContextProtocol.ModelContextProtocolServerInfo", L"Description");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.try_as<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolServerInfo>().Description();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ModelContextProtocolServerInfo_get_Id(py::winrt_wrapper<winrt::Windows::Foundation::IInspectable>* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.AI.ModelContextProtocol.ModelContextProtocolServerInfo", L"Id");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.try_as<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolServerInfo>().Id();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ModelContextProtocolServerInfo_get_Name(py::winrt_wrapper<winrt::Windows::Foundation::IInspectable>* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.AI.ModelContextProtocol.ModelContextProtocolServerInfo", L"Name");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.try_as<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolServerInfo>().Name();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ModelContextProtocolServerInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolServerInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ModelContextProtocolServerInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolServerInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ModelContextProtocolServerInfo[] = {
        { "get_package", reinterpret_cast<PyCFunction>(ModelContextProtocolServerInfo_GetPackage), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ModelContextProtocolServerInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ModelContextProtocolServerInfo), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_ModelContextProtocolServerInfo[] = {
        { "description", reinterpret_cast<getter>(ModelContextProtocolServerInfo_get_Description), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(ModelContextProtocolServerInfo_get_Id), nullptr, nullptr, nullptr },
        { "name", reinterpret_cast<getter>(ModelContextProtocolServerInfo_get_Name), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_ModelContextProtocolServerInfo[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ModelContextProtocolServerInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ModelContextProtocolServerInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ModelContextProtocolServerInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ModelContextProtocolServerInfo) },
        { }};

    static PyType_Spec type_spec_ModelContextProtocolServerInfo = {
        "winrt._winrt_windows_ai_modelcontextprotocol.ModelContextProtocolServerInfo",
        sizeof(py::winrt_wrapper<winrt::Windows::Foundation::IInspectable>),
        0,
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,
        _type_slots_ModelContextProtocolServerInfo};

    static PyGetSetDef getset_ModelContextProtocolServerInfo_Static[] = {
        { }};

    static PyMethodDef methods_ModelContextProtocolServerInfo_Static[] = {
        { }};

    static PyType_Slot type_slots_ModelContextProtocolServerInfo_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ModelContextProtocolServerInfo_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_ModelContextProtocolServerInfo_Static) },
        { }
    };

    static PyType_Spec type_spec_ModelContextProtocolServerInfo_Static = {
        "winrt._winrt_windows_ai_modelcontextprotocol.ModelContextProtocolServerInfo_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,
        type_slots_ModelContextProtocolServerInfo_Static};

    // ----- IModelContextProtocolServer interface --------------------

    #if PY_VERSION_HEX < 0x030A0000
    static PyObject* _new_IModelContextProtocolServer(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::AI::ModelContextProtocol::IModelContextProtocolServer>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::AI::ModelContextProtocol::IModelContextProtocolServer>::type_name);
        return nullptr;
    }
    #endif

    static void _dealloc_IModelContextProtocolServer(py::wrapper::Windows::AI::ModelContextProtocol::IModelContextProtocolServer* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IModelContextProtocolServer_Close(py::wrapper::Windows::AI::ModelContextProtocol::IModelContextProtocolServer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Foundation.IClosable", L"Close", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                {
                    auto _gil = release_gil();
                    self->obj.Close();
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IModelContextProtocolServer_GetCommandArguments(py::wrapper::Windows::AI::ModelContextProtocol::IModelContextProtocolServer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_GET_SIZE(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.AI.ModelContextProtocol.IModelContextProtocolServer", L"GetCommandArguments", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.GetCommandArguments();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IModelContextProtocolServer_get_Command(py::wrapper::Windows::AI::ModelContextProtocol::IModelContextProtocolServer* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.AI.ModelContextProtocol.IModelContextProtocolServer", L"Command");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Command();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IModelContextProtocolServer_get_Info(py::wrapper::Windows::AI::ModelContextProtocol::IModelContextProtocolServer* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.AI.ModelContextProtocol.IModelContextProtocolServer", L"Info");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Info();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_IModelContextProtocolServer(py::wrapper::Windows::AI::ModelContextProtocol::IModelContextProtocolServer* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_IModelContextProtocolServer(py::wrapper::Windows::AI::ModelContextProtocol::IModelContextProtocolServer* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            {
                auto _gil = py::release_gil();
                self->obj.Close();
            }

            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IModelContextProtocolServer[] = {
        { "close", reinterpret_cast<PyCFunction>(IModelContextProtocolServer_Close), METH_VARARGS, nullptr },
        { "get_command_arguments", reinterpret_cast<PyCFunction>(IModelContextProtocolServer_GetCommandArguments), METH_VARARGS, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_IModelContextProtocolServer), METH_NOARGS, nullptr },
        { "__exit__", reinterpret_cast<PyCFunction>(_exit_IModelContextProtocolServer), METH_VARARGS, nullptr },
        { }};

    static PyGetSetDef _getset_IModelContextProtocolServer[] = {
        { "command", reinterpret_cast<getter>(IModelContextProtocolServer_get_Command), nullptr, nullptr, nullptr },
        { "info", reinterpret_cast<getter>(IModelContextProtocolServer_get_Info), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_IModelContextProtocolServer[] = {
        #if PY_VERSION_HEX < 0x030A0000
        { Py_tp_new, reinterpret_cast<void*>(_new_IModelContextProtocolServer) },
        #endif
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IModelContextProtocolServer) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IModelContextProtocolServer) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IModelContextProtocolServer) },
        { }};

    static PyType_Spec type_spec_IModelContextProtocolServer = {
        "winrt._winrt_windows_ai_modelcontextprotocol._IModelContextProtocolServer",
        sizeof(py::wrapper::Windows::AI::ModelContextProtocol::IModelContextProtocolServer),
        0,
        Py_TPFLAGS_DEFAULT
        #if PY_VERSION_HEX >= 0x030A0000
        | Py_TPFLAGS_DISALLOW_INSTANTIATION
        #endif
        ,
        _type_slots_IModelContextProtocolServer};

    struct ImplementsIModelContextProtocolServer : py::ImplementsInterfaceT<ImplementsIModelContextProtocolServer, winrt::Windows::AI::ModelContextProtocol::IModelContextProtocolServer>
    {
        ImplementsIModelContextProtocolServer() = delete;
        ImplementsIModelContextProtocolServer(PyObject* py_obj, winrt::impl::inspectable_abi* runtime_class) : py::ImplementsInterfaceT<ImplementsIModelContextProtocolServer, winrt::Windows::AI::ModelContextProtocol::IModelContextProtocolServer>(py_obj, runtime_class)
        {
        }

        auto Close()
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "close")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallNoArgs(method.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto GetCommandArguments()
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "get_command_arguments")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallNoArgs(method.get())};
                if (!return_value)
                {
                    throw python_exception();
                }

                auto return_buf = py::convert_to<py::pybuf_view<winrt::hstring, false>>(return_value.get());
                return winrt::com_array<winrt::hstring>{return_buf.begin(), return_buf.end()};
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto Command()
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle value{PyObject_GetAttrString(self.get(), "command")};
                if (!value)
                {
                    throw python_exception();
                }

                return py::convert_to<winrt::hstring>(value.get());
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto Info()
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle value{PyObject_GetAttrString(self.get(), "info")};
                if (!value)
                {
                    throw python_exception();
                }

                return py::convert_to<winrt::Windows::AI::ModelContextProtocol::ModelContextProtocolServerInfo>(value.get());
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }
    };

    static PyObject* _assign_array_IModelContextProtocolServer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::AI::ModelContextProtocol::IModelContextProtocolServer>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IModelContextProtocolServer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::AI::ModelContextProtocol::IModelContextProtocolServer>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _guid_ImplementsIModelContextProtocolServer(PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::guid_of<winrt::Windows::AI::ModelContextProtocol::IModelContextProtocolServer>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _make_ImplementsIModelContextProtocolServer(PyObject* /*unused*/, PyObject* args) noexcept
    {
        try
        {
            PyObject* py_obj;
            winrt::impl::inspectable_abi* runtime_class;

            if (!PyArg_ParseTuple(args, "On", &py_obj, &runtime_class))
            {
                return nullptr;
            }

            auto iface{std::make_unique<ImplementsIModelContextProtocolServer>(py_obj, runtime_class)};

            return PyLong_FromVoidPtr(iface.release());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef methods_ImplementsIModelContextProtocolServer[] = {
        { "_assign_array_", _assign_array_IModelContextProtocolServer, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IModelContextProtocolServer), METH_O | METH_STATIC, nullptr },
        { "_guid_", reinterpret_cast<PyCFunction>(_guid_ImplementsIModelContextProtocolServer), METH_NOARGS | METH_STATIC, nullptr },
        { "_make_", reinterpret_cast<PyCFunction>(_make_ImplementsIModelContextProtocolServer), METH_VARARGS | METH_STATIC, nullptr },
        { }};

    static PyType_Slot type_slots_ImplementsIModelContextProtocolServer[] = {
        { Py_tp_methods, reinterpret_cast<void*>(methods_ImplementsIModelContextProtocolServer) },
        { }};

    static PyType_Spec type_spec_ImplementsIModelContextProtocolServer = {
        "winrt._winrt_windows_ai_modelcontextprotocol.IModelContextProtocolServer",
        0,
        0,
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE
        #if PY_VERSION_HEX >= 0x030A0000
        | Py_TPFLAGS_DISALLOW_INSTANTIATION
        #endif
        ,
        type_slots_ImplementsIModelContextProtocolServer};

    // ----- Windows.AI.ModelContextProtocol Initialization --------------------

    PyDoc_STRVAR(module_doc, "Windows.AI.ModelContextProtocol");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_windows_ai_modelcontextprotocol",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Windows::AI::ModelContextProtocol

PyMODINIT_FUNC PyInit__winrt_windows_ai_modelcontextprotocol(void) noexcept
{
    using namespace py::cpp::Windows::AI::ModelContextProtocol;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto inspectable_meta_type = py::get_inspectable_meta_type();
    if (!inspectable_meta_type)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle ModelContextProtocolClientContext_Static_bases{PyTuple_Pack(1, reinterpret_cast<PyObject*>(inspectable_meta_type))};
    if (!ModelContextProtocolClientContext_Static_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_ModelContextProtocolClientContext_Static{PyType_FromSpecWithBases(&type_spec_ModelContextProtocolClientContext_Static, ModelContextProtocolClientContext_Static_bases.get())};
    if (!type_ModelContextProtocolClientContext_Static)
    {
        return nullptr;
    }

    py::pytype_handle ModelContextProtocolClientContext_type{py::register_python_type(module.get(), &type_spec_ModelContextProtocolClientContext, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ModelContextProtocolClientContext_Static.get()))};
    if (!ModelContextProtocolClientContext_type)
    {
        return nullptr;
    }

    py::pyobj_handle ModelContextProtocolServerCatalog_Static_bases{PyTuple_Pack(1, reinterpret_cast<PyObject*>(inspectable_meta_type))};
    if (!ModelContextProtocolServerCatalog_Static_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_ModelContextProtocolServerCatalog_Static{PyType_FromSpecWithBases(&type_spec_ModelContextProtocolServerCatalog_Static, ModelContextProtocolServerCatalog_Static_bases.get())};
    if (!type_ModelContextProtocolServerCatalog_Static)
    {
        return nullptr;
    }

    py::pytype_handle ModelContextProtocolServerCatalog_type{py::register_python_type(module.get(), &type_spec_ModelContextProtocolServerCatalog, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ModelContextProtocolServerCatalog_Static.get()))};
    if (!ModelContextProtocolServerCatalog_type)
    {
        return nullptr;
    }

    py::pyobj_handle ModelContextProtocolServerInfo_Static_bases{PyTuple_Pack(1, reinterpret_cast<PyObject*>(inspectable_meta_type))};
    if (!ModelContextProtocolServerInfo_Static_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_ModelContextProtocolServerInfo_Static{PyType_FromSpecWithBases(&type_spec_ModelContextProtocolServerInfo_Static, ModelContextProtocolServerInfo_Static_bases.get())};
    if (!type_ModelContextProtocolServerInfo_Static)
    {
        return nullptr;
    }

    py::pytype_handle ModelContextProtocolServerInfo_type{py::register_python_type(module.get(), &type_spec_ModelContextProtocolServerInfo, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ModelContextProtocolServerInfo_Static.get()))};
    if (!ModelContextProtocolServerInfo_type)
    {
        return nullptr;
    }

    py::pytype_handle IModelContextProtocolServer_type{py::register_python_type(module.get(), &type_spec_IModelContextProtocolServer, object_bases.get(), nullptr)};
    if (!IModelContextProtocolServer_type)
    {
        return nullptr;
    }

    py::pytype_handle ImplementsIModelContextProtocolServer_type{py::register_python_type(module.get(), &type_spec_ImplementsIModelContextProtocolServer, nullptr, inspectable_meta_type)};
    if (!ImplementsIModelContextProtocolServer_type)
    {
        return nullptr;
    }

    if (PyModule_AddType(module.get(), ImplementsIModelContextProtocolServer_type.get()) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
