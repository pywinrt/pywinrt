# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation.collections

from winrt.windows.foundation import AsyncStatus, PropertyType
from winrt.windows.foundation import AsyncActionCompletedHandler, AsyncActionProgressHandler, AsyncActionWithProgressCompletedHandler, AsyncOperationCompletedHandler, AsyncOperationProgressHandler, AsyncOperationWithProgressCompletedHandler, DeferralCompletedHandler, EventHandler, TypedEventHandler

Self = typing.TypeVar('Self')
T = typing.TypeVar('T')
TProgress = typing.TypeVar('TProgress')
TResult = typing.TypeVar('TResult')

@typing.final
class EventRegistrationToken:
    value: winrt.system.Int64
    def __init__(self, value: winrt.system.Int64) -> None: ...

@typing.final
class HResult:
    value: winrt.system.Int32
    def __init__(self, value: winrt.system.Int32) -> None: ...

@typing.final
class Point:
    x: winrt.system.Single
    y: winrt.system.Single
    def __init__(self, x: winrt.system.Single, y: winrt.system.Single) -> None: ...

@typing.final
class Rect:
    x: winrt.system.Single
    y: winrt.system.Single
    width: winrt.system.Single
    height: winrt.system.Single
    def __init__(self, x: winrt.system.Single, y: winrt.system.Single, width: winrt.system.Single, height: winrt.system.Single) -> None: ...

@typing.final
class Size:
    width: winrt.system.Single
    height: winrt.system.Single
    def __init__(self, width: winrt.system.Single, height: winrt.system.Single) -> None: ...

@typing.final
class Deferral(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Deferral: ...
    def __new__(cls: typing.Type[Deferral], handler: typing.Optional[DeferralCompletedHandler]) -> Deferral:...
    def close(self) -> None: ...
    def complete(self) -> None: ...

@typing.final
class GuidHelper_Static(type):
    def create_new_guid(cls) -> _uuid.UUID: ...
    def equals(cls, target: _uuid.UUID, value: _uuid.UUID, /) -> bool: ...
    @_property
    def empty(cls) -> _uuid.UUID: ...

@typing.final
class GuidHelper(winrt.system.Object, metaclass=GuidHelper_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GuidHelper: ...

@typing.final
class MemoryBuffer(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MemoryBuffer: ...
    def __new__(cls: typing.Type[MemoryBuffer], capacity: winrt.system.UInt32) -> MemoryBuffer:...
    def close(self) -> None: ...
    def create_reference(self) -> typing.Optional[IMemoryBufferReference]: ...

@typing.final
class PropertyValue_Static(type):
    def create_boolean(cls, value: bool, /) -> typing.Optional[winrt.system.Object]: ...
    def create_boolean_array(cls, value: winrt.system.Array[bool], /) -> typing.Optional[winrt.system.Object]: ...
    def create_char16(cls, value: winrt.system.Char16, /) -> typing.Optional[winrt.system.Object]: ...
    def create_char16_array(cls, value: winrt.system.Array[winrt.system.Char16], /) -> typing.Optional[winrt.system.Object]: ...
    def create_date_time(cls, value: datetime.datetime, /) -> typing.Optional[winrt.system.Object]: ...
    def create_date_time_array(cls, value: winrt.system.Array[datetime.datetime], /) -> typing.Optional[winrt.system.Object]: ...
    def create_double(cls, value: winrt.system.Double, /) -> typing.Optional[winrt.system.Object]: ...
    def create_double_array(cls, value: winrt.system.Array[winrt.system.Double], /) -> typing.Optional[winrt.system.Object]: ...
    def create_empty(cls) -> typing.Optional[winrt.system.Object]: ...
    def create_guid(cls, value: _uuid.UUID, /) -> typing.Optional[winrt.system.Object]: ...
    def create_guid_array(cls, value: winrt.system.Array[_uuid.UUID], /) -> typing.Optional[winrt.system.Object]: ...
    def create_inspectable(cls, value: typing.Optional[winrt.system.Object], /) -> typing.Optional[winrt.system.Object]: ...
    def create_inspectable_array(cls, value: winrt.system.Array[winrt.system.Object], /) -> typing.Optional[winrt.system.Object]: ...
    def create_int16(cls, value: winrt.system.Int16, /) -> typing.Optional[winrt.system.Object]: ...
    def create_int16_array(cls, value: winrt.system.Array[winrt.system.Int16], /) -> typing.Optional[winrt.system.Object]: ...
    def create_int32(cls, value: winrt.system.Int32, /) -> typing.Optional[winrt.system.Object]: ...
    def create_int32_array(cls, value: winrt.system.Array[winrt.system.Int32], /) -> typing.Optional[winrt.system.Object]: ...
    def create_int64(cls, value: winrt.system.Int64, /) -> typing.Optional[winrt.system.Object]: ...
    def create_int64_array(cls, value: winrt.system.Array[winrt.system.Int64], /) -> typing.Optional[winrt.system.Object]: ...
    def create_point(cls, value: Point, /) -> typing.Optional[winrt.system.Object]: ...
    def create_point_array(cls, value: winrt.system.Array[Point], /) -> typing.Optional[winrt.system.Object]: ...
    def create_rect(cls, value: Rect, /) -> typing.Optional[winrt.system.Object]: ...
    def create_rect_array(cls, value: winrt.system.Array[Rect], /) -> typing.Optional[winrt.system.Object]: ...
    def create_single(cls, value: winrt.system.Single, /) -> typing.Optional[winrt.system.Object]: ...
    def create_single_array(cls, value: winrt.system.Array[winrt.system.Single], /) -> typing.Optional[winrt.system.Object]: ...
    def create_size(cls, value: Size, /) -> typing.Optional[winrt.system.Object]: ...
    def create_size_array(cls, value: winrt.system.Array[Size], /) -> typing.Optional[winrt.system.Object]: ...
    def create_string(cls, value: str, /) -> typing.Optional[winrt.system.Object]: ...
    def create_string_array(cls, value: winrt.system.Array[str], /) -> typing.Optional[winrt.system.Object]: ...
    def create_time_span(cls, value: datetime.timedelta, /) -> typing.Optional[winrt.system.Object]: ...
    def create_time_span_array(cls, value: winrt.system.Array[datetime.timedelta], /) -> typing.Optional[winrt.system.Object]: ...
    def create_uint16(cls, value: winrt.system.UInt16, /) -> typing.Optional[winrt.system.Object]: ...
    def create_uint16_array(cls, value: winrt.system.Array[winrt.system.UInt16], /) -> typing.Optional[winrt.system.Object]: ...
    def create_uint32(cls, value: winrt.system.UInt32, /) -> typing.Optional[winrt.system.Object]: ...
    def create_uint32_array(cls, value: winrt.system.Array[winrt.system.UInt32], /) -> typing.Optional[winrt.system.Object]: ...
    def create_uint64(cls, value: winrt.system.UInt64, /) -> typing.Optional[winrt.system.Object]: ...
    def create_uint64_array(cls, value: winrt.system.Array[winrt.system.UInt64], /) -> typing.Optional[winrt.system.Object]: ...
    def create_uint8(cls, value: winrt.system.UInt8, /) -> typing.Optional[winrt.system.Object]: ...
    def create_uint8_array(cls, value: winrt.system.Array[winrt.system.UInt8], /) -> typing.Optional[winrt.system.Object]: ...

@typing.final
class PropertyValue(winrt.system.Object, metaclass=PropertyValue_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PropertyValue: ...

@typing.final
class Uri_Static(type):
    def escape_component(cls, to_escape: str, /) -> str: ...
    def unescape_component(cls, to_unescape: str, /) -> str: ...

@typing.final
class Uri(winrt.system.Object, metaclass=Uri_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Uri: ...
    @typing.overload
    def __new__(cls: typing.Type[Uri], uri: str) -> Uri:...
    @typing.overload
    def __new__(cls: typing.Type[Uri], base_uri: str, relative_uri: str) -> Uri:...
    def combine_uri(self, relative_uri: str, /) -> typing.Optional[Uri]: ...
    def equals(self, p_uri: typing.Optional[Uri], /) -> bool: ...
    def to_string(self) -> str: ...
    @_property
    def absolute_uri(self) -> str: ...
    @_property
    def display_uri(self) -> str: ...
    @_property
    def domain(self) -> str: ...
    @_property
    def extension(self) -> str: ...
    @_property
    def fragment(self) -> str: ...
    @_property
    def host(self) -> str: ...
    @_property
    def password(self) -> str: ...
    @_property
    def path(self) -> str: ...
    @_property
    def port(self) -> winrt.system.Int32: ...
    @_property
    def query(self) -> str: ...
    @_property
    def query_parsed(self) -> typing.Optional[WwwFormUrlDecoder]: ...
    @_property
    def raw_uri(self) -> str: ...
    @_property
    def scheme_name(self) -> str: ...
    @_property
    def suspicious(self) -> bool: ...
    @_property
    def user_name(self) -> str: ...
    @_property
    def absolute_canonical_uri(self) -> str: ...
    @_property
    def display_iri(self) -> str: ...

@typing.final
class WwwFormUrlDecoder(winrt.system.Object, winrt._winrt.Sequence[IWwwFormUrlDecoderEntry]):
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[IWwwFormUrlDecoderEntry]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> IWwwFormUrlDecoderEntry: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[IWwwFormUrlDecoderEntry]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WwwFormUrlDecoder: ...
    def __new__(cls: typing.Type[WwwFormUrlDecoder], query: str) -> WwwFormUrlDecoder:...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[IWwwFormUrlDecoderEntry]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[IWwwFormUrlDecoderEntry]: ...
    def get_first_value_by_name(self, name: str, /) -> str: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[IWwwFormUrlDecoderEntry], /) -> winrt.system.UInt32: ...
    def index_of(self, value: typing.Optional[IWwwFormUrlDecoderEntry], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class WwwFormUrlDecoderEntry(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WwwFormUrlDecoderEntry: ...
    @_property
    def name(self) -> str: ...
    @_property
    def value(self) -> str: ...

@typing.final
class IAsyncAction(winrt.system.Object):
    def __await__(self) -> typing.Generator[typing.Any, None, None]: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IAsyncAction: ...
    def cancel(self) -> None: ...
    def close(self) -> None: ...
    def get_results(self) -> None: ...
    @_property
    def completed(self) -> typing.Optional[AsyncActionCompletedHandler]: ...
    @completed.setter
    def completed(self, value: typing.Optional[AsyncActionCompletedHandler]) -> None: ...
    @_property
    def error_code(self) -> HResult: ...
    @_property
    def id(self) -> winrt.system.UInt32: ...
    @_property
    def status(self) -> AsyncStatus: ...

@typing.final
class IAsyncActionWithProgress(winrt.system.Object, typing.Generic[TProgress]):
    def __class_getitem__(cls, key: typing.Any) -> types.GenericAlias: ...
    def __await__(self) -> typing.Generator[typing.Any, None, None]: ...
    def cancel(self) -> None: ...
    def close(self) -> None: ...
    def get_results(self) -> None: ...
    @_property
    def progress(self) -> typing.Optional[AsyncActionProgressHandler[TProgress]]: ...
    @progress.setter
    def progress(self, value: typing.Optional[AsyncActionProgressHandler[TProgress]]) -> None: ...
    @_property
    def completed(self) -> typing.Optional[AsyncActionWithProgressCompletedHandler[TProgress]]: ...
    @completed.setter
    def completed(self, value: typing.Optional[AsyncActionWithProgressCompletedHandler[TProgress]]) -> None: ...
    @_property
    def error_code(self) -> HResult: ...
    @_property
    def id(self) -> winrt.system.UInt32: ...
    @_property
    def status(self) -> AsyncStatus: ...

@typing.final
class IAsyncInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IAsyncInfo: ...
    def cancel(self) -> None: ...
    def close(self) -> None: ...
    @_property
    def error_code(self) -> HResult: ...
    @_property
    def id(self) -> winrt.system.UInt32: ...
    @_property
    def status(self) -> AsyncStatus: ...

@typing.final
class IAsyncOperationWithProgress(winrt.system.Object, typing.Generic[TResult, TProgress]):
    def __class_getitem__(cls, key: typing.Any) -> types.GenericAlias: ...
    def __await__(self) -> typing.Generator[typing.Any, None, TResult]: ...
    def cancel(self) -> None: ...
    def close(self) -> None: ...
    def get_results(self) -> typing.Optional[TResult]: ...
    @_property
    def progress(self) -> typing.Optional[AsyncOperationProgressHandler[TResult, TProgress]]: ...
    @progress.setter
    def progress(self, value: typing.Optional[AsyncOperationProgressHandler[TResult, TProgress]]) -> None: ...
    @_property
    def completed(self) -> typing.Optional[AsyncOperationWithProgressCompletedHandler[TResult, TProgress]]: ...
    @completed.setter
    def completed(self, value: typing.Optional[AsyncOperationWithProgressCompletedHandler[TResult, TProgress]]) -> None: ...
    @_property
    def error_code(self) -> HResult: ...
    @_property
    def id(self) -> winrt.system.UInt32: ...
    @_property
    def status(self) -> AsyncStatus: ...

@typing.final
class IAsyncOperation(winrt.system.Object, typing.Generic[TResult]):
    def __class_getitem__(cls, key: typing.Any) -> types.GenericAlias: ...
    def __await__(self) -> typing.Generator[typing.Any, None, TResult]: ...
    def cancel(self) -> None: ...
    def close(self) -> None: ...
    def get_results(self) -> typing.Optional[TResult]: ...
    @_property
    def completed(self) -> typing.Optional[AsyncOperationCompletedHandler[TResult]]: ...
    @completed.setter
    def completed(self, value: typing.Optional[AsyncOperationCompletedHandler[TResult]]) -> None: ...
    @_property
    def error_code(self) -> HResult: ...
    @_property
    def id(self) -> winrt.system.UInt32: ...
    @_property
    def status(self) -> AsyncStatus: ...

@typing.final
class IClosable(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IClosable: ...
    def close(self) -> None: ...

@typing.final
class IGetActivationFactory(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IGetActivationFactory: ...
    def get_activation_factory(self, activatable_class_id: str, /) -> typing.Optional[winrt.system.Object]: ...

@typing.final
class IMemoryBuffer(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IMemoryBuffer: ...
    def close(self) -> None: ...
    def create_reference(self) -> typing.Optional[IMemoryBufferReference]: ...

@typing.final
class IMemoryBufferReference(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    def __buffer__(self, flags: int) -> memoryview: ...
    def __release_buffer__(self, view: memoryview) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IMemoryBufferReference: ...
    def close(self) -> None: ...
    def add_closed(self, handler: TypedEventHandler[IMemoryBufferReference, winrt.system.Object], /) -> EventRegistrationToken: ...
    def remove_closed(self, cookie: EventRegistrationToken, /) -> None: ...
    @_property
    def capacity(self) -> winrt.system.UInt32: ...

@typing.final
class IPropertyValue(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IPropertyValue: ...
    def get_boolean(self) -> bool: ...
    def get_boolean_array(self) -> winrt.system.Array[bool]: ...
    def get_char16(self) -> winrt.system.Char16: ...
    def get_char16_array(self) -> winrt.system.Array[winrt.system.Char16]: ...
    def get_date_time(self) -> datetime.datetime: ...
    def get_date_time_array(self) -> winrt.system.Array[datetime.datetime]: ...
    def get_double(self) -> winrt.system.Double: ...
    def get_double_array(self) -> winrt.system.Array[winrt.system.Double]: ...
    def get_guid(self) -> _uuid.UUID: ...
    def get_guid_array(self) -> winrt.system.Array[_uuid.UUID]: ...
    def get_inspectable_array(self) -> winrt.system.Array[winrt.system.Object]: ...
    def get_int16(self) -> winrt.system.Int16: ...
    def get_int16_array(self) -> winrt.system.Array[winrt.system.Int16]: ...
    def get_int32(self) -> winrt.system.Int32: ...
    def get_int32_array(self) -> winrt.system.Array[winrt.system.Int32]: ...
    def get_int64(self) -> winrt.system.Int64: ...
    def get_int64_array(self) -> winrt.system.Array[winrt.system.Int64]: ...
    def get_point(self) -> Point: ...
    def get_point_array(self) -> winrt.system.Array[Point]: ...
    def get_rect(self) -> Rect: ...
    def get_rect_array(self) -> winrt.system.Array[Rect]: ...
    def get_single(self) -> winrt.system.Single: ...
    def get_single_array(self) -> winrt.system.Array[winrt.system.Single]: ...
    def get_size(self) -> Size: ...
    def get_size_array(self) -> winrt.system.Array[Size]: ...
    def get_string(self) -> str: ...
    def get_string_array(self) -> winrt.system.Array[str]: ...
    def get_time_span(self) -> datetime.timedelta: ...
    def get_time_span_array(self) -> winrt.system.Array[datetime.timedelta]: ...
    def get_uint16(self) -> winrt.system.UInt16: ...
    def get_uint16_array(self) -> winrt.system.Array[winrt.system.UInt16]: ...
    def get_uint32(self) -> winrt.system.UInt32: ...
    def get_uint32_array(self) -> winrt.system.Array[winrt.system.UInt32]: ...
    def get_uint64(self) -> winrt.system.UInt64: ...
    def get_uint64_array(self) -> winrt.system.Array[winrt.system.UInt64]: ...
    def get_uint8(self) -> winrt.system.UInt8: ...
    def get_uint8_array(self) -> winrt.system.Array[winrt.system.UInt8]: ...
    @_property
    def is_numeric_scalar(self) -> bool: ...
    @_property
    def type(self) -> PropertyType: ...

@typing.final
class IReferenceArray(winrt.system.Object, typing.Generic[T]):
    def __class_getitem__(cls, key: typing.Any) -> types.GenericAlias: ...
    def get_boolean(self) -> bool: ...
    def get_boolean_array(self) -> winrt.system.Array[bool]: ...
    def get_char16(self) -> winrt.system.Char16: ...
    def get_char16_array(self) -> winrt.system.Array[winrt.system.Char16]: ...
    def get_date_time(self) -> datetime.datetime: ...
    def get_date_time_array(self) -> winrt.system.Array[datetime.datetime]: ...
    def get_double(self) -> winrt.system.Double: ...
    def get_double_array(self) -> winrt.system.Array[winrt.system.Double]: ...
    def get_guid(self) -> _uuid.UUID: ...
    def get_guid_array(self) -> winrt.system.Array[_uuid.UUID]: ...
    def get_inspectable_array(self) -> winrt.system.Array[winrt.system.Object]: ...
    def get_int16(self) -> winrt.system.Int16: ...
    def get_int16_array(self) -> winrt.system.Array[winrt.system.Int16]: ...
    def get_int32(self) -> winrt.system.Int32: ...
    def get_int32_array(self) -> winrt.system.Array[winrt.system.Int32]: ...
    def get_int64(self) -> winrt.system.Int64: ...
    def get_int64_array(self) -> winrt.system.Array[winrt.system.Int64]: ...
    def get_point(self) -> Point: ...
    def get_point_array(self) -> winrt.system.Array[Point]: ...
    def get_rect(self) -> Rect: ...
    def get_rect_array(self) -> winrt.system.Array[Rect]: ...
    def get_single(self) -> winrt.system.Single: ...
    def get_single_array(self) -> winrt.system.Array[winrt.system.Single]: ...
    def get_size(self) -> Size: ...
    def get_size_array(self) -> winrt.system.Array[Size]: ...
    def get_string(self) -> str: ...
    def get_string_array(self) -> winrt.system.Array[str]: ...
    def get_time_span(self) -> datetime.timedelta: ...
    def get_time_span_array(self) -> winrt.system.Array[datetime.timedelta]: ...
    def get_uint16(self) -> winrt.system.UInt16: ...
    def get_uint16_array(self) -> winrt.system.Array[winrt.system.UInt16]: ...
    def get_uint32(self) -> winrt.system.UInt32: ...
    def get_uint32_array(self) -> winrt.system.Array[winrt.system.UInt32]: ...
    def get_uint64(self) -> winrt.system.UInt64: ...
    def get_uint64_array(self) -> winrt.system.Array[winrt.system.UInt64]: ...
    def get_uint8(self) -> winrt.system.UInt8: ...
    def get_uint8_array(self) -> winrt.system.Array[winrt.system.UInt8]: ...
    @_property
    def value(self) -> typing.Optional[T]: ...
    @_property
    def is_numeric_scalar(self) -> bool: ...
    @_property
    def type(self) -> PropertyType: ...

@typing.final
class IReference(winrt.system.Object, typing.Generic[T]):
    def __class_getitem__(cls, key: typing.Any) -> types.GenericAlias: ...
    def get_boolean(self) -> bool: ...
    def get_boolean_array(self) -> winrt.system.Array[bool]: ...
    def get_char16(self) -> winrt.system.Char16: ...
    def get_char16_array(self) -> winrt.system.Array[winrt.system.Char16]: ...
    def get_date_time(self) -> datetime.datetime: ...
    def get_date_time_array(self) -> winrt.system.Array[datetime.datetime]: ...
    def get_double(self) -> winrt.system.Double: ...
    def get_double_array(self) -> winrt.system.Array[winrt.system.Double]: ...
    def get_guid(self) -> _uuid.UUID: ...
    def get_guid_array(self) -> winrt.system.Array[_uuid.UUID]: ...
    def get_inspectable_array(self) -> winrt.system.Array[winrt.system.Object]: ...
    def get_int16(self) -> winrt.system.Int16: ...
    def get_int16_array(self) -> winrt.system.Array[winrt.system.Int16]: ...
    def get_int32(self) -> winrt.system.Int32: ...
    def get_int32_array(self) -> winrt.system.Array[winrt.system.Int32]: ...
    def get_int64(self) -> winrt.system.Int64: ...
    def get_int64_array(self) -> winrt.system.Array[winrt.system.Int64]: ...
    def get_point(self) -> Point: ...
    def get_point_array(self) -> winrt.system.Array[Point]: ...
    def get_rect(self) -> Rect: ...
    def get_rect_array(self) -> winrt.system.Array[Rect]: ...
    def get_single(self) -> winrt.system.Single: ...
    def get_single_array(self) -> winrt.system.Array[winrt.system.Single]: ...
    def get_size(self) -> Size: ...
    def get_size_array(self) -> winrt.system.Array[Size]: ...
    def get_string(self) -> str: ...
    def get_string_array(self) -> winrt.system.Array[str]: ...
    def get_time_span(self) -> datetime.timedelta: ...
    def get_time_span_array(self) -> winrt.system.Array[datetime.timedelta]: ...
    def get_uint16(self) -> winrt.system.UInt16: ...
    def get_uint16_array(self) -> winrt.system.Array[winrt.system.UInt16]: ...
    def get_uint32(self) -> winrt.system.UInt32: ...
    def get_uint32_array(self) -> winrt.system.Array[winrt.system.UInt32]: ...
    def get_uint64(self) -> winrt.system.UInt64: ...
    def get_uint64_array(self) -> winrt.system.Array[winrt.system.UInt64]: ...
    def get_uint8(self) -> winrt.system.UInt8: ...
    def get_uint8_array(self) -> winrt.system.Array[winrt.system.UInt8]: ...
    @_property
    def value(self) -> typing.Optional[T]: ...
    @_property
    def is_numeric_scalar(self) -> bool: ...
    @_property
    def type(self) -> PropertyType: ...

@typing.final
class IStringable(winrt.system.Object):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IStringable: ...
    def to_string(self) -> str: ...

@typing.final
class IWwwFormUrlDecoderEntry(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IWwwFormUrlDecoderEntry: ...
    @_property
    def name(self) -> str: ...
    @_property
    def value(self) -> str: ...

