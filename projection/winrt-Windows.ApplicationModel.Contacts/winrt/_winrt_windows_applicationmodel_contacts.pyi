# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.data.text
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage.streams
import winrt.windows.system
import winrt.windows.ui
import winrt.windows.ui.popups
import winrt.windows.ui.viewmanagement

from winrt.windows.applicationmodel.contacts import ContactAddressKind, ContactAnnotationOperations, ContactAnnotationStoreAccessType, ContactBatchStatus, ContactCardHeaderKind, ContactCardTabKind, ContactChangeType, ContactDateKind, ContactEmailKind, ContactFieldCategory, ContactFieldType, ContactListOtherAppReadAccess, ContactListOtherAppWriteAccess, ContactListSyncStatus, ContactMatchReasonKind, ContactNameOrder, ContactPhoneKind, ContactQueryDesiredFields, ContactQuerySearchFields, ContactQuerySearchScope, ContactRelationship, ContactSelectionMode, ContactStoreAccessType, PinnedContactSurface

Self = typing.TypeVar('Self')

@typing.final
class AggregateContactManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AggregateContactManager: ...
    def find_raw_contacts_async(self, contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[Contact]]: ...
    def set_remote_identification_information_async(self, contact_list_id: str, remote_source_id: str, account_id: str, /) -> winrt.windows.foundation.IAsyncAction: ...
    def try_link_contacts_async(self, primary_contact: typing.Optional[Contact], secondary_contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    def try_set_preferred_source_for_picture_async(self, aggregate_contact: typing.Optional[Contact], raw_contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def unlink_raw_contact_async(self, contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncAction: ...

@typing.final
class Contact(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Contact: ...
    def __new__(cls: typing.Type[Contact]) -> Contact:...
    @_property
    def thumbnail(self) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]: ...
    @thumbnail.setter
    def thumbnail(self, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]) -> None: ...
    @_property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @_property
    def fields(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[IContactField]]: ...
    @_property
    def id(self) -> str: ...
    @id.setter
    def id(self, value: str) -> None: ...
    @_property
    def notes(self) -> str: ...
    @notes.setter
    def notes(self, value: str) -> None: ...
    @_property
    def connected_service_accounts(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[ContactConnectedServiceAccount]]: ...
    @_property
    def emails(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[ContactEmail]]: ...
    @_property
    def addresses(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[ContactAddress]]: ...
    @_property
    def important_dates(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[ContactDate]]: ...
    @_property
    def job_info(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[ContactJobInfo]]: ...
    @_property
    def data_suppliers(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...
    @_property
    def phones(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[ContactPhone]]: ...
    @_property
    def provider_properties(self) -> typing.Optional[winrt.windows.foundation.collections.IPropertySet]: ...
    @_property
    def significant_others(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[ContactSignificantOther]]: ...
    @_property
    def websites(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[ContactWebsite]]: ...
    @_property
    def source_display_picture(self) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]: ...
    @source_display_picture.setter
    def source_display_picture(self, value: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]) -> None: ...
    @_property
    def text_tone_token(self) -> str: ...
    @text_tone_token.setter
    def text_tone_token(self, value: str) -> None: ...
    @_property
    def display_name_override(self) -> str: ...
    @display_name_override.setter
    def display_name_override(self, value: str) -> None: ...
    @_property
    def display_picture_user_update_time(self) -> datetime.datetime: ...
    @display_picture_user_update_time.setter
    def display_picture_user_update_time(self, value: datetime.datetime) -> None: ...
    @_property
    def nickname(self) -> str: ...
    @nickname.setter
    def nickname(self, value: str) -> None: ...
    @_property
    def remote_id(self) -> str: ...
    @remote_id.setter
    def remote_id(self, value: str) -> None: ...
    @_property
    def ring_tone_token(self) -> str: ...
    @ring_tone_token.setter
    def ring_tone_token(self, value: str) -> None: ...
    @_property
    def contact_list_id(self) -> str: ...
    @_property
    def large_display_picture(self) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]: ...
    @_property
    def small_display_picture(self) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]: ...
    @_property
    def sort_name(self) -> str: ...
    @_property
    def aggregate_id(self) -> str: ...
    @_property
    def full_name(self) -> str: ...
    @_property
    def is_aggregate(self) -> bool: ...
    @_property
    def is_display_picture_manually_set(self) -> bool: ...
    @_property
    def is_me(self) -> bool: ...
    @_property
    def yomi_given_name(self) -> str: ...
    @yomi_given_name.setter
    def yomi_given_name(self, value: str) -> None: ...
    @_property
    def honorific_name_suffix(self) -> str: ...
    @honorific_name_suffix.setter
    def honorific_name_suffix(self, value: str) -> None: ...
    @_property
    def yomi_family_name(self) -> str: ...
    @yomi_family_name.setter
    def yomi_family_name(self, value: str) -> None: ...
    @_property
    def middle_name(self) -> str: ...
    @middle_name.setter
    def middle_name(self, value: str) -> None: ...
    @_property
    def last_name(self) -> str: ...
    @last_name.setter
    def last_name(self, value: str) -> None: ...
    @_property
    def honorific_name_prefix(self) -> str: ...
    @honorific_name_prefix.setter
    def honorific_name_prefix(self, value: str) -> None: ...
    @_property
    def first_name(self) -> str: ...
    @first_name.setter
    def first_name(self, value: str) -> None: ...
    @_property
    def display_name(self) -> str: ...
    @_property
    def yomi_display_name(self) -> str: ...

@typing.final
class ContactAddress(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactAddress: ...
    def __new__(cls: typing.Type[ContactAddress]) -> ContactAddress:...
    @_property
    def street_address(self) -> str: ...
    @street_address.setter
    def street_address(self, value: str) -> None: ...
    @_property
    def region(self) -> str: ...
    @region.setter
    def region(self, value: str) -> None: ...
    @_property
    def postal_code(self) -> str: ...
    @postal_code.setter
    def postal_code(self, value: str) -> None: ...
    @_property
    def locality(self) -> str: ...
    @locality.setter
    def locality(self, value: str) -> None: ...
    @_property
    def kind(self) -> ContactAddressKind: ...
    @kind.setter
    def kind(self, value: ContactAddressKind) -> None: ...
    @_property
    def description(self) -> str: ...
    @description.setter
    def description(self, value: str) -> None: ...
    @_property
    def country(self) -> str: ...
    @country.setter
    def country(self, value: str) -> None: ...

@typing.final
class ContactAnnotation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactAnnotation: ...
    def __new__(cls: typing.Type[ContactAnnotation]) -> ContactAnnotation:...
    @_property
    def supported_operations(self) -> ContactAnnotationOperations: ...
    @supported_operations.setter
    def supported_operations(self, value: ContactAnnotationOperations) -> None: ...
    @_property
    def remote_id(self) -> str: ...
    @remote_id.setter
    def remote_id(self, value: str) -> None: ...
    @_property
    def contact_id(self) -> str: ...
    @contact_id.setter
    def contact_id(self, value: str) -> None: ...
    @_property
    def annotation_list_id(self) -> str: ...
    @_property
    def id(self) -> str: ...
    @_property
    def is_disabled(self) -> bool: ...
    @_property
    def provider_properties(self) -> typing.Optional[winrt.windows.foundation.collections.ValueSet]: ...
    @_property
    def contact_list_id(self) -> str: ...
    @contact_list_id.setter
    def contact_list_id(self, value: str) -> None: ...

@typing.final
class ContactAnnotationList(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactAnnotationList: ...
    def delete_annotation_async(self, annotation: typing.Optional[ContactAnnotation], /) -> winrt.windows.foundation.IAsyncAction: ...
    def delete_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def find_annotations_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ContactAnnotation]]: ...
    def find_annotations_by_remote_id_async(self, remote_id: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ContactAnnotation]]: ...
    def get_annotation_async(self, annotation_id: str, /) -> winrt.windows.foundation.IAsyncOperation[ContactAnnotation]: ...
    def try_save_annotation_async(self, annotation: typing.Optional[ContactAnnotation], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @_property
    def id(self) -> str: ...
    @_property
    def provider_package_family_name(self) -> str: ...
    @_property
    def user_data_account_id(self) -> str: ...

@typing.final
class ContactAnnotationStore(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactAnnotationStore: ...
    @typing.overload
    def create_annotation_list_async(self) -> winrt.windows.foundation.IAsyncOperation[ContactAnnotationList]: ...
    @typing.overload
    def create_annotation_list_async(self, user_data_account_id: str, /) -> winrt.windows.foundation.IAsyncOperation[ContactAnnotationList]: ...
    def disable_annotation_async(self, annotation: typing.Optional[ContactAnnotation], /) -> winrt.windows.foundation.IAsyncAction: ...
    def find_annotation_lists_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ContactAnnotationList]]: ...
    def find_annotations_for_contact_async(self, contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ContactAnnotation]]: ...
    def find_annotations_for_contact_list_async(self, contact_list_id: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ContactAnnotation]]: ...
    def find_contact_ids_by_email_async(self, email_address: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[str]]: ...
    def find_contact_ids_by_phone_number_async(self, phone_number: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[str]]: ...
    def get_annotation_list_async(self, annotation_list_id: str, /) -> winrt.windows.foundation.IAsyncOperation[ContactAnnotationList]: ...

@typing.final
class ContactBatch(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactBatch: ...
    @_property
    def contacts(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[Contact]]: ...
    @_property
    def status(self) -> ContactBatchStatus: ...

@typing.final
class ContactCardDelayedDataLoader(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactCardDelayedDataLoader: ...
    def close(self) -> None: ...
    def set_data(self, contact: typing.Optional[Contact], /) -> None: ...

@typing.final
class ContactCardOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactCardOptions: ...
    def __new__(cls: typing.Type[ContactCardOptions]) -> ContactCardOptions:...
    @_property
    def initial_tab_kind(self) -> ContactCardTabKind: ...
    @initial_tab_kind.setter
    def initial_tab_kind(self, value: ContactCardTabKind) -> None: ...
    @_property
    def header_kind(self) -> ContactCardHeaderKind: ...
    @header_kind.setter
    def header_kind(self, value: ContactCardHeaderKind) -> None: ...
    @_property
    def server_search_contact_list_ids(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...

@typing.final
class ContactChange(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactChange: ...
    @_property
    def change_type(self) -> ContactChangeType: ...
    @_property
    def contact(self) -> typing.Optional[Contact]: ...

@typing.final
class ContactChangeReader(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactChangeReader: ...
    def accept_changes(self) -> None: ...
    def accept_changes_through(self, last_change_to_accept: typing.Optional[ContactChange], /) -> None: ...
    def read_batch_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ContactChange]]: ...

@typing.final
class ContactChangeTracker(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactChangeTracker: ...
    def enable(self) -> None: ...
    def get_change_reader(self) -> typing.Optional[ContactChangeReader]: ...
    def reset(self) -> None: ...
    @_property
    def is_tracking(self) -> bool: ...

@typing.final
class ContactChangedDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactChangedDeferral: ...
    def complete(self) -> None: ...

@typing.final
class ContactChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactChangedEventArgs: ...
    def get_deferral(self) -> typing.Optional[ContactChangedDeferral]: ...

@typing.final
class ContactConnectedServiceAccount(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactConnectedServiceAccount: ...
    def __new__(cls: typing.Type[ContactConnectedServiceAccount]) -> ContactConnectedServiceAccount:...
    @_property
    def service_name(self) -> str: ...
    @service_name.setter
    def service_name(self, value: str) -> None: ...
    @_property
    def id(self) -> str: ...
    @id.setter
    def id(self, value: str) -> None: ...

@typing.final
class ContactDate(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactDate: ...
    def __new__(cls: typing.Type[ContactDate]) -> ContactDate:...
    @_property
    def year(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @year.setter
    def year(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def month(self) -> typing.Optional[typing.Optional[winrt.system.UInt32]]: ...
    @month.setter
    def month(self, value: typing.Optional[typing.Optional[winrt.system.UInt32]]) -> None: ...
    @_property
    def kind(self) -> ContactDateKind: ...
    @kind.setter
    def kind(self, value: ContactDateKind) -> None: ...
    @_property
    def description(self) -> str: ...
    @description.setter
    def description(self, value: str) -> None: ...
    @_property
    def day(self) -> typing.Optional[typing.Optional[winrt.system.UInt32]]: ...
    @day.setter
    def day(self, value: typing.Optional[typing.Optional[winrt.system.UInt32]]) -> None: ...

@typing.final
class ContactEmail(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactEmail: ...
    def __new__(cls: typing.Type[ContactEmail]) -> ContactEmail:...
    @_property
    def kind(self) -> ContactEmailKind: ...
    @kind.setter
    def kind(self, value: ContactEmailKind) -> None: ...
    @_property
    def description(self) -> str: ...
    @description.setter
    def description(self, value: str) -> None: ...
    @_property
    def address(self) -> str: ...
    @address.setter
    def address(self, value: str) -> None: ...

@typing.final
class ContactField(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactField: ...
    @typing.overload
    def __new__(cls: typing.Type[ContactField], value: str, type: ContactFieldType) -> ContactField:...
    @typing.overload
    def __new__(cls: typing.Type[ContactField], value: str, type: ContactFieldType, category: ContactFieldCategory) -> ContactField:...
    @typing.overload
    def __new__(cls: typing.Type[ContactField], name: str, value: str, type: ContactFieldType, category: ContactFieldCategory) -> ContactField:...
    @_property
    def category(self) -> ContactFieldCategory: ...
    @_property
    def name(self) -> str: ...
    @_property
    def type(self) -> ContactFieldType: ...
    @_property
    def value(self) -> str: ...

@typing.final
class ContactFieldFactory(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactFieldFactory: ...
    def __new__(cls: typing.Type[ContactFieldFactory]) -> ContactFieldFactory:...
    @typing.overload
    def create_field(self, value: str, type: ContactFieldType, /) -> typing.Optional[ContactField]: ...
    @typing.overload
    def create_field(self, value: str, type: ContactFieldType, category: ContactFieldCategory, /) -> typing.Optional[ContactField]: ...
    @typing.overload
    def create_field(self, name: str, value: str, type: ContactFieldType, category: ContactFieldCategory, /) -> typing.Optional[ContactField]: ...
    @typing.overload
    def create_instant_message(self, user_name: str, /) -> typing.Optional[ContactInstantMessageField]: ...
    @typing.overload
    def create_instant_message(self, user_name: str, category: ContactFieldCategory, /) -> typing.Optional[ContactInstantMessageField]: ...
    @typing.overload
    def create_instant_message(self, user_name: str, category: ContactFieldCategory, service: str, display_text: str, verb: typing.Optional[winrt.windows.foundation.Uri], /) -> typing.Optional[ContactInstantMessageField]: ...
    @typing.overload
    def create_location(self, unstructured_address: str, /) -> typing.Optional[ContactLocationField]: ...
    @typing.overload
    def create_location(self, unstructured_address: str, category: ContactFieldCategory, /) -> typing.Optional[ContactLocationField]: ...
    @typing.overload
    def create_location(self, unstructured_address: str, category: ContactFieldCategory, street: str, city: str, region: str, country: str, postal_code: str, /) -> typing.Optional[ContactLocationField]: ...

@typing.final
class ContactGroup(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactGroup: ...

@typing.final
class ContactInformation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactInformation: ...
    def get_thumbnail_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.IRandomAccessStreamWithContentType]: ...
    def query_custom_fields(self, custom_name: str, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ContactField]]: ...
    @_property
    def custom_fields(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ContactField]]: ...
    @_property
    def emails(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ContactField]]: ...
    @_property
    def instant_messages(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ContactInstantMessageField]]: ...
    @_property
    def locations(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ContactLocationField]]: ...
    @_property
    def name(self) -> str: ...
    @_property
    def phone_numbers(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ContactField]]: ...

@typing.final
class ContactInstantMessageField(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactInstantMessageField: ...
    @typing.overload
    def __new__(cls: typing.Type[ContactInstantMessageField], user_name: str) -> ContactInstantMessageField:...
    @typing.overload
    def __new__(cls: typing.Type[ContactInstantMessageField], user_name: str, category: ContactFieldCategory) -> ContactInstantMessageField:...
    @typing.overload
    def __new__(cls: typing.Type[ContactInstantMessageField], user_name: str, category: ContactFieldCategory, service: str, display_text: str, verb: typing.Optional[winrt.windows.foundation.Uri]) -> ContactInstantMessageField:...
    @_property
    def category(self) -> ContactFieldCategory: ...
    @_property
    def name(self) -> str: ...
    @_property
    def type(self) -> ContactFieldType: ...
    @_property
    def value(self) -> str: ...
    @_property
    def display_text(self) -> str: ...
    @_property
    def launch_uri(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @_property
    def service(self) -> str: ...
    @_property
    def user_name(self) -> str: ...

@typing.final
class ContactJobInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactJobInfo: ...
    def __new__(cls: typing.Type[ContactJobInfo]) -> ContactJobInfo:...
    @_property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> None: ...
    @_property
    def office(self) -> str: ...
    @office.setter
    def office(self, value: str) -> None: ...
    @_property
    def manager(self) -> str: ...
    @manager.setter
    def manager(self, value: str) -> None: ...
    @_property
    def description(self) -> str: ...
    @description.setter
    def description(self, value: str) -> None: ...
    @_property
    def department(self) -> str: ...
    @department.setter
    def department(self, value: str) -> None: ...
    @_property
    def company_yomi_name(self) -> str: ...
    @company_yomi_name.setter
    def company_yomi_name(self, value: str) -> None: ...
    @_property
    def company_name(self) -> str: ...
    @company_name.setter
    def company_name(self, value: str) -> None: ...
    @_property
    def company_address(self) -> str: ...
    @company_address.setter
    def company_address(self, value: str) -> None: ...

@typing.final
class ContactLaunchActionVerbs_Static(type):
    @_property
    def call(cls) -> str: ...
    @_property
    def map(cls) -> str: ...
    @_property
    def message(cls) -> str: ...
    @_property
    def post(cls) -> str: ...
    @_property
    def video_call(cls) -> str: ...

@typing.final
class ContactLaunchActionVerbs(winrt.system.Object, metaclass=ContactLaunchActionVerbs_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactLaunchActionVerbs: ...

@typing.final
class ContactList(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactList: ...
    def delete_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def delete_contact_async(self, contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncAction: ...
    def get_change_tracker(self, identity: str, /) -> typing.Optional[ContactChangeTracker]: ...
    def get_contact_async(self, contact_id: str, /) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    def get_contact_from_remote_id_async(self, remote_id: str, /) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    @typing.overload
    def get_contact_reader(self) -> typing.Optional[ContactReader]: ...
    @typing.overload
    def get_contact_reader(self, options: typing.Optional[ContactQueryOptions], /) -> typing.Optional[ContactReader]: ...
    def get_me_contact_async(self) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    def register_sync_manager_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def save_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def save_contact_async(self, contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncAction: ...
    def add_contact_changed(self, value: winrt.windows.foundation.TypedEventHandler[ContactList, ContactChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_contact_changed(self, value: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def supports_server_search(self) -> bool: ...
    @supports_server_search.setter
    def supports_server_search(self, value: bool) -> None: ...
    @_property
    def is_hidden(self) -> bool: ...
    @is_hidden.setter
    def is_hidden(self, value: bool) -> None: ...
    @_property
    def other_app_write_access(self) -> ContactListOtherAppWriteAccess: ...
    @other_app_write_access.setter
    def other_app_write_access(self, value: ContactListOtherAppWriteAccess) -> None: ...
    @_property
    def display_name(self) -> str: ...
    @display_name.setter
    def display_name(self, value: str) -> None: ...
    @_property
    def other_app_read_access(self) -> ContactListOtherAppReadAccess: ...
    @other_app_read_access.setter
    def other_app_read_access(self, value: ContactListOtherAppReadAccess) -> None: ...
    @_property
    def change_tracker(self) -> typing.Optional[ContactChangeTracker]: ...
    @_property
    def source_display_name(self) -> str: ...
    @_property
    def id(self) -> str: ...
    @_property
    def sync_manager(self) -> typing.Optional[ContactListSyncManager]: ...
    @_property
    def user_data_account_id(self) -> str: ...
    @_property
    def sync_constraints(self) -> typing.Optional[ContactListSyncConstraints]: ...
    @_property
    def limited_write_operations(self) -> typing.Optional[ContactListLimitedWriteOperations]: ...

@typing.final
class ContactListLimitedWriteOperations(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactListLimitedWriteOperations: ...
    def try_create_or_update_contact_async(self, contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_delete_contact_async(self, contact_id: str, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...

@typing.final
class ContactListSyncConstraints(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactListSyncConstraints: ...
    @_property
    def can_sync_descriptions(self) -> bool: ...
    @can_sync_descriptions.setter
    def can_sync_descriptions(self, value: bool) -> None: ...
    @_property
    def max_company_phone_numbers(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_company_phone_numbers.setter
    def max_company_phone_numbers(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_child_relationships(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_child_relationships.setter
    def max_child_relationships(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_business_fax_phone_numbers(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_business_fax_phone_numbers.setter
    def max_business_fax_phone_numbers(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_birthday_dates(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_birthday_dates.setter
    def max_birthday_dates(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_assistant_phone_numbers(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_assistant_phone_numbers.setter
    def max_assistant_phone_numbers(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_other_addresses(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_other_addresses.setter
    def max_other_addresses(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_anniversary_dates(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_anniversary_dates.setter
    def max_anniversary_dates(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_home_addresses(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_home_addresses.setter
    def max_home_addresses(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_other_dates(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_other_dates.setter
    def max_other_dates(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_mobile_phone_numbers(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_mobile_phone_numbers.setter
    def max_mobile_phone_numbers(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_job_info(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_job_info.setter
    def max_job_info(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_home_phone_numbers(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_home_phone_numbers.setter
    def max_home_phone_numbers(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_home_fax_phone_numbers(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_home_fax_phone_numbers.setter
    def max_home_fax_phone_numbers(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_other_email_addresses(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_other_email_addresses.setter
    def max_other_email_addresses(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_personal_email_addresses(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_personal_email_addresses.setter
    def max_personal_email_addresses(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_partner_relationships(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_partner_relationships.setter
    def max_partner_relationships(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_parent_relationships(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_parent_relationships.setter
    def max_parent_relationships(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_pager_phone_numbers(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_pager_phone_numbers.setter
    def max_pager_phone_numbers(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_other_relationships(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_other_relationships.setter
    def max_other_relationships(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_other_phone_numbers(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_other_phone_numbers.setter
    def max_other_phone_numbers(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_radio_phone_numbers(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_radio_phone_numbers.setter
    def max_radio_phone_numbers(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_work_phone_numbers(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_work_phone_numbers.setter
    def max_work_phone_numbers(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_work_email_addresses(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_work_email_addresses.setter
    def max_work_email_addresses(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_work_addresses(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_work_addresses.setter
    def max_work_addresses(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_websites(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_websites.setter
    def max_websites(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_spouse_relationships(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_spouse_relationships.setter
    def max_spouse_relationships(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...
    @_property
    def max_sibling_relationships(self) -> typing.Optional[typing.Optional[winrt.system.Int32]]: ...
    @max_sibling_relationships.setter
    def max_sibling_relationships(self, value: typing.Optional[typing.Optional[winrt.system.Int32]]) -> None: ...

@typing.final
class ContactListSyncManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactListSyncManager: ...
    def sync_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def add_sync_status_changed(self, handler: winrt.windows.foundation.TypedEventHandler[ContactListSyncManager, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_sync_status_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def status(self) -> ContactListSyncStatus: ...
    @status.setter
    def status(self, value: ContactListSyncStatus) -> None: ...
    @_property
    def last_successful_sync_time(self) -> datetime.datetime: ...
    @last_successful_sync_time.setter
    def last_successful_sync_time(self, value: datetime.datetime) -> None: ...
    @_property
    def last_attempted_sync_time(self) -> datetime.datetime: ...
    @last_attempted_sync_time.setter
    def last_attempted_sync_time(self, value: datetime.datetime) -> None: ...

@typing.final
class ContactLocationField(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactLocationField: ...
    @typing.overload
    def __new__(cls: typing.Type[ContactLocationField], unstructured_address: str) -> ContactLocationField:...
    @typing.overload
    def __new__(cls: typing.Type[ContactLocationField], unstructured_address: str, category: ContactFieldCategory) -> ContactLocationField:...
    @typing.overload
    def __new__(cls: typing.Type[ContactLocationField], unstructured_address: str, category: ContactFieldCategory, street: str, city: str, region: str, country: str, postal_code: str) -> ContactLocationField:...
    @_property
    def category(self) -> ContactFieldCategory: ...
    @_property
    def name(self) -> str: ...
    @_property
    def type(self) -> ContactFieldType: ...
    @_property
    def value(self) -> str: ...
    @_property
    def city(self) -> str: ...
    @_property
    def country(self) -> str: ...
    @_property
    def postal_code(self) -> str: ...
    @_property
    def region(self) -> str: ...
    @_property
    def street(self) -> str: ...
    @_property
    def unstructured_address(self) -> str: ...

@typing.final
class ContactManager_Static(type):
    @typing.overload
    def convert_contact_to_v_card_async(cls, contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.RandomAccessStreamReference]: ...
    @typing.overload
    def convert_contact_to_v_card_async(cls, contact: typing.Optional[Contact], max_bytes: winrt.system.UInt32, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.RandomAccessStreamReference]: ...
    def convert_v_card_to_contact_async(cls, v_card: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference], /) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    def get_for_user(cls, user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[ContactManagerForUser]: ...
    def is_show_contact_card_supported(cls) -> bool: ...
    def is_show_delay_loaded_contact_card_supported(cls) -> bool: ...
    def is_show_full_contact_card_supported_async(cls) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def request_annotation_store_async(cls, access_type: ContactAnnotationStoreAccessType, /) -> winrt.windows.foundation.IAsyncOperation[ContactAnnotationStore]: ...
    @typing.overload
    def request_store_async(cls) -> winrt.windows.foundation.IAsyncOperation[ContactStore]: ...
    @typing.overload
    def request_store_async(cls, access_type: ContactStoreAccessType, /) -> winrt.windows.foundation.IAsyncOperation[ContactStore]: ...
    @typing.overload
    def show_contact_card(cls, contact: typing.Optional[Contact], selection: winrt.windows.foundation.Rect, /) -> None: ...
    @typing.overload
    def show_contact_card(cls, contact: typing.Optional[Contact], selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, /) -> None: ...
    @typing.overload
    def show_contact_card(cls, contact: typing.Optional[Contact], selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, contact_card_options: typing.Optional[ContactCardOptions], /) -> None: ...
    @typing.overload
    def show_delay_loaded_contact_card(cls, contact: typing.Optional[Contact], selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, /) -> typing.Optional[ContactCardDelayedDataLoader]: ...
    @typing.overload
    def show_delay_loaded_contact_card(cls, contact: typing.Optional[Contact], selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, contact_card_options: typing.Optional[ContactCardOptions], /) -> typing.Optional[ContactCardDelayedDataLoader]: ...
    def show_full_contact_card(cls, contact: typing.Optional[Contact], full_contact_card_options: typing.Optional[FullContactCardOptions], /) -> None: ...
    @_property
    def system_sort_order(cls) -> ContactNameOrder: ...
    @system_sort_order.setter
    def system_sort_order(cls, value: ContactNameOrder) -> None: ...
    @_property
    def system_display_name_order(cls) -> ContactNameOrder: ...
    @system_display_name_order.setter
    def system_display_name_order(cls, value: ContactNameOrder) -> None: ...
    @_property
    def include_middle_name_in_system_display_and_sort(cls) -> bool: ...
    @include_middle_name_in_system_display_and_sort.setter
    def include_middle_name_in_system_display_and_sort(cls, value: bool) -> None: ...

@typing.final
class ContactManager(winrt.system.Object, metaclass=ContactManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactManager: ...

@typing.final
class ContactManagerForUser(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactManagerForUser: ...
    @typing.overload
    def convert_contact_to_v_card_async(self, contact: typing.Optional[Contact], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.RandomAccessStreamReference]: ...
    @typing.overload
    def convert_contact_to_v_card_async(self, contact: typing.Optional[Contact], max_bytes: winrt.system.UInt32, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.streams.RandomAccessStreamReference]: ...
    def convert_v_card_to_contact_async(self, v_card: typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference], /) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    def request_annotation_store_async(self, access_type: ContactAnnotationStoreAccessType, /) -> winrt.windows.foundation.IAsyncOperation[ContactAnnotationStore]: ...
    def request_store_async(self, access_type: ContactStoreAccessType, /) -> winrt.windows.foundation.IAsyncOperation[ContactStore]: ...
    def show_full_contact_card(self, contact: typing.Optional[Contact], full_contact_card_options: typing.Optional[FullContactCardOptions], /) -> None: ...
    @_property
    def system_sort_order(self) -> ContactNameOrder: ...
    @system_sort_order.setter
    def system_sort_order(self, value: ContactNameOrder) -> None: ...
    @_property
    def system_display_name_order(self) -> ContactNameOrder: ...
    @system_display_name_order.setter
    def system_display_name_order(self, value: ContactNameOrder) -> None: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...

@typing.final
class ContactMatchReason(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactMatchReason: ...
    @_property
    def field(self) -> ContactMatchReasonKind: ...
    @_property
    def segments(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.data.text.TextSegment]]: ...
    @_property
    def text(self) -> str: ...

@typing.final
class ContactPanel(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactPanel: ...
    def close_panel(self) -> None: ...
    def add_closing(self, handler: winrt.windows.foundation.TypedEventHandler[ContactPanel, ContactPanelClosingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closing(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_launch_full_app_requested(self, handler: winrt.windows.foundation.TypedEventHandler[ContactPanel, ContactPanelLaunchFullAppRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_launch_full_app_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def header_color(self) -> typing.Optional[typing.Optional[winrt.windows.ui.Color]]: ...
    @header_color.setter
    def header_color(self, value: typing.Optional[typing.Optional[winrt.windows.ui.Color]]) -> None: ...

@typing.final
class ContactPanelClosingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactPanelClosingEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...

@typing.final
class ContactPanelLaunchFullAppRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactPanelLaunchFullAppRequestedEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class ContactPhone(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactPhone: ...
    def __new__(cls: typing.Type[ContactPhone]) -> ContactPhone:...
    @_property
    def number(self) -> str: ...
    @number.setter
    def number(self, value: str) -> None: ...
    @_property
    def kind(self) -> ContactPhoneKind: ...
    @kind.setter
    def kind(self, value: ContactPhoneKind) -> None: ...
    @_property
    def description(self) -> str: ...
    @description.setter
    def description(self, value: str) -> None: ...

@typing.final
class ContactPicker_Static(type):
    def create_for_user(cls, user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[ContactPicker]: ...
    def is_supported_async(cls) -> winrt.windows.foundation.IAsyncOperation[bool]: ...

@typing.final
class ContactPicker(winrt.system.Object, metaclass=ContactPicker_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactPicker: ...
    def __new__(cls: typing.Type[ContactPicker]) -> ContactPicker:...
    def pick_contact_async(self) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    def pick_contacts_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[Contact]]: ...
    def pick_multiple_contacts_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ContactInformation]]: ...
    def pick_single_contact_async(self) -> winrt.windows.foundation.IAsyncOperation[ContactInformation]: ...
    @_property
    def selection_mode(self) -> ContactSelectionMode: ...
    @selection_mode.setter
    def selection_mode(self, value: ContactSelectionMode) -> None: ...
    @_property
    def commit_button_text(self) -> str: ...
    @commit_button_text.setter
    def commit_button_text(self, value: str) -> None: ...
    @_property
    def desired_fields(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...
    @_property
    def desired_fields_with_contact_field_type(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[ContactFieldType]]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...

@typing.final
class ContactQueryOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactQueryOptions: ...
    @typing.overload
    def __new__(cls: typing.Type[ContactQueryOptions], text: str) -> ContactQueryOptions:...
    @typing.overload
    def __new__(cls: typing.Type[ContactQueryOptions], text: str, fields: ContactQuerySearchFields) -> ContactQueryOptions:...
    @typing.overload
    def __new__(cls: typing.Type[ContactQueryOptions]) -> ContactQueryOptions:...
    @_property
    def include_contacts_from_hidden_lists(self) -> bool: ...
    @include_contacts_from_hidden_lists.setter
    def include_contacts_from_hidden_lists(self, value: bool) -> None: ...
    @_property
    def desired_operations(self) -> ContactAnnotationOperations: ...
    @desired_operations.setter
    def desired_operations(self, value: ContactAnnotationOperations) -> None: ...
    @_property
    def desired_fields(self) -> ContactQueryDesiredFields: ...
    @desired_fields.setter
    def desired_fields(self, value: ContactQueryDesiredFields) -> None: ...
    @_property
    def annotation_list_ids(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...
    @_property
    def contact_list_ids(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...
    @_property
    def text_search(self) -> typing.Optional[ContactQueryTextSearch]: ...

@typing.final
class ContactQueryTextSearch(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactQueryTextSearch: ...
    @_property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> None: ...
    @_property
    def search_scope(self) -> ContactQuerySearchScope: ...
    @search_scope.setter
    def search_scope(self, value: ContactQuerySearchScope) -> None: ...
    @_property
    def fields(self) -> ContactQuerySearchFields: ...
    @fields.setter
    def fields(self, value: ContactQuerySearchFields) -> None: ...

@typing.final
class ContactReader(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactReader: ...
    def get_matching_properties_with_match_reason(self, contact: typing.Optional[Contact], /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ContactMatchReason]]: ...
    def read_batch_async(self) -> winrt.windows.foundation.IAsyncOperation[ContactBatch]: ...

@typing.final
class ContactSignificantOther(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactSignificantOther: ...
    def __new__(cls: typing.Type[ContactSignificantOther]) -> ContactSignificantOther:...
    @_property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @_property
    def description(self) -> str: ...
    @description.setter
    def description(self, value: str) -> None: ...
    @_property
    def relationship(self) -> ContactRelationship: ...
    @relationship.setter
    def relationship(self, value: ContactRelationship) -> None: ...

@typing.final
class ContactStore(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactStore: ...
    @typing.overload
    def create_contact_list_async(self, display_name: str, /) -> winrt.windows.foundation.IAsyncOperation[ContactList]: ...
    @typing.overload
    def create_contact_list_async(self, display_name: str, user_data_account_id: str, /) -> winrt.windows.foundation.IAsyncOperation[ContactList]: ...
    def find_contact_lists_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[ContactList]]: ...
    @typing.overload
    def find_contacts_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[Contact]]: ...
    @typing.overload
    def find_contacts_async(self, search_text: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[Contact]]: ...
    def get_change_tracker(self, identity: str, /) -> typing.Optional[ContactChangeTracker]: ...
    def get_contact_async(self, contact_id: str, /) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    def get_contact_list_async(self, contact_list_id: str, /) -> winrt.windows.foundation.IAsyncOperation[ContactList]: ...
    @typing.overload
    def get_contact_reader(self) -> typing.Optional[ContactReader]: ...
    @typing.overload
    def get_contact_reader(self, options: typing.Optional[ContactQueryOptions], /) -> typing.Optional[ContactReader]: ...
    def get_me_contact_async(self) -> winrt.windows.foundation.IAsyncOperation[Contact]: ...
    def add_contact_changed(self, value: winrt.windows.foundation.TypedEventHandler[ContactStore, ContactChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_contact_changed(self, value: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def aggregate_contact_manager(self) -> typing.Optional[AggregateContactManager]: ...
    @_property
    def change_tracker(self) -> typing.Optional[ContactChangeTracker]: ...

@typing.final
class ContactStoreNotificationTriggerDetails(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactStoreNotificationTriggerDetails: ...

@typing.final
class ContactWebsite(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactWebsite: ...
    def __new__(cls: typing.Type[ContactWebsite]) -> ContactWebsite:...
    @_property
    def uri(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @uri.setter
    def uri(self, value: typing.Optional[winrt.windows.foundation.Uri]) -> None: ...
    @_property
    def description(self) -> str: ...
    @description.setter
    def description(self, value: str) -> None: ...
    @_property
    def raw_value(self) -> str: ...
    @raw_value.setter
    def raw_value(self, value: str) -> None: ...

@typing.final
class FullContactCardOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FullContactCardOptions: ...
    def __new__(cls: typing.Type[FullContactCardOptions]) -> FullContactCardOptions:...
    @_property
    def desired_remaining_view(self) -> winrt.windows.ui.viewmanagement.ViewSizePreference: ...
    @desired_remaining_view.setter
    def desired_remaining_view(self, value: winrt.windows.ui.viewmanagement.ViewSizePreference) -> None: ...

@typing.final
class KnownContactField_Static(type):
    def convert_name_to_type(cls, name: str, /) -> ContactFieldType: ...
    def convert_type_to_name(cls, type: ContactFieldType, /) -> str: ...
    @_property
    def email(cls) -> str: ...
    @_property
    def instant_message(cls) -> str: ...
    @_property
    def location(cls) -> str: ...
    @_property
    def phone_number(cls) -> str: ...

@typing.final
class KnownContactField(winrt.system.Object, metaclass=KnownContactField_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> KnownContactField: ...

@typing.final
class PinnedContactIdsQueryResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PinnedContactIdsQueryResult: ...
    @_property
    def contact_ids(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...

@typing.final
class PinnedContactManager_Static(type):
    def get_default(cls) -> typing.Optional[PinnedContactManager]: ...
    def get_for_user(cls, user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[PinnedContactManager]: ...
    def is_supported(cls) -> bool: ...

@typing.final
class PinnedContactManager(winrt.system.Object, metaclass=PinnedContactManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PinnedContactManager: ...
    def get_pinned_contact_ids_async(self) -> winrt.windows.foundation.IAsyncOperation[PinnedContactIdsQueryResult]: ...
    def is_contact_pinned(self, contact: typing.Optional[Contact], surface: PinnedContactSurface, /) -> bool: ...
    def is_pin_surface_supported(self, surface: PinnedContactSurface, /) -> bool: ...
    def request_pin_contact_async(self, contact: typing.Optional[Contact], surface: PinnedContactSurface, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def request_pin_contacts_async(self, contacts: typing.Iterable[Contact], surface: PinnedContactSurface, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def request_unpin_contact_async(self, contact: typing.Optional[Contact], surface: PinnedContactSurface, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def signal_contact_activity(self, contact: typing.Optional[Contact], /) -> None: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...

@typing.final
class IContactField(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContactField: ...
    @_property
    def category(self) -> ContactFieldCategory: ...
    @_property
    def name(self) -> str: ...
    @_property
    def type(self) -> ContactFieldType: ...
    @_property
    def value(self) -> str: ...

@typing.final
class IContactFieldFactory(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContactFieldFactory: ...
    @typing.overload
    def create_field(self, value: str, type: ContactFieldType, /) -> typing.Optional[ContactField]: ...
    @typing.overload
    def create_field(self, value: str, type: ContactFieldType, category: ContactFieldCategory, /) -> typing.Optional[ContactField]: ...
    @typing.overload
    def create_field(self, name: str, value: str, type: ContactFieldType, category: ContactFieldCategory, /) -> typing.Optional[ContactField]: ...

@typing.final
class IContactInstantMessageFieldFactory(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContactInstantMessageFieldFactory: ...
    @typing.overload
    def create_instant_message(self, user_name: str, /) -> typing.Optional[ContactInstantMessageField]: ...
    @typing.overload
    def create_instant_message(self, user_name: str, category: ContactFieldCategory, /) -> typing.Optional[ContactInstantMessageField]: ...
    @typing.overload
    def create_instant_message(self, user_name: str, category: ContactFieldCategory, service: str, display_text: str, verb: typing.Optional[winrt.windows.foundation.Uri], /) -> typing.Optional[ContactInstantMessageField]: ...

@typing.final
class IContactLocationFieldFactory(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IContactLocationFieldFactory: ...
    @typing.overload
    def create_location(self, unstructured_address: str, /) -> typing.Optional[ContactLocationField]: ...
    @typing.overload
    def create_location(self, unstructured_address: str, category: ContactFieldCategory, /) -> typing.Optional[ContactLocationField]: ...
    @typing.overload
    def create_location(self, unstructured_address: str, category: ContactFieldCategory, street: str, city: str, region: str, country: str, postal_code: str, /) -> typing.Optional[ContactLocationField]: ...

