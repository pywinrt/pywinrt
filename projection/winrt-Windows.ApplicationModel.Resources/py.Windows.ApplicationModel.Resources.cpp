// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.ApplicationModel.Resources.h"


namespace py::cpp::Windows::ApplicationModel::Resources
{
    // ----- ResourceLoader class --------------------

    static PyObject* _new_ResourceLoader(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::ApplicationModel::Resources::ResourceLoader instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::ApplicationModel::Resources::ResourceLoader instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_ResourceLoader(py::wrapper::Windows::ApplicationModel::Resources::ResourceLoader* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ResourceLoader_GetDefaultPriPath(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.ResourceLoader", L"GetDefaultPriPath", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Resources::ResourceLoader::GetDefaultPriPath(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceLoader_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.ResourceLoader", L"GetForCurrentView", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Resources::ResourceLoader::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.ResourceLoader", L"GetForCurrentView", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Resources::ResourceLoader::GetForCurrentView(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceLoader_GetForUIContext(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.ResourceLoader", L"GetForUIContext", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::UIContext>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Resources::ResourceLoader::GetForUIContext(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceLoader_GetForViewIndependentUse(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.ResourceLoader", L"GetForViewIndependentUse", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Resources::ResourceLoader::GetForViewIndependentUse());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.ResourceLoader", L"GetForViewIndependentUse", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Resources::ResourceLoader::GetForViewIndependentUse(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceLoader_GetString(py::wrapper::Windows::ApplicationModel::Resources::ResourceLoader* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.ResourceLoader", L"GetString", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceLoader_GetStringForReference(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.ResourceLoader", L"GetStringForReference", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::Resources::ResourceLoader::GetStringForReference(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ResourceLoader_GetStringForUri(py::wrapper::Windows::ApplicationModel::Resources::ResourceLoader* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Resources.ResourceLoader", L"GetStringForUri", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(self->obj.GetStringForUri(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_ResourceLoader(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::Resources::ResourceLoader>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ResourceLoader(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Resources::ResourceLoader>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ResourceLoader[] = {
        { "get_string", reinterpret_cast<PyCFunction>(ResourceLoader_GetString), METH_VARARGS, nullptr },
        { "get_string_for_uri", reinterpret_cast<PyCFunction>(ResourceLoader_GetStringForUri), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ResourceLoader, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ResourceLoader), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ResourceLoader[] = {
        { }
    };

    static PyType_Slot _type_slots_ResourceLoader[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ResourceLoader) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ResourceLoader) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ResourceLoader) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ResourceLoader) },
        { },
    };

    static PyType_Spec type_spec_ResourceLoader =
    {
        "winrt._winrt_windows_applicationmodel_resources.ResourceLoader",
        sizeof(py::wrapper::Windows::ApplicationModel::Resources::ResourceLoader),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ResourceLoader
    };

    static PyGetSetDef getset_ResourceLoader_Static[] = {
        { }
    };

    static PyMethodDef methods_ResourceLoader_Static[] = {
        { "get_default_pri_path", reinterpret_cast<PyCFunction>(ResourceLoader_GetDefaultPriPath), METH_VARARGS, nullptr },
        { "get_for_current_view", reinterpret_cast<PyCFunction>(ResourceLoader_GetForCurrentView), METH_VARARGS, nullptr },
        { "get_for_u_i_context", reinterpret_cast<PyCFunction>(ResourceLoader_GetForUIContext), METH_VARARGS, nullptr },
        { "get_for_view_independent_use", reinterpret_cast<PyCFunction>(ResourceLoader_GetForViewIndependentUse), METH_VARARGS, nullptr },
        { "get_string_for_reference", reinterpret_cast<PyCFunction>(ResourceLoader_GetStringForReference), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_ResourceLoader_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ResourceLoader_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_ResourceLoader_Static) },
        { }
    };

    static PyType_Spec type_spec_ResourceLoader_Static =
    {
        "winrt._winrt_windows_applicationmodel_resources.ResourceLoader_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_ResourceLoader_Static
    };

    // ----- Windows.ApplicationModel.Resources Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::ApplicationModel::Resources");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_applicationmodel_resources",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::ApplicationModel::Resources

PyMODINIT_FUNC PyInit__winrt_windows_applicationmodel_resources(void) noexcept
{
    using namespace py::cpp::Windows::ApplicationModel::Resources;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_ResourceLoader_Static{PyType_FromSpec(&type_spec_ResourceLoader_Static)};
    if (!type_ResourceLoader_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ResourceLoader, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ResourceLoader_Static.get())) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
