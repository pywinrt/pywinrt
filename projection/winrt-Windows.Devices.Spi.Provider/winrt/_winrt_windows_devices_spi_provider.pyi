# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections

from winrt.windows.devices.spi.provider import ProviderSpiMode, ProviderSpiSharingMode

Self = typing.TypeVar('Self')

@typing.final
class ProviderSpiConnectionSettings(winrt.system.Object):
    def __new__(cls: typing.Type[Self], chip_select_line: winrt.system.Int32) -> Self: ...
    # Windows.Devices.Spi.Provider.ProviderSpiSharingMode Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings::get_SharingMode()
    @_property
    def sharing_mode(self) -> ProviderSpiSharingMode: ...
    # System.Void Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings::put_SharingMode(Windows.Devices.Spi.Provider.ProviderSpiSharingMode)
    @sharing_mode.setter
    def sharing_mode(self, value: ProviderSpiSharingMode) -> None: ...
    # Windows.Devices.Spi.Provider.ProviderSpiMode Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings::get_Mode()
    @_property
    def mode(self) -> ProviderSpiMode: ...
    # System.Void Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings::put_Mode(Windows.Devices.Spi.Provider.ProviderSpiMode)
    @mode.setter
    def mode(self, value: ProviderSpiMode) -> None: ...
    # System.Int32 Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings::get_DataBitLength()
    @_property
    def data_bit_length(self) -> winrt.system.Int32: ...
    # System.Void Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings::put_DataBitLength(System.Int32)
    @data_bit_length.setter
    def data_bit_length(self, value: winrt.system.Int32) -> None: ...
    # System.Int32 Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings::get_ClockFrequency()
    @_property
    def clock_frequency(self) -> winrt.system.Int32: ...
    # System.Void Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings::put_ClockFrequency(System.Int32)
    @clock_frequency.setter
    def clock_frequency(self, value: winrt.system.Int32) -> None: ...
    # System.Int32 Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings::get_ChipSelectLine()
    @_property
    def chip_select_line(self) -> winrt.system.Int32: ...
    # System.Void Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings::put_ChipSelectLine(System.Int32)
    @chip_select_line.setter
    def chip_select_line(self, value: winrt.system.Int32) -> None: ...

class ISpiControllerProvider(winrt._winrt.IInspectable):
    # Windows.Devices.Spi.Provider.ISpiDeviceProvider Windows.Devices.Spi.Provider.ISpiControllerProvider::GetDeviceProvider(Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings)
    @abstractmethod
    def get_device_provider(self, settings: ProviderSpiConnectionSettings, /) -> ISpiDeviceProvider: ...

class ISpiDeviceProvider(windows_foundation.IClosable, winrt._winrt.IInspectable):
    # System.Void Windows.Devices.Spi.Provider.ISpiDeviceProvider::Read(System.Byte[])
    @abstractmethod
    def read(self, buffer: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.WriteableBuffer], /) -> None: ...
    # System.Void Windows.Devices.Spi.Provider.ISpiDeviceProvider::TransferFullDuplex(System.Byte[],System.Byte[])
    @abstractmethod
    def transfer_full_duplex(self, write_buffer: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], read_buffer: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.WriteableBuffer], /) -> None: ...
    # System.Void Windows.Devices.Spi.Provider.ISpiDeviceProvider::TransferSequential(System.Byte[],System.Byte[])
    @abstractmethod
    def transfer_sequential(self, write_buffer: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], read_buffer: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.WriteableBuffer], /) -> None: ...
    # System.Void Windows.Devices.Spi.Provider.ISpiDeviceProvider::Write(System.Byte[])
    @abstractmethod
    def write(self, buffer: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...
    # Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings Windows.Devices.Spi.Provider.ISpiDeviceProvider::get_ConnectionSettings()
    @_property
    @abstractmethod
    def connection_settings(self) -> ProviderSpiConnectionSettings: ...
    # System.String Windows.Devices.Spi.Provider.ISpiDeviceProvider::get_DeviceId()
    @_property
    @abstractmethod
    def device_id(self) -> str: ...

class ISpiProvider(winrt._winrt.IInspectable):
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Spi.Provider.ISpiControllerProvider>> Windows.Devices.Spi.Provider.ISpiProvider::GetControllersAsync()
    @abstractmethod
    def get_controllers_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[ISpiControllerProvider]]: ...

