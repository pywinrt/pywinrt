// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "py.Windows.Devices.Spi.Provider.h"

namespace py::cpp::Windows::Devices::Spi::Provider
{
    // ----- ProviderSpiConnectionSettings class --------------------

    static PyObject* _new_ProviderSpiConnectionSettings(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                winrt::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings instance{param0};
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_ProviderSpiConnectionSettings(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ProviderSpiConnectionSettings_get_SharingMode(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings", L"SharingMode");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SharingMode();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProviderSpiConnectionSettings_put_SharingMode(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings", L"SharingMode");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Devices::Spi::Provider::ProviderSpiSharingMode>(arg);

            {
                auto _gil = release_gil();
                self->obj.SharingMode(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProviderSpiConnectionSettings_get_Mode(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings", L"Mode");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Mode();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProviderSpiConnectionSettings_put_Mode(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings", L"Mode");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Devices::Spi::Provider::ProviderSpiMode>(arg);

            {
                auto _gil = release_gil();
                self->obj.Mode(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProviderSpiConnectionSettings_get_DataBitLength(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings", L"DataBitLength");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.DataBitLength();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProviderSpiConnectionSettings_put_DataBitLength(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings", L"DataBitLength");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<int32_t>(arg);

            {
                auto _gil = release_gil();
                self->obj.DataBitLength(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProviderSpiConnectionSettings_get_ClockFrequency(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings", L"ClockFrequency");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.ClockFrequency();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProviderSpiConnectionSettings_put_ClockFrequency(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings", L"ClockFrequency");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<int32_t>(arg);

            {
                auto _gil = release_gil();
                self->obj.ClockFrequency(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProviderSpiConnectionSettings_get_ChipSelectLine(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings", L"ChipSelectLine");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.ChipSelectLine();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProviderSpiConnectionSettings_put_ChipSelectLine(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings", L"ChipSelectLine");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<int32_t>(arg);

            {
                auto _gil = release_gil();
                self->obj.ChipSelectLine(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_ProviderSpiConnectionSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ProviderSpiConnectionSettings(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProviderSpiConnectionSettings[] = {
        { "_assign_array_", _assign_array_ProviderSpiConnectionSettings, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ProviderSpiConnectionSettings), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_ProviderSpiConnectionSettings[] = {
        { "sharing_mode", reinterpret_cast<getter>(ProviderSpiConnectionSettings_get_SharingMode), reinterpret_cast<setter>(ProviderSpiConnectionSettings_put_SharingMode), nullptr, nullptr },
        { "mode", reinterpret_cast<getter>(ProviderSpiConnectionSettings_get_Mode), reinterpret_cast<setter>(ProviderSpiConnectionSettings_put_Mode), nullptr, nullptr },
        { "data_bit_length", reinterpret_cast<getter>(ProviderSpiConnectionSettings_get_DataBitLength), reinterpret_cast<setter>(ProviderSpiConnectionSettings_put_DataBitLength), nullptr, nullptr },
        { "clock_frequency", reinterpret_cast<getter>(ProviderSpiConnectionSettings_get_ClockFrequency), reinterpret_cast<setter>(ProviderSpiConnectionSettings_put_ClockFrequency), nullptr, nullptr },
        { "chip_select_line", reinterpret_cast<getter>(ProviderSpiConnectionSettings_get_ChipSelectLine), reinterpret_cast<setter>(ProviderSpiConnectionSettings_put_ChipSelectLine), nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_ProviderSpiConnectionSettings[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ProviderSpiConnectionSettings) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ProviderSpiConnectionSettings) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ProviderSpiConnectionSettings) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ProviderSpiConnectionSettings) },
        { }};

    static PyType_Spec type_spec_ProviderSpiConnectionSettings = {
        "winrt._winrt_windows_devices_spi_provider.ProviderSpiConnectionSettings",
        sizeof(py::wrapper::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProviderSpiConnectionSettings};

    // ----- ISpiControllerProvider interface --------------------

    static PyObject* _new_ISpiControllerProvider(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Devices::Spi::Provider::ISpiControllerProvider>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Devices::Spi::Provider::ISpiControllerProvider>::type_name);
        return nullptr;
    }

    static void _dealloc_ISpiControllerProvider(py::wrapper::Windows::Devices::Spi::Provider::ISpiControllerProvider* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ISpiControllerProvider_GetDeviceProvider(py::wrapper::Windows::Devices::Spi::Provider::ISpiControllerProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.Spi.Provider.ISpiControllerProvider", L"GetDeviceProvider", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.GetDeviceProvider(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_ISpiControllerProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Spi::Provider::ISpiControllerProvider>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ISpiControllerProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Spi::Provider::ISpiControllerProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ISpiControllerProvider[] = {
        { "get_device_provider", reinterpret_cast<PyCFunction>(ISpiControllerProvider_GetDeviceProvider), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ISpiControllerProvider, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ISpiControllerProvider), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_ISpiControllerProvider[] = {
        { }};

    static PyType_Slot _type_slots_ISpiControllerProvider[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ISpiControllerProvider) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ISpiControllerProvider) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ISpiControllerProvider) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ISpiControllerProvider) },
        { }};

    static PyType_Spec type_spec_ISpiControllerProvider = {
        "winrt._winrt_windows_devices_spi_provider.ISpiControllerProvider",
        sizeof(py::wrapper::Windows::Devices::Spi::Provider::ISpiControllerProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ISpiControllerProvider};

    struct ImplementsISpiControllerProvider : py::ImplementsInterfaceT<ImplementsISpiControllerProvider, winrt::Windows::Devices::Spi::Provider::ISpiControllerProvider>
    {
        ImplementsISpiControllerProvider() = delete;
        ImplementsISpiControllerProvider(PyObject* py_obj, winrt::impl::inspectable_abi* runtime_class) : py::ImplementsInterfaceT<ImplementsISpiControllerProvider, winrt::Windows::Devices::Spi::Provider::ISpiControllerProvider>(py_obj, runtime_class)
        {
        }

        auto GetDeviceProvider(winrt::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings const& param0)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "get_device_provider")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallOneArg(method.get(), py_param0.get())};
                if (!return_value)
                {
                    throw python_exception();
                }

                return py::convert_to<winrt::Windows::Devices::Spi::Provider::ISpiDeviceProvider>(return_value.get());
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }
    };

    static PyObject* _guid_ImplementsISpiControllerProvider(PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::guid_of<winrt::Windows::Devices::Spi::Provider::ISpiControllerProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _make_ImplementsISpiControllerProvider(PyObject* /*unused*/, PyObject* args) noexcept
    {
        try
        {
            PyObject* py_obj;
            winrt::impl::inspectable_abi* runtime_class;

            if (!PyArg_ParseTuple(args, "On", &py_obj, &runtime_class))
            {
                return nullptr;
            }

            auto iface{std::make_unique<ImplementsISpiControllerProvider>(py_obj, runtime_class)};

            return PyLong_FromVoidPtr(iface.release());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef methods_ImplementsISpiControllerProvider[] = {
        { "_guid_", reinterpret_cast<PyCFunction>(_guid_ImplementsISpiControllerProvider), METH_NOARGS | METH_STATIC, nullptr },
        { "_make_", reinterpret_cast<PyCFunction>(_make_ImplementsISpiControllerProvider), METH_VARARGS | METH_STATIC, nullptr },
        { }};

    static PyType_Slot type_slots_ImplementsISpiControllerProvider[] = {
        { Py_tp_methods, reinterpret_cast<void*>(methods_ImplementsISpiControllerProvider) },
        { }};

    static PyType_Spec type_spec_ImplementsISpiControllerProvider = {
        "winrt._winrt_windows_devices_spi_provider.ImplementsISpiControllerProvider",
        0,
        0,
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,
        type_slots_ImplementsISpiControllerProvider};

    // ----- ISpiDeviceProvider interface --------------------

    static PyObject* _new_ISpiDeviceProvider(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Devices::Spi::Provider::ISpiDeviceProvider>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Devices::Spi::Provider::ISpiDeviceProvider>::type_name);
        return nullptr;
    }

    static void _dealloc_ISpiDeviceProvider(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ISpiDeviceProvider_Close(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Foundation.IClosable", L"Close", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                {
                    auto _gil = release_gil();
                    self->obj.Close();
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISpiDeviceProvider_Read(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.Spi.Provider.ISpiDeviceProvider", L"Read", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                auto param0 = py::convert_to<py::pybuf_view<uint8_t, true>>(args, 0);

                {
                    auto _gil = release_gil();
                    self->obj.Read(param0);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISpiDeviceProvider_TransferFullDuplex(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.Spi.Provider.ISpiDeviceProvider", L"TransferFullDuplex", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<py::pybuf_view<uint8_t, false>>(args, 0);
                auto param1 = py::convert_to<py::pybuf_view<uint8_t, true>>(args, 1);

                {
                    auto _gil = release_gil();
                    self->obj.TransferFullDuplex(param0, param1);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISpiDeviceProvider_TransferSequential(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.Spi.Provider.ISpiDeviceProvider", L"TransferSequential", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<py::pybuf_view<uint8_t, false>>(args, 0);
                auto param1 = py::convert_to<py::pybuf_view<uint8_t, true>>(args, 1);

                {
                    auto _gil = release_gil();
                    self->obj.TransferSequential(param0, param1);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISpiDeviceProvider_Write(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.Spi.Provider.ISpiDeviceProvider", L"Write", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<py::pybuf_view<uint8_t, false>>(args, 0);

                {
                    auto _gil = release_gil();
                    self->obj.Write(param0);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISpiDeviceProvider_get_ConnectionSettings(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Spi.Provider.ISpiDeviceProvider", L"ConnectionSettings");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.ConnectionSettings();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ISpiDeviceProvider_get_DeviceId(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Spi.Provider.ISpiDeviceProvider", L"DeviceId");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.DeviceId();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ISpiDeviceProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Spi::Provider::ISpiDeviceProvider>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ISpiDeviceProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Spi::Provider::ISpiDeviceProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_ISpiDeviceProvider(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_ISpiDeviceProvider(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            {
                auto _gil = py::release_gil();
                self->obj.Close();
            }

            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ISpiDeviceProvider[] = {
        { "close", reinterpret_cast<PyCFunction>(ISpiDeviceProvider_Close), METH_VARARGS, nullptr },
        { "read", reinterpret_cast<PyCFunction>(ISpiDeviceProvider_Read), METH_VARARGS, nullptr },
        { "transfer_full_duplex", reinterpret_cast<PyCFunction>(ISpiDeviceProvider_TransferFullDuplex), METH_VARARGS, nullptr },
        { "transfer_sequential", reinterpret_cast<PyCFunction>(ISpiDeviceProvider_TransferSequential), METH_VARARGS, nullptr },
        { "write", reinterpret_cast<PyCFunction>(ISpiDeviceProvider_Write), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ISpiDeviceProvider, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ISpiDeviceProvider), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_ISpiDeviceProvider), METH_NOARGS, nullptr },
        { "__exit__", reinterpret_cast<PyCFunction>(_exit_ISpiDeviceProvider), METH_VARARGS, nullptr },
        { }};

    static PyGetSetDef _getset_ISpiDeviceProvider[] = {
        { "connection_settings", reinterpret_cast<getter>(ISpiDeviceProvider_get_ConnectionSettings), nullptr, nullptr, nullptr },
        { "device_id", reinterpret_cast<getter>(ISpiDeviceProvider_get_DeviceId), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_ISpiDeviceProvider[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ISpiDeviceProvider) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ISpiDeviceProvider) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ISpiDeviceProvider) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ISpiDeviceProvider) },
        { }};

    static PyType_Spec type_spec_ISpiDeviceProvider = {
        "winrt._winrt_windows_devices_spi_provider.ISpiDeviceProvider",
        sizeof(py::wrapper::Windows::Devices::Spi::Provider::ISpiDeviceProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ISpiDeviceProvider};

    struct ImplementsISpiDeviceProvider : py::ImplementsInterfaceT<ImplementsISpiDeviceProvider, winrt::Windows::Devices::Spi::Provider::ISpiDeviceProvider>
    {
        ImplementsISpiDeviceProvider() = delete;
        ImplementsISpiDeviceProvider(PyObject* py_obj, winrt::impl::inspectable_abi* runtime_class) : py::ImplementsInterfaceT<ImplementsISpiDeviceProvider, winrt::Windows::Devices::Spi::Provider::ISpiDeviceProvider>(py_obj, runtime_class)
        {
        }

        auto Close()
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "close")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallNoArgs(method.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto Read(winrt::array_view<uint8_t> param0)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "read")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallOneArg(method.get(), py_param0.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto TransferFullDuplex(winrt::array_view<uint8_t const> param0, winrt::array_view<uint8_t> param1)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "transfer_full_duplex")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param1{py::convert(param1)};
                if (!py_param1)
                {
                    throw python_exception();
                }

                py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                if (!args)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallObject(method.get(), args.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto TransferSequential(winrt::array_view<uint8_t const> param0, winrt::array_view<uint8_t> param1)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "transfer_sequential")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param1{py::convert(param1)};
                if (!py_param1)
                {
                    throw python_exception();
                }

                py::pyobj_handle args{PyTuple_Pack(2, py_param0.get(), py_param1.get())};
                if (!args)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallObject(method.get(), args.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto Write(winrt::array_view<uint8_t const> param0)
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "write")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle py_param0{py::convert(param0)};
                if (!py_param0)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallOneArg(method.get(), py_param0.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto ConnectionSettings()
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle value{PyObject_GetAttrString(self.get(), "connection_settings")};
                if (!value)
                {
                    throw python_exception();
                }

                return py::convert_to<winrt::Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings>(value.get());
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto DeviceId()
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle value{PyObject_GetAttrString(self.get(), "device_id")};
                if (!value)
                {
                    throw python_exception();
                }

                return py::convert_to<winrt::hstring>(value.get());
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }
    };

    static PyObject* _guid_ImplementsISpiDeviceProvider(PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::guid_of<winrt::Windows::Devices::Spi::Provider::ISpiDeviceProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _make_ImplementsISpiDeviceProvider(PyObject* /*unused*/, PyObject* args) noexcept
    {
        try
        {
            PyObject* py_obj;
            winrt::impl::inspectable_abi* runtime_class;

            if (!PyArg_ParseTuple(args, "On", &py_obj, &runtime_class))
            {
                return nullptr;
            }

            auto iface{std::make_unique<ImplementsISpiDeviceProvider>(py_obj, runtime_class)};

            return PyLong_FromVoidPtr(iface.release());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef methods_ImplementsISpiDeviceProvider[] = {
        { "_guid_", reinterpret_cast<PyCFunction>(_guid_ImplementsISpiDeviceProvider), METH_NOARGS | METH_STATIC, nullptr },
        { "_make_", reinterpret_cast<PyCFunction>(_make_ImplementsISpiDeviceProvider), METH_VARARGS | METH_STATIC, nullptr },
        { }};

    static PyType_Slot type_slots_ImplementsISpiDeviceProvider[] = {
        { Py_tp_methods, reinterpret_cast<void*>(methods_ImplementsISpiDeviceProvider) },
        { }};

    static PyType_Spec type_spec_ImplementsISpiDeviceProvider = {
        "winrt._winrt_windows_devices_spi_provider.ImplementsISpiDeviceProvider",
        0,
        0,
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,
        type_slots_ImplementsISpiDeviceProvider};

    // ----- ISpiProvider interface --------------------

    static PyObject* _new_ISpiProvider(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Devices::Spi::Provider::ISpiProvider>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Devices::Spi::Provider::ISpiProvider>::type_name);
        return nullptr;
    }

    static void _dealloc_ISpiProvider(py::wrapper::Windows::Devices::Spi::Provider::ISpiProvider* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ISpiProvider_GetControllersAsync(py::wrapper::Windows::Devices::Spi::Provider::ISpiProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.Spi.Provider.ISpiProvider", L"GetControllersAsync", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.GetControllersAsync();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_ISpiProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Spi::Provider::ISpiProvider>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ISpiProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Spi::Provider::ISpiProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ISpiProvider[] = {
        { "get_controllers_async", reinterpret_cast<PyCFunction>(ISpiProvider_GetControllersAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ISpiProvider, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ISpiProvider), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_ISpiProvider[] = {
        { }};

    static PyType_Slot _type_slots_ISpiProvider[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ISpiProvider) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ISpiProvider) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ISpiProvider) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ISpiProvider) },
        { }};

    static PyType_Spec type_spec_ISpiProvider = {
        "winrt._winrt_windows_devices_spi_provider.ISpiProvider",
        sizeof(py::wrapper::Windows::Devices::Spi::Provider::ISpiProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ISpiProvider};

    struct ImplementsISpiProvider : py::ImplementsInterfaceT<ImplementsISpiProvider, winrt::Windows::Devices::Spi::Provider::ISpiProvider>
    {
        ImplementsISpiProvider() = delete;
        ImplementsISpiProvider(PyObject* py_obj, winrt::impl::inspectable_abi* runtime_class) : py::ImplementsInterfaceT<ImplementsISpiProvider, winrt::Windows::Devices::Spi::Provider::ISpiProvider>(py_obj, runtime_class)
        {
        }

        auto GetControllersAsync()
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "get_controllers_async")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallNoArgs(method.get())};
                if (!return_value)
                {
                    throw python_exception();
                }

                return py::convert_to<winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Spi::Provider::ISpiControllerProvider>>>(return_value.get());
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }
    };

    static PyObject* _guid_ImplementsISpiProvider(PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::guid_of<winrt::Windows::Devices::Spi::Provider::ISpiProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _make_ImplementsISpiProvider(PyObject* /*unused*/, PyObject* args) noexcept
    {
        try
        {
            PyObject* py_obj;
            winrt::impl::inspectable_abi* runtime_class;

            if (!PyArg_ParseTuple(args, "On", &py_obj, &runtime_class))
            {
                return nullptr;
            }

            auto iface{std::make_unique<ImplementsISpiProvider>(py_obj, runtime_class)};

            return PyLong_FromVoidPtr(iface.release());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef methods_ImplementsISpiProvider[] = {
        { "_guid_", reinterpret_cast<PyCFunction>(_guid_ImplementsISpiProvider), METH_NOARGS | METH_STATIC, nullptr },
        { "_make_", reinterpret_cast<PyCFunction>(_make_ImplementsISpiProvider), METH_VARARGS | METH_STATIC, nullptr },
        { }};

    static PyType_Slot type_slots_ImplementsISpiProvider[] = {
        { Py_tp_methods, reinterpret_cast<void*>(methods_ImplementsISpiProvider) },
        { }};

    static PyType_Spec type_spec_ImplementsISpiProvider = {
        "winrt._winrt_windows_devices_spi_provider.ImplementsISpiProvider",
        0,
        0,
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,
        type_slots_ImplementsISpiProvider};

    // ----- Windows.Devices.Spi.Provider Initialization --------------------

    PyDoc_STRVAR(module_doc, "Windows.Devices.Spi.Provider");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_windows_devices_spi_provider",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Windows::Devices::Spi::Provider

PyMODINIT_FUNC PyInit__winrt_windows_devices_spi_provider(void) noexcept
{
    using namespace py::cpp::Windows::Devices::Spi::Provider;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pytype_handle ProviderSpiConnectionSettings_type{py::register_python_type(module.get(), &type_spec_ProviderSpiConnectionSettings, object_bases.get(), nullptr)};
    if (!ProviderSpiConnectionSettings_type)
    {
        return nullptr;
    }

    py::pytype_handle ISpiControllerProvider_type{py::register_python_type(module.get(), &type_spec_ISpiControllerProvider, object_bases.get(), nullptr)};
    if (!ISpiControllerProvider_type)
    {
        return nullptr;
    }

    py::pytype_handle ImplementsISpiControllerProvider_type{reinterpret_cast<PyTypeObject*>(PyType_FromModuleAndSpec(module.get(), &type_spec_ImplementsISpiControllerProvider, nullptr))};
    if (!ImplementsISpiControllerProvider_type)
    {
        return nullptr;
    }

    if (PyModule_AddType(module.get(), ImplementsISpiControllerProvider_type.get()) == -1)
    {
        return nullptr;
    }

    py::pytype_handle ISpiDeviceProvider_type{py::register_python_type(module.get(), &type_spec_ISpiDeviceProvider, object_bases.get(), nullptr)};
    if (!ISpiDeviceProvider_type)
    {
        return nullptr;
    }

    py::pytype_handle ImplementsISpiDeviceProvider_type{reinterpret_cast<PyTypeObject*>(PyType_FromModuleAndSpec(module.get(), &type_spec_ImplementsISpiDeviceProvider, nullptr))};
    if (!ImplementsISpiDeviceProvider_type)
    {
        return nullptr;
    }

    if (PyModule_AddType(module.get(), ImplementsISpiDeviceProvider_type.get()) == -1)
    {
        return nullptr;
    }

    py::pytype_handle ISpiProvider_type{py::register_python_type(module.get(), &type_spec_ISpiProvider, object_bases.get(), nullptr)};
    if (!ISpiProvider_type)
    {
        return nullptr;
    }

    py::pytype_handle ImplementsISpiProvider_type{reinterpret_cast<PyTypeObject*>(PyType_FromModuleAndSpec(module.get(), &type_spec_ImplementsISpiProvider, nullptr))};
    if (!ImplementsISpiProvider_type)
    {
        return nullptr;
    }

    if (PyModule_AddType(module.get(), ImplementsISpiProvider_type.get()) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
