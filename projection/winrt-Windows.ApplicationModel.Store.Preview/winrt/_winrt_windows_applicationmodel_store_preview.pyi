# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.security.authentication.web.core as windows_security_authentication_web_core
import winrt.windows.security.credentials as windows_security_credentials
import winrt.windows.storage.streams as windows_storage_streams
import winrt.windows.system as windows_system
import winrt.windows.ui.xaml as windows_ui_xaml

from winrt.windows.applicationmodel.store.preview import DeliveryOptimizationDownloadMode, DeliveryOptimizationDownloadModeSource, StoreLogOptions, StorePreviewProductPurchaseStatus, StoreSystemFeature

Self = typing.TypeVar('Self')

@typing.final
class DeliveryOptimizationSettings_Static(type):
    # Windows.ApplicationModel.Store.Preview.DeliveryOptimizationSettings Windows.ApplicationModel.Store.Preview.DeliveryOptimizationSettings::GetCurrentSettings()
    def get_current_settings(cls) -> DeliveryOptimizationSettings: ...

@typing.final
class DeliveryOptimizationSettings(winrt.system.Object, metaclass=DeliveryOptimizationSettings_Static):
    # Windows.ApplicationModel.Store.Preview.DeliveryOptimizationDownloadMode Windows.ApplicationModel.Store.Preview.DeliveryOptimizationSettings::get_DownloadMode()
    @_property
    def download_mode(self) -> DeliveryOptimizationDownloadMode: ...
    # Windows.ApplicationModel.Store.Preview.DeliveryOptimizationDownloadModeSource Windows.ApplicationModel.Store.Preview.DeliveryOptimizationSettings::get_DownloadModeSource()
    @_property
    def download_mode_source(self) -> DeliveryOptimizationDownloadModeSource: ...

@typing.final
class StoreConfiguration_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>> Windows.ApplicationModel.Store.Preview.StoreConfiguration::FilterUnsupportedSystemFeaturesAsync(Windows.Foundation.Collections.IIterable`1<Windows.ApplicationModel.Store.Preview.StoreSystemFeature>)
    def filter_unsupported_system_features_async(cls, system_features: typing.Iterable[StoreSystemFeature], /) -> windows_foundation.IAsyncOperation[typing.Sequence[StoreSystemFeature]]: ...
    # System.String Windows.ApplicationModel.Store.Preview.StoreConfiguration::GetEnterpriseStoreWebAccountId()
    def get_enterprise_store_web_account_id(cls) -> str: ...
    # System.String Windows.ApplicationModel.Store.Preview.StoreConfiguration::GetEnterpriseStoreWebAccountIdForUser(Windows.System.User)
    def get_enterprise_store_web_account_id_for_user(cls, user: windows_system.User, /) -> str: ...
    # Windows.Foundation.IReference`1<System.UInt32> Windows.ApplicationModel.Store.Preview.StoreConfiguration::GetPurchasePromptingPolicyForUser(Windows.System.User)
    def get_purchase_prompting_policy_for_user(cls, user: windows_system.User, /) -> typing.Optional[winrt.system.UInt32]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamReference> Windows.ApplicationModel.Store.Preview.StoreConfiguration::GetStoreLogDataAsync(Windows.ApplicationModel.Store.Preview.StoreLogOptions)
    def get_store_log_data_async(cls, options: StoreLogOptions, /) -> windows_foundation.IAsyncOperation[windows_storage_streams.IRandomAccessStreamReference]: ...
    # System.String Windows.ApplicationModel.Store.Preview.StoreConfiguration::GetStoreWebAccountId()
    def get_store_web_account_id(cls) -> str: ...
    # System.String Windows.ApplicationModel.Store.Preview.StoreConfiguration::GetStoreWebAccountIdForUser(Windows.System.User)
    def get_store_web_account_id_for_user(cls, user: windows_system.User, /) -> str: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.StoreConfiguration::HasStoreWebAccount()
    def has_store_web_account(cls) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.StoreConfiguration::HasStoreWebAccountForUser(Windows.System.User)
    def has_store_web_account_for_user(cls, user: windows_system.User, /) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.StoreConfiguration::IsPinToDesktopSupported()
    def is_pin_to_desktop_supported(cls) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.StoreConfiguration::IsPinToStartSupported()
    def is_pin_to_start_supported(cls) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.StoreConfiguration::IsPinToTaskbarSupported()
    def is_pin_to_taskbar_supported(cls) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.StoreConfiguration::IsStoreWebAccountId(System.String)
    def is_store_web_account_id(cls, web_account_id: str, /) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.StoreConfiguration::IsStoreWebAccountIdForUser(Windows.System.User,System.String)
    def is_store_web_account_id_for_user(cls, user: windows_system.User, web_account_id: str, /) -> bool: ...
    # System.Void Windows.ApplicationModel.Store.Preview.StoreConfiguration::PinToDesktop(System.String)
    def pin_to_desktop(cls, app_package_family_name: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.Store.Preview.StoreConfiguration::PinToDesktopForUser(Windows.System.User,System.String)
    def pin_to_desktop_for_user(cls, user: windows_system.User, app_package_family_name: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.Store.Preview.StoreConfiguration::SetEnterpriseStoreWebAccountId(System.String)
    def set_enterprise_store_web_account_id(cls, web_account_id: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.Store.Preview.StoreConfiguration::SetEnterpriseStoreWebAccountIdForUser(Windows.System.User,System.String)
    def set_enterprise_store_web_account_id_for_user(cls, user: windows_system.User, web_account_id: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.Store.Preview.StoreConfiguration::SetMobileOperatorConfiguration(System.String,System.UInt32,System.UInt32)
    def set_mobile_operator_configuration(cls, mobile_operator_id: str, app_download_limit_in_megabytes: winrt.system.UInt32, update_download_limit_in_megabytes: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.ApplicationModel.Store.Preview.StoreConfiguration::SetPurchasePromptingPolicyForUser(Windows.System.User,Windows.Foundation.IReference`1<System.UInt32>)
    def set_purchase_prompting_policy_for_user(cls, user: windows_system.User, value: typing.Optional[winrt.system.UInt32], /) -> None: ...
    # System.Void Windows.ApplicationModel.Store.Preview.StoreConfiguration::SetStoreWebAccountId(System.String)
    def set_store_web_account_id(cls, web_account_id: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.Store.Preview.StoreConfiguration::SetStoreWebAccountIdForUser(Windows.System.User,System.String)
    def set_store_web_account_id_for_user(cls, user: windows_system.User, web_account_id: str, /) -> None: ...
    # System.Void Windows.ApplicationModel.Store.Preview.StoreConfiguration::SetSystemConfiguration(System.String,System.String,Windows.Foundation.DateTime,System.String)
    def set_system_configuration(cls, catalog_hardware_manufacturer_id: str, catalog_store_content_modifier_id: str, system_configuration_expiration: datetime.datetime, catalog_hardware_descriptor: str, /) -> None: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.StoreConfiguration::ShouldRestrictToEnterpriseStoreOnly()
    def should_restrict_to_enterprise_store_only(cls) -> bool: ...
    # System.Boolean Windows.ApplicationModel.Store.Preview.StoreConfiguration::ShouldRestrictToEnterpriseStoreOnlyForUser(Windows.System.User)
    def should_restrict_to_enterprise_store_only_for_user(cls, user: windows_system.User, /) -> bool: ...
    # Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo Windows.ApplicationModel.Store.Preview.StoreConfiguration::get_HardwareManufacturerInfo()
    @_property
    def hardware_manufacturer_info(cls) -> StoreHardwareManufacturerInfo: ...
    # Windows.Foundation.IReference`1<System.UInt32> Windows.ApplicationModel.Store.Preview.StoreConfiguration::get_PurchasePromptingPolicy()
    @_property
    def purchase_prompting_policy(cls) -> typing.Optional[winrt.system.UInt32]: ...
    # System.Void Windows.ApplicationModel.Store.Preview.StoreConfiguration::put_PurchasePromptingPolicy(Windows.Foundation.IReference`1<System.UInt32>)
    @purchase_prompting_policy.setter
    def purchase_prompting_policy(cls, value: typing.Optional[winrt.system.UInt32]) -> None: ...

@typing.final
class StoreConfiguration(winrt.system.Object, metaclass=StoreConfiguration_Static):
    pass

@typing.final
class StoreHardwareManufacturerInfo(winrt.system.Object):
    # System.String Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo::get_HardwareManufacturerId()
    @_property
    def hardware_manufacturer_id(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo::get_ManufacturerName()
    @_property
    def manufacturer_name(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo::get_ModelName()
    @_property
    def model_name(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.Preview.StoreHardwareManufacturerInfo::get_StoreContentModifierId()
    @_property
    def store_content_modifier_id(self) -> str: ...

@typing.final
class StorePreview_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo>> Windows.ApplicationModel.Store.Preview.StorePreview::LoadAddOnProductInfosAsync()
    def load_add_on_product_infos_async(cls) -> windows_foundation.IAsyncOperation[typing.Sequence[StorePreviewProductInfo]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults> Windows.ApplicationModel.Store.Preview.StorePreview::RequestProductPurchaseByProductIdAndSkuIdAsync(System.String,System.String)
    def request_product_purchase_by_product_id_and_sku_id_async(cls, product_id: str, sku_id: str, /) -> windows_foundation.IAsyncOperation[StorePreviewPurchaseResults]: ...

@typing.final
class StorePreview(winrt.system.Object, metaclass=StorePreview_Static):
    pass

@typing.final
class StorePreviewProductInfo(winrt.system.Object):
    # System.String Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo::get_Description()
    @_property
    def description(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo::get_ProductId()
    @_property
    def product_id(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo::get_ProductType()
    @_property
    def product_type(self) -> str: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo> Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo::get_SkuInfoList()
    @_property
    def sku_info_list(self) -> typing.Sequence[StorePreviewSkuInfo]: ...
    # System.String Windows.ApplicationModel.Store.Preview.StorePreviewProductInfo::get_Title()
    @_property
    def title(self) -> str: ...

@typing.final
class StorePreviewPurchaseResults(winrt.system.Object):
    # Windows.ApplicationModel.Store.Preview.StorePreviewProductPurchaseStatus Windows.ApplicationModel.Store.Preview.StorePreviewPurchaseResults::get_ProductPurchaseStatus()
    @_property
    def product_purchase_status(self) -> StorePreviewProductPurchaseStatus: ...

@typing.final
class StorePreviewSkuInfo(winrt.system.Object):
    # System.String Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo::get_CurrencyCode()
    @_property
    def currency_code(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo::get_CustomDeveloperData()
    @_property
    def custom_developer_data(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo::get_Description()
    @_property
    def description(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo::get_ExtendedData()
    @_property
    def extended_data(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo::get_FormattedListPrice()
    @_property
    def formatted_list_price(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo::get_ProductId()
    @_property
    def product_id(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo::get_SkuId()
    @_property
    def sku_id(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo::get_SkuType()
    @_property
    def sku_type(self) -> str: ...
    # System.String Windows.ApplicationModel.Store.Preview.StorePreviewSkuInfo::get_Title()
    @_property
    def title(self) -> str: ...

@typing.final
class WebAuthenticationCoreManagerHelper_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.Security.Authentication.Web.Core.WebTokenRequestResult> Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAsync(Windows.Security.Authentication.Web.Core.WebTokenRequest,Windows.Security.Credentials.WebAccount,Windows.UI.Xaml.UIElement)
    def request_token_with_ui_element_hosting_and_web_account_async(cls, request: windows_security_authentication_web_core.WebTokenRequest, web_account: windows_security_credentials.WebAccount, ui_element: windows_ui_xaml.UIElement, /) -> windows_foundation.IAsyncOperation[windows_security_authentication_web_core.WebTokenRequestResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Security.Authentication.Web.Core.WebTokenRequestResult> Windows.ApplicationModel.Store.Preview.WebAuthenticationCoreManagerHelper::RequestTokenWithUIElementHostingAsync(Windows.Security.Authentication.Web.Core.WebTokenRequest,Windows.UI.Xaml.UIElement)
    def request_token_with_ui_element_hosting_async(cls, request: windows_security_authentication_web_core.WebTokenRequest, ui_element: windows_ui_xaml.UIElement, /) -> windows_foundation.IAsyncOperation[windows_security_authentication_web_core.WebTokenRequestResult]: ...

@typing.final
class WebAuthenticationCoreManagerHelper(winrt.system.Object, metaclass=WebAuthenticationCoreManagerHelper_Static):
    pass

