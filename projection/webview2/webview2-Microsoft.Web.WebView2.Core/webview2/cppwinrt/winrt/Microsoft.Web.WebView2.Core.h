// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Web_WebView2_Core_H
#define WINRT_Microsoft_Web_WebView2_Core_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.250303.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.250303.1"
#include "winrt/impl/Windows.ApplicationModel.DataTransfer.2.h"
#include "winrt/impl/Windows.ApplicationModel.DataTransfer.DragDrop.Core.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Windows.Security.Cryptography.Certificates.2.h"
#include "winrt/impl/Windows.Storage.Streams.2.h"
#include "winrt/impl/Windows.UI.2.h"
#include "winrt/impl/Windows.UI.Core.2.h"
#include "winrt/impl/Microsoft.Web.WebView2.Core.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_CoreWebView2Certificate_Manual<D>::ToCertificate() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::CoreWebView2Certificate_Manual>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Certificate_Manual, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Certificate_Manual>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->ToCertificate(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Certificate_Manual>**)this;
            check_hresult(_winrt_abi_type->ToCertificate(&result));
        }
        return winrt::Windows::Security::Cryptography::Certificates::Certificate{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_CoreWebView2ClientCertificate_Manual<D>::ToCertificate() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificate_Manual>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificate_Manual, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificate_Manual>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->ToCertificate(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificate_Manual>**)this;
            check_hresult(_winrt_abi_type->ToCertificate(&result));
        }
        return winrt::Windows::Security::Cryptography::Certificates::Certificate{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual<D>::ClearBrowsingDataAsync(winrt::Microsoft::Web::WebView2::Core::CoreWebView2BrowsingDataKinds const& dataKinds, winrt::Windows::Foundation::DateTime const& startTime, winrt::Windows::Foundation::DateTime const& endTime) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->ClearBrowsingDataAsync(static_cast<uint32_t>(dataKinds), impl::bind_in(startTime), impl::bind_in(endTime), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual>**)this;
            check_hresult(_winrt_abi_type->ClearBrowsingDataAsync(static_cast<uint32_t>(dataKinds), impl::bind_in(startTime), impl::bind_in(endTime), &operation));
        }
        return winrt::Windows::Foundation::IAsyncAction{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual<D>::ClearBrowsingDataAsync() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->ClearBrowsingDataAsync2(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual>**)this;
            check_hresult(_winrt_abi_type->ClearBrowsingDataAsync2(&operation));
        }
        return winrt::Windows::Foundation::IAsyncAction{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual2<D>::GetNonDefaultPermissionSettingsAsync() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetNonDefaultPermissionSettingsAsync(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual2>**)this;
            check_hresult(_winrt_abi_type->GetNonDefaultPermissionSettingsAsync(&operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionSetting>>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_CoreWebView2Profile_Manual3<D>::GetBrowserExtensionsAsync() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetBrowserExtensionsAsync(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual3>**)this;
            check_hresult(_winrt_abi_type->GetBrowserExtensionsAsync(&operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Web::WebView2::Core::CoreWebView2BrowserExtension>>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::Settings() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Settings(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->get_Settings(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2Settings{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::Source() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Source(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->get_Source(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::BrowserProcessId() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_BrowserProcessId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->get_BrowserProcessId(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::CanGoBack() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_CanGoBack(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->get_CanGoBack(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::CanGoForward() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_CanGoForward(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->get_CanGoForward(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::DocumentTitle() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DocumentTitle(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->get_DocumentTitle(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::ContainsFullScreenElement() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ContainsFullScreenElement(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->get_ContainsFullScreenElement(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::NavigationStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_NavigationStarting(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->add_NavigationStarting(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::NavigationStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, NavigationStarting_revoker>(this, NavigationStarting(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::NavigationStarting(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_NavigationStarting(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            _winrt_abi_type->remove_NavigationStarting(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::ContentLoading(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContentLoadingEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_ContentLoading(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->add_ContentLoading(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::ContentLoading(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContentLoadingEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, ContentLoading_revoker>(this, ContentLoading(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::ContentLoading(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_ContentLoading(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            _winrt_abi_type->remove_ContentLoading(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::SourceChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2SourceChangedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_SourceChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->add_SourceChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::SourceChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2SourceChangedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, SourceChanged_revoker>(this, SourceChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::SourceChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_SourceChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            _winrt_abi_type->remove_SourceChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::HistoryChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_HistoryChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->add_HistoryChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::HistoryChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, HistoryChanged_revoker>(this, HistoryChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::HistoryChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_HistoryChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            _winrt_abi_type->remove_HistoryChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::NavigationCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_NavigationCompleted(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->add_NavigationCompleted(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::NavigationCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, NavigationCompleted_revoker>(this, NavigationCompleted(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::NavigationCompleted(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_NavigationCompleted(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            _winrt_abi_type->remove_NavigationCompleted(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::FrameNavigationStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_FrameNavigationStarting(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->add_FrameNavigationStarting(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::FrameNavigationStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, FrameNavigationStarting_revoker>(this, FrameNavigationStarting(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::FrameNavigationStarting(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_FrameNavigationStarting(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            _winrt_abi_type->remove_FrameNavigationStarting(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::FrameNavigationCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_FrameNavigationCompleted(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->add_FrameNavigationCompleted(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::FrameNavigationCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, FrameNavigationCompleted_revoker>(this, FrameNavigationCompleted(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::FrameNavigationCompleted(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_FrameNavigationCompleted(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            _winrt_abi_type->remove_FrameNavigationCompleted(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::ScriptDialogOpening(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScriptDialogOpeningEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_ScriptDialogOpening(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->add_ScriptDialogOpening(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::ScriptDialogOpening(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScriptDialogOpeningEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, ScriptDialogOpening_revoker>(this, ScriptDialogOpening(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::ScriptDialogOpening(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_ScriptDialogOpening(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            _winrt_abi_type->remove_ScriptDialogOpening(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::PermissionRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionRequestedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_PermissionRequested(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->add_PermissionRequested(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::PermissionRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionRequestedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, PermissionRequested_revoker>(this, PermissionRequested(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::PermissionRequested(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_PermissionRequested(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            _winrt_abi_type->remove_PermissionRequested(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::ProcessFailed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_ProcessFailed(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->add_ProcessFailed(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::ProcessFailed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, ProcessFailed_revoker>(this, ProcessFailed(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::ProcessFailed(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_ProcessFailed(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            _winrt_abi_type->remove_ProcessFailed(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::WebMessageReceived(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebMessageReceivedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_WebMessageReceived(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->add_WebMessageReceived(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::WebMessageReceived(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebMessageReceivedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, WebMessageReceived_revoker>(this, WebMessageReceived(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::WebMessageReceived(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_WebMessageReceived(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            _winrt_abi_type->remove_WebMessageReceived(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::NewWindowRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NewWindowRequestedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_NewWindowRequested(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->add_NewWindowRequested(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::NewWindowRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NewWindowRequestedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, NewWindowRequested_revoker>(this, NewWindowRequested(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::NewWindowRequested(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_NewWindowRequested(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            _winrt_abi_type->remove_NewWindowRequested(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::DocumentTitleChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_DocumentTitleChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->add_DocumentTitleChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::DocumentTitleChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, DocumentTitleChanged_revoker>(this, DocumentTitleChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::DocumentTitleChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_DocumentTitleChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            _winrt_abi_type->remove_DocumentTitleChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::ContainsFullScreenElementChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_ContainsFullScreenElementChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->add_ContainsFullScreenElementChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::ContainsFullScreenElementChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, ContainsFullScreenElementChanged_revoker>(this, ContainsFullScreenElementChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::ContainsFullScreenElementChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_ContainsFullScreenElementChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            _winrt_abi_type->remove_ContainsFullScreenElementChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::WebResourceRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequestedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_WebResourceRequested(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->add_WebResourceRequested(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::WebResourceRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequestedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, WebResourceRequested_revoker>(this, WebResourceRequested(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::WebResourceRequested(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_WebResourceRequested(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            _winrt_abi_type->remove_WebResourceRequested(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::WindowCloseRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_WindowCloseRequested(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->add_WindowCloseRequested(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::WindowCloseRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, WindowCloseRequested_revoker>(this, WindowCloseRequested(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::WindowCloseRequested(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_WindowCloseRequested(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            _winrt_abi_type->remove_WindowCloseRequested(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::Navigate(param::hstring const& uri) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Navigate(*(void**)(&uri)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->Navigate(*(void**)(&uri)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::NavigateToString(param::hstring const& htmlContent) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->NavigateToString(*(void**)(&htmlContent)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->NavigateToString(*(void**)(&htmlContent)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::AddScriptToExecuteOnDocumentCreatedAsync(param::hstring const& javaScript) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->AddScriptToExecuteOnDocumentCreatedAsync(*(void**)(&javaScript), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->AddScriptToExecuteOnDocumentCreatedAsync(*(void**)(&javaScript), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<hstring>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::RemoveScriptToExecuteOnDocumentCreated(param::hstring const& id) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->RemoveScriptToExecuteOnDocumentCreated(*(void**)(&id)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->RemoveScriptToExecuteOnDocumentCreated(*(void**)(&id)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::ExecuteScriptAsync(param::hstring const& javaScript) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->ExecuteScriptAsync(*(void**)(&javaScript), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->ExecuteScriptAsync(*(void**)(&javaScript), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<hstring>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::CapturePreviewAsync(winrt::Microsoft::Web::WebView2::Core::CoreWebView2CapturePreviewImageFormat const& imageFormat, winrt::Windows::Storage::Streams::IRandomAccessStream const& imageStream) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CapturePreviewAsync(static_cast<int32_t>(imageFormat), *(void**)(&imageStream), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->CapturePreviewAsync(static_cast<int32_t>(imageFormat), *(void**)(&imageStream), &operation));
        }
        return winrt::Windows::Foundation::IAsyncAction{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::Reload() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Reload());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->Reload());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::PostWebMessageAsJson(param::hstring const& webMessageAsJson) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->PostWebMessageAsJson(*(void**)(&webMessageAsJson)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->PostWebMessageAsJson(*(void**)(&webMessageAsJson)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::PostWebMessageAsString(param::hstring const& webMessageAsString) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->PostWebMessageAsString(*(void**)(&webMessageAsString)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->PostWebMessageAsString(*(void**)(&webMessageAsString)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::CallDevToolsProtocolMethodAsync(param::hstring const& methodName, param::hstring const& parametersAsJson) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CallDevToolsProtocolMethodAsync(*(void**)(&methodName), *(void**)(&parametersAsJson), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->CallDevToolsProtocolMethodAsync(*(void**)(&methodName), *(void**)(&parametersAsJson), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<hstring>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::GoBack() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GoBack());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->GoBack());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::GoForward() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GoForward());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->GoForward());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::GetDevToolsProtocolEventReceiver(param::hstring const& eventName) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetDevToolsProtocolEventReceiver(*(void**)(&eventName), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->GetDevToolsProtocolEventReceiver(*(void**)(&eventName), &result));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2DevToolsProtocolEventReceiver{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::Stop() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Stop());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->Stop());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::AddHostObjectToScript(param::hstring const& name, winrt::Windows::Foundation::IInspectable const& rawObject) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->AddHostObjectToScript(*(void**)(&name), *(void**)(&rawObject)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->AddHostObjectToScript(*(void**)(&name), *(void**)(&rawObject)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::RemoveHostObjectFromScript(param::hstring const& name) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->RemoveHostObjectFromScript(*(void**)(&name)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->RemoveHostObjectFromScript(*(void**)(&name)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::OpenDevToolsWindow() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->OpenDevToolsWindow());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->OpenDevToolsWindow());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::AddWebResourceRequestedFilter(param::hstring const& uri, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceContext const& ResourceContext) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->AddWebResourceRequestedFilter(*(void**)(&uri), static_cast<int32_t>(ResourceContext)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->AddWebResourceRequestedFilter(*(void**)(&uri), static_cast<int32_t>(ResourceContext)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>::RemoveWebResourceRequestedFilter(param::hstring const& uri, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceContext const& ResourceContext) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->RemoveWebResourceRequestedFilter(*(void**)(&uri), static_cast<int32_t>(ResourceContext)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>**)this;
            check_hresult(_winrt_abi_type->RemoveWebResourceRequestedFilter(*(void**)(&uri), static_cast<int32_t>(ResourceContext)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs<D>::KeyEventKind() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2KeyEventKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_KeyEventKind(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_KeyEventKind(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs<D>::VirtualKey() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_VirtualKey(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_VirtualKey(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs<D>::KeyEventLParam() const
    {
        int32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_KeyEventLParam(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_KeyEventLParam(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs<D>::PhysicalKeyStatus() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2PhysicalKeyStatus value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PhysicalKeyStatus(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_PhysicalKeyStatus(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs<D>::Handled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs<D>::Handled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs2<D>::IsBrowserAcceleratorKeyEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsBrowserAcceleratorKeyEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs2>**)this;
            check_hresult(_winrt_abi_type->get_IsBrowserAcceleratorKeyEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs2<D>::IsBrowserAcceleratorKeyEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsBrowserAcceleratorKeyEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs2>**)this;
            check_hresult(_winrt_abi_type->put_IsBrowserAcceleratorKeyEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationRequestedEventArgs<D>::Uri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationRequestedEventArgs<D>::Challenge() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Challenge(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Challenge(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationRequestedEventArgs<D>::Response() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Response(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Response(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2BasicAuthenticationResponse{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationRequestedEventArgs<D>::Cancel() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Cancel(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Cancel(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationRequestedEventArgs<D>::Cancel(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Cancel(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Cancel(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationRequestedEventArgs<D>::GetDeferral() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        return winrt::Windows::Foundation::Deferral{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationResponse<D>::UserName() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_UserName(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse>**)this;
            check_hresult(_winrt_abi_type->get_UserName(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationResponse<D>::UserName(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_UserName(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse>**)this;
            check_hresult(_winrt_abi_type->put_UserName(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationResponse<D>::Password() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Password(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse>**)this;
            check_hresult(_winrt_abi_type->get_Password(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2BasicAuthenticationResponse<D>::Password(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Password(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse>**)this;
            check_hresult(_winrt_abi_type->put_Password(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2BrowserExtension<D>::Id() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Id(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension>**)this;
            check_hresult(_winrt_abi_type->get_Id(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2BrowserExtension<D>::Name() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension>**)this;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2BrowserExtension<D>::IsEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension>**)this;
            check_hresult(_winrt_abi_type->get_IsEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2BrowserExtension<D>::RemoveAsync() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->RemoveAsync(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension>**)this;
            check_hresult(_winrt_abi_type->RemoveAsync(&operation));
        }
        return winrt::Windows::Foundation::IAsyncAction{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2BrowserExtension<D>::EnableAsync(bool IsEnabled) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->EnableAsync(IsEnabled, &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension>**)this;
            check_hresult(_winrt_abi_type->EnableAsync(IsEnabled, &operation));
        }
        return winrt::Windows::Foundation::IAsyncAction{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2BrowserProcessExitedEventArgs<D>::BrowserProcessExitKind() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2BrowserProcessExitKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserProcessExitedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserProcessExitedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserProcessExitedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_BrowserProcessExitKind(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserProcessExitedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_BrowserProcessExitKind(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2BrowserProcessExitedEventArgs<D>::BrowserProcessId() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserProcessExitedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserProcessExitedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserProcessExitedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_BrowserProcessId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserProcessExitedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_BrowserProcessId(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Certificate<D>::Subject() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Subject(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>**)this;
            check_hresult(_winrt_abi_type->get_Subject(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Certificate<D>::Issuer() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Issuer(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>**)this;
            check_hresult(_winrt_abi_type->get_Issuer(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Certificate<D>::ValidFrom() const
    {
        double value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ValidFrom(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>**)this;
            check_hresult(_winrt_abi_type->get_ValidFrom(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Certificate<D>::ValidTo() const
    {
        double value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ValidTo(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>**)this;
            check_hresult(_winrt_abi_type->get_ValidTo(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Certificate<D>::DerEncodedSerialNumber() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DerEncodedSerialNumber(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>**)this;
            check_hresult(_winrt_abi_type->get_DerEncodedSerialNumber(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Certificate<D>::DisplayName() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DisplayName(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>**)this;
            check_hresult(_winrt_abi_type->get_DisplayName(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Certificate<D>::PemEncodedIssuerCertificateChain() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PemEncodedIssuerCertificateChain(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>**)this;
            check_hresult(_winrt_abi_type->get_PemEncodedIssuerCertificateChain(&value));
        }
        return winrt::Windows::Foundation::Collections::IVectorView<hstring>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Certificate<D>::ToPemEncoding() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->ToPemEncoding(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>**)this;
            check_hresult(_winrt_abi_type->ToPemEncoding(&result));
        }
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate<D>::Subject() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Subject(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)this;
            check_hresult(_winrt_abi_type->get_Subject(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate<D>::Issuer() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Issuer(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)this;
            check_hresult(_winrt_abi_type->get_Issuer(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate<D>::ValidFrom() const
    {
        double value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ValidFrom(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)this;
            check_hresult(_winrt_abi_type->get_ValidFrom(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate<D>::ValidTo() const
    {
        double value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ValidTo(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)this;
            check_hresult(_winrt_abi_type->get_ValidTo(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate<D>::DerEncodedSerialNumber() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DerEncodedSerialNumber(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)this;
            check_hresult(_winrt_abi_type->get_DerEncodedSerialNumber(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate<D>::DisplayName() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DisplayName(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)this;
            check_hresult(_winrt_abi_type->get_DisplayName(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate<D>::PemEncodedIssuerCertificateChain() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PemEncodedIssuerCertificateChain(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)this;
            check_hresult(_winrt_abi_type->get_PemEncodedIssuerCertificateChain(&value));
        }
        return winrt::Windows::Foundation::Collections::IVectorView<hstring>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate<D>::Kind() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificateKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Kind(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)this;
            check_hresult(_winrt_abi_type->get_Kind(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificate<D>::ToPemEncoding() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->ToPemEncoding(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>**)this;
            check_hresult(_winrt_abi_type->ToPemEncoding(&result));
        }
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs<D>::Host() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Host(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Host(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs<D>::Port() const
    {
        int32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Port(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Port(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs<D>::IsProxy() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsProxy(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_IsProxy(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs<D>::AllowedCertificateAuthorities() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_AllowedCertificateAuthorities(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_AllowedCertificateAuthorities(&value));
        }
        return winrt::Windows::Foundation::Collections::IVectorView<hstring>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs<D>::MutuallyTrustedCertificates() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_MutuallyTrustedCertificates(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_MutuallyTrustedCertificates(&value));
        }
        return winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificate>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs<D>::SelectedCertificate() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_SelectedCertificate(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_SelectedCertificate(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificate{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs<D>::SelectedCertificate(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificate const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_SelectedCertificate(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_SelectedCertificate(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs<D>::Cancel() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Cancel(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Cancel(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs<D>::Cancel(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Cancel(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Cancel(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs<D>::Handled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs<D>::Handled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ClientCertificateRequestedEventArgs<D>::GetDeferral() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        return winrt::Windows::Foundation::Deferral{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController<D>::RootVisualTarget() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_RootVisualTarget(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)this;
            check_hresult(_winrt_abi_type->get_RootVisualTarget(&value));
        }
        return winrt::Windows::Foundation::IInspectable{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController<D>::RootVisualTarget(winrt::Windows::Foundation::IInspectable const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_RootVisualTarget(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)this;
            check_hresult(_winrt_abi_type->put_RootVisualTarget(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController<D>::CursorChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CompositionController, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_CursorChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)this;
            check_hresult(_winrt_abi_type->add_CursorChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController<D>::CursorChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CompositionController, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, CursorChanged_revoker>(this, CursorChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController<D>::CursorChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)&_winrt_casted_result;
            _winrt_abi_type->remove_CursorChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)this;
            _winrt_abi_type->remove_CursorChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController<D>::SendMouseInput(winrt::Microsoft::Web::WebView2::Core::CoreWebView2MouseEventKind const& eventKind, winrt::Microsoft::Web::WebView2::Core::CoreWebView2MouseEventVirtualKeys const& virtualKeys, uint32_t mouseData, winrt::Windows::Foundation::Point const& point) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->SendMouseInput(static_cast<int32_t>(eventKind), static_cast<uint32_t>(virtualKeys), mouseData, impl::bind_in(point)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)this;
            check_hresult(_winrt_abi_type->SendMouseInput(static_cast<int32_t>(eventKind), static_cast<uint32_t>(virtualKeys), mouseData, impl::bind_in(point)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController<D>::SendPointerInput(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PointerEventKind const& eventKind, winrt::Microsoft::Web::WebView2::Core::CoreWebView2PointerInfo const& pointerInfo) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->SendPointerInput(static_cast<int32_t>(eventKind), *(void**)(&pointerInfo)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)this;
            check_hresult(_winrt_abi_type->SendPointerInput(static_cast<int32_t>(eventKind), *(void**)(&pointerInfo)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController<D>::Cursor() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Cursor(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)this;
            check_hresult(_winrt_abi_type->get_Cursor(&value));
        }
        return winrt::Windows::UI::Core::CoreCursor{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController<D>::DragEnter(winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo const& dragInfo, winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride const& dragUIOverride) const
    {
        winrt::Windows::ApplicationModel::DataTransfer::DataPackageOperation result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->DragEnter(*(void**)(&dragInfo), *(void**)(&dragUIOverride), reinterpret_cast<uint32_t*>(&result)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)this;
            check_hresult(_winrt_abi_type->DragEnter(*(void**)(&dragInfo), *(void**)(&dragUIOverride), reinterpret_cast<uint32_t*>(&result)));
        }
        return result;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController<D>::DragOver(winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo const& dragInfo, winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride const& dragUIOverride) const
    {
        winrt::Windows::ApplicationModel::DataTransfer::DataPackageOperation result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->DragOver(*(void**)(&dragInfo), *(void**)(&dragUIOverride), reinterpret_cast<uint32_t*>(&result)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)this;
            check_hresult(_winrt_abi_type->DragOver(*(void**)(&dragInfo), *(void**)(&dragUIOverride), reinterpret_cast<uint32_t*>(&result)));
        }
        return result;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController<D>::Drop(winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo const& dragInfo) const
    {
        winrt::Windows::ApplicationModel::DataTransfer::DataPackageOperation result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Drop(*(void**)(&dragInfo), reinterpret_cast<uint32_t*>(&result)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>**)this;
            check_hresult(_winrt_abi_type->Drop(*(void**)(&dragInfo), reinterpret_cast<uint32_t*>(&result)));
        }
        return result;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController3<D>::DragLeave() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->DragLeave());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController3>**)this;
            check_hresult(_winrt_abi_type->DragLeave());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController4<D>::NonClientRegionChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CompositionController, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NonClientRegionChangedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_NonClientRegionChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4>**)this;
            check_hresult(_winrt_abi_type->add_NonClientRegionChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController4<D>::NonClientRegionChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CompositionController, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NonClientRegionChangedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, NonClientRegionChanged_revoker>(this, NonClientRegionChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController4<D>::NonClientRegionChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4>**)&_winrt_casted_result;
            _winrt_abi_type->remove_NonClientRegionChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4>**)this;
            _winrt_abi_type->remove_NonClientRegionChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController4<D>::GetNonClientRegionAtPoint(winrt::Windows::Foundation::Point const& point) const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2NonClientRegionKind result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetNonClientRegionAtPoint(impl::bind_in(point), reinterpret_cast<int32_t*>(&result)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4>**)this;
            check_hresult(_winrt_abi_type->GetNonClientRegionAtPoint(impl::bind_in(point), reinterpret_cast<int32_t*>(&result)));
        }
        return result;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController4<D>::QueryNonClientRegion(winrt::Microsoft::Web::WebView2::Core::CoreWebView2NonClientRegionKind const& Kind) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->QueryNonClientRegion(static_cast<int32_t>(Kind), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4>**)this;
            check_hresult(_winrt_abi_type->QueryNonClientRegion(static_cast<int32_t>(Kind), &result));
        }
        return winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Foundation::Rect>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContentLoadingEventArgs<D>::IsErrorPage() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContentLoadingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContentLoadingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContentLoadingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsErrorPage(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContentLoadingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_IsErrorPage(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContentLoadingEventArgs<D>::NavigationId() const
    {
        uint64_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContentLoadingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContentLoadingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContentLoadingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_NavigationId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContentLoadingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_NavigationId(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem<D>::Name() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)this;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem<D>::Label() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Label(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)this;
            check_hresult(_winrt_abi_type->get_Label(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem<D>::CommandId() const
    {
        int32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_CommandId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)this;
            check_hresult(_winrt_abi_type->get_CommandId(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem<D>::ShortcutKeyDescription() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ShortcutKeyDescription(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)this;
            check_hresult(_winrt_abi_type->get_ShortcutKeyDescription(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem<D>::Icon() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Icon(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)this;
            check_hresult(_winrt_abi_type->get_Icon(&value));
        }
        return winrt::Windows::Storage::Streams::IRandomAccessStream{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem<D>::Kind() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuItemKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Kind(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)this;
            check_hresult(_winrt_abi_type->get_Kind(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem<D>::IsEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)this;
            check_hresult(_winrt_abi_type->get_IsEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem<D>::IsEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)this;
            check_hresult(_winrt_abi_type->put_IsEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem<D>::IsChecked() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsChecked(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)this;
            check_hresult(_winrt_abi_type->get_IsChecked(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem<D>::IsChecked(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsChecked(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)this;
            check_hresult(_winrt_abi_type->put_IsChecked(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem<D>::Children() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Children(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)this;
            check_hresult(_winrt_abi_type->get_Children(&value));
        }
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuItem>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem<D>::CustomItemSelected(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuItem, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_CustomItemSelected(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)this;
            check_hresult(_winrt_abi_type->add_CustomItemSelected(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem<D>::CustomItemSelected(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuItem, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, CustomItemSelected_revoker>(this, CustomItemSelected(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuItem<D>::CustomItemSelected(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)&_winrt_casted_result;
            _winrt_abi_type->remove_CustomItemSelected(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>**)this;
            _winrt_abi_type->remove_CustomItemSelected(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuRequestedEventArgs<D>::MenuItems() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_MenuItems(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_MenuItems(&value));
        }
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuItem>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuRequestedEventArgs<D>::ContextMenuTarget() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ContextMenuTarget(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_ContextMenuTarget(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuTarget{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuRequestedEventArgs<D>::Location() const
    {
        winrt::Windows::Foundation::Point value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Location(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Location(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuRequestedEventArgs<D>::SelectedCommandId() const
    {
        int32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_SelectedCommandId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_SelectedCommandId(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuRequestedEventArgs<D>::SelectedCommandId(int32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_SelectedCommandId(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_SelectedCommandId(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuRequestedEventArgs<D>::Handled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuRequestedEventArgs<D>::Handled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuRequestedEventArgs<D>::GetDeferral() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        return winrt::Windows::Foundation::Deferral{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget<D>::Kind() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuTargetKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Kind(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)this;
            check_hresult(_winrt_abi_type->get_Kind(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget<D>::IsEditable() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsEditable(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)this;
            check_hresult(_winrt_abi_type->get_IsEditable(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget<D>::IsRequestedForMainFrame() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsRequestedForMainFrame(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)this;
            check_hresult(_winrt_abi_type->get_IsRequestedForMainFrame(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget<D>::PageUri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PageUri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)this;
            check_hresult(_winrt_abi_type->get_PageUri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget<D>::FrameUri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_FrameUri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)this;
            check_hresult(_winrt_abi_type->get_FrameUri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget<D>::HasLinkUri() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_HasLinkUri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)this;
            check_hresult(_winrt_abi_type->get_HasLinkUri(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget<D>::LinkUri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_LinkUri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)this;
            check_hresult(_winrt_abi_type->get_LinkUri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget<D>::HasLinkText() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_HasLinkText(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)this;
            check_hresult(_winrt_abi_type->get_HasLinkText(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget<D>::LinkText() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_LinkText(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)this;
            check_hresult(_winrt_abi_type->get_LinkText(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget<D>::HasSourceUri() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_HasSourceUri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)this;
            check_hresult(_winrt_abi_type->get_HasSourceUri(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget<D>::SourceUri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_SourceUri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)this;
            check_hresult(_winrt_abi_type->get_SourceUri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget<D>::HasSelection() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_HasSelection(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)this;
            check_hresult(_winrt_abi_type->get_HasSelection(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContextMenuTarget<D>::SelectionText() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_SelectionText(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>**)this;
            check_hresult(_winrt_abi_type->get_SelectionText(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::IsVisible() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsVisible(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->get_IsVisible(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::IsVisible(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsVisible(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->put_IsVisible(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::Bounds() const
    {
        winrt::Windows::Foundation::Rect value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Bounds(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->get_Bounds(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::Bounds(winrt::Windows::Foundation::Rect const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Bounds(impl::bind_in(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->put_Bounds(impl::bind_in(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::ZoomFactor() const
    {
        double value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ZoomFactor(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->get_ZoomFactor(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::ZoomFactor(double value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ZoomFactor(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->put_ZoomFactor(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::ParentWindow() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ParentWindow(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->get_ParentWindow(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::ParentWindow(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ParentWindow(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->put_ParentWindow(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::CoreWebView2() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_CoreWebView2(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->get_CoreWebView2(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::ZoomFactorChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_ZoomFactorChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->add_ZoomFactorChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::ZoomFactorChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, ZoomFactorChanged_revoker>(this, ZoomFactorChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::ZoomFactorChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            _winrt_abi_type->remove_ZoomFactorChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            _winrt_abi_type->remove_ZoomFactorChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::MoveFocusRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Microsoft::Web::WebView2::Core::CoreWebView2MoveFocusRequestedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_MoveFocusRequested(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->add_MoveFocusRequested(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::MoveFocusRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Microsoft::Web::WebView2::Core::CoreWebView2MoveFocusRequestedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, MoveFocusRequested_revoker>(this, MoveFocusRequested(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::MoveFocusRequested(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            _winrt_abi_type->remove_MoveFocusRequested(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            _winrt_abi_type->remove_MoveFocusRequested(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::GotFocus(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_GotFocus(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->add_GotFocus(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::GotFocus(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, GotFocus_revoker>(this, GotFocus(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::GotFocus(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            _winrt_abi_type->remove_GotFocus(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            _winrt_abi_type->remove_GotFocus(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::LostFocus(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_LostFocus(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->add_LostFocus(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::LostFocus(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, LostFocus_revoker>(this, LostFocus(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::LostFocus(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            _winrt_abi_type->remove_LostFocus(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            _winrt_abi_type->remove_LostFocus(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::AcceleratorKeyPressed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Microsoft::Web::WebView2::Core::CoreWebView2AcceleratorKeyPressedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_AcceleratorKeyPressed(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->add_AcceleratorKeyPressed(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::AcceleratorKeyPressed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Microsoft::Web::WebView2::Core::CoreWebView2AcceleratorKeyPressedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, AcceleratorKeyPressed_revoker>(this, AcceleratorKeyPressed(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::AcceleratorKeyPressed(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            _winrt_abi_type->remove_AcceleratorKeyPressed(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            _winrt_abi_type->remove_AcceleratorKeyPressed(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::SetBoundsAndZoomFactor(winrt::Windows::Foundation::Rect const& Bounds, double ZoomFactor) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->SetBoundsAndZoomFactor(impl::bind_in(Bounds), ZoomFactor));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->SetBoundsAndZoomFactor(impl::bind_in(Bounds), ZoomFactor));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::MoveFocus(winrt::Microsoft::Web::WebView2::Core::CoreWebView2MoveFocusReason const& reason) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->MoveFocus(static_cast<int32_t>(reason)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->MoveFocus(static_cast<int32_t>(reason)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::NotifyParentWindowPositionChanged() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->NotifyParentWindowPositionChanged());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->NotifyParentWindowPositionChanged());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>::Close() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Close());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>**)this;
            check_hresult(_winrt_abi_type->Close());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller2<D>::DefaultBackgroundColor() const
    {
        winrt::Windows::UI::Color value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DefaultBackgroundColor(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller2>**)this;
            check_hresult(_winrt_abi_type->get_DefaultBackgroundColor(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller2<D>::DefaultBackgroundColor(winrt::Windows::UI::Color const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_DefaultBackgroundColor(impl::bind_in(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller2>**)this;
            check_hresult(_winrt_abi_type->put_DefaultBackgroundColor(impl::bind_in(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller3<D>::RasterizationScale() const
    {
        double value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_RasterizationScale(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>**)this;
            check_hresult(_winrt_abi_type->get_RasterizationScale(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller3<D>::RasterizationScale(double value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_RasterizationScale(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>**)this;
            check_hresult(_winrt_abi_type->put_RasterizationScale(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller3<D>::ShouldDetectMonitorScaleChanges() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ShouldDetectMonitorScaleChanges(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>**)this;
            check_hresult(_winrt_abi_type->get_ShouldDetectMonitorScaleChanges(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller3<D>::ShouldDetectMonitorScaleChanges(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ShouldDetectMonitorScaleChanges(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>**)this;
            check_hresult(_winrt_abi_type->put_ShouldDetectMonitorScaleChanges(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller3<D>::BoundsMode() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2BoundsMode value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_BoundsMode(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>**)this;
            check_hresult(_winrt_abi_type->get_BoundsMode(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller3<D>::BoundsMode(winrt::Microsoft::Web::WebView2::Core::CoreWebView2BoundsMode const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_BoundsMode(static_cast<int32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>**)this;
            check_hresult(_winrt_abi_type->put_BoundsMode(static_cast<int32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller3<D>::RasterizationScaleChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_RasterizationScaleChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>**)this;
            check_hresult(_winrt_abi_type->add_RasterizationScaleChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller3<D>::RasterizationScaleChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, RasterizationScaleChanged_revoker>(this, RasterizationScaleChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller3<D>::RasterizationScaleChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>**)&_winrt_casted_result;
            _winrt_abi_type->remove_RasterizationScaleChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>**)this;
            _winrt_abi_type->remove_RasterizationScaleChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller4<D>::AllowExternalDrop() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller4>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller4, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller4>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_AllowExternalDrop(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller4>**)this;
            check_hresult(_winrt_abi_type->get_AllowExternalDrop(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller4<D>::AllowExternalDrop(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller4>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller4, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller4>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_AllowExternalDrop(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller4>**)this;
            check_hresult(_winrt_abi_type->put_AllowExternalDrop(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions<D>::ProfileName() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ProfileName(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions>**)this;
            check_hresult(_winrt_abi_type->get_ProfileName(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions<D>::ProfileName(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ProfileName(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions>**)this;
            check_hresult(_winrt_abi_type->put_ProfileName(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions<D>::IsInPrivateModeEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsInPrivateModeEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions>**)this;
            check_hresult(_winrt_abi_type->get_IsInPrivateModeEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions<D>::IsInPrivateModeEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsInPrivateModeEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions>**)this;
            check_hresult(_winrt_abi_type->put_IsInPrivateModeEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions2<D>::ScriptLocale() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ScriptLocale(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions2>**)this;
            check_hresult(_winrt_abi_type->get_ScriptLocale(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ControllerOptions2<D>::ScriptLocale(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ScriptLocale(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions2>**)this;
            check_hresult(_winrt_abi_type->put_ScriptLocale(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ControllerWindowReference<D>::WindowHandle() const
    {
        uint64_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReference>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReference, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReference>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_WindowHandle(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReference>**)this;
            check_hresult(_winrt_abi_type->get_WindowHandle(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ControllerWindowReference<D>::CoreWindow() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReference>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReference, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReference>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_CoreWindow(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReference>**)this;
            check_hresult(_winrt_abi_type->get_CoreWindow(&value));
        }
        return winrt::Windows::UI::Core::CoreWindow{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ControllerWindowReferenceStatics<D>::CreateFromWindowHandle(uint64_t windowHandle) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReferenceStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReferenceStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReferenceStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateFromWindowHandle(windowHandle, &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReferenceStatics>**)this;
            check_hresult(_winrt_abi_type->CreateFromWindowHandle(windowHandle, &result));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ControllerWindowReferenceStatics<D>::CreateFromCoreWindow(winrt::Windows::UI::Core::CoreWindow const& coreWindow) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReferenceStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReferenceStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReferenceStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateFromCoreWindow(*(void**)(&coreWindow), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReferenceStatics>**)this;
            check_hresult(_winrt_abi_type->CreateFromCoreWindow(*(void**)(&coreWindow), &result));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Cookie<D>::Name() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)this;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Cookie<D>::Value() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Value(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)this;
            check_hresult(_winrt_abi_type->get_Value(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Cookie<D>::Value(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Value(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)this;
            check_hresult(_winrt_abi_type->put_Value(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Cookie<D>::Domain() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Domain(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)this;
            check_hresult(_winrt_abi_type->get_Domain(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Cookie<D>::Path() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Path(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)this;
            check_hresult(_winrt_abi_type->get_Path(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Cookie<D>::Expires() const
    {
        double value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Expires(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)this;
            check_hresult(_winrt_abi_type->get_Expires(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Cookie<D>::Expires(double value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Expires(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)this;
            check_hresult(_winrt_abi_type->put_Expires(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Cookie<D>::IsHttpOnly() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsHttpOnly(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)this;
            check_hresult(_winrt_abi_type->get_IsHttpOnly(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Cookie<D>::IsHttpOnly(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsHttpOnly(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)this;
            check_hresult(_winrt_abi_type->put_IsHttpOnly(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Cookie<D>::SameSite() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2CookieSameSiteKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_SameSite(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)this;
            check_hresult(_winrt_abi_type->get_SameSite(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Cookie<D>::SameSite(winrt::Microsoft::Web::WebView2::Core::CoreWebView2CookieSameSiteKind const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_SameSite(static_cast<int32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)this;
            check_hresult(_winrt_abi_type->put_SameSite(static_cast<int32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Cookie<D>::IsSecure() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsSecure(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)this;
            check_hresult(_winrt_abi_type->get_IsSecure(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Cookie<D>::IsSecure(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsSecure(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)this;
            check_hresult(_winrt_abi_type->put_IsSecure(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Cookie<D>::IsSession() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsSession(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>**)this;
            check_hresult(_winrt_abi_type->get_IsSession(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager<D>::CreateCookie(param::hstring const& name, param::hstring const& value, param::hstring const& Domain, param::hstring const& Path) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateCookie(*(void**)(&name), *(void**)(&value), *(void**)(&Domain), *(void**)(&Path), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>**)this;
            check_hresult(_winrt_abi_type->CreateCookie(*(void**)(&name), *(void**)(&value), *(void**)(&Domain), *(void**)(&Path), &result));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager<D>::CopyCookie(winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie const& cookieParam) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CopyCookie(*(void**)(&cookieParam), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>**)this;
            check_hresult(_winrt_abi_type->CopyCookie(*(void**)(&cookieParam), &result));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager<D>::AddOrUpdateCookie(winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie const& cookie) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->AddOrUpdateCookie(*(void**)(&cookie)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>**)this;
            check_hresult(_winrt_abi_type->AddOrUpdateCookie(*(void**)(&cookie)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager<D>::DeleteCookie(winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie const& cookie) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->DeleteCookie(*(void**)(&cookie)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>**)this;
            check_hresult(_winrt_abi_type->DeleteCookie(*(void**)(&cookie)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager<D>::DeleteCookies(param::hstring const& name, param::hstring const& uri) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->DeleteCookies(*(void**)(&name), *(void**)(&uri)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>**)this;
            check_hresult(_winrt_abi_type->DeleteCookies(*(void**)(&name), *(void**)(&uri)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager<D>::DeleteCookiesWithDomainAndPath(param::hstring const& name, param::hstring const& Domain, param::hstring const& Path) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->DeleteCookiesWithDomainAndPath(*(void**)(&name), *(void**)(&Domain), *(void**)(&Path)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>**)this;
            check_hresult(_winrt_abi_type->DeleteCookiesWithDomainAndPath(*(void**)(&name), *(void**)(&Domain), *(void**)(&Path)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager<D>::DeleteAllCookies() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->DeleteAllCookies());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>**)this;
            check_hresult(_winrt_abi_type->DeleteAllCookies());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager_Manual<D>::GetCookiesAsync(param::hstring const& uri) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager_Manual>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager_Manual, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager_Manual>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetCookiesAsync(*(void**)(&uri), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager_Manual>**)this;
            check_hresult(_winrt_abi_type->GetCookiesAsync(*(void**)(&uri), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie>>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration<D>::TreatAsSecure() const
    {
        int32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_TreatAsSecure(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration>**)this;
            check_hresult(_winrt_abi_type->get_TreatAsSecure(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration<D>::TreatAsSecure(int32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_TreatAsSecure(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration>**)this;
            check_hresult(_winrt_abi_type->put_TreatAsSecure(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration<D>::HasAuthorityComponent() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_HasAuthorityComponent(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration>**)this;
            check_hresult(_winrt_abi_type->get_HasAuthorityComponent(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration<D>::HasAuthorityComponent(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_HasAuthorityComponent(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration>**)this;
            check_hresult(_winrt_abi_type->put_HasAuthorityComponent(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistrationFactory<D>::CreateInstance(param::hstring const& schemeName) const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistrationFactory>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistrationFactory, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistrationFactory>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateInstance(*(void**)(&schemeName), &value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistrationFactory>**)this;
            check_hresult(_winrt_abi_type->CreateInstance(*(void**)(&schemeName), &value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2CustomSchemeRegistration{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration_Manual<D>::SchemeName() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration_Manual>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration_Manual, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration_Manual>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_SchemeName(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration_Manual>**)this;
            check_hresult(_winrt_abi_type->get_SchemeName(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2CustomSchemeRegistration_Manual<D>::AllowedOrigins() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration_Manual>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration_Manual, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration_Manual>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_AllowedOrigins(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration_Manual>**)this;
            check_hresult(_winrt_abi_type->get_AllowedOrigins(&value));
        }
        return winrt::Windows::Foundation::Collections::IVector<hstring>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DOMContentLoadedEventArgs<D>::NavigationId() const
    {
        uint64_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DOMContentLoadedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DOMContentLoadedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DOMContentLoadedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_NavigationId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DOMContentLoadedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_NavigationId(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceivedEventArgs<D>::ParameterObjectAsJson() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ParameterObjectAsJson(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_ParameterObjectAsJson(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceivedEventArgs2<D>::SessionId() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_SessionId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs2>**)this;
            check_hresult(_winrt_abi_type->get_SessionId(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceiver<D>::DevToolsProtocolEventReceived(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2DevToolsProtocolEventReceivedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_DevToolsProtocolEventReceived(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver>**)this;
            check_hresult(_winrt_abi_type->add_DevToolsProtocolEventReceived(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceiver<D>::DevToolsProtocolEventReceived(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2DevToolsProtocolEventReceivedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, DevToolsProtocolEventReceived_revoker>(this, DevToolsProtocolEventReceived(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceiver<D>::DevToolsProtocolEventReceived(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver>**)&_winrt_casted_result;
            _winrt_abi_type->remove_DevToolsProtocolEventReceived(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver>**)this;
            _winrt_abi_type->remove_DevToolsProtocolEventReceived(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DispatchAdapter<D>::WrapNamedObject(param::hstring const& name, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter const& adapter) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->WrapNamedObject(*(void**)(&name), *(void**)(&adapter), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter>**)this;
            check_hresult(_winrt_abi_type->WrapNamedObject(*(void**)(&name), *(void**)(&adapter), &result));
        }
        return winrt::Windows::Foundation::IInspectable{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DispatchAdapter<D>::WrapObject(winrt::Windows::Foundation::IInspectable const& unwrapped, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter const& adapter) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->WrapObject(*(void**)(&unwrapped), *(void**)(&adapter), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter>**)this;
            check_hresult(_winrt_abi_type->WrapObject(*(void**)(&unwrapped), *(void**)(&adapter), &result));
        }
        return winrt::Windows::Foundation::IInspectable{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DispatchAdapter<D>::UnwrapObject(winrt::Windows::Foundation::IInspectable const& wrapped) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->UnwrapObject(*(void**)(&wrapped), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter>**)this;
            check_hresult(_winrt_abi_type->UnwrapObject(*(void**)(&wrapped), &result));
        }
        return winrt::Windows::Foundation::IInspectable{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DispatchAdapter<D>::Clean() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Clean());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter>**)this;
            check_hresult(_winrt_abi_type->Clean());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::Uri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::ContentDisposition() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ContentDisposition(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            check_hresult(_winrt_abi_type->get_ContentDisposition(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::MimeType() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_MimeType(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            check_hresult(_winrt_abi_type->get_MimeType(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::TotalBytesToReceive() const
    {
        int64_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_TotalBytesToReceive(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            check_hresult(_winrt_abi_type->get_TotalBytesToReceive(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::BytesReceived() const
    {
        int64_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_BytesReceived(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            check_hresult(_winrt_abi_type->get_BytesReceived(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::EstimatedEndTime() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_EstimatedEndTime(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            check_hresult(_winrt_abi_type->get_EstimatedEndTime(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::ResultFilePath() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ResultFilePath(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            check_hresult(_winrt_abi_type->get_ResultFilePath(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::State() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadState value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_State(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            check_hresult(_winrt_abi_type->get_State(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::InterruptReason() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadInterruptReason value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_InterruptReason(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            check_hresult(_winrt_abi_type->get_InterruptReason(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::CanResume() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_CanResume(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            check_hresult(_winrt_abi_type->get_CanResume(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::BytesReceivedChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadOperation, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_BytesReceivedChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            check_hresult(_winrt_abi_type->add_BytesReceivedChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::BytesReceivedChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadOperation, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, BytesReceivedChanged_revoker>(this, BytesReceivedChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::BytesReceivedChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            _winrt_abi_type->remove_BytesReceivedChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            _winrt_abi_type->remove_BytesReceivedChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::EstimatedEndTimeChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadOperation, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_EstimatedEndTimeChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            check_hresult(_winrt_abi_type->add_EstimatedEndTimeChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::EstimatedEndTimeChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadOperation, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, EstimatedEndTimeChanged_revoker>(this, EstimatedEndTimeChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::EstimatedEndTimeChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            _winrt_abi_type->remove_EstimatedEndTimeChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            _winrt_abi_type->remove_EstimatedEndTimeChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::StateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadOperation, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_StateChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            check_hresult(_winrt_abi_type->add_StateChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::StateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadOperation, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, StateChanged_revoker>(this, StateChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::StateChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            _winrt_abi_type->remove_StateChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            _winrt_abi_type->remove_StateChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::Cancel() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Cancel());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            check_hresult(_winrt_abi_type->Cancel());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::Pause() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Pause());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            check_hresult(_winrt_abi_type->Pause());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadOperation<D>::Resume() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Resume());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>**)this;
            check_hresult(_winrt_abi_type->Resume());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadStartingEventArgs<D>::DownloadOperation() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DownloadOperation(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_DownloadOperation(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadOperation{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadStartingEventArgs<D>::Cancel() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Cancel(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Cancel(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadStartingEventArgs<D>::Cancel(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Cancel(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Cancel(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadStartingEventArgs<D>::ResultFilePath() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ResultFilePath(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_ResultFilePath(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadStartingEventArgs<D>::ResultFilePath(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ResultFilePath(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_ResultFilePath(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadStartingEventArgs<D>::Handled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadStartingEventArgs<D>::Handled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2DownloadStartingEventArgs<D>::GetDeferral() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        return winrt::Windows::Foundation::Deferral{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment<D>::BrowserVersionString() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_BrowserVersionString(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>**)this;
            check_hresult(_winrt_abi_type->get_BrowserVersionString(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment<D>::NewBrowserVersionAvailable(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_NewBrowserVersionAvailable(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>**)this;
            check_hresult(_winrt_abi_type->add_NewBrowserVersionAvailable(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment<D>::NewBrowserVersionAvailable(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, NewBrowserVersionAvailable_revoker>(this, NewBrowserVersionAvailable(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment<D>::NewBrowserVersionAvailable(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>**)&_winrt_casted_result;
            _winrt_abi_type->remove_NewBrowserVersionAvailable(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>**)this;
            _winrt_abi_type->remove_NewBrowserVersionAvailable(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment<D>::CreateCoreWebView2ControllerAsync(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference const& ParentWindow) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateCoreWebView2ControllerAsync(*(void**)(&ParentWindow), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>**)this;
            check_hresult(_winrt_abi_type->CreateCoreWebView2ControllerAsync(*(void**)(&ParentWindow), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment<D>::CreateWebResourceResponse(winrt::Windows::Storage::Streams::IRandomAccessStream const& Content, int32_t StatusCode, param::hstring const& ReasonPhrase, param::hstring const& Headers) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateWebResourceResponse(*(void**)(&Content), StatusCode, *(void**)(&ReasonPhrase), *(void**)(&Headers), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>**)this;
            check_hresult(_winrt_abi_type->CreateWebResourceResponse(*(void**)(&Content), StatusCode, *(void**)(&ReasonPhrase), *(void**)(&Headers), &result));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponse{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment10<D>::CreateCoreWebView2ControllerOptions() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment10>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment10, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment10>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateCoreWebView2ControllerOptions(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment10>**)this;
            check_hresult(_winrt_abi_type->CreateCoreWebView2ControllerOptions(&result));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerOptions{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment11<D>::FailureReportFolderPath() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment11>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment11, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment11>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_FailureReportFolderPath(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment11>**)this;
            check_hresult(_winrt_abi_type->get_FailureReportFolderPath(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment12<D>::CreateSharedBuffer(uint64_t Size) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment12>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment12, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment12>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateSharedBuffer(Size, &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment12>**)this;
            check_hresult(_winrt_abi_type->CreateSharedBuffer(Size, &result));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2SharedBuffer{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment13<D>::GetProcessExtendedInfosAsync() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment13>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment13, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment13>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetProcessExtendedInfosAsync(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment13>**)this;
            check_hresult(_winrt_abi_type->GetProcessExtendedInfosAsync(&operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessExtendedInfo>>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment14<D>::CreateWebFileSystemFileHandle(param::hstring const& Path, winrt::Microsoft::Web::WebView2::Core::CoreWebView2FileSystemHandlePermission const& Permission) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment14>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment14, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment14>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateWebFileSystemFileHandle(*(void**)(&Path), static_cast<int32_t>(Permission), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment14>**)this;
            check_hresult(_winrt_abi_type->CreateWebFileSystemFileHandle(*(void**)(&Path), static_cast<int32_t>(Permission), &result));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2FileSystemHandle{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment14<D>::CreateWebFileSystemDirectoryHandle(param::hstring const& Path, winrt::Microsoft::Web::WebView2::Core::CoreWebView2FileSystemHandlePermission const& Permission) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment14>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment14, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment14>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateWebFileSystemDirectoryHandle(*(void**)(&Path), static_cast<int32_t>(Permission), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment14>**)this;
            check_hresult(_winrt_abi_type->CreateWebFileSystemDirectoryHandle(*(void**)(&Path), static_cast<int32_t>(Permission), &result));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2FileSystemHandle{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment2<D>::CreateWebResourceRequest(param::hstring const& uri, param::hstring const& Method, winrt::Windows::Storage::Streams::IRandomAccessStream const& postData, param::hstring const& Headers) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateWebResourceRequest(*(void**)(&uri), *(void**)(&Method), *(void**)(&postData), *(void**)(&Headers), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment2>**)this;
            check_hresult(_winrt_abi_type->CreateWebResourceRequest(*(void**)(&uri), *(void**)(&Method), *(void**)(&postData), *(void**)(&Headers), &result));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequest{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment3<D>::CreateCoreWebView2CompositionControllerAsync(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference const& ParentWindow) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateCoreWebView2CompositionControllerAsync(*(void**)(&ParentWindow), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment3>**)this;
            check_hresult(_winrt_abi_type->CreateCoreWebView2CompositionControllerAsync(*(void**)(&ParentWindow), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CompositionController>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment3<D>::CreateCoreWebView2PointerInfo() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateCoreWebView2PointerInfo(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment3>**)this;
            check_hresult(_winrt_abi_type->CreateCoreWebView2PointerInfo(&result));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2PointerInfo{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment5<D>::BrowserProcessExited(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment, winrt::Microsoft::Web::WebView2::Core::CoreWebView2BrowserProcessExitedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment5>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment5, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment5>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_BrowserProcessExited(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment5>**)this;
            check_hresult(_winrt_abi_type->add_BrowserProcessExited(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment5<D>::BrowserProcessExited(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment, winrt::Microsoft::Web::WebView2::Core::CoreWebView2BrowserProcessExitedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, BrowserProcessExited_revoker>(this, BrowserProcessExited(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment5<D>::BrowserProcessExited(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment5>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment5, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment5>**)&_winrt_casted_result;
            _winrt_abi_type->remove_BrowserProcessExited(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment5>**)this;
            _winrt_abi_type->remove_BrowserProcessExited(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment6<D>::CreatePrintSettings() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment6>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment6, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment6>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreatePrintSettings(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment6>**)this;
            check_hresult(_winrt_abi_type->CreatePrintSettings(&result));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintSettings{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment7<D>::UserDataFolder() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment7>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment7, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment7>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_UserDataFolder(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment7>**)this;
            check_hresult(_winrt_abi_type->get_UserDataFolder(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment8<D>::ProcessInfosChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment8>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment8, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment8>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_ProcessInfosChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment8>**)this;
            check_hresult(_winrt_abi_type->add_ProcessInfosChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment8<D>::ProcessInfosChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, ProcessInfosChanged_revoker>(this, ProcessInfosChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment8<D>::ProcessInfosChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment8>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment8, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment8>**)&_winrt_casted_result;
            _winrt_abi_type->remove_ProcessInfosChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment8>**)this;
            _winrt_abi_type->remove_ProcessInfosChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment8<D>::GetProcessInfos() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment8>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment8, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment8>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetProcessInfos(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment8>**)this;
            check_hresult(_winrt_abi_type->GetProcessInfos(&result));
        }
        return winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessInfo>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment9<D>::CreateContextMenuItem(param::hstring const& Label, winrt::Windows::Storage::Streams::IRandomAccessStream const& iconStream, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuItemKind const& Kind) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment9>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment9, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment9>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateContextMenuItem(*(void**)(&Label), *(void**)(&iconStream), static_cast<int32_t>(Kind), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment9>**)this;
            check_hresult(_winrt_abi_type->CreateContextMenuItem(*(void**)(&Label), *(void**)(&iconStream), static_cast<int32_t>(Kind), &result));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuItem{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions<D>::AdditionalBrowserArguments() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_AdditionalBrowserArguments(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>**)this;
            check_hresult(_winrt_abi_type->get_AdditionalBrowserArguments(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions<D>::AdditionalBrowserArguments(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_AdditionalBrowserArguments(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>**)this;
            check_hresult(_winrt_abi_type->put_AdditionalBrowserArguments(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions<D>::Language() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Language(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>**)this;
            check_hresult(_winrt_abi_type->get_Language(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions<D>::Language(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Language(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>**)this;
            check_hresult(_winrt_abi_type->put_Language(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions<D>::TargetCompatibleBrowserVersion() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_TargetCompatibleBrowserVersion(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>**)this;
            check_hresult(_winrt_abi_type->get_TargetCompatibleBrowserVersion(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions<D>::TargetCompatibleBrowserVersion(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_TargetCompatibleBrowserVersion(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>**)this;
            check_hresult(_winrt_abi_type->put_TargetCompatibleBrowserVersion(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions<D>::AllowSingleSignOnUsingOSPrimaryAccount() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_AllowSingleSignOnUsingOSPrimaryAccount(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>**)this;
            check_hresult(_winrt_abi_type->get_AllowSingleSignOnUsingOSPrimaryAccount(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions<D>::AllowSingleSignOnUsingOSPrimaryAccount(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_AllowSingleSignOnUsingOSPrimaryAccount(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>**)this;
            check_hresult(_winrt_abi_type->put_AllowSingleSignOnUsingOSPrimaryAccount(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions2<D>::ExclusiveUserDataFolderAccess() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ExclusiveUserDataFolderAccess(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions2>**)this;
            check_hresult(_winrt_abi_type->get_ExclusiveUserDataFolderAccess(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions2<D>::ExclusiveUserDataFolderAccess(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ExclusiveUserDataFolderAccess(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions2>**)this;
            check_hresult(_winrt_abi_type->put_ExclusiveUserDataFolderAccess(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions3<D>::IsCustomCrashReportingEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsCustomCrashReportingEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions3>**)this;
            check_hresult(_winrt_abi_type->get_IsCustomCrashReportingEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions3<D>::IsCustomCrashReportingEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsCustomCrashReportingEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions3>**)this;
            check_hresult(_winrt_abi_type->put_IsCustomCrashReportingEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions5<D>::EnableTrackingPrevention() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions5>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions5, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions5>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_EnableTrackingPrevention(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions5>**)this;
            check_hresult(_winrt_abi_type->get_EnableTrackingPrevention(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions5<D>::EnableTrackingPrevention(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions5>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions5, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions5>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_EnableTrackingPrevention(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions5>**)this;
            check_hresult(_winrt_abi_type->put_EnableTrackingPrevention(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions6<D>::AreBrowserExtensionsEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions6>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions6, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions6>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_AreBrowserExtensionsEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions6>**)this;
            check_hresult(_winrt_abi_type->get_AreBrowserExtensionsEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions6<D>::AreBrowserExtensionsEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions6>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions6, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions6>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_AreBrowserExtensionsEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions6>**)this;
            check_hresult(_winrt_abi_type->put_AreBrowserExtensionsEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions7<D>::ChannelSearchKind() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2ChannelSearchKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ChannelSearchKind(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7>**)this;
            check_hresult(_winrt_abi_type->get_ChannelSearchKind(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions7<D>::ChannelSearchKind(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ChannelSearchKind const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ChannelSearchKind(static_cast<int32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7>**)this;
            check_hresult(_winrt_abi_type->put_ChannelSearchKind(static_cast<int32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions7<D>::ReleaseChannels() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2ReleaseChannels value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ReleaseChannels(reinterpret_cast<uint32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7>**)this;
            check_hresult(_winrt_abi_type->get_ReleaseChannels(reinterpret_cast<uint32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions7<D>::ReleaseChannels(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ReleaseChannels const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ReleaseChannels(static_cast<uint32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7>**)this;
            check_hresult(_winrt_abi_type->put_ReleaseChannels(static_cast<uint32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions8<D>::ScrollBarStyle() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScrollbarStyle value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions8>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions8, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions8>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ScrollBarStyle(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions8>**)this;
            check_hresult(_winrt_abi_type->get_ScrollBarStyle(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions8<D>::ScrollBarStyle(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScrollbarStyle const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions8>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions8, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions8>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ScrollBarStyle(static_cast<int32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions8>**)this;
            check_hresult(_winrt_abi_type->put_ScrollBarStyle(static_cast<int32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual3<D>::CustomSchemeRegistrations() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions_Manual3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions_Manual3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions_Manual3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_CustomSchemeRegistrations(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions_Manual3>**)this;
            check_hresult(_winrt_abi_type->get_CustomSchemeRegistrations(&value));
        }
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CustomSchemeRegistration>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions_Manual3<D>::CustomSchemeRegistrations(param::vector<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CustomSchemeRegistration> const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions_Manual3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions_Manual3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions_Manual3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_CustomSchemeRegistrations(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions_Manual3>**)this;
            check_hresult(_winrt_abi_type->put_CustomSchemeRegistrations(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics<D>::CreateAsync() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateAsync(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>**)this;
            check_hresult(_winrt_abi_type->CreateAsync(&operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics<D>::CreateWithOptionsAsync(param::hstring const& browserExecutableFolder, param::hstring const& userDataFolder, winrt::Microsoft::Web::WebView2::Core::CoreWebView2EnvironmentOptions const& options) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateWithOptionsAsync(*(void**)(&browserExecutableFolder), *(void**)(&userDataFolder), *(void**)(&options), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>**)this;
            check_hresult(_winrt_abi_type->CreateWithOptionsAsync(*(void**)(&browserExecutableFolder), *(void**)(&userDataFolder), *(void**)(&options), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics<D>::GetAvailableBrowserVersionString() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetAvailableBrowserVersionString(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>**)this;
            check_hresult(_winrt_abi_type->GetAvailableBrowserVersionString(&result));
        }
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics<D>::GetAvailableBrowserVersionString(param::hstring const& browserExecutableFolder) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetAvailableBrowserVersionString2(*(void**)(&browserExecutableFolder), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>**)this;
            check_hresult(_winrt_abi_type->GetAvailableBrowserVersionString2(*(void**)(&browserExecutableFolder), &result));
        }
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics<D>::CompareBrowserVersionString(param::hstring const& browserVersionString1, param::hstring const& browserVersionString2) const
    {
        int32_t result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CompareBrowserVersionString(*(void**)(&browserVersionString1), *(void**)(&browserVersionString2), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>**)this;
            check_hresult(_winrt_abi_type->CompareBrowserVersionString(*(void**)(&browserVersionString1), *(void**)(&browserVersionString2), &result));
        }
        return result;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics2<D>::GetAvailableBrowserVersionString(param::hstring const& browserExecutableFolder, winrt::Microsoft::Web::WebView2::Core::CoreWebView2EnvironmentOptions const& options) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetAvailableBrowserVersionStringWithOptions(*(void**)(&browserExecutableFolder), *(void**)(&options), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics2>**)this;
            check_hresult(_winrt_abi_type->GetAvailableBrowserVersionStringWithOptions(*(void**)(&browserExecutableFolder), *(void**)(&options), &result));
        }
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment_Manual<D>::CreateCoreWebView2ControllerAsync(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference const& ParentWindow, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerOptions const& options) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment_Manual>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment_Manual, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment_Manual>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateCoreWebView2ControllerAsync(*(void**)(&ParentWindow), *(void**)(&options), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment_Manual>**)this;
            check_hresult(_winrt_abi_type->CreateCoreWebView2ControllerAsync(*(void**)(&ParentWindow), *(void**)(&options), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment_Manual<D>::CreateCoreWebView2CompositionControllerAsync(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference const& ParentWindow, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerOptions const& options) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment_Manual>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment_Manual, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment_Manual>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateCoreWebView2CompositionControllerAsync(*(void**)(&ParentWindow), *(void**)(&options), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment_Manual>**)this;
            check_hresult(_winrt_abi_type->CreateCoreWebView2CompositionControllerAsync(*(void**)(&ParentWindow), *(void**)(&options), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CompositionController>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ExecuteScriptResult<D>::Succeeded() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Succeeded(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult>**)this;
            check_hresult(_winrt_abi_type->get_Succeeded(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ExecuteScriptResult<D>::ResultAsJson() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ResultAsJson(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult>**)this;
            check_hresult(_winrt_abi_type->get_ResultAsJson(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ExecuteScriptResult<D>::Exception() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Exception(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult>**)this;
            check_hresult(_winrt_abi_type->get_Exception(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScriptException{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ExecuteScriptResult_Manual<D>::TryGetResultAsString(hstring& stringResult) const
    {
        int32_t result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult_Manual>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult_Manual, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult_Manual>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->TryGetResultAsString(impl::bind_out(stringResult), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult_Manual>**)this;
            check_hresult(_winrt_abi_type->TryGetResultAsString(impl::bind_out(stringResult), &result));
        }
        return result;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2File<D>::Path() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2File>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2File, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2File>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Path(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2File>**)this;
            check_hresult(_winrt_abi_type->get_Path(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2FileSystemHandle<D>::Kind() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2FileSystemHandleKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FileSystemHandle>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FileSystemHandle, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FileSystemHandle>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Kind(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FileSystemHandle>**)this;
            check_hresult(_winrt_abi_type->get_Kind(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2FileSystemHandle<D>::Path() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FileSystemHandle>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FileSystemHandle, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FileSystemHandle>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Path(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FileSystemHandle>**)this;
            check_hresult(_winrt_abi_type->get_Path(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2FileSystemHandle<D>::Permission() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2FileSystemHandlePermission value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FileSystemHandle>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FileSystemHandle, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FileSystemHandle>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Permission(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FileSystemHandle>**)this;
            check_hresult(_winrt_abi_type->get_Permission(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame<D>::Name() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>**)this;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame<D>::NameChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_NameChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>**)this;
            check_hresult(_winrt_abi_type->add_NameChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame<D>::NameChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, NameChanged_revoker>(this, NameChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame<D>::NameChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>**)&_winrt_casted_result;
            _winrt_abi_type->remove_NameChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>**)this;
            _winrt_abi_type->remove_NameChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame<D>::Destroyed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_Destroyed(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>**)this;
            check_hresult(_winrt_abi_type->add_Destroyed(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame<D>::Destroyed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, Destroyed_revoker>(this, Destroyed(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame<D>::Destroyed(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>**)&_winrt_casted_result;
            _winrt_abi_type->remove_Destroyed(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>**)this;
            _winrt_abi_type->remove_Destroyed(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame<D>::RemoveHostObjectFromScript(param::hstring const& name) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->RemoveHostObjectFromScript(*(void**)(&name)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>**)this;
            check_hresult(_winrt_abi_type->RemoveHostObjectFromScript(*(void**)(&name)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame<D>::IsDestroyed() const
    {
        int32_t result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->IsDestroyed(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>**)this;
            check_hresult(_winrt_abi_type->IsDestroyed(&result));
        }
        return result;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::NavigationStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_NavigationStarting(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)this;
            check_hresult(_winrt_abi_type->add_NavigationStarting(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::NavigationStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, NavigationStarting_revoker>(this, NavigationStarting(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::NavigationStarting(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_NavigationStarting(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)this;
            _winrt_abi_type->remove_NavigationStarting(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::ContentLoading(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContentLoadingEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_ContentLoading(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)this;
            check_hresult(_winrt_abi_type->add_ContentLoading(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::ContentLoading(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContentLoadingEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, ContentLoading_revoker>(this, ContentLoading(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::ContentLoading(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_ContentLoading(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)this;
            _winrt_abi_type->remove_ContentLoading(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::NavigationCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_NavigationCompleted(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)this;
            check_hresult(_winrt_abi_type->add_NavigationCompleted(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::NavigationCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, NavigationCompleted_revoker>(this, NavigationCompleted(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::NavigationCompleted(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_NavigationCompleted(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)this;
            _winrt_abi_type->remove_NavigationCompleted(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::DOMContentLoaded(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2DOMContentLoadedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_DOMContentLoaded(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)this;
            check_hresult(_winrt_abi_type->add_DOMContentLoaded(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::DOMContentLoaded(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2DOMContentLoadedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, DOMContentLoaded_revoker>(this, DOMContentLoaded(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::DOMContentLoaded(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_DOMContentLoaded(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)this;
            _winrt_abi_type->remove_DOMContentLoaded(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::WebMessageReceived(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebMessageReceivedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_WebMessageReceived(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)this;
            check_hresult(_winrt_abi_type->add_WebMessageReceived(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::WebMessageReceived(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebMessageReceivedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, WebMessageReceived_revoker>(this, WebMessageReceived(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::WebMessageReceived(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_WebMessageReceived(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)this;
            _winrt_abi_type->remove_WebMessageReceived(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::ExecuteScriptAsync(param::hstring const& javaScript) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->ExecuteScriptAsync(*(void**)(&javaScript), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)this;
            check_hresult(_winrt_abi_type->ExecuteScriptAsync(*(void**)(&javaScript), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<hstring>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::PostWebMessageAsJson(param::hstring const& webMessageAsJson) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->PostWebMessageAsJson(*(void**)(&webMessageAsJson)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)this;
            check_hresult(_winrt_abi_type->PostWebMessageAsJson(*(void**)(&webMessageAsJson)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame2<D>::PostWebMessageAsString(param::hstring const& webMessageAsString) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->PostWebMessageAsString(*(void**)(&webMessageAsString)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>**)this;
            check_hresult(_winrt_abi_type->PostWebMessageAsString(*(void**)(&webMessageAsString)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame3<D>::PermissionRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionRequestedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_PermissionRequested(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame3>**)this;
            check_hresult(_winrt_abi_type->add_PermissionRequested(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame3<D>::PermissionRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionRequestedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, PermissionRequested_revoker>(this, PermissionRequested(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame3<D>::PermissionRequested(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame3>**)&_winrt_casted_result;
            _winrt_abi_type->remove_PermissionRequested(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame3>**)this;
            _winrt_abi_type->remove_PermissionRequested(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame4<D>::PostSharedBufferToScript(winrt::Microsoft::Web::WebView2::Core::CoreWebView2SharedBuffer const& sharedBuffer, winrt::Microsoft::Web::WebView2::Core::CoreWebView2SharedBufferAccess const& access, param::hstring const& additionalDataAsJson) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame4>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame4, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame4>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->PostSharedBufferToScript(*(void**)(&sharedBuffer), static_cast<int32_t>(access), *(void**)(&additionalDataAsJson)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame4>**)this;
            check_hresult(_winrt_abi_type->PostSharedBufferToScript(*(void**)(&sharedBuffer), static_cast<int32_t>(access), *(void**)(&additionalDataAsJson)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame5<D>::FrameId() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame5>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame5, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame5>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_FrameId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame5>**)this;
            check_hresult(_winrt_abi_type->get_FrameId(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame6<D>::ScreenCaptureStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScreenCaptureStartingEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame6>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame6, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame6>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_ScreenCaptureStarting(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame6>**)this;
            check_hresult(_winrt_abi_type->add_ScreenCaptureStarting(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame6<D>::ScreenCaptureStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScreenCaptureStartingEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, ScreenCaptureStarting_revoker>(this, ScreenCaptureStarting(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Frame6<D>::ScreenCaptureStarting(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame6>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame6, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame6>**)&_winrt_casted_result;
            _winrt_abi_type->remove_ScreenCaptureStarting(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame6>**)this;
            _winrt_abi_type->remove_ScreenCaptureStarting(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2FrameCreatedEventArgs<D>::Frame() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameCreatedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameCreatedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameCreatedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Frame(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameCreatedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Frame(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo<D>::Name() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo>**)this;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo<D>::Source() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Source(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo>**)this;
            check_hresult(_winrt_abi_type->get_Source(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo2<D>::ParentFrameInfo() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ParentFrameInfo(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo2>**)this;
            check_hresult(_winrt_abi_type->get_ParentFrameInfo(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2FrameInfo{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo2<D>::FrameId() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_FrameId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo2>**)this;
            check_hresult(_winrt_abi_type->get_FrameId(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2FrameInfo2<D>::FrameKind() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2FrameKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_FrameKind(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo2>**)this;
            check_hresult(_winrt_abi_type->get_FrameKind(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2HttpRequestHeaders<D>::GetHeader(param::hstring const& name) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetHeader(*(void**)(&name), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>**)this;
            check_hresult(_winrt_abi_type->GetHeader(*(void**)(&name), &result));
        }
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2HttpRequestHeaders<D>::GetHeaders(param::hstring const& name) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetHeaders(*(void**)(&name), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>**)this;
            check_hresult(_winrt_abi_type->GetHeaders(*(void**)(&name), &result));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpHeadersCollectionIterator{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2HttpRequestHeaders<D>::Contains(param::hstring const& name) const
    {
        bool result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Contains(*(void**)(&name), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>**)this;
            check_hresult(_winrt_abi_type->Contains(*(void**)(&name), &result));
        }
        return result;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2HttpRequestHeaders<D>::SetHeader(param::hstring const& name, param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->SetHeader(*(void**)(&name), *(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>**)this;
            check_hresult(_winrt_abi_type->SetHeader(*(void**)(&name), *(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2HttpRequestHeaders<D>::RemoveHeader(param::hstring const& name) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->RemoveHeader(*(void**)(&name)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>**)this;
            check_hresult(_winrt_abi_type->RemoveHeader(*(void**)(&name)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2HttpResponseHeaders<D>::AppendHeader(param::hstring const& name, param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->AppendHeader(*(void**)(&name), *(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders>**)this;
            check_hresult(_winrt_abi_type->AppendHeader(*(void**)(&name), *(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2HttpResponseHeaders<D>::Contains(param::hstring const& name) const
    {
        bool result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Contains(*(void**)(&name), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders>**)this;
            check_hresult(_winrt_abi_type->Contains(*(void**)(&name), &result));
        }
        return result;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2HttpResponseHeaders<D>::GetHeader(param::hstring const& name) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetHeader(*(void**)(&name), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders>**)this;
            check_hresult(_winrt_abi_type->GetHeader(*(void**)(&name), &result));
        }
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2HttpResponseHeaders<D>::GetHeaders(param::hstring const& name) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetHeaders(*(void**)(&name), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders>**)this;
            check_hresult(_winrt_abi_type->GetHeaders(*(void**)(&name), &result));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpHeadersCollectionIterator{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2LaunchingExternalUriSchemeEventArgs<D>::Uri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2LaunchingExternalUriSchemeEventArgs<D>::InitiatingOrigin() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_InitiatingOrigin(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_InitiatingOrigin(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2LaunchingExternalUriSchemeEventArgs<D>::IsUserInitiated() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsUserInitiated(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_IsUserInitiated(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2LaunchingExternalUriSchemeEventArgs<D>::Cancel() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Cancel(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Cancel(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2LaunchingExternalUriSchemeEventArgs<D>::Cancel(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Cancel(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Cancel(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2LaunchingExternalUriSchemeEventArgs<D>::GetDeferral() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>**)this;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        return winrt::Windows::Foundation::Deferral{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2MoveFocusRequestedEventArgs<D>::Reason() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2MoveFocusReason value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Reason(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Reason(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2MoveFocusRequestedEventArgs<D>::Handled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2MoveFocusRequestedEventArgs<D>::Handled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs<D>::IsSuccess() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsSuccess(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_IsSuccess(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs<D>::WebErrorStatus() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebErrorStatus value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_WebErrorStatus(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_WebErrorStatus(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs<D>::NavigationId() const
    {
        uint64_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_NavigationId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_NavigationId(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs2<D>::HttpStatusCode() const
    {
        int32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_HttpStatusCode(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs2>**)this;
            check_hresult(_winrt_abi_type->get_HttpStatusCode(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs<D>::Uri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs<D>::IsUserInitiated() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsUserInitiated(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_IsUserInitiated(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs<D>::IsRedirected() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsRedirected(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_IsRedirected(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs<D>::RequestHeaders() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_RequestHeaders(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_RequestHeaders(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpRequestHeaders{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs<D>::Cancel() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Cancel(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Cancel(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs<D>::Cancel(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Cancel(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Cancel(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs<D>::NavigationId() const
    {
        uint64_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_NavigationId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_NavigationId(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs2<D>::AdditionalAllowedFrameAncestors() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_AdditionalAllowedFrameAncestors(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs2>**)this;
            check_hresult(_winrt_abi_type->get_AdditionalAllowedFrameAncestors(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs2<D>::AdditionalAllowedFrameAncestors(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_AdditionalAllowedFrameAncestors(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs2>**)this;
            check_hresult(_winrt_abi_type->put_AdditionalAllowedFrameAncestors(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs3<D>::NavigationKind() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_NavigationKind(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs3>**)this;
            check_hresult(_winrt_abi_type->get_NavigationKind(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs<D>::Uri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs<D>::NewWindow() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_NewWindow(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_NewWindow(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs<D>::NewWindow(winrt::Microsoft::Web::WebView2::Core::CoreWebView2 const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_NewWindow(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_NewWindow(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs<D>::Handled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs<D>::Handled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs<D>::IsUserInitiated() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsUserInitiated(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_IsUserInitiated(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs<D>::WindowFeatures() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_WindowFeatures(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_WindowFeatures(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2WindowFeatures{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs<D>::GetDeferral() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        return winrt::Windows::Foundation::Deferral{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs2<D>::Name() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs2>**)this;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs3<D>::OriginalSourceFrameInfo() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_OriginalSourceFrameInfo(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs3>**)this;
            check_hresult(_winrt_abi_type->get_OriginalSourceFrameInfo(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2FrameInfo{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NonClientRegionChangedEventArgs<D>::RegionKind() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2NonClientRegionKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NonClientRegionChangedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NonClientRegionChangedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NonClientRegionChangedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_RegionKind(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NonClientRegionChangedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_RegionKind(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::Body() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Body(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)this;
            check_hresult(_winrt_abi_type->get_Body(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::Direction() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2TextDirectionKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Direction(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)this;
            check_hresult(_winrt_abi_type->get_Direction(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::Language() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Language(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)this;
            check_hresult(_winrt_abi_type->get_Language(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::Tag() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Tag(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)this;
            check_hresult(_winrt_abi_type->get_Tag(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::IconUri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IconUri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)this;
            check_hresult(_winrt_abi_type->get_IconUri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::Title() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Title(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)this;
            check_hresult(_winrt_abi_type->get_Title(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::BadgeUri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_BadgeUri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)this;
            check_hresult(_winrt_abi_type->get_BadgeUri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::BodyImageUri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_BodyImageUri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)this;
            check_hresult(_winrt_abi_type->get_BodyImageUri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::ShouldRenotify() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ShouldRenotify(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)this;
            check_hresult(_winrt_abi_type->get_ShouldRenotify(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::RequiresInteraction() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_RequiresInteraction(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)this;
            check_hresult(_winrt_abi_type->get_RequiresInteraction(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::IsSilent() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsSilent(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)this;
            check_hresult(_winrt_abi_type->get_IsSilent(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::Timestamp() const
    {
        double value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Timestamp(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)this;
            check_hresult(_winrt_abi_type->get_Timestamp(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::CloseRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Notification, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_CloseRequested(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)this;
            check_hresult(_winrt_abi_type->add_CloseRequested(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::CloseRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Notification, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, CloseRequested_revoker>(this, CloseRequested(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::CloseRequested(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)&_winrt_casted_result;
            _winrt_abi_type->remove_CloseRequested(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)this;
            _winrt_abi_type->remove_CloseRequested(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::ReportShown() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->ReportShown());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)this;
            check_hresult(_winrt_abi_type->ReportShown());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::ReportClicked() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->ReportClicked());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)this;
            check_hresult(_winrt_abi_type->ReportClicked());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification<D>::ReportClosed() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->ReportClosed());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>**)this;
            check_hresult(_winrt_abi_type->ReportClosed());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NotificationReceivedEventArgs<D>::SenderOrigin() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_SenderOrigin(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_SenderOrigin(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NotificationReceivedEventArgs<D>::Notification() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Notification(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Notification(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2Notification{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NotificationReceivedEventArgs<D>::Handled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NotificationReceivedEventArgs<D>::Handled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2NotificationReceivedEventArgs<D>::GetDeferral() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs>**)this;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        return winrt::Windows::Foundation::Deferral{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Notification_Manual2<D>::VibrationPattern() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification_Manual2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification_Manual2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification_Manual2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_VibrationPattern(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification_Manual2>**)this;
            check_hresult(_winrt_abi_type->get_VibrationPattern(&value));
        }
        return winrt::Windows::Foundation::Collections::IVectorView<uint64_t>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs<D>::Uri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs<D>::PermissionKind() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PermissionKind(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_PermissionKind(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs<D>::IsUserInitiated() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsUserInitiated(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_IsUserInitiated(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs<D>::State() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionState value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_State(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_State(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs<D>::State(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionState const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_State(static_cast<int32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_State(static_cast<int32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs<D>::GetDeferral() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        return winrt::Windows::Foundation::Deferral{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs2<D>::Handled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs2>**)this;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs2<D>::Handled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs2>**)this;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs3<D>::SavesInProfile() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_SavesInProfile(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs3>**)this;
            check_hresult(_winrt_abi_type->get_SavesInProfile(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs3<D>::SavesInProfile(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_SavesInProfile(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs3>**)this;
            check_hresult(_winrt_abi_type->put_SavesInProfile(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PermissionSetting<D>::PermissionKind() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionSetting>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionSetting, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionSetting>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PermissionKind(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionSetting>**)this;
            check_hresult(_winrt_abi_type->get_PermissionKind(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PermissionSetting<D>::PermissionOrigin() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionSetting>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionSetting, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionSetting>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PermissionOrigin(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionSetting>**)this;
            check_hresult(_winrt_abi_type->get_PermissionOrigin(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PermissionSetting<D>::PermissionState() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionState value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionSetting>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionSetting, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionSetting>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PermissionState(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionSetting>**)this;
            check_hresult(_winrt_abi_type->get_PermissionState(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PointerKind() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PointerKind(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_PointerKind(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PointerKind(uint32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PointerKind(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_PointerKind(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PointerId() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PointerId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_PointerId(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PointerId(uint32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PointerId(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_PointerId(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::FrameId() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_FrameId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_FrameId(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::FrameId(uint32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_FrameId(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_FrameId(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PointerFlags() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PointerFlags(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_PointerFlags(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PointerFlags(uint32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PointerFlags(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_PointerFlags(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PointerDeviceRect() const
    {
        winrt::Windows::Foundation::Rect value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PointerDeviceRect(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_PointerDeviceRect(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PointerDeviceRect(winrt::Windows::Foundation::Rect const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PointerDeviceRect(impl::bind_in(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_PointerDeviceRect(impl::bind_in(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::DisplayRect() const
    {
        winrt::Windows::Foundation::Rect value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DisplayRect(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_DisplayRect(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::DisplayRect(winrt::Windows::Foundation::Rect const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_DisplayRect(impl::bind_in(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_DisplayRect(impl::bind_in(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PixelLocation() const
    {
        winrt::Windows::Foundation::Point value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PixelLocation(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_PixelLocation(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PixelLocation(winrt::Windows::Foundation::Point const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PixelLocation(impl::bind_in(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_PixelLocation(impl::bind_in(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::HimetricLocation() const
    {
        winrt::Windows::Foundation::Point value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_HimetricLocation(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_HimetricLocation(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::HimetricLocation(winrt::Windows::Foundation::Point const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_HimetricLocation(impl::bind_in(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_HimetricLocation(impl::bind_in(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PixelLocationRaw() const
    {
        winrt::Windows::Foundation::Point value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PixelLocationRaw(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_PixelLocationRaw(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PixelLocationRaw(winrt::Windows::Foundation::Point const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PixelLocationRaw(impl::bind_in(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_PixelLocationRaw(impl::bind_in(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::HimetricLocationRaw() const
    {
        winrt::Windows::Foundation::Point value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_HimetricLocationRaw(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_HimetricLocationRaw(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::HimetricLocationRaw(winrt::Windows::Foundation::Point const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_HimetricLocationRaw(impl::bind_in(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_HimetricLocationRaw(impl::bind_in(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::Time() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Time(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_Time(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::Time(uint32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Time(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_Time(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::HistoryCount() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_HistoryCount(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_HistoryCount(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::HistoryCount(uint32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_HistoryCount(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_HistoryCount(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::InputData() const
    {
        int32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_InputData(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_InputData(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::InputData(int32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_InputData(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_InputData(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::KeyStates() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_KeyStates(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_KeyStates(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::KeyStates(uint32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_KeyStates(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_KeyStates(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PerformanceCount() const
    {
        uint64_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PerformanceCount(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_PerformanceCount(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PerformanceCount(uint64_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PerformanceCount(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_PerformanceCount(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::ButtonChangeKind() const
    {
        int32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ButtonChangeKind(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_ButtonChangeKind(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::ButtonChangeKind(int32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ButtonChangeKind(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_ButtonChangeKind(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PenFlags() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PenFlags(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_PenFlags(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PenFlags(uint32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PenFlags(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_PenFlags(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PenMask() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PenMask(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_PenMask(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PenMask(uint32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PenMask(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_PenMask(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PenPressure() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PenPressure(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_PenPressure(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PenPressure(uint32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PenPressure(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_PenPressure(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PenRotation() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PenRotation(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_PenRotation(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PenRotation(uint32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PenRotation(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_PenRotation(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PenTiltX() const
    {
        int32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PenTiltX(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_PenTiltX(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PenTiltX(int32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PenTiltX(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_PenTiltX(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PenTiltY() const
    {
        int32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PenTiltY(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_PenTiltY(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::PenTiltY(int32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PenTiltY(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_PenTiltY(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::TouchFlags() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_TouchFlags(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_TouchFlags(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::TouchFlags(uint32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_TouchFlags(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_TouchFlags(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::TouchMask() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_TouchMask(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_TouchMask(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::TouchMask(uint32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_TouchMask(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_TouchMask(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::TouchContact() const
    {
        winrt::Windows::Foundation::Rect value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_TouchContact(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_TouchContact(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::TouchContact(winrt::Windows::Foundation::Rect const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_TouchContact(impl::bind_in(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_TouchContact(impl::bind_in(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::TouchContactRaw() const
    {
        winrt::Windows::Foundation::Rect value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_TouchContactRaw(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_TouchContactRaw(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::TouchContactRaw(winrt::Windows::Foundation::Rect const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_TouchContactRaw(impl::bind_in(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_TouchContactRaw(impl::bind_in(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::TouchOrientation() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_TouchOrientation(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_TouchOrientation(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::TouchOrientation(uint32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_TouchOrientation(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_TouchOrientation(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::TouchPressure() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_TouchPressure(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->get_TouchPressure(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>::TouchPressure(uint32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_TouchPressure(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>**)this;
            check_hresult(_winrt_abi_type->put_TouchPressure(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::Orientation() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintOrientation value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Orientation(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->get_Orientation(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::Orientation(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintOrientation const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Orientation(static_cast<int32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->put_Orientation(static_cast<int32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::ScaleFactor() const
    {
        double value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ScaleFactor(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->get_ScaleFactor(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::ScaleFactor(double value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ScaleFactor(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->put_ScaleFactor(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::PageWidth() const
    {
        double value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PageWidth(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->get_PageWidth(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::PageWidth(double value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PageWidth(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->put_PageWidth(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::PageHeight() const
    {
        double value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PageHeight(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->get_PageHeight(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::PageHeight(double value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PageHeight(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->put_PageHeight(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::MarginTop() const
    {
        double value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_MarginTop(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->get_MarginTop(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::MarginTop(double value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_MarginTop(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->put_MarginTop(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::MarginBottom() const
    {
        double value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_MarginBottom(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->get_MarginBottom(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::MarginBottom(double value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_MarginBottom(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->put_MarginBottom(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::MarginLeft() const
    {
        double value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_MarginLeft(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->get_MarginLeft(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::MarginLeft(double value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_MarginLeft(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->put_MarginLeft(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::MarginRight() const
    {
        double value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_MarginRight(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->get_MarginRight(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::MarginRight(double value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_MarginRight(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->put_MarginRight(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::ShouldPrintBackgrounds() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ShouldPrintBackgrounds(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->get_ShouldPrintBackgrounds(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::ShouldPrintBackgrounds(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ShouldPrintBackgrounds(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->put_ShouldPrintBackgrounds(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::ShouldPrintSelectionOnly() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ShouldPrintSelectionOnly(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->get_ShouldPrintSelectionOnly(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::ShouldPrintSelectionOnly(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ShouldPrintSelectionOnly(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->put_ShouldPrintSelectionOnly(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::ShouldPrintHeaderAndFooter() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ShouldPrintHeaderAndFooter(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->get_ShouldPrintHeaderAndFooter(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::ShouldPrintHeaderAndFooter(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ShouldPrintHeaderAndFooter(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->put_ShouldPrintHeaderAndFooter(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::HeaderTitle() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_HeaderTitle(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->get_HeaderTitle(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::HeaderTitle(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_HeaderTitle(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->put_HeaderTitle(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::FooterUri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_FooterUri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->get_FooterUri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings<D>::FooterUri(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_FooterUri(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>**)this;
            check_hresult(_winrt_abi_type->put_FooterUri(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2<D>::PageRanges() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PageRanges(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)this;
            check_hresult(_winrt_abi_type->get_PageRanges(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2<D>::PageRanges(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PageRanges(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)this;
            check_hresult(_winrt_abi_type->put_PageRanges(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2<D>::PagesPerSide() const
    {
        int32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PagesPerSide(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)this;
            check_hresult(_winrt_abi_type->get_PagesPerSide(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2<D>::PagesPerSide(int32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PagesPerSide(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)this;
            check_hresult(_winrt_abi_type->put_PagesPerSide(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2<D>::Copies() const
    {
        int32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Copies(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)this;
            check_hresult(_winrt_abi_type->get_Copies(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2<D>::Copies(int32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Copies(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)this;
            check_hresult(_winrt_abi_type->put_Copies(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2<D>::Collation() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintCollation value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Collation(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)this;
            check_hresult(_winrt_abi_type->get_Collation(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2<D>::Collation(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintCollation const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Collation(static_cast<int32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)this;
            check_hresult(_winrt_abi_type->put_Collation(static_cast<int32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2<D>::ColorMode() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintColorMode value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ColorMode(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)this;
            check_hresult(_winrt_abi_type->get_ColorMode(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2<D>::ColorMode(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintColorMode const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ColorMode(static_cast<int32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)this;
            check_hresult(_winrt_abi_type->put_ColorMode(static_cast<int32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2<D>::Duplex() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintDuplex value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Duplex(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)this;
            check_hresult(_winrt_abi_type->get_Duplex(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2<D>::Duplex(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintDuplex const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Duplex(static_cast<int32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)this;
            check_hresult(_winrt_abi_type->put_Duplex(static_cast<int32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2<D>::MediaSize() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintMediaSize value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_MediaSize(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)this;
            check_hresult(_winrt_abi_type->get_MediaSize(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2<D>::MediaSize(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintMediaSize const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_MediaSize(static_cast<int32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)this;
            check_hresult(_winrt_abi_type->put_MediaSize(static_cast<int32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2<D>::PrinterName() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PrinterName(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)this;
            check_hresult(_winrt_abi_type->get_PrinterName(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrintSettings2<D>::PrinterName(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PrinterName(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>**)this;
            check_hresult(_winrt_abi_type->put_PrinterName(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2PrivatePartialController<D>::IsBrowserHitTransparent() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrivatePartialController>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrivatePartialController, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrivatePartialController>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsBrowserHitTransparent(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrivatePartialController>**)this;
            check_hresult(_winrt_abi_type->get_IsBrowserHitTransparent(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ProcessExtendedInfo<D>::ProcessInfo() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessExtendedInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessExtendedInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessExtendedInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ProcessInfo(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessExtendedInfo>**)this;
            check_hresult(_winrt_abi_type->get_ProcessInfo(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessInfo{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ProcessExtendedInfo<D>::AssociatedFrameInfos() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessExtendedInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessExtendedInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessExtendedInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_AssociatedFrameInfos(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessExtendedInfo>**)this;
            check_hresult(_winrt_abi_type->get_AssociatedFrameInfos(&value));
        }
        return winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FrameInfo>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs<D>::ProcessFailedKind() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ProcessFailedKind(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_ProcessFailedKind(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs2<D>::Reason() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedReason value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Reason(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2>**)this;
            check_hresult(_winrt_abi_type->get_Reason(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs2<D>::ExitCode() const
    {
        int32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ExitCode(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2>**)this;
            check_hresult(_winrt_abi_type->get_ExitCode(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs2<D>::ProcessDescription() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ProcessDescription(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2>**)this;
            check_hresult(_winrt_abi_type->get_ProcessDescription(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs2<D>::FrameInfosForFailedProcess() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_FrameInfosForFailedProcess(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2>**)this;
            check_hresult(_winrt_abi_type->get_FrameInfosForFailedProcess(&value));
        }
        return winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FrameInfo>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs3<D>::FailureSourceModulePath() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_FailureSourceModulePath(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs3>**)this;
            check_hresult(_winrt_abi_type->get_FailureSourceModulePath(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ProcessInfo<D>::ProcessId() const
    {
        int32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ProcessId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessInfo>**)this;
            check_hresult(_winrt_abi_type->get_ProcessId(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ProcessInfo<D>::Kind() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Kind(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessInfo>**)this;
            check_hresult(_winrt_abi_type->get_Kind(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile<D>::ProfileName() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ProfileName(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>**)this;
            check_hresult(_winrt_abi_type->get_ProfileName(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile<D>::IsInPrivateModeEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsInPrivateModeEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>**)this;
            check_hresult(_winrt_abi_type->get_IsInPrivateModeEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile<D>::ProfilePath() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ProfilePath(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>**)this;
            check_hresult(_winrt_abi_type->get_ProfilePath(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile<D>::DefaultDownloadFolderPath() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DefaultDownloadFolderPath(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>**)this;
            check_hresult(_winrt_abi_type->get_DefaultDownloadFolderPath(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile<D>::DefaultDownloadFolderPath(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_DefaultDownloadFolderPath(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>**)this;
            check_hresult(_winrt_abi_type->put_DefaultDownloadFolderPath(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile<D>::PreferredColorScheme() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2PreferredColorScheme value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PreferredColorScheme(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>**)this;
            check_hresult(_winrt_abi_type->get_PreferredColorScheme(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile<D>::PreferredColorScheme(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PreferredColorScheme const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PreferredColorScheme(static_cast<int32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>**)this;
            check_hresult(_winrt_abi_type->put_PreferredColorScheme(static_cast<int32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile2<D>::ClearBrowsingDataAsync(winrt::Microsoft::Web::WebView2::Core::CoreWebView2BrowsingDataKinds const& dataKinds) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->ClearBrowsingDataAsync(static_cast<uint32_t>(dataKinds), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile2>**)this;
            check_hresult(_winrt_abi_type->ClearBrowsingDataAsync(static_cast<uint32_t>(dataKinds), &operation));
        }
        return winrt::Windows::Foundation::IAsyncAction{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile3<D>::PreferredTrackingPreventionLevel() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2TrackingPreventionLevel value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PreferredTrackingPreventionLevel(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile3>**)this;
            check_hresult(_winrt_abi_type->get_PreferredTrackingPreventionLevel(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile3<D>::PreferredTrackingPreventionLevel(winrt::Microsoft::Web::WebView2::Core::CoreWebView2TrackingPreventionLevel const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_PreferredTrackingPreventionLevel(static_cast<int32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile3>**)this;
            check_hresult(_winrt_abi_type->put_PreferredTrackingPreventionLevel(static_cast<int32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile4<D>::SetPermissionStateAsync(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionKind const& PermissionKind, param::hstring const& origin, winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionState const& State) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile4>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile4, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile4>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->SetPermissionStateAsync(static_cast<int32_t>(PermissionKind), *(void**)(&origin), static_cast<int32_t>(State), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile4>**)this;
            check_hresult(_winrt_abi_type->SetPermissionStateAsync(static_cast<int32_t>(PermissionKind), *(void**)(&origin), static_cast<int32_t>(State), &operation));
        }
        return winrt::Windows::Foundation::IAsyncAction{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile5<D>::CookieManager() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile5>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile5, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile5>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_CookieManager(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile5>**)this;
            check_hresult(_winrt_abi_type->get_CookieManager(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2CookieManager{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile6<D>::IsPasswordAutosaveEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsPasswordAutosaveEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6>**)this;
            check_hresult(_winrt_abi_type->get_IsPasswordAutosaveEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile6<D>::IsPasswordAutosaveEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsPasswordAutosaveEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6>**)this;
            check_hresult(_winrt_abi_type->put_IsPasswordAutosaveEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile6<D>::IsGeneralAutofillEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsGeneralAutofillEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6>**)this;
            check_hresult(_winrt_abi_type->get_IsGeneralAutofillEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile6<D>::IsGeneralAutofillEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsGeneralAutofillEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6>**)this;
            check_hresult(_winrt_abi_type->put_IsGeneralAutofillEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile7<D>::AddBrowserExtensionAsync(param::hstring const& extensionFolderPath) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile7>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile7, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile7>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->AddBrowserExtensionAsync(*(void**)(&extensionFolderPath), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile7>**)this;
            check_hresult(_winrt_abi_type->AddBrowserExtensionAsync(*(void**)(&extensionFolderPath), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2BrowserExtension>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile8<D>::Deleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile8>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile8, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile8>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_Deleted(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile8>**)this;
            check_hresult(_winrt_abi_type->add_Deleted(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile8<D>::Deleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, Deleted_revoker>(this, Deleted(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile8<D>::Deleted(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile8>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile8, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile8>**)&_winrt_casted_result;
            _winrt_abi_type->remove_Deleted(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile8>**)this;
            _winrt_abi_type->remove_Deleted(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Profile8<D>::Delete() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile8>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile8, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile8>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Delete());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile8>**)this;
            check_hresult(_winrt_abi_type->Delete());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs<D>::ContentMimeType() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ContentMimeType(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_ContentMimeType(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs<D>::Cancel() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Cancel(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Cancel(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs<D>::Cancel(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Cancel(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Cancel(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs<D>::SuppressDefaultDialog() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_SuppressDefaultDialog(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_SuppressDefaultDialog(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs<D>::SuppressDefaultDialog(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_SuppressDefaultDialog(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_SuppressDefaultDialog(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs<D>::SaveAsFilePath() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_SaveAsFilePath(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_SaveAsFilePath(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs<D>::SaveAsFilePath(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_SaveAsFilePath(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_SaveAsFilePath(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs<D>::AllowReplace() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_AllowReplace(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_AllowReplace(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs<D>::AllowReplace(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_AllowReplace(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_AllowReplace(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs<D>::Kind() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2SaveAsKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Kind(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Kind(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs<D>::Kind(winrt::Microsoft::Web::WebView2::Core::CoreWebView2SaveAsKind const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Kind(static_cast<int32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Kind(static_cast<int32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveAsUIShowingEventArgs<D>::GetDeferral() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>**)this;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        return winrt::Windows::Foundation::Deferral{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveFileSecurityCheckStartingEventArgs<D>::CancelSave() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_CancelSave(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_CancelSave(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveFileSecurityCheckStartingEventArgs<D>::CancelSave(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_CancelSave(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_CancelSave(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveFileSecurityCheckStartingEventArgs<D>::DocumentOriginUri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DocumentOriginUri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_DocumentOriginUri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveFileSecurityCheckStartingEventArgs<D>::FileExtension() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_FileExtension(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_FileExtension(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveFileSecurityCheckStartingEventArgs<D>::FilePath() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_FilePath(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_FilePath(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveFileSecurityCheckStartingEventArgs<D>::SuppressDefaultPolicy() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_SuppressDefaultPolicy(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_SuppressDefaultPolicy(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveFileSecurityCheckStartingEventArgs<D>::SuppressDefaultPolicy(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_SuppressDefaultPolicy(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_SuppressDefaultPolicy(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SaveFileSecurityCheckStartingEventArgs<D>::GetDeferral() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        return winrt::Windows::Foundation::Deferral{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScreenCaptureStartingEventArgs<D>::Cancel() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Cancel(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Cancel(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScreenCaptureStartingEventArgs<D>::Cancel(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Cancel(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Cancel(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScreenCaptureStartingEventArgs<D>::Handled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Handled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScreenCaptureStartingEventArgs<D>::Handled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Handled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScreenCaptureStartingEventArgs<D>::OriginalSourceFrameInfo() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_OriginalSourceFrameInfo(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_OriginalSourceFrameInfo(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2FrameInfo{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScreenCaptureStartingEventArgs<D>::GetDeferral() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>**)this;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        return winrt::Windows::Foundation::Deferral{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs<D>::Uri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs<D>::Kind() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScriptDialogKind value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Kind(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Kind(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs<D>::Message() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Message(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Message(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs<D>::DefaultText() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DefaultText(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_DefaultText(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs<D>::ResultText() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ResultText(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_ResultText(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs<D>::ResultText(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ResultText(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_ResultText(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs<D>::Accept() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Accept());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>**)this;
            check_hresult(_winrt_abi_type->Accept());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs<D>::GetDeferral() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>**)this;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        return winrt::Windows::Foundation::Deferral{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScriptException<D>::LineNumber() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_LineNumber(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException>**)this;
            check_hresult(_winrt_abi_type->get_LineNumber(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScriptException<D>::ColumnNumber() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ColumnNumber(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException>**)this;
            check_hresult(_winrt_abi_type->get_ColumnNumber(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScriptException<D>::Name() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException>**)this;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScriptException<D>::Message() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Message(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException>**)this;
            check_hresult(_winrt_abi_type->get_Message(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScriptException<D>::ToJson() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ToJson(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException>**)this;
            check_hresult(_winrt_abi_type->get_ToJson(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ServerCertificateErrorDetectedEventArgs<D>::ErrorStatus() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebErrorStatus value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ErrorStatus(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_ErrorStatus(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ServerCertificateErrorDetectedEventArgs<D>::RequestUri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_RequestUri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_RequestUri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ServerCertificateErrorDetectedEventArgs<D>::ServerCertificate() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ServerCertificate(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_ServerCertificate(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2Certificate{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ServerCertificateErrorDetectedEventArgs<D>::Action() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2ServerCertificateErrorAction value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Action(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Action(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ServerCertificateErrorDetectedEventArgs<D>::Action(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ServerCertificateErrorAction const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Action(static_cast<int32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Action(static_cast<int32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2ServerCertificateErrorDetectedEventArgs<D>::GetDeferral() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>**)this;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        return winrt::Windows::Foundation::Deferral{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::IsScriptEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsScriptEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->get_IsScriptEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::IsScriptEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsScriptEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->put_IsScriptEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::IsWebMessageEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsWebMessageEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->get_IsWebMessageEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::IsWebMessageEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsWebMessageEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->put_IsWebMessageEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::AreDefaultScriptDialogsEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_AreDefaultScriptDialogsEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->get_AreDefaultScriptDialogsEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::AreDefaultScriptDialogsEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_AreDefaultScriptDialogsEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->put_AreDefaultScriptDialogsEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::IsStatusBarEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsStatusBarEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->get_IsStatusBarEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::IsStatusBarEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsStatusBarEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->put_IsStatusBarEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::AreDevToolsEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_AreDevToolsEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->get_AreDevToolsEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::AreDevToolsEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_AreDevToolsEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->put_AreDevToolsEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::AreDefaultContextMenusEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_AreDefaultContextMenusEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->get_AreDefaultContextMenusEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::AreDefaultContextMenusEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_AreDefaultContextMenusEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->put_AreDefaultContextMenusEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::AreHostObjectsAllowed() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_AreHostObjectsAllowed(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->get_AreHostObjectsAllowed(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::AreHostObjectsAllowed(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_AreHostObjectsAllowed(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->put_AreHostObjectsAllowed(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::IsZoomControlEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsZoomControlEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->get_IsZoomControlEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::IsZoomControlEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsZoomControlEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->put_IsZoomControlEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::IsBuiltInErrorPageEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsBuiltInErrorPageEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->get_IsBuiltInErrorPageEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>::IsBuiltInErrorPageEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsBuiltInErrorPageEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>**)this;
            check_hresult(_winrt_abi_type->put_IsBuiltInErrorPageEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings2<D>::UserAgent() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_UserAgent(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings2>**)this;
            check_hresult(_winrt_abi_type->get_UserAgent(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings2<D>::UserAgent(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_UserAgent(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings2>**)this;
            check_hresult(_winrt_abi_type->put_UserAgent(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings3<D>::AreBrowserAcceleratorKeysEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_AreBrowserAcceleratorKeysEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings3>**)this;
            check_hresult(_winrt_abi_type->get_AreBrowserAcceleratorKeysEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings3<D>::AreBrowserAcceleratorKeysEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_AreBrowserAcceleratorKeysEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings3>**)this;
            check_hresult(_winrt_abi_type->put_AreBrowserAcceleratorKeysEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings4<D>::IsPasswordAutosaveEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsPasswordAutosaveEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4>**)this;
            check_hresult(_winrt_abi_type->get_IsPasswordAutosaveEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings4<D>::IsPasswordAutosaveEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsPasswordAutosaveEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4>**)this;
            check_hresult(_winrt_abi_type->put_IsPasswordAutosaveEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings4<D>::IsGeneralAutofillEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsGeneralAutofillEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4>**)this;
            check_hresult(_winrt_abi_type->get_IsGeneralAutofillEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings4<D>::IsGeneralAutofillEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsGeneralAutofillEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4>**)this;
            check_hresult(_winrt_abi_type->put_IsGeneralAutofillEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings5<D>::IsPinchZoomEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings5>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings5, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings5>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsPinchZoomEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings5>**)this;
            check_hresult(_winrt_abi_type->get_IsPinchZoomEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings5<D>::IsPinchZoomEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings5>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings5, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings5>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsPinchZoomEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings5>**)this;
            check_hresult(_winrt_abi_type->put_IsPinchZoomEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings6<D>::IsSwipeNavigationEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings6>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings6, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings6>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsSwipeNavigationEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings6>**)this;
            check_hresult(_winrt_abi_type->get_IsSwipeNavigationEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings6<D>::IsSwipeNavigationEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings6>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings6, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings6>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsSwipeNavigationEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings6>**)this;
            check_hresult(_winrt_abi_type->put_IsSwipeNavigationEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings7<D>::HiddenPdfToolbarItems() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2PdfToolbarItems value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings7>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings7, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings7>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_HiddenPdfToolbarItems(reinterpret_cast<uint32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings7>**)this;
            check_hresult(_winrt_abi_type->get_HiddenPdfToolbarItems(reinterpret_cast<uint32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings7<D>::HiddenPdfToolbarItems(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PdfToolbarItems const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings7>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings7, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings7>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_HiddenPdfToolbarItems(static_cast<uint32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings7>**)this;
            check_hresult(_winrt_abi_type->put_HiddenPdfToolbarItems(static_cast<uint32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings8<D>::IsReputationCheckingRequired() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings8>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings8, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings8>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsReputationCheckingRequired(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings8>**)this;
            check_hresult(_winrt_abi_type->get_IsReputationCheckingRequired(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings8<D>::IsReputationCheckingRequired(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings8>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings8, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings8>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsReputationCheckingRequired(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings8>**)this;
            check_hresult(_winrt_abi_type->put_IsReputationCheckingRequired(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings9<D>::IsNonClientRegionSupportEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings9>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings9, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings9>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsNonClientRegionSupportEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings9>**)this;
            check_hresult(_winrt_abi_type->get_IsNonClientRegionSupportEnabled(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings9<D>::IsNonClientRegionSupportEnabled(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings9>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings9, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings9>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsNonClientRegionSupportEnabled(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings9>**)this;
            check_hresult(_winrt_abi_type->put_IsNonClientRegionSupportEnabled(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings_Manual<D>::HostObjectDispatchAdapter() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings_Manual>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings_Manual, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings_Manual>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_HostObjectDispatchAdapter(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings_Manual>**)this;
            check_hresult(_winrt_abi_type->get_HostObjectDispatchAdapter(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings_Manual<D>::HostObjectDispatchAdapter(winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings_Manual>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings_Manual, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings_Manual>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_HostObjectDispatchAdapter(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings_Manual>**)this;
            check_hresult(_winrt_abi_type->put_HostObjectDispatchAdapter(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SharedBuffer<D>::Size() const
    {
        uint64_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Size(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer>**)this;
            check_hresult(_winrt_abi_type->get_Size(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SharedBuffer<D>::OpenStream() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->OpenStream(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer>**)this;
            check_hresult(_winrt_abi_type->OpenStream(&result));
        }
        return winrt::Windows::Storage::Streams::IRandomAccessStream{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SharedBuffer_Manual<D>::Buffer() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer_Manual>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer_Manual, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer_Manual>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Buffer(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer_Manual>**)this;
            check_hresult(_winrt_abi_type->get_Buffer(&value));
        }
        return winrt::Windows::Foundation::IMemoryBufferReference{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2SourceChangedEventArgs<D>::IsNewDocument() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SourceChangedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SourceChangedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SourceChangedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsNewDocument(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SourceChangedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_IsNewDocument(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs<D>::Source() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Source(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Source(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs<D>::WebMessageAsJson() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_WebMessageAsJson(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_WebMessageAsJson(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs<D>::TryGetWebMessageAsString() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->TryGetWebMessageAsString(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs>**)this;
            check_hresult(_winrt_abi_type->TryGetWebMessageAsString(&result));
        }
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs2<D>::AdditionalObjects() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_AdditionalObjects(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs2>**)this;
            check_hresult(_winrt_abi_type->get_AdditionalObjects(&value));
        }
        return winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Foundation::IInspectable>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequest<D>::Uri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>**)this;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequest<D>::Uri(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Uri(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>**)this;
            check_hresult(_winrt_abi_type->put_Uri(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequest<D>::Method() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Method(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>**)this;
            check_hresult(_winrt_abi_type->get_Method(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequest<D>::Method(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Method(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>**)this;
            check_hresult(_winrt_abi_type->put_Method(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequest<D>::Content() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Content(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>**)this;
            check_hresult(_winrt_abi_type->get_Content(&value));
        }
        return winrt::Windows::Storage::Streams::IRandomAccessStream{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequest<D>::Content(winrt::Windows::Storage::Streams::IRandomAccessStream const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Content(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>**)this;
            check_hresult(_winrt_abi_type->put_Content(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequest<D>::Headers() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Headers(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>**)this;
            check_hresult(_winrt_abi_type->get_Headers(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpRequestHeaders{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs<D>::Request() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Request(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Request(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequest{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs<D>::Response() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Response(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Response(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponse{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs<D>::Response(winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponse const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Response(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->put_Response(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs<D>::ResourceContext() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceContext value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ResourceContext(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_ResourceContext(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs<D>::GetDeferral() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>**)this;
            check_hresult(_winrt_abi_type->GetDeferral(&result));
        }
        return winrt::Windows::Foundation::Deferral{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs2<D>::RequestedSourceKind() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequestSourceKinds value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_RequestedSourceKind(reinterpret_cast<uint32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs2>**)this;
            check_hresult(_winrt_abi_type->get_RequestedSourceKind(reinterpret_cast<uint32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponse<D>::Content() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Content(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>**)this;
            check_hresult(_winrt_abi_type->get_Content(&value));
        }
        return winrt::Windows::Storage::Streams::IRandomAccessStream{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponse<D>::Content(winrt::Windows::Storage::Streams::IRandomAccessStream const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_Content(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>**)this;
            check_hresult(_winrt_abi_type->put_Content(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponse<D>::Headers() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Headers(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>**)this;
            check_hresult(_winrt_abi_type->get_Headers(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpResponseHeaders{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponse<D>::StatusCode() const
    {
        int32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_StatusCode(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>**)this;
            check_hresult(_winrt_abi_type->get_StatusCode(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponse<D>::StatusCode(int32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_StatusCode(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>**)this;
            check_hresult(_winrt_abi_type->put_StatusCode(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponse<D>::ReasonPhrase() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ReasonPhrase(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>**)this;
            check_hresult(_winrt_abi_type->get_ReasonPhrase(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponse<D>::ReasonPhrase(param::hstring const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_ReasonPhrase(*(void**)(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>**)this;
            check_hresult(_winrt_abi_type->put_ReasonPhrase(*(void**)(&value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseReceivedEventArgs<D>::Request() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseReceivedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseReceivedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseReceivedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Request(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseReceivedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Request(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequest{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseReceivedEventArgs<D>::Response() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseReceivedEventArgs>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseReceivedEventArgs, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseReceivedEventArgs>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Response(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseReceivedEventArgs>**)this;
            check_hresult(_winrt_abi_type->get_Response(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponseView{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseView<D>::Headers() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Headers(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView>**)this;
            check_hresult(_winrt_abi_type->get_Headers(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpResponseHeaders{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseView<D>::StatusCode() const
    {
        int32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_StatusCode(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView>**)this;
            check_hresult(_winrt_abi_type->get_StatusCode(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseView<D>::ReasonPhrase() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ReasonPhrase(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView>**)this;
            check_hresult(_winrt_abi_type->get_ReasonPhrase(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseView<D>::GetContentAsync() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetContentAsync(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView>**)this;
            check_hresult(_winrt_abi_type->GetContentAsync(&operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Streams::IRandomAccessStream>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures<D>::HasPosition() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_HasPosition(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)this;
            check_hresult(_winrt_abi_type->get_HasPosition(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures<D>::HasSize() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_HasSize(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)this;
            check_hresult(_winrt_abi_type->get_HasSize(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures<D>::Left() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Left(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)this;
            check_hresult(_winrt_abi_type->get_Left(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures<D>::Top() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Top(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)this;
            check_hresult(_winrt_abi_type->get_Top(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures<D>::Height() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Height(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)this;
            check_hresult(_winrt_abi_type->get_Height(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures<D>::Width() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Width(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)this;
            check_hresult(_winrt_abi_type->get_Width(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures<D>::ShouldDisplayMenuBar() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ShouldDisplayMenuBar(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)this;
            check_hresult(_winrt_abi_type->get_ShouldDisplayMenuBar(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures<D>::ShouldDisplayStatus() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ShouldDisplayStatus(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)this;
            check_hresult(_winrt_abi_type->get_ShouldDisplayStatus(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures<D>::ShouldDisplayToolbar() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ShouldDisplayToolbar(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)this;
            check_hresult(_winrt_abi_type->get_ShouldDisplayToolbar(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures<D>::ShouldDisplayScrollBars() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ShouldDisplayScrollBars(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>**)this;
            check_hresult(_winrt_abi_type->get_ShouldDisplayScrollBars(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_10<D>::BasicAuthenticationRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2BasicAuthenticationRequestedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_10>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_10, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_10>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_BasicAuthenticationRequested(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_10>**)this;
            check_hresult(_winrt_abi_type->add_BasicAuthenticationRequested(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_10<D>::BasicAuthenticationRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2BasicAuthenticationRequestedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, BasicAuthenticationRequested_revoker>(this, BasicAuthenticationRequested(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_10<D>::BasicAuthenticationRequested(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_10>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_10, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_10>**)&_winrt_casted_result;
            _winrt_abi_type->remove_BasicAuthenticationRequested(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_10>**)this;
            _winrt_abi_type->remove_BasicAuthenticationRequested(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_11<D>::ContextMenuRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuRequestedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_11>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_11, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_11>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_ContextMenuRequested(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_11>**)this;
            check_hresult(_winrt_abi_type->add_ContextMenuRequested(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_11<D>::ContextMenuRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuRequestedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, ContextMenuRequested_revoker>(this, ContextMenuRequested(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_11<D>::ContextMenuRequested(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_11>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_11, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_11>**)&_winrt_casted_result;
            _winrt_abi_type->remove_ContextMenuRequested(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_11>**)this;
            _winrt_abi_type->remove_ContextMenuRequested(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_11<D>::CallDevToolsProtocolMethodForSessionAsync(param::hstring const& sessionId, param::hstring const& methodName, param::hstring const& parametersAsJson) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_11>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_11, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_11>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CallDevToolsProtocolMethodForSessionAsync(*(void**)(&sessionId), *(void**)(&methodName), *(void**)(&parametersAsJson), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_11>**)this;
            check_hresult(_winrt_abi_type->CallDevToolsProtocolMethodForSessionAsync(*(void**)(&sessionId), *(void**)(&methodName), *(void**)(&parametersAsJson), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<hstring>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_12<D>::StatusBarText() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_12>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_12, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_12>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_StatusBarText(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_12>**)this;
            check_hresult(_winrt_abi_type->get_StatusBarText(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_12<D>::StatusBarTextChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_12>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_12, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_12>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_StatusBarTextChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_12>**)this;
            check_hresult(_winrt_abi_type->add_StatusBarTextChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_12<D>::StatusBarTextChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, StatusBarTextChanged_revoker>(this, StatusBarTextChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_12<D>::StatusBarTextChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_12>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_12, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_12>**)&_winrt_casted_result;
            _winrt_abi_type->remove_StatusBarTextChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_12>**)this;
            _winrt_abi_type->remove_StatusBarTextChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_13<D>::Profile() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_13>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_13, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_13>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Profile(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_13>**)this;
            check_hresult(_winrt_abi_type->get_Profile(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_14<D>::ServerCertificateErrorDetected(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ServerCertificateErrorDetectedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_14>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_14, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_14>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_ServerCertificateErrorDetected(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_14>**)this;
            check_hresult(_winrt_abi_type->add_ServerCertificateErrorDetected(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_14<D>::ServerCertificateErrorDetected(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ServerCertificateErrorDetectedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, ServerCertificateErrorDetected_revoker>(this, ServerCertificateErrorDetected(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_14<D>::ServerCertificateErrorDetected(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_14>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_14, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_14>**)&_winrt_casted_result;
            _winrt_abi_type->remove_ServerCertificateErrorDetected(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_14>**)this;
            _winrt_abi_type->remove_ServerCertificateErrorDetected(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_14<D>::ClearServerCertificateErrorActionsAsync() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_14>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_14, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_14>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->ClearServerCertificateErrorActionsAsync(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_14>**)this;
            check_hresult(_winrt_abi_type->ClearServerCertificateErrorActionsAsync(&operation));
        }
        return winrt::Windows::Foundation::IAsyncAction{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_15<D>::FaviconUri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_FaviconUri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15>**)this;
            check_hresult(_winrt_abi_type->get_FaviconUri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_15<D>::FaviconChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_FaviconChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15>**)this;
            check_hresult(_winrt_abi_type->add_FaviconChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_15<D>::FaviconChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, FaviconChanged_revoker>(this, FaviconChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_15<D>::FaviconChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15>**)&_winrt_casted_result;
            _winrt_abi_type->remove_FaviconChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15>**)this;
            _winrt_abi_type->remove_FaviconChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_15<D>::GetFaviconAsync(winrt::Microsoft::Web::WebView2::Core::CoreWebView2FaviconImageFormat const& format) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetFaviconAsync(static_cast<int32_t>(format), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15>**)this;
            check_hresult(_winrt_abi_type->GetFaviconAsync(static_cast<int32_t>(format), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Streams::IRandomAccessStream>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_16<D>::PrintAsync(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintSettings const& printSettings) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_16>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_16, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_16>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->PrintAsync(*(void**)(&printSettings), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_16>**)this;
            check_hresult(_winrt_abi_type->PrintAsync(*(void**)(&printSettings), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintStatus>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_16<D>::ShowPrintUI(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintDialogKind const& printDialogKind) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_16>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_16, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_16>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->ShowPrintUI(static_cast<int32_t>(printDialogKind)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_16>**)this;
            check_hresult(_winrt_abi_type->ShowPrintUI(static_cast<int32_t>(printDialogKind)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_16<D>::PrintToPdfStreamAsync(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintSettings const& printSettings) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_16>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_16, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_16>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->PrintToPdfStreamAsync(*(void**)(&printSettings), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_16>**)this;
            check_hresult(_winrt_abi_type->PrintToPdfStreamAsync(*(void**)(&printSettings), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Streams::IRandomAccessStream>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_17<D>::PostSharedBufferToScript(winrt::Microsoft::Web::WebView2::Core::CoreWebView2SharedBuffer const& sharedBuffer, winrt::Microsoft::Web::WebView2::Core::CoreWebView2SharedBufferAccess const& access, param::hstring const& additionalDataAsJson) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_17>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_17, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_17>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->PostSharedBufferToScript(*(void**)(&sharedBuffer), static_cast<int32_t>(access), *(void**)(&additionalDataAsJson)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_17>**)this;
            check_hresult(_winrt_abi_type->PostSharedBufferToScript(*(void**)(&sharedBuffer), static_cast<int32_t>(access), *(void**)(&additionalDataAsJson)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_18<D>::LaunchingExternalUriScheme(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2LaunchingExternalUriSchemeEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_18>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_18, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_18>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_LaunchingExternalUriScheme(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_18>**)this;
            check_hresult(_winrt_abi_type->add_LaunchingExternalUriScheme(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_18<D>::LaunchingExternalUriScheme(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2LaunchingExternalUriSchemeEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, LaunchingExternalUriScheme_revoker>(this, LaunchingExternalUriScheme(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_18<D>::LaunchingExternalUriScheme(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_18>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_18, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_18>**)&_winrt_casted_result;
            _winrt_abi_type->remove_LaunchingExternalUriScheme(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_18>**)this;
            _winrt_abi_type->remove_LaunchingExternalUriScheme(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_19<D>::MemoryUsageTargetLevel() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2MemoryUsageTargetLevel value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_19>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_19, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_19>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_MemoryUsageTargetLevel(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_19>**)this;
            check_hresult(_winrt_abi_type->get_MemoryUsageTargetLevel(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_19<D>::MemoryUsageTargetLevel(winrt::Microsoft::Web::WebView2::Core::CoreWebView2MemoryUsageTargetLevel const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_19>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_19, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_19>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_MemoryUsageTargetLevel(static_cast<int32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_19>**)this;
            check_hresult(_winrt_abi_type->put_MemoryUsageTargetLevel(static_cast<int32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_2<D>::CookieManager() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_CookieManager(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>**)this;
            check_hresult(_winrt_abi_type->get_CookieManager(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2CookieManager{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_2<D>::Environment() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Environment(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>**)this;
            check_hresult(_winrt_abi_type->get_Environment(&value));
        }
        return winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_2<D>::WebResourceResponseReceived(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponseReceivedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_WebResourceResponseReceived(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>**)this;
            check_hresult(_winrt_abi_type->add_WebResourceResponseReceived(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_2<D>::WebResourceResponseReceived(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponseReceivedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, WebResourceResponseReceived_revoker>(this, WebResourceResponseReceived(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_2<D>::WebResourceResponseReceived(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_WebResourceResponseReceived(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>**)this;
            _winrt_abi_type->remove_WebResourceResponseReceived(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_2<D>::DOMContentLoaded(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2DOMContentLoadedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_DOMContentLoaded(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>**)this;
            check_hresult(_winrt_abi_type->add_DOMContentLoaded(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_2<D>::DOMContentLoaded(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2DOMContentLoadedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, DOMContentLoaded_revoker>(this, DOMContentLoaded(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_2<D>::DOMContentLoaded(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>**)&_winrt_casted_result;
            _winrt_abi_type->remove_DOMContentLoaded(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>**)this;
            _winrt_abi_type->remove_DOMContentLoaded(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_2<D>::NavigateWithWebResourceRequest(winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequest const& Request) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->NavigateWithWebResourceRequest(*(void**)(&Request)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>**)this;
            check_hresult(_winrt_abi_type->NavigateWithWebResourceRequest(*(void**)(&Request)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_20<D>::FrameId() const
    {
        uint32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_20>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_20, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_20>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_FrameId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_20>**)this;
            check_hresult(_winrt_abi_type->get_FrameId(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_21<D>::ExecuteScriptWithResultAsync(param::hstring const& javaScript) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_21>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_21, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_21>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->ExecuteScriptWithResultAsync(*(void**)(&javaScript), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_21>**)this;
            check_hresult(_winrt_abi_type->ExecuteScriptWithResultAsync(*(void**)(&javaScript), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ExecuteScriptResult>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_24<D>::NotificationReceived(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NotificationReceivedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_24>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_24, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_24>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_NotificationReceived(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_24>**)this;
            check_hresult(_winrt_abi_type->add_NotificationReceived(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_24<D>::NotificationReceived(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NotificationReceivedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, NotificationReceived_revoker>(this, NotificationReceived(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_24<D>::NotificationReceived(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_24>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_24, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_24>**)&_winrt_casted_result;
            _winrt_abi_type->remove_NotificationReceived(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_24>**)this;
            _winrt_abi_type->remove_NotificationReceived(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_25<D>::SaveAsUIShowing(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2SaveAsUIShowingEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_25>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_25, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_25>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_SaveAsUIShowing(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_25>**)this;
            check_hresult(_winrt_abi_type->add_SaveAsUIShowing(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_25<D>::SaveAsUIShowing(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2SaveAsUIShowingEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, SaveAsUIShowing_revoker>(this, SaveAsUIShowing(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_25<D>::SaveAsUIShowing(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_25>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_25, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_25>**)&_winrt_casted_result;
            _winrt_abi_type->remove_SaveAsUIShowing(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_25>**)this;
            _winrt_abi_type->remove_SaveAsUIShowing(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_25<D>::ShowSaveAsUIAsync() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_25>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_25, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_25>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->ShowSaveAsUIAsync(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_25>**)this;
            check_hresult(_winrt_abi_type->ShowSaveAsUIAsync(&operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2SaveAsUIResult>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_26<D>::SaveFileSecurityCheckStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2SaveFileSecurityCheckStartingEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_26>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_26, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_26>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_SaveFileSecurityCheckStarting(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_26>**)this;
            check_hresult(_winrt_abi_type->add_SaveFileSecurityCheckStarting(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_26<D>::SaveFileSecurityCheckStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2SaveFileSecurityCheckStartingEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, SaveFileSecurityCheckStarting_revoker>(this, SaveFileSecurityCheckStarting(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_26<D>::SaveFileSecurityCheckStarting(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_26>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_26, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_26>**)&_winrt_casted_result;
            _winrt_abi_type->remove_SaveFileSecurityCheckStarting(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_26>**)this;
            _winrt_abi_type->remove_SaveFileSecurityCheckStarting(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_27<D>::ScreenCaptureStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScreenCaptureStartingEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_27>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_27, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_27>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_ScreenCaptureStarting(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_27>**)this;
            check_hresult(_winrt_abi_type->add_ScreenCaptureStarting(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_27<D>::ScreenCaptureStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScreenCaptureStartingEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, ScreenCaptureStarting_revoker>(this, ScreenCaptureStarting(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_27<D>::ScreenCaptureStarting(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_27>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_27, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_27>**)&_winrt_casted_result;
            _winrt_abi_type->remove_ScreenCaptureStarting(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_27>**)this;
            _winrt_abi_type->remove_ScreenCaptureStarting(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_3<D>::IsSuspended() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsSuspended(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3>**)this;
            check_hresult(_winrt_abi_type->get_IsSuspended(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_3<D>::TrySuspendAsync() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->TrySuspendAsync(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3>**)this;
            check_hresult(_winrt_abi_type->TrySuspendAsync(&operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<bool>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_3<D>::Resume() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Resume());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3>**)this;
            check_hresult(_winrt_abi_type->Resume());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_3<D>::SetVirtualHostNameToFolderMapping(param::hstring const& hostName, param::hstring const& folderPath, winrt::Microsoft::Web::WebView2::Core::CoreWebView2HostResourceAccessKind const& accessKind) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->SetVirtualHostNameToFolderMapping(*(void**)(&hostName), *(void**)(&folderPath), static_cast<int32_t>(accessKind)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3>**)this;
            check_hresult(_winrt_abi_type->SetVirtualHostNameToFolderMapping(*(void**)(&hostName), *(void**)(&folderPath), static_cast<int32_t>(accessKind)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_3<D>::ClearVirtualHostNameToFolderMapping(param::hstring const& hostName) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->ClearVirtualHostNameToFolderMapping(*(void**)(&hostName)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3>**)this;
            check_hresult(_winrt_abi_type->ClearVirtualHostNameToFolderMapping(*(void**)(&hostName)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_4<D>::FrameCreated(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2FrameCreatedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_FrameCreated(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4>**)this;
            check_hresult(_winrt_abi_type->add_FrameCreated(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_4<D>::FrameCreated(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2FrameCreatedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, FrameCreated_revoker>(this, FrameCreated(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_4<D>::FrameCreated(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4>**)&_winrt_casted_result;
            _winrt_abi_type->remove_FrameCreated(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4>**)this;
            _winrt_abi_type->remove_FrameCreated(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_4<D>::DownloadStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadStartingEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_DownloadStarting(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4>**)this;
            check_hresult(_winrt_abi_type->add_DownloadStarting(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_4<D>::DownloadStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadStartingEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, DownloadStarting_revoker>(this, DownloadStarting(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_4<D>::DownloadStarting(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4>**)&_winrt_casted_result;
            _winrt_abi_type->remove_DownloadStarting(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4>**)this;
            _winrt_abi_type->remove_DownloadStarting(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_5<D>::ClientCertificateRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificateRequestedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_5>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_5, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_5>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_ClientCertificateRequested(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_5>**)this;
            check_hresult(_winrt_abi_type->add_ClientCertificateRequested(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_5<D>::ClientCertificateRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificateRequestedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, ClientCertificateRequested_revoker>(this, ClientCertificateRequested(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_5<D>::ClientCertificateRequested(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_5>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_5, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_5>**)&_winrt_casted_result;
            _winrt_abi_type->remove_ClientCertificateRequested(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_5>**)this;
            _winrt_abi_type->remove_ClientCertificateRequested(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_6<D>::OpenTaskManagerWindow() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_6>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_6, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_6>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->OpenTaskManagerWindow());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_6>**)this;
            check_hresult(_winrt_abi_type->OpenTaskManagerWindow());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_7<D>::PrintToPdfAsync(param::hstring const& ResultFilePath, winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintSettings const& printSettings) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_7>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_7, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_7>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->PrintToPdfAsync(*(void**)(&ResultFilePath), *(void**)(&printSettings), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_7>**)this;
            check_hresult(_winrt_abi_type->PrintToPdfAsync(*(void**)(&ResultFilePath), *(void**)(&printSettings), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<bool>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_8<D>::IsMuted() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsMuted(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>**)this;
            check_hresult(_winrt_abi_type->get_IsMuted(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_8<D>::IsMuted(bool value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_IsMuted(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>**)this;
            check_hresult(_winrt_abi_type->put_IsMuted(value));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_8<D>::IsDocumentPlayingAudio() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsDocumentPlayingAudio(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>**)this;
            check_hresult(_winrt_abi_type->get_IsDocumentPlayingAudio(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_8<D>::IsMutedChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_IsMutedChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>**)this;
            check_hresult(_winrt_abi_type->add_IsMutedChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_8<D>::IsMutedChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, IsMutedChanged_revoker>(this, IsMutedChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_8<D>::IsMutedChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>**)&_winrt_casted_result;
            _winrt_abi_type->remove_IsMutedChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>**)this;
            _winrt_abi_type->remove_IsMutedChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_8<D>::IsDocumentPlayingAudioChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_IsDocumentPlayingAudioChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>**)this;
            check_hresult(_winrt_abi_type->add_IsDocumentPlayingAudioChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_8<D>::IsDocumentPlayingAudioChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, IsDocumentPlayingAudioChanged_revoker>(this, IsDocumentPlayingAudioChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_8<D>::IsDocumentPlayingAudioChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>**)&_winrt_casted_result;
            _winrt_abi_type->remove_IsDocumentPlayingAudioChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>**)this;
            _winrt_abi_type->remove_IsDocumentPlayingAudioChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_9<D>::IsDefaultDownloadDialogOpen() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_IsDefaultDownloadDialogOpen(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)this;
            check_hresult(_winrt_abi_type->get_IsDefaultDownloadDialogOpen(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_9<D>::DefaultDownloadDialogCornerAlignment() const
    {
        winrt::Microsoft::Web::WebView2::Core::CoreWebView2DefaultDownloadDialogCornerAlignment value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DefaultDownloadDialogCornerAlignment(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)this;
            check_hresult(_winrt_abi_type->get_DefaultDownloadDialogCornerAlignment(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_9<D>::DefaultDownloadDialogCornerAlignment(winrt::Microsoft::Web::WebView2::Core::CoreWebView2DefaultDownloadDialogCornerAlignment const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_DefaultDownloadDialogCornerAlignment(static_cast<int32_t>(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)this;
            check_hresult(_winrt_abi_type->put_DefaultDownloadDialogCornerAlignment(static_cast<int32_t>(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_9<D>::DefaultDownloadDialogMargin() const
    {
        winrt::Windows::Foundation::Point value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DefaultDownloadDialogMargin(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)this;
            check_hresult(_winrt_abi_type->get_DefaultDownloadDialogMargin(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_9<D>::DefaultDownloadDialogMargin(winrt::Windows::Foundation::Point const& value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_DefaultDownloadDialogMargin(impl::bind_in(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)this;
            check_hresult(_winrt_abi_type->put_DefaultDownloadDialogMargin(impl::bind_in(value)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_9<D>::IsDefaultDownloadDialogOpenChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_IsDefaultDownloadDialogOpenChanged(*(void**)(&handler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)this;
            check_hresult(_winrt_abi_type->add_IsDefaultDownloadDialogOpenChanged(*(void**)(&handler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_9<D>::IsDefaultDownloadDialogOpenChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, IsDefaultDownloadDialogOpenChanged_revoker>(this, IsDefaultDownloadDialogOpenChanged(handler));
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_9<D>::IsDefaultDownloadDialogOpenChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)&_winrt_casted_result;
            _winrt_abi_type->remove_IsDefaultDownloadDialogOpenChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)this;
            _winrt_abi_type->remove_IsDefaultDownloadDialogOpenChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_9<D>::OpenDefaultDownloadDialog() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->OpenDefaultDownloadDialog());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)this;
            check_hresult(_winrt_abi_type->OpenDefaultDownloadDialog());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_9<D>::CloseDefaultDownloadDialog() const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CloseDefaultDownloadDialog());
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>**)this;
            check_hresult(_winrt_abi_type->CloseDefaultDownloadDialog());
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_Manual<D>::AddWebResourceRequestedFilter(param::hstring const& uri, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceContext const& resourceContext, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequestSourceKinds const& requestSourceKinds) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->AddWebResourceRequestedFilter(*(void**)(&uri), static_cast<int32_t>(resourceContext), static_cast<uint32_t>(requestSourceKinds)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual>**)this;
            check_hresult(_winrt_abi_type->AddWebResourceRequestedFilter(*(void**)(&uri), static_cast<int32_t>(resourceContext), static_cast<uint32_t>(requestSourceKinds)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_Manual<D>::RemoveWebResourceRequestedFilter(param::hstring const& uri, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceContext const& resourceContext, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequestSourceKinds const& requestSourceKinds) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->RemoveWebResourceRequestedFilter(*(void**)(&uri), static_cast<int32_t>(resourceContext), static_cast<uint32_t>(requestSourceKinds)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual>**)this;
            check_hresult(_winrt_abi_type->RemoveWebResourceRequestedFilter(*(void**)(&uri), static_cast<int32_t>(resourceContext), static_cast<uint32_t>(requestSourceKinds)));
        }
    }
    template <typename D> auto consume_Microsoft_Web_WebView2_Core_ICoreWebView2_Manual2<D>::PostWebMessageAsJson(param::hstring const& webMessageAsJson, param::vector_view<winrt::Windows::Foundation::IInspectable> const& additionalObjects) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->PostWebMessageAsJson(*(void**)(&webMessageAsJson), *(void**)(&additionalObjects)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual2>**)this;
            check_hresult(_winrt_abi_type->PostWebMessageAsJson(*(void**)(&webMessageAsJson), *(void**)(&additionalObjects)));
        }
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::CoreWebView2Certificate_Manual> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::CoreWebView2Certificate_Manual>
    {
        int32_t __stdcall ToCertificate(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Security::Cryptography::Certificates::Certificate>(this->shim().ToCertificate());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificate_Manual> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificate_Manual>
    {
        int32_t __stdcall ToCertificate(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Security::Cryptography::Certificates::Certificate>(this->shim().ToCertificate());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual>
    {
        int32_t __stdcall ClearBrowsingDataAsync(uint32_t dataKinds, int64_t startTime, int64_t endTime, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncAction>(this->shim().ClearBrowsingDataAsync(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2BrowsingDataKinds const*>(&dataKinds), *reinterpret_cast<winrt::Windows::Foundation::DateTime const*>(&startTime), *reinterpret_cast<winrt::Windows::Foundation::DateTime const*>(&endTime)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ClearBrowsingDataAsync2(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncAction>(this->shim().ClearBrowsingDataAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual2>
    {
        int32_t __stdcall GetNonDefaultPermissionSettingsAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionSetting>>>(this->shim().GetNonDefaultPermissionSettingsAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual3> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual3>
    {
        int32_t __stdcall GetBrowserExtensionsAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Web::WebView2::Core::CoreWebView2BrowserExtension>>>(this->shim().GetBrowserExtensionsAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>
    {
        int32_t __stdcall get_Settings(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Settings>(this->shim().Settings());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BrowserProcessId(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().BrowserProcessId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CanGoBack(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().CanGoBack());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CanGoForward(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().CanGoForward());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DocumentTitle(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DocumentTitle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ContainsFullScreenElement(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ContainsFullScreenElement());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_NavigationStarting(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().NavigationStarting(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_NavigationStarting(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigationStarting(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_ContentLoading(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ContentLoading(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContentLoadingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ContentLoading(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContentLoading(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_SourceChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().SourceChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2SourceChangedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_SourceChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SourceChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_HistoryChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().HistoryChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_HistoryChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HistoryChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_NavigationCompleted(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().NavigationCompleted(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_NavigationCompleted(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigationCompleted(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_FrameNavigationStarting(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().FrameNavigationStarting(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_FrameNavigationStarting(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FrameNavigationStarting(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_FrameNavigationCompleted(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().FrameNavigationCompleted(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_FrameNavigationCompleted(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FrameNavigationCompleted(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_ScriptDialogOpening(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ScriptDialogOpening(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScriptDialogOpeningEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ScriptDialogOpening(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ScriptDialogOpening(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_PermissionRequested(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().PermissionRequested(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_PermissionRequested(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PermissionRequested(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_ProcessFailed(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ProcessFailed(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ProcessFailed(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ProcessFailed(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_WebMessageReceived(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().WebMessageReceived(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebMessageReceivedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_WebMessageReceived(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().WebMessageReceived(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_NewWindowRequested(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().NewWindowRequested(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NewWindowRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_NewWindowRequested(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NewWindowRequested(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_DocumentTitleChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().DocumentTitleChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_DocumentTitleChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DocumentTitleChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_ContainsFullScreenElementChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ContainsFullScreenElementChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ContainsFullScreenElementChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContainsFullScreenElementChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_WebResourceRequested(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().WebResourceRequested(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_WebResourceRequested(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().WebResourceRequested(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_WindowCloseRequested(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().WindowCloseRequested(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_WindowCloseRequested(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().WindowCloseRequested(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall Navigate(void* uri) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Navigate(*reinterpret_cast<hstring const*>(&uri));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NavigateToString(void* htmlContent) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigateToString(*reinterpret_cast<hstring const*>(&htmlContent));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AddScriptToExecuteOnDocumentCreatedAsync(void* javaScript, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<hstring>>(this->shim().AddScriptToExecuteOnDocumentCreatedAsync(*reinterpret_cast<hstring const*>(&javaScript)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveScriptToExecuteOnDocumentCreated(void* id) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveScriptToExecuteOnDocumentCreated(*reinterpret_cast<hstring const*>(&id));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ExecuteScriptAsync(void* javaScript, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<hstring>>(this->shim().ExecuteScriptAsync(*reinterpret_cast<hstring const*>(&javaScript)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CapturePreviewAsync(int32_t imageFormat, void* imageStream, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncAction>(this->shim().CapturePreviewAsync(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CapturePreviewImageFormat const*>(&imageFormat), *reinterpret_cast<winrt::Windows::Storage::Streams::IRandomAccessStream const*>(&imageStream)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Reload() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Reload();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PostWebMessageAsJson(void* webMessageAsJson) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PostWebMessageAsJson(*reinterpret_cast<hstring const*>(&webMessageAsJson));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PostWebMessageAsString(void* webMessageAsString) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PostWebMessageAsString(*reinterpret_cast<hstring const*>(&webMessageAsString));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CallDevToolsProtocolMethodAsync(void* methodName, void* parametersAsJson, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<hstring>>(this->shim().CallDevToolsProtocolMethodAsync(*reinterpret_cast<hstring const*>(&methodName), *reinterpret_cast<hstring const*>(&parametersAsJson)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GoBack() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GoBack();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GoForward() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GoForward();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDevToolsProtocolEventReceiver(void* eventName, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DevToolsProtocolEventReceiver>(this->shim().GetDevToolsProtocolEventReceiver(*reinterpret_cast<hstring const*>(&eventName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Stop() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Stop();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AddHostObjectToScript(void* name, void* rawObject) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddHostObjectToScript(*reinterpret_cast<hstring const*>(&name), *reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&rawObject));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveHostObjectFromScript(void* name) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveHostObjectFromScript(*reinterpret_cast<hstring const*>(&name));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall OpenDevToolsWindow() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OpenDevToolsWindow();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AddWebResourceRequestedFilter(void* uri, int32_t ResourceContext) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddWebResourceRequestedFilter(*reinterpret_cast<hstring const*>(&uri), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceContext const*>(&ResourceContext));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveWebResourceRequestedFilter(void* uri, int32_t ResourceContext) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveWebResourceRequestedFilter(*reinterpret_cast<hstring const*>(&uri), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceContext const*>(&ResourceContext));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>
    {
        int32_t __stdcall get_KeyEventKind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2KeyEventKind>(this->shim().KeyEventKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_VirtualKey(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().VirtualKey());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_KeyEventLParam(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().KeyEventLParam());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PhysicalKeyStatus(struct struct_Microsoft_Web_WebView2_Core_CoreWebView2PhysicalKeyStatus* value) noexcept final try
        {
            zero_abi<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PhysicalKeyStatus>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PhysicalKeyStatus>(this->shim().PhysicalKeyStatus());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Handled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Handled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Handled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs2>
    {
        int32_t __stdcall get_IsBrowserAcceleratorKeyEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsBrowserAcceleratorKeyEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsBrowserAcceleratorKeyEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsBrowserAcceleratorKeyEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs>
    {
        int32_t __stdcall get_Uri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Uri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Challenge(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Challenge());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Response(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2BasicAuthenticationResponse>(this->shim().Response());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Cancel(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Cancel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Cancel(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Deferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse>
    {
        int32_t __stdcall get_UserName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().UserName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_UserName(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().UserName(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Password(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Password());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Password(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Password(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension>
    {
        int32_t __stdcall get_Id(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Id());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Name(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncAction>(this->shim().RemoveAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall EnableAsync(bool IsEnabled, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncAction>(this->shim().EnableAsync(IsEnabled));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserProcessExitedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserProcessExitedEventArgs>
    {
        int32_t __stdcall get_BrowserProcessExitKind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2BrowserProcessExitKind>(this->shim().BrowserProcessExitKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BrowserProcessId(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().BrowserProcessId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate>
    {
        int32_t __stdcall get_Subject(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Subject());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Issuer(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Issuer());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ValidFrom(double* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<double>(this->shim().ValidFrom());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ValidTo(double* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<double>(this->shim().ValidTo());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DerEncodedSerialNumber(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DerEncodedSerialNumber());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DisplayName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DisplayName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PemEncodedIssuerCertificateChain(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVectorView<hstring>>(this->shim().PemEncodedIssuerCertificateChain());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ToPemEncoding(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().ToPemEncoding());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate>
    {
        int32_t __stdcall get_Subject(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Subject());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Issuer(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Issuer());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ValidFrom(double* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<double>(this->shim().ValidFrom());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ValidTo(double* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<double>(this->shim().ValidTo());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DerEncodedSerialNumber(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DerEncodedSerialNumber());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DisplayName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DisplayName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PemEncodedIssuerCertificateChain(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVectorView<hstring>>(this->shim().PemEncodedIssuerCertificateChain());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Kind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificateKind>(this->shim().Kind());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ToPemEncoding(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().ToPemEncoding());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs>
    {
        int32_t __stdcall get_Host(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Host());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Port(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().Port());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsProxy(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsProxy());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AllowedCertificateAuthorities(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVectorView<hstring>>(this->shim().AllowedCertificateAuthorities());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MutuallyTrustedCertificates(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificate>>(this->shim().MutuallyTrustedCertificates());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SelectedCertificate(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificate>(this->shim().SelectedCertificate());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SelectedCertificate(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectedCertificate(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificate const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Cancel(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Cancel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Cancel(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Handled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Handled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Handled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Deferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>
    {
        int32_t __stdcall get_RootVisualTarget(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::IInspectable>(this->shim().RootVisualTarget());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RootVisualTarget(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RootVisualTarget(*reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_CursorChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().CursorChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CompositionController, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_CursorChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CursorChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall SendMouseInput(int32_t eventKind, uint32_t virtualKeys, uint32_t mouseData, winrt::Windows::Foundation::Point point) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SendMouseInput(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2MouseEventKind const*>(&eventKind), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2MouseEventVirtualKeys const*>(&virtualKeys), mouseData, *reinterpret_cast<winrt::Windows::Foundation::Point const*>(&point));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendPointerInput(int32_t eventKind, void* pointerInfo) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SendPointerInput(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PointerEventKind const*>(&eventKind), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PointerInfo const*>(&pointerInfo));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Cursor(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Core::CoreCursor>(this->shim().Cursor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall DragEnter(void* dragInfo, void* dragUIOverride, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::ApplicationModel::DataTransfer::DataPackageOperation>(this->shim().DragEnter(*reinterpret_cast<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo const*>(&dragInfo), *reinterpret_cast<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride const*>(&dragUIOverride)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall DragOver(void* dragInfo, void* dragUIOverride, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::ApplicationModel::DataTransfer::DataPackageOperation>(this->shim().DragOver(*reinterpret_cast<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo const*>(&dragInfo), *reinterpret_cast<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride const*>(&dragUIOverride)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Drop(void* dragInfo, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::ApplicationModel::DataTransfer::DataPackageOperation>(this->shim().Drop(*reinterpret_cast<winrt::Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo const*>(&dragInfo)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController2>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController3> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController3>
    {
        int32_t __stdcall DragLeave() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DragLeave();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4>
    {
        int32_t __stdcall add_NonClientRegionChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().NonClientRegionChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CompositionController, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NonClientRegionChangedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_NonClientRegionChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NonClientRegionChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall GetNonClientRegionAtPoint(winrt::Windows::Foundation::Point point, int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NonClientRegionKind>(this->shim().GetNonClientRegionAtPoint(*reinterpret_cast<winrt::Windows::Foundation::Point const*>(&point)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall QueryNonClientRegion(int32_t Kind, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Foundation::Rect>>(this->shim().QueryNonClientRegion(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NonClientRegionKind const*>(&Kind)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionControllerStatics> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionControllerStatics>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionControllerStatics2_Manual> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionControllerStatics2_Manual>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContentLoadingEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContentLoadingEventArgs>
    {
        int32_t __stdcall get_IsErrorPage(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsErrorPage());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_NavigationId(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().NavigationId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem>
    {
        int32_t __stdcall get_Name(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Label(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Label());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CommandId(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().CommandId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ShortcutKeyDescription(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ShortcutKeyDescription());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Icon(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Storage::Streams::IRandomAccessStream>(this->shim().Icon());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Kind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuItemKind>(this->shim().Kind());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsChecked(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsChecked());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsChecked(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsChecked(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Children(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuItem>>(this->shim().Children());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_CustomItemSelected(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().CustomItemSelected(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuItem, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_CustomItemSelected(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CustomItemSelected(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs>
    {
        int32_t __stdcall get_MenuItems(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuItem>>(this->shim().MenuItems());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ContextMenuTarget(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuTarget>(this->shim().ContextMenuTarget());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Location(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().Location());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SelectedCommandId(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().SelectedCommandId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SelectedCommandId(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectedCommandId(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Handled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Handled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Handled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Deferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget>
    {
        int32_t __stdcall get_Kind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuTargetKind>(this->shim().Kind());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsEditable(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsEditable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsRequestedForMainFrame(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsRequestedForMainFrame());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PageUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().PageUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_FrameUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FrameUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HasLinkUri(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().HasLinkUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LinkUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().LinkUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HasLinkText(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().HasLinkText());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LinkText(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().LinkText());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HasSourceUri(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().HasSourceUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SourceUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().SourceUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HasSelection(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().HasSelection());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SelectionText(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().SelectionText());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>
    {
        int32_t __stdcall get_IsVisible(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsVisible());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsVisible(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsVisible(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Bounds(winrt::Windows::Foundation::Rect* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Rect>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Rect>(this->shim().Bounds());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Bounds(winrt::Windows::Foundation::Rect value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Bounds(*reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ZoomFactor(double* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<double>(this->shim().ZoomFactor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ZoomFactor(double value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ZoomFactor(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ParentWindow(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference>(this->shim().ParentWindow());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ParentWindow(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ParentWindow(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CoreWebView2(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2>(this->shim().CoreWebView2());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_ZoomFactorChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ZoomFactorChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ZoomFactorChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ZoomFactorChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_MoveFocusRequested(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().MoveFocusRequested(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Microsoft::Web::WebView2::Core::CoreWebView2MoveFocusRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_MoveFocusRequested(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MoveFocusRequested(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_GotFocus(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().GotFocus(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_GotFocus(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GotFocus(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_LostFocus(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().LostFocus(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_LostFocus(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LostFocus(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_AcceleratorKeyPressed(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().AcceleratorKeyPressed(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Microsoft::Web::WebView2::Core::CoreWebView2AcceleratorKeyPressedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_AcceleratorKeyPressed(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AcceleratorKeyPressed(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall SetBoundsAndZoomFactor(winrt::Windows::Foundation::Rect Bounds, double ZoomFactor) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetBoundsAndZoomFactor(*reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&Bounds), ZoomFactor);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall MoveFocus(int32_t reason) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MoveFocus(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2MoveFocusReason const*>(&reason));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NotifyParentWindowPositionChanged() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyParentWindowPositionChanged();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Close() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Close();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller2>
    {
        int32_t __stdcall get_DefaultBackgroundColor(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().DefaultBackgroundColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_DefaultBackgroundColor(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DefaultBackgroundColor(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3>
    {
        int32_t __stdcall get_RasterizationScale(double* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<double>(this->shim().RasterizationScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RasterizationScale(double value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RasterizationScale(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ShouldDetectMonitorScaleChanges(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ShouldDetectMonitorScaleChanges());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ShouldDetectMonitorScaleChanges(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ShouldDetectMonitorScaleChanges(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BoundsMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2BoundsMode>(this->shim().BoundsMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BoundsMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BoundsMode(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2BoundsMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_RasterizationScaleChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().RasterizationScaleChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_RasterizationScaleChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RasterizationScaleChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller4> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller4>
    {
        int32_t __stdcall get_AllowExternalDrop(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().AllowExternalDrop());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AllowExternalDrop(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AllowExternalDrop(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerFactory> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerFactory>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions>
    {
        int32_t __stdcall get_ProfileName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ProfileName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ProfileName(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ProfileName(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsInPrivateModeEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsInPrivateModeEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsInPrivateModeEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsInPrivateModeEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions2>
    {
        int32_t __stdcall get_ScriptLocale(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ScriptLocale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ScriptLocale(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ScriptLocale(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReference> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReference>
    {
        int32_t __stdcall get_WindowHandle(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().WindowHandle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CoreWindow(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Core::CoreWindow>(this->shim().CoreWindow());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReferenceStatics> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReferenceStatics>
    {
        int32_t __stdcall CreateFromWindowHandle(uint64_t windowHandle, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference>(this->shim().CreateFromWindowHandle(windowHandle));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateFromCoreWindow(void* coreWindow, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference>(this->shim().CreateFromCoreWindow(*reinterpret_cast<winrt::Windows::UI::Core::CoreWindow const*>(&coreWindow)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>
    {
        int32_t __stdcall get_Name(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Value(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Value());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Value(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Value(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Domain(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Domain());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Path(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Path());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Expires(double* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<double>(this->shim().Expires());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Expires(double value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Expires(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsHttpOnly(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsHttpOnly());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsHttpOnly(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsHttpOnly(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SameSite(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CookieSameSiteKind>(this->shim().SameSite());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SameSite(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SameSite(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CookieSameSiteKind const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsSecure(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsSecure());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsSecure(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsSecure(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsSession(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsSession());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>
    {
        int32_t __stdcall CreateCookie(void* name, void* value, void* Domain, void* Path, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie>(this->shim().CreateCookie(*reinterpret_cast<hstring const*>(&name), *reinterpret_cast<hstring const*>(&value), *reinterpret_cast<hstring const*>(&Domain), *reinterpret_cast<hstring const*>(&Path)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CopyCookie(void* cookieParam, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie>(this->shim().CopyCookie(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie const*>(&cookieParam)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AddOrUpdateCookie(void* cookie) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddOrUpdateCookie(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie const*>(&cookie));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall DeleteCookie(void* cookie) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DeleteCookie(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie const*>(&cookie));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall DeleteCookies(void* name, void* uri) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DeleteCookies(*reinterpret_cast<hstring const*>(&name), *reinterpret_cast<hstring const*>(&uri));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall DeleteCookiesWithDomainAndPath(void* name, void* Domain, void* Path) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DeleteCookiesWithDomainAndPath(*reinterpret_cast<hstring const*>(&name), *reinterpret_cast<hstring const*>(&Domain), *reinterpret_cast<hstring const*>(&Path));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall DeleteAllCookies() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DeleteAllCookies();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager_Manual> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager_Manual>
    {
        int32_t __stdcall GetCookiesAsync(void* uri, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie>>>(this->shim().GetCookiesAsync(*reinterpret_cast<hstring const*>(&uri)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration>
    {
        int32_t __stdcall get_TreatAsSecure(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().TreatAsSecure());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TreatAsSecure(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TreatAsSecure(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HasAuthorityComponent(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().HasAuthorityComponent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HasAuthorityComponent(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HasAuthorityComponent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistrationFactory> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistrationFactory>
    {
        int32_t __stdcall CreateInstance(void* schemeName, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CustomSchemeRegistration>(this->shim().CreateInstance(*reinterpret_cast<hstring const*>(&schemeName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration_Manual> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration_Manual>
    {
        int32_t __stdcall get_SchemeName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().SchemeName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AllowedOrigins(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVector<hstring>>(this->shim().AllowedOrigins());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DOMContentLoadedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DOMContentLoadedEventArgs>
    {
        int32_t __stdcall get_NavigationId(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().NavigationId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs>
    {
        int32_t __stdcall get_ParameterObjectAsJson(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ParameterObjectAsJson());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs2>
    {
        int32_t __stdcall get_SessionId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().SessionId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver>
    {
        int32_t __stdcall add_DevToolsProtocolEventReceived(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().DevToolsProtocolEventReceived(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2DevToolsProtocolEventReceivedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_DevToolsProtocolEventReceived(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DevToolsProtocolEventReceived(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter>
    {
        int32_t __stdcall WrapNamedObject(void* name, void* adapter, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::IInspectable>(this->shim().WrapNamedObject(*reinterpret_cast<hstring const*>(&name), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter const*>(&adapter)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall WrapObject(void* unwrapped, void* adapter, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::IInspectable>(this->shim().WrapObject(*reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&unwrapped), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter const*>(&adapter)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall UnwrapObject(void* wrapped, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::IInspectable>(this->shim().UnwrapObject(*reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&wrapped)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Clean() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Clean();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation>
    {
        int32_t __stdcall get_Uri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Uri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ContentDisposition(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ContentDisposition());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MimeType(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().MimeType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TotalBytesToReceive(int64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int64_t>(this->shim().TotalBytesToReceive());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BytesReceived(int64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int64_t>(this->shim().BytesReceived());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_EstimatedEndTime(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().EstimatedEndTime());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ResultFilePath(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ResultFilePath());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_State(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadState>(this->shim().State());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_InterruptReason(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadInterruptReason>(this->shim().InterruptReason());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CanResume(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().CanResume());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_BytesReceivedChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().BytesReceivedChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadOperation, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_BytesReceivedChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BytesReceivedChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_EstimatedEndTimeChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().EstimatedEndTimeChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadOperation, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_EstimatedEndTimeChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().EstimatedEndTimeChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_StateChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().StateChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadOperation, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_StateChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StateChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall Cancel() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Pause() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Pause();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Resume() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Resume();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs>
    {
        int32_t __stdcall get_DownloadOperation(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadOperation>(this->shim().DownloadOperation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Cancel(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Cancel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Cancel(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ResultFilePath(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ResultFilePath());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ResultFilePath(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ResultFilePath(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Handled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Handled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Handled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Deferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>
    {
        int32_t __stdcall get_BrowserVersionString(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().BrowserVersionString());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_NewBrowserVersionAvailable(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().NewBrowserVersionAvailable(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_NewBrowserVersionAvailable(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NewBrowserVersionAvailable(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall CreateCoreWebView2ControllerAsync(void* ParentWindow, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller>>(this->shim().CreateCoreWebView2ControllerAsync(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference const*>(&ParentWindow)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateWebResourceResponse(void* Content, int32_t StatusCode, void* ReasonPhrase, void* Headers, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponse>(this->shim().CreateWebResourceResponse(*reinterpret_cast<winrt::Windows::Storage::Streams::IRandomAccessStream const*>(&Content), StatusCode, *reinterpret_cast<hstring const*>(&ReasonPhrase), *reinterpret_cast<hstring const*>(&Headers)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment10> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment10>
    {
        int32_t __stdcall CreateCoreWebView2ControllerOptions(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerOptions>(this->shim().CreateCoreWebView2ControllerOptions());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment11> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment11>
    {
        int32_t __stdcall get_FailureReportFolderPath(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FailureReportFolderPath());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment12> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment12>
    {
        int32_t __stdcall CreateSharedBuffer(uint64_t Size, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2SharedBuffer>(this->shim().CreateSharedBuffer(Size));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment13> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment13>
    {
        int32_t __stdcall GetProcessExtendedInfosAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessExtendedInfo>>>(this->shim().GetProcessExtendedInfosAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment14> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment14>
    {
        int32_t __stdcall CreateWebFileSystemFileHandle(void* Path, int32_t Permission, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FileSystemHandle>(this->shim().CreateWebFileSystemFileHandle(*reinterpret_cast<hstring const*>(&Path), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FileSystemHandlePermission const*>(&Permission)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateWebFileSystemDirectoryHandle(void* Path, int32_t Permission, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FileSystemHandle>(this->shim().CreateWebFileSystemDirectoryHandle(*reinterpret_cast<hstring const*>(&Path), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FileSystemHandlePermission const*>(&Permission)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment2>
    {
        int32_t __stdcall CreateWebResourceRequest(void* uri, void* Method, void* postData, void* Headers, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequest>(this->shim().CreateWebResourceRequest(*reinterpret_cast<hstring const*>(&uri), *reinterpret_cast<hstring const*>(&Method), *reinterpret_cast<winrt::Windows::Storage::Streams::IRandomAccessStream const*>(&postData), *reinterpret_cast<hstring const*>(&Headers)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment3> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment3>
    {
        int32_t __stdcall CreateCoreWebView2CompositionControllerAsync(void* ParentWindow, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CompositionController>>(this->shim().CreateCoreWebView2CompositionControllerAsync(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference const*>(&ParentWindow)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateCoreWebView2PointerInfo(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PointerInfo>(this->shim().CreateCoreWebView2PointerInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment4> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment4>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment5> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment5>
    {
        int32_t __stdcall add_BrowserProcessExited(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().BrowserProcessExited(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment, winrt::Microsoft::Web::WebView2::Core::CoreWebView2BrowserProcessExitedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_BrowserProcessExited(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BrowserProcessExited(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment6> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment6>
    {
        int32_t __stdcall CreatePrintSettings(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintSettings>(this->shim().CreatePrintSettings());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment7> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment7>
    {
        int32_t __stdcall get_UserDataFolder(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().UserDataFolder());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment8> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment8>
    {
        int32_t __stdcall add_ProcessInfosChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ProcessInfosChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ProcessInfosChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ProcessInfosChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall GetProcessInfos(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessInfo>>(this->shim().GetProcessInfos());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment9> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment9>
    {
        int32_t __stdcall CreateContextMenuItem(void* Label, void* iconStream, int32_t Kind, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuItem>(this->shim().CreateContextMenuItem(*reinterpret_cast<hstring const*>(&Label), *reinterpret_cast<winrt::Windows::Storage::Streams::IRandomAccessStream const*>(&iconStream), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuItemKind const*>(&Kind)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>
    {
        int32_t __stdcall get_AdditionalBrowserArguments(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().AdditionalBrowserArguments());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AdditionalBrowserArguments(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AdditionalBrowserArguments(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Language(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Language());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Language(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Language(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TargetCompatibleBrowserVersion(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().TargetCompatibleBrowserVersion());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TargetCompatibleBrowserVersion(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TargetCompatibleBrowserVersion(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AllowSingleSignOnUsingOSPrimaryAccount(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().AllowSingleSignOnUsingOSPrimaryAccount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AllowSingleSignOnUsingOSPrimaryAccount(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AllowSingleSignOnUsingOSPrimaryAccount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions2>
    {
        int32_t __stdcall get_ExclusiveUserDataFolderAccess(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ExclusiveUserDataFolderAccess());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ExclusiveUserDataFolderAccess(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ExclusiveUserDataFolderAccess(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions3> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions3>
    {
        int32_t __stdcall get_IsCustomCrashReportingEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsCustomCrashReportingEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsCustomCrashReportingEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsCustomCrashReportingEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions4> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions4>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions5> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions5>
    {
        int32_t __stdcall get_EnableTrackingPrevention(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().EnableTrackingPrevention());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_EnableTrackingPrevention(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().EnableTrackingPrevention(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions6> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions6>
    {
        int32_t __stdcall get_AreBrowserExtensionsEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().AreBrowserExtensionsEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AreBrowserExtensionsEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AreBrowserExtensionsEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7>
    {
        int32_t __stdcall get_ChannelSearchKind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ChannelSearchKind>(this->shim().ChannelSearchKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ChannelSearchKind(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ChannelSearchKind(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ChannelSearchKind const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ReleaseChannels(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ReleaseChannels>(this->shim().ReleaseChannels());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ReleaseChannels(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ReleaseChannels(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ReleaseChannels const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions8> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions8>
    {
        int32_t __stdcall get_ScrollBarStyle(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScrollbarStyle>(this->shim().ScrollBarStyle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ScrollBarStyle(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ScrollBarStyle(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScrollbarStyle const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions_Manual> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions_Manual>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions_Manual3> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions_Manual3>
    {
        int32_t __stdcall get_CustomSchemeRegistrations(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CustomSchemeRegistration>>(this->shim().CustomSchemeRegistrations());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CustomSchemeRegistrations(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CustomSchemeRegistrations(*reinterpret_cast<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CustomSchemeRegistration> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>
    {
        int32_t __stdcall CreateAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment>>(this->shim().CreateAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateWithOptionsAsync(void* browserExecutableFolder, void* userDataFolder, void* options, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment>>(this->shim().CreateWithOptionsAsync(*reinterpret_cast<hstring const*>(&browserExecutableFolder), *reinterpret_cast<hstring const*>(&userDataFolder), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2EnvironmentOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAvailableBrowserVersionString(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().GetAvailableBrowserVersionString());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAvailableBrowserVersionString2(void* browserExecutableFolder, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().GetAvailableBrowserVersionString(*reinterpret_cast<hstring const*>(&browserExecutableFolder)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CompareBrowserVersionString(void* browserVersionString1, void* browserVersionString2, int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<int32_t>(this->shim().CompareBrowserVersionString(*reinterpret_cast<hstring const*>(&browserVersionString1), *reinterpret_cast<hstring const*>(&browserVersionString2)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics2>
    {
        int32_t __stdcall GetAvailableBrowserVersionStringWithOptions(void* browserExecutableFolder, void* options, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().GetAvailableBrowserVersionString(*reinterpret_cast<hstring const*>(&browserExecutableFolder), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2EnvironmentOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment_Manual> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment_Manual>
    {
        int32_t __stdcall CreateCoreWebView2ControllerAsync(void* ParentWindow, void* options, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller>>(this->shim().CreateCoreWebView2ControllerAsync(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference const*>(&ParentWindow), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateCoreWebView2CompositionControllerAsync(void* ParentWindow, void* options, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CompositionController>>(this->shim().CreateCoreWebView2CompositionControllerAsync(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference const*>(&ParentWindow), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult>
    {
        int32_t __stdcall get_Succeeded(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Succeeded());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ResultAsJson(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ResultAsJson());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Exception(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScriptException>(this->shim().Exception());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult_Manual> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult_Manual>
    {
        int32_t __stdcall TryGetResultAsString(void** stringResult, int32_t* result) noexcept final try
        {
            clear_abi(stringResult);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<int32_t>(this->shim().TryGetResultAsString(*reinterpret_cast<hstring*>(stringResult)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2File> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2File>
    {
        int32_t __stdcall get_Path(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Path());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FileSystemHandle> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FileSystemHandle>
    {
        int32_t __stdcall get_Kind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FileSystemHandleKind>(this->shim().Kind());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Path(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Path());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Permission(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FileSystemHandlePermission>(this->shim().Permission());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame>
    {
        int32_t __stdcall get_Name(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_NameChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().NameChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_NameChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NameChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_Destroyed(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().Destroyed(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_Destroyed(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Destroyed(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall RemoveHostObjectFromScript(void* name) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveHostObjectFromScript(*reinterpret_cast<hstring const*>(&name));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsDestroyed(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<int32_t>(this->shim().IsDestroyed());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2>
    {
        int32_t __stdcall add_NavigationStarting(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().NavigationStarting(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_NavigationStarting(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigationStarting(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_ContentLoading(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ContentLoading(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContentLoadingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ContentLoading(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContentLoading(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_NavigationCompleted(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().NavigationCompleted(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_NavigationCompleted(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigationCompleted(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_DOMContentLoaded(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().DOMContentLoaded(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2DOMContentLoadedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_DOMContentLoaded(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DOMContentLoaded(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_WebMessageReceived(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().WebMessageReceived(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebMessageReceivedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_WebMessageReceived(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().WebMessageReceived(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall ExecuteScriptAsync(void* javaScript, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<hstring>>(this->shim().ExecuteScriptAsync(*reinterpret_cast<hstring const*>(&javaScript)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PostWebMessageAsJson(void* webMessageAsJson) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PostWebMessageAsJson(*reinterpret_cast<hstring const*>(&webMessageAsJson));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PostWebMessageAsString(void* webMessageAsString) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PostWebMessageAsString(*reinterpret_cast<hstring const*>(&webMessageAsString));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame3> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame3>
    {
        int32_t __stdcall add_PermissionRequested(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().PermissionRequested(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_PermissionRequested(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PermissionRequested(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame4> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame4>
    {
        int32_t __stdcall PostSharedBufferToScript(void* sharedBuffer, int32_t access, void* additionalDataAsJson) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PostSharedBufferToScript(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2SharedBuffer const*>(&sharedBuffer), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2SharedBufferAccess const*>(&access), *reinterpret_cast<hstring const*>(&additionalDataAsJson));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame5> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame5>
    {
        int32_t __stdcall get_FrameId(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().FrameId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame6> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame6>
    {
        int32_t __stdcall add_ScreenCaptureStarting(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ScreenCaptureStarting(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScreenCaptureStartingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ScreenCaptureStarting(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ScreenCaptureStarting(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameCreatedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameCreatedEventArgs>
    {
        int32_t __stdcall get_Frame(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame>(this->shim().Frame());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo>
    {
        int32_t __stdcall get_Name(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Source(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo2>
    {
        int32_t __stdcall get_ParentFrameInfo(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FrameInfo>(this->shim().ParentFrameInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_FrameId(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().FrameId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_FrameKind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FrameKind>(this->shim().FrameKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpHeadersCollectionIterator> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpHeadersCollectionIterator>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>
    {
        int32_t __stdcall GetHeader(void* name, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().GetHeader(*reinterpret_cast<hstring const*>(&name)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetHeaders(void* name, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpHeadersCollectionIterator>(this->shim().GetHeaders(*reinterpret_cast<hstring const*>(&name)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Contains(void* name, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().Contains(*reinterpret_cast<hstring const*>(&name)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetHeader(void* name, void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetHeader(*reinterpret_cast<hstring const*>(&name), *reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveHeader(void* name) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveHeader(*reinterpret_cast<hstring const*>(&name));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders>
    {
        int32_t __stdcall AppendHeader(void* name, void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AppendHeader(*reinterpret_cast<hstring const*>(&name), *reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Contains(void* name, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().Contains(*reinterpret_cast<hstring const*>(&name)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetHeader(void* name, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().GetHeader(*reinterpret_cast<hstring const*>(&name)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetHeaders(void* name, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpHeadersCollectionIterator>(this->shim().GetHeaders(*reinterpret_cast<hstring const*>(&name)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs>
    {
        int32_t __stdcall get_Uri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Uri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_InitiatingOrigin(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().InitiatingOrigin());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsUserInitiated(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsUserInitiated());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Cancel(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Cancel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Cancel(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Deferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs>
    {
        int32_t __stdcall get_Reason(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2MoveFocusReason>(this->shim().Reason());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Handled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Handled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Handled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs>
    {
        int32_t __stdcall get_IsSuccess(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsSuccess());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_WebErrorStatus(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebErrorStatus>(this->shim().WebErrorStatus());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_NavigationId(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().NavigationId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs2>
    {
        int32_t __stdcall get_HttpStatusCode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().HttpStatusCode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>
    {
        int32_t __stdcall get_Uri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Uri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsUserInitiated(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsUserInitiated());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsRedirected(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsRedirected());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_RequestHeaders(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpRequestHeaders>(this->shim().RequestHeaders());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Cancel(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Cancel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Cancel(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_NavigationId(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().NavigationId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs2>
    {
        int32_t __stdcall get_AdditionalAllowedFrameAncestors(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().AdditionalAllowedFrameAncestors());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AdditionalAllowedFrameAncestors(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AdditionalAllowedFrameAncestors(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs3> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs3>
    {
        int32_t __stdcall get_NavigationKind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationKind>(this->shim().NavigationKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>
    {
        int32_t __stdcall get_Uri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Uri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_NewWindow(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2>(this->shim().NewWindow());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_NewWindow(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NewWindow(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Handled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Handled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Handled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsUserInitiated(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsUserInitiated());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_WindowFeatures(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WindowFeatures>(this->shim().WindowFeatures());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Deferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs2>
    {
        int32_t __stdcall get_Name(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs3> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs3>
    {
        int32_t __stdcall get_OriginalSourceFrameInfo(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FrameInfo>(this->shim().OriginalSourceFrameInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NonClientRegionChangedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NonClientRegionChangedEventArgs>
    {
        int32_t __stdcall get_RegionKind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NonClientRegionKind>(this->shim().RegionKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification>
    {
        int32_t __stdcall get_Body(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Body());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Direction(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2TextDirectionKind>(this->shim().Direction());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Language(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Language());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Tag(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Tag());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IconUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().IconUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Title(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Title());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BadgeUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().BadgeUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BodyImageUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().BodyImageUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ShouldRenotify(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ShouldRenotify());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_RequiresInteraction(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().RequiresInteraction());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsSilent(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsSilent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Timestamp(double* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<double>(this->shim().Timestamp());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_CloseRequested(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().CloseRequested(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Notification, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_CloseRequested(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CloseRequested(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall ReportShown() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ReportShown();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ReportClicked() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ReportClicked();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ReportClosed() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ReportClosed();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs>
    {
        int32_t __stdcall get_SenderOrigin(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().SenderOrigin());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Notification(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Notification>(this->shim().Notification());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Handled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Handled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Handled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Deferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification_Manual2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification_Manual2>
    {
        int32_t __stdcall get_VibrationPattern(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVectorView<uint64_t>>(this->shim().VibrationPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>
    {
        int32_t __stdcall get_Uri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Uri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PermissionKind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionKind>(this->shim().PermissionKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsUserInitiated(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsUserInitiated());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_State(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionState>(this->shim().State());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_State(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().State(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionState const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Deferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs2>
    {
        int32_t __stdcall get_Handled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Handled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Handled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs3> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs3>
    {
        int32_t __stdcall get_SavesInProfile(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().SavesInProfile());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SavesInProfile(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SavesInProfile(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionSetting> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionSetting>
    {
        int32_t __stdcall get_PermissionKind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionKind>(this->shim().PermissionKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PermissionOrigin(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().PermissionOrigin());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PermissionState(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionState>(this->shim().PermissionState());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>
    {
        int32_t __stdcall get_PointerKind(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().PointerKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PointerKind(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PointerKind(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PointerId(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().PointerId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PointerId(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PointerId(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_FrameId(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().FrameId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_FrameId(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FrameId(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PointerFlags(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().PointerFlags());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PointerFlags(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PointerFlags(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PointerDeviceRect(winrt::Windows::Foundation::Rect* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Rect>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Rect>(this->shim().PointerDeviceRect());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PointerDeviceRect(winrt::Windows::Foundation::Rect value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PointerDeviceRect(*reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DisplayRect(winrt::Windows::Foundation::Rect* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Rect>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Rect>(this->shim().DisplayRect());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_DisplayRect(winrt::Windows::Foundation::Rect value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DisplayRect(*reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PixelLocation(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().PixelLocation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PixelLocation(winrt::Windows::Foundation::Point value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PixelLocation(*reinterpret_cast<winrt::Windows::Foundation::Point const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HimetricLocation(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().HimetricLocation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HimetricLocation(winrt::Windows::Foundation::Point value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HimetricLocation(*reinterpret_cast<winrt::Windows::Foundation::Point const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PixelLocationRaw(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().PixelLocationRaw());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PixelLocationRaw(winrt::Windows::Foundation::Point value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PixelLocationRaw(*reinterpret_cast<winrt::Windows::Foundation::Point const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HimetricLocationRaw(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().HimetricLocationRaw());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HimetricLocationRaw(winrt::Windows::Foundation::Point value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HimetricLocationRaw(*reinterpret_cast<winrt::Windows::Foundation::Point const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Time(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().Time());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Time(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Time(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HistoryCount(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().HistoryCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HistoryCount(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HistoryCount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_InputData(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().InputData());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_InputData(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InputData(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_KeyStates(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().KeyStates());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_KeyStates(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().KeyStates(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PerformanceCount(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().PerformanceCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PerformanceCount(uint64_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PerformanceCount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ButtonChangeKind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().ButtonChangeKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ButtonChangeKind(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ButtonChangeKind(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PenFlags(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().PenFlags());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PenFlags(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PenFlags(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PenMask(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().PenMask());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PenMask(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PenMask(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PenPressure(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().PenPressure());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PenPressure(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PenPressure(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PenRotation(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().PenRotation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PenRotation(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PenRotation(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PenTiltX(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().PenTiltX());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PenTiltX(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PenTiltX(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PenTiltY(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().PenTiltY());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PenTiltY(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PenTiltY(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TouchFlags(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().TouchFlags());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TouchFlags(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TouchFlags(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TouchMask(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().TouchMask());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TouchMask(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TouchMask(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TouchContact(winrt::Windows::Foundation::Rect* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Rect>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Rect>(this->shim().TouchContact());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TouchContact(winrt::Windows::Foundation::Rect value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TouchContact(*reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TouchContactRaw(winrt::Windows::Foundation::Rect* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Rect>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Rect>(this->shim().TouchContactRaw());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TouchContactRaw(winrt::Windows::Foundation::Rect value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TouchContactRaw(*reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TouchOrientation(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().TouchOrientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TouchOrientation(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TouchOrientation(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TouchPressure(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().TouchPressure());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TouchPressure(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TouchPressure(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings>
    {
        int32_t __stdcall get_Orientation(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintOrientation>(this->shim().Orientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Orientation(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Orientation(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintOrientation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ScaleFactor(double* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<double>(this->shim().ScaleFactor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ScaleFactor(double value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ScaleFactor(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PageWidth(double* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<double>(this->shim().PageWidth());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PageWidth(double value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PageWidth(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PageHeight(double* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<double>(this->shim().PageHeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PageHeight(double value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PageHeight(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MarginTop(double* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<double>(this->shim().MarginTop());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MarginTop(double value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MarginTop(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MarginBottom(double* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<double>(this->shim().MarginBottom());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MarginBottom(double value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MarginBottom(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MarginLeft(double* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<double>(this->shim().MarginLeft());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MarginLeft(double value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MarginLeft(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MarginRight(double* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<double>(this->shim().MarginRight());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MarginRight(double value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MarginRight(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ShouldPrintBackgrounds(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ShouldPrintBackgrounds());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ShouldPrintBackgrounds(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ShouldPrintBackgrounds(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ShouldPrintSelectionOnly(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ShouldPrintSelectionOnly());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ShouldPrintSelectionOnly(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ShouldPrintSelectionOnly(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ShouldPrintHeaderAndFooter(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ShouldPrintHeaderAndFooter());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ShouldPrintHeaderAndFooter(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ShouldPrintHeaderAndFooter(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HeaderTitle(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().HeaderTitle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HeaderTitle(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTitle(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_FooterUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FooterUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_FooterUri(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FooterUri(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2>
    {
        int32_t __stdcall get_PageRanges(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().PageRanges());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PageRanges(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PageRanges(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PagesPerSide(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().PagesPerSide());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PagesPerSide(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PagesPerSide(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Copies(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().Copies());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Copies(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Copies(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Collation(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintCollation>(this->shim().Collation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Collation(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Collation(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintCollation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ColorMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintColorMode>(this->shim().ColorMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ColorMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ColorMode(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintColorMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Duplex(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintDuplex>(this->shim().Duplex());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Duplex(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Duplex(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintDuplex const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MediaSize(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintMediaSize>(this->shim().MediaSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MediaSize(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MediaSize(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintMediaSize const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PrinterName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().PrinterName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PrinterName(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PrinterName(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrivatePartial> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrivatePartial>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrivatePartialController> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrivatePartialController>
    {
        int32_t __stdcall get_IsBrowserHitTransparent(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsBrowserHitTransparent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessExtendedInfo> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessExtendedInfo>
    {
        int32_t __stdcall get_ProcessInfo(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessInfo>(this->shim().ProcessInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AssociatedFrameInfos(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FrameInfo>>(this->shim().AssociatedFrameInfos());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs>
    {
        int32_t __stdcall get_ProcessFailedKind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedKind>(this->shim().ProcessFailedKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2>
    {
        int32_t __stdcall get_Reason(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedReason>(this->shim().Reason());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExitCode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().ExitCode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ProcessDescription(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ProcessDescription());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_FrameInfosForFailedProcess(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FrameInfo>>(this->shim().FrameInfosForFailedProcess());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs3> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs3>
    {
        int32_t __stdcall get_FailureSourceModulePath(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FailureSourceModulePath());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessInfo> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessInfo>
    {
        int32_t __stdcall get_ProcessId(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().ProcessId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Kind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessKind>(this->shim().Kind());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile>
    {
        int32_t __stdcall get_ProfileName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ProfileName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsInPrivateModeEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsInPrivateModeEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ProfilePath(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ProfilePath());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DefaultDownloadFolderPath(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DefaultDownloadFolderPath());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_DefaultDownloadFolderPath(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DefaultDownloadFolderPath(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PreferredColorScheme(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PreferredColorScheme>(this->shim().PreferredColorScheme());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PreferredColorScheme(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PreferredColorScheme(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PreferredColorScheme const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile2>
    {
        int32_t __stdcall ClearBrowsingDataAsync(uint32_t dataKinds, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncAction>(this->shim().ClearBrowsingDataAsync(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2BrowsingDataKinds const*>(&dataKinds)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile3> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile3>
    {
        int32_t __stdcall get_PreferredTrackingPreventionLevel(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2TrackingPreventionLevel>(this->shim().PreferredTrackingPreventionLevel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PreferredTrackingPreventionLevel(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PreferredTrackingPreventionLevel(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2TrackingPreventionLevel const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile4> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile4>
    {
        int32_t __stdcall SetPermissionStateAsync(int32_t PermissionKind, void* origin, int32_t State, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncAction>(this->shim().SetPermissionStateAsync(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionKind const*>(&PermissionKind), *reinterpret_cast<hstring const*>(&origin), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionState const*>(&State)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile5> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile5>
    {
        int32_t __stdcall get_CookieManager(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CookieManager>(this->shim().CookieManager());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6>
    {
        int32_t __stdcall get_IsPasswordAutosaveEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsPasswordAutosaveEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsPasswordAutosaveEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsPasswordAutosaveEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsGeneralAutofillEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsGeneralAutofillEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsGeneralAutofillEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsGeneralAutofillEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile7> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile7>
    {
        int32_t __stdcall AddBrowserExtensionAsync(void* extensionFolderPath, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2BrowserExtension>>(this->shim().AddBrowserExtensionAsync(*reinterpret_cast<hstring const*>(&extensionFolderPath)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile8> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile8>
    {
        int32_t __stdcall add_Deleted(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().Deleted(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_Deleted(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Deleted(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall Delete() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Delete();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs>
    {
        int32_t __stdcall get_ContentMimeType(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ContentMimeType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Cancel(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Cancel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Cancel(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SuppressDefaultDialog(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().SuppressDefaultDialog());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SuppressDefaultDialog(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SuppressDefaultDialog(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SaveAsFilePath(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().SaveAsFilePath());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SaveAsFilePath(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SaveAsFilePath(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AllowReplace(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().AllowReplace());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AllowReplace(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AllowReplace(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Kind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2SaveAsKind>(this->shim().Kind());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Kind(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Kind(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2SaveAsKind const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Deferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs>
    {
        int32_t __stdcall get_CancelSave(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().CancelSave());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CancelSave(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CancelSave(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DocumentOriginUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DocumentOriginUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_FileExtension(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FileExtension());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_FilePath(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FilePath());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SuppressDefaultPolicy(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().SuppressDefaultPolicy());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SuppressDefaultPolicy(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SuppressDefaultPolicy(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Deferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs>
    {
        int32_t __stdcall get_Cancel(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Cancel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Cancel(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Handled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Handled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Handled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_OriginalSourceFrameInfo(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FrameInfo>(this->shim().OriginalSourceFrameInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Deferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>
    {
        int32_t __stdcall get_Uri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Uri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Kind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScriptDialogKind>(this->shim().Kind());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Message(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Message());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DefaultText(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DefaultText());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ResultText(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ResultText());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ResultText(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ResultText(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Accept() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Accept();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Deferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException>
    {
        int32_t __stdcall get_LineNumber(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().LineNumber());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ColumnNumber(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().ColumnNumber());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Name(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Message(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Message());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ToJson(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ToJson());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs>
    {
        int32_t __stdcall get_ErrorStatus(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebErrorStatus>(this->shim().ErrorStatus());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_RequestUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().RequestUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ServerCertificate(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Certificate>(this->shim().ServerCertificate());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Action(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ServerCertificateErrorAction>(this->shim().Action());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Action(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Action(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ServerCertificateErrorAction const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Deferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>
    {
        int32_t __stdcall get_IsScriptEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsScriptEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsScriptEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsScriptEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsWebMessageEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsWebMessageEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsWebMessageEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsWebMessageEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AreDefaultScriptDialogsEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().AreDefaultScriptDialogsEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AreDefaultScriptDialogsEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AreDefaultScriptDialogsEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsStatusBarEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsStatusBarEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsStatusBarEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsStatusBarEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AreDevToolsEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().AreDevToolsEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AreDevToolsEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AreDevToolsEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AreDefaultContextMenusEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().AreDefaultContextMenusEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AreDefaultContextMenusEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AreDefaultContextMenusEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AreHostObjectsAllowed(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().AreHostObjectsAllowed());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AreHostObjectsAllowed(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AreHostObjectsAllowed(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsZoomControlEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsZoomControlEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsZoomControlEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsZoomControlEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsBuiltInErrorPageEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsBuiltInErrorPageEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsBuiltInErrorPageEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsBuiltInErrorPageEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings2>
    {
        int32_t __stdcall get_UserAgent(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().UserAgent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_UserAgent(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().UserAgent(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings3> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings3>
    {
        int32_t __stdcall get_AreBrowserAcceleratorKeysEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().AreBrowserAcceleratorKeysEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AreBrowserAcceleratorKeysEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AreBrowserAcceleratorKeysEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4>
    {
        int32_t __stdcall get_IsPasswordAutosaveEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsPasswordAutosaveEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsPasswordAutosaveEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsPasswordAutosaveEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsGeneralAutofillEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsGeneralAutofillEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsGeneralAutofillEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsGeneralAutofillEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings5> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings5>
    {
        int32_t __stdcall get_IsPinchZoomEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsPinchZoomEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsPinchZoomEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsPinchZoomEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings6> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings6>
    {
        int32_t __stdcall get_IsSwipeNavigationEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsSwipeNavigationEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsSwipeNavigationEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsSwipeNavigationEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings7> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings7>
    {
        int32_t __stdcall get_HiddenPdfToolbarItems(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PdfToolbarItems>(this->shim().HiddenPdfToolbarItems());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HiddenPdfToolbarItems(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HiddenPdfToolbarItems(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PdfToolbarItems const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings8> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings8>
    {
        int32_t __stdcall get_IsReputationCheckingRequired(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsReputationCheckingRequired());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsReputationCheckingRequired(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsReputationCheckingRequired(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings9> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings9>
    {
        int32_t __stdcall get_IsNonClientRegionSupportEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsNonClientRegionSupportEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsNonClientRegionSupportEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsNonClientRegionSupportEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings_Manual> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings_Manual>
    {
        int32_t __stdcall get_HostObjectDispatchAdapter(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter>(this->shim().HostObjectDispatchAdapter());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_HostObjectDispatchAdapter(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HostObjectDispatchAdapter(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer>
    {
        int32_t __stdcall get_Size(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall OpenStream(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Storage::Streams::IRandomAccessStream>(this->shim().OpenStream());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer_Manual> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer_Manual>
    {
        int32_t __stdcall get_Buffer(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::IMemoryBufferReference>(this->shim().Buffer());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SourceChangedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SourceChangedEventArgs>
    {
        int32_t __stdcall get_IsNewDocument(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsNewDocument());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs>
    {
        int32_t __stdcall get_Source(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_WebMessageAsJson(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().WebMessageAsJson());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall TryGetWebMessageAsString(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().TryGetWebMessageAsString());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs2>
    {
        int32_t __stdcall get_AdditionalObjects(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Foundation::IInspectable>>(this->shim().AdditionalObjects());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>
    {
        int32_t __stdcall get_Uri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Uri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Uri(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Uri(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Method(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Method());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Method(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Method(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Content(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Storage::Streams::IRandomAccessStream>(this->shim().Content());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Content(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Content(*reinterpret_cast<winrt::Windows::Storage::Streams::IRandomAccessStream const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Headers(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpRequestHeaders>(this->shim().Headers());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>
    {
        int32_t __stdcall get_Request(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequest>(this->shim().Request());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Response(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponse>(this->shim().Response());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Response(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Response(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponse const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ResourceContext(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceContext>(this->shim().ResourceContext());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDeferral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Deferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs2>
    {
        int32_t __stdcall get_RequestedSourceKind(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequestSourceKinds>(this->shim().RequestedSourceKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>
    {
        int32_t __stdcall get_Content(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Storage::Streams::IRandomAccessStream>(this->shim().Content());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Content(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Content(*reinterpret_cast<winrt::Windows::Storage::Streams::IRandomAccessStream const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Headers(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpResponseHeaders>(this->shim().Headers());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_StatusCode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().StatusCode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_StatusCode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StatusCode(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ReasonPhrase(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ReasonPhrase());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ReasonPhrase(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ReasonPhrase(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseReceivedEventArgs> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseReceivedEventArgs>
    {
        int32_t __stdcall get_Request(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequest>(this->shim().Request());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Response(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponseView>(this->shim().Response());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView>
    {
        int32_t __stdcall get_Headers(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpResponseHeaders>(this->shim().Headers());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_StatusCode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().StatusCode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ReasonPhrase(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ReasonPhrase());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetContentAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Streams::IRandomAccessStream>>(this->shim().GetContentAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>
    {
        int32_t __stdcall get_HasPosition(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().HasPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HasSize(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().HasSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Left(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().Left());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Top(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().Top());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Height(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().Height());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Width(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().Width());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ShouldDisplayMenuBar(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ShouldDisplayMenuBar());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ShouldDisplayStatus(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ShouldDisplayStatus());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ShouldDisplayToolbar(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ShouldDisplayToolbar());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ShouldDisplayScrollBars(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ShouldDisplayScrollBars());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_10> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_10>
    {
        int32_t __stdcall add_BasicAuthenticationRequested(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().BasicAuthenticationRequested(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2BasicAuthenticationRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_BasicAuthenticationRequested(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BasicAuthenticationRequested(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_11> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_11>
    {
        int32_t __stdcall add_ContextMenuRequested(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ContextMenuRequested(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ContextMenuRequested(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContextMenuRequested(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall CallDevToolsProtocolMethodForSessionAsync(void* sessionId, void* methodName, void* parametersAsJson, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<hstring>>(this->shim().CallDevToolsProtocolMethodForSessionAsync(*reinterpret_cast<hstring const*>(&sessionId), *reinterpret_cast<hstring const*>(&methodName), *reinterpret_cast<hstring const*>(&parametersAsJson)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_12> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_12>
    {
        int32_t __stdcall get_StatusBarText(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().StatusBarText());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_StatusBarTextChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().StatusBarTextChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_StatusBarTextChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StatusBarTextChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_13> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_13>
    {
        int32_t __stdcall get_Profile(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile>(this->shim().Profile());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_14> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_14>
    {
        int32_t __stdcall add_ServerCertificateErrorDetected(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ServerCertificateErrorDetected(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ServerCertificateErrorDetectedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ServerCertificateErrorDetected(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ServerCertificateErrorDetected(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall ClearServerCertificateErrorActionsAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncAction>(this->shim().ClearServerCertificateErrorActionsAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15>
    {
        int32_t __stdcall get_FaviconUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FaviconUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_FaviconChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().FaviconChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_FaviconChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FaviconChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall GetFaviconAsync(int32_t format, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Streams::IRandomAccessStream>>(this->shim().GetFaviconAsync(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FaviconImageFormat const*>(&format)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_16> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_16>
    {
        int32_t __stdcall PrintAsync(void* printSettings, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintStatus>>(this->shim().PrintAsync(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintSettings const*>(&printSettings)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ShowPrintUI(int32_t printDialogKind) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ShowPrintUI(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintDialogKind const*>(&printDialogKind));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PrintToPdfStreamAsync(void* printSettings, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Streams::IRandomAccessStream>>(this->shim().PrintToPdfStreamAsync(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintSettings const*>(&printSettings)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_17> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_17>
    {
        int32_t __stdcall PostSharedBufferToScript(void* sharedBuffer, int32_t access, void* additionalDataAsJson) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PostSharedBufferToScript(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2SharedBuffer const*>(&sharedBuffer), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2SharedBufferAccess const*>(&access), *reinterpret_cast<hstring const*>(&additionalDataAsJson));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_18> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_18>
    {
        int32_t __stdcall add_LaunchingExternalUriScheme(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().LaunchingExternalUriScheme(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2LaunchingExternalUriSchemeEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_LaunchingExternalUriScheme(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LaunchingExternalUriScheme(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_19> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_19>
    {
        int32_t __stdcall get_MemoryUsageTargetLevel(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2MemoryUsageTargetLevel>(this->shim().MemoryUsageTargetLevel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MemoryUsageTargetLevel(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MemoryUsageTargetLevel(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2MemoryUsageTargetLevel const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2>
    {
        int32_t __stdcall get_CookieManager(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CookieManager>(this->shim().CookieManager());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Environment(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment>(this->shim().Environment());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_WebResourceResponseReceived(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().WebResourceResponseReceived(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponseReceivedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_WebResourceResponseReceived(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().WebResourceResponseReceived(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_DOMContentLoaded(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().DOMContentLoaded(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2DOMContentLoadedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_DOMContentLoaded(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DOMContentLoaded(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall NavigateWithWebResourceRequest(void* Request) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigateWithWebResourceRequest(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequest const*>(&Request));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_20> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_20>
    {
        int32_t __stdcall get_FrameId(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().FrameId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_21> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_21>
    {
        int32_t __stdcall ExecuteScriptWithResultAsync(void* javaScript, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ExecuteScriptResult>>(this->shim().ExecuteScriptWithResultAsync(*reinterpret_cast<hstring const*>(&javaScript)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_22> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_22>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_23> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_23>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_24> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_24>
    {
        int32_t __stdcall add_NotificationReceived(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().NotificationReceived(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NotificationReceivedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_NotificationReceived(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotificationReceived(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_25> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_25>
    {
        int32_t __stdcall add_SaveAsUIShowing(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().SaveAsUIShowing(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2SaveAsUIShowingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_SaveAsUIShowing(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SaveAsUIShowing(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall ShowSaveAsUIAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2SaveAsUIResult>>(this->shim().ShowSaveAsUIAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_26> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_26>
    {
        int32_t __stdcall add_SaveFileSecurityCheckStarting(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().SaveFileSecurityCheckStarting(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2SaveFileSecurityCheckStartingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_SaveFileSecurityCheckStarting(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SaveFileSecurityCheckStarting(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_27> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_27>
    {
        int32_t __stdcall add_ScreenCaptureStarting(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ScreenCaptureStarting(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScreenCaptureStartingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ScreenCaptureStarting(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ScreenCaptureStarting(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3>
    {
        int32_t __stdcall get_IsSuspended(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsSuspended());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall TrySuspendAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<bool>>(this->shim().TrySuspendAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Resume() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Resume();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetVirtualHostNameToFolderMapping(void* hostName, void* folderPath, int32_t accessKind) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetVirtualHostNameToFolderMapping(*reinterpret_cast<hstring const*>(&hostName), *reinterpret_cast<hstring const*>(&folderPath), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HostResourceAccessKind const*>(&accessKind));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ClearVirtualHostNameToFolderMapping(void* hostName) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClearVirtualHostNameToFolderMapping(*reinterpret_cast<hstring const*>(&hostName));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4>
    {
        int32_t __stdcall add_FrameCreated(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().FrameCreated(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2FrameCreatedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_FrameCreated(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FrameCreated(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_DownloadStarting(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().DownloadStarting(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadStartingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_DownloadStarting(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DownloadStarting(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_5> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_5>
    {
        int32_t __stdcall add_ClientCertificateRequested(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ClientCertificateRequested(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificateRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ClientCertificateRequested(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClientCertificateRequested(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_6> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_6>
    {
        int32_t __stdcall OpenTaskManagerWindow() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OpenTaskManagerWindow();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_7> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_7>
    {
        int32_t __stdcall PrintToPdfAsync(void* ResultFilePath, void* printSettings, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<bool>>(this->shim().PrintToPdfAsync(*reinterpret_cast<hstring const*>(&ResultFilePath), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintSettings const*>(&printSettings)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8>
    {
        int32_t __stdcall get_IsMuted(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsMuted());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsMuted(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsMuted(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsDocumentPlayingAudio(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsDocumentPlayingAudio());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_IsMutedChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().IsMutedChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_IsMutedChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsMutedChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_IsDocumentPlayingAudioChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().IsDocumentPlayingAudioChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_IsDocumentPlayingAudioChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsDocumentPlayingAudioChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9>
    {
        int32_t __stdcall get_IsDefaultDownloadDialogOpen(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsDefaultDownloadDialogOpen());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DefaultDownloadDialogCornerAlignment(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DefaultDownloadDialogCornerAlignment>(this->shim().DefaultDownloadDialogCornerAlignment());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_DefaultDownloadDialogCornerAlignment(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DefaultDownloadDialogCornerAlignment(*reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DefaultDownloadDialogCornerAlignment const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DefaultDownloadDialogMargin(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().DefaultDownloadDialogMargin());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_DefaultDownloadDialogMargin(winrt::Windows::Foundation::Point value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DefaultDownloadDialogMargin(*reinterpret_cast<winrt::Windows::Foundation::Point const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_IsDefaultDownloadDialogOpenChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().IsDefaultDownloadDialogOpenChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_IsDefaultDownloadDialogOpenChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsDefaultDownloadDialogOpenChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall OpenDefaultDownloadDialog() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OpenDefaultDownloadDialog();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CloseDefaultDownloadDialog() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CloseDefaultDownloadDialog();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual>
    {
        int32_t __stdcall AddWebResourceRequestedFilter(void* uri, int32_t resourceContext, uint32_t requestSourceKinds) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddWebResourceRequestedFilter(*reinterpret_cast<hstring const*>(&uri), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceContext const*>(&resourceContext), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequestSourceKinds const*>(&requestSourceKinds));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveWebResourceRequestedFilter(void* uri, int32_t resourceContext, uint32_t requestSourceKinds) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveWebResourceRequestedFilter(*reinterpret_cast<hstring const*>(&uri), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceContext const*>(&resourceContext), *reinterpret_cast<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequestSourceKinds const*>(&requestSourceKinds));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual2> : produce_base<D, winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual2>
    {
        int32_t __stdcall PostWebMessageAsJson(void* webMessageAsJson, void* additionalObjects) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PostWebMessageAsJson(*reinterpret_cast<hstring const*>(&webMessageAsJson), *reinterpret_cast<winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Foundation::IInspectable> const*>(&additionalObjects));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Web::WebView2::Core
{
    constexpr auto operator|(CoreWebView2BrowsingDataKinds const left, CoreWebView2BrowsingDataKinds const right) noexcept
    {
        return static_cast<CoreWebView2BrowsingDataKinds>(impl::to_underlying_type(left) | impl::to_underlying_type(right));
    }
    constexpr auto operator|=(CoreWebView2BrowsingDataKinds& left, CoreWebView2BrowsingDataKinds const right) noexcept
    {
        left = left | right;
        return left;
    }
    constexpr auto operator&(CoreWebView2BrowsingDataKinds const left, CoreWebView2BrowsingDataKinds const right) noexcept
    {
        return static_cast<CoreWebView2BrowsingDataKinds>(impl::to_underlying_type(left) & impl::to_underlying_type(right));
    }
    constexpr auto operator&=(CoreWebView2BrowsingDataKinds& left, CoreWebView2BrowsingDataKinds const right) noexcept
    {
        left = left & right;
        return left;
    }
    constexpr auto operator~(CoreWebView2BrowsingDataKinds const value) noexcept
    {
        return static_cast<CoreWebView2BrowsingDataKinds>(~impl::to_underlying_type(value));
    }
    constexpr auto operator^(CoreWebView2BrowsingDataKinds const left, CoreWebView2BrowsingDataKinds const right) noexcept
    {
        return static_cast<CoreWebView2BrowsingDataKinds>(impl::to_underlying_type(left) ^ impl::to_underlying_type(right));
    }
    constexpr auto operator^=(CoreWebView2BrowsingDataKinds& left, CoreWebView2BrowsingDataKinds const right) noexcept
    {
        left = left ^ right;
        return left;
    }
    constexpr auto operator|(CoreWebView2MouseEventVirtualKeys const left, CoreWebView2MouseEventVirtualKeys const right) noexcept
    {
        return static_cast<CoreWebView2MouseEventVirtualKeys>(impl::to_underlying_type(left) | impl::to_underlying_type(right));
    }
    constexpr auto operator|=(CoreWebView2MouseEventVirtualKeys& left, CoreWebView2MouseEventVirtualKeys const right) noexcept
    {
        left = left | right;
        return left;
    }
    constexpr auto operator&(CoreWebView2MouseEventVirtualKeys const left, CoreWebView2MouseEventVirtualKeys const right) noexcept
    {
        return static_cast<CoreWebView2MouseEventVirtualKeys>(impl::to_underlying_type(left) & impl::to_underlying_type(right));
    }
    constexpr auto operator&=(CoreWebView2MouseEventVirtualKeys& left, CoreWebView2MouseEventVirtualKeys const right) noexcept
    {
        left = left & right;
        return left;
    }
    constexpr auto operator~(CoreWebView2MouseEventVirtualKeys const value) noexcept
    {
        return static_cast<CoreWebView2MouseEventVirtualKeys>(~impl::to_underlying_type(value));
    }
    constexpr auto operator^(CoreWebView2MouseEventVirtualKeys const left, CoreWebView2MouseEventVirtualKeys const right) noexcept
    {
        return static_cast<CoreWebView2MouseEventVirtualKeys>(impl::to_underlying_type(left) ^ impl::to_underlying_type(right));
    }
    constexpr auto operator^=(CoreWebView2MouseEventVirtualKeys& left, CoreWebView2MouseEventVirtualKeys const right) noexcept
    {
        left = left ^ right;
        return left;
    }
    constexpr auto operator|(CoreWebView2PdfToolbarItems const left, CoreWebView2PdfToolbarItems const right) noexcept
    {
        return static_cast<CoreWebView2PdfToolbarItems>(impl::to_underlying_type(left) | impl::to_underlying_type(right));
    }
    constexpr auto operator|=(CoreWebView2PdfToolbarItems& left, CoreWebView2PdfToolbarItems const right) noexcept
    {
        left = left | right;
        return left;
    }
    constexpr auto operator&(CoreWebView2PdfToolbarItems const left, CoreWebView2PdfToolbarItems const right) noexcept
    {
        return static_cast<CoreWebView2PdfToolbarItems>(impl::to_underlying_type(left) & impl::to_underlying_type(right));
    }
    constexpr auto operator&=(CoreWebView2PdfToolbarItems& left, CoreWebView2PdfToolbarItems const right) noexcept
    {
        left = left & right;
        return left;
    }
    constexpr auto operator~(CoreWebView2PdfToolbarItems const value) noexcept
    {
        return static_cast<CoreWebView2PdfToolbarItems>(~impl::to_underlying_type(value));
    }
    constexpr auto operator^(CoreWebView2PdfToolbarItems const left, CoreWebView2PdfToolbarItems const right) noexcept
    {
        return static_cast<CoreWebView2PdfToolbarItems>(impl::to_underlying_type(left) ^ impl::to_underlying_type(right));
    }
    constexpr auto operator^=(CoreWebView2PdfToolbarItems& left, CoreWebView2PdfToolbarItems const right) noexcept
    {
        left = left ^ right;
        return left;
    }
    constexpr auto operator|(CoreWebView2ReleaseChannels const left, CoreWebView2ReleaseChannels const right) noexcept
    {
        return static_cast<CoreWebView2ReleaseChannels>(impl::to_underlying_type(left) | impl::to_underlying_type(right));
    }
    constexpr auto operator|=(CoreWebView2ReleaseChannels& left, CoreWebView2ReleaseChannels const right) noexcept
    {
        left = left | right;
        return left;
    }
    constexpr auto operator&(CoreWebView2ReleaseChannels const left, CoreWebView2ReleaseChannels const right) noexcept
    {
        return static_cast<CoreWebView2ReleaseChannels>(impl::to_underlying_type(left) & impl::to_underlying_type(right));
    }
    constexpr auto operator&=(CoreWebView2ReleaseChannels& left, CoreWebView2ReleaseChannels const right) noexcept
    {
        left = left & right;
        return left;
    }
    constexpr auto operator~(CoreWebView2ReleaseChannels const value) noexcept
    {
        return static_cast<CoreWebView2ReleaseChannels>(~impl::to_underlying_type(value));
    }
    constexpr auto operator^(CoreWebView2ReleaseChannels const left, CoreWebView2ReleaseChannels const right) noexcept
    {
        return static_cast<CoreWebView2ReleaseChannels>(impl::to_underlying_type(left) ^ impl::to_underlying_type(right));
    }
    constexpr auto operator^=(CoreWebView2ReleaseChannels& left, CoreWebView2ReleaseChannels const right) noexcept
    {
        left = left ^ right;
        return left;
    }
    constexpr auto operator|(CoreWebView2WebResourceRequestSourceKinds const left, CoreWebView2WebResourceRequestSourceKinds const right) noexcept
    {
        return static_cast<CoreWebView2WebResourceRequestSourceKinds>(impl::to_underlying_type(left) | impl::to_underlying_type(right));
    }
    constexpr auto operator|=(CoreWebView2WebResourceRequestSourceKinds& left, CoreWebView2WebResourceRequestSourceKinds const right) noexcept
    {
        left = left | right;
        return left;
    }
    constexpr auto operator&(CoreWebView2WebResourceRequestSourceKinds const left, CoreWebView2WebResourceRequestSourceKinds const right) noexcept
    {
        return static_cast<CoreWebView2WebResourceRequestSourceKinds>(impl::to_underlying_type(left) & impl::to_underlying_type(right));
    }
    constexpr auto operator&=(CoreWebView2WebResourceRequestSourceKinds& left, CoreWebView2WebResourceRequestSourceKinds const right) noexcept
    {
        left = left & right;
        return left;
    }
    constexpr auto operator~(CoreWebView2WebResourceRequestSourceKinds const value) noexcept
    {
        return static_cast<CoreWebView2WebResourceRequestSourceKinds>(~impl::to_underlying_type(value));
    }
    constexpr auto operator^(CoreWebView2WebResourceRequestSourceKinds const left, CoreWebView2WebResourceRequestSourceKinds const right) noexcept
    {
        return static_cast<CoreWebView2WebResourceRequestSourceKinds>(impl::to_underlying_type(left) ^ impl::to_underlying_type(right));
    }
    constexpr auto operator^=(CoreWebView2WebResourceRequestSourceKinds& left, CoreWebView2WebResourceRequestSourceKinds const right) noexcept
    {
        left = left ^ right;
        return left;
    }
    inline auto CoreWebView2ControllerWindowReference::CreateFromWindowHandle(uint64_t windowHandle)
    {
        return impl::call_factory<CoreWebView2ControllerWindowReference, ICoreWebView2ControllerWindowReferenceStatics>([&](ICoreWebView2ControllerWindowReferenceStatics const& f) { return f.CreateFromWindowHandle(windowHandle); });
    }
    inline auto CoreWebView2ControllerWindowReference::CreateFromCoreWindow(winrt::Windows::UI::Core::CoreWindow const& coreWindow)
    {
        return impl::call_factory<CoreWebView2ControllerWindowReference, ICoreWebView2ControllerWindowReferenceStatics>([&](ICoreWebView2ControllerWindowReferenceStatics const& f) { return f.CreateFromCoreWindow(coreWindow); });
    }
    inline CoreWebView2CustomSchemeRegistration::CoreWebView2CustomSchemeRegistration(param::hstring const& schemeName) :
        CoreWebView2CustomSchemeRegistration(impl::call_factory<CoreWebView2CustomSchemeRegistration, ICoreWebView2CustomSchemeRegistrationFactory>([&](ICoreWebView2CustomSchemeRegistrationFactory const& f) { return f.CreateInstance(schemeName); }))
    {
    }
    inline auto CoreWebView2Environment::CreateAsync()
    {
        return impl::call_factory_cast<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment>(*)(ICoreWebView2EnvironmentStatics const&), CoreWebView2Environment, ICoreWebView2EnvironmentStatics>([](ICoreWebView2EnvironmentStatics const& f) { return f.CreateAsync(); });
    }
    inline auto CoreWebView2Environment::CreateWithOptionsAsync(param::hstring const& browserExecutableFolder, param::hstring const& userDataFolder, winrt::Microsoft::Web::WebView2::Core::CoreWebView2EnvironmentOptions const& options)
    {
        return impl::call_factory<CoreWebView2Environment, ICoreWebView2EnvironmentStatics>([&](ICoreWebView2EnvironmentStatics const& f) { return f.CreateWithOptionsAsync(browserExecutableFolder, userDataFolder, options); });
    }
    inline auto CoreWebView2Environment::GetAvailableBrowserVersionString()
    {
        return impl::call_factory_cast<hstring(*)(ICoreWebView2EnvironmentStatics const&), CoreWebView2Environment, ICoreWebView2EnvironmentStatics>([](ICoreWebView2EnvironmentStatics const& f) { return f.GetAvailableBrowserVersionString(); });
    }
    inline auto CoreWebView2Environment::GetAvailableBrowserVersionString(param::hstring const& browserExecutableFolder)
    {
        return impl::call_factory<CoreWebView2Environment, ICoreWebView2EnvironmentStatics>([&](ICoreWebView2EnvironmentStatics const& f) { return f.GetAvailableBrowserVersionString(browserExecutableFolder); });
    }
    inline auto CoreWebView2Environment::CompareBrowserVersionString(param::hstring const& browserVersionString1, param::hstring const& browserVersionString2)
    {
        return impl::call_factory<CoreWebView2Environment, ICoreWebView2EnvironmentStatics>([&](ICoreWebView2EnvironmentStatics const& f) { return f.CompareBrowserVersionString(browserVersionString1, browserVersionString2); });
    }
    inline auto CoreWebView2Environment::GetAvailableBrowserVersionString(param::hstring const& browserExecutableFolder, winrt::Microsoft::Web::WebView2::Core::CoreWebView2EnvironmentOptions const& options)
    {
        return impl::call_factory<CoreWebView2Environment, ICoreWebView2EnvironmentStatics2>([&](ICoreWebView2EnvironmentStatics2 const& f) { return f.GetAvailableBrowserVersionString(browserExecutableFolder, options); });
    }
    inline CoreWebView2EnvironmentOptions::CoreWebView2EnvironmentOptions() :
        CoreWebView2EnvironmentOptions(impl::call_factory_cast<CoreWebView2EnvironmentOptions(*)(winrt::Windows::Foundation::IActivationFactory const&), CoreWebView2EnvironmentOptions>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<CoreWebView2EnvironmentOptions>(); }))
    {
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Certificate_Manual> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificate_Manual> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile_Manual3> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BasicAuthenticationResponse> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserExtension> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2BrowserProcessExitedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Certificate> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificate> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ClientCertificateRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController3> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController4> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionControllerStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionControllerStatics2_Manual> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContentLoadingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuItem> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContextMenuTarget> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller3> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller4> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerOptions2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReference> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReferenceStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager_Manual> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistrationFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CustomSchemeRegistration_Manual> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DOMContentLoadedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DispatchAdapter> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadOperation> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DownloadStartingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment10> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment11> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment12> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment13> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment14> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment3> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment4> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment5> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment6> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment7> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment8> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment9> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions3> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions4> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions5> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions6> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions7> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions8> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions_Manual> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions_Manual3> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment_Manual> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ExecuteScriptResult_Manual> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2File> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FileSystemHandle> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame3> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame4> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame5> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Frame6> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameCreatedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2FrameInfo2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpHeadersCollectionIterator> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2LaunchingExternalUriSchemeEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs3> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs3> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NonClientRegionChangedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NotificationReceivedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Notification_Manual2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs3> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionSetting> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrintSettings2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrivatePartial> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PrivatePartialController> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessExtendedInfo> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs3> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessInfo> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile3> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile4> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile5> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile6> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile7> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Profile8> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveAsUIShowingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SaveFileSecurityCheckStartingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScreenCaptureStartingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptException> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ServerCertificateErrorDetectedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings3> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings4> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings5> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings6> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings7> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings8> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings9> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings_Manual> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SharedBuffer_Manual> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SourceChangedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseReceivedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_10> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_11> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_12> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_13> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_14> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_15> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_16> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_17> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_18> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_19> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_20> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_21> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_22> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_23> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_24> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_25> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_26> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_27> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_3> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_4> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_5> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_6> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_7> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_8> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_9> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2_Manual2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2AcceleratorKeyPressedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2BasicAuthenticationRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2BasicAuthenticationResponse> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2BrowserExtension> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2BrowserProcessExitedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Certificate> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificate> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ClientCertificateRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CompositionController> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContentLoadingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuItem> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContextMenuTarget> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerOptions> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CookieManager> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CustomSchemeRegistration> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DOMContentLoadedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DevToolsProtocolEventReceivedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DevToolsProtocolEventReceiver> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadOperation> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DownloadStartingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2EnvironmentOptions> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ExecuteScriptResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2File> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FileSystemHandle> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Frame> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FrameCreatedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2FrameInfo> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpHeadersCollectionIterator> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpRequestHeaders> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpResponseHeaders> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2LaunchingExternalUriSchemeEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2MoveFocusRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NewWindowRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NonClientRegionChangedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Notification> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NotificationReceivedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionSetting> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PointerInfo> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PrintSettings> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessExtendedInfo> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessInfo> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Profile> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2SaveAsUIShowingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2SaveFileSecurityCheckStartingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScreenCaptureStartingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScriptDialogOpeningEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScriptException> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ServerCertificateErrorDetectedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Settings> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2SharedBuffer> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2SourceChangedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebMessageReceivedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequest> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponse> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponseReceivedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponseView> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WindowFeatures> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
