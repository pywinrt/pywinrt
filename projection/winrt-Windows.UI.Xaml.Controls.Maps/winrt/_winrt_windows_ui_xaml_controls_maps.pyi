# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.1.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.datatransfer as windows_applicationmodel_datatransfer
import winrt.windows.devices.geolocation as windows_devices_geolocation
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.foundation.numerics as windows_foundation_numerics
import winrt.windows.services.maps as windows_services_maps
import winrt.windows.services.maps.localsearch as windows_services_maps_localsearch
import winrt.windows.storage.streams as windows_storage_streams
import winrt.windows.ui as windows_ui
import winrt.windows.ui.composition as windows_ui_composition
import winrt.windows.ui.core as windows_ui_core
import winrt.windows.ui.input as windows_ui_input
import winrt.windows.ui.text as windows_ui_text
import winrt.windows.ui.xaml as windows_ui_xaml
import winrt.windows.ui.xaml.controls as windows_ui_xaml_controls
import winrt.windows.ui.xaml.controls.primitives as windows_ui_xaml_controls_primitives
import winrt.windows.ui.xaml.data as windows_ui_xaml_data
import winrt.windows.ui.xaml.input as windows_ui_xaml_input
import winrt.windows.ui.xaml.media as windows_ui_xaml_media
import winrt.windows.ui.xaml.media.animation as windows_ui_xaml_media_animation
import winrt.windows.ui.xaml.media.media3d as windows_ui_xaml_media_media3d

from winrt.windows.ui.xaml.controls.maps import MapAnimationKind, MapCameraChangeReason, MapColorScheme, MapElementCollisionBehavior, MapInteractionMode, MapLoadingStatus, MapModel3DShadingOption, MapPanInteractionMode, MapProjection, MapStyle, MapTileAnimationState, MapTileLayer, MapVisibleRegionKind, MapWatermarkMode

Self = typing.TypeVar('Self')

@typing.final
class MapZoomLevelRange:
    min: winrt.system.Double
    max: winrt.system.Double
    def __init__(self, min: winrt.system.Double, max: winrt.system.Double) -> None: ...
    def __eq__(self, other: object, /) -> bool: ...
    def __ne__(self, other: object, /) -> bool: ...

@typing.final
class CustomMapTileDataSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CustomMapTileDataSource: ...
    def __new__(cls: typing.Type[CustomMapTileDataSource]) -> CustomMapTileDataSource: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    def add_bitmap_requested(self, handler: windows_foundation.TypedEventHandler[CustomMapTileDataSource, MapTileBitmapRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_bitmap_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class HttpMapTileDataSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpMapTileDataSource: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpMapTileDataSource]) -> HttpMapTileDataSource: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpMapTileDataSource], uri_format_string: str) -> HttpMapTileDataSource: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    def add_uri_requested(self, handler: windows_foundation.TypedEventHandler[HttpMapTileDataSource, MapTileUriRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_uri_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def uri_format_string(self) -> str: ...
    @uri_format_string.setter
    def uri_format_string(self, value: str) -> None: ...
    @_property
    def allow_caching(self) -> bool: ...
    @allow_caching.setter
    def allow_caching(self, value: bool) -> None: ...
    @_property
    def additional_request_headers(self) -> typing.Optional[windows_foundation_collections.IMap[str, str]]: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class LocalMapTileDataSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LocalMapTileDataSource: ...
    @typing.overload
    def __new__(cls: typing.Type[LocalMapTileDataSource]) -> LocalMapTileDataSource: ...
    @typing.overload
    def __new__(cls: typing.Type[LocalMapTileDataSource], uri_format_string: str) -> LocalMapTileDataSource: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    def add_uri_requested(self, handler: windows_foundation.TypedEventHandler[LocalMapTileDataSource, MapTileUriRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_uri_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def uri_format_string(self) -> str: ...
    @uri_format_string.setter
    def uri_format_string(self, value: str) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapActualCameraChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapActualCameraChangedEventArgs: ...
    def __new__(cls: typing.Type[MapActualCameraChangedEventArgs]) -> MapActualCameraChangedEventArgs: ...
    @_property
    def camera(self) -> typing.Optional[MapCamera]: ...
    @_property
    def change_reason(self) -> MapCameraChangeReason: ...

@typing.final
class MapActualCameraChangingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapActualCameraChangingEventArgs: ...
    def __new__(cls: typing.Type[MapActualCameraChangingEventArgs]) -> MapActualCameraChangingEventArgs: ...
    @_property
    def camera(self) -> typing.Optional[MapCamera]: ...
    @_property
    def change_reason(self) -> MapCameraChangeReason: ...

@typing.final
class MapBillboard_Static(type):
    @_property
    def collision_behavior_desired_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def location_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def normalized_anchor_point_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...

@typing.final
class MapBillboard(winrt.system.Object, metaclass=MapBillboard_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapBillboard: ...
    def __new__(cls: typing.Type[MapBillboard], camera: typing.Optional[MapCamera]) -> MapBillboard: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def normalized_anchor_point(self) -> windows_foundation.Point: ...
    @normalized_anchor_point.setter
    def normalized_anchor_point(self, value: windows_foundation.Point) -> None: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @location.setter
    def location(self, value: typing.Optional[windows_devices_geolocation.Geopoint]) -> None: ...
    @_property
    def image(self) -> typing.Optional[windows_storage_streams.IRandomAccessStreamReference]: ...
    @image.setter
    def image(self, value: typing.Optional[windows_storage_streams.IRandomAccessStreamReference]) -> None: ...
    @_property
    def collision_behavior_desired(self) -> MapElementCollisionBehavior: ...
    @collision_behavior_desired.setter
    def collision_behavior_desired(self, value: MapElementCollisionBehavior) -> None: ...
    @_property
    def reference_camera(self) -> typing.Optional[MapCamera]: ...
    @_property
    def z_index(self) -> winrt.system.Int32: ...
    @z_index.setter
    def z_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> None: ...
    @_property
    def map_tab_index(self) -> winrt.system.Int32: ...
    @map_tab_index.setter
    def map_tab_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def tag(self) -> typing.Optional[winrt.system.Object]: ...
    @tag.setter
    def tag(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def map_style_sheet_entry_state(self) -> str: ...
    @map_style_sheet_entry_state.setter
    def map_style_sheet_entry_state(self, value: str) -> None: ...
    @_property
    def map_style_sheet_entry(self) -> str: ...
    @map_style_sheet_entry.setter
    def map_style_sheet_entry(self, value: str) -> None: ...
    @_property
    def is_enabled(self) -> bool: ...
    @is_enabled.setter
    def is_enabled(self, value: bool) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapCamera(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapCamera: ...
    @typing.overload
    def __new__(cls: typing.Type[MapCamera], location: typing.Optional[windows_devices_geolocation.Geopoint]) -> MapCamera: ...
    @typing.overload
    def __new__(cls: typing.Type[MapCamera], location: typing.Optional[windows_devices_geolocation.Geopoint], heading_in_degrees: winrt.system.Double) -> MapCamera: ...
    @typing.overload
    def __new__(cls: typing.Type[MapCamera], location: typing.Optional[windows_devices_geolocation.Geopoint], heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double) -> MapCamera: ...
    @typing.overload
    def __new__(cls: typing.Type[MapCamera], location: typing.Optional[windows_devices_geolocation.Geopoint], heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, roll_in_degrees: winrt.system.Double, field_of_view_in_degrees: winrt.system.Double) -> MapCamera: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def roll(self) -> winrt.system.Double: ...
    @roll.setter
    def roll(self, value: winrt.system.Double) -> None: ...
    @_property
    def pitch(self) -> winrt.system.Double: ...
    @pitch.setter
    def pitch(self, value: winrt.system.Double) -> None: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @location.setter
    def location(self, value: typing.Optional[windows_devices_geolocation.Geopoint]) -> None: ...
    @_property
    def heading(self) -> winrt.system.Double: ...
    @heading.setter
    def heading(self, value: winrt.system.Double) -> None: ...
    @_property
    def field_of_view(self) -> winrt.system.Double: ...
    @field_of_view.setter
    def field_of_view(self, value: winrt.system.Double) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapContextRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapContextRequestedEventArgs: ...
    def __new__(cls: typing.Type[MapContextRequestedEventArgs]) -> MapContextRequestedEventArgs: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @_property
    def map_elements(self) -> typing.Optional[windows_foundation_collections.IVectorView[MapElement]]: ...
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapControl_Static(type):
    def get_location(cls, element: typing.Optional[windows_ui_xaml.DependencyObject], /) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    def get_normalized_anchor_point(cls, element: typing.Optional[windows_ui_xaml.DependencyObject], /) -> windows_foundation.Point: ...
    def set_location(cls, element: typing.Optional[windows_ui_xaml.DependencyObject], value: typing.Optional[windows_devices_geolocation.Geopoint], /) -> None: ...
    def set_normalized_anchor_point(cls, element: typing.Optional[windows_ui_xaml.DependencyObject], value: windows_foundation.Point, /) -> None: ...
    @_property
    def center_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def zoom_level_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def children_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def color_scheme_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def desired_pitch_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def heading_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def landmarks_visible_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def loading_status_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def location_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def map_elements_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def map_service_token_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def normalized_anchor_point_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def pedestrian_features_visible_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def pitch_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def routes_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def style_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def tile_sources_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def traffic_flow_visible_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def transform_origin_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def watermark_mode_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def business_landmarks_visible_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def is3_d_supported_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def is_streetside_supported_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def pan_interaction_mode_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def rotate_interaction_mode_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def scene_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def tilt_interaction_mode_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def transit_features_visible_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def zoom_interaction_mode_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def business_landmarks_enabled_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def transit_features_enabled_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def map_projection_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def style_sheet_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def view_padding_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def layers_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def region_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def can_tilt_up_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def can_zoom_in_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def can_zoom_out_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def can_tilt_down_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...

@typing.final
class MapControl(winrt.system.Object, metaclass=MapControl_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControl: ...
    def __new__(cls: typing.Type[MapControl]) -> MapControl: ...
    def add_handler(self, routed_event: typing.Optional[windows_ui_xaml.RoutedEvent], handler: typing.Optional[winrt.system.Object], handled_events_too: bool, /) -> None: ...
    def apply_template(self) -> bool: ...
    def arrange(self, final_rect: windows_foundation.Rect, /) -> None: ...
    def cancel_direct_manipulations(self) -> bool: ...
    def capture_pointer(self, value: typing.Optional[windows_ui_xaml_input.Pointer], /) -> bool: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    @typing.overload
    def find_map_elements_at_offset(self, offset: windows_foundation.Point, /) -> typing.Optional[windows_foundation_collections.IVectorView[MapElement]]: ...
    @typing.overload
    def find_map_elements_at_offset(self, offset: windows_foundation.Point, radius: winrt.system.Double, /) -> typing.Optional[windows_foundation_collections.IVectorView[MapElement]]: ...
    def find_name(self, name: str, /) -> typing.Optional[winrt.system.Object]: ...
    def focus(self, value: windows_ui_xaml.FocusState, /) -> bool: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_binding_expression(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[windows_ui_xaml_data.BindingExpression]: ...
    @typing.overload
    def get_location_from_offset(self, offset: windows_foundation.Point, /) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @typing.overload
    def get_location_from_offset(self, offset: windows_foundation.Point, desired_reference_system: windows_devices_geolocation.AltitudeReferenceSystem, /) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    def get_offset_from_location(self, location: typing.Optional[windows_devices_geolocation.Geopoint], /) -> windows_foundation.Point: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_visible_region(self, region: MapVisibleRegionKind, /) -> typing.Optional[windows_devices_geolocation.Geopath]: ...
    def invalidate_arrange(self) -> None: ...
    def invalidate_measure(self) -> None: ...
    def is_location_in_view(self, location: typing.Optional[windows_devices_geolocation.Geopoint], /) -> bool: ...
    def measure(self, available_size: windows_foundation.Size, /) -> None: ...
    def populate_property_info(self, property_name: str, property_info: typing.Optional[windows_ui_composition.AnimationPropertyInfo], /) -> None: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def release_pointer_capture(self, value: typing.Optional[windows_ui_xaml_input.Pointer], /) -> None: ...
    def release_pointer_captures(self) -> None: ...
    def remove_focus_engagement(self) -> None: ...
    def remove_handler(self, routed_event: typing.Optional[windows_ui_xaml.RoutedEvent], handler: typing.Optional[winrt.system.Object], /) -> None: ...
    def set_binding(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], binding: typing.Optional[windows_ui_xaml_data.BindingBase], /) -> None: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def start_animation(self, animation: typing.Optional[windows_ui_composition.ICompositionAnimationBase], /) -> None: ...
    @typing.overload
    def start_bring_into_view(self) -> None: ...
    @typing.overload
    def start_bring_into_view(self, options: typing.Optional[windows_ui_xaml.BringIntoViewOptions], /) -> None: ...
    def start_continuous_pan(self, horizontal_pixels_per_second: winrt.system.Double, vertical_pixels_per_second: winrt.system.Double, /) -> None: ...
    def start_continuous_rotate(self, rate_in_degrees_per_second: winrt.system.Double, /) -> None: ...
    def start_continuous_tilt(self, rate_in_degrees_per_second: winrt.system.Double, /) -> None: ...
    def start_continuous_zoom(self, rate_of_change_per_second: winrt.system.Double, /) -> None: ...
    def start_drag_async(self, pointer_point: typing.Optional[windows_ui_input.PointerPoint], /) -> windows_foundation.IAsyncOperation[windows_applicationmodel_datatransfer.DataPackageOperation]: ...
    def stop_animation(self, animation: typing.Optional[windows_ui_composition.ICompositionAnimationBase], /) -> None: ...
    def stop_continuous_pan(self) -> None: ...
    def stop_continuous_rotate(self) -> None: ...
    def stop_continuous_tilt(self) -> None: ...
    def stop_continuous_zoom(self) -> None: ...
    def transform_to_visual(self, visual: typing.Optional[windows_ui_xaml.UIElement], /) -> typing.Optional[windows_ui_xaml_media.GeneralTransform]: ...
    @typing.overload
    def try_get_location_from_offset(self, offset: windows_foundation.Point, /) -> typing.Tuple[bool, typing.Optional[windows_devices_geolocation.Geopoint]]: ...
    @typing.overload
    def try_get_location_from_offset(self, offset: windows_foundation.Point, desired_reference_system: windows_devices_geolocation.AltitudeReferenceSystem, /) -> typing.Tuple[bool, typing.Optional[windows_devices_geolocation.Geopoint]]: ...
    def try_invoke_keyboard_accelerator(self, args: typing.Optional[windows_ui_xaml_input.ProcessKeyboardAcceleratorEventArgs], /) -> None: ...
    def try_pan_async(self, horizontal_pixels: winrt.system.Double, vertical_pixels: winrt.system.Double, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_pan_to_async(self, location: typing.Optional[windows_devices_geolocation.Geopoint], /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_rotate_async(self, degrees: winrt.system.Double, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_rotate_to_async(self, angle_in_degrees: winrt.system.Double, /) -> windows_foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def try_set_scene_async(self, scene: typing.Optional[MapScene], /) -> windows_foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def try_set_scene_async(self, scene: typing.Optional[MapScene], animation_kind: MapAnimationKind, /) -> windows_foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def try_set_view_async(self, center: typing.Optional[windows_devices_geolocation.Geopoint], /) -> windows_foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def try_set_view_async(self, center: typing.Optional[windows_devices_geolocation.Geopoint], zoom_level: typing.Optional[winrt.system.Double], /) -> windows_foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def try_set_view_async(self, center: typing.Optional[windows_devices_geolocation.Geopoint], zoom_level: typing.Optional[winrt.system.Double], heading: typing.Optional[winrt.system.Double], desired_pitch: typing.Optional[winrt.system.Double], /) -> windows_foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def try_set_view_async(self, center: typing.Optional[windows_devices_geolocation.Geopoint], zoom_level: typing.Optional[winrt.system.Double], heading: typing.Optional[winrt.system.Double], desired_pitch: typing.Optional[winrt.system.Double], animation: MapAnimationKind, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_set_view_bounds_async(self, bounds: typing.Optional[windows_devices_geolocation.GeoboundingBox], margin: typing.Optional[windows_ui_xaml.Thickness], animation: MapAnimationKind, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_tilt_async(self, degrees: winrt.system.Double, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_tilt_to_async(self, angle_in_degrees: winrt.system.Double, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_zoom_in_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_zoom_out_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    def try_zoom_to_async(self, zoom_level: winrt.system.Double, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    def update_layout(self) -> None: ...
    def add_center_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_center_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_heading_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_heading_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_loading_status_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_loading_status_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_map_double_tapped(self, handler: windows_foundation.TypedEventHandler[MapControl, MapInputEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_map_double_tapped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_map_holding(self, handler: windows_foundation.TypedEventHandler[MapControl, MapInputEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_map_holding(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_map_tapped(self, handler: windows_foundation.TypedEventHandler[MapControl, MapInputEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_map_tapped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pitch_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pitch_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_transform_origin_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_transform_origin_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_zoom_level_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_zoom_level_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_actual_camera_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, MapActualCameraChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_actual_camera_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_actual_camera_changing(self, handler: windows_foundation.TypedEventHandler[MapControl, MapActualCameraChangingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_actual_camera_changing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_custom_experience_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, MapCustomExperienceChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_custom_experience_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_map_element_click(self, handler: windows_foundation.TypedEventHandler[MapControl, MapElementClickEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_map_element_click(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_map_element_pointer_entered(self, handler: windows_foundation.TypedEventHandler[MapControl, MapElementPointerEnteredEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_map_element_pointer_entered(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_map_element_pointer_exited(self, handler: windows_foundation.TypedEventHandler[MapControl, MapElementPointerExitedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_map_element_pointer_exited(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_target_camera_changed(self, handler: windows_foundation.TypedEventHandler[MapControl, MapTargetCameraChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_target_camera_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_map_right_tapped(self, handler: windows_foundation.TypedEventHandler[MapControl, MapRightTappedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_map_right_tapped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_map_context_requested(self, handler: windows_foundation.TypedEventHandler[MapControl, MapContextRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_map_context_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_is_enabled_changed(self, handler: typing.Optional[windows_ui_xaml.DependencyPropertyChangedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_is_enabled_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_focus_disengaged(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml_controls.Control, windows_ui_xaml_controls.FocusDisengagedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_focus_disengaged(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_focus_engaged(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml_controls.Control, windows_ui_xaml_controls.FocusEngagedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_focus_engaged(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_layout_updated(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_layout_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_loaded(self, handler: typing.Optional[windows_ui_xaml.RoutedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_loaded(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_size_changed(self, handler: typing.Optional[windows_ui_xaml.SizeChangedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_size_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_unloaded(self, handler: typing.Optional[windows_ui_xaml.RoutedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_unloaded(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_data_context_changed(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml.FrameworkElement, windows_ui_xaml.DataContextChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_data_context_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_loading(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml.FrameworkElement, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_loading(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_actual_theme_changed(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml.FrameworkElement, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_actual_theme_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_effective_viewport_changed(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml.FrameworkElement, windows_ui_xaml.EffectiveViewportChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_effective_viewport_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_double_tapped(self, handler: typing.Optional[windows_ui_xaml_input.DoubleTappedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_double_tapped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drag_enter(self, handler: typing.Optional[windows_ui_xaml.DragEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drag_enter(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drag_leave(self, handler: typing.Optional[windows_ui_xaml.DragEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drag_leave(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drag_over(self, handler: typing.Optional[windows_ui_xaml.DragEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drag_over(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drop(self, handler: typing.Optional[windows_ui_xaml.DragEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drop(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_got_focus(self, handler: typing.Optional[windows_ui_xaml.RoutedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_got_focus(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_holding(self, handler: typing.Optional[windows_ui_xaml_input.HoldingEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_holding(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_key_down(self, handler: typing.Optional[windows_ui_xaml_input.KeyEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_key_down(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_key_up(self, handler: typing.Optional[windows_ui_xaml_input.KeyEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_key_up(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_lost_focus(self, handler: typing.Optional[windows_ui_xaml.RoutedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_lost_focus(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_manipulation_completed(self, handler: typing.Optional[windows_ui_xaml_input.ManipulationCompletedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_manipulation_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_manipulation_delta(self, handler: typing.Optional[windows_ui_xaml_input.ManipulationDeltaEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_manipulation_delta(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_manipulation_inertia_starting(self, handler: typing.Optional[windows_ui_xaml_input.ManipulationInertiaStartingEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_manipulation_inertia_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_manipulation_started(self, handler: typing.Optional[windows_ui_xaml_input.ManipulationStartedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_manipulation_started(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_manipulation_starting(self, handler: typing.Optional[windows_ui_xaml_input.ManipulationStartingEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_manipulation_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_canceled(self, handler: typing.Optional[windows_ui_xaml_input.PointerEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pointer_canceled(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_capture_lost(self, handler: typing.Optional[windows_ui_xaml_input.PointerEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pointer_capture_lost(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_entered(self, handler: typing.Optional[windows_ui_xaml_input.PointerEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pointer_entered(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_exited(self, handler: typing.Optional[windows_ui_xaml_input.PointerEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pointer_exited(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_moved(self, handler: typing.Optional[windows_ui_xaml_input.PointerEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pointer_moved(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_pressed(self, handler: typing.Optional[windows_ui_xaml_input.PointerEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pointer_pressed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_released(self, handler: typing.Optional[windows_ui_xaml_input.PointerEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pointer_released(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_pointer_wheel_changed(self, handler: typing.Optional[windows_ui_xaml_input.PointerEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_pointer_wheel_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_right_tapped(self, handler: typing.Optional[windows_ui_xaml_input.RightTappedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_right_tapped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_tapped(self, handler: typing.Optional[windows_ui_xaml_input.TappedEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_tapped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drag_starting(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml.UIElement, windows_ui_xaml.DragStartingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drag_starting(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_drop_completed(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml.UIElement, windows_ui_xaml.DropCompletedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_drop_completed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_access_key_display_dismissed(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml.UIElement, windows_ui_xaml_input.AccessKeyDisplayDismissedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_access_key_display_dismissed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_access_key_display_requested(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml.UIElement, windows_ui_xaml_input.AccessKeyDisplayRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_access_key_display_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_access_key_invoked(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml.UIElement, windows_ui_xaml_input.AccessKeyInvokedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_access_key_invoked(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_context_canceled(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml.UIElement, windows_ui_xaml.RoutedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_context_canceled(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_context_requested(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml.UIElement, windows_ui_xaml_input.ContextRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_context_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_getting_focus(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml.UIElement, windows_ui_xaml_input.GettingFocusEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_getting_focus(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_losing_focus(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml.UIElement, windows_ui_xaml_input.LosingFocusEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_losing_focus(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_no_focus_candidate_found(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml.UIElement, windows_ui_xaml_input.NoFocusCandidateFoundEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_no_focus_candidate_found(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_character_received(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml.UIElement, windows_ui_xaml_input.CharacterReceivedRoutedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_character_received(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_preview_key_down(self, handler: typing.Optional[windows_ui_xaml_input.KeyEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_preview_key_down(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_preview_key_up(self, handler: typing.Optional[windows_ui_xaml_input.KeyEventHandler], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_preview_key_up(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_process_keyboard_accelerators(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml.UIElement, windows_ui_xaml_input.ProcessKeyboardAcceleratorEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_process_keyboard_accelerators(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_bring_into_view_requested(self, handler: windows_foundation.TypedEventHandler[windows_ui_xaml.UIElement, windows_ui_xaml.BringIntoViewRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_bring_into_view_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def zoom_level(self) -> winrt.system.Double: ...
    @zoom_level.setter
    def zoom_level(self, value: winrt.system.Double) -> None: ...
    @_property
    def watermark_mode(self) -> MapWatermarkMode: ...
    @watermark_mode.setter
    def watermark_mode(self, value: MapWatermarkMode) -> None: ...
    @_property
    def transform_origin(self) -> windows_foundation.Point: ...
    @transform_origin.setter
    def transform_origin(self, value: windows_foundation.Point) -> None: ...
    @_property
    def traffic_flow_visible(self) -> bool: ...
    @traffic_flow_visible.setter
    def traffic_flow_visible(self, value: bool) -> None: ...
    @_property
    def style(self) -> MapStyle: ...
    @style.setter
    def style(self, value: MapStyle) -> None: ...
    @_property
    def pedestrian_features_visible(self) -> bool: ...
    @pedestrian_features_visible.setter
    def pedestrian_features_visible(self, value: bool) -> None: ...
    @_property
    def map_service_token(self) -> str: ...
    @map_service_token.setter
    def map_service_token(self, value: str) -> None: ...
    @_property
    def center(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @center.setter
    def center(self, value: typing.Optional[windows_devices_geolocation.Geopoint]) -> None: ...
    @_property
    def heading(self) -> winrt.system.Double: ...
    @heading.setter
    def heading(self, value: winrt.system.Double) -> None: ...
    @_property
    def desired_pitch(self) -> winrt.system.Double: ...
    @desired_pitch.setter
    def desired_pitch(self, value: winrt.system.Double) -> None: ...
    @_property
    def color_scheme(self) -> MapColorScheme: ...
    @color_scheme.setter
    def color_scheme(self, value: MapColorScheme) -> None: ...
    @_property
    def landmarks_visible(self) -> bool: ...
    @landmarks_visible.setter
    def landmarks_visible(self, value: bool) -> None: ...
    @_property
    def children(self) -> typing.Optional[windows_foundation_collections.IVector[windows_ui_xaml.DependencyObject]]: ...
    @_property
    def loading_status(self) -> MapLoadingStatus: ...
    @_property
    def map_elements(self) -> typing.Optional[windows_foundation_collections.IVector[MapElement]]: ...
    @_property
    def max_zoom_level(self) -> winrt.system.Double: ...
    @_property
    def min_zoom_level(self) -> winrt.system.Double: ...
    @_property
    def pitch(self) -> winrt.system.Double: ...
    @_property
    def routes(self) -> typing.Optional[windows_foundation_collections.IVector[MapRouteView]]: ...
    @_property
    def tile_sources(self) -> typing.Optional[windows_foundation_collections.IVector[MapTileSource]]: ...
    @_property
    def rotate_interaction_mode(self) -> MapInteractionMode: ...
    @rotate_interaction_mode.setter
    def rotate_interaction_mode(self, value: MapInteractionMode) -> None: ...
    @_property
    def zoom_interaction_mode(self) -> MapInteractionMode: ...
    @zoom_interaction_mode.setter
    def zoom_interaction_mode(self, value: MapInteractionMode) -> None: ...
    @_property
    def transit_features_visible(self) -> bool: ...
    @transit_features_visible.setter
    def transit_features_visible(self, value: bool) -> None: ...
    @_property
    def tilt_interaction_mode(self) -> MapInteractionMode: ...
    @tilt_interaction_mode.setter
    def tilt_interaction_mode(self, value: MapInteractionMode) -> None: ...
    @_property
    def scene(self) -> typing.Optional[MapScene]: ...
    @scene.setter
    def scene(self, value: typing.Optional[MapScene]) -> None: ...
    @_property
    def business_landmarks_visible(self) -> bool: ...
    @business_landmarks_visible.setter
    def business_landmarks_visible(self, value: bool) -> None: ...
    @_property
    def pan_interaction_mode(self) -> MapPanInteractionMode: ...
    @pan_interaction_mode.setter
    def pan_interaction_mode(self, value: MapPanInteractionMode) -> None: ...
    @_property
    def custom_experience(self) -> typing.Optional[MapCustomExperience]: ...
    @custom_experience.setter
    def custom_experience(self, value: typing.Optional[MapCustomExperience]) -> None: ...
    @_property
    def actual_camera(self) -> typing.Optional[MapCamera]: ...
    @_property
    def is3_d_supported(self) -> bool: ...
    @_property
    def is_streetside_supported(self) -> bool: ...
    @_property
    def target_camera(self) -> typing.Optional[MapCamera]: ...
    @_property
    def transit_features_enabled(self) -> bool: ...
    @transit_features_enabled.setter
    def transit_features_enabled(self, value: bool) -> None: ...
    @_property
    def business_landmarks_enabled(self) -> bool: ...
    @business_landmarks_enabled.setter
    def business_landmarks_enabled(self, value: bool) -> None: ...
    @_property
    def view_padding(self) -> windows_ui_xaml.Thickness: ...
    @view_padding.setter
    def view_padding(self, value: windows_ui_xaml.Thickness) -> None: ...
    @_property
    def style_sheet(self) -> typing.Optional[MapStyleSheet]: ...
    @style_sheet.setter
    def style_sheet(self, value: typing.Optional[MapStyleSheet]) -> None: ...
    @_property
    def map_projection(self) -> MapProjection: ...
    @map_projection.setter
    def map_projection(self, value: MapProjection) -> None: ...
    @_property
    def layers(self) -> typing.Optional[windows_foundation_collections.IVector[MapLayer]]: ...
    @layers.setter
    def layers(self, value: typing.Optional[windows_foundation_collections.IVector[MapLayer]]) -> None: ...
    @_property
    def region(self) -> str: ...
    @region.setter
    def region(self, value: str) -> None: ...
    @_property
    def can_tilt_down(self) -> bool: ...
    @_property
    def can_tilt_up(self) -> bool: ...
    @_property
    def can_zoom_in(self) -> bool: ...
    @_property
    def can_zoom_out(self) -> bool: ...
    @_property
    def padding(self) -> windows_ui_xaml.Thickness: ...
    @padding.setter
    def padding(self, value: windows_ui_xaml.Thickness) -> None: ...
    @_property
    def is_tab_stop(self) -> bool: ...
    @is_tab_stop.setter
    def is_tab_stop(self, value: bool) -> None: ...
    @_property
    def is_enabled(self) -> bool: ...
    @is_enabled.setter
    def is_enabled(self, value: bool) -> None: ...
    @_property
    def horizontal_content_alignment(self) -> windows_ui_xaml.HorizontalAlignment: ...
    @horizontal_content_alignment.setter
    def horizontal_content_alignment(self, value: windows_ui_xaml.HorizontalAlignment) -> None: ...
    @_property
    def foreground(self) -> typing.Optional[windows_ui_xaml_media.Brush]: ...
    @foreground.setter
    def foreground(self, value: typing.Optional[windows_ui_xaml_media.Brush]) -> None: ...
    @_property
    def font_weight(self) -> windows_ui_text.FontWeight: ...
    @font_weight.setter
    def font_weight(self, value: windows_ui_text.FontWeight) -> None: ...
    @_property
    def font_style(self) -> windows_ui_text.FontStyle: ...
    @font_style.setter
    def font_style(self, value: windows_ui_text.FontStyle) -> None: ...
    @_property
    def font_stretch(self) -> windows_ui_text.FontStretch: ...
    @font_stretch.setter
    def font_stretch(self, value: windows_ui_text.FontStretch) -> None: ...
    @_property
    def font_size(self) -> winrt.system.Double: ...
    @font_size.setter
    def font_size(self, value: winrt.system.Double) -> None: ...
    @_property
    def font_family(self) -> typing.Optional[windows_ui_xaml_media.FontFamily]: ...
    @font_family.setter
    def font_family(self, value: typing.Optional[windows_ui_xaml_media.FontFamily]) -> None: ...
    @_property
    def tab_index(self) -> winrt.system.Int32: ...
    @tab_index.setter
    def tab_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def character_spacing(self) -> winrt.system.Int32: ...
    @character_spacing.setter
    def character_spacing(self, value: winrt.system.Int32) -> None: ...
    @_property
    def border_thickness(self) -> windows_ui_xaml.Thickness: ...
    @border_thickness.setter
    def border_thickness(self, value: windows_ui_xaml.Thickness) -> None: ...
    @_property
    def border_brush(self) -> typing.Optional[windows_ui_xaml_media.Brush]: ...
    @border_brush.setter
    def border_brush(self, value: typing.Optional[windows_ui_xaml_media.Brush]) -> None: ...
    @_property
    def tab_navigation(self) -> windows_ui_xaml_input.KeyboardNavigationMode: ...
    @tab_navigation.setter
    def tab_navigation(self, value: windows_ui_xaml_input.KeyboardNavigationMode) -> None: ...
    @_property
    def background(self) -> typing.Optional[windows_ui_xaml_media.Brush]: ...
    @background.setter
    def background(self, value: typing.Optional[windows_ui_xaml_media.Brush]) -> None: ...
    @_property
    def vertical_content_alignment(self) -> windows_ui_xaml.VerticalAlignment: ...
    @vertical_content_alignment.setter
    def vertical_content_alignment(self, value: windows_ui_xaml.VerticalAlignment) -> None: ...
    @_property
    def template(self) -> typing.Optional[windows_ui_xaml_controls.ControlTemplate]: ...
    @template.setter
    def template(self, value: typing.Optional[windows_ui_xaml_controls.ControlTemplate]) -> None: ...
    @_property
    def focus_state(self) -> windows_ui_xaml.FocusState: ...
    @_property
    def is_text_scale_factor_enabled(self) -> bool: ...
    @is_text_scale_factor_enabled.setter
    def is_text_scale_factor_enabled(self, value: bool) -> None: ...
    @_property
    def use_system_focus_visuals(self) -> bool: ...
    @use_system_focus_visuals.setter
    def use_system_focus_visuals(self, value: bool) -> None: ...
    @_property
    def x_y_focus_up(self) -> typing.Optional[windows_ui_xaml.DependencyObject]: ...
    @x_y_focus_up.setter
    def x_y_focus_up(self, value: typing.Optional[windows_ui_xaml.DependencyObject]) -> None: ...
    @_property
    def x_y_focus_right(self) -> typing.Optional[windows_ui_xaml.DependencyObject]: ...
    @x_y_focus_right.setter
    def x_y_focus_right(self, value: typing.Optional[windows_ui_xaml.DependencyObject]) -> None: ...
    @_property
    def x_y_focus_left(self) -> typing.Optional[windows_ui_xaml.DependencyObject]: ...
    @x_y_focus_left.setter
    def x_y_focus_left(self, value: typing.Optional[windows_ui_xaml.DependencyObject]) -> None: ...
    @_property
    def x_y_focus_down(self) -> typing.Optional[windows_ui_xaml.DependencyObject]: ...
    @x_y_focus_down.setter
    def x_y_focus_down(self, value: typing.Optional[windows_ui_xaml.DependencyObject]) -> None: ...
    @_property
    def requires_pointer(self) -> windows_ui_xaml_controls.RequiresPointer: ...
    @requires_pointer.setter
    def requires_pointer(self, value: windows_ui_xaml_controls.RequiresPointer) -> None: ...
    @_property
    def is_focus_engagement_enabled(self) -> bool: ...
    @is_focus_engagement_enabled.setter
    def is_focus_engagement_enabled(self, value: bool) -> None: ...
    @_property
    def is_focus_engaged(self) -> bool: ...
    @is_focus_engaged.setter
    def is_focus_engaged(self, value: bool) -> None: ...
    @_property
    def element_sound_mode(self) -> windows_ui_xaml.ElementSoundMode: ...
    @element_sound_mode.setter
    def element_sound_mode(self, value: windows_ui_xaml.ElementSoundMode) -> None: ...
    @_property
    def default_style_resource_uri(self) -> typing.Optional[windows_foundation.Uri]: ...
    @default_style_resource_uri.setter
    def default_style_resource_uri(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def corner_radius(self) -> windows_ui_xaml.CornerRadius: ...
    @corner_radius.setter
    def corner_radius(self, value: windows_ui_xaml.CornerRadius) -> None: ...
    @_property
    def background_sizing(self) -> windows_ui_xaml_controls.BackgroundSizing: ...
    @background_sizing.setter
    def background_sizing(self, value: windows_ui_xaml_controls.BackgroundSizing) -> None: ...
    @_property
    def width(self) -> winrt.system.Double: ...
    @width.setter
    def width(self, value: winrt.system.Double) -> None: ...
    @_property
    def vertical_alignment(self) -> windows_ui_xaml.VerticalAlignment: ...
    @vertical_alignment.setter
    def vertical_alignment(self, value: windows_ui_xaml.VerticalAlignment) -> None: ...
    @_property
    def tag(self) -> typing.Optional[winrt.system.Object]: ...
    @tag.setter
    def tag(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def resources(self) -> typing.Optional[windows_ui_xaml.ResourceDictionary]: ...
    @resources.setter
    def resources(self, value: typing.Optional[windows_ui_xaml.ResourceDictionary]) -> None: ...
    @_property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @_property
    def min_width(self) -> winrt.system.Double: ...
    @min_width.setter
    def min_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def min_height(self) -> winrt.system.Double: ...
    @min_height.setter
    def min_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def max_width(self) -> winrt.system.Double: ...
    @max_width.setter
    def max_width(self, value: winrt.system.Double) -> None: ...
    @_property
    def max_height(self) -> winrt.system.Double: ...
    @max_height.setter
    def max_height(self, value: winrt.system.Double) -> None: ...
    @_property
    def margin(self) -> windows_ui_xaml.Thickness: ...
    @margin.setter
    def margin(self, value: windows_ui_xaml.Thickness) -> None: ...
    @_property
    def language(self) -> str: ...
    @language.setter
    def language(self, value: str) -> None: ...
    @_property
    def horizontal_alignment(self) -> windows_ui_xaml.HorizontalAlignment: ...
    @horizontal_alignment.setter
    def horizontal_alignment(self, value: windows_ui_xaml.HorizontalAlignment) -> None: ...
    @_property
    def height(self) -> winrt.system.Double: ...
    @height.setter
    def height(self, value: winrt.system.Double) -> None: ...
    @_property
    def flow_direction(self) -> windows_ui_xaml.FlowDirection: ...
    @flow_direction.setter
    def flow_direction(self, value: windows_ui_xaml.FlowDirection) -> None: ...
    @_property
    def data_context(self) -> typing.Optional[winrt.system.Object]: ...
    @data_context.setter
    def data_context(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def actual_height(self) -> winrt.system.Double: ...
    @_property
    def actual_width(self) -> winrt.system.Double: ...
    @_property
    def base_uri(self) -> typing.Optional[windows_foundation.Uri]: ...
    @_property
    def parent(self) -> typing.Optional[windows_ui_xaml.DependencyObject]: ...
    @_property
    def triggers(self) -> typing.Optional[windows_ui_xaml.TriggerCollection]: ...
    @_property
    def requested_theme(self) -> windows_ui_xaml.ElementTheme: ...
    @requested_theme.setter
    def requested_theme(self, value: windows_ui_xaml.ElementTheme) -> None: ...
    @_property
    def focus_visual_secondary_thickness(self) -> windows_ui_xaml.Thickness: ...
    @focus_visual_secondary_thickness.setter
    def focus_visual_secondary_thickness(self, value: windows_ui_xaml.Thickness) -> None: ...
    @_property
    def focus_visual_secondary_brush(self) -> typing.Optional[windows_ui_xaml_media.Brush]: ...
    @focus_visual_secondary_brush.setter
    def focus_visual_secondary_brush(self, value: typing.Optional[windows_ui_xaml_media.Brush]) -> None: ...
    @_property
    def focus_visual_primary_thickness(self) -> windows_ui_xaml.Thickness: ...
    @focus_visual_primary_thickness.setter
    def focus_visual_primary_thickness(self, value: windows_ui_xaml.Thickness) -> None: ...
    @_property
    def focus_visual_primary_brush(self) -> typing.Optional[windows_ui_xaml_media.Brush]: ...
    @focus_visual_primary_brush.setter
    def focus_visual_primary_brush(self, value: typing.Optional[windows_ui_xaml_media.Brush]) -> None: ...
    @_property
    def focus_visual_margin(self) -> windows_ui_xaml.Thickness: ...
    @focus_visual_margin.setter
    def focus_visual_margin(self, value: windows_ui_xaml.Thickness) -> None: ...
    @_property
    def allow_focus_when_disabled(self) -> bool: ...
    @allow_focus_when_disabled.setter
    def allow_focus_when_disabled(self, value: bool) -> None: ...
    @_property
    def allow_focus_on_interaction(self) -> bool: ...
    @allow_focus_on_interaction.setter
    def allow_focus_on_interaction(self, value: bool) -> None: ...
    @_property
    def actual_theme(self) -> windows_ui_xaml.ElementTheme: ...
    @_property
    def is_loaded(self) -> bool: ...
    @_property
    def transitions(self) -> typing.Optional[windows_ui_xaml_media_animation.TransitionCollection]: ...
    @transitions.setter
    def transitions(self, value: typing.Optional[windows_ui_xaml_media_animation.TransitionCollection]) -> None: ...
    @_property
    def projection(self) -> typing.Optional[windows_ui_xaml_media.Projection]: ...
    @projection.setter
    def projection(self, value: typing.Optional[windows_ui_xaml_media.Projection]) -> None: ...
    @_property
    def render_transform_origin(self) -> windows_foundation.Point: ...
    @render_transform_origin.setter
    def render_transform_origin(self, value: windows_foundation.Point) -> None: ...
    @_property
    def opacity(self) -> winrt.system.Double: ...
    @opacity.setter
    def opacity(self, value: winrt.system.Double) -> None: ...
    @_property
    def manipulation_mode(self) -> windows_ui_xaml_input.ManipulationModes: ...
    @manipulation_mode.setter
    def manipulation_mode(self, value: windows_ui_xaml_input.ManipulationModes) -> None: ...
    @_property
    def is_tap_enabled(self) -> bool: ...
    @is_tap_enabled.setter
    def is_tap_enabled(self, value: bool) -> None: ...
    @_property
    def is_right_tap_enabled(self) -> bool: ...
    @is_right_tap_enabled.setter
    def is_right_tap_enabled(self, value: bool) -> None: ...
    @_property
    def is_holding_enabled(self) -> bool: ...
    @is_holding_enabled.setter
    def is_holding_enabled(self, value: bool) -> None: ...
    @_property
    def is_hit_test_visible(self) -> bool: ...
    @is_hit_test_visible.setter
    def is_hit_test_visible(self, value: bool) -> None: ...
    @_property
    def is_double_tap_enabled(self) -> bool: ...
    @is_double_tap_enabled.setter
    def is_double_tap_enabled(self, value: bool) -> None: ...
    @_property
    def allow_drop(self) -> bool: ...
    @allow_drop.setter
    def allow_drop(self, value: bool) -> None: ...
    @_property
    def clip(self) -> typing.Optional[windows_ui_xaml_media.RectangleGeometry]: ...
    @clip.setter
    def clip(self, value: typing.Optional[windows_ui_xaml_media.RectangleGeometry]) -> None: ...
    @_property
    def cache_mode(self) -> typing.Optional[windows_ui_xaml_media.CacheMode]: ...
    @cache_mode.setter
    def cache_mode(self, value: typing.Optional[windows_ui_xaml_media.CacheMode]) -> None: ...
    @_property
    def use_layout_rounding(self) -> bool: ...
    @use_layout_rounding.setter
    def use_layout_rounding(self, value: bool) -> None: ...
    @_property
    def render_transform(self) -> typing.Optional[windows_ui_xaml_media.Transform]: ...
    @render_transform.setter
    def render_transform(self, value: typing.Optional[windows_ui_xaml_media.Transform]) -> None: ...
    @_property
    def visibility(self) -> windows_ui_xaml.Visibility: ...
    @visibility.setter
    def visibility(self, value: windows_ui_xaml.Visibility) -> None: ...
    @_property
    def desired_size(self) -> windows_foundation.Size: ...
    @_property
    def pointer_captures(self) -> typing.Optional[windows_foundation_collections.IVectorView[windows_ui_xaml_input.Pointer]]: ...
    @_property
    def render_size(self) -> windows_foundation.Size: ...
    @_property
    def xaml_root(self) -> typing.Optional[windows_ui_xaml.XamlRoot]: ...
    @xaml_root.setter
    def xaml_root(self, value: typing.Optional[windows_ui_xaml.XamlRoot]) -> None: ...
    @_property
    def shadow(self) -> typing.Optional[windows_ui_xaml_media.Shadow]: ...
    @shadow.setter
    def shadow(self, value: typing.Optional[windows_ui_xaml_media.Shadow]) -> None: ...
    @_property
    def actual_offset(self) -> windows_foundation_numerics.Vector3: ...
    @_property
    def actual_size(self) -> windows_foundation_numerics.Vector2: ...
    @_property
    def u_i_context(self) -> typing.Optional[windows_ui.UIContext]: ...
    @_property
    def composite_mode(self) -> windows_ui_xaml_media.ElementCompositeMode: ...
    @composite_mode.setter
    def composite_mode(self, value: windows_ui_xaml_media.ElementCompositeMode) -> None: ...
    @_property
    def transform3_d(self) -> typing.Optional[windows_ui_xaml_media_media3d.Transform3D]: ...
    @transform3_d.setter
    def transform3_d(self, value: typing.Optional[windows_ui_xaml_media_media3d.Transform3D]) -> None: ...
    @_property
    def can_drag(self) -> bool: ...
    @can_drag.setter
    def can_drag(self, value: bool) -> None: ...
    @_property
    def is_access_key_scope(self) -> bool: ...
    @is_access_key_scope.setter
    def is_access_key_scope(self, value: bool) -> None: ...
    @_property
    def exit_display_mode_on_access_key_invoked(self) -> bool: ...
    @exit_display_mode_on_access_key_invoked.setter
    def exit_display_mode_on_access_key_invoked(self, value: bool) -> None: ...
    @_property
    def context_flyout(self) -> typing.Optional[windows_ui_xaml_controls_primitives.FlyoutBase]: ...
    @context_flyout.setter
    def context_flyout(self, value: typing.Optional[windows_ui_xaml_controls_primitives.FlyoutBase]) -> None: ...
    @_property
    def access_key_scope_owner(self) -> typing.Optional[windows_ui_xaml.DependencyObject]: ...
    @access_key_scope_owner.setter
    def access_key_scope_owner(self, value: typing.Optional[windows_ui_xaml.DependencyObject]) -> None: ...
    @_property
    def access_key(self) -> str: ...
    @access_key.setter
    def access_key(self, value: str) -> None: ...
    @_property
    def key_tip_horizontal_offset(self) -> winrt.system.Double: ...
    @key_tip_horizontal_offset.setter
    def key_tip_horizontal_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def high_contrast_adjustment(self) -> windows_ui_xaml.ElementHighContrastAdjustment: ...
    @high_contrast_adjustment.setter
    def high_contrast_adjustment(self, value: windows_ui_xaml.ElementHighContrastAdjustment) -> None: ...
    @_property
    def x_y_focus_right_navigation_strategy(self) -> windows_ui_xaml_input.XYFocusNavigationStrategy: ...
    @x_y_focus_right_navigation_strategy.setter
    def x_y_focus_right_navigation_strategy(self, value: windows_ui_xaml_input.XYFocusNavigationStrategy) -> None: ...
    @_property
    def x_y_focus_keyboard_navigation(self) -> windows_ui_xaml_input.XYFocusKeyboardNavigationMode: ...
    @x_y_focus_keyboard_navigation.setter
    def x_y_focus_keyboard_navigation(self, value: windows_ui_xaml_input.XYFocusKeyboardNavigationMode) -> None: ...
    @_property
    def x_y_focus_down_navigation_strategy(self) -> windows_ui_xaml_input.XYFocusNavigationStrategy: ...
    @x_y_focus_down_navigation_strategy.setter
    def x_y_focus_down_navigation_strategy(self, value: windows_ui_xaml_input.XYFocusNavigationStrategy) -> None: ...
    @_property
    def tab_focus_navigation(self) -> windows_ui_xaml_input.KeyboardNavigationMode: ...
    @tab_focus_navigation.setter
    def tab_focus_navigation(self, value: windows_ui_xaml_input.KeyboardNavigationMode) -> None: ...
    @_property
    def key_tip_vertical_offset(self) -> winrt.system.Double: ...
    @key_tip_vertical_offset.setter
    def key_tip_vertical_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def x_y_focus_up_navigation_strategy(self) -> windows_ui_xaml_input.XYFocusNavigationStrategy: ...
    @x_y_focus_up_navigation_strategy.setter
    def x_y_focus_up_navigation_strategy(self, value: windows_ui_xaml_input.XYFocusNavigationStrategy) -> None: ...
    @_property
    def key_tip_placement_mode(self) -> windows_ui_xaml_input.KeyTipPlacementMode: ...
    @key_tip_placement_mode.setter
    def key_tip_placement_mode(self, value: windows_ui_xaml_input.KeyTipPlacementMode) -> None: ...
    @_property
    def x_y_focus_left_navigation_strategy(self) -> windows_ui_xaml_input.XYFocusNavigationStrategy: ...
    @x_y_focus_left_navigation_strategy.setter
    def x_y_focus_left_navigation_strategy(self, value: windows_ui_xaml_input.XYFocusNavigationStrategy) -> None: ...
    @_property
    def lights(self) -> typing.Optional[windows_foundation_collections.IVector[windows_ui_xaml_media.XamlLight]]: ...
    @_property
    def keyboard_accelerators(self) -> typing.Optional[windows_foundation_collections.IVector[windows_ui_xaml_input.KeyboardAccelerator]]: ...
    @_property
    def keyboard_accelerator_placement_target(self) -> typing.Optional[windows_ui_xaml.DependencyObject]: ...
    @keyboard_accelerator_placement_target.setter
    def keyboard_accelerator_placement_target(self, value: typing.Optional[windows_ui_xaml.DependencyObject]) -> None: ...
    @_property
    def keyboard_accelerator_placement_mode(self) -> windows_ui_xaml_input.KeyboardAcceleratorPlacementMode: ...
    @keyboard_accelerator_placement_mode.setter
    def keyboard_accelerator_placement_mode(self, value: windows_ui_xaml_input.KeyboardAcceleratorPlacementMode) -> None: ...
    @_property
    def key_tip_target(self) -> typing.Optional[windows_ui_xaml.DependencyObject]: ...
    @key_tip_target.setter
    def key_tip_target(self, value: typing.Optional[windows_ui_xaml.DependencyObject]) -> None: ...
    @_property
    def translation_transition(self) -> typing.Optional[windows_ui_xaml.Vector3Transition]: ...
    @translation_transition.setter
    def translation_transition(self, value: typing.Optional[windows_ui_xaml.Vector3Transition]) -> None: ...
    @_property
    def opacity_transition(self) -> typing.Optional[windows_ui_xaml.ScalarTransition]: ...
    @opacity_transition.setter
    def opacity_transition(self, value: typing.Optional[windows_ui_xaml.ScalarTransition]) -> None: ...
    @_property
    def transform_matrix(self) -> windows_foundation_numerics.Matrix4x4: ...
    @transform_matrix.setter
    def transform_matrix(self, value: windows_foundation_numerics.Matrix4x4) -> None: ...
    @_property
    def scale_transition(self) -> typing.Optional[windows_ui_xaml.Vector3Transition]: ...
    @scale_transition.setter
    def scale_transition(self, value: typing.Optional[windows_ui_xaml.Vector3Transition]) -> None: ...
    @_property
    def scale(self) -> windows_foundation_numerics.Vector3: ...
    @scale.setter
    def scale(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def rotation_transition(self) -> typing.Optional[windows_ui_xaml.ScalarTransition]: ...
    @rotation_transition.setter
    def rotation_transition(self, value: typing.Optional[windows_ui_xaml.ScalarTransition]) -> None: ...
    @_property
    def rotation_axis(self) -> windows_foundation_numerics.Vector3: ...
    @rotation_axis.setter
    def rotation_axis(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def rotation(self) -> winrt.system.Single: ...
    @rotation.setter
    def rotation(self, value: winrt.system.Single) -> None: ...
    @_property
    def translation(self) -> windows_foundation_numerics.Vector3: ...
    @translation.setter
    def translation(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def center_point(self) -> windows_foundation_numerics.Vector3: ...
    @center_point.setter
    def center_point(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def can_be_scroll_anchor(self) -> bool: ...
    @can_be_scroll_anchor.setter
    def can_be_scroll_anchor(self, value: bool) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapControlBusinessLandmarkClickEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlBusinessLandmarkClickEventArgs: ...
    def __new__(cls: typing.Type[MapControlBusinessLandmarkClickEventArgs]) -> MapControlBusinessLandmarkClickEventArgs: ...
    @_property
    def local_locations(self) -> typing.Optional[windows_foundation_collections.IVectorView[windows_services_maps_localsearch.LocalLocation]]: ...

@typing.final
class MapControlBusinessLandmarkPointerEnteredEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlBusinessLandmarkPointerEnteredEventArgs: ...
    def __new__(cls: typing.Type[MapControlBusinessLandmarkPointerEnteredEventArgs]) -> MapControlBusinessLandmarkPointerEnteredEventArgs: ...
    @_property
    def local_locations(self) -> typing.Optional[windows_foundation_collections.IVectorView[windows_services_maps_localsearch.LocalLocation]]: ...

@typing.final
class MapControlBusinessLandmarkPointerExitedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlBusinessLandmarkPointerExitedEventArgs: ...
    def __new__(cls: typing.Type[MapControlBusinessLandmarkPointerExitedEventArgs]) -> MapControlBusinessLandmarkPointerExitedEventArgs: ...
    @_property
    def local_locations(self) -> typing.Optional[windows_foundation_collections.IVectorView[windows_services_maps_localsearch.LocalLocation]]: ...

@typing.final
class MapControlBusinessLandmarkRightTappedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlBusinessLandmarkRightTappedEventArgs: ...
    def __new__(cls: typing.Type[MapControlBusinessLandmarkRightTappedEventArgs]) -> MapControlBusinessLandmarkRightTappedEventArgs: ...
    @_property
    def local_locations(self) -> typing.Optional[windows_foundation_collections.IVectorView[windows_services_maps_localsearch.LocalLocation]]: ...

@typing.final
class MapControlDataHelper_Static(type):
    def create_map_control(cls, raster_render_mode: bool, /) -> typing.Optional[MapControl]: ...

@typing.final
class MapControlDataHelper(winrt.system.Object, metaclass=MapControlDataHelper_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlDataHelper: ...
    def __new__(cls: typing.Type[MapControlDataHelper], map: typing.Optional[MapControl]) -> MapControlDataHelper: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    def add_business_landmark_click(self, value: windows_foundation.TypedEventHandler[MapControl, MapControlBusinessLandmarkClickEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_business_landmark_click(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_business_landmark_right_tapped(self, value: windows_foundation.TypedEventHandler[MapControl, MapControlBusinessLandmarkRightTappedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_business_landmark_right_tapped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_transit_feature_click(self, value: windows_foundation.TypedEventHandler[MapControl, MapControlTransitFeatureClickEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_transit_feature_click(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_transit_feature_right_tapped(self, value: windows_foundation.TypedEventHandler[MapControl, MapControlTransitFeatureRightTappedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_transit_feature_right_tapped(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_business_landmark_pointer_entered(self, value: windows_foundation.TypedEventHandler[MapControl, MapControlBusinessLandmarkPointerEnteredEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_business_landmark_pointer_entered(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_business_landmark_pointer_exited(self, value: windows_foundation.TypedEventHandler[MapControl, MapControlBusinessLandmarkPointerExitedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_business_landmark_pointer_exited(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_transit_feature_pointer_entered(self, value: windows_foundation.TypedEventHandler[MapControl, MapControlTransitFeaturePointerEnteredEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_transit_feature_pointer_entered(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_transit_feature_pointer_exited(self, value: windows_foundation.TypedEventHandler[MapControl, MapControlTransitFeaturePointerExitedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_transit_feature_pointer_exited(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapControlTransitFeatureClickEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlTransitFeatureClickEventArgs: ...
    def __new__(cls: typing.Type[MapControlTransitFeatureClickEventArgs]) -> MapControlTransitFeatureClickEventArgs: ...
    @_property
    def display_name(self) -> str: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @_property
    def transit_properties(self) -> typing.Optional[windows_foundation_collections.IMapView[str, winrt.system.Object]]: ...

@typing.final
class MapControlTransitFeaturePointerEnteredEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlTransitFeaturePointerEnteredEventArgs: ...
    def __new__(cls: typing.Type[MapControlTransitFeaturePointerEnteredEventArgs]) -> MapControlTransitFeaturePointerEnteredEventArgs: ...
    @_property
    def display_name(self) -> str: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @_property
    def transit_properties(self) -> typing.Optional[windows_foundation_collections.IMapView[str, winrt.system.Object]]: ...

@typing.final
class MapControlTransitFeaturePointerExitedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlTransitFeaturePointerExitedEventArgs: ...
    def __new__(cls: typing.Type[MapControlTransitFeaturePointerExitedEventArgs]) -> MapControlTransitFeaturePointerExitedEventArgs: ...
    @_property
    def display_name(self) -> str: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @_property
    def transit_properties(self) -> typing.Optional[windows_foundation_collections.IMapView[str, winrt.system.Object]]: ...

@typing.final
class MapControlTransitFeatureRightTappedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapControlTransitFeatureRightTappedEventArgs: ...
    def __new__(cls: typing.Type[MapControlTransitFeatureRightTappedEventArgs]) -> MapControlTransitFeatureRightTappedEventArgs: ...
    @_property
    def display_name(self) -> str: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @_property
    def transit_properties(self) -> typing.Optional[windows_foundation_collections.IMapView[str, winrt.system.Object]]: ...

@typing.final
class MapCustomExperience(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapCustomExperience: ...
    def __new__(cls: typing.Type[MapCustomExperience]) -> MapCustomExperience: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapCustomExperienceChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapCustomExperienceChangedEventArgs: ...
    def __new__(cls: typing.Type[MapCustomExperienceChangedEventArgs]) -> MapCustomExperienceChangedEventArgs: ...

@typing.final
class MapElement_Static(type):
    @_property
    def visible_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def z_index_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def map_tab_index_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def map_style_sheet_entry_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def map_style_sheet_entry_state_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def tag_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def is_enabled_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...

@typing.final
class MapElement(winrt.system.Object, metaclass=MapElement_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElement: ...
    def __new__(cls: typing.Type[MapElement]) -> MapElement: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def z_index(self) -> winrt.system.Int32: ...
    @z_index.setter
    def z_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> None: ...
    @_property
    def map_tab_index(self) -> winrt.system.Int32: ...
    @map_tab_index.setter
    def map_tab_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def tag(self) -> typing.Optional[winrt.system.Object]: ...
    @tag.setter
    def tag(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def map_style_sheet_entry_state(self) -> str: ...
    @map_style_sheet_entry_state.setter
    def map_style_sheet_entry_state(self, value: str) -> None: ...
    @_property
    def map_style_sheet_entry(self) -> str: ...
    @map_style_sheet_entry.setter
    def map_style_sheet_entry(self, value: str) -> None: ...
    @_property
    def is_enabled(self) -> bool: ...
    @is_enabled.setter
    def is_enabled(self, value: bool) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapElement3D_Static(type):
    @_property
    def heading_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def location_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def pitch_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def roll_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def scale_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...

@typing.final
class MapElement3D(winrt.system.Object, metaclass=MapElement3D_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElement3D: ...
    def __new__(cls: typing.Type[MapElement3D]) -> MapElement3D: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def scale(self) -> windows_foundation_numerics.Vector3: ...
    @scale.setter
    def scale(self, value: windows_foundation_numerics.Vector3) -> None: ...
    @_property
    def roll(self) -> winrt.system.Double: ...
    @roll.setter
    def roll(self, value: winrt.system.Double) -> None: ...
    @_property
    def pitch(self) -> winrt.system.Double: ...
    @pitch.setter
    def pitch(self, value: winrt.system.Double) -> None: ...
    @_property
    def model(self) -> typing.Optional[MapModel3D]: ...
    @model.setter
    def model(self, value: typing.Optional[MapModel3D]) -> None: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @location.setter
    def location(self, value: typing.Optional[windows_devices_geolocation.Geopoint]) -> None: ...
    @_property
    def heading(self) -> winrt.system.Double: ...
    @heading.setter
    def heading(self, value: winrt.system.Double) -> None: ...
    @_property
    def z_index(self) -> winrt.system.Int32: ...
    @z_index.setter
    def z_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> None: ...
    @_property
    def map_tab_index(self) -> winrt.system.Int32: ...
    @map_tab_index.setter
    def map_tab_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def tag(self) -> typing.Optional[winrt.system.Object]: ...
    @tag.setter
    def tag(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def map_style_sheet_entry_state(self) -> str: ...
    @map_style_sheet_entry_state.setter
    def map_style_sheet_entry_state(self, value: str) -> None: ...
    @_property
    def map_style_sheet_entry(self) -> str: ...
    @map_style_sheet_entry.setter
    def map_style_sheet_entry(self, value: str) -> None: ...
    @_property
    def is_enabled(self) -> bool: ...
    @is_enabled.setter
    def is_enabled(self, value: bool) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapElementClickEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementClickEventArgs: ...
    def __new__(cls: typing.Type[MapElementClickEventArgs]) -> MapElementClickEventArgs: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @_property
    def map_elements(self) -> typing.Optional[windows_foundation_collections.IVector[MapElement]]: ...
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapElementPointerEnteredEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementPointerEnteredEventArgs: ...
    def __new__(cls: typing.Type[MapElementPointerEnteredEventArgs]) -> MapElementPointerEnteredEventArgs: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @_property
    def map_element(self) -> typing.Optional[MapElement]: ...
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapElementPointerExitedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementPointerExitedEventArgs: ...
    def __new__(cls: typing.Type[MapElementPointerExitedEventArgs]) -> MapElementPointerExitedEventArgs: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @_property
    def map_element(self) -> typing.Optional[MapElement]: ...
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapElementsLayer_Static(type):
    @_property
    def map_elements_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...

@typing.final
class MapElementsLayer(winrt.system.Object, metaclass=MapElementsLayer_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementsLayer: ...
    def __new__(cls: typing.Type[MapElementsLayer]) -> MapElementsLayer: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    def add_map_context_requested(self, handler: windows_foundation.TypedEventHandler[MapElementsLayer, MapElementsLayerContextRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_map_context_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_map_element_click(self, handler: windows_foundation.TypedEventHandler[MapElementsLayer, MapElementsLayerClickEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_map_element_click(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_map_element_pointer_entered(self, handler: windows_foundation.TypedEventHandler[MapElementsLayer, MapElementsLayerPointerEnteredEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_map_element_pointer_entered(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_map_element_pointer_exited(self, handler: windows_foundation.TypedEventHandler[MapElementsLayer, MapElementsLayerPointerExitedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_map_element_pointer_exited(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def map_elements(self) -> typing.Optional[windows_foundation_collections.IVector[MapElement]]: ...
    @map_elements.setter
    def map_elements(self, value: typing.Optional[windows_foundation_collections.IVector[MapElement]]) -> None: ...
    @_property
    def z_index(self) -> winrt.system.Int32: ...
    @z_index.setter
    def z_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> None: ...
    @_property
    def map_tab_index(self) -> winrt.system.Int32: ...
    @map_tab_index.setter
    def map_tab_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapElementsLayerClickEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementsLayerClickEventArgs: ...
    def __new__(cls: typing.Type[MapElementsLayerClickEventArgs]) -> MapElementsLayerClickEventArgs: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @_property
    def map_elements(self) -> typing.Optional[windows_foundation_collections.IVector[MapElement]]: ...
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapElementsLayerContextRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementsLayerContextRequestedEventArgs: ...
    def __new__(cls: typing.Type[MapElementsLayerContextRequestedEventArgs]) -> MapElementsLayerContextRequestedEventArgs: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @_property
    def map_elements(self) -> typing.Optional[windows_foundation_collections.IVectorView[MapElement]]: ...
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapElementsLayerPointerEnteredEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementsLayerPointerEnteredEventArgs: ...
    def __new__(cls: typing.Type[MapElementsLayerPointerEnteredEventArgs]) -> MapElementsLayerPointerEnteredEventArgs: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @_property
    def map_element(self) -> typing.Optional[MapElement]: ...
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapElementsLayerPointerExitedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapElementsLayerPointerExitedEventArgs: ...
    def __new__(cls: typing.Type[MapElementsLayerPointerExitedEventArgs]) -> MapElementsLayerPointerExitedEventArgs: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @_property
    def map_element(self) -> typing.Optional[MapElement]: ...
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapIcon_Static(type):
    @_property
    def location_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def normalized_anchor_point_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def title_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def collision_behavior_desired_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...

@typing.final
class MapIcon(winrt.system.Object, metaclass=MapIcon_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapIcon: ...
    def __new__(cls: typing.Type[MapIcon]) -> MapIcon: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> None: ...
    @_property
    def normalized_anchor_point(self) -> windows_foundation.Point: ...
    @normalized_anchor_point.setter
    def normalized_anchor_point(self, value: windows_foundation.Point) -> None: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @location.setter
    def location(self, value: typing.Optional[windows_devices_geolocation.Geopoint]) -> None: ...
    @_property
    def image(self) -> typing.Optional[windows_storage_streams.IRandomAccessStreamReference]: ...
    @image.setter
    def image(self, value: typing.Optional[windows_storage_streams.IRandomAccessStreamReference]) -> None: ...
    @_property
    def collision_behavior_desired(self) -> MapElementCollisionBehavior: ...
    @collision_behavior_desired.setter
    def collision_behavior_desired(self, value: MapElementCollisionBehavior) -> None: ...
    @_property
    def z_index(self) -> winrt.system.Int32: ...
    @z_index.setter
    def z_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> None: ...
    @_property
    def map_tab_index(self) -> winrt.system.Int32: ...
    @map_tab_index.setter
    def map_tab_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def tag(self) -> typing.Optional[winrt.system.Object]: ...
    @tag.setter
    def tag(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def map_style_sheet_entry_state(self) -> str: ...
    @map_style_sheet_entry_state.setter
    def map_style_sheet_entry_state(self, value: str) -> None: ...
    @_property
    def map_style_sheet_entry(self) -> str: ...
    @map_style_sheet_entry.setter
    def map_style_sheet_entry(self, value: str) -> None: ...
    @_property
    def is_enabled(self) -> bool: ...
    @is_enabled.setter
    def is_enabled(self, value: bool) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapInputEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapInputEventArgs: ...
    def __new__(cls: typing.Type[MapInputEventArgs]) -> MapInputEventArgs: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @_property
    def position(self) -> windows_foundation.Point: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapItemsControl_Static(type):
    @_property
    def item_template_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def items_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def items_source_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...

@typing.final
class MapItemsControl(winrt.system.Object, metaclass=MapItemsControl_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapItemsControl: ...
    def __new__(cls: typing.Type[MapItemsControl]) -> MapItemsControl: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def items_source(self) -> typing.Optional[winrt.system.Object]: ...
    @items_source.setter
    def items_source(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def item_template(self) -> typing.Optional[windows_ui_xaml.DataTemplate]: ...
    @item_template.setter
    def item_template(self, value: typing.Optional[windows_ui_xaml.DataTemplate]) -> None: ...
    @_property
    def items(self) -> typing.Optional[windows_foundation_collections.IVector[windows_ui_xaml.DependencyObject]]: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapLayer_Static(type):
    @_property
    def map_tab_index_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def visible_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def z_index_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...

@typing.final
class MapLayer(winrt.system.Object, metaclass=MapLayer_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapLayer: ...
    def __new__(cls: typing.Type[MapLayer]) -> MapLayer: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def z_index(self) -> winrt.system.Int32: ...
    @z_index.setter
    def z_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> None: ...
    @_property
    def map_tab_index(self) -> winrt.system.Int32: ...
    @map_tab_index.setter
    def map_tab_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapModel3D_Static(type):
    @typing.overload
    def create_from3_m_f_async(cls, source: typing.Optional[windows_storage_streams.IRandomAccessStreamReference], /) -> windows_foundation.IAsyncOperation[MapModel3D]: ...
    @typing.overload
    def create_from3_m_f_async(cls, source: typing.Optional[windows_storage_streams.IRandomAccessStreamReference], shading_option: MapModel3DShadingOption, /) -> windows_foundation.IAsyncOperation[MapModel3D]: ...

@typing.final
class MapModel3D(winrt.system.Object, metaclass=MapModel3D_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapModel3D: ...
    def __new__(cls: typing.Type[MapModel3D]) -> MapModel3D: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapPolygon_Static(type):
    @_property
    def path_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def stroke_dashed_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def stroke_thickness_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...

@typing.final
class MapPolygon(winrt.system.Object, metaclass=MapPolygon_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapPolygon: ...
    def __new__(cls: typing.Type[MapPolygon]) -> MapPolygon: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def stroke_thickness(self) -> winrt.system.Double: ...
    @stroke_thickness.setter
    def stroke_thickness(self, value: winrt.system.Double) -> None: ...
    @_property
    def stroke_dashed(self) -> bool: ...
    @stroke_dashed.setter
    def stroke_dashed(self, value: bool) -> None: ...
    @_property
    def stroke_color(self) -> windows_ui.Color: ...
    @stroke_color.setter
    def stroke_color(self, value: windows_ui.Color) -> None: ...
    @_property
    def path(self) -> typing.Optional[windows_devices_geolocation.Geopath]: ...
    @path.setter
    def path(self, value: typing.Optional[windows_devices_geolocation.Geopath]) -> None: ...
    @_property
    def fill_color(self) -> windows_ui.Color: ...
    @fill_color.setter
    def fill_color(self, value: windows_ui.Color) -> None: ...
    @_property
    def paths(self) -> typing.Optional[windows_foundation_collections.IVector[windows_devices_geolocation.Geopath]]: ...
    @_property
    def z_index(self) -> winrt.system.Int32: ...
    @z_index.setter
    def z_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> None: ...
    @_property
    def map_tab_index(self) -> winrt.system.Int32: ...
    @map_tab_index.setter
    def map_tab_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def tag(self) -> typing.Optional[winrt.system.Object]: ...
    @tag.setter
    def tag(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def map_style_sheet_entry_state(self) -> str: ...
    @map_style_sheet_entry_state.setter
    def map_style_sheet_entry_state(self, value: str) -> None: ...
    @_property
    def map_style_sheet_entry(self) -> str: ...
    @map_style_sheet_entry.setter
    def map_style_sheet_entry(self, value: str) -> None: ...
    @_property
    def is_enabled(self) -> bool: ...
    @is_enabled.setter
    def is_enabled(self, value: bool) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapPolyline_Static(type):
    @_property
    def path_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def stroke_dashed_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...

@typing.final
class MapPolyline(winrt.system.Object, metaclass=MapPolyline_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapPolyline: ...
    def __new__(cls: typing.Type[MapPolyline]) -> MapPolyline: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def stroke_thickness(self) -> winrt.system.Double: ...
    @stroke_thickness.setter
    def stroke_thickness(self, value: winrt.system.Double) -> None: ...
    @_property
    def stroke_dashed(self) -> bool: ...
    @stroke_dashed.setter
    def stroke_dashed(self, value: bool) -> None: ...
    @_property
    def stroke_color(self) -> windows_ui.Color: ...
    @stroke_color.setter
    def stroke_color(self, value: windows_ui.Color) -> None: ...
    @_property
    def path(self) -> typing.Optional[windows_devices_geolocation.Geopath]: ...
    @path.setter
    def path(self, value: typing.Optional[windows_devices_geolocation.Geopath]) -> None: ...
    @_property
    def z_index(self) -> winrt.system.Int32: ...
    @z_index.setter
    def z_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> None: ...
    @_property
    def map_tab_index(self) -> winrt.system.Int32: ...
    @map_tab_index.setter
    def map_tab_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def tag(self) -> typing.Optional[winrt.system.Object]: ...
    @tag.setter
    def tag(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def map_style_sheet_entry_state(self) -> str: ...
    @map_style_sheet_entry_state.setter
    def map_style_sheet_entry_state(self, value: str) -> None: ...
    @_property
    def map_style_sheet_entry(self) -> str: ...
    @map_style_sheet_entry.setter
    def map_style_sheet_entry(self, value: str) -> None: ...
    @_property
    def is_enabled(self) -> bool: ...
    @is_enabled.setter
    def is_enabled(self, value: bool) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapRightTappedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapRightTappedEventArgs: ...
    def __new__(cls: typing.Type[MapRightTappedEventArgs]) -> MapRightTappedEventArgs: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @_property
    def position(self) -> windows_foundation.Point: ...

@typing.final
class MapRouteView(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapRouteView: ...
    def __new__(cls: typing.Type[MapRouteView], route: typing.Optional[windows_services_maps.MapRoute]) -> MapRouteView: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def route_color(self) -> windows_ui.Color: ...
    @route_color.setter
    def route_color(self, value: windows_ui.Color) -> None: ...
    @_property
    def outline_color(self) -> windows_ui.Color: ...
    @outline_color.setter
    def outline_color(self, value: windows_ui.Color) -> None: ...
    @_property
    def route(self) -> typing.Optional[windows_services_maps.MapRoute]: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapScene_Static(type):
    @typing.overload
    def create_from_bounding_box(cls, bounds: typing.Optional[windows_devices_geolocation.GeoboundingBox], /) -> typing.Optional[MapScene]: ...
    @typing.overload
    def create_from_bounding_box(cls, bounds: typing.Optional[windows_devices_geolocation.GeoboundingBox], heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, /) -> typing.Optional[MapScene]: ...
    def create_from_camera(cls, camera: typing.Optional[MapCamera], /) -> typing.Optional[MapScene]: ...
    @typing.overload
    def create_from_location(cls, location: typing.Optional[windows_devices_geolocation.Geopoint], /) -> typing.Optional[MapScene]: ...
    @typing.overload
    def create_from_location(cls, location: typing.Optional[windows_devices_geolocation.Geopoint], heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, /) -> typing.Optional[MapScene]: ...
    @typing.overload
    def create_from_location_and_radius(cls, location: typing.Optional[windows_devices_geolocation.Geopoint], radius_in_meters: winrt.system.Double, /) -> typing.Optional[MapScene]: ...
    @typing.overload
    def create_from_location_and_radius(cls, location: typing.Optional[windows_devices_geolocation.Geopoint], radius_in_meters: winrt.system.Double, heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, /) -> typing.Optional[MapScene]: ...
    @typing.overload
    def create_from_locations(cls, locations: typing.Iterable[windows_devices_geolocation.Geopoint], /) -> typing.Optional[MapScene]: ...
    @typing.overload
    def create_from_locations(cls, locations: typing.Iterable[windows_devices_geolocation.Geopoint], heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, /) -> typing.Optional[MapScene]: ...

@typing.final
class MapScene(winrt.system.Object, metaclass=MapScene_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapScene: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    def add_target_camera_changed(self, handler: windows_foundation.TypedEventHandler[MapScene, MapTargetCameraChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_target_camera_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def target_camera(self) -> typing.Optional[MapCamera]: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapStyleSheet_Static(type):
    def aerial(cls) -> typing.Optional[MapStyleSheet]: ...
    def aerial_with_overlay(cls) -> typing.Optional[MapStyleSheet]: ...
    def combine(cls, style_sheets: typing.Iterable[MapStyleSheet], /) -> typing.Optional[MapStyleSheet]: ...
    def parse_from_json(cls, style_as_json: str, /) -> typing.Optional[MapStyleSheet]: ...
    def road_dark(cls) -> typing.Optional[MapStyleSheet]: ...
    def road_high_contrast_dark(cls) -> typing.Optional[MapStyleSheet]: ...
    def road_high_contrast_light(cls) -> typing.Optional[MapStyleSheet]: ...
    def road_light(cls) -> typing.Optional[MapStyleSheet]: ...
    def try_parse_from_json(cls, style_as_json: str, /) -> typing.Tuple[bool, typing.Optional[MapStyleSheet]]: ...

@typing.final
class MapStyleSheet(winrt.system.Object, metaclass=MapStyleSheet_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapStyleSheet: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapStyleSheetEntries_Static(type):
    @_property
    def admin_district(cls) -> str: ...
    @_property
    def admin_district_capital(cls) -> str: ...
    @_property
    def airport(cls) -> str: ...
    @_property
    def area(cls) -> str: ...
    @_property
    def arterial_road(cls) -> str: ...
    @_property
    def building(cls) -> str: ...
    @_property
    def business(cls) -> str: ...
    @_property
    def capital(cls) -> str: ...
    @_property
    def cemetery(cls) -> str: ...
    @_property
    def continent(cls) -> str: ...
    @_property
    def controlled_access_highway(cls) -> str: ...
    @_property
    def country_region(cls) -> str: ...
    @_property
    def country_region_capital(cls) -> str: ...
    @_property
    def district(cls) -> str: ...
    @_property
    def driving_route(cls) -> str: ...
    @_property
    def education(cls) -> str: ...
    @_property
    def education_building(cls) -> str: ...
    @_property
    def food_point(cls) -> str: ...
    @_property
    def forest(cls) -> str: ...
    @_property
    def golf_course(cls) -> str: ...
    @_property
    def high_speed_ramp(cls) -> str: ...
    @_property
    def highway(cls) -> str: ...
    @_property
    def indigenous_peoples_reserve(cls) -> str: ...
    @_property
    def island(cls) -> str: ...
    @_property
    def major_road(cls) -> str: ...
    @_property
    def medical(cls) -> str: ...
    @_property
    def medical_building(cls) -> str: ...
    @_property
    def military(cls) -> str: ...
    @_property
    def natural_point(cls) -> str: ...
    @_property
    def nautical(cls) -> str: ...
    @_property
    def neighborhood(cls) -> str: ...
    @_property
    def park(cls) -> str: ...
    @_property
    def peak(cls) -> str: ...
    @_property
    def playing_field(cls) -> str: ...
    @_property
    def point(cls) -> str: ...
    @_property
    def point_of_interest(cls) -> str: ...
    @_property
    def political(cls) -> str: ...
    @_property
    def populated_place(cls) -> str: ...
    @_property
    def railway(cls) -> str: ...
    @_property
    def ramp(cls) -> str: ...
    @_property
    def reserve(cls) -> str: ...
    @_property
    def river(cls) -> str: ...
    @_property
    def road(cls) -> str: ...
    @_property
    def road_exit(cls) -> str: ...
    @_property
    def road_shield(cls) -> str: ...
    @_property
    def route_line(cls) -> str: ...
    @_property
    def runway(cls) -> str: ...
    @_property
    def sand(cls) -> str: ...
    @_property
    def shopping_center(cls) -> str: ...
    @_property
    def stadium(cls) -> str: ...
    @_property
    def street(cls) -> str: ...
    @_property
    def structure(cls) -> str: ...
    @_property
    def toll_road(cls) -> str: ...
    @_property
    def trail(cls) -> str: ...
    @_property
    def transit(cls) -> str: ...
    @_property
    def transit_building(cls) -> str: ...
    @_property
    def transportation(cls) -> str: ...
    @_property
    def unpaved_street(cls) -> str: ...
    @_property
    def vegetation(cls) -> str: ...
    @_property
    def volcanic_peak(cls) -> str: ...
    @_property
    def walking_route(cls) -> str: ...
    @_property
    def water(cls) -> str: ...
    @_property
    def water_point(cls) -> str: ...
    @_property
    def water_route(cls) -> str: ...

@typing.final
class MapStyleSheetEntries(winrt.system.Object, metaclass=MapStyleSheetEntries_Static):
    pass

@typing.final
class MapStyleSheetEntryStates_Static(type):
    @_property
    def disabled(cls) -> str: ...
    @_property
    def hover(cls) -> str: ...
    @_property
    def selected(cls) -> str: ...

@typing.final
class MapStyleSheetEntryStates(winrt.system.Object, metaclass=MapStyleSheetEntryStates_Static):
    pass

@typing.final
class MapTargetCameraChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTargetCameraChangedEventArgs: ...
    def __new__(cls: typing.Type[MapTargetCameraChangedEventArgs]) -> MapTargetCameraChangedEventArgs: ...
    @_property
    def camera(self) -> typing.Optional[MapCamera]: ...
    @_property
    def change_reason(self) -> MapCameraChangeReason: ...

@typing.final
class MapTileBitmapRequest(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTileBitmapRequest: ...
    def __new__(cls: typing.Type[MapTileBitmapRequest]) -> MapTileBitmapRequest: ...
    def get_deferral(self) -> typing.Optional[MapTileBitmapRequestDeferral]: ...
    @_property
    def pixel_data(self) -> typing.Optional[windows_storage_streams.IRandomAccessStreamReference]: ...
    @pixel_data.setter
    def pixel_data(self, value: typing.Optional[windows_storage_streams.IRandomAccessStreamReference]) -> None: ...

@typing.final
class MapTileBitmapRequestDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTileBitmapRequestDeferral: ...
    def __new__(cls: typing.Type[MapTileBitmapRequestDeferral]) -> MapTileBitmapRequestDeferral: ...
    def complete(self) -> None: ...

@typing.final
class MapTileBitmapRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTileBitmapRequestedEventArgs: ...
    def __new__(cls: typing.Type[MapTileBitmapRequestedEventArgs]) -> MapTileBitmapRequestedEventArgs: ...
    @_property
    def request(self) -> typing.Optional[MapTileBitmapRequest]: ...
    @_property
    def x(self) -> winrt.system.Int32: ...
    @_property
    def y(self) -> winrt.system.Int32: ...
    @_property
    def zoom_level(self) -> winrt.system.Int32: ...
    @_property
    def frame_index(self) -> winrt.system.Int32: ...

@typing.final
class MapTileDataSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTileDataSource: ...
    def __new__(cls: typing.Type[MapTileDataSource]) -> MapTileDataSource: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapTileSource_Static(type):
    @_property
    def allow_overstretch_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def bounds_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def data_source_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def is_fading_enabled_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def is_retry_enabled_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def is_transparency_enabled_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def layer_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def tile_pixel_size_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def visible_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def z_index_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def zoom_level_range_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def animation_state_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def auto_play_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def frame_count_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...
    @_property
    def frame_duration_property(cls) -> typing.Optional[windows_ui_xaml.DependencyProperty]: ...

@typing.final
class MapTileSource(winrt.system.Object, metaclass=MapTileSource_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTileSource: ...
    @typing.overload
    def __new__(cls: typing.Type[MapTileSource]) -> MapTileSource: ...
    @typing.overload
    def __new__(cls: typing.Type[MapTileSource], data_source: typing.Optional[MapTileDataSource]) -> MapTileSource: ...
    @typing.overload
    def __new__(cls: typing.Type[MapTileSource], data_source: typing.Optional[MapTileDataSource], zoom_level_range: MapZoomLevelRange) -> MapTileSource: ...
    @typing.overload
    def __new__(cls: typing.Type[MapTileSource], data_source: typing.Optional[MapTileDataSource], zoom_level_range: MapZoomLevelRange, bounds: typing.Optional[windows_devices_geolocation.GeoboundingBox]) -> MapTileSource: ...
    @typing.overload
    def __new__(cls: typing.Type[MapTileSource], data_source: typing.Optional[MapTileDataSource], zoom_level_range: MapZoomLevelRange, bounds: typing.Optional[windows_devices_geolocation.GeoboundingBox], tile_size_in_pixels: winrt.system.Int32) -> MapTileSource: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def pause(self) -> None: ...
    def play(self) -> None: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def stop(self) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def zoom_level_range(self) -> MapZoomLevelRange: ...
    @zoom_level_range.setter
    def zoom_level_range(self, value: MapZoomLevelRange) -> None: ...
    @_property
    def z_index(self) -> winrt.system.Int32: ...
    @z_index.setter
    def z_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> None: ...
    @_property
    def tile_pixel_size(self) -> winrt.system.Int32: ...
    @tile_pixel_size.setter
    def tile_pixel_size(self, value: winrt.system.Int32) -> None: ...
    @_property
    def layer(self) -> MapTileLayer: ...
    @layer.setter
    def layer(self, value: MapTileLayer) -> None: ...
    @_property
    def is_transparency_enabled(self) -> bool: ...
    @is_transparency_enabled.setter
    def is_transparency_enabled(self, value: bool) -> None: ...
    @_property
    def is_retry_enabled(self) -> bool: ...
    @is_retry_enabled.setter
    def is_retry_enabled(self, value: bool) -> None: ...
    @_property
    def is_fading_enabled(self) -> bool: ...
    @is_fading_enabled.setter
    def is_fading_enabled(self, value: bool) -> None: ...
    @_property
    def data_source(self) -> typing.Optional[MapTileDataSource]: ...
    @data_source.setter
    def data_source(self, value: typing.Optional[MapTileDataSource]) -> None: ...
    @_property
    def bounds(self) -> typing.Optional[windows_devices_geolocation.GeoboundingBox]: ...
    @bounds.setter
    def bounds(self, value: typing.Optional[windows_devices_geolocation.GeoboundingBox]) -> None: ...
    @_property
    def allow_overstretch(self) -> bool: ...
    @allow_overstretch.setter
    def allow_overstretch(self, value: bool) -> None: ...
    @_property
    def frame_duration(self) -> datetime.timedelta: ...
    @frame_duration.setter
    def frame_duration(self, value: datetime.timedelta) -> None: ...
    @_property
    def frame_count(self) -> winrt.system.Int32: ...
    @frame_count.setter
    def frame_count(self, value: winrt.system.Int32) -> None: ...
    @_property
    def auto_play(self) -> bool: ...
    @auto_play.setter
    def auto_play(self, value: bool) -> None: ...
    @_property
    def animation_state(self) -> MapTileAnimationState: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class MapTileUriRequest(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTileUriRequest: ...
    def __new__(cls: typing.Type[MapTileUriRequest]) -> MapTileUriRequest: ...
    def get_deferral(self) -> typing.Optional[MapTileUriRequestDeferral]: ...
    @_property
    def uri(self) -> typing.Optional[windows_foundation.Uri]: ...
    @uri.setter
    def uri(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...

@typing.final
class MapTileUriRequestDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTileUriRequestDeferral: ...
    def __new__(cls: typing.Type[MapTileUriRequestDeferral]) -> MapTileUriRequestDeferral: ...
    def complete(self) -> None: ...

@typing.final
class MapTileUriRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MapTileUriRequestedEventArgs: ...
    def __new__(cls: typing.Type[MapTileUriRequestedEventArgs]) -> MapTileUriRequestedEventArgs: ...
    @_property
    def request(self) -> typing.Optional[MapTileUriRequest]: ...
    @_property
    def x(self) -> winrt.system.Int32: ...
    @_property
    def y(self) -> winrt.system.Int32: ...
    @_property
    def zoom_level(self) -> winrt.system.Int32: ...
    @_property
    def frame_index(self) -> winrt.system.Int32: ...

@typing.final
class StreetsideExperience(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StreetsideExperience: ...
    @typing.overload
    def __new__(cls: typing.Type[StreetsideExperience], panorama: typing.Optional[StreetsidePanorama]) -> StreetsideExperience: ...
    @typing.overload
    def __new__(cls: typing.Type[StreetsideExperience], panorama: typing.Optional[StreetsidePanorama], heading_in_degrees: winrt.system.Double, pitch_in_degrees: winrt.system.Double, field_of_view_in_degrees: winrt.system.Double) -> StreetsideExperience: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def zoom_buttons_visible(self) -> bool: ...
    @zoom_buttons_visible.setter
    def zoom_buttons_visible(self, value: bool) -> None: ...
    @_property
    def street_labels_visible(self) -> bool: ...
    @street_labels_visible.setter
    def street_labels_visible(self, value: bool) -> None: ...
    @_property
    def overview_map_visible(self) -> bool: ...
    @overview_map_visible.setter
    def overview_map_visible(self, value: bool) -> None: ...
    @_property
    def exit_button_visible(self) -> bool: ...
    @exit_button_visible.setter
    def exit_button_visible(self, value: bool) -> None: ...
    @_property
    def cursor_visible(self) -> bool: ...
    @cursor_visible.setter
    def cursor_visible(self, value: bool) -> None: ...
    @_property
    def address_text_visible(self) -> bool: ...
    @address_text_visible.setter
    def address_text_visible(self, value: bool) -> None: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

@typing.final
class StreetsidePanorama_Static(type):
    @typing.overload
    def find_nearby_async(cls, location: typing.Optional[windows_devices_geolocation.Geopoint], /) -> windows_foundation.IAsyncOperation[StreetsidePanorama]: ...
    @typing.overload
    def find_nearby_async(cls, location: typing.Optional[windows_devices_geolocation.Geopoint], radius_in_meters: winrt.system.Double, /) -> windows_foundation.IAsyncOperation[StreetsidePanorama]: ...

@typing.final
class StreetsidePanorama(winrt.system.Object, metaclass=StreetsidePanorama_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StreetsidePanorama: ...
    def clear_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> None: ...
    def get_animation_base_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def get_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def read_local_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], /) -> typing.Optional[winrt.system.Object]: ...
    def register_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], callback: typing.Optional[windows_ui_xaml.DependencyPropertyChangedCallback], /) -> winrt.system.Int64: ...
    def set_value(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], value: typing.Optional[winrt.system.Object], /) -> None: ...
    def unregister_property_changed_callback(self, dp: typing.Optional[windows_ui_xaml.DependencyProperty], token: winrt.system.Int64, /) -> None: ...
    @_property
    def location(self) -> typing.Optional[windows_devices_geolocation.Geopoint]: ...
    @_property
    def dispatcher(self) -> typing.Optional[windows_ui_core.CoreDispatcher]: ...

