# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.system

from winrt.windows.globalization import DayOfWeek, LanguageLayoutDirection

Self = typing.TypeVar('Self')

@typing.final
class ApplicationLanguages_Static(type):
    def get_languages_for_user(cls, user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @_property
    def primary_language_override(cls) -> str: ...
    @primary_language_override.setter
    def primary_language_override(cls, value: str) -> None: ...
    @_property
    def languages(cls) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @_property
    def manifest_languages(cls) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...

@typing.final
class ApplicationLanguages(winrt.system.Object, metaclass=ApplicationLanguages_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ApplicationLanguages: ...

@typing.final
class Calendar(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Calendar: ...
    @typing.overload
    def __new__(cls: typing.Type[Calendar], languages: typing.Iterable[str], calendar: str, clock: str, time_zone_id: str) -> Calendar:...
    @typing.overload
    def __new__(cls: typing.Type[Calendar], languages: typing.Iterable[str]) -> Calendar:...
    @typing.overload
    def __new__(cls: typing.Type[Calendar], languages: typing.Iterable[str], calendar: str, clock: str) -> Calendar:...
    @typing.overload
    def __new__(cls: typing.Type[Calendar]) -> Calendar:...
    def add_days(self, days: winrt.system.Int32, /) -> None: ...
    def add_eras(self, eras: winrt.system.Int32, /) -> None: ...
    def add_hours(self, hours: winrt.system.Int32, /) -> None: ...
    def add_minutes(self, minutes: winrt.system.Int32, /) -> None: ...
    def add_months(self, months: winrt.system.Int32, /) -> None: ...
    def add_nanoseconds(self, nanoseconds: winrt.system.Int32, /) -> None: ...
    def add_periods(self, periods: winrt.system.Int32, /) -> None: ...
    def add_seconds(self, seconds: winrt.system.Int32, /) -> None: ...
    def add_weeks(self, weeks: winrt.system.Int32, /) -> None: ...
    def add_years(self, years: winrt.system.Int32, /) -> None: ...
    def change_calendar_system(self, value: str, /) -> None: ...
    def change_clock(self, value: str, /) -> None: ...
    def change_time_zone(self, time_zone_id: str, /) -> None: ...
    def clone(self) -> typing.Optional[Calendar]: ...
    def compare(self, other: typing.Optional[Calendar], /) -> winrt.system.Int32: ...
    def compare_date_time(self, other: datetime.datetime, /) -> winrt.system.Int32: ...
    def copy_to(self, other: typing.Optional[Calendar], /) -> None: ...
    def day_as_padded_string(self, min_digits: winrt.system.Int32, /) -> str: ...
    def day_as_string(self) -> str: ...
    @typing.overload
    def day_of_week_as_solo_string(self) -> str: ...
    @typing.overload
    def day_of_week_as_solo_string(self, ideal_length: winrt.system.Int32, /) -> str: ...
    @typing.overload
    def day_of_week_as_string(self) -> str: ...
    @typing.overload
    def day_of_week_as_string(self, ideal_length: winrt.system.Int32, /) -> str: ...
    @typing.overload
    def era_as_string(self) -> str: ...
    @typing.overload
    def era_as_string(self, ideal_length: winrt.system.Int32, /) -> str: ...
    def get_calendar_system(self) -> str: ...
    def get_clock(self) -> str: ...
    def get_date_time(self) -> datetime.datetime: ...
    def get_time_zone(self) -> str: ...
    def hour_as_padded_string(self, min_digits: winrt.system.Int32, /) -> str: ...
    def hour_as_string(self) -> str: ...
    def minute_as_padded_string(self, min_digits: winrt.system.Int32, /) -> str: ...
    def minute_as_string(self) -> str: ...
    def month_as_numeric_string(self) -> str: ...
    def month_as_padded_numeric_string(self, min_digits: winrt.system.Int32, /) -> str: ...
    @typing.overload
    def month_as_solo_string(self) -> str: ...
    @typing.overload
    def month_as_solo_string(self, ideal_length: winrt.system.Int32, /) -> str: ...
    @typing.overload
    def month_as_string(self) -> str: ...
    @typing.overload
    def month_as_string(self, ideal_length: winrt.system.Int32, /) -> str: ...
    def nanosecond_as_padded_string(self, min_digits: winrt.system.Int32, /) -> str: ...
    def nanosecond_as_string(self) -> str: ...
    @typing.overload
    def period_as_string(self) -> str: ...
    @typing.overload
    def period_as_string(self, ideal_length: winrt.system.Int32, /) -> str: ...
    def second_as_padded_string(self, min_digits: winrt.system.Int32, /) -> str: ...
    def second_as_string(self) -> str: ...
    def set_date_time(self, value: datetime.datetime, /) -> None: ...
    def set_to_max(self) -> None: ...
    def set_to_min(self) -> None: ...
    def set_to_now(self) -> None: ...
    @typing.overload
    def time_zone_as_string(self) -> str: ...
    @typing.overload
    def time_zone_as_string(self, ideal_length: winrt.system.Int32, /) -> str: ...
    def year_as_padded_string(self, min_digits: winrt.system.Int32, /) -> str: ...
    def year_as_string(self) -> str: ...
    def year_as_truncated_string(self, remaining_digits: winrt.system.Int32, /) -> str: ...
    @_property
    def year(self) -> winrt.system.Int32: ...
    @year.setter
    def year(self, value: winrt.system.Int32) -> None: ...
    @_property
    def second(self) -> winrt.system.Int32: ...
    @second.setter
    def second(self, value: winrt.system.Int32) -> None: ...
    @_property
    def period(self) -> winrt.system.Int32: ...
    @period.setter
    def period(self, value: winrt.system.Int32) -> None: ...
    @_property
    def nanosecond(self) -> winrt.system.Int32: ...
    @nanosecond.setter
    def nanosecond(self, value: winrt.system.Int32) -> None: ...
    @_property
    def month(self) -> winrt.system.Int32: ...
    @month.setter
    def month(self, value: winrt.system.Int32) -> None: ...
    @_property
    def minute(self) -> winrt.system.Int32: ...
    @minute.setter
    def minute(self, value: winrt.system.Int32) -> None: ...
    @_property
    def numeral_system(self) -> str: ...
    @numeral_system.setter
    def numeral_system(self, value: str) -> None: ...
    @_property
    def era(self) -> winrt.system.Int32: ...
    @era.setter
    def era(self, value: winrt.system.Int32) -> None: ...
    @_property
    def hour(self) -> winrt.system.Int32: ...
    @hour.setter
    def hour(self, value: winrt.system.Int32) -> None: ...
    @_property
    def day(self) -> winrt.system.Int32: ...
    @day.setter
    def day(self, value: winrt.system.Int32) -> None: ...
    @_property
    def first_second_in_this_minute(self) -> winrt.system.Int32: ...
    @_property
    def first_year_in_this_era(self) -> winrt.system.Int32: ...
    @_property
    def is_daylight_saving_time(self) -> bool: ...
    @_property
    def languages(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @_property
    def last_day_in_this_month(self) -> winrt.system.Int32: ...
    @_property
    def last_era(self) -> winrt.system.Int32: ...
    @_property
    def last_hour_in_this_period(self) -> winrt.system.Int32: ...
    @_property
    def last_minute_in_this_hour(self) -> winrt.system.Int32: ...
    @_property
    def last_month_in_this_year(self) -> winrt.system.Int32: ...
    @_property
    def last_second_in_this_minute(self) -> winrt.system.Int32: ...
    @_property
    def last_year_in_this_era(self) -> winrt.system.Int32: ...
    @_property
    def day_of_week(self) -> DayOfWeek: ...
    @_property
    def first_day_in_this_month(self) -> winrt.system.Int32: ...
    @_property
    def last_period_in_this_day(self) -> winrt.system.Int32: ...
    @_property
    def first_era(self) -> winrt.system.Int32: ...
    @_property
    def number_of_days_in_this_month(self) -> winrt.system.Int32: ...
    @_property
    def number_of_eras(self) -> winrt.system.Int32: ...
    @_property
    def number_of_hours_in_this_period(self) -> winrt.system.Int32: ...
    @_property
    def number_of_minutes_in_this_hour(self) -> winrt.system.Int32: ...
    @_property
    def first_hour_in_this_period(self) -> winrt.system.Int32: ...
    @_property
    def number_of_months_in_this_year(self) -> winrt.system.Int32: ...
    @_property
    def number_of_periods_in_this_day(self) -> winrt.system.Int32: ...
    @_property
    def number_of_seconds_in_this_minute(self) -> winrt.system.Int32: ...
    @_property
    def number_of_years_in_this_era(self) -> winrt.system.Int32: ...
    @_property
    def first_minute_in_this_hour(self) -> winrt.system.Int32: ...
    @_property
    def resolved_language(self) -> str: ...
    @_property
    def first_month_in_this_year(self) -> winrt.system.Int32: ...
    @_property
    def first_period_in_this_day(self) -> winrt.system.Int32: ...

@typing.final
class CalendarIdentifiers_Static(type):
    @_property
    def julian(cls) -> str: ...
    @_property
    def gregorian(cls) -> str: ...
    @_property
    def hebrew(cls) -> str: ...
    @_property
    def hijri(cls) -> str: ...
    @_property
    def japanese(cls) -> str: ...
    @_property
    def korean(cls) -> str: ...
    @_property
    def taiwan(cls) -> str: ...
    @_property
    def thai(cls) -> str: ...
    @_property
    def um_al_qura(cls) -> str: ...
    @_property
    def persian(cls) -> str: ...
    @_property
    def chinese_lunar(cls) -> str: ...
    @_property
    def vietnamese_lunar(cls) -> str: ...
    @_property
    def taiwan_lunar(cls) -> str: ...
    @_property
    def korean_lunar(cls) -> str: ...
    @_property
    def japanese_lunar(cls) -> str: ...

@typing.final
class CalendarIdentifiers(winrt.system.Object, metaclass=CalendarIdentifiers_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CalendarIdentifiers: ...

@typing.final
class ClockIdentifiers_Static(type):
    @_property
    def twelve_hour(cls) -> str: ...
    @_property
    def twenty_four_hour(cls) -> str: ...

@typing.final
class ClockIdentifiers(winrt.system.Object, metaclass=ClockIdentifiers_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ClockIdentifiers: ...

@typing.final
class CurrencyAmount(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CurrencyAmount: ...
    def __new__(cls: typing.Type[CurrencyAmount], amount: str, currency: str) -> CurrencyAmount:...
    @_property
    def amount(self) -> str: ...
    @_property
    def currency(self) -> str: ...

@typing.final
class CurrencyIdentifiers_Static(type):
    @_property
    def h_n_l(cls) -> str: ...
    @_property
    def a_e_d(cls) -> str: ...
    @_property
    def a_f_n(cls) -> str: ...
    @_property
    def a_l_l(cls) -> str: ...
    @_property
    def a_m_d(cls) -> str: ...
    @_property
    def a_n_g(cls) -> str: ...
    @_property
    def a_o_a(cls) -> str: ...
    @_property
    def a_r_s(cls) -> str: ...
    @_property
    def a_u_d(cls) -> str: ...
    @_property
    def a_w_g(cls) -> str: ...
    @_property
    def a_z_n(cls) -> str: ...
    @_property
    def b_a_m(cls) -> str: ...
    @_property
    def b_b_d(cls) -> str: ...
    @_property
    def b_d_t(cls) -> str: ...
    @_property
    def b_g_n(cls) -> str: ...
    @_property
    def b_h_d(cls) -> str: ...
    @_property
    def b_i_f(cls) -> str: ...
    @_property
    def b_m_d(cls) -> str: ...
    @_property
    def b_n_d(cls) -> str: ...
    @_property
    def b_o_b(cls) -> str: ...
    @_property
    def b_r_l(cls) -> str: ...
    @_property
    def b_s_d(cls) -> str: ...
    @_property
    def b_t_n(cls) -> str: ...
    @_property
    def b_w_p(cls) -> str: ...
    @_property
    def b_y_r(cls) -> str: ...
    @_property
    def b_z_d(cls) -> str: ...
    @_property
    def c_a_d(cls) -> str: ...
    @_property
    def c_d_f(cls) -> str: ...
    @_property
    def c_h_f(cls) -> str: ...
    @_property
    def c_l_p(cls) -> str: ...
    @_property
    def c_n_y(cls) -> str: ...
    @_property
    def c_o_p(cls) -> str: ...
    @_property
    def c_r_c(cls) -> str: ...
    @_property
    def c_u_p(cls) -> str: ...
    @_property
    def c_v_e(cls) -> str: ...
    @_property
    def c_z_k(cls) -> str: ...
    @_property
    def d_j_f(cls) -> str: ...
    @_property
    def d_k_k(cls) -> str: ...
    @_property
    def d_o_p(cls) -> str: ...
    @_property
    def d_z_d(cls) -> str: ...
    @_property
    def e_g_p(cls) -> str: ...
    @_property
    def e_r_n(cls) -> str: ...
    @_property
    def e_t_b(cls) -> str: ...
    @_property
    def e_u_r(cls) -> str: ...
    @_property
    def f_j_d(cls) -> str: ...
    @_property
    def f_k_p(cls) -> str: ...
    @_property
    def g_b_p(cls) -> str: ...
    @_property
    def g_e_l(cls) -> str: ...
    @_property
    def g_h_s(cls) -> str: ...
    @_property
    def g_i_p(cls) -> str: ...
    @_property
    def g_m_d(cls) -> str: ...
    @_property
    def g_n_f(cls) -> str: ...
    @_property
    def g_t_q(cls) -> str: ...
    @_property
    def g_y_d(cls) -> str: ...
    @_property
    def h_k_d(cls) -> str: ...
    @_property
    def r_o_n(cls) -> str: ...
    @_property
    def h_r_k(cls) -> str: ...
    @_property
    def h_t_g(cls) -> str: ...
    @_property
    def h_u_f(cls) -> str: ...
    @_property
    def i_d_r(cls) -> str: ...
    @_property
    def i_l_s(cls) -> str: ...
    @_property
    def i_n_r(cls) -> str: ...
    @_property
    def i_q_d(cls) -> str: ...
    @_property
    def i_r_r(cls) -> str: ...
    @_property
    def i_s_k(cls) -> str: ...
    @_property
    def j_m_d(cls) -> str: ...
    @_property
    def j_o_d(cls) -> str: ...
    @_property
    def j_p_y(cls) -> str: ...
    @_property
    def k_e_s(cls) -> str: ...
    @_property
    def k_g_s(cls) -> str: ...
    @_property
    def k_h_r(cls) -> str: ...
    @_property
    def k_m_f(cls) -> str: ...
    @_property
    def k_p_w(cls) -> str: ...
    @_property
    def k_r_w(cls) -> str: ...
    @_property
    def k_w_d(cls) -> str: ...
    @_property
    def k_y_d(cls) -> str: ...
    @_property
    def k_z_t(cls) -> str: ...
    @_property
    def l_a_k(cls) -> str: ...
    @_property
    def l_b_p(cls) -> str: ...
    @_property
    def l_k_r(cls) -> str: ...
    @_property
    def l_r_d(cls) -> str: ...
    @_property
    def l_s_l(cls) -> str: ...
    @_property
    def l_t_l(cls) -> str: ...
    @_property
    def l_v_l(cls) -> str: ...
    @_property
    def l_y_d(cls) -> str: ...
    @_property
    def m_a_d(cls) -> str: ...
    @_property
    def m_d_l(cls) -> str: ...
    @_property
    def m_g_a(cls) -> str: ...
    @_property
    def m_k_d(cls) -> str: ...
    @_property
    def m_m_k(cls) -> str: ...
    @_property
    def m_n_t(cls) -> str: ...
    @_property
    def m_o_p(cls) -> str: ...
    @_property
    def m_r_o(cls) -> str: ...
    @_property
    def m_u_r(cls) -> str: ...
    @_property
    def m_v_r(cls) -> str: ...
    @_property
    def m_w_k(cls) -> str: ...
    @_property
    def m_x_n(cls) -> str: ...
    @_property
    def m_y_r(cls) -> str: ...
    @_property
    def m_z_n(cls) -> str: ...
    @_property
    def n_a_d(cls) -> str: ...
    @_property
    def n_g_n(cls) -> str: ...
    @_property
    def n_i_o(cls) -> str: ...
    @_property
    def n_o_k(cls) -> str: ...
    @_property
    def n_p_r(cls) -> str: ...
    @_property
    def n_z_d(cls) -> str: ...
    @_property
    def o_m_r(cls) -> str: ...
    @_property
    def p_a_b(cls) -> str: ...
    @_property
    def p_e_n(cls) -> str: ...
    @_property
    def p_g_k(cls) -> str: ...
    @_property
    def p_h_p(cls) -> str: ...
    @_property
    def p_k_r(cls) -> str: ...
    @_property
    def p_l_n(cls) -> str: ...
    @_property
    def p_y_g(cls) -> str: ...
    @_property
    def q_a_r(cls) -> str: ...
    @_property
    def r_s_d(cls) -> str: ...
    @_property
    def r_u_b(cls) -> str: ...
    @_property
    def r_w_f(cls) -> str: ...
    @_property
    def s_a_r(cls) -> str: ...
    @_property
    def s_b_d(cls) -> str: ...
    @_property
    def s_c_r(cls) -> str: ...
    @_property
    def s_d_g(cls) -> str: ...
    @_property
    def s_e_k(cls) -> str: ...
    @_property
    def s_g_d(cls) -> str: ...
    @_property
    def s_h_p(cls) -> str: ...
    @_property
    def s_l_l(cls) -> str: ...
    @_property
    def s_o_s(cls) -> str: ...
    @_property
    def s_r_d(cls) -> str: ...
    @_property
    def s_t_d(cls) -> str: ...
    @_property
    def s_y_p(cls) -> str: ...
    @_property
    def s_z_l(cls) -> str: ...
    @_property
    def t_h_b(cls) -> str: ...
    @_property
    def t_j_s(cls) -> str: ...
    @_property
    def t_m_t(cls) -> str: ...
    @_property
    def t_n_d(cls) -> str: ...
    @_property
    def t_o_p(cls) -> str: ...
    @_property
    def t_r_y(cls) -> str: ...
    @_property
    def t_t_d(cls) -> str: ...
    @_property
    def t_w_d(cls) -> str: ...
    @_property
    def t_z_s(cls) -> str: ...
    @_property
    def u_a_h(cls) -> str: ...
    @_property
    def u_g_x(cls) -> str: ...
    @_property
    def u_s_d(cls) -> str: ...
    @_property
    def u_y_u(cls) -> str: ...
    @_property
    def u_z_s(cls) -> str: ...
    @_property
    def v_e_f(cls) -> str: ...
    @_property
    def v_n_d(cls) -> str: ...
    @_property
    def v_u_v(cls) -> str: ...
    @_property
    def w_s_t(cls) -> str: ...
    @_property
    def x_a_f(cls) -> str: ...
    @_property
    def x_c_d(cls) -> str: ...
    @_property
    def x_o_f(cls) -> str: ...
    @_property
    def x_p_f(cls) -> str: ...
    @_property
    def x_x_x(cls) -> str: ...
    @_property
    def y_e_r(cls) -> str: ...
    @_property
    def z_a_r(cls) -> str: ...
    @_property
    def z_m_w(cls) -> str: ...
    @_property
    def z_w_l(cls) -> str: ...
    @_property
    def b_y_n(cls) -> str: ...
    @_property
    def s_s_p(cls) -> str: ...
    @_property
    def s_t_n(cls) -> str: ...
    @_property
    def v_e_s(cls) -> str: ...
    @_property
    def m_r_u(cls) -> str: ...

@typing.final
class CurrencyIdentifiers(winrt.system.Object, metaclass=CurrencyIdentifiers_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CurrencyIdentifiers: ...

@typing.final
class GeographicRegion_Static(type):
    def is_supported(cls, geographic_region_code: str, /) -> bool: ...

@typing.final
class GeographicRegion(winrt.system.Object, metaclass=GeographicRegion_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GeographicRegion: ...
    @typing.overload
    def __new__(cls: typing.Type[GeographicRegion], geographic_region_code: str) -> GeographicRegion:...
    @typing.overload
    def __new__(cls: typing.Type[GeographicRegion]) -> GeographicRegion:...
    @_property
    def code(self) -> str: ...
    @_property
    def code_three_digit(self) -> str: ...
    @_property
    def code_three_letter(self) -> str: ...
    @_property
    def code_two_letter(self) -> str: ...
    @_property
    def currencies_in_use(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @_property
    def display_name(self) -> str: ...
    @_property
    def native_name(self) -> str: ...

@typing.final
class JapanesePhoneme(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> JapanesePhoneme: ...
    @_property
    def display_text(self) -> str: ...
    @_property
    def is_phrase_start(self) -> bool: ...
    @_property
    def yomi_text(self) -> str: ...

@typing.final
class JapanesePhoneticAnalyzer_Static(type):
    @typing.overload
    def get_words(cls, input: str, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[JapanesePhoneme]]: ...
    @typing.overload
    def get_words(cls, input: str, mono_ruby: bool, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[JapanesePhoneme]]: ...

@typing.final
class JapanesePhoneticAnalyzer(winrt.system.Object, metaclass=JapanesePhoneticAnalyzer_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> JapanesePhoneticAnalyzer: ...

@typing.final
class Language_Static(type):
    def get_mui_compatible_language_list_from_language_tags(cls, language_tags: typing.Iterable[str], /) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...
    def is_well_formed(cls, language_tag: str, /) -> bool: ...
    def try_set_input_method_language_tag(cls, language_tag: str, /) -> bool: ...
    @_property
    def current_input_method_language_tag(cls) -> str: ...

@typing.final
class Language(winrt.system.Object, metaclass=Language_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Language: ...
    def __new__(cls: typing.Type[Language], language_tag: str) -> Language:...
    def get_extension_subtags(self, singleton: str, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @_property
    def display_name(self) -> str: ...
    @_property
    def language_tag(self) -> str: ...
    @_property
    def native_name(self) -> str: ...
    @_property
    def script(self) -> str: ...
    @_property
    def layout_direction(self) -> LanguageLayoutDirection: ...
    @_property
    def abbreviated_name(self) -> str: ...

@typing.final
class NumeralSystemIdentifiers_Static(type):
    @_property
    def full_wide(cls) -> str: ...
    @_property
    def arab(cls) -> str: ...
    @_property
    def arab_ext(cls) -> str: ...
    @_property
    def bali(cls) -> str: ...
    @_property
    def beng(cls) -> str: ...
    @_property
    def cham(cls) -> str: ...
    @_property
    def deva(cls) -> str: ...
    @_property
    def mymr_shan(cls) -> str: ...
    @_property
    def gujr(cls) -> str: ...
    @_property
    def guru(cls) -> str: ...
    @_property
    def hani_dec(cls) -> str: ...
    @_property
    def java(cls) -> str: ...
    @_property
    def kali(cls) -> str: ...
    @_property
    def khmr(cls) -> str: ...
    @_property
    def knda(cls) -> str: ...
    @_property
    def lana(cls) -> str: ...
    @_property
    def lana_tham(cls) -> str: ...
    @_property
    def laoo(cls) -> str: ...
    @_property
    def latn(cls) -> str: ...
    @_property
    def lepc(cls) -> str: ...
    @_property
    def limb(cls) -> str: ...
    @_property
    def mlym(cls) -> str: ...
    @_property
    def mong(cls) -> str: ...
    @_property
    def mtei(cls) -> str: ...
    @_property
    def mymr(cls) -> str: ...
    @_property
    def nkoo(cls) -> str: ...
    @_property
    def olck(cls) -> str: ...
    @_property
    def orya(cls) -> str: ...
    @_property
    def saur(cls) -> str: ...
    @_property
    def sund(cls) -> str: ...
    @_property
    def talu(cls) -> str: ...
    @_property
    def taml_dec(cls) -> str: ...
    @_property
    def telu(cls) -> str: ...
    @_property
    def thai(cls) -> str: ...
    @_property
    def tibt(cls) -> str: ...
    @_property
    def vaii(cls) -> str: ...
    @_property
    def math_bold(cls) -> str: ...
    @_property
    def math_dbl(cls) -> str: ...
    @_property
    def math_mono(cls) -> str: ...
    @_property
    def math_sanb(cls) -> str: ...
    @_property
    def math_sans(cls) -> str: ...
    @_property
    def osma(cls) -> str: ...
    @_property
    def zmth_bold(cls) -> str: ...
    @_property
    def zmth_dbl(cls) -> str: ...
    @_property
    def zmth_mono(cls) -> str: ...
    @_property
    def zmth_sanb(cls) -> str: ...
    @_property
    def zmth_sans(cls) -> str: ...
    @_property
    def brah(cls) -> str: ...

@typing.final
class NumeralSystemIdentifiers(winrt.system.Object, metaclass=NumeralSystemIdentifiers_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NumeralSystemIdentifiers: ...

