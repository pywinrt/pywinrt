# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections

from winrt.windows.system.update import SystemUpdateAttentionRequiredReason, SystemUpdateItemState, SystemUpdateManagerState, SystemUpdateStartInstallAction

Self = typing.TypeVar('Self')

@typing.final
class SystemUpdateItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemUpdateItem: ...
    @_property
    def description(self) -> str: ...
    @_property
    def download_progress(self) -> winrt.system.Double: ...
    @_property
    def extended_error(self) -> winrt.windows.foundation.HResult: ...
    @_property
    def id(self) -> str: ...
    @_property
    def install_progress(self) -> winrt.system.Double: ...
    @_property
    def revision(self) -> winrt.system.UInt32: ...
    @_property
    def state(self) -> SystemUpdateItemState: ...
    @_property
    def title(self) -> str: ...

@typing.final
class SystemUpdateLastErrorInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemUpdateLastErrorInfo: ...
    @_property
    def extended_error(self) -> winrt.windows.foundation.HResult: ...
    @_property
    def is_interactive(self) -> bool: ...
    @_property
    def state(self) -> SystemUpdateManagerState: ...

@typing.final
class SystemUpdateManager_Static(type):
    def block_automatic_reboot_async(cls, lock_id: str, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def get_automatic_reboot_block_ids(cls) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    def get_flight_ring(cls) -> str: ...
    def get_update_items(cls) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[SystemUpdateItem]]: ...
    def is_supported(cls) -> bool: ...
    def reboot_to_complete_install(cls) -> None: ...
    def set_flight_ring(cls, flight_ring: str, /) -> bool: ...
    def start_cancel_updates(cls) -> None: ...
    def start_install(cls, action: SystemUpdateStartInstallAction, /) -> None: ...
    def try_set_user_active_hours(cls, start: datetime.timedelta, end: datetime.timedelta, /) -> bool: ...
    def unblock_automatic_reboot_async(cls, lock_id: str, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def add_state_changed(cls, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_state_changed(cls, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def attention_required_reason(cls) -> SystemUpdateAttentionRequiredReason: ...
    @_property
    def download_progress(cls) -> winrt.system.Double: ...
    @_property
    def extended_error(cls) -> winrt.windows.foundation.HResult: ...
    @_property
    def install_progress(cls) -> winrt.system.Double: ...
    @_property
    def last_error_info(cls) -> typing.Optional[SystemUpdateLastErrorInfo]: ...
    @_property
    def last_update_check_time(cls) -> datetime.datetime: ...
    @_property
    def last_update_install_time(cls) -> datetime.datetime: ...
    @_property
    def state(cls) -> SystemUpdateManagerState: ...
    @_property
    def user_active_hours_end(cls) -> datetime.timedelta: ...
    @_property
    def user_active_hours_max(cls) -> winrt.system.Int32: ...
    @_property
    def user_active_hours_start(cls) -> datetime.timedelta: ...

@typing.final
class SystemUpdateManager(winrt.system.Object, metaclass=SystemUpdateManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemUpdateManager: ...

