// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Phone.ApplicationModel.h"


namespace py::cpp::Windows::Phone::ApplicationModel
{
    // ----- ApplicationProfile class --------------------

    static PyObject* _new_ApplicationProfile(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Phone::ApplicationModel::ApplicationProfile>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Phone::ApplicationModel::ApplicationProfile>::type_name);
        return nullptr;
    }

    static PyObject* ApplicationProfile_get_Modes(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Phone.ApplicationModel.ApplicationProfile", L"Modes"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Phone::ApplicationModel::ApplicationProfile::Modes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ApplicationProfile[] = {
        { }
    };

    static PyGetSetDef _getset_ApplicationProfile[] = {
        { }
    };

    static PyType_Slot _type_slots_ApplicationProfile[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ApplicationProfile) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ApplicationProfile) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ApplicationProfile) },
        { },
    };

    static PyType_Spec type_spec_ApplicationProfile =
    {
        "winrt._winrt_windows_phone_applicationmodel.ApplicationProfile",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ApplicationProfile
    };

    static PyGetSetDef getset_ApplicationProfile_Static[] = {
        { "modes", reinterpret_cast<getter>(ApplicationProfile_get_Modes), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_ApplicationProfile_Static[] = {
        { }
    };

    static PyType_Slot type_slots_ApplicationProfile_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ApplicationProfile_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_ApplicationProfile_Static) },
        { }
    };

    static PyType_Spec type_spec_ApplicationProfile_Static =
    {
        "winrt._winrt_windows_phone_applicationmodel.ApplicationProfile_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_ApplicationProfile_Static
    };

    // ----- Windows.Phone.ApplicationModel Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Phone::ApplicationModel");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_phone_applicationmodel",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Phone::ApplicationModel

PyMODINIT_FUNC PyInit__winrt_windows_phone_applicationmodel(void) noexcept
{
    using namespace py::cpp::Windows::Phone::ApplicationModel;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_ApplicationProfile_Static{PyType_FromSpec(&type_spec_ApplicationProfile_Static)};
    if (!type_ApplicationProfile_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ApplicationProfile, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ApplicationProfile_Static.get())) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
