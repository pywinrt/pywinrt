# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.system as windows_system
import winrt.windows.ui as windows_ui
import winrt.windows.ui.popups as windows_ui_popups

from winrt.windows.applicationmodel.appointments import AppointmentBusyStatus, AppointmentCalendarOtherAppReadAccess, AppointmentCalendarOtherAppWriteAccess, AppointmentCalendarSyncStatus, AppointmentConflictType, AppointmentDaysOfWeek, AppointmentDetailsKind, AppointmentParticipantResponse, AppointmentParticipantRole, AppointmentRecurrenceUnit, AppointmentSensitivity, AppointmentStoreAccessType, AppointmentStoreChangeType, AppointmentSummaryCardView, AppointmentWeekOfMonth, FindAppointmentCalendarsOptions, RecurrenceType

Self = typing.TypeVar('Self')

@typing.final
class Appointment(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.ApplicationModel.Appointments.Appointment::get_Location()
    @_property
    def location(self) -> str: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_Location(System.String)
    @location.setter
    def location(self, value: str) -> None: ...
    # System.Boolean Windows.ApplicationModel.Appointments.Appointment::get_AllDay()
    @_property
    def all_day(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_AllDay(System.Boolean)
    @all_day.setter
    def all_day(self, value: bool) -> None: ...
    # Windows.ApplicationModel.Appointments.AppointmentOrganizer Windows.ApplicationModel.Appointments.Appointment::get_Organizer()
    @_property
    def organizer(self) -> AppointmentOrganizer: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_Organizer(Windows.ApplicationModel.Appointments.AppointmentOrganizer)
    @organizer.setter
    def organizer(self, value: AppointmentOrganizer) -> None: ...
    # Windows.Foundation.TimeSpan Windows.ApplicationModel.Appointments.Appointment::get_Duration()
    @_property
    def duration(self) -> datetime.timedelta: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_Duration(Windows.Foundation.TimeSpan)
    @duration.setter
    def duration(self, value: datetime.timedelta) -> None: ...
    # System.String Windows.ApplicationModel.Appointments.Appointment::get_Details()
    @_property
    def details(self) -> str: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_Details(System.String)
    @details.setter
    def details(self, value: str) -> None: ...
    # Windows.ApplicationModel.Appointments.AppointmentBusyStatus Windows.ApplicationModel.Appointments.Appointment::get_BusyStatus()
    @_property
    def busy_status(self) -> AppointmentBusyStatus: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_BusyStatus(Windows.ApplicationModel.Appointments.AppointmentBusyStatus)
    @busy_status.setter
    def busy_status(self, value: AppointmentBusyStatus) -> None: ...
    # Windows.ApplicationModel.Appointments.AppointmentRecurrence Windows.ApplicationModel.Appointments.Appointment::get_Recurrence()
    @_property
    def recurrence(self) -> AppointmentRecurrence: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_Recurrence(Windows.ApplicationModel.Appointments.AppointmentRecurrence)
    @recurrence.setter
    def recurrence(self, value: AppointmentRecurrence) -> None: ...
    # System.String Windows.ApplicationModel.Appointments.Appointment::get_Subject()
    @_property
    def subject(self) -> str: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_Subject(System.String)
    @subject.setter
    def subject(self, value: str) -> None: ...
    # Windows.Foundation.Uri Windows.ApplicationModel.Appointments.Appointment::get_Uri()
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_Uri(Windows.Foundation.Uri)
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...
    # Windows.Foundation.DateTime Windows.ApplicationModel.Appointments.Appointment::get_StartTime()
    @_property
    def start_time(self) -> datetime.datetime: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_StartTime(Windows.Foundation.DateTime)
    @start_time.setter
    def start_time(self, value: datetime.datetime) -> None: ...
    # Windows.ApplicationModel.Appointments.AppointmentSensitivity Windows.ApplicationModel.Appointments.Appointment::get_Sensitivity()
    @_property
    def sensitivity(self) -> AppointmentSensitivity: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_Sensitivity(Windows.ApplicationModel.Appointments.AppointmentSensitivity)
    @sensitivity.setter
    def sensitivity(self, value: AppointmentSensitivity) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.ApplicationModel.Appointments.Appointment::get_Reminder()
    @_property
    def reminder(self) -> typing.Optional[datetime.timedelta]: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_Reminder(Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan>)
    @reminder.setter
    def reminder(self, value: typing.Optional[datetime.timedelta]) -> None: ...
    # Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.Appointments.AppointmentInvitee> Windows.ApplicationModel.Appointments.Appointment::get_Invitees()
    @_property
    def invitees(self) -> typing.MutableSequence[AppointmentInvitee]: ...
    # System.Boolean Windows.ApplicationModel.Appointments.Appointment::get_AllowNewTimeProposal()
    @_property
    def allow_new_time_proposal(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_AllowNewTimeProposal(System.Boolean)
    @allow_new_time_proposal.setter
    def allow_new_time_proposal(self, value: bool) -> None: ...
    # Windows.ApplicationModel.Appointments.AppointmentParticipantResponse Windows.ApplicationModel.Appointments.Appointment::get_UserResponse()
    @_property
    def user_response(self) -> AppointmentParticipantResponse: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_UserResponse(Windows.ApplicationModel.Appointments.AppointmentParticipantResponse)
    @user_response.setter
    def user_response(self, value: AppointmentParticipantResponse) -> None: ...
    # System.String Windows.ApplicationModel.Appointments.Appointment::get_RoamingId()
    @_property
    def roaming_id(self) -> str: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_RoamingId(System.String)
    @roaming_id.setter
    def roaming_id(self, value: str) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.DateTime> Windows.ApplicationModel.Appointments.Appointment::get_ReplyTime()
    @_property
    def reply_time(self) -> typing.Optional[datetime.datetime]: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_ReplyTime(Windows.Foundation.IReference`1<Windows.Foundation.DateTime>)
    @reply_time.setter
    def reply_time(self, value: typing.Optional[datetime.datetime]) -> None: ...
    # System.Boolean Windows.ApplicationModel.Appointments.Appointment::get_IsResponseRequested()
    @_property
    def is_response_requested(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_IsResponseRequested(System.Boolean)
    @is_response_requested.setter
    def is_response_requested(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Appointments.Appointment::get_IsOrganizedByUser()
    @_property
    def is_organized_by_user(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_IsOrganizedByUser(System.Boolean)
    @is_organized_by_user.setter
    def is_organized_by_user(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Appointments.Appointment::get_IsCanceledMeeting()
    @_property
    def is_canceled_meeting(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_IsCanceledMeeting(System.Boolean)
    @is_canceled_meeting.setter
    def is_canceled_meeting(self, value: bool) -> None: ...
    # System.String Windows.ApplicationModel.Appointments.Appointment::get_OnlineMeetingLink()
    @_property
    def online_meeting_link(self) -> str: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_OnlineMeetingLink(System.String)
    @online_meeting_link.setter
    def online_meeting_link(self, value: str) -> None: ...
    # System.Boolean Windows.ApplicationModel.Appointments.Appointment::get_HasInvitees()
    @_property
    def has_invitees(self) -> bool: ...
    # System.String Windows.ApplicationModel.Appointments.Appointment::get_CalendarId()
    @_property
    def calendar_id(self) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.Appointment::get_LocalId()
    @_property
    def local_id(self) -> str: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.DateTime> Windows.ApplicationModel.Appointments.Appointment::get_OriginalStartTime()
    @_property
    def original_start_time(self) -> typing.Optional[datetime.datetime]: ...
    # System.UInt64 Windows.ApplicationModel.Appointments.Appointment::get_RemoteChangeNumber()
    @_property
    def remote_change_number(self) -> winrt.system.UInt64: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_RemoteChangeNumber(System.UInt64)
    @remote_change_number.setter
    def remote_change_number(self, value: winrt.system.UInt64) -> None: ...
    # Windows.ApplicationModel.Appointments.AppointmentDetailsKind Windows.ApplicationModel.Appointments.Appointment::get_DetailsKind()
    @_property
    def details_kind(self) -> AppointmentDetailsKind: ...
    # System.Void Windows.ApplicationModel.Appointments.Appointment::put_DetailsKind(Windows.ApplicationModel.Appointments.AppointmentDetailsKind)
    @details_kind.setter
    def details_kind(self, value: AppointmentDetailsKind) -> None: ...
    # System.UInt64 Windows.ApplicationModel.Appointments.Appointment::get_ChangeNumber()
    @_property
    def change_number(self) -> winrt.system.UInt64: ...

@typing.final
class AppointmentCalendar(winrt.system.Object):
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Appointments.AppointmentCalendar::DeleteAppointmentAsync(System.String)
    def delete_appointment_async(self, local_id: str, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Appointments.AppointmentCalendar::DeleteAppointmentInstanceAsync(System.String,Windows.Foundation.DateTime)
    def delete_appointment_instance_async(self, local_id: str, instance_start_time: datetime.datetime, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Appointments.AppointmentCalendar::DeleteAsync()
    def delete_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Appointments.Appointment>> Windows.ApplicationModel.Appointments.AppointmentCalendar::FindAllInstancesAsync(System.String,Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)
    def find_all_instances_async(self, master_local_id: str, range_start: datetime.datetime, range_length: datetime.timedelta, /) -> windows_foundation.IAsyncOperation[typing.Sequence[Appointment]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Appointments.Appointment>> Windows.ApplicationModel.Appointments.AppointmentCalendar::FindAllInstancesAsync(System.String,Windows.Foundation.DateTime,Windows.Foundation.TimeSpan,Windows.ApplicationModel.Appointments.FindAppointmentsOptions)
    def find_all_instances_async_with_options(self, master_local_id: str, range_start: datetime.datetime, range_length: datetime.timedelta, p_options: FindAppointmentsOptions, /) -> windows_foundation.IAsyncOperation[typing.Sequence[Appointment]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Appointments.Appointment>> Windows.ApplicationModel.Appointments.AppointmentCalendar::FindAppointmentsAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)
    def find_appointments_async(self, range_start: datetime.datetime, range_length: datetime.timedelta, /) -> windows_foundation.IAsyncOperation[typing.Sequence[Appointment]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Appointments.Appointment>> Windows.ApplicationModel.Appointments.AppointmentCalendar::FindAppointmentsAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan,Windows.ApplicationModel.Appointments.FindAppointmentsOptions)
    def find_appointments_async_with_options(self, range_start: datetime.datetime, range_length: datetime.timedelta, options: FindAppointmentsOptions, /) -> windows_foundation.IAsyncOperation[typing.Sequence[Appointment]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Appointments.AppointmentException>> Windows.ApplicationModel.Appointments.AppointmentCalendar::FindExceptionsFromMasterAsync(System.String)
    def find_exceptions_from_master_async(self, master_local_id: str, /) -> windows_foundation.IAsyncOperation[typing.Sequence[AppointmentException]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Appointments.Appointment>> Windows.ApplicationModel.Appointments.AppointmentCalendar::FindUnexpandedAppointmentsAsync()
    def find_unexpanded_appointments_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[Appointment]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Appointments.Appointment>> Windows.ApplicationModel.Appointments.AppointmentCalendar::FindUnexpandedAppointmentsAsync(Windows.ApplicationModel.Appointments.FindAppointmentsOptions)
    def find_unexpanded_appointments_async_with_options(self, options: FindAppointmentsOptions, /) -> windows_foundation.IAsyncOperation[typing.Sequence[Appointment]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Appointments.Appointment> Windows.ApplicationModel.Appointments.AppointmentCalendar::GetAppointmentAsync(System.String)
    def get_appointment_async(self, local_id: str, /) -> windows_foundation.IAsyncOperation[Appointment]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Appointments.Appointment> Windows.ApplicationModel.Appointments.AppointmentCalendar::GetAppointmentInstanceAsync(System.String,Windows.Foundation.DateTime)
    def get_appointment_instance_async(self, local_id: str, instance_start_time: datetime.datetime, /) -> windows_foundation.IAsyncOperation[Appointment]: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Appointments.AppointmentCalendar::RegisterSyncManagerAsync()
    def register_sync_manager_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Appointments.AppointmentCalendar::SaveAppointmentAsync(Windows.ApplicationModel.Appointments.Appointment)
    def save_appointment_async(self, p_appointment: Appointment, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Appointments.AppointmentCalendar::SaveAsync()
    def save_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Appointments.AppointmentCalendar::TryCancelMeetingAsync(Windows.ApplicationModel.Appointments.Appointment,System.String,System.String,System.Boolean)
    def try_cancel_meeting_async(self, meeting: Appointment, subject: str, comment: str, notify_invitees: bool, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Appointments.AppointmentCalendar::TryCreateOrUpdateAppointmentAsync(Windows.ApplicationModel.Appointments.Appointment,System.Boolean)
    def try_create_or_update_appointment_async(self, appointment: Appointment, notify_invitees: bool, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Appointments.AppointmentCalendar::TryForwardMeetingAsync(Windows.ApplicationModel.Appointments.Appointment,Windows.Foundation.Collections.IIterable`1<Windows.ApplicationModel.Appointments.AppointmentInvitee>,System.String,System.String,System.String)
    def try_forward_meeting_async(self, meeting: Appointment, invitees: typing.Iterable[AppointmentInvitee], subject: str, forward_header: str, comment: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Appointments.AppointmentCalendar::TryProposeNewTimeForMeetingAsync(Windows.ApplicationModel.Appointments.Appointment,Windows.Foundation.DateTime,Windows.Foundation.TimeSpan,System.String,System.String)
    def try_propose_new_time_for_meeting_async(self, meeting: Appointment, new_start_time: datetime.datetime, new_duration: datetime.timedelta, subject: str, comment: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Appointments.AppointmentCalendar::TryUpdateMeetingResponseAsync(Windows.ApplicationModel.Appointments.Appointment,Windows.ApplicationModel.Appointments.AppointmentParticipantResponse,System.String,System.String,System.Boolean)
    def try_update_meeting_response_async(self, meeting: Appointment, response: AppointmentParticipantResponse, subject: str, comment: str, send_update: bool, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.ApplicationModel.Appointments.AppointmentSummaryCardView Windows.ApplicationModel.Appointments.AppointmentCalendar::get_SummaryCardView()
    @_property
    def summary_card_view(self) -> AppointmentSummaryCardView: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendar::put_SummaryCardView(Windows.ApplicationModel.Appointments.AppointmentSummaryCardView)
    @summary_card_view.setter
    def summary_card_view(self, value: AppointmentSummaryCardView) -> None: ...
    # Windows.ApplicationModel.Appointments.AppointmentCalendarOtherAppWriteAccess Windows.ApplicationModel.Appointments.AppointmentCalendar::get_OtherAppWriteAccess()
    @_property
    def other_app_write_access(self) -> AppointmentCalendarOtherAppWriteAccess: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendar::put_OtherAppWriteAccess(Windows.ApplicationModel.Appointments.AppointmentCalendarOtherAppWriteAccess)
    @other_app_write_access.setter
    def other_app_write_access(self, value: AppointmentCalendarOtherAppWriteAccess) -> None: ...
    # Windows.UI.Color Windows.ApplicationModel.Appointments.AppointmentCalendar::get_DisplayColor()
    @_property
    def display_color(self) -> windows_ui.Color: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendar::put_DisplayColor(Windows.UI.Color)
    @display_color.setter
    def display_color(self, value: windows_ui.Color) -> None: ...
    # System.Boolean Windows.ApplicationModel.Appointments.AppointmentCalendar::get_IsHidden()
    @_property
    def is_hidden(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendar::put_IsHidden(System.Boolean)
    @is_hidden.setter
    def is_hidden(self, value: bool) -> None: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentCalendar::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendar::put_DisplayName(System.String)
    @display_name.setter
    def display_name(self, value: str) -> None: ...
    # Windows.ApplicationModel.Appointments.AppointmentCalendarOtherAppReadAccess Windows.ApplicationModel.Appointments.AppointmentCalendar::get_OtherAppReadAccess()
    @_property
    def other_app_read_access(self) -> AppointmentCalendarOtherAppReadAccess: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendar::put_OtherAppReadAccess(Windows.ApplicationModel.Appointments.AppointmentCalendarOtherAppReadAccess)
    @other_app_read_access.setter
    def other_app_read_access(self, value: AppointmentCalendarOtherAppReadAccess) -> None: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentCalendar::get_LocalId()
    @_property
    def local_id(self) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentCalendar::get_SourceDisplayName()
    @_property
    def source_display_name(self) -> str: ...
    # System.Boolean Windows.ApplicationModel.Appointments.AppointmentCalendar::get_CanCancelMeetings()
    @_property
    def can_cancel_meetings(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendar::put_CanCancelMeetings(System.Boolean)
    @can_cancel_meetings.setter
    def can_cancel_meetings(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Appointments.AppointmentCalendar::get_CanNotifyInvitees()
    @_property
    def can_notify_invitees(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendar::put_CanNotifyInvitees(System.Boolean)
    @can_notify_invitees.setter
    def can_notify_invitees(self, value: bool) -> None: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentCalendar::get_RemoteId()
    @_property
    def remote_id(self) -> str: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendar::put_RemoteId(System.String)
    @remote_id.setter
    def remote_id(self, value: str) -> None: ...
    # System.Boolean Windows.ApplicationModel.Appointments.AppointmentCalendar::get_MustNofityInvitees()
    @_property
    def must_nofity_invitees(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendar::put_MustNofityInvitees(System.Boolean)
    @must_nofity_invitees.setter
    def must_nofity_invitees(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Appointments.AppointmentCalendar::get_CanUpdateMeetingResponses()
    @_property
    def can_update_meeting_responses(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendar::put_CanUpdateMeetingResponses(System.Boolean)
    @can_update_meeting_responses.setter
    def can_update_meeting_responses(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Appointments.AppointmentCalendar::get_CanProposeNewTimeForMeetings()
    @_property
    def can_propose_new_time_for_meetings(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendar::put_CanProposeNewTimeForMeetings(System.Boolean)
    @can_propose_new_time_for_meetings.setter
    def can_propose_new_time_for_meetings(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Appointments.AppointmentCalendar::get_CanCreateOrUpdateAppointments()
    @_property
    def can_create_or_update_appointments(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendar::put_CanCreateOrUpdateAppointments(System.Boolean)
    @can_create_or_update_appointments.setter
    def can_create_or_update_appointments(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Appointments.AppointmentCalendar::get_CanForwardMeetings()
    @_property
    def can_forward_meetings(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendar::put_CanForwardMeetings(System.Boolean)
    @can_forward_meetings.setter
    def can_forward_meetings(self, value: bool) -> None: ...
    # Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager Windows.ApplicationModel.Appointments.AppointmentCalendar::get_SyncManager()
    @_property
    def sync_manager(self) -> AppointmentCalendarSyncManager: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentCalendar::get_UserDataAccountId()
    @_property
    def user_data_account_id(self) -> str: ...

@typing.final
class AppointmentCalendarSyncManager(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager::SyncAsync()
    def sync_async(self) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager::add_SyncStatusChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager,System.Object>)
    def add_sync_status_changed(self, handler: windows_foundation.TypedEventHandler[AppointmentCalendarSyncManager, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager::remove_SyncStatusChanged(Windows.Foundation.EventRegistrationToken)
    def remove_sync_status_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.ApplicationModel.Appointments.AppointmentCalendarSyncStatus Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager::get_Status()
    @_property
    def status(self) -> AppointmentCalendarSyncStatus: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager::put_Status(Windows.ApplicationModel.Appointments.AppointmentCalendarSyncStatus)
    @status.setter
    def status(self, value: AppointmentCalendarSyncStatus) -> None: ...
    # Windows.Foundation.DateTime Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager::get_LastSuccessfulSyncTime()
    @_property
    def last_successful_sync_time(self) -> datetime.datetime: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager::put_LastSuccessfulSyncTime(Windows.Foundation.DateTime)
    @last_successful_sync_time.setter
    def last_successful_sync_time(self, value: datetime.datetime) -> None: ...
    # Windows.Foundation.DateTime Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager::get_LastAttemptedSyncTime()
    @_property
    def last_attempted_sync_time(self) -> datetime.datetime: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager::put_LastAttemptedSyncTime(Windows.Foundation.DateTime)
    @last_attempted_sync_time.setter
    def last_attempted_sync_time(self, value: datetime.datetime) -> None: ...

@typing.final
class AppointmentConflictResult(winrt.system.Object):
    # Windows.Foundation.DateTime Windows.ApplicationModel.Appointments.AppointmentConflictResult::get_Date()
    @_property
    def date(self) -> datetime.datetime: ...
    # Windows.ApplicationModel.Appointments.AppointmentConflictType Windows.ApplicationModel.Appointments.AppointmentConflictResult::get_Type()
    @_property
    def type(self) -> AppointmentConflictType: ...

@typing.final
class AppointmentException(winrt.system.Object):
    # Windows.ApplicationModel.Appointments.Appointment Windows.ApplicationModel.Appointments.AppointmentException::get_Appointment()
    @_property
    def appointment(self) -> Appointment: ...
    # Windows.Foundation.Collections.IVectorView`1<System.String> Windows.ApplicationModel.Appointments.AppointmentException::get_ExceptionProperties()
    @_property
    def exception_properties(self) -> typing.Sequence[str]: ...
    # System.Boolean Windows.ApplicationModel.Appointments.AppointmentException::get_IsDeleted()
    @_property
    def is_deleted(self) -> bool: ...

@typing.final
class AppointmentInvitee(winrt.system.Object, ImplementsIAppointmentParticipant):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.ApplicationModel.Appointments.AppointmentParticipantRole Windows.ApplicationModel.Appointments.AppointmentInvitee::get_Role()
    @_property
    def role(self) -> AppointmentParticipantRole: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentInvitee::put_Role(Windows.ApplicationModel.Appointments.AppointmentParticipantRole)
    @role.setter
    def role(self, value: AppointmentParticipantRole) -> None: ...
    # Windows.ApplicationModel.Appointments.AppointmentParticipantResponse Windows.ApplicationModel.Appointments.AppointmentInvitee::get_Response()
    @_property
    def response(self) -> AppointmentParticipantResponse: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentInvitee::put_Response(Windows.ApplicationModel.Appointments.AppointmentParticipantResponse)
    @response.setter
    def response(self, value: AppointmentParticipantResponse) -> None: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentInvitee::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentInvitee::put_DisplayName(System.String)
    @display_name.setter
    def display_name(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentInvitee::get_Address()
    @_property
    def address(self) -> str: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentInvitee::put_Address(System.String)
    @address.setter
    def address(self, value: str) -> None: ...

@typing.final
class AppointmentManager_Static(type):
    # Windows.ApplicationModel.Appointments.AppointmentManagerForUser Windows.ApplicationModel.Appointments.AppointmentManager::GetForUser(Windows.System.User)
    def get_for_user(cls, user: windows_system.User, /) -> AppointmentManagerForUser: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Appointments.AppointmentStore> Windows.ApplicationModel.Appointments.AppointmentManager::RequestStoreAsync(Windows.ApplicationModel.Appointments.AppointmentStoreAccessType)
    def request_store_async(cls, options: AppointmentStoreAccessType, /) -> windows_foundation.IAsyncOperation[AppointmentStore]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Appointments.AppointmentManager::ShowAddAppointmentAsync(Windows.ApplicationModel.Appointments.Appointment,Windows.Foundation.Rect)
    def show_add_appointment_async(cls, appointment: Appointment, selection: windows_foundation.Rect, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Appointments.AppointmentManager::ShowAddAppointmentAsync(Windows.ApplicationModel.Appointments.Appointment,Windows.Foundation.Rect,Windows.UI.Popups.Placement)
    def show_add_appointment_with_placement_async(cls, appointment: Appointment, selection: windows_foundation.Rect, preferred_placement: windows_ui_popups.Placement, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Appointments.AppointmentManager::ShowAppointmentDetailsAsync(System.String)
    def show_appointment_details_async(cls, appointment_id: str, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Appointments.AppointmentManager::ShowAppointmentDetailsAsync(System.String,Windows.Foundation.DateTime)
    def show_appointment_details_with_date_async(cls, appointment_id: str, instance_start_date: datetime.datetime, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Appointments.AppointmentManager::ShowEditNewAppointmentAsync(Windows.ApplicationModel.Appointments.Appointment)
    def show_edit_new_appointment_async(cls, appointment: Appointment, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Appointments.AppointmentManager::ShowRemoveAppointmentAsync(System.String,Windows.Foundation.Rect)
    def show_remove_appointment_async(cls, appointment_id: str, selection: windows_foundation.Rect, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Appointments.AppointmentManager::ShowRemoveAppointmentAsync(System.String,Windows.Foundation.Rect,Windows.UI.Popups.Placement,Windows.Foundation.DateTime)
    def show_remove_appointment_with_placement_and_date_async(cls, appointment_id: str, selection: windows_foundation.Rect, preferred_placement: windows_ui_popups.Placement, instance_start_date: datetime.datetime, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Appointments.AppointmentManager::ShowRemoveAppointmentAsync(System.String,Windows.Foundation.Rect,Windows.UI.Popups.Placement)
    def show_remove_appointment_with_placement_async(cls, appointment_id: str, selection: windows_foundation.Rect, preferred_placement: windows_ui_popups.Placement, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Appointments.AppointmentManager::ShowReplaceAppointmentAsync(System.String,Windows.ApplicationModel.Appointments.Appointment,Windows.Foundation.Rect)
    def show_replace_appointment_async(cls, appointment_id: str, appointment: Appointment, selection: windows_foundation.Rect, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Appointments.AppointmentManager::ShowReplaceAppointmentAsync(System.String,Windows.ApplicationModel.Appointments.Appointment,Windows.Foundation.Rect,Windows.UI.Popups.Placement,Windows.Foundation.DateTime)
    def show_replace_appointment_with_placement_and_date_async(cls, appointment_id: str, appointment: Appointment, selection: windows_foundation.Rect, preferred_placement: windows_ui_popups.Placement, instance_start_date: datetime.datetime, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Appointments.AppointmentManager::ShowReplaceAppointmentAsync(System.String,Windows.ApplicationModel.Appointments.Appointment,Windows.Foundation.Rect,Windows.UI.Popups.Placement)
    def show_replace_appointment_with_placement_async(cls, appointment_id: str, appointment: Appointment, selection: windows_foundation.Rect, preferred_placement: windows_ui_popups.Placement, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Appointments.AppointmentManager::ShowTimeFrameAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)
    def show_time_frame_async(cls, time_to_show: datetime.datetime, duration: datetime.timedelta, /) -> windows_foundation.IAsyncAction: ...

@typing.final
class AppointmentManager(winrt.system.Object, metaclass=AppointmentManager_Static):
    pass

@typing.final
class AppointmentManagerForUser(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Appointments.AppointmentStore> Windows.ApplicationModel.Appointments.AppointmentManagerForUser::RequestStoreAsync(Windows.ApplicationModel.Appointments.AppointmentStoreAccessType)
    def request_store_async(self, options: AppointmentStoreAccessType, /) -> windows_foundation.IAsyncOperation[AppointmentStore]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Appointments.AppointmentManagerForUser::ShowAddAppointmentAsync(Windows.ApplicationModel.Appointments.Appointment,Windows.Foundation.Rect)
    def show_add_appointment_async(self, appointment: Appointment, selection: windows_foundation.Rect, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Appointments.AppointmentManagerForUser::ShowAddAppointmentAsync(Windows.ApplicationModel.Appointments.Appointment,Windows.Foundation.Rect,Windows.UI.Popups.Placement)
    def show_add_appointment_with_placement_async(self, appointment: Appointment, selection: windows_foundation.Rect, preferred_placement: windows_ui_popups.Placement, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Appointments.AppointmentManagerForUser::ShowAppointmentDetailsAsync(System.String)
    def show_appointment_details_async(self, appointment_id: str, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Appointments.AppointmentManagerForUser::ShowAppointmentDetailsAsync(System.String,Windows.Foundation.DateTime)
    def show_appointment_details_with_date_async(self, appointment_id: str, instance_start_date: datetime.datetime, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Appointments.AppointmentManagerForUser::ShowEditNewAppointmentAsync(Windows.ApplicationModel.Appointments.Appointment)
    def show_edit_new_appointment_async(self, appointment: Appointment, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Appointments.AppointmentManagerForUser::ShowRemoveAppointmentAsync(System.String,Windows.Foundation.Rect)
    def show_remove_appointment_async(self, appointment_id: str, selection: windows_foundation.Rect, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Appointments.AppointmentManagerForUser::ShowRemoveAppointmentAsync(System.String,Windows.Foundation.Rect,Windows.UI.Popups.Placement,Windows.Foundation.DateTime)
    def show_remove_appointment_with_placement_and_date_async(self, appointment_id: str, selection: windows_foundation.Rect, preferred_placement: windows_ui_popups.Placement, instance_start_date: datetime.datetime, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Appointments.AppointmentManagerForUser::ShowRemoveAppointmentAsync(System.String,Windows.Foundation.Rect,Windows.UI.Popups.Placement)
    def show_remove_appointment_with_placement_async(self, appointment_id: str, selection: windows_foundation.Rect, preferred_placement: windows_ui_popups.Placement, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Appointments.AppointmentManagerForUser::ShowReplaceAppointmentAsync(System.String,Windows.ApplicationModel.Appointments.Appointment,Windows.Foundation.Rect)
    def show_replace_appointment_async(self, appointment_id: str, appointment: Appointment, selection: windows_foundation.Rect, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Appointments.AppointmentManagerForUser::ShowReplaceAppointmentAsync(System.String,Windows.ApplicationModel.Appointments.Appointment,Windows.Foundation.Rect,Windows.UI.Popups.Placement,Windows.Foundation.DateTime)
    def show_replace_appointment_with_placement_and_date_async(self, appointment_id: str, appointment: Appointment, selection: windows_foundation.Rect, preferred_placement: windows_ui_popups.Placement, instance_start_date: datetime.datetime, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Appointments.AppointmentManagerForUser::ShowReplaceAppointmentAsync(System.String,Windows.ApplicationModel.Appointments.Appointment,Windows.Foundation.Rect,Windows.UI.Popups.Placement)
    def show_replace_appointment_with_placement_async(self, appointment_id: str, appointment: Appointment, selection: windows_foundation.Rect, preferred_placement: windows_ui_popups.Placement, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Appointments.AppointmentManagerForUser::ShowTimeFrameAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)
    def show_time_frame_async(self, time_to_show: datetime.datetime, duration: datetime.timedelta, /) -> windows_foundation.IAsyncAction: ...
    # Windows.System.User Windows.ApplicationModel.Appointments.AppointmentManagerForUser::get_User()
    @_property
    def user(self) -> windows_system.User: ...

@typing.final
class AppointmentOrganizer(winrt.system.Object, ImplementsIAppointmentParticipant):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentOrganizer::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentOrganizer::put_DisplayName(System.String)
    @display_name.setter
    def display_name(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentOrganizer::get_Address()
    @_property
    def address(self) -> str: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentOrganizer::put_Address(System.String)
    @address.setter
    def address(self, value: str) -> None: ...

@typing.final
class AppointmentProperties_Static(type):
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_HasInvitees()
    @_property
    def has_invitees(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_AllDay()
    @_property
    def all_day(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_AllowNewTimeProposal()
    @_property
    def allow_new_time_proposal(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_BusyStatus()
    @_property
    def busy_status(cls) -> str: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Windows.ApplicationModel.Appointments.AppointmentProperties::get_DefaultProperties()
    @_property
    def default_properties(cls) -> typing.MutableSequence[str]: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_Details()
    @_property
    def details(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_Duration()
    @_property
    def duration(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_Recurrence()
    @_property
    def recurrence(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_Invitees()
    @_property
    def invitees(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_IsCanceledMeeting()
    @_property
    def is_canceled_meeting(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_IsOrganizedByUser()
    @_property
    def is_organized_by_user(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_IsResponseRequested()
    @_property
    def is_response_requested(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_Location()
    @_property
    def location(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_OnlineMeetingLink()
    @_property
    def online_meeting_link(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_Organizer()
    @_property
    def organizer(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_OriginalStartTime()
    @_property
    def original_start_time(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_Reminder()
    @_property
    def reminder(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_ReplyTime()
    @_property
    def reply_time(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_Sensitivity()
    @_property
    def sensitivity(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_StartTime()
    @_property
    def start_time(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_Subject()
    @_property
    def subject(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_Uri()
    @_property
    def uri(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_UserResponse()
    @_property
    def user_response(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_DetailsKind()
    @_property
    def details_kind(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_RemoteChangeNumber()
    @_property
    def remote_change_number(cls) -> str: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentProperties::get_ChangeNumber()
    @_property
    def change_number(cls) -> str: ...

@typing.final
class AppointmentProperties(winrt.system.Object, metaclass=AppointmentProperties_Static):
    pass

@typing.final
class AppointmentRecurrence(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.ApplicationModel.Appointments.AppointmentRecurrenceUnit Windows.ApplicationModel.Appointments.AppointmentRecurrence::get_Unit()
    @_property
    def unit(self) -> AppointmentRecurrenceUnit: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentRecurrence::put_Unit(Windows.ApplicationModel.Appointments.AppointmentRecurrenceUnit)
    @unit.setter
    def unit(self, value: AppointmentRecurrenceUnit) -> None: ...
    # Windows.Foundation.IReference`1<System.UInt32> Windows.ApplicationModel.Appointments.AppointmentRecurrence::get_Occurrences()
    @_property
    def occurrences(self) -> typing.Optional[winrt.system.UInt32]: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentRecurrence::put_Occurrences(Windows.Foundation.IReference`1<System.UInt32>)
    @occurrences.setter
    def occurrences(self, value: typing.Optional[winrt.system.UInt32]) -> None: ...
    # System.UInt32 Windows.ApplicationModel.Appointments.AppointmentRecurrence::get_Month()
    @_property
    def month(self) -> winrt.system.UInt32: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentRecurrence::put_Month(System.UInt32)
    @month.setter
    def month(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.ApplicationModel.Appointments.AppointmentRecurrence::get_Interval()
    @_property
    def interval(self) -> winrt.system.UInt32: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentRecurrence::put_Interval(System.UInt32)
    @interval.setter
    def interval(self, value: winrt.system.UInt32) -> None: ...
    # Windows.ApplicationModel.Appointments.AppointmentDaysOfWeek Windows.ApplicationModel.Appointments.AppointmentRecurrence::get_DaysOfWeek()
    @_property
    def days_of_week(self) -> AppointmentDaysOfWeek: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentRecurrence::put_DaysOfWeek(Windows.ApplicationModel.Appointments.AppointmentDaysOfWeek)
    @days_of_week.setter
    def days_of_week(self, value: AppointmentDaysOfWeek) -> None: ...
    # System.UInt32 Windows.ApplicationModel.Appointments.AppointmentRecurrence::get_Day()
    @_property
    def day(self) -> winrt.system.UInt32: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentRecurrence::put_Day(System.UInt32)
    @day.setter
    def day(self, value: winrt.system.UInt32) -> None: ...
    # Windows.ApplicationModel.Appointments.AppointmentWeekOfMonth Windows.ApplicationModel.Appointments.AppointmentRecurrence::get_WeekOfMonth()
    @_property
    def week_of_month(self) -> AppointmentWeekOfMonth: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentRecurrence::put_WeekOfMonth(Windows.ApplicationModel.Appointments.AppointmentWeekOfMonth)
    @week_of_month.setter
    def week_of_month(self, value: AppointmentWeekOfMonth) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.DateTime> Windows.ApplicationModel.Appointments.AppointmentRecurrence::get_Until()
    @_property
    def until(self) -> typing.Optional[datetime.datetime]: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentRecurrence::put_Until(Windows.Foundation.IReference`1<Windows.Foundation.DateTime>)
    @until.setter
    def until(self, value: typing.Optional[datetime.datetime]) -> None: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentRecurrence::get_TimeZone()
    @_property
    def time_zone(self) -> str: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentRecurrence::put_TimeZone(System.String)
    @time_zone.setter
    def time_zone(self, value: str) -> None: ...
    # Windows.ApplicationModel.Appointments.RecurrenceType Windows.ApplicationModel.Appointments.AppointmentRecurrence::get_RecurrenceType()
    @_property
    def recurrence_type(self) -> RecurrenceType: ...
    # System.String Windows.ApplicationModel.Appointments.AppointmentRecurrence::get_CalendarIdentifier()
    @_property
    def calendar_identifier(self) -> str: ...

@typing.final
class AppointmentStore(winrt.system.Object):
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Appointments.AppointmentCalendar> Windows.ApplicationModel.Appointments.AppointmentStore::CreateAppointmentCalendarAsync(System.String)
    def create_appointment_calendar_async(self, name: str, /) -> windows_foundation.IAsyncOperation[AppointmentCalendar]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Appointments.AppointmentCalendar> Windows.ApplicationModel.Appointments.AppointmentStore::CreateAppointmentCalendarAsync(System.String,System.String)
    def create_appointment_calendar_in_account_async(self, name: str, user_data_account_id: str, /) -> windows_foundation.IAsyncOperation[AppointmentCalendar]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Appointments.AppointmentCalendar>> Windows.ApplicationModel.Appointments.AppointmentStore::FindAppointmentCalendarsAsync()
    def find_appointment_calendars_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[AppointmentCalendar]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Appointments.AppointmentCalendar>> Windows.ApplicationModel.Appointments.AppointmentStore::FindAppointmentCalendarsAsync(Windows.ApplicationModel.Appointments.FindAppointmentCalendarsOptions)
    def find_appointment_calendars_async_with_options(self, options: FindAppointmentCalendarsOptions, /) -> windows_foundation.IAsyncOperation[typing.Sequence[AppointmentCalendar]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Appointments.Appointment>> Windows.ApplicationModel.Appointments.AppointmentStore::FindAppointmentsAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)
    def find_appointments_async(self, range_start: datetime.datetime, range_length: datetime.timedelta, /) -> windows_foundation.IAsyncOperation[typing.Sequence[Appointment]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Appointments.Appointment>> Windows.ApplicationModel.Appointments.AppointmentStore::FindAppointmentsAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan,Windows.ApplicationModel.Appointments.FindAppointmentsOptions)
    def find_appointments_async_with_options(self, range_start: datetime.datetime, range_length: datetime.timedelta, options: FindAppointmentsOptions, /) -> windows_foundation.IAsyncOperation[typing.Sequence[Appointment]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Appointments.AppointmentConflictResult> Windows.ApplicationModel.Appointments.AppointmentStore::FindConflictAsync(Windows.ApplicationModel.Appointments.Appointment)
    def find_conflict_async(self, appointment: Appointment, /) -> windows_foundation.IAsyncOperation[AppointmentConflictResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Appointments.AppointmentConflictResult> Windows.ApplicationModel.Appointments.AppointmentStore::FindConflictAsync(Windows.ApplicationModel.Appointments.Appointment,Windows.Foundation.DateTime)
    def find_conflict_async_with_instance_start(self, appointment: Appointment, instance_start_time: datetime.datetime, /) -> windows_foundation.IAsyncOperation[AppointmentConflictResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<System.String>> Windows.ApplicationModel.Appointments.AppointmentStore::FindLocalIdsFromRoamingIdAsync(System.String)
    def find_local_ids_from_roaming_id_async(self, roaming_id: str, /) -> windows_foundation.IAsyncOperation[typing.Sequence[str]]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Appointments.Appointment> Windows.ApplicationModel.Appointments.AppointmentStore::GetAppointmentAsync(System.String)
    def get_appointment_async(self, local_id: str, /) -> windows_foundation.IAsyncOperation[Appointment]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Appointments.AppointmentCalendar> Windows.ApplicationModel.Appointments.AppointmentStore::GetAppointmentCalendarAsync(System.String)
    def get_appointment_calendar_async(self, calendar_id: str, /) -> windows_foundation.IAsyncOperation[AppointmentCalendar]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Appointments.Appointment> Windows.ApplicationModel.Appointments.AppointmentStore::GetAppointmentInstanceAsync(System.String,Windows.Foundation.DateTime)
    def get_appointment_instance_async(self, local_id: str, instance_start_time: datetime.datetime, /) -> windows_foundation.IAsyncOperation[Appointment]: ...
    # Windows.ApplicationModel.Appointments.AppointmentStoreChangeTracker Windows.ApplicationModel.Appointments.AppointmentStore::GetChangeTracker(System.String)
    def get_change_tracker(self, identity: str, /) -> AppointmentStoreChangeTracker: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Appointments.AppointmentStore::MoveAppointmentAsync(Windows.ApplicationModel.Appointments.Appointment,Windows.ApplicationModel.Appointments.AppointmentCalendar)
    def move_appointment_async(self, appointment: Appointment, destination_calendar: AppointmentCalendar, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Appointments.AppointmentStore::ShowAddAppointmentAsync(Windows.ApplicationModel.Appointments.Appointment,Windows.Foundation.Rect)
    def show_add_appointment_async(self, appointment: Appointment, selection: windows_foundation.Rect, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Appointments.AppointmentStore::ShowAppointmentDetailsAsync(System.String)
    def show_appointment_details_async(self, local_id: str, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.ApplicationModel.Appointments.AppointmentStore::ShowAppointmentDetailsAsync(System.String,Windows.Foundation.DateTime)
    def show_appointment_details_with_date_async(self, local_id: str, instance_start_date: datetime.datetime, /) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Appointments.AppointmentStore::ShowEditNewAppointmentAsync(Windows.ApplicationModel.Appointments.Appointment)
    def show_edit_new_appointment_async(self, appointment: Appointment, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Appointments.AppointmentStore::ShowRemoveAppointmentAsync(System.String,Windows.Foundation.Rect)
    def show_remove_appointment_async(self, local_id: str, selection: windows_foundation.Rect, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Appointments.AppointmentStore::ShowRemoveAppointmentAsync(System.String,Windows.Foundation.Rect,Windows.UI.Popups.Placement,Windows.Foundation.DateTime)
    def show_remove_appointment_with_placement_and_date_async(self, local_id: str, selection: windows_foundation.Rect, preferred_placement: windows_ui_popups.Placement, instance_start_date: datetime.datetime, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Appointments.AppointmentStore::ShowReplaceAppointmentAsync(System.String,Windows.ApplicationModel.Appointments.Appointment,Windows.Foundation.Rect)
    def show_replace_appointment_async(self, local_id: str, appointment: Appointment, selection: windows_foundation.Rect, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.IAsyncOperation`1<System.String> Windows.ApplicationModel.Appointments.AppointmentStore::ShowReplaceAppointmentAsync(System.String,Windows.ApplicationModel.Appointments.Appointment,Windows.Foundation.Rect,Windows.UI.Popups.Placement,Windows.Foundation.DateTime)
    def show_replace_appointment_with_placement_and_date_async(self, local_id: str, appointment: Appointment, selection: windows_foundation.Rect, preferred_placement: windows_ui_popups.Placement, instance_start_date: datetime.datetime, /) -> windows_foundation.IAsyncOperation[str]: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Appointments.AppointmentStore::add_StoreChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Appointments.AppointmentStore,Windows.ApplicationModel.Appointments.AppointmentStoreChangedEventArgs>)
    def add_store_changed(self, p_handler: windows_foundation.TypedEventHandler[AppointmentStore, AppointmentStoreChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentStore::remove_StoreChanged(Windows.Foundation.EventRegistrationToken)
    def remove_store_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.ApplicationModel.Appointments.AppointmentStoreChangeTracker Windows.ApplicationModel.Appointments.AppointmentStore::get_ChangeTracker()
    @_property
    def change_tracker(self) -> AppointmentStoreChangeTracker: ...

@typing.final
class AppointmentStoreChange(winrt.system.Object):
    # Windows.ApplicationModel.Appointments.Appointment Windows.ApplicationModel.Appointments.AppointmentStoreChange::get_Appointment()
    @_property
    def appointment(self) -> Appointment: ...
    # Windows.ApplicationModel.Appointments.AppointmentStoreChangeType Windows.ApplicationModel.Appointments.AppointmentStoreChange::get_ChangeType()
    @_property
    def change_type(self) -> AppointmentStoreChangeType: ...
    # Windows.ApplicationModel.Appointments.AppointmentCalendar Windows.ApplicationModel.Appointments.AppointmentStoreChange::get_AppointmentCalendar()
    @_property
    def appointment_calendar(self) -> AppointmentCalendar: ...

@typing.final
class AppointmentStoreChangeReader(winrt.system.Object):
    # System.Void Windows.ApplicationModel.Appointments.AppointmentStoreChangeReader::AcceptChanges()
    def accept_changes(self) -> None: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentStoreChangeReader::AcceptChangesThrough(Windows.ApplicationModel.Appointments.AppointmentStoreChange)
    def accept_changes_through(self, last_change_to_accept: AppointmentStoreChange, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Appointments.AppointmentStoreChange>> Windows.ApplicationModel.Appointments.AppointmentStoreChangeReader::ReadBatchAsync()
    def read_batch_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[AppointmentStoreChange]]: ...

@typing.final
class AppointmentStoreChangeTracker(winrt.system.Object):
    # System.Void Windows.ApplicationModel.Appointments.AppointmentStoreChangeTracker::Enable()
    def enable(self) -> None: ...
    # Windows.ApplicationModel.Appointments.AppointmentStoreChangeReader Windows.ApplicationModel.Appointments.AppointmentStoreChangeTracker::GetChangeReader()
    def get_change_reader(self) -> AppointmentStoreChangeReader: ...
    # System.Void Windows.ApplicationModel.Appointments.AppointmentStoreChangeTracker::Reset()
    def reset(self) -> None: ...
    # System.Boolean Windows.ApplicationModel.Appointments.AppointmentStoreChangeTracker::get_IsTracking()
    @_property
    def is_tracking(self) -> bool: ...

@typing.final
class AppointmentStoreChangedDeferral(winrt.system.Object):
    # System.Void Windows.ApplicationModel.Appointments.AppointmentStoreChangedDeferral::Complete()
    def complete(self) -> None: ...

@typing.final
class AppointmentStoreChangedEventArgs(winrt.system.Object):
    # Windows.ApplicationModel.Appointments.AppointmentStoreChangedDeferral Windows.ApplicationModel.Appointments.AppointmentStoreChangedEventArgs::GetDeferral()
    def get_deferral(self) -> AppointmentStoreChangedDeferral: ...

@typing.final
class AppointmentStoreNotificationTriggerDetails(winrt.system.Object):
    pass

@typing.final
class FindAppointmentsOptions(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.UInt32 Windows.ApplicationModel.Appointments.FindAppointmentsOptions::get_MaxCount()
    @_property
    def max_count(self) -> winrt.system.UInt32: ...
    # System.Void Windows.ApplicationModel.Appointments.FindAppointmentsOptions::put_MaxCount(System.UInt32)
    @max_count.setter
    def max_count(self, value: winrt.system.UInt32) -> None: ...
    # System.Boolean Windows.ApplicationModel.Appointments.FindAppointmentsOptions::get_IncludeHidden()
    @_property
    def include_hidden(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Appointments.FindAppointmentsOptions::put_IncludeHidden(System.Boolean)
    @include_hidden.setter
    def include_hidden(self, value: bool) -> None: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Windows.ApplicationModel.Appointments.FindAppointmentsOptions::get_CalendarIds()
    @_property
    def calendar_ids(self) -> typing.MutableSequence[str]: ...
    # Windows.Foundation.Collections.IVector`1<System.String> Windows.ApplicationModel.Appointments.FindAppointmentsOptions::get_FetchProperties()
    @_property
    def fetch_properties(self) -> typing.MutableSequence[str]: ...

class ImplementsIAppointmentParticipant():
    pass

@typing.final
class IAppointmentParticipant(winrt.system.Object, ImplementsIAppointmentParticipant):
    # System.String Windows.ApplicationModel.Appointments.IAppointmentParticipant::get_Address()
    @_property
    def address(self) -> str: ...
    # System.Void Windows.ApplicationModel.Appointments.IAppointmentParticipant::put_Address(System.String)
    @address.setter
    def address(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Appointments.IAppointmentParticipant::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Appointments.IAppointmentParticipant::put_DisplayName(System.String)
    @display_name.setter
    def display_name(self, value: str) -> None: ...

