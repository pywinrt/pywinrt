# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.system
import winrt.windows.ui
import winrt.windows.ui.popups

from winrt.windows.applicationmodel.appointments import AppointmentBusyStatus, AppointmentCalendarOtherAppReadAccess, AppointmentCalendarOtherAppWriteAccess, AppointmentCalendarSyncStatus, AppointmentConflictType, AppointmentDaysOfWeek, AppointmentDetailsKind, AppointmentParticipantResponse, AppointmentParticipantRole, AppointmentRecurrenceUnit, AppointmentSensitivity, AppointmentStoreAccessType, AppointmentStoreChangeType, AppointmentSummaryCardView, AppointmentWeekOfMonth, FindAppointmentCalendarsOptions, RecurrenceType

Self = typing.TypeVar('Self')

@typing.final
class Appointment(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Appointment: ...
    def __new__(cls: typing.Type[Appointment]) -> Appointment:...
    @_property
    def location(self) -> str: ...
    @location.setter
    def location(self, value: str) -> None: ...
    @_property
    def all_day(self) -> bool: ...
    @all_day.setter
    def all_day(self, value: bool) -> None: ...
    @_property
    def organizer(self) -> typing.Optional[AppointmentOrganizer]: ...
    @organizer.setter
    def organizer(self, value: typing.Optional[AppointmentOrganizer]) -> None: ...
    @_property
    def duration(self) -> datetime.timedelta: ...
    @duration.setter
    def duration(self, value: datetime.timedelta) -> None: ...
    @_property
    def details(self) -> str: ...
    @details.setter
    def details(self, value: str) -> None: ...
    @_property
    def busy_status(self) -> AppointmentBusyStatus: ...
    @busy_status.setter
    def busy_status(self, value: AppointmentBusyStatus) -> None: ...
    @_property
    def recurrence(self) -> typing.Optional[AppointmentRecurrence]: ...
    @recurrence.setter
    def recurrence(self, value: typing.Optional[AppointmentRecurrence]) -> None: ...
    @_property
    def subject(self) -> str: ...
    @subject.setter
    def subject(self, value: str) -> None: ...
    @_property
    def uri(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @uri.setter
    def uri(self, value: typing.Optional[winrt.windows.foundation.Uri]) -> None: ...
    @_property
    def start_time(self) -> datetime.datetime: ...
    @start_time.setter
    def start_time(self, value: datetime.datetime) -> None: ...
    @_property
    def sensitivity(self) -> AppointmentSensitivity: ...
    @sensitivity.setter
    def sensitivity(self, value: AppointmentSensitivity) -> None: ...
    @_property
    def reminder(self) -> typing.Optional[typing.Optional[datetime.timedelta]]: ...
    @reminder.setter
    def reminder(self, value: typing.Optional[typing.Optional[datetime.timedelta]]) -> None: ...
    @_property
    def invitees(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[AppointmentInvitee]]: ...
    @_property
    def allow_new_time_proposal(self) -> bool: ...
    @allow_new_time_proposal.setter
    def allow_new_time_proposal(self, value: bool) -> None: ...
    @_property
    def user_response(self) -> AppointmentParticipantResponse: ...
    @user_response.setter
    def user_response(self, value: AppointmentParticipantResponse) -> None: ...
    @_property
    def roaming_id(self) -> str: ...
    @roaming_id.setter
    def roaming_id(self, value: str) -> None: ...
    @_property
    def reply_time(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @reply_time.setter
    def reply_time(self, value: typing.Optional[typing.Optional[datetime.datetime]]) -> None: ...
    @_property
    def is_response_requested(self) -> bool: ...
    @is_response_requested.setter
    def is_response_requested(self, value: bool) -> None: ...
    @_property
    def is_organized_by_user(self) -> bool: ...
    @is_organized_by_user.setter
    def is_organized_by_user(self, value: bool) -> None: ...
    @_property
    def is_canceled_meeting(self) -> bool: ...
    @is_canceled_meeting.setter
    def is_canceled_meeting(self, value: bool) -> None: ...
    @_property
    def online_meeting_link(self) -> str: ...
    @online_meeting_link.setter
    def online_meeting_link(self, value: str) -> None: ...
    @_property
    def has_invitees(self) -> bool: ...
    @_property
    def calendar_id(self) -> str: ...
    @_property
    def local_id(self) -> str: ...
    @_property
    def original_start_time(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @_property
    def remote_change_number(self) -> winrt.system.UInt64: ...
    @remote_change_number.setter
    def remote_change_number(self, value: winrt.system.UInt64) -> None: ...
    @_property
    def details_kind(self) -> AppointmentDetailsKind: ...
    @details_kind.setter
    def details_kind(self, value: AppointmentDetailsKind) -> None: ...
    @_property
    def change_number(self) -> winrt.system.UInt64: ...

@typing.final
class AppointmentCalendar(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentCalendar: ...
    def delete_appointment_async(self, local_id: str, /) -> winrt.windows.foundation.IAsyncAction: ...
    def delete_appointment_instance_async(self, local_id: str, instance_start_time: datetime.datetime, /) -> winrt.windows.foundation.IAsyncAction: ...
    def delete_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def find_all_instances_async(self, master_local_id: str, range_start: datetime.datetime, range_length: datetime.timedelta, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[Appointment]]: ...
    @typing.overload
    def find_all_instances_async(self, master_local_id: str, range_start: datetime.datetime, range_length: datetime.timedelta, p_options: typing.Optional[FindAppointmentsOptions], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[Appointment]]: ...
    @typing.overload
    def find_appointments_async(self, range_start: datetime.datetime, range_length: datetime.timedelta, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[Appointment]]: ...
    @typing.overload
    def find_appointments_async(self, range_start: datetime.datetime, range_length: datetime.timedelta, options: typing.Optional[FindAppointmentsOptions], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[Appointment]]: ...
    def find_exceptions_from_master_async(self, master_local_id: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[AppointmentException]]: ...
    @typing.overload
    def find_unexpanded_appointments_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[Appointment]]: ...
    @typing.overload
    def find_unexpanded_appointments_async(self, options: typing.Optional[FindAppointmentsOptions], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[Appointment]]: ...
    def get_appointment_async(self, local_id: str, /) -> winrt.windows.foundation.IAsyncOperation[Appointment]: ...
    def get_appointment_instance_async(self, local_id: str, instance_start_time: datetime.datetime, /) -> winrt.windows.foundation.IAsyncOperation[Appointment]: ...
    def register_sync_manager_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def save_appointment_async(self, p_appointment: typing.Optional[Appointment], /) -> winrt.windows.foundation.IAsyncAction: ...
    def save_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def try_cancel_meeting_async(self, meeting: typing.Optional[Appointment], subject: str, comment: str, notify_invitees: bool, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_create_or_update_appointment_async(self, appointment: typing.Optional[Appointment], notify_invitees: bool, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_forward_meeting_async(self, meeting: typing.Optional[Appointment], invitees: typing.Iterable[AppointmentInvitee], subject: str, forward_header: str, comment: str, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_propose_new_time_for_meeting_async(self, meeting: typing.Optional[Appointment], new_start_time: datetime.datetime, new_duration: datetime.timedelta, subject: str, comment: str, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def try_update_meeting_response_async(self, meeting: typing.Optional[Appointment], response: AppointmentParticipantResponse, subject: str, comment: str, send_update: bool, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @_property
    def summary_card_view(self) -> AppointmentSummaryCardView: ...
    @summary_card_view.setter
    def summary_card_view(self, value: AppointmentSummaryCardView) -> None: ...
    @_property
    def other_app_write_access(self) -> AppointmentCalendarOtherAppWriteAccess: ...
    @other_app_write_access.setter
    def other_app_write_access(self, value: AppointmentCalendarOtherAppWriteAccess) -> None: ...
    @_property
    def display_color(self) -> winrt.windows.ui.Color: ...
    @display_color.setter
    def display_color(self, value: winrt.windows.ui.Color) -> None: ...
    @_property
    def is_hidden(self) -> bool: ...
    @is_hidden.setter
    def is_hidden(self, value: bool) -> None: ...
    @_property
    def display_name(self) -> str: ...
    @display_name.setter
    def display_name(self, value: str) -> None: ...
    @_property
    def other_app_read_access(self) -> AppointmentCalendarOtherAppReadAccess: ...
    @other_app_read_access.setter
    def other_app_read_access(self, value: AppointmentCalendarOtherAppReadAccess) -> None: ...
    @_property
    def local_id(self) -> str: ...
    @_property
    def source_display_name(self) -> str: ...
    @_property
    def can_cancel_meetings(self) -> bool: ...
    @can_cancel_meetings.setter
    def can_cancel_meetings(self, value: bool) -> None: ...
    @_property
    def can_notify_invitees(self) -> bool: ...
    @can_notify_invitees.setter
    def can_notify_invitees(self, value: bool) -> None: ...
    @_property
    def remote_id(self) -> str: ...
    @remote_id.setter
    def remote_id(self, value: str) -> None: ...
    @_property
    def must_nofity_invitees(self) -> bool: ...
    @must_nofity_invitees.setter
    def must_nofity_invitees(self, value: bool) -> None: ...
    @_property
    def can_update_meeting_responses(self) -> bool: ...
    @can_update_meeting_responses.setter
    def can_update_meeting_responses(self, value: bool) -> None: ...
    @_property
    def can_propose_new_time_for_meetings(self) -> bool: ...
    @can_propose_new_time_for_meetings.setter
    def can_propose_new_time_for_meetings(self, value: bool) -> None: ...
    @_property
    def can_create_or_update_appointments(self) -> bool: ...
    @can_create_or_update_appointments.setter
    def can_create_or_update_appointments(self, value: bool) -> None: ...
    @_property
    def can_forward_meetings(self) -> bool: ...
    @can_forward_meetings.setter
    def can_forward_meetings(self, value: bool) -> None: ...
    @_property
    def sync_manager(self) -> typing.Optional[AppointmentCalendarSyncManager]: ...
    @_property
    def user_data_account_id(self) -> str: ...

@typing.final
class AppointmentCalendarSyncManager(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentCalendarSyncManager: ...
    def sync_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def add_sync_status_changed(self, handler: winrt.windows.foundation.TypedEventHandler[AppointmentCalendarSyncManager, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_sync_status_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def status(self) -> AppointmentCalendarSyncStatus: ...
    @status.setter
    def status(self, value: AppointmentCalendarSyncStatus) -> None: ...
    @_property
    def last_successful_sync_time(self) -> datetime.datetime: ...
    @last_successful_sync_time.setter
    def last_successful_sync_time(self, value: datetime.datetime) -> None: ...
    @_property
    def last_attempted_sync_time(self) -> datetime.datetime: ...
    @last_attempted_sync_time.setter
    def last_attempted_sync_time(self, value: datetime.datetime) -> None: ...

@typing.final
class AppointmentConflictResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentConflictResult: ...
    @_property
    def date(self) -> datetime.datetime: ...
    @_property
    def type(self) -> AppointmentConflictType: ...

@typing.final
class AppointmentException(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentException: ...
    @_property
    def appointment(self) -> typing.Optional[Appointment]: ...
    @_property
    def exception_properties(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[str]]: ...
    @_property
    def is_deleted(self) -> bool: ...

@typing.final
class AppointmentInvitee(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentInvitee: ...
    def __new__(cls: typing.Type[AppointmentInvitee]) -> AppointmentInvitee:...
    @_property
    def role(self) -> AppointmentParticipantRole: ...
    @role.setter
    def role(self, value: AppointmentParticipantRole) -> None: ...
    @_property
    def response(self) -> AppointmentParticipantResponse: ...
    @response.setter
    def response(self, value: AppointmentParticipantResponse) -> None: ...
    @_property
    def display_name(self) -> str: ...
    @display_name.setter
    def display_name(self, value: str) -> None: ...
    @_property
    def address(self) -> str: ...
    @address.setter
    def address(self, value: str) -> None: ...

@typing.final
class AppointmentManager_Static(type):
    def get_for_user(cls, user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[AppointmentManagerForUser]: ...
    def request_store_async(cls, options: AppointmentStoreAccessType, /) -> winrt.windows.foundation.IAsyncOperation[AppointmentStore]: ...
    @typing.overload
    def show_add_appointment_async(cls, appointment: typing.Optional[Appointment], selection: winrt.windows.foundation.Rect, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    @typing.overload
    def show_add_appointment_async(cls, appointment: typing.Optional[Appointment], selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    @typing.overload
    def show_appointment_details_async(cls, appointment_id: str, /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def show_appointment_details_async(cls, appointment_id: str, instance_start_date: datetime.datetime, /) -> winrt.windows.foundation.IAsyncAction: ...
    def show_edit_new_appointment_async(cls, appointment: typing.Optional[Appointment], /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    @typing.overload
    def show_remove_appointment_async(cls, appointment_id: str, selection: winrt.windows.foundation.Rect, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def show_remove_appointment_async(cls, appointment_id: str, selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def show_remove_appointment_async(cls, appointment_id: str, selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, instance_start_date: datetime.datetime, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def show_replace_appointment_async(cls, appointment_id: str, appointment: typing.Optional[Appointment], selection: winrt.windows.foundation.Rect, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    @typing.overload
    def show_replace_appointment_async(cls, appointment_id: str, appointment: typing.Optional[Appointment], selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    @typing.overload
    def show_replace_appointment_async(cls, appointment_id: str, appointment: typing.Optional[Appointment], selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, instance_start_date: datetime.datetime, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def show_time_frame_async(cls, time_to_show: datetime.datetime, duration: datetime.timedelta, /) -> winrt.windows.foundation.IAsyncAction: ...

@typing.final
class AppointmentManager(winrt.system.Object, metaclass=AppointmentManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentManager: ...

@typing.final
class AppointmentManagerForUser(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentManagerForUser: ...
    def request_store_async(self, options: AppointmentStoreAccessType, /) -> winrt.windows.foundation.IAsyncOperation[AppointmentStore]: ...
    @typing.overload
    def show_add_appointment_async(self, appointment: typing.Optional[Appointment], selection: winrt.windows.foundation.Rect, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    @typing.overload
    def show_add_appointment_async(self, appointment: typing.Optional[Appointment], selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    @typing.overload
    def show_appointment_details_async(self, appointment_id: str, /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def show_appointment_details_async(self, appointment_id: str, instance_start_date: datetime.datetime, /) -> winrt.windows.foundation.IAsyncAction: ...
    def show_edit_new_appointment_async(self, appointment: typing.Optional[Appointment], /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    @typing.overload
    def show_remove_appointment_async(self, appointment_id: str, selection: winrt.windows.foundation.Rect, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def show_remove_appointment_async(self, appointment_id: str, selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def show_remove_appointment_async(self, appointment_id: str, selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, instance_start_date: datetime.datetime, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def show_replace_appointment_async(self, appointment_id: str, appointment: typing.Optional[Appointment], selection: winrt.windows.foundation.Rect, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    @typing.overload
    def show_replace_appointment_async(self, appointment_id: str, appointment: typing.Optional[Appointment], selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    @typing.overload
    def show_replace_appointment_async(self, appointment_id: str, appointment: typing.Optional[Appointment], selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, instance_start_date: datetime.datetime, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def show_time_frame_async(self, time_to_show: datetime.datetime, duration: datetime.timedelta, /) -> winrt.windows.foundation.IAsyncAction: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...

@typing.final
class AppointmentOrganizer(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentOrganizer: ...
    def __new__(cls: typing.Type[AppointmentOrganizer]) -> AppointmentOrganizer:...
    @_property
    def display_name(self) -> str: ...
    @display_name.setter
    def display_name(self, value: str) -> None: ...
    @_property
    def address(self) -> str: ...
    @address.setter
    def address(self, value: str) -> None: ...

@typing.final
class AppointmentProperties_Static(type):
    @_property
    def has_invitees(cls) -> str: ...
    @_property
    def all_day(cls) -> str: ...
    @_property
    def allow_new_time_proposal(cls) -> str: ...
    @_property
    def busy_status(cls) -> str: ...
    @_property
    def default_properties(cls) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...
    @_property
    def details(cls) -> str: ...
    @_property
    def duration(cls) -> str: ...
    @_property
    def recurrence(cls) -> str: ...
    @_property
    def invitees(cls) -> str: ...
    @_property
    def is_canceled_meeting(cls) -> str: ...
    @_property
    def is_organized_by_user(cls) -> str: ...
    @_property
    def is_response_requested(cls) -> str: ...
    @_property
    def location(cls) -> str: ...
    @_property
    def online_meeting_link(cls) -> str: ...
    @_property
    def organizer(cls) -> str: ...
    @_property
    def original_start_time(cls) -> str: ...
    @_property
    def reminder(cls) -> str: ...
    @_property
    def reply_time(cls) -> str: ...
    @_property
    def sensitivity(cls) -> str: ...
    @_property
    def start_time(cls) -> str: ...
    @_property
    def subject(cls) -> str: ...
    @_property
    def uri(cls) -> str: ...
    @_property
    def user_response(cls) -> str: ...
    @_property
    def details_kind(cls) -> str: ...
    @_property
    def remote_change_number(cls) -> str: ...
    @_property
    def change_number(cls) -> str: ...

@typing.final
class AppointmentProperties(winrt.system.Object, metaclass=AppointmentProperties_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentProperties: ...

@typing.final
class AppointmentRecurrence(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentRecurrence: ...
    def __new__(cls: typing.Type[AppointmentRecurrence]) -> AppointmentRecurrence:...
    @_property
    def unit(self) -> AppointmentRecurrenceUnit: ...
    @unit.setter
    def unit(self, value: AppointmentRecurrenceUnit) -> None: ...
    @_property
    def occurrences(self) -> typing.Optional[typing.Optional[winrt.system.UInt32]]: ...
    @occurrences.setter
    def occurrences(self, value: typing.Optional[typing.Optional[winrt.system.UInt32]]) -> None: ...
    @_property
    def month(self) -> winrt.system.UInt32: ...
    @month.setter
    def month(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def interval(self) -> winrt.system.UInt32: ...
    @interval.setter
    def interval(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def days_of_week(self) -> AppointmentDaysOfWeek: ...
    @days_of_week.setter
    def days_of_week(self, value: AppointmentDaysOfWeek) -> None: ...
    @_property
    def day(self) -> winrt.system.UInt32: ...
    @day.setter
    def day(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def week_of_month(self) -> AppointmentWeekOfMonth: ...
    @week_of_month.setter
    def week_of_month(self, value: AppointmentWeekOfMonth) -> None: ...
    @_property
    def until(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @until.setter
    def until(self, value: typing.Optional[typing.Optional[datetime.datetime]]) -> None: ...
    @_property
    def time_zone(self) -> str: ...
    @time_zone.setter
    def time_zone(self, value: str) -> None: ...
    @_property
    def recurrence_type(self) -> RecurrenceType: ...
    @_property
    def calendar_identifier(self) -> str: ...

@typing.final
class AppointmentStore(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentStore: ...
    @typing.overload
    def create_appointment_calendar_async(self, name: str, /) -> winrt.windows.foundation.IAsyncOperation[AppointmentCalendar]: ...
    @typing.overload
    def create_appointment_calendar_async(self, name: str, user_data_account_id: str, /) -> winrt.windows.foundation.IAsyncOperation[AppointmentCalendar]: ...
    @typing.overload
    def find_appointment_calendars_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[AppointmentCalendar]]: ...
    @typing.overload
    def find_appointment_calendars_async(self, options: FindAppointmentCalendarsOptions, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[AppointmentCalendar]]: ...
    @typing.overload
    def find_appointments_async(self, range_start: datetime.datetime, range_length: datetime.timedelta, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[Appointment]]: ...
    @typing.overload
    def find_appointments_async(self, range_start: datetime.datetime, range_length: datetime.timedelta, options: typing.Optional[FindAppointmentsOptions], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[Appointment]]: ...
    @typing.overload
    def find_conflict_async(self, appointment: typing.Optional[Appointment], /) -> winrt.windows.foundation.IAsyncOperation[AppointmentConflictResult]: ...
    @typing.overload
    def find_conflict_async(self, appointment: typing.Optional[Appointment], instance_start_time: datetime.datetime, /) -> winrt.windows.foundation.IAsyncOperation[AppointmentConflictResult]: ...
    def find_local_ids_from_roaming_id_async(self, roaming_id: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[str]]: ...
    def get_appointment_async(self, local_id: str, /) -> winrt.windows.foundation.IAsyncOperation[Appointment]: ...
    def get_appointment_calendar_async(self, calendar_id: str, /) -> winrt.windows.foundation.IAsyncOperation[AppointmentCalendar]: ...
    def get_appointment_instance_async(self, local_id: str, instance_start_time: datetime.datetime, /) -> winrt.windows.foundation.IAsyncOperation[Appointment]: ...
    def get_change_tracker(self, identity: str, /) -> typing.Optional[AppointmentStoreChangeTracker]: ...
    def move_appointment_async(self, appointment: typing.Optional[Appointment], destination_calendar: typing.Optional[AppointmentCalendar], /) -> winrt.windows.foundation.IAsyncAction: ...
    def show_add_appointment_async(self, appointment: typing.Optional[Appointment], selection: winrt.windows.foundation.Rect, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    @typing.overload
    def show_appointment_details_async(self, local_id: str, /) -> winrt.windows.foundation.IAsyncAction: ...
    @typing.overload
    def show_appointment_details_async(self, local_id: str, instance_start_date: datetime.datetime, /) -> winrt.windows.foundation.IAsyncAction: ...
    def show_edit_new_appointment_async(self, appointment: typing.Optional[Appointment], /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    @typing.overload
    def show_remove_appointment_async(self, local_id: str, selection: winrt.windows.foundation.Rect, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def show_remove_appointment_async(self, local_id: str, selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, instance_start_date: datetime.datetime, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @typing.overload
    def show_replace_appointment_async(self, local_id: str, appointment: typing.Optional[Appointment], selection: winrt.windows.foundation.Rect, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    @typing.overload
    def show_replace_appointment_async(self, local_id: str, appointment: typing.Optional[Appointment], selection: winrt.windows.foundation.Rect, preferred_placement: winrt.windows.ui.popups.Placement, instance_start_date: datetime.datetime, /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def add_store_changed(self, p_handler: winrt.windows.foundation.TypedEventHandler[AppointmentStore, AppointmentStoreChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_store_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def change_tracker(self) -> typing.Optional[AppointmentStoreChangeTracker]: ...

@typing.final
class AppointmentStoreChange(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentStoreChange: ...
    @_property
    def appointment(self) -> typing.Optional[Appointment]: ...
    @_property
    def change_type(self) -> AppointmentStoreChangeType: ...
    @_property
    def appointment_calendar(self) -> typing.Optional[AppointmentCalendar]: ...

@typing.final
class AppointmentStoreChangeReader(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentStoreChangeReader: ...
    def accept_changes(self) -> None: ...
    def accept_changes_through(self, last_change_to_accept: typing.Optional[AppointmentStoreChange], /) -> None: ...
    def read_batch_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[AppointmentStoreChange]]: ...

@typing.final
class AppointmentStoreChangeTracker(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentStoreChangeTracker: ...
    def enable(self) -> None: ...
    def get_change_reader(self) -> typing.Optional[AppointmentStoreChangeReader]: ...
    def reset(self) -> None: ...
    @_property
    def is_tracking(self) -> bool: ...

@typing.final
class AppointmentStoreChangedDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentStoreChangedDeferral: ...
    def complete(self) -> None: ...

@typing.final
class AppointmentStoreChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentStoreChangedEventArgs: ...
    def get_deferral(self) -> typing.Optional[AppointmentStoreChangedDeferral]: ...

@typing.final
class AppointmentStoreNotificationTriggerDetails(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentStoreNotificationTriggerDetails: ...

@typing.final
class FindAppointmentsOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FindAppointmentsOptions: ...
    def __new__(cls: typing.Type[FindAppointmentsOptions]) -> FindAppointmentsOptions:...
    @_property
    def max_count(self) -> winrt.system.UInt32: ...
    @max_count.setter
    def max_count(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def include_hidden(self) -> bool: ...
    @include_hidden.setter
    def include_hidden(self, value: bool) -> None: ...
    @_property
    def calendar_ids(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...
    @_property
    def fetch_properties(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[str]]: ...

@typing.final
class IAppointmentParticipant(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IAppointmentParticipant: ...
    @_property
    def address(self) -> str: ...
    @address.setter
    def address(self, value: str) -> None: ...
    @_property
    def display_name(self) -> str: ...
    @display_name.setter
    def display_name(self, value: str) -> None: ...

