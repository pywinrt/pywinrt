# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.devices.spi.provider as windows_devices_spi_provider
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections

from winrt.windows.devices.spi import SpiMode, SpiSharingMode

Self = typing.TypeVar('Self')

@typing.final
class SpiBusInfo(winrt.system.Object):
    @_property
    def chip_select_line_count(self) -> winrt.system.Int32: ...
    @_property
    def max_clock_frequency(self) -> winrt.system.Int32: ...
    @_property
    def min_clock_frequency(self) -> winrt.system.Int32: ...
    @_property
    def supported_data_bit_lengths(self) -> typing.Sequence[winrt.system.Int32]: ...

@typing.final
class SpiConnectionSettings(winrt.system.Object):
    def __new__(cls: typing.Type[Self], chip_select_line: winrt.system.Int32) -> Self: ...
    @_property
    def sharing_mode(self) -> SpiSharingMode: ...
    @sharing_mode.setter
    def sharing_mode(self, value: SpiSharingMode) -> None: ...
    @_property
    def mode(self) -> SpiMode: ...
    @mode.setter
    def mode(self, value: SpiMode) -> None: ...
    @_property
    def data_bit_length(self) -> winrt.system.Int32: ...
    @data_bit_length.setter
    def data_bit_length(self, value: winrt.system.Int32) -> None: ...
    @_property
    def clock_frequency(self) -> winrt.system.Int32: ...
    @clock_frequency.setter
    def clock_frequency(self, value: winrt.system.Int32) -> None: ...
    @_property
    def chip_select_line(self) -> winrt.system.Int32: ...
    @chip_select_line.setter
    def chip_select_line(self, value: winrt.system.Int32) -> None: ...

@typing.final
class SpiController_Static(type):
    def get_controllers_async(cls, provider: windows_devices_spi_provider.ImplementsISpiProvider, /) -> windows_foundation.IAsyncOperation[typing.Sequence[SpiController]]: ...
    def get_default_async(cls) -> windows_foundation.IAsyncOperation[SpiController]: ...

@typing.final
class SpiController(winrt.system.Object, metaclass=SpiController_Static):
    def get_device(self, settings: SpiConnectionSettings, /) -> SpiDevice: ...

@typing.final
class SpiDevice_Static(type):
    def from_id_async(cls, bus_id: str, settings: SpiConnectionSettings, /) -> windows_foundation.IAsyncOperation[SpiDevice]: ...
    def get_bus_info(cls, bus_id: str, /) -> SpiBusInfo: ...
    def get_device_selector(cls) -> str: ...
    def get_device_selector_from_friendly_name(cls, friendly_name: str, /) -> str: ...

@typing.final
class SpiDevice(winrt.system.Object, windows_foundation.ImplementsIClosable, metaclass=SpiDevice_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    def close(self) -> None: ...
    def read(self, buffer: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.WriteableBuffer], /) -> None: ...
    def transfer_full_duplex(self, write_buffer: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], read_buffer: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.WriteableBuffer], /) -> None: ...
    def transfer_sequential(self, write_buffer: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], read_buffer: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.WriteableBuffer], /) -> None: ...
    def write(self, buffer: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> None: ...
    @_property
    def connection_settings(self) -> SpiConnectionSettings: ...
    @_property
    def device_id(self) -> str: ...

class ImplementsISpiDeviceStatics():
    pass

@typing.final
class ISpiDeviceStatics(winrt.system.Object, ImplementsISpiDeviceStatics):
    def from_id_async(self, bus_id: str, settings: SpiConnectionSettings, /) -> windows_foundation.IAsyncOperation[SpiDevice]: ...
    def get_bus_info(self, bus_id: str, /) -> SpiBusInfo: ...
    def get_device_selector(self) -> str: ...
    def get_device_selector_from_friendly_name(self, friendly_name: str, /) -> str: ...

