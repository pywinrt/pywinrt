# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.ui.uiautomation as windows_ui_uiautomation

from winrt.windows.ui.uiautomation.core import AutomationRemoteOperationStatus

Self = typing.TypeVar('Self')

@typing.final
class AutomationAnnotationTypeRegistration:
    @_property
    def local_id(self) -> winrt.system.Int32: ...
    def __new__(cls, local_id: winrt.system.Int32 = 0) -> AutomationAnnotationTypeRegistration: ...

@typing.final
class AutomationRemoteOperationOperandId:
    @_property
    def value(self) -> winrt.system.Int32: ...
    def __new__(cls, value: winrt.system.Int32 = 0) -> AutomationRemoteOperationOperandId: ...

@typing.final
class AutomationRemoteOperationResult(winrt.system.Object):
    # System.Object Windows.UI.UIAutomation.Core.AutomationRemoteOperationResult::GetOperand(Windows.UI.UIAutomation.Core.AutomationRemoteOperationOperandId)
    def get_operand(self, operand_id: typing.Union[AutomationRemoteOperationOperandId, typing.Tuple[winrt.system.Int32]], /) -> winrt.system.Object: ...
    # System.Boolean Windows.UI.UIAutomation.Core.AutomationRemoteOperationResult::HasOperand(Windows.UI.UIAutomation.Core.AutomationRemoteOperationOperandId)
    def has_operand(self, operand_id: typing.Union[AutomationRemoteOperationOperandId, typing.Tuple[winrt.system.Int32]], /) -> bool: ...
    # System.Int32 Windows.UI.UIAutomation.Core.AutomationRemoteOperationResult::get_ErrorLocation()
    @_property
    def error_location(self) -> winrt.system.Int32: ...
    # Windows.Foundation.HResult Windows.UI.UIAutomation.Core.AutomationRemoteOperationResult::get_ExtendedError()
    @_property
    def extended_error(self) -> windows_foundation.HResult: ...
    # Windows.UI.UIAutomation.Core.AutomationRemoteOperationStatus Windows.UI.UIAutomation.Core.AutomationRemoteOperationResult::get_Status()
    @_property
    def status(self) -> AutomationRemoteOperationStatus: ...

@typing.final
class CoreAutomationRegistrar_Static(winrt._winrt.IInspectable_Static):
    # Windows.UI.UIAutomation.Core.AutomationAnnotationTypeRegistration Windows.UI.UIAutomation.Core.CoreAutomationRegistrar::RegisterAnnotationType(System.Guid)
    def register_annotation_type(cls, guid: _uuid.UUID, /) -> AutomationAnnotationTypeRegistration: ...
    # System.Void Windows.UI.UIAutomation.Core.CoreAutomationRegistrar::UnregisterAnnotationType(Windows.UI.UIAutomation.Core.AutomationAnnotationTypeRegistration)
    def unregister_annotation_type(cls, registration: typing.Union[AutomationAnnotationTypeRegistration, typing.Tuple[winrt.system.Int32]], /) -> None: ...

@typing.final
class CoreAutomationRegistrar(winrt.system.Object, metaclass=CoreAutomationRegistrar_Static):
    pass

@typing.final
class CoreAutomationRemoteOperation(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.UI.UIAutomation.Core.CoreAutomationRemoteOperation::AddToResults(Windows.UI.UIAutomation.Core.AutomationRemoteOperationOperandId)
    def add_to_results(self, operand_id: typing.Union[AutomationRemoteOperationOperandId, typing.Tuple[winrt.system.Int32]], /) -> None: ...
    # Windows.UI.UIAutomation.Core.AutomationRemoteOperationResult Windows.UI.UIAutomation.Core.CoreAutomationRemoteOperation::Execute(System.Byte[])
    def execute(self, bytecode_buffer: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> AutomationRemoteOperationResult: ...
    # System.Void Windows.UI.UIAutomation.Core.CoreAutomationRemoteOperation::ImportConnectionBoundObject(Windows.UI.UIAutomation.Core.AutomationRemoteOperationOperandId,Windows.UI.UIAutomation.AutomationConnectionBoundObject)
    def import_connection_bound_object(self, operand_id: typing.Union[AutomationRemoteOperationOperandId, typing.Tuple[winrt.system.Int32]], connection_bound_object: windows_ui_uiautomation.AutomationConnectionBoundObject, /) -> None: ...
    # System.Void Windows.UI.UIAutomation.Core.CoreAutomationRemoteOperation::ImportElement(Windows.UI.UIAutomation.Core.AutomationRemoteOperationOperandId,Windows.UI.UIAutomation.AutomationElement)
    def import_element(self, operand_id: typing.Union[AutomationRemoteOperationOperandId, typing.Tuple[winrt.system.Int32]], element: windows_ui_uiautomation.AutomationElement, /) -> None: ...
    # System.Void Windows.UI.UIAutomation.Core.CoreAutomationRemoteOperation::ImportTextRange(Windows.UI.UIAutomation.Core.AutomationRemoteOperationOperandId,Windows.UI.UIAutomation.AutomationTextRange)
    def import_text_range(self, operand_id: typing.Union[AutomationRemoteOperationOperandId, typing.Tuple[winrt.system.Int32]], text_range: windows_ui_uiautomation.AutomationTextRange, /) -> None: ...
    # System.Boolean Windows.UI.UIAutomation.Core.CoreAutomationRemoteOperation::IsOpcodeSupported(System.UInt32)
    def is_opcode_supported(self, opcode: winrt.system.UInt32, /) -> bool: ...

@typing.final
class CoreAutomationRemoteOperationContext(winrt.system.Object):
    # System.Object Windows.UI.UIAutomation.Core.CoreAutomationRemoteOperationContext::GetOperand(Windows.UI.UIAutomation.Core.AutomationRemoteOperationOperandId)
    def get_operand(self, id: typing.Union[AutomationRemoteOperationOperandId, typing.Tuple[winrt.system.Int32]], /) -> winrt.system.Object: ...
    # System.Void Windows.UI.UIAutomation.Core.CoreAutomationRemoteOperationContext::SetOperand(Windows.UI.UIAutomation.Core.AutomationRemoteOperationOperandId,System.Object)
    def set_operand(self, id: typing.Union[AutomationRemoteOperationOperandId, typing.Tuple[winrt.system.Int32]], operand: winrt.system.Object, /) -> None: ...
    # System.Void Windows.UI.UIAutomation.Core.CoreAutomationRemoteOperationContext::SetOperand(Windows.UI.UIAutomation.Core.AutomationRemoteOperationOperandId,System.Object,System.Guid)
    def set_operand2(self, id: typing.Union[AutomationRemoteOperationOperandId, typing.Tuple[winrt.system.Int32]], operand: winrt.system.Object, operand_interface_id: _uuid.UUID, /) -> None: ...

@typing.final
class RemoteAutomationClientSession(winrt.system.Object):
    @typing.overload
    def __new__(cls: typing.Type[Self], name: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], name: str, session_id: _uuid.UUID) -> Self: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.UI.UIAutomation.Core.RemoteAutomationWindow> Windows.UI.UIAutomation.Core.RemoteAutomationClientSession::CreateWindowAsync(System.UInt64,System.UInt32,System.Object)
    def create_window_async(self, remote_window_id: winrt.system.UInt64, remote_process_id: winrt.system.UInt32, parent_automation_element: winrt.system.Object, /) -> windows_foundation.IAsyncOperation[RemoteAutomationWindow]: ...
    # System.Void Windows.UI.UIAutomation.Core.RemoteAutomationClientSession::Start()
    def start(self) -> None: ...
    # System.Void Windows.UI.UIAutomation.Core.RemoteAutomationClientSession::Stop()
    def stop(self) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.UIAutomation.Core.RemoteAutomationClientSession::add_ConnectionRequested(Windows.Foundation.TypedEventHandler`2<Windows.UI.UIAutomation.Core.RemoteAutomationClientSession,Windows.UI.UIAutomation.Core.RemoteAutomationConnectionRequestedEventArgs>)
    def add_connection_requested(self, handler: windows_foundation.TypedEventHandler[RemoteAutomationClientSession, RemoteAutomationConnectionRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.UIAutomation.Core.RemoteAutomationClientSession::remove_ConnectionRequested(Windows.Foundation.EventRegistrationToken)
    def remove_connection_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.UIAutomation.Core.RemoteAutomationClientSession::add_Disconnected(Windows.Foundation.TypedEventHandler`2<Windows.UI.UIAutomation.Core.RemoteAutomationClientSession,Windows.UI.UIAutomation.Core.RemoteAutomationDisconnectedEventArgs>)
    def add_disconnected(self, handler: windows_foundation.TypedEventHandler[RemoteAutomationClientSession, RemoteAutomationDisconnectedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.UIAutomation.Core.RemoteAutomationClientSession::remove_Disconnected(Windows.Foundation.EventRegistrationToken)
    def remove_disconnected(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.Guid Windows.UI.UIAutomation.Core.RemoteAutomationClientSession::get_SessionId()
    @_property
    def session_id(self) -> _uuid.UUID: ...

@typing.final
class RemoteAutomationConnectionRequestedEventArgs(winrt.system.Object):
    # System.String Windows.UI.UIAutomation.Core.RemoteAutomationConnectionRequestedEventArgs::get_LocalPipeName()
    @_property
    def local_pipe_name(self) -> str: ...
    # System.UInt32 Windows.UI.UIAutomation.Core.RemoteAutomationConnectionRequestedEventArgs::get_RemoteProcessId()
    @_property
    def remote_process_id(self) -> winrt.system.UInt32: ...

@typing.final
class RemoteAutomationDisconnectedEventArgs(winrt.system.Object):
    # System.String Windows.UI.UIAutomation.Core.RemoteAutomationDisconnectedEventArgs::get_LocalPipeName()
    @_property
    def local_pipe_name(self) -> str: ...

@typing.final
class RemoteAutomationServer_Static(winrt._winrt.IInspectable_Static):
    # System.Void Windows.UI.UIAutomation.Core.RemoteAutomationServer::ReportSession(System.Guid)
    def report_session(cls, session_id: _uuid.UUID, /) -> None: ...

@typing.final
class RemoteAutomationServer(winrt.system.Object, metaclass=RemoteAutomationServer_Static):
    pass

@typing.final
class RemoteAutomationWindow(winrt.system.Object):
    # Windows.Foundation.IAsyncAction Windows.UI.UIAutomation.Core.RemoteAutomationWindow::UnregisterAsync()
    def unregister_async(self) -> windows_foundation.IAsyncAction: ...
    # System.Object Windows.UI.UIAutomation.Core.RemoteAutomationWindow::get_AutomationProvider()
    @_property
    def automation_provider(self) -> winrt.system.Object: ...

@typing.final
class _ICoreAutomationConnectionBoundObjectProvider: ...

class ICoreAutomationConnectionBoundObjectProvider(winrt._winrt.IInspectable):
    # System.Boolean Windows.UI.UIAutomation.Core.ICoreAutomationConnectionBoundObjectProvider::get_IsComThreadingRequired()
    @_property
    @abstractmethod
    def is_com_threading_required(self) -> bool: ...

@typing.final
class _ICoreAutomationRemoteOperationExtensionProvider: ...

class ICoreAutomationRemoteOperationExtensionProvider(winrt._winrt.IInspectable):
    # System.Void Windows.UI.UIAutomation.Core.ICoreAutomationRemoteOperationExtensionProvider::CallExtension(System.Guid,Windows.UI.UIAutomation.Core.CoreAutomationRemoteOperationContext,Windows.UI.UIAutomation.Core.AutomationRemoteOperationOperandId[])
    @abstractmethod
    def call_extension(self, extension_id: _uuid.UUID, context: CoreAutomationRemoteOperationContext, operand_ids: typing.Union[winrt.system.Array[AutomationRemoteOperationOperandId], winrt.system.ReadableBuffer], /) -> None: ...
    # System.Boolean Windows.UI.UIAutomation.Core.ICoreAutomationRemoteOperationExtensionProvider::IsExtensionSupported(System.Guid)
    @abstractmethod
    def is_extension_supported(self, extension_id: _uuid.UUID, /) -> bool: ...

