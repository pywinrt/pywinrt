# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.1.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.security.credentials as windows_security_credentials
import winrt.windows.system as windows_system

from winrt.windows.security.authentication.web.core import FindAllWebAccountsStatus, WebTokenRequestPromptType, WebTokenRequestStatus

Self = typing.TypeVar('Self')

@typing.final
class FindAllAccountsResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FindAllAccountsResult: ...
    @_property
    def accounts(self) -> typing.Optional[windows_foundation_collections.IVectorView[windows_security_credentials.WebAccount]]: ...
    @_property
    def provider_error(self) -> typing.Optional[WebProviderError]: ...
    @_property
    def status(self) -> FindAllWebAccountsStatus: ...

@typing.final
class WebAccountEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebAccountEventArgs: ...
    @_property
    def account(self) -> typing.Optional[windows_security_credentials.WebAccount]: ...

@typing.final
class WebAccountMonitor(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebAccountMonitor: ...
    def add_default_sign_in_account_changed(self, handler: windows_foundation.TypedEventHandler[WebAccountMonitor, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_default_sign_in_account_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_removed(self, handler: windows_foundation.TypedEventHandler[WebAccountMonitor, WebAccountEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_removed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_updated(self, handler: windows_foundation.TypedEventHandler[WebAccountMonitor, WebAccountEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_account_picture_updated(self, handler: windows_foundation.TypedEventHandler[WebAccountMonitor, WebAccountEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_account_picture_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class WebAuthenticationCoreManager_Static(type):
    def create_web_account_monitor(cls, web_accounts: typing.Iterable[windows_security_credentials.WebAccount], /) -> typing.Optional[WebAccountMonitor]: ...
    def find_account_async(cls, provider: typing.Optional[windows_security_credentials.WebAccountProvider], web_account_id: str, /) -> windows_foundation.IAsyncOperation[windows_security_credentials.WebAccount]: ...
    @typing.overload
    def find_account_provider_async(cls, web_account_provider_id: str, /) -> windows_foundation.IAsyncOperation[windows_security_credentials.WebAccountProvider]: ...
    @typing.overload
    def find_account_provider_async(cls, web_account_provider_id: str, authority: str, /) -> windows_foundation.IAsyncOperation[windows_security_credentials.WebAccountProvider]: ...
    @typing.overload
    def find_account_provider_async(cls, web_account_provider_id: str, authority: str, user: typing.Optional[windows_system.User], /) -> windows_foundation.IAsyncOperation[windows_security_credentials.WebAccountProvider]: ...
    @typing.overload
    def find_all_accounts_async(cls, provider: typing.Optional[windows_security_credentials.WebAccountProvider], /) -> windows_foundation.IAsyncOperation[FindAllAccountsResult]: ...
    @typing.overload
    def find_all_accounts_async(cls, provider: typing.Optional[windows_security_credentials.WebAccountProvider], client_id: str, /) -> windows_foundation.IAsyncOperation[FindAllAccountsResult]: ...
    @typing.overload
    def find_system_account_provider_async(cls, web_account_provider_id: str, /) -> windows_foundation.IAsyncOperation[windows_security_credentials.WebAccountProvider]: ...
    @typing.overload
    def find_system_account_provider_async(cls, web_account_provider_id: str, authority: str, /) -> windows_foundation.IAsyncOperation[windows_security_credentials.WebAccountProvider]: ...
    @typing.overload
    def find_system_account_provider_async(cls, web_account_provider_id: str, authority: str, user: typing.Optional[windows_system.User], /) -> windows_foundation.IAsyncOperation[windows_security_credentials.WebAccountProvider]: ...
    @typing.overload
    def get_token_silently_async(cls, request: typing.Optional[WebTokenRequest], /) -> windows_foundation.IAsyncOperation[WebTokenRequestResult]: ...
    @typing.overload
    def get_token_silently_async(cls, request: typing.Optional[WebTokenRequest], web_account: typing.Optional[windows_security_credentials.WebAccount], /) -> windows_foundation.IAsyncOperation[WebTokenRequestResult]: ...
    @typing.overload
    def request_token_async(cls, request: typing.Optional[WebTokenRequest], /) -> windows_foundation.IAsyncOperation[WebTokenRequestResult]: ...
    @typing.overload
    def request_token_async(cls, request: typing.Optional[WebTokenRequest], web_account: typing.Optional[windows_security_credentials.WebAccount], /) -> windows_foundation.IAsyncOperation[WebTokenRequestResult]: ...

@typing.final
class WebAuthenticationCoreManager(winrt.system.Object, metaclass=WebAuthenticationCoreManager_Static):
    pass

@typing.final
class WebProviderError(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebProviderError: ...
    def __new__(cls: typing.Type[WebProviderError], error_code: winrt.system.UInt32, error_message: str) -> WebProviderError: ...
    @_property
    def error_code(self) -> winrt.system.UInt32: ...
    @_property
    def error_message(self) -> str: ...
    @_property
    def properties(self) -> typing.Optional[windows_foundation_collections.IMap[str, str]]: ...

@typing.final
class WebTokenRequest(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebTokenRequest: ...
    @typing.overload
    def __new__(cls: typing.Type[WebTokenRequest], provider: typing.Optional[windows_security_credentials.WebAccountProvider], scope: str, client_id: str) -> WebTokenRequest: ...
    @typing.overload
    def __new__(cls: typing.Type[WebTokenRequest], provider: typing.Optional[windows_security_credentials.WebAccountProvider], scope: str, client_id: str, prompt_type: WebTokenRequestPromptType) -> WebTokenRequest: ...
    @typing.overload
    def __new__(cls: typing.Type[WebTokenRequest], provider: typing.Optional[windows_security_credentials.WebAccountProvider]) -> WebTokenRequest: ...
    @typing.overload
    def __new__(cls: typing.Type[WebTokenRequest], provider: typing.Optional[windows_security_credentials.WebAccountProvider], scope: str) -> WebTokenRequest: ...
    @_property
    def client_id(self) -> str: ...
    @_property
    def prompt_type(self) -> WebTokenRequestPromptType: ...
    @_property
    def properties(self) -> typing.Optional[windows_foundation_collections.IMap[str, str]]: ...
    @_property
    def scope(self) -> str: ...
    @_property
    def web_account_provider(self) -> typing.Optional[windows_security_credentials.WebAccountProvider]: ...
    @_property
    def app_properties(self) -> typing.Optional[windows_foundation_collections.IMap[str, str]]: ...
    @_property
    def correlation_id(self) -> str: ...
    @correlation_id.setter
    def correlation_id(self, value: str) -> None: ...

@typing.final
class WebTokenRequestResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebTokenRequestResult: ...
    def invalidate_cache_async(self) -> windows_foundation.IAsyncAction: ...
    @_property
    def response_data(self) -> typing.Optional[windows_foundation_collections.IVectorView[WebTokenResponse]]: ...
    @_property
    def response_error(self) -> typing.Optional[WebProviderError]: ...
    @_property
    def response_status(self) -> WebTokenRequestStatus: ...

@typing.final
class WebTokenResponse(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebTokenResponse: ...
    @typing.overload
    def __new__(cls: typing.Type[WebTokenResponse], token: str) -> WebTokenResponse: ...
    @typing.overload
    def __new__(cls: typing.Type[WebTokenResponse], token: str, web_account: typing.Optional[windows_security_credentials.WebAccount]) -> WebTokenResponse: ...
    @typing.overload
    def __new__(cls: typing.Type[WebTokenResponse], token: str, web_account: typing.Optional[windows_security_credentials.WebAccount], error: typing.Optional[WebProviderError]) -> WebTokenResponse: ...
    @typing.overload
    def __new__(cls: typing.Type[WebTokenResponse]) -> WebTokenResponse: ...
    @_property
    def properties(self) -> typing.Optional[windows_foundation_collections.IMap[str, str]]: ...
    @_property
    def provider_error(self) -> typing.Optional[WebProviderError]: ...
    @_property
    def token(self) -> str: ...
    @_property
    def web_account(self) -> typing.Optional[windows_security_credentials.WebAccount]: ...

