# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.activation as windows_applicationmodel_activation
import winrt.windows.applicationmodel.calls.background as windows_applicationmodel_calls_background
import winrt.windows.devices.bluetooth as windows_devices_bluetooth
import winrt.windows.devices.bluetooth.advertisement as windows_devices_bluetooth_advertisement
import winrt.windows.devices.bluetooth.background as windows_devices_bluetooth_background
import winrt.windows.devices.bluetooth.genericattributeprofile as windows_devices_bluetooth_genericattributeprofile
import winrt.windows.devices.geolocation as windows_devices_geolocation
import winrt.windows.devices.sensors as windows_devices_sensors
import winrt.windows.devices.smartcards as windows_devices_smartcards
import winrt.windows.devices.sms as windows_devices_sms
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.networking as windows_networking
import winrt.windows.networking.sockets as windows_networking_sockets
import winrt.windows.storage as windows_storage
import winrt.windows.storage.provider as windows_storage_provider
import winrt.windows.system as windows_system
import winrt.windows.ui.notifications as windows_ui_notifications

from winrt.windows.applicationmodel.background import AlarmAccessStatus, ApplicationTriggerResult, BackgroundAccessRequestKind, BackgroundAccessStatus, BackgroundTaskCancellationReason, BackgroundTaskThrottleCounter, BackgroundWorkCostValue, CustomSystemEventTriggerRecurrence, DeviceTriggerResult, EnergyUseLevel, LocationTriggerType, MediaProcessingTriggerResult, SystemConditionType, SystemTriggerType
from winrt.windows.applicationmodel.background import BackgroundTaskCanceledEventHandler, BackgroundTaskCompletedEventHandler, BackgroundTaskProgressEventHandler

Self = typing.TypeVar('Self')

@typing.final
class ActivitySensorTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ActivitySensorTrigger: ...
    def __new__(cls: typing.Type[Self], report_interval_in_milliseconds: winrt.system.UInt32) -> Self: ...
    @_property
    def minimum_report_interval(self) -> winrt.system.UInt32: ...
    @_property
    def report_interval(self) -> winrt.system.UInt32: ...
    @_property
    def subscribed_activities(self) -> typing.MutableSequence[windows_devices_sensors.ActivityType]: ...
    @_property
    def supported_activities(self) -> typing.Sequence[windows_devices_sensors.ActivityType]: ...

@typing.final
class AlarmApplicationManager_Static(type):
    def get_access_status(cls) -> AlarmAccessStatus: ...
    def request_access_async(cls) -> windows_foundation.IAsyncOperation[AlarmAccessStatus]: ...

@typing.final
class AlarmApplicationManager(winrt.system.Object, metaclass=AlarmApplicationManager_Static):
    pass

@typing.final
class AppBroadcastTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppBroadcastTrigger: ...
    def __new__(cls: typing.Type[Self], provider_key: str) -> Self: ...
    @_property
    def provider_info(self) -> AppBroadcastTriggerProviderInfo: ...
    @provider_info.setter
    def provider_info(self, value: AppBroadcastTriggerProviderInfo) -> None: ...

@typing.final
class AppBroadcastTriggerProviderInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppBroadcastTriggerProviderInfo: ...
    @_property
    def video_key_frame_interval(self) -> datetime.timedelta: ...
    @video_key_frame_interval.setter
    def video_key_frame_interval(self, value: datetime.timedelta) -> None: ...
    @_property
    def max_video_width(self) -> winrt.system.UInt32: ...
    @max_video_width.setter
    def max_video_width(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def max_video_height(self) -> winrt.system.UInt32: ...
    @max_video_height.setter
    def max_video_height(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def max_video_bitrate(self) -> winrt.system.UInt32: ...
    @max_video_bitrate.setter
    def max_video_bitrate(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def logo_resource(self) -> str: ...
    @logo_resource.setter
    def logo_resource(self, value: str) -> None: ...
    @_property
    def display_name_resource(self) -> str: ...
    @display_name_resource.setter
    def display_name_resource(self, value: str) -> None: ...

@typing.final
class ApplicationTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ApplicationTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    def request_async(self) -> windows_foundation.IAsyncOperation[ApplicationTriggerResult]: ...
    def request_async_with_arguments(self, arguments: windows_foundation_collections.ValueSet, /) -> windows_foundation.IAsyncOperation[ApplicationTriggerResult]: ...

@typing.final
class ApplicationTriggerDetails(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ApplicationTriggerDetails: ...
    @_property
    def arguments(self) -> windows_foundation_collections.ValueSet: ...

@typing.final
class AppointmentStoreNotificationTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppointmentStoreNotificationTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class BackgroundExecutionManager_Static(type):
    def get_access_status(cls) -> BackgroundAccessStatus: ...
    def get_access_status_for_application(cls, application_id: str, /) -> BackgroundAccessStatus: ...
    def get_access_status_for_modern_standby(cls) -> BackgroundAccessStatus: ...
    def get_access_status_for_modern_standby_for_application(cls, application_id: str, /) -> BackgroundAccessStatus: ...
    def remove_access(cls) -> None: ...
    def remove_access_for_application(cls, application_id: str, /) -> None: ...
    def request_access_async(cls) -> windows_foundation.IAsyncOperation[BackgroundAccessStatus]: ...
    def request_access_for_application_async(cls, application_id: str, /) -> windows_foundation.IAsyncOperation[BackgroundAccessStatus]: ...
    def request_access_kind_async(cls, requested_access: BackgroundAccessRequestKind, reason: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    def request_access_kind_for_modern_standby_async(cls, requested_access: BackgroundAccessRequestKind, reason: str, /) -> windows_foundation.IAsyncOperation[bool]: ...

@typing.final
class BackgroundExecutionManager(winrt.system.Object, metaclass=BackgroundExecutionManager_Static):
    pass

@typing.final
class BackgroundTaskBuilder_Static(type):
    @_property
    def is_running_task_in_standby_supported(cls) -> bool: ...

@typing.final
class BackgroundTaskBuilder(winrt.system.Object, metaclass=BackgroundTaskBuilder_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTaskBuilder: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    def add_condition(self, condition: ImplementsIBackgroundCondition, /) -> None: ...
    @typing.overload
    def register(self) -> BackgroundTaskRegistration: ...
    @typing.overload
    def register(self, task_name: str, /) -> BackgroundTaskRegistration: ...
    def set_task_entry_point_clsid(self, task_entry_point: _uuid.UUID, /) -> None: ...
    def set_trigger(self, trigger: ImplementsIBackgroundTrigger, /) -> None: ...
    def validate(self) -> bool: ...
    @_property
    def task_entry_point(self) -> str: ...
    @task_entry_point.setter
    def task_entry_point(self, value: str) -> None: ...
    @_property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @_property
    def cancel_on_condition_loss(self) -> bool: ...
    @cancel_on_condition_loss.setter
    def cancel_on_condition_loss(self, value: bool) -> None: ...
    @_property
    def is_network_requested(self) -> bool: ...
    @is_network_requested.setter
    def is_network_requested(self, value: bool) -> None: ...
    @_property
    def task_group(self) -> BackgroundTaskRegistrationGroup: ...
    @task_group.setter
    def task_group(self, value: BackgroundTaskRegistrationGroup) -> None: ...
    @_property
    def allow_running_task_in_standby(self) -> bool: ...
    @allow_running_task_in_standby.setter
    def allow_running_task_in_standby(self, value: bool) -> None: ...

@typing.final
class BackgroundTaskCompletedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTaskCompletedEventArgs: ...
    def check_result(self) -> None: ...
    @_property
    def instance_id(self) -> _uuid.UUID: ...

@typing.final
class BackgroundTaskDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTaskDeferral: ...
    def complete(self) -> None: ...

@typing.final
class BackgroundTaskProgressEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTaskProgressEventArgs: ...
    @_property
    def instance_id(self) -> _uuid.UUID: ...
    @_property
    def progress(self) -> winrt.system.UInt32: ...

@typing.final
class BackgroundTaskRegistration_Static(type):
    def get_task_group(cls, group_id: str, /) -> BackgroundTaskRegistrationGroup: ...
    @_property
    def all_tasks(cls) -> typing.Mapping[_uuid.UUID, IBackgroundTaskRegistration]: ...
    @_property
    def all_task_groups(cls) -> typing.Mapping[str, BackgroundTaskRegistrationGroup]: ...

@typing.final
class BackgroundTaskRegistration(winrt.system.Object, ImplementsIBackgroundTaskRegistration3, ImplementsIBackgroundTaskRegistration2, ImplementsIBackgroundTaskRegistration, metaclass=BackgroundTaskRegistration_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTaskRegistration: ...
    def unregister(self, cancel_task: bool, /) -> None: ...
    def add_completed(self, handler: BackgroundTaskCompletedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_completed(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_progress(self, handler: BackgroundTaskProgressEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_progress(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def name(self) -> str: ...
    @_property
    def task_id(self) -> _uuid.UUID: ...
    @_property
    def trigger(self) -> IBackgroundTrigger: ...
    @_property
    def task_group(self) -> BackgroundTaskRegistrationGroup: ...
    @_property
    def app_energy_use_prediction_contribution(self) -> winrt.system.Double: ...
    @_property
    def task_last_throttled_in_standby_timestamp(self) -> datetime.datetime: ...

@typing.final
class BackgroundTaskRegistrationGroup(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTaskRegistrationGroup: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], id: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], id: str, name: str) -> Self: ...
    def add_background_activated(self, handler: windows_foundation.TypedEventHandler[BackgroundTaskRegistrationGroup, windows_applicationmodel_activation.BackgroundActivatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_background_activated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def all_tasks(self) -> typing.Mapping[_uuid.UUID, BackgroundTaskRegistration]: ...
    @_property
    def id(self) -> str: ...
    @_property
    def name(self) -> str: ...

@typing.final
class BackgroundWorkCost_Static(type):
    @_property
    def current_background_work_cost(cls) -> BackgroundWorkCostValue: ...
    @_property
    def app_energy_use_level(cls) -> EnergyUseLevel: ...
    @_property
    def app_energy_use_prediction(cls) -> EnergyUseLevel: ...
    @_property
    def app_last_throttled_in_standby_timestamp(cls) -> datetime.datetime: ...

@typing.final
class BackgroundWorkCost(winrt.system.Object, metaclass=BackgroundWorkCost_Static):
    pass

@typing.final
class BluetoothLEAdvertisementPublisherTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BluetoothLEAdvertisementPublisherTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @_property
    def advertisement(self) -> windows_devices_bluetooth_advertisement.BluetoothLEAdvertisement: ...
    @_property
    def use_extended_format(self) -> bool: ...
    @use_extended_format.setter
    def use_extended_format(self, value: bool) -> None: ...
    @_property
    def preferred_transmit_power_level_in_dbm(self) -> typing.Optional[winrt.system.Int16]: ...
    @preferred_transmit_power_level_in_dbm.setter
    def preferred_transmit_power_level_in_dbm(self, value: typing.Optional[winrt.system.Int16]) -> None: ...
    @_property
    def is_anonymous(self) -> bool: ...
    @is_anonymous.setter
    def is_anonymous(self, value: bool) -> None: ...
    @_property
    def include_transmit_power_level(self) -> bool: ...
    @include_transmit_power_level.setter
    def include_transmit_power_level(self, value: bool) -> None: ...

@typing.final
class BluetoothLEAdvertisementWatcherTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BluetoothLEAdvertisementWatcherTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @_property
    def signal_strength_filter(self) -> windows_devices_bluetooth.BluetoothSignalStrengthFilter: ...
    @signal_strength_filter.setter
    def signal_strength_filter(self, value: windows_devices_bluetooth.BluetoothSignalStrengthFilter) -> None: ...
    @_property
    def advertisement_filter(self) -> windows_devices_bluetooth_advertisement.BluetoothLEAdvertisementFilter: ...
    @advertisement_filter.setter
    def advertisement_filter(self, value: windows_devices_bluetooth_advertisement.BluetoothLEAdvertisementFilter) -> None: ...
    @_property
    def max_out_of_range_timeout(self) -> datetime.timedelta: ...
    @_property
    def max_sampling_interval(self) -> datetime.timedelta: ...
    @_property
    def min_out_of_range_timeout(self) -> datetime.timedelta: ...
    @_property
    def min_sampling_interval(self) -> datetime.timedelta: ...
    @_property
    def allow_extended_advertisements(self) -> bool: ...
    @allow_extended_advertisements.setter
    def allow_extended_advertisements(self, value: bool) -> None: ...

@typing.final
class CachedFileUpdaterTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CachedFileUpdaterTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class CachedFileUpdaterTriggerDetails(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CachedFileUpdaterTriggerDetails: ...
    @_property
    def can_request_user_input(self) -> bool: ...
    @_property
    def update_request(self) -> windows_storage_provider.FileUpdateRequest: ...
    @_property
    def update_target(self) -> windows_storage_provider.CachedFileTarget: ...

@typing.final
class ChatMessageNotificationTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ChatMessageNotificationTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class ChatMessageReceivedNotificationTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ChatMessageReceivedNotificationTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class CommunicationBlockingAppSetAsActiveTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CommunicationBlockingAppSetAsActiveTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class ContactStoreNotificationTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContactStoreNotificationTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class ContentPrefetchTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContentPrefetchTrigger: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], wait_interval: datetime.timedelta) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @_property
    def wait_interval(self) -> datetime.timedelta: ...

@typing.final
class ConversationalAgentTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ConversationalAgentTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class CustomSystemEventTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CustomSystemEventTrigger: ...
    def __new__(cls: typing.Type[Self], trigger_id: str, recurrence: CustomSystemEventTriggerRecurrence) -> Self: ...
    @_property
    def recurrence(self) -> CustomSystemEventTriggerRecurrence: ...
    @_property
    def trigger_id(self) -> str: ...

@typing.final
class DeviceConnectionChangeTrigger_Static(type):
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[DeviceConnectionChangeTrigger]: ...

@typing.final
class DeviceConnectionChangeTrigger(winrt.system.Object, ImplementsIBackgroundTrigger, metaclass=DeviceConnectionChangeTrigger_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DeviceConnectionChangeTrigger: ...
    @_property
    def maintain_connection(self) -> bool: ...
    @maintain_connection.setter
    def maintain_connection(self, value: bool) -> None: ...
    @_property
    def can_maintain_connection(self) -> bool: ...
    @_property
    def device_id(self) -> str: ...

@typing.final
class DeviceManufacturerNotificationTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DeviceManufacturerNotificationTrigger: ...
    def __new__(cls: typing.Type[Self], trigger_qualifier: str, one_shot: bool) -> Self: ...
    @_property
    def one_shot(self) -> bool: ...
    @_property
    def trigger_qualifier(self) -> str: ...

@typing.final
class DeviceServicingTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DeviceServicingTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    def request_async_simple(self, device_id: str, expected_duration: datetime.timedelta, /) -> windows_foundation.IAsyncOperation[DeviceTriggerResult]: ...
    def request_async_with_arguments(self, device_id: str, expected_duration: datetime.timedelta, arguments: str, /) -> windows_foundation.IAsyncOperation[DeviceTriggerResult]: ...

@typing.final
class DeviceUseTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DeviceUseTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    def request_async_simple(self, device_id: str, /) -> windows_foundation.IAsyncOperation[DeviceTriggerResult]: ...
    def request_async_with_arguments(self, device_id: str, arguments: str, /) -> windows_foundation.IAsyncOperation[DeviceTriggerResult]: ...

@typing.final
class DeviceWatcherTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DeviceWatcherTrigger: ...

@typing.final
class EmailStoreNotificationTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EmailStoreNotificationTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class GattCharacteristicNotificationTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattCharacteristicNotificationTrigger: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], characteristic: windows_devices_bluetooth_genericattributeprofile.GattCharacteristic, event_triggering_mode: windows_devices_bluetooth_background.BluetoothEventTriggeringMode) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], characteristic: windows_devices_bluetooth_genericattributeprofile.GattCharacteristic) -> Self: ...
    @_property
    def characteristic(self) -> windows_devices_bluetooth_genericattributeprofile.GattCharacteristic: ...
    @_property
    def event_triggering_mode(self) -> windows_devices_bluetooth_background.BluetoothEventTriggeringMode: ...

@typing.final
class GattServiceProviderTrigger_Static(type):
    def create_async(cls, trigger_id: str, service_uuid: _uuid.UUID, /) -> windows_foundation.IAsyncOperation[GattServiceProviderTriggerResult]: ...

@typing.final
class GattServiceProviderTrigger(winrt.system.Object, ImplementsIBackgroundTrigger, metaclass=GattServiceProviderTrigger_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattServiceProviderTrigger: ...
    @_property
    def advertising_parameters(self) -> windows_devices_bluetooth_genericattributeprofile.GattServiceProviderAdvertisingParameters: ...
    @advertising_parameters.setter
    def advertising_parameters(self, value: windows_devices_bluetooth_genericattributeprofile.GattServiceProviderAdvertisingParameters) -> None: ...
    @_property
    def service(self) -> windows_devices_bluetooth_genericattributeprofile.GattLocalService: ...
    @_property
    def trigger_id(self) -> str: ...

@typing.final
class GattServiceProviderTriggerResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GattServiceProviderTriggerResult: ...
    @_property
    def error(self) -> windows_devices_bluetooth.BluetoothError: ...
    @_property
    def trigger(self) -> GattServiceProviderTrigger: ...

@typing.final
class GeovisitTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GeovisitTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @_property
    def monitoring_scope(self) -> windows_devices_geolocation.VisitMonitoringScope: ...
    @monitoring_scope.setter
    def monitoring_scope(self, value: windows_devices_geolocation.VisitMonitoringScope) -> None: ...

@typing.final
class LocationTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LocationTrigger: ...
    def __new__(cls: typing.Type[Self], trigger_type: LocationTriggerType) -> Self: ...
    @_property
    def trigger_type(self) -> LocationTriggerType: ...

@typing.final
class MaintenanceTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MaintenanceTrigger: ...
    def __new__(cls: typing.Type[Self], freshness_time: winrt.system.UInt32, one_shot: bool) -> Self: ...
    @_property
    def freshness_time(self) -> winrt.system.UInt32: ...
    @_property
    def one_shot(self) -> bool: ...

@typing.final
class MediaProcessingTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaProcessingTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    def request_async(self) -> windows_foundation.IAsyncOperation[MediaProcessingTriggerResult]: ...
    def request_async_with_arguments(self, arguments: windows_foundation_collections.ValueSet, /) -> windows_foundation.IAsyncOperation[MediaProcessingTriggerResult]: ...

@typing.final
class MobileBroadbandDeviceServiceNotificationTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MobileBroadbandDeviceServiceNotificationTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class MobileBroadbandPcoDataChangeTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MobileBroadbandPcoDataChangeTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class MobileBroadbandPinLockStateChangeTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MobileBroadbandPinLockStateChangeTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class MobileBroadbandRadioStateChangeTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MobileBroadbandRadioStateChangeTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class MobileBroadbandRegistrationStateChangeTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MobileBroadbandRegistrationStateChangeTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class NetworkOperatorDataUsageTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NetworkOperatorDataUsageTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class NetworkOperatorHotspotAuthenticationTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NetworkOperatorHotspotAuthenticationTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class NetworkOperatorNotificationTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NetworkOperatorNotificationTrigger: ...
    def __new__(cls: typing.Type[Self], network_account_id: str) -> Self: ...
    @_property
    def network_account_id(self) -> str: ...

@typing.final
class PaymentAppCanMakePaymentTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PaymentAppCanMakePaymentTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class PhoneTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PhoneTrigger: ...
    def __new__(cls: typing.Type[Self], type: windows_applicationmodel_calls_background.PhoneTriggerType, one_shot: bool) -> Self: ...
    @_property
    def one_shot(self) -> bool: ...
    @_property
    def trigger_type(self) -> windows_applicationmodel_calls_background.PhoneTriggerType: ...

@typing.final
class PushNotificationTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PushNotificationTrigger: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], application_id: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class RcsEndUserMessageAvailableTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RcsEndUserMessageAvailableTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class RfcommConnectionTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RfcommConnectionTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @_property
    def remote_host_name(self) -> windows_networking.HostName: ...
    @remote_host_name.setter
    def remote_host_name(self, value: windows_networking.HostName) -> None: ...
    @_property
    def protection_level(self) -> windows_networking_sockets.SocketProtectionLevel: ...
    @protection_level.setter
    def protection_level(self, value: windows_networking_sockets.SocketProtectionLevel) -> None: ...
    @_property
    def allow_multiple_connections(self) -> bool: ...
    @allow_multiple_connections.setter
    def allow_multiple_connections(self, value: bool) -> None: ...
    @_property
    def inbound_connection(self) -> windows_devices_bluetooth_background.RfcommInboundConnectionInformation: ...
    @_property
    def outbound_connection(self) -> windows_devices_bluetooth_background.RfcommOutboundConnectionInformation: ...

@typing.final
class SecondaryAuthenticationFactorAuthenticationTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SecondaryAuthenticationFactorAuthenticationTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class SensorDataThresholdTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SensorDataThresholdTrigger: ...
    def __new__(cls: typing.Type[Self], threshold: windows_devices_sensors.ImplementsISensorDataThreshold) -> Self: ...

@typing.final
class SmartCardTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmartCardTrigger: ...
    def __new__(cls: typing.Type[Self], trigger_type: windows_devices_smartcards.SmartCardTriggerType) -> Self: ...
    @_property
    def trigger_type(self) -> windows_devices_smartcards.SmartCardTriggerType: ...

@typing.final
class SmsMessageReceivedTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SmsMessageReceivedTrigger: ...
    def __new__(cls: typing.Type[Self], filter_rules: windows_devices_sms.SmsFilterRules) -> Self: ...

@typing.final
class SocketActivityTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SocketActivityTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @_property
    def is_wake_from_low_power_supported(self) -> bool: ...

@typing.final
class StorageLibraryChangeTrackerTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StorageLibraryChangeTrackerTrigger: ...
    def __new__(cls: typing.Type[Self], tracker: windows_storage.StorageLibraryChangeTracker) -> Self: ...

@typing.final
class StorageLibraryContentChangedTrigger_Static(type):
    def create(cls, storage_library: windows_storage.StorageLibrary, /) -> StorageLibraryContentChangedTrigger: ...
    def create_from_libraries(cls, storage_libraries: typing.Iterable[windows_storage.StorageLibrary], /) -> StorageLibraryContentChangedTrigger: ...

@typing.final
class StorageLibraryContentChangedTrigger(winrt.system.Object, ImplementsIBackgroundTrigger, metaclass=StorageLibraryContentChangedTrigger_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> StorageLibraryContentChangedTrigger: ...

@typing.final
class SystemCondition(winrt.system.Object, ImplementsIBackgroundCondition):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemCondition: ...
    def __new__(cls: typing.Type[Self], condition_type: SystemConditionType) -> Self: ...
    @_property
    def condition_type(self) -> SystemConditionType: ...

@typing.final
class SystemTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemTrigger: ...
    def __new__(cls: typing.Type[Self], trigger_type: SystemTriggerType, one_shot: bool) -> Self: ...
    @_property
    def one_shot(self) -> bool: ...
    @_property
    def trigger_type(self) -> SystemTriggerType: ...

@typing.final
class TetheringEntitlementCheckTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TetheringEntitlementCheckTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class TimeTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TimeTrigger: ...
    def __new__(cls: typing.Type[Self], freshness_time: winrt.system.UInt32, one_shot: bool) -> Self: ...
    @_property
    def freshness_time(self) -> winrt.system.UInt32: ...
    @_property
    def one_shot(self) -> bool: ...

@typing.final
class ToastNotificationActionTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToastNotificationActionTrigger: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], application_id: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class ToastNotificationHistoryChangedTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToastNotificationHistoryChangedTrigger: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], application_id: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class UserNotificationChangedTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UserNotificationChangedTrigger: ...
    def __new__(cls: typing.Type[Self], notification_kinds: windows_ui_notifications.NotificationKinds) -> Self: ...

@typing.final
class WiFiOnDemandHotspotConnectTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiOnDemandHotspotConnectTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class WiFiOnDemandHotspotUpdateMetadataTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WiFiOnDemandHotspotUpdateMetadataTrigger: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...

class ImplementsIBackgroundCondition():
    pass

@typing.final
class IBackgroundCondition(winrt.system.Object, ImplementsIBackgroundCondition):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundCondition: ...

class ImplementsIBackgroundTask():
    pass

@typing.final
class IBackgroundTask(winrt.system.Object, ImplementsIBackgroundTask):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTask: ...
    def run(self, task_instance: ImplementsIBackgroundTaskInstance, /) -> None: ...

class ImplementsIBackgroundTaskInstance():
    pass

@typing.final
class IBackgroundTaskInstance(winrt.system.Object, ImplementsIBackgroundTaskInstance):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTaskInstance: ...
    def get_deferral(self) -> BackgroundTaskDeferral: ...
    def add_canceled(self, cancel_handler: BackgroundTaskCanceledEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_canceled(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def instance_id(self) -> _uuid.UUID: ...
    @_property
    def progress(self) -> winrt.system.UInt32: ...
    @progress.setter
    def progress(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def suspended_count(self) -> winrt.system.UInt32: ...
    @_property
    def task(self) -> BackgroundTaskRegistration: ...
    @_property
    def trigger_details(self) -> winrt.system.Object: ...

class ImplementsIBackgroundTaskInstance2():
    pass

@typing.final
class IBackgroundTaskInstance2(winrt.system.Object, ImplementsIBackgroundTaskInstance2, ImplementsIBackgroundTaskInstance):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTaskInstance2: ...
    def get_deferral(self) -> BackgroundTaskDeferral: ...
    def get_throttle_count(self, counter: BackgroundTaskThrottleCounter, /) -> winrt.system.UInt32: ...
    def add_canceled(self, cancel_handler: BackgroundTaskCanceledEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_canceled(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def instance_id(self) -> _uuid.UUID: ...
    @_property
    def progress(self) -> winrt.system.UInt32: ...
    @progress.setter
    def progress(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def suspended_count(self) -> winrt.system.UInt32: ...
    @_property
    def task(self) -> BackgroundTaskRegistration: ...
    @_property
    def trigger_details(self) -> winrt.system.Object: ...

class ImplementsIBackgroundTaskInstance4():
    pass

@typing.final
class IBackgroundTaskInstance4(winrt.system.Object, ImplementsIBackgroundTaskInstance4, ImplementsIBackgroundTaskInstance):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTaskInstance4: ...
    def get_deferral(self) -> BackgroundTaskDeferral: ...
    def add_canceled(self, cancel_handler: BackgroundTaskCanceledEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_canceled(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def user(self) -> windows_system.User: ...
    @_property
    def instance_id(self) -> _uuid.UUID: ...
    @_property
    def progress(self) -> winrt.system.UInt32: ...
    @progress.setter
    def progress(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def suspended_count(self) -> winrt.system.UInt32: ...
    @_property
    def task(self) -> BackgroundTaskRegistration: ...
    @_property
    def trigger_details(self) -> winrt.system.Object: ...

class ImplementsIBackgroundTaskRegistration():
    pass

@typing.final
class IBackgroundTaskRegistration(winrt.system.Object, ImplementsIBackgroundTaskRegistration):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTaskRegistration: ...
    def unregister(self, cancel_task: bool, /) -> None: ...
    def add_completed(self, handler: BackgroundTaskCompletedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_completed(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_progress(self, handler: BackgroundTaskProgressEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_progress(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def name(self) -> str: ...
    @_property
    def task_id(self) -> _uuid.UUID: ...

class ImplementsIBackgroundTaskRegistration2():
    pass

@typing.final
class IBackgroundTaskRegistration2(winrt.system.Object, ImplementsIBackgroundTaskRegistration2, ImplementsIBackgroundTaskRegistration):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTaskRegistration2: ...
    def unregister(self, cancel_task: bool, /) -> None: ...
    def add_completed(self, handler: BackgroundTaskCompletedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_completed(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_progress(self, handler: BackgroundTaskProgressEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_progress(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def trigger(self) -> IBackgroundTrigger: ...
    @_property
    def name(self) -> str: ...
    @_property
    def task_id(self) -> _uuid.UUID: ...

class ImplementsIBackgroundTaskRegistration3():
    pass

@typing.final
class IBackgroundTaskRegistration3(winrt.system.Object, ImplementsIBackgroundTaskRegistration3, ImplementsIBackgroundTaskRegistration):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTaskRegistration3: ...
    def unregister(self, cancel_task: bool, /) -> None: ...
    def add_completed(self, handler: BackgroundTaskCompletedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_completed(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_progress(self, handler: BackgroundTaskProgressEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    def remove_progress(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def task_group(self) -> BackgroundTaskRegistrationGroup: ...
    @_property
    def name(self) -> str: ...
    @_property
    def task_id(self) -> _uuid.UUID: ...

class ImplementsIBackgroundTrigger():
    pass

@typing.final
class IBackgroundTrigger(winrt.system.Object, ImplementsIBackgroundTrigger):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTrigger: ...

