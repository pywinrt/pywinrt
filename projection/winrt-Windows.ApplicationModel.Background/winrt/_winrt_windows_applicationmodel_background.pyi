# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.activation as windows_applicationmodel_activation
import winrt.windows.applicationmodel.calls.background as windows_applicationmodel_calls_background
import winrt.windows.devices.bluetooth as windows_devices_bluetooth
import winrt.windows.devices.bluetooth.advertisement as windows_devices_bluetooth_advertisement
import winrt.windows.devices.bluetooth.background as windows_devices_bluetooth_background
import winrt.windows.devices.bluetooth.genericattributeprofile as windows_devices_bluetooth_genericattributeprofile
import winrt.windows.devices.geolocation as windows_devices_geolocation
import winrt.windows.devices.sensors as windows_devices_sensors
import winrt.windows.devices.smartcards as windows_devices_smartcards
import winrt.windows.devices.sms as windows_devices_sms
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.networking as windows_networking
import winrt.windows.networking.sockets as windows_networking_sockets
import winrt.windows.storage as windows_storage
import winrt.windows.storage.provider as windows_storage_provider
import winrt.windows.system as windows_system
import winrt.windows.ui.notifications as windows_ui_notifications

from winrt.windows.applicationmodel.background import AlarmAccessStatus, ApplicationTriggerResult, BackgroundAccessRequestKind, BackgroundAccessStatus, BackgroundTaskCancellationReason, BackgroundTaskThrottleCounter, BackgroundWorkCostValue, CustomSystemEventTriggerRecurrence, DeviceTriggerResult, EnergyUseLevel, LocationTriggerType, MediaProcessingTriggerResult, SystemConditionType, SystemTriggerType
from winrt.windows.applicationmodel.background import BackgroundTaskCanceledEventHandler, BackgroundTaskCompletedEventHandler, BackgroundTaskProgressEventHandler

Self = typing.TypeVar('Self')

@typing.final
class ActivitySensorTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self], report_interval_in_milliseconds: winrt.system.UInt32) -> Self: ...
    # System.UInt32 Windows.ApplicationModel.Background.ActivitySensorTrigger::get_MinimumReportInterval()
    @_property
    def minimum_report_interval(self) -> winrt.system.UInt32: ...
    # System.UInt32 Windows.ApplicationModel.Background.ActivitySensorTrigger::get_ReportInterval()
    @_property
    def report_interval(self) -> winrt.system.UInt32: ...
    # Windows.Foundation.Collections.IVector`1<Windows.Devices.Sensors.ActivityType> Windows.ApplicationModel.Background.ActivitySensorTrigger::get_SubscribedActivities()
    @_property
    def subscribed_activities(self) -> typing.MutableSequence[windows_devices_sensors.ActivityType]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.ActivityType> Windows.ApplicationModel.Background.ActivitySensorTrigger::get_SupportedActivities()
    @_property
    def supported_activities(self) -> typing.Sequence[windows_devices_sensors.ActivityType]: ...

@typing.final
class AlarmApplicationManager_Static(type):
    # Windows.ApplicationModel.Background.AlarmAccessStatus Windows.ApplicationModel.Background.AlarmApplicationManager::GetAccessStatus()
    def get_access_status(cls) -> AlarmAccessStatus: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Background.AlarmAccessStatus> Windows.ApplicationModel.Background.AlarmApplicationManager::RequestAccessAsync()
    def request_access_async(cls) -> windows_foundation.IAsyncOperation[AlarmAccessStatus]: ...

@typing.final
class AlarmApplicationManager(winrt.system.Object, metaclass=AlarmApplicationManager_Static):
    pass

@typing.final
class AppBroadcastTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self], provider_key: str) -> Self: ...
    # Windows.ApplicationModel.Background.AppBroadcastTriggerProviderInfo Windows.ApplicationModel.Background.AppBroadcastTrigger::get_ProviderInfo()
    @_property
    def provider_info(self) -> AppBroadcastTriggerProviderInfo: ...
    # System.Void Windows.ApplicationModel.Background.AppBroadcastTrigger::put_ProviderInfo(Windows.ApplicationModel.Background.AppBroadcastTriggerProviderInfo)
    @provider_info.setter
    def provider_info(self, value: AppBroadcastTriggerProviderInfo) -> None: ...

@typing.final
class AppBroadcastTriggerProviderInfo(winrt.system.Object):
    # Windows.Foundation.TimeSpan Windows.ApplicationModel.Background.AppBroadcastTriggerProviderInfo::get_VideoKeyFrameInterval()
    @_property
    def video_key_frame_interval(self) -> datetime.timedelta: ...
    # System.Void Windows.ApplicationModel.Background.AppBroadcastTriggerProviderInfo::put_VideoKeyFrameInterval(Windows.Foundation.TimeSpan)
    @video_key_frame_interval.setter
    def video_key_frame_interval(self, value: datetime.timedelta) -> None: ...
    # System.UInt32 Windows.ApplicationModel.Background.AppBroadcastTriggerProviderInfo::get_MaxVideoWidth()
    @_property
    def max_video_width(self) -> winrt.system.UInt32: ...
    # System.Void Windows.ApplicationModel.Background.AppBroadcastTriggerProviderInfo::put_MaxVideoWidth(System.UInt32)
    @max_video_width.setter
    def max_video_width(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.ApplicationModel.Background.AppBroadcastTriggerProviderInfo::get_MaxVideoHeight()
    @_property
    def max_video_height(self) -> winrt.system.UInt32: ...
    # System.Void Windows.ApplicationModel.Background.AppBroadcastTriggerProviderInfo::put_MaxVideoHeight(System.UInt32)
    @max_video_height.setter
    def max_video_height(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.ApplicationModel.Background.AppBroadcastTriggerProviderInfo::get_MaxVideoBitrate()
    @_property
    def max_video_bitrate(self) -> winrt.system.UInt32: ...
    # System.Void Windows.ApplicationModel.Background.AppBroadcastTriggerProviderInfo::put_MaxVideoBitrate(System.UInt32)
    @max_video_bitrate.setter
    def max_video_bitrate(self, value: winrt.system.UInt32) -> None: ...
    # System.String Windows.ApplicationModel.Background.AppBroadcastTriggerProviderInfo::get_LogoResource()
    @_property
    def logo_resource(self) -> str: ...
    # System.Void Windows.ApplicationModel.Background.AppBroadcastTriggerProviderInfo::put_LogoResource(System.String)
    @logo_resource.setter
    def logo_resource(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Background.AppBroadcastTriggerProviderInfo::get_DisplayNameResource()
    @_property
    def display_name_resource(self) -> str: ...
    # System.Void Windows.ApplicationModel.Background.AppBroadcastTriggerProviderInfo::put_DisplayNameResource(System.String)
    @display_name_resource.setter
    def display_name_resource(self, value: str) -> None: ...

@typing.final
class ApplicationTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Background.ApplicationTriggerResult> Windows.ApplicationModel.Background.ApplicationTrigger::RequestAsync()
    def request_async(self) -> windows_foundation.IAsyncOperation[ApplicationTriggerResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Background.ApplicationTriggerResult> Windows.ApplicationModel.Background.ApplicationTrigger::RequestAsync(Windows.Foundation.Collections.ValueSet)
    def request_async_with_arguments(self, arguments: windows_foundation_collections.ValueSet, /) -> windows_foundation.IAsyncOperation[ApplicationTriggerResult]: ...

@typing.final
class ApplicationTriggerDetails(winrt.system.Object):
    # Windows.Foundation.Collections.ValueSet Windows.ApplicationModel.Background.ApplicationTriggerDetails::get_Arguments()
    @_property
    def arguments(self) -> windows_foundation_collections.ValueSet: ...

@typing.final
class AppointmentStoreNotificationTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class BackgroundExecutionManager_Static(type):
    # Windows.ApplicationModel.Background.BackgroundAccessStatus Windows.ApplicationModel.Background.BackgroundExecutionManager::GetAccessStatus()
    def get_access_status(cls) -> BackgroundAccessStatus: ...
    # Windows.ApplicationModel.Background.BackgroundAccessStatus Windows.ApplicationModel.Background.BackgroundExecutionManager::GetAccessStatus(System.String)
    def get_access_status_for_application(cls, application_id: str, /) -> BackgroundAccessStatus: ...
    # Windows.ApplicationModel.Background.BackgroundAccessStatus Windows.ApplicationModel.Background.BackgroundExecutionManager::GetAccessStatusForModernStandby()
    def get_access_status_for_modern_standby(cls) -> BackgroundAccessStatus: ...
    # Windows.ApplicationModel.Background.BackgroundAccessStatus Windows.ApplicationModel.Background.BackgroundExecutionManager::GetAccessStatusForModernStandby(System.String)
    def get_access_status_for_modern_standby_for_application(cls, application_id: str, /) -> BackgroundAccessStatus: ...
    # System.Void Windows.ApplicationModel.Background.BackgroundExecutionManager::RemoveAccess()
    def remove_access(cls) -> None: ...
    # System.Void Windows.ApplicationModel.Background.BackgroundExecutionManager::RemoveAccess(System.String)
    def remove_access_for_application(cls, application_id: str, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Background.BackgroundAccessStatus> Windows.ApplicationModel.Background.BackgroundExecutionManager::RequestAccessAsync()
    def request_access_async(cls) -> windows_foundation.IAsyncOperation[BackgroundAccessStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Background.BackgroundAccessStatus> Windows.ApplicationModel.Background.BackgroundExecutionManager::RequestAccessAsync(System.String)
    def request_access_for_application_async(cls, application_id: str, /) -> windows_foundation.IAsyncOperation[BackgroundAccessStatus]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Background.BackgroundExecutionManager::RequestAccessKindAsync(Windows.ApplicationModel.Background.BackgroundAccessRequestKind,System.String)
    def request_access_kind_async(cls, requested_access: BackgroundAccessRequestKind, reason: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.Background.BackgroundExecutionManager::RequestAccessKindForModernStandbyAsync(Windows.ApplicationModel.Background.BackgroundAccessRequestKind,System.String)
    def request_access_kind_for_modern_standby_async(cls, requested_access: BackgroundAccessRequestKind, reason: str, /) -> windows_foundation.IAsyncOperation[bool]: ...

@typing.final
class BackgroundExecutionManager(winrt.system.Object, metaclass=BackgroundExecutionManager_Static):
    pass

@typing.final
class BackgroundTaskBuilder_Static(type):
    # System.Boolean Windows.ApplicationModel.Background.BackgroundTaskBuilder::get_IsRunningTaskInStandbySupported()
    @_property
    def is_running_task_in_standby_supported(cls) -> bool: ...

@typing.final
class BackgroundTaskBuilder(winrt.system.Object, metaclass=BackgroundTaskBuilder_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.ApplicationModel.Background.BackgroundTaskBuilder::AddCondition(Windows.ApplicationModel.Background.IBackgroundCondition)
    def add_condition(self, condition: IBackgroundCondition, /) -> None: ...
    @typing.overload
    # Windows.ApplicationModel.Background.BackgroundTaskRegistration Windows.ApplicationModel.Background.BackgroundTaskBuilder::Register()
    def register(self) -> BackgroundTaskRegistration: ...
    @typing.overload
    # Windows.ApplicationModel.Background.BackgroundTaskRegistration Windows.ApplicationModel.Background.BackgroundTaskBuilder::Register(System.String)
    def register(self, task_name: str, /) -> BackgroundTaskRegistration: ...
    # System.Void Windows.ApplicationModel.Background.BackgroundTaskBuilder::SetTaskEntryPointClsid(System.Guid)
    def set_task_entry_point_clsid(self, task_entry_point: _uuid.UUID, /) -> None: ...
    # System.Void Windows.ApplicationModel.Background.BackgroundTaskBuilder::SetTrigger(Windows.ApplicationModel.Background.IBackgroundTrigger)
    def set_trigger(self, trigger: IBackgroundTrigger, /) -> None: ...
    # System.Boolean Windows.ApplicationModel.Background.BackgroundTaskBuilder::Validate()
    def validate(self) -> bool: ...
    # System.String Windows.ApplicationModel.Background.BackgroundTaskBuilder::get_TaskEntryPoint()
    @_property
    def task_entry_point(self) -> str: ...
    # System.Void Windows.ApplicationModel.Background.BackgroundTaskBuilder::put_TaskEntryPoint(System.String)
    @task_entry_point.setter
    def task_entry_point(self, value: str) -> None: ...
    # System.String Windows.ApplicationModel.Background.BackgroundTaskBuilder::get_Name()
    @_property
    def name(self) -> str: ...
    # System.Void Windows.ApplicationModel.Background.BackgroundTaskBuilder::put_Name(System.String)
    @name.setter
    def name(self, value: str) -> None: ...
    # System.Boolean Windows.ApplicationModel.Background.BackgroundTaskBuilder::get_CancelOnConditionLoss()
    @_property
    def cancel_on_condition_loss(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Background.BackgroundTaskBuilder::put_CancelOnConditionLoss(System.Boolean)
    @cancel_on_condition_loss.setter
    def cancel_on_condition_loss(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Background.BackgroundTaskBuilder::get_IsNetworkRequested()
    @_property
    def is_network_requested(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Background.BackgroundTaskBuilder::put_IsNetworkRequested(System.Boolean)
    @is_network_requested.setter
    def is_network_requested(self, value: bool) -> None: ...
    # Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup Windows.ApplicationModel.Background.BackgroundTaskBuilder::get_TaskGroup()
    @_property
    def task_group(self) -> BackgroundTaskRegistrationGroup: ...
    # System.Void Windows.ApplicationModel.Background.BackgroundTaskBuilder::put_TaskGroup(Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup)
    @task_group.setter
    def task_group(self, value: BackgroundTaskRegistrationGroup) -> None: ...
    # System.Boolean Windows.ApplicationModel.Background.BackgroundTaskBuilder::get_AllowRunningTaskInStandby()
    @_property
    def allow_running_task_in_standby(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Background.BackgroundTaskBuilder::put_AllowRunningTaskInStandby(System.Boolean)
    @allow_running_task_in_standby.setter
    def allow_running_task_in_standby(self, value: bool) -> None: ...

@typing.final
class BackgroundTaskCompletedEventArgs(winrt.system.Object):
    # System.Void Windows.ApplicationModel.Background.BackgroundTaskCompletedEventArgs::CheckResult()
    def check_result(self) -> None: ...
    # System.Guid Windows.ApplicationModel.Background.BackgroundTaskCompletedEventArgs::get_InstanceId()
    @_property
    def instance_id(self) -> _uuid.UUID: ...

@typing.final
class BackgroundTaskDeferral(winrt.system.Object):
    # System.Void Windows.ApplicationModel.Background.BackgroundTaskDeferral::Complete()
    def complete(self) -> None: ...

@typing.final
class BackgroundTaskProgressEventArgs(winrt.system.Object):
    # System.Guid Windows.ApplicationModel.Background.BackgroundTaskProgressEventArgs::get_InstanceId()
    @_property
    def instance_id(self) -> _uuid.UUID: ...
    # System.UInt32 Windows.ApplicationModel.Background.BackgroundTaskProgressEventArgs::get_Progress()
    @_property
    def progress(self) -> winrt.system.UInt32: ...

@typing.final
class BackgroundTaskRegistration_Static(type):
    # Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup Windows.ApplicationModel.Background.BackgroundTaskRegistration::GetTaskGroup(System.String)
    def get_task_group(cls, group_id: str, /) -> BackgroundTaskRegistrationGroup: ...
    # Windows.Foundation.Collections.IMapView`2<System.Guid,Windows.ApplicationModel.Background.IBackgroundTaskRegistration> Windows.ApplicationModel.Background.BackgroundTaskRegistration::get_AllTasks()
    @_property
    def all_tasks(cls) -> typing.Mapping[_uuid.UUID, IBackgroundTaskRegistration]: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup> Windows.ApplicationModel.Background.BackgroundTaskRegistration::get_AllTaskGroups()
    @_property
    def all_task_groups(cls) -> typing.Mapping[str, BackgroundTaskRegistrationGroup]: ...

@typing.final
class BackgroundTaskRegistration(winrt.system.Object, IBackgroundTaskRegistration3, IBackgroundTaskRegistration2, IBackgroundTaskRegistration, metaclass=BackgroundTaskRegistration_Static):
    # System.Void Windows.ApplicationModel.Background.BackgroundTaskRegistration::Unregister(System.Boolean)
    def unregister(self, cancel_task: bool, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Background.BackgroundTaskRegistration::add_Completed(Windows.ApplicationModel.Background.BackgroundTaskCompletedEventHandler)
    def add_completed(self, handler: BackgroundTaskCompletedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Background.BackgroundTaskRegistration::remove_Completed(Windows.Foundation.EventRegistrationToken)
    def remove_completed(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Background.BackgroundTaskRegistration::add_Progress(Windows.ApplicationModel.Background.BackgroundTaskProgressEventHandler)
    def add_progress(self, handler: BackgroundTaskProgressEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Background.BackgroundTaskRegistration::remove_Progress(Windows.Foundation.EventRegistrationToken)
    def remove_progress(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Windows.ApplicationModel.Background.BackgroundTaskRegistration::get_Name()
    @_property
    def name(self) -> str: ...
    # System.Guid Windows.ApplicationModel.Background.BackgroundTaskRegistration::get_TaskId()
    @_property
    def task_id(self) -> _uuid.UUID: ...
    # Windows.ApplicationModel.Background.IBackgroundTrigger Windows.ApplicationModel.Background.BackgroundTaskRegistration::get_Trigger()
    @_property
    def trigger(self) -> IBackgroundTrigger: ...
    # Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup Windows.ApplicationModel.Background.BackgroundTaskRegistration::get_TaskGroup()
    @_property
    def task_group(self) -> BackgroundTaskRegistrationGroup: ...
    # System.Double Windows.ApplicationModel.Background.BackgroundTaskRegistration::get_AppEnergyUsePredictionContribution()
    @_property
    def app_energy_use_prediction_contribution(self) -> winrt.system.Double: ...
    # Windows.Foundation.DateTime Windows.ApplicationModel.Background.BackgroundTaskRegistration::get_TaskLastThrottledInStandbyTimestamp()
    @_property
    def task_last_throttled_in_standby_timestamp(self) -> datetime.datetime: ...

@typing.final
class BackgroundTaskRegistrationGroup(winrt.system.Object):
    @typing.overload
    def __new__(cls: typing.Type[Self], id: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], id: str, name: str) -> Self: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup::add_BackgroundActivated(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup,Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs>)
    def add_background_activated(self, handler: windows_foundation.TypedEventHandler[BackgroundTaskRegistrationGroup, windows_applicationmodel_activation.BackgroundActivatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup::remove_BackgroundActivated(Windows.Foundation.EventRegistrationToken)
    def remove_background_activated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.Collections.IMapView`2<System.Guid,Windows.ApplicationModel.Background.BackgroundTaskRegistration> Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup::get_AllTasks()
    @_property
    def all_tasks(self) -> typing.Mapping[_uuid.UUID, BackgroundTaskRegistration]: ...
    # System.String Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup::get_Id()
    @_property
    def id(self) -> str: ...
    # System.String Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup::get_Name()
    @_property
    def name(self) -> str: ...

@typing.final
class BackgroundWorkCost_Static(type):
    # Windows.ApplicationModel.Background.BackgroundWorkCostValue Windows.ApplicationModel.Background.BackgroundWorkCost::get_CurrentBackgroundWorkCost()
    @_property
    def current_background_work_cost(cls) -> BackgroundWorkCostValue: ...
    # Windows.ApplicationModel.Background.EnergyUseLevel Windows.ApplicationModel.Background.BackgroundWorkCost::get_AppEnergyUseLevel()
    @_property
    def app_energy_use_level(cls) -> EnergyUseLevel: ...
    # Windows.ApplicationModel.Background.EnergyUseLevel Windows.ApplicationModel.Background.BackgroundWorkCost::get_AppEnergyUsePrediction()
    @_property
    def app_energy_use_prediction(cls) -> EnergyUseLevel: ...
    # Windows.Foundation.DateTime Windows.ApplicationModel.Background.BackgroundWorkCost::get_AppLastThrottledInStandbyTimestamp()
    @_property
    def app_last_throttled_in_standby_timestamp(cls) -> datetime.datetime: ...

@typing.final
class BackgroundWorkCost(winrt.system.Object, metaclass=BackgroundWorkCost_Static):
    pass

@typing.final
class BluetoothLEAdvertisementPublisherTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisement Windows.ApplicationModel.Background.BluetoothLEAdvertisementPublisherTrigger::get_Advertisement()
    @_property
    def advertisement(self) -> windows_devices_bluetooth_advertisement.BluetoothLEAdvertisement: ...
    # System.Boolean Windows.ApplicationModel.Background.BluetoothLEAdvertisementPublisherTrigger::get_UseExtendedFormat()
    @_property
    def use_extended_format(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Background.BluetoothLEAdvertisementPublisherTrigger::put_UseExtendedFormat(System.Boolean)
    @use_extended_format.setter
    def use_extended_format(self, value: bool) -> None: ...
    # Windows.Foundation.IReference`1<System.Int16> Windows.ApplicationModel.Background.BluetoothLEAdvertisementPublisherTrigger::get_PreferredTransmitPowerLevelInDBm()
    @_property
    def preferred_transmit_power_level_in_dbm(self) -> typing.Optional[winrt.system.Int16]: ...
    # System.Void Windows.ApplicationModel.Background.BluetoothLEAdvertisementPublisherTrigger::put_PreferredTransmitPowerLevelInDBm(Windows.Foundation.IReference`1<System.Int16>)
    @preferred_transmit_power_level_in_dbm.setter
    def preferred_transmit_power_level_in_dbm(self, value: typing.Optional[winrt.system.Int16]) -> None: ...
    # System.Boolean Windows.ApplicationModel.Background.BluetoothLEAdvertisementPublisherTrigger::get_IsAnonymous()
    @_property
    def is_anonymous(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Background.BluetoothLEAdvertisementPublisherTrigger::put_IsAnonymous(System.Boolean)
    @is_anonymous.setter
    def is_anonymous(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Background.BluetoothLEAdvertisementPublisherTrigger::get_IncludeTransmitPowerLevel()
    @_property
    def include_transmit_power_level(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Background.BluetoothLEAdvertisementPublisherTrigger::put_IncludeTransmitPowerLevel(System.Boolean)
    @include_transmit_power_level.setter
    def include_transmit_power_level(self, value: bool) -> None: ...

@typing.final
class BluetoothLEAdvertisementWatcherTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter Windows.ApplicationModel.Background.BluetoothLEAdvertisementWatcherTrigger::get_SignalStrengthFilter()
    @_property
    def signal_strength_filter(self) -> windows_devices_bluetooth.BluetoothSignalStrengthFilter: ...
    # System.Void Windows.ApplicationModel.Background.BluetoothLEAdvertisementWatcherTrigger::put_SignalStrengthFilter(Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter)
    @signal_strength_filter.setter
    def signal_strength_filter(self, value: windows_devices_bluetooth.BluetoothSignalStrengthFilter) -> None: ...
    # Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementFilter Windows.ApplicationModel.Background.BluetoothLEAdvertisementWatcherTrigger::get_AdvertisementFilter()
    @_property
    def advertisement_filter(self) -> windows_devices_bluetooth_advertisement.BluetoothLEAdvertisementFilter: ...
    # System.Void Windows.ApplicationModel.Background.BluetoothLEAdvertisementWatcherTrigger::put_AdvertisementFilter(Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementFilter)
    @advertisement_filter.setter
    def advertisement_filter(self, value: windows_devices_bluetooth_advertisement.BluetoothLEAdvertisementFilter) -> None: ...
    # Windows.Foundation.TimeSpan Windows.ApplicationModel.Background.BluetoothLEAdvertisementWatcherTrigger::get_MaxOutOfRangeTimeout()
    @_property
    def max_out_of_range_timeout(self) -> datetime.timedelta: ...
    # Windows.Foundation.TimeSpan Windows.ApplicationModel.Background.BluetoothLEAdvertisementWatcherTrigger::get_MaxSamplingInterval()
    @_property
    def max_sampling_interval(self) -> datetime.timedelta: ...
    # Windows.Foundation.TimeSpan Windows.ApplicationModel.Background.BluetoothLEAdvertisementWatcherTrigger::get_MinOutOfRangeTimeout()
    @_property
    def min_out_of_range_timeout(self) -> datetime.timedelta: ...
    # Windows.Foundation.TimeSpan Windows.ApplicationModel.Background.BluetoothLEAdvertisementWatcherTrigger::get_MinSamplingInterval()
    @_property
    def min_sampling_interval(self) -> datetime.timedelta: ...
    # System.Boolean Windows.ApplicationModel.Background.BluetoothLEAdvertisementWatcherTrigger::get_AllowExtendedAdvertisements()
    @_property
    def allow_extended_advertisements(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Background.BluetoothLEAdvertisementWatcherTrigger::put_AllowExtendedAdvertisements(System.Boolean)
    @allow_extended_advertisements.setter
    def allow_extended_advertisements(self, value: bool) -> None: ...

@typing.final
class CachedFileUpdaterTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class CachedFileUpdaterTriggerDetails(winrt.system.Object):
    # System.Boolean Windows.ApplicationModel.Background.CachedFileUpdaterTriggerDetails::get_CanRequestUserInput()
    @_property
    def can_request_user_input(self) -> bool: ...
    # Windows.Storage.Provider.FileUpdateRequest Windows.ApplicationModel.Background.CachedFileUpdaterTriggerDetails::get_UpdateRequest()
    @_property
    def update_request(self) -> windows_storage_provider.FileUpdateRequest: ...
    # Windows.Storage.Provider.CachedFileTarget Windows.ApplicationModel.Background.CachedFileUpdaterTriggerDetails::get_UpdateTarget()
    @_property
    def update_target(self) -> windows_storage_provider.CachedFileTarget: ...

@typing.final
class ChatMessageNotificationTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class ChatMessageReceivedNotificationTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class CommunicationBlockingAppSetAsActiveTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class ContactStoreNotificationTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class ContentPrefetchTrigger(winrt.system.Object, IBackgroundTrigger):
    @typing.overload
    def __new__(cls: typing.Type[Self], wait_interval: datetime.timedelta) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.TimeSpan Windows.ApplicationModel.Background.ContentPrefetchTrigger::get_WaitInterval()
    @_property
    def wait_interval(self) -> datetime.timedelta: ...

@typing.final
class ConversationalAgentTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class CustomSystemEventTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self], trigger_id: str, recurrence: CustomSystemEventTriggerRecurrence) -> Self: ...
    # Windows.ApplicationModel.Background.CustomSystemEventTriggerRecurrence Windows.ApplicationModel.Background.CustomSystemEventTrigger::get_Recurrence()
    @_property
    def recurrence(self) -> CustomSystemEventTriggerRecurrence: ...
    # System.String Windows.ApplicationModel.Background.CustomSystemEventTrigger::get_TriggerId()
    @_property
    def trigger_id(self) -> str: ...

@typing.final
class DeviceConnectionChangeTrigger_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Background.DeviceConnectionChangeTrigger> Windows.ApplicationModel.Background.DeviceConnectionChangeTrigger::FromIdAsync(System.String)
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[DeviceConnectionChangeTrigger]: ...

@typing.final
class DeviceConnectionChangeTrigger(winrt.system.Object, IBackgroundTrigger, metaclass=DeviceConnectionChangeTrigger_Static):
    # System.Boolean Windows.ApplicationModel.Background.DeviceConnectionChangeTrigger::get_MaintainConnection()
    @_property
    def maintain_connection(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Background.DeviceConnectionChangeTrigger::put_MaintainConnection(System.Boolean)
    @maintain_connection.setter
    def maintain_connection(self, value: bool) -> None: ...
    # System.Boolean Windows.ApplicationModel.Background.DeviceConnectionChangeTrigger::get_CanMaintainConnection()
    @_property
    def can_maintain_connection(self) -> bool: ...
    # System.String Windows.ApplicationModel.Background.DeviceConnectionChangeTrigger::get_DeviceId()
    @_property
    def device_id(self) -> str: ...

@typing.final
class DeviceManufacturerNotificationTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self], trigger_qualifier: str, one_shot: bool) -> Self: ...
    # System.Boolean Windows.ApplicationModel.Background.DeviceManufacturerNotificationTrigger::get_OneShot()
    @_property
    def one_shot(self) -> bool: ...
    # System.String Windows.ApplicationModel.Background.DeviceManufacturerNotificationTrigger::get_TriggerQualifier()
    @_property
    def trigger_qualifier(self) -> str: ...

@typing.final
class DeviceServicingTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Background.DeviceTriggerResult> Windows.ApplicationModel.Background.DeviceServicingTrigger::RequestAsync(System.String,Windows.Foundation.TimeSpan)
    def request_async_simple(self, device_id: str, expected_duration: datetime.timedelta, /) -> windows_foundation.IAsyncOperation[DeviceTriggerResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Background.DeviceTriggerResult> Windows.ApplicationModel.Background.DeviceServicingTrigger::RequestAsync(System.String,Windows.Foundation.TimeSpan,System.String)
    def request_async_with_arguments(self, device_id: str, expected_duration: datetime.timedelta, arguments: str, /) -> windows_foundation.IAsyncOperation[DeviceTriggerResult]: ...

@typing.final
class DeviceUseTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Background.DeviceTriggerResult> Windows.ApplicationModel.Background.DeviceUseTrigger::RequestAsync(System.String)
    def request_async_simple(self, device_id: str, /) -> windows_foundation.IAsyncOperation[DeviceTriggerResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Background.DeviceTriggerResult> Windows.ApplicationModel.Background.DeviceUseTrigger::RequestAsync(System.String,System.String)
    def request_async_with_arguments(self, device_id: str, arguments: str, /) -> windows_foundation.IAsyncOperation[DeviceTriggerResult]: ...

@typing.final
class DeviceWatcherTrigger(winrt.system.Object, IBackgroundTrigger):
    pass

@typing.final
class EmailStoreNotificationTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class GattCharacteristicNotificationTrigger(winrt.system.Object, IBackgroundTrigger):
    @typing.overload
    def __new__(cls: typing.Type[Self], characteristic: windows_devices_bluetooth_genericattributeprofile.GattCharacteristic, event_triggering_mode: windows_devices_bluetooth_background.BluetoothEventTriggeringMode) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], characteristic: windows_devices_bluetooth_genericattributeprofile.GattCharacteristic) -> Self: ...
    # Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic Windows.ApplicationModel.Background.GattCharacteristicNotificationTrigger::get_Characteristic()
    @_property
    def characteristic(self) -> windows_devices_bluetooth_genericattributeprofile.GattCharacteristic: ...
    # Windows.Devices.Bluetooth.Background.BluetoothEventTriggeringMode Windows.ApplicationModel.Background.GattCharacteristicNotificationTrigger::get_EventTriggeringMode()
    @_property
    def event_triggering_mode(self) -> windows_devices_bluetooth_background.BluetoothEventTriggeringMode: ...

@typing.final
class GattServiceProviderTrigger_Static(type):
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Background.GattServiceProviderTriggerResult> Windows.ApplicationModel.Background.GattServiceProviderTrigger::CreateAsync(System.String,System.Guid)
    def create_async(cls, trigger_id: str, service_uuid: _uuid.UUID, /) -> windows_foundation.IAsyncOperation[GattServiceProviderTriggerResult]: ...

@typing.final
class GattServiceProviderTrigger(winrt.system.Object, IBackgroundTrigger, metaclass=GattServiceProviderTrigger_Static):
    # Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderAdvertisingParameters Windows.ApplicationModel.Background.GattServiceProviderTrigger::get_AdvertisingParameters()
    @_property
    def advertising_parameters(self) -> windows_devices_bluetooth_genericattributeprofile.GattServiceProviderAdvertisingParameters: ...
    # System.Void Windows.ApplicationModel.Background.GattServiceProviderTrigger::put_AdvertisingParameters(Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderAdvertisingParameters)
    @advertising_parameters.setter
    def advertising_parameters(self, value: windows_devices_bluetooth_genericattributeprofile.GattServiceProviderAdvertisingParameters) -> None: ...
    # Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalService Windows.ApplicationModel.Background.GattServiceProviderTrigger::get_Service()
    @_property
    def service(self) -> windows_devices_bluetooth_genericattributeprofile.GattLocalService: ...
    # System.String Windows.ApplicationModel.Background.GattServiceProviderTrigger::get_TriggerId()
    @_property
    def trigger_id(self) -> str: ...

@typing.final
class GattServiceProviderTriggerResult(winrt.system.Object):
    # Windows.Devices.Bluetooth.BluetoothError Windows.ApplicationModel.Background.GattServiceProviderTriggerResult::get_Error()
    @_property
    def error(self) -> windows_devices_bluetooth.BluetoothError: ...
    # Windows.ApplicationModel.Background.GattServiceProviderTrigger Windows.ApplicationModel.Background.GattServiceProviderTriggerResult::get_Trigger()
    @_property
    def trigger(self) -> GattServiceProviderTrigger: ...

@typing.final
class GeovisitTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Devices.Geolocation.VisitMonitoringScope Windows.ApplicationModel.Background.GeovisitTrigger::get_MonitoringScope()
    @_property
    def monitoring_scope(self) -> windows_devices_geolocation.VisitMonitoringScope: ...
    # System.Void Windows.ApplicationModel.Background.GeovisitTrigger::put_MonitoringScope(Windows.Devices.Geolocation.VisitMonitoringScope)
    @monitoring_scope.setter
    def monitoring_scope(self, value: windows_devices_geolocation.VisitMonitoringScope) -> None: ...

@typing.final
class LocationTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self], trigger_type: LocationTriggerType) -> Self: ...
    # Windows.ApplicationModel.Background.LocationTriggerType Windows.ApplicationModel.Background.LocationTrigger::get_TriggerType()
    @_property
    def trigger_type(self) -> LocationTriggerType: ...

@typing.final
class MaintenanceTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self], freshness_time: winrt.system.UInt32, one_shot: bool) -> Self: ...
    # System.UInt32 Windows.ApplicationModel.Background.MaintenanceTrigger::get_FreshnessTime()
    @_property
    def freshness_time(self) -> winrt.system.UInt32: ...
    # System.Boolean Windows.ApplicationModel.Background.MaintenanceTrigger::get_OneShot()
    @_property
    def one_shot(self) -> bool: ...

@typing.final
class MediaProcessingTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Background.MediaProcessingTriggerResult> Windows.ApplicationModel.Background.MediaProcessingTrigger::RequestAsync()
    def request_async(self) -> windows_foundation.IAsyncOperation[MediaProcessingTriggerResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Background.MediaProcessingTriggerResult> Windows.ApplicationModel.Background.MediaProcessingTrigger::RequestAsync(Windows.Foundation.Collections.ValueSet)
    def request_async_with_arguments(self, arguments: windows_foundation_collections.ValueSet, /) -> windows_foundation.IAsyncOperation[MediaProcessingTriggerResult]: ...

@typing.final
class MobileBroadbandDeviceServiceNotificationTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class MobileBroadbandPcoDataChangeTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class MobileBroadbandPinLockStateChangeTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class MobileBroadbandRadioStateChangeTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class MobileBroadbandRegistrationStateChangeTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class NetworkOperatorDataUsageTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class NetworkOperatorHotspotAuthenticationTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class NetworkOperatorNotificationTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self], network_account_id: str) -> Self: ...
    # System.String Windows.ApplicationModel.Background.NetworkOperatorNotificationTrigger::get_NetworkAccountId()
    @_property
    def network_account_id(self) -> str: ...

@typing.final
class PaymentAppCanMakePaymentTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class PhoneTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self], type: windows_applicationmodel_calls_background.PhoneTriggerType, one_shot: bool) -> Self: ...
    # System.Boolean Windows.ApplicationModel.Background.PhoneTrigger::get_OneShot()
    @_property
    def one_shot(self) -> bool: ...
    # Windows.ApplicationModel.Calls.Background.PhoneTriggerType Windows.ApplicationModel.Background.PhoneTrigger::get_TriggerType()
    @_property
    def trigger_type(self) -> windows_applicationmodel_calls_background.PhoneTriggerType: ...

@typing.final
class PushNotificationTrigger(winrt.system.Object, IBackgroundTrigger):
    @typing.overload
    def __new__(cls: typing.Type[Self], application_id: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class RcsEndUserMessageAvailableTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class RfcommConnectionTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Networking.HostName Windows.ApplicationModel.Background.RfcommConnectionTrigger::get_RemoteHostName()
    @_property
    def remote_host_name(self) -> windows_networking.HostName: ...
    # System.Void Windows.ApplicationModel.Background.RfcommConnectionTrigger::put_RemoteHostName(Windows.Networking.HostName)
    @remote_host_name.setter
    def remote_host_name(self, value: windows_networking.HostName) -> None: ...
    # Windows.Networking.Sockets.SocketProtectionLevel Windows.ApplicationModel.Background.RfcommConnectionTrigger::get_ProtectionLevel()
    @_property
    def protection_level(self) -> windows_networking_sockets.SocketProtectionLevel: ...
    # System.Void Windows.ApplicationModel.Background.RfcommConnectionTrigger::put_ProtectionLevel(Windows.Networking.Sockets.SocketProtectionLevel)
    @protection_level.setter
    def protection_level(self, value: windows_networking_sockets.SocketProtectionLevel) -> None: ...
    # System.Boolean Windows.ApplicationModel.Background.RfcommConnectionTrigger::get_AllowMultipleConnections()
    @_property
    def allow_multiple_connections(self) -> bool: ...
    # System.Void Windows.ApplicationModel.Background.RfcommConnectionTrigger::put_AllowMultipleConnections(System.Boolean)
    @allow_multiple_connections.setter
    def allow_multiple_connections(self, value: bool) -> None: ...
    # Windows.Devices.Bluetooth.Background.RfcommInboundConnectionInformation Windows.ApplicationModel.Background.RfcommConnectionTrigger::get_InboundConnection()
    @_property
    def inbound_connection(self) -> windows_devices_bluetooth_background.RfcommInboundConnectionInformation: ...
    # Windows.Devices.Bluetooth.Background.RfcommOutboundConnectionInformation Windows.ApplicationModel.Background.RfcommConnectionTrigger::get_OutboundConnection()
    @_property
    def outbound_connection(self) -> windows_devices_bluetooth_background.RfcommOutboundConnectionInformation: ...

@typing.final
class SecondaryAuthenticationFactorAuthenticationTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class SensorDataThresholdTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self], threshold: windows_devices_sensors.ISensorDataThreshold) -> Self: ...

@typing.final
class SmartCardTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self], trigger_type: windows_devices_smartcards.SmartCardTriggerType) -> Self: ...
    # Windows.Devices.SmartCards.SmartCardTriggerType Windows.ApplicationModel.Background.SmartCardTrigger::get_TriggerType()
    @_property
    def trigger_type(self) -> windows_devices_smartcards.SmartCardTriggerType: ...

@typing.final
class SmsMessageReceivedTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self], filter_rules: windows_devices_sms.SmsFilterRules) -> Self: ...

@typing.final
class SocketActivityTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Boolean Windows.ApplicationModel.Background.SocketActivityTrigger::get_IsWakeFromLowPowerSupported()
    @_property
    def is_wake_from_low_power_supported(self) -> bool: ...

@typing.final
class StorageLibraryChangeTrackerTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self], tracker: windows_storage.StorageLibraryChangeTracker) -> Self: ...

@typing.final
class StorageLibraryContentChangedTrigger_Static(type):
    # Windows.ApplicationModel.Background.StorageLibraryContentChangedTrigger Windows.ApplicationModel.Background.StorageLibraryContentChangedTrigger::Create(Windows.Storage.StorageLibrary)
    def create(cls, storage_library: windows_storage.StorageLibrary, /) -> StorageLibraryContentChangedTrigger: ...
    # Windows.ApplicationModel.Background.StorageLibraryContentChangedTrigger Windows.ApplicationModel.Background.StorageLibraryContentChangedTrigger::CreateFromLibraries(Windows.Foundation.Collections.IIterable`1<Windows.Storage.StorageLibrary>)
    def create_from_libraries(cls, storage_libraries: typing.Iterable[windows_storage.StorageLibrary], /) -> StorageLibraryContentChangedTrigger: ...

@typing.final
class StorageLibraryContentChangedTrigger(winrt.system.Object, IBackgroundTrigger, metaclass=StorageLibraryContentChangedTrigger_Static):
    pass

@typing.final
class SystemCondition(winrt.system.Object, IBackgroundCondition):
    def __new__(cls: typing.Type[Self], condition_type: SystemConditionType) -> Self: ...
    # Windows.ApplicationModel.Background.SystemConditionType Windows.ApplicationModel.Background.SystemCondition::get_ConditionType()
    @_property
    def condition_type(self) -> SystemConditionType: ...

@typing.final
class SystemTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self], trigger_type: SystemTriggerType, one_shot: bool) -> Self: ...
    # System.Boolean Windows.ApplicationModel.Background.SystemTrigger::get_OneShot()
    @_property
    def one_shot(self) -> bool: ...
    # Windows.ApplicationModel.Background.SystemTriggerType Windows.ApplicationModel.Background.SystemTrigger::get_TriggerType()
    @_property
    def trigger_type(self) -> SystemTriggerType: ...

@typing.final
class TetheringEntitlementCheckTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class TimeTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self], freshness_time: winrt.system.UInt32, one_shot: bool) -> Self: ...
    # System.UInt32 Windows.ApplicationModel.Background.TimeTrigger::get_FreshnessTime()
    @_property
    def freshness_time(self) -> winrt.system.UInt32: ...
    # System.Boolean Windows.ApplicationModel.Background.TimeTrigger::get_OneShot()
    @_property
    def one_shot(self) -> bool: ...

@typing.final
class ToastNotificationActionTrigger(winrt.system.Object, IBackgroundTrigger):
    @typing.overload
    def __new__(cls: typing.Type[Self], application_id: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class ToastNotificationHistoryChangedTrigger(winrt.system.Object, IBackgroundTrigger):
    @typing.overload
    def __new__(cls: typing.Type[Self], application_id: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class UserNotificationChangedTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self], notification_kinds: windows_ui_notifications.NotificationKinds) -> Self: ...

@typing.final
class WiFiOnDemandHotspotConnectTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class WiFiOnDemandHotspotUpdateMetadataTrigger(winrt.system.Object, IBackgroundTrigger):
    def __new__(cls: typing.Type[Self]) -> Self: ...

class IBackgroundCondition(winrt._winrt.IInspectable):  # type: ignore[misc]
    pass

class IBackgroundTask(winrt._winrt.IInspectable):
    # System.Void Windows.ApplicationModel.Background.IBackgroundTask::Run(Windows.ApplicationModel.Background.IBackgroundTaskInstance)
    @abstractmethod
    def run(self, task_instance: IBackgroundTaskInstance, /) -> None: ...

class IBackgroundTaskInstance(winrt._winrt.IInspectable):
    # Windows.ApplicationModel.Background.BackgroundTaskDeferral Windows.ApplicationModel.Background.IBackgroundTaskInstance::GetDeferral()
    @abstractmethod
    def get_deferral(self) -> BackgroundTaskDeferral: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Background.IBackgroundTaskInstance::add_Canceled(Windows.ApplicationModel.Background.BackgroundTaskCanceledEventHandler)
    @abstractmethod
    def add_canceled(self, cancel_handler: BackgroundTaskCanceledEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Background.IBackgroundTaskInstance::remove_Canceled(Windows.Foundation.EventRegistrationToken)
    @abstractmethod
    def remove_canceled(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Guid Windows.ApplicationModel.Background.IBackgroundTaskInstance::get_InstanceId()
    @_property
    @abstractmethod
    def instance_id(self) -> _uuid.UUID: ...
    # System.UInt32 Windows.ApplicationModel.Background.IBackgroundTaskInstance::get_Progress()
    @_property
    @abstractmethod
    def progress(self) -> winrt.system.UInt32: ...
    # System.Void Windows.ApplicationModel.Background.IBackgroundTaskInstance::put_Progress(System.UInt32)
    @progress.setter
    @abstractmethod
    def progress(self, value: winrt.system.UInt32) -> None: ...
    # System.UInt32 Windows.ApplicationModel.Background.IBackgroundTaskInstance::get_SuspendedCount()
    @_property
    @abstractmethod
    def suspended_count(self) -> winrt.system.UInt32: ...
    # Windows.ApplicationModel.Background.BackgroundTaskRegistration Windows.ApplicationModel.Background.IBackgroundTaskInstance::get_Task()
    @_property
    @abstractmethod
    def task(self) -> BackgroundTaskRegistration: ...
    # System.Object Windows.ApplicationModel.Background.IBackgroundTaskInstance::get_TriggerDetails()
    @_property
    @abstractmethod
    def trigger_details(self) -> winrt.system.Object: ...

class IBackgroundTaskInstance2(IBackgroundTaskInstance, winrt._winrt.IInspectable):
    # System.UInt32 Windows.ApplicationModel.Background.IBackgroundTaskInstance2::GetThrottleCount(Windows.ApplicationModel.Background.BackgroundTaskThrottleCounter)
    @abstractmethod
    def get_throttle_count(self, counter: BackgroundTaskThrottleCounter, /) -> winrt.system.UInt32: ...

class IBackgroundTaskInstance4(IBackgroundTaskInstance, winrt._winrt.IInspectable):
    # Windows.System.User Windows.ApplicationModel.Background.IBackgroundTaskInstance4::get_User()
    @_property
    @abstractmethod
    def user(self) -> windows_system.User: ...

class IBackgroundTaskRegistration(winrt._winrt.IInspectable):
    # System.Void Windows.ApplicationModel.Background.IBackgroundTaskRegistration::Unregister(System.Boolean)
    @abstractmethod
    def unregister(self, cancel_task: bool, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Background.IBackgroundTaskRegistration::add_Completed(Windows.ApplicationModel.Background.BackgroundTaskCompletedEventHandler)
    @abstractmethod
    def add_completed(self, handler: BackgroundTaskCompletedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Background.IBackgroundTaskRegistration::remove_Completed(Windows.Foundation.EventRegistrationToken)
    @abstractmethod
    def remove_completed(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.Background.IBackgroundTaskRegistration::add_Progress(Windows.ApplicationModel.Background.BackgroundTaskProgressEventHandler)
    @abstractmethod
    def add_progress(self, handler: BackgroundTaskProgressEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.Background.IBackgroundTaskRegistration::remove_Progress(Windows.Foundation.EventRegistrationToken)
    @abstractmethod
    def remove_progress(self, cookie: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Windows.ApplicationModel.Background.IBackgroundTaskRegistration::get_Name()
    @_property
    @abstractmethod
    def name(self) -> str: ...
    # System.Guid Windows.ApplicationModel.Background.IBackgroundTaskRegistration::get_TaskId()
    @_property
    @abstractmethod
    def task_id(self) -> _uuid.UUID: ...

class IBackgroundTaskRegistration2(IBackgroundTaskRegistration, winrt._winrt.IInspectable):
    # Windows.ApplicationModel.Background.IBackgroundTrigger Windows.ApplicationModel.Background.IBackgroundTaskRegistration2::get_Trigger()
    @_property
    @abstractmethod
    def trigger(self) -> IBackgroundTrigger: ...

class IBackgroundTaskRegistration3(IBackgroundTaskRegistration, winrt._winrt.IInspectable):
    # Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup Windows.ApplicationModel.Background.IBackgroundTaskRegistration3::get_TaskGroup()
    @_property
    @abstractmethod
    def task_group(self) -> BackgroundTaskRegistrationGroup: ...

class IBackgroundTrigger(winrt._winrt.IInspectable):  # type: ignore[misc]
    pass

