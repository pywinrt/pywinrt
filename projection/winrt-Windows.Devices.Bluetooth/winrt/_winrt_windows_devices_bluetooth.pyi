# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.devices.bluetooth.genericattributeprofile as windows_devices_bluetooth_genericattributeprofile
import winrt.windows.devices.bluetooth.rfcomm as windows_devices_bluetooth_rfcomm
import winrt.windows.devices.enumeration as windows_devices_enumeration
import winrt.windows.devices.radios as windows_devices_radios
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.networking as windows_networking
import winrt.windows.storage.streams as windows_storage_streams

from winrt.windows.devices.bluetooth import BluetoothAddressType, BluetoothCacheMode, BluetoothConnectionStatus, BluetoothError, BluetoothLEPreferredConnectionParametersRequestStatus, BluetoothMajorClass, BluetoothMinorClass, BluetoothServiceCapabilities

Self = typing.TypeVar('Self')

@typing.final
class BluetoothAdapter_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Bluetooth.BluetoothAdapter> Windows.Devices.Bluetooth.BluetoothAdapter::FromIdAsync(System.String)
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[BluetoothAdapter]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Bluetooth.BluetoothAdapter> Windows.Devices.Bluetooth.BluetoothAdapter::GetDefaultAsync()
    def get_default_async(cls) -> windows_foundation.IAsyncOperation[BluetoothAdapter]: ...
    # System.String Windows.Devices.Bluetooth.BluetoothAdapter::GetDeviceSelector()
    def get_device_selector(cls) -> str: ...

@typing.final
class BluetoothAdapter(winrt.system.Object, metaclass=BluetoothAdapter_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Radios.Radio> Windows.Devices.Bluetooth.BluetoothAdapter::GetRadioAsync()
    def get_radio_async(self) -> windows_foundation.IAsyncOperation[windows_devices_radios.Radio]: ...
    # System.UInt64 Windows.Devices.Bluetooth.BluetoothAdapter::get_BluetoothAddress()
    @_property
    def bluetooth_address(self) -> winrt.system.UInt64: ...
    # System.String Windows.Devices.Bluetooth.BluetoothAdapter::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # System.Boolean Windows.Devices.Bluetooth.BluetoothAdapter::get_IsAdvertisementOffloadSupported()
    @_property
    def is_advertisement_offload_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.Bluetooth.BluetoothAdapter::get_IsCentralRoleSupported()
    @_property
    def is_central_role_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.Bluetooth.BluetoothAdapter::get_IsClassicSupported()
    @_property
    def is_classic_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.Bluetooth.BluetoothAdapter::get_IsLowEnergySupported()
    @_property
    def is_low_energy_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.Bluetooth.BluetoothAdapter::get_IsPeripheralRoleSupported()
    @_property
    def is_peripheral_role_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.Bluetooth.BluetoothAdapter::get_AreClassicSecureConnectionsSupported()
    @_property
    def are_classic_secure_connections_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.Bluetooth.BluetoothAdapter::get_AreLowEnergySecureConnectionsSupported()
    @_property
    def are_low_energy_secure_connections_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.Bluetooth.BluetoothAdapter::get_IsExtendedAdvertisingSupported()
    @_property
    def is_extended_advertising_supported(self) -> bool: ...
    # System.UInt32 Windows.Devices.Bluetooth.BluetoothAdapter::get_MaxAdvertisementDataLength()
    @_property
    def max_advertisement_data_length(self) -> winrt.system.UInt32: ...
    # System.Boolean Windows.Devices.Bluetooth.BluetoothAdapter::get_IsLowEnergyCodedPhySupported()
    @_property
    def is_low_energy_coded_phy_supported(self) -> bool: ...
    # System.Boolean Windows.Devices.Bluetooth.BluetoothAdapter::get_IsLowEnergyUncoded2MPhySupported()
    @_property
    def is_low_energy_uncoded2_m_phy_supported(self) -> bool: ...

@typing.final
class BluetoothClassOfDevice_Static(winrt._winrt.IInspectable_Static):
    # Windows.Devices.Bluetooth.BluetoothClassOfDevice Windows.Devices.Bluetooth.BluetoothClassOfDevice::FromParts(Windows.Devices.Bluetooth.BluetoothMajorClass,Windows.Devices.Bluetooth.BluetoothMinorClass,Windows.Devices.Bluetooth.BluetoothServiceCapabilities)
    def from_parts(cls, major_class: BluetoothMajorClass, minor_class: BluetoothMinorClass, service_capabilities: BluetoothServiceCapabilities, /) -> BluetoothClassOfDevice: ...
    # Windows.Devices.Bluetooth.BluetoothClassOfDevice Windows.Devices.Bluetooth.BluetoothClassOfDevice::FromRawValue(System.UInt32)
    def from_raw_value(cls, raw_value: winrt.system.UInt32, /) -> BluetoothClassOfDevice: ...

@typing.final
class BluetoothClassOfDevice(winrt.system.Object, metaclass=BluetoothClassOfDevice_Static):
    # Windows.Devices.Bluetooth.BluetoothMajorClass Windows.Devices.Bluetooth.BluetoothClassOfDevice::get_MajorClass()
    @_property
    def major_class(self) -> BluetoothMajorClass: ...
    # Windows.Devices.Bluetooth.BluetoothMinorClass Windows.Devices.Bluetooth.BluetoothClassOfDevice::get_MinorClass()
    @_property
    def minor_class(self) -> BluetoothMinorClass: ...
    # System.UInt32 Windows.Devices.Bluetooth.BluetoothClassOfDevice::get_RawValue()
    @_property
    def raw_value(self) -> winrt.system.UInt32: ...
    # Windows.Devices.Bluetooth.BluetoothServiceCapabilities Windows.Devices.Bluetooth.BluetoothClassOfDevice::get_ServiceCapabilities()
    @_property
    def service_capabilities(self) -> BluetoothServiceCapabilities: ...

@typing.final
class BluetoothDevice_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Bluetooth.BluetoothDevice> Windows.Devices.Bluetooth.BluetoothDevice::FromBluetoothAddressAsync(System.UInt64)
    def from_bluetooth_address_async(cls, address: winrt.system.UInt64, /) -> windows_foundation.IAsyncOperation[BluetoothDevice]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Bluetooth.BluetoothDevice> Windows.Devices.Bluetooth.BluetoothDevice::FromHostNameAsync(Windows.Networking.HostName)
    def from_host_name_async(cls, host_name: windows_networking.HostName, /) -> windows_foundation.IAsyncOperation[BluetoothDevice]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Bluetooth.BluetoothDevice> Windows.Devices.Bluetooth.BluetoothDevice::FromIdAsync(System.String)
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[BluetoothDevice]: ...
    # System.String Windows.Devices.Bluetooth.BluetoothDevice::GetDeviceSelector()
    def get_device_selector(cls) -> str: ...
    # System.String Windows.Devices.Bluetooth.BluetoothDevice::GetDeviceSelectorFromBluetoothAddress(System.UInt64)
    def get_device_selector_from_bluetooth_address(cls, bluetooth_address: winrt.system.UInt64, /) -> str: ...
    # System.String Windows.Devices.Bluetooth.BluetoothDevice::GetDeviceSelectorFromClassOfDevice(Windows.Devices.Bluetooth.BluetoothClassOfDevice)
    def get_device_selector_from_class_of_device(cls, class_of_device: BluetoothClassOfDevice, /) -> str: ...
    # System.String Windows.Devices.Bluetooth.BluetoothDevice::GetDeviceSelectorFromConnectionStatus(Windows.Devices.Bluetooth.BluetoothConnectionStatus)
    def get_device_selector_from_connection_status(cls, connection_status: BluetoothConnectionStatus, /) -> str: ...
    # System.String Windows.Devices.Bluetooth.BluetoothDevice::GetDeviceSelectorFromDeviceName(System.String)
    def get_device_selector_from_device_name(cls, device_name: str, /) -> str: ...
    # System.String Windows.Devices.Bluetooth.BluetoothDevice::GetDeviceSelectorFromPairingState(System.Boolean)
    def get_device_selector_from_pairing_state(cls, pairing_state: bool, /) -> str: ...

@typing.final
class BluetoothDevice(winrt.system.Object, windows_foundation.IClosable, metaclass=BluetoothDevice_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # System.Void Windows.Devices.Bluetooth.BluetoothDevice::Close()
    def close(self) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult> Windows.Devices.Bluetooth.BluetoothDevice::GetRfcommServicesAsync()
    def get_rfcomm_services_async(self) -> windows_foundation.IAsyncOperation[windows_devices_bluetooth_rfcomm.RfcommDeviceServicesResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult> Windows.Devices.Bluetooth.BluetoothDevice::GetRfcommServicesForIdAsync(Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId)
    def get_rfcomm_services_for_id_async(self, service_id: windows_devices_bluetooth_rfcomm.RfcommServiceId, /) -> windows_foundation.IAsyncOperation[windows_devices_bluetooth_rfcomm.RfcommDeviceServicesResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult> Windows.Devices.Bluetooth.BluetoothDevice::GetRfcommServicesForIdAsync(Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId,Windows.Devices.Bluetooth.BluetoothCacheMode)
    def get_rfcomm_services_for_id_with_cache_mode_async(self, service_id: windows_devices_bluetooth_rfcomm.RfcommServiceId, cache_mode: BluetoothCacheMode, /) -> windows_foundation.IAsyncOperation[windows_devices_bluetooth_rfcomm.RfcommDeviceServicesResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceServicesResult> Windows.Devices.Bluetooth.BluetoothDevice::GetRfcommServicesAsync(Windows.Devices.Bluetooth.BluetoothCacheMode)
    def get_rfcomm_services_with_cache_mode_async(self, cache_mode: BluetoothCacheMode, /) -> windows_foundation.IAsyncOperation[windows_devices_bluetooth_rfcomm.RfcommDeviceServicesResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Enumeration.DeviceAccessStatus> Windows.Devices.Bluetooth.BluetoothDevice::RequestAccessAsync()
    def request_access_async(self) -> windows_foundation.IAsyncOperation[windows_devices_enumeration.DeviceAccessStatus]: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.Bluetooth.BluetoothDevice::add_ConnectionStatusChanged(Windows.Foundation.TypedEventHandler`2<Windows.Devices.Bluetooth.BluetoothDevice,System.Object>)
    def add_connection_status_changed(self, handler: windows_foundation.TypedEventHandler[BluetoothDevice, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.Bluetooth.BluetoothDevice::remove_ConnectionStatusChanged(Windows.Foundation.EventRegistrationToken)
    def remove_connection_status_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.Bluetooth.BluetoothDevice::add_NameChanged(Windows.Foundation.TypedEventHandler`2<Windows.Devices.Bluetooth.BluetoothDevice,System.Object>)
    def add_name_changed(self, handler: windows_foundation.TypedEventHandler[BluetoothDevice, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.Bluetooth.BluetoothDevice::remove_NameChanged(Windows.Foundation.EventRegistrationToken)
    def remove_name_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.Bluetooth.BluetoothDevice::add_SdpRecordsChanged(Windows.Foundation.TypedEventHandler`2<Windows.Devices.Bluetooth.BluetoothDevice,System.Object>)
    def add_sdp_records_changed(self, handler: windows_foundation.TypedEventHandler[BluetoothDevice, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.Bluetooth.BluetoothDevice::remove_SdpRecordsChanged(Windows.Foundation.EventRegistrationToken)
    def remove_sdp_records_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.UInt64 Windows.Devices.Bluetooth.BluetoothDevice::get_BluetoothAddress()
    @_property
    def bluetooth_address(self) -> winrt.system.UInt64: ...
    # Windows.Devices.Bluetooth.BluetoothClassOfDevice Windows.Devices.Bluetooth.BluetoothDevice::get_ClassOfDevice()
    @_property
    def class_of_device(self) -> BluetoothClassOfDevice: ...
    # Windows.Devices.Bluetooth.BluetoothConnectionStatus Windows.Devices.Bluetooth.BluetoothDevice::get_ConnectionStatus()
    @_property
    def connection_status(self) -> BluetoothConnectionStatus: ...
    # System.String Windows.Devices.Bluetooth.BluetoothDevice::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # Windows.Networking.HostName Windows.Devices.Bluetooth.BluetoothDevice::get_HostName()
    @_property
    def host_name(self) -> windows_networking.HostName: ...
    # System.String Windows.Devices.Bluetooth.BluetoothDevice::get_Name()
    @_property
    def name(self) -> str: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService> Windows.Devices.Bluetooth.BluetoothDevice::get_RfcommServices()
    @_property
    def rfcomm_services(self) -> typing.Sequence[windows_devices_bluetooth_rfcomm.RfcommDeviceService]: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Storage.Streams.IBuffer> Windows.Devices.Bluetooth.BluetoothDevice::get_SdpRecords()
    @_property
    def sdp_records(self) -> typing.Sequence[windows_storage_streams.IBuffer]: ...
    # Windows.Devices.Enumeration.DeviceInformation Windows.Devices.Bluetooth.BluetoothDevice::get_DeviceInformation()
    @_property
    def device_information(self) -> windows_devices_enumeration.DeviceInformation: ...
    # Windows.Devices.Enumeration.DeviceAccessInformation Windows.Devices.Bluetooth.BluetoothDevice::get_DeviceAccessInformation()
    @_property
    def device_access_information(self) -> windows_devices_enumeration.DeviceAccessInformation: ...
    # Windows.Devices.Bluetooth.BluetoothDeviceId Windows.Devices.Bluetooth.BluetoothDevice::get_BluetoothDeviceId()
    @_property
    def bluetooth_device_id(self) -> BluetoothDeviceId: ...
    # System.Boolean Windows.Devices.Bluetooth.BluetoothDevice::get_WasSecureConnectionUsedForPairing()
    @_property
    def was_secure_connection_used_for_pairing(self) -> bool: ...

@typing.final
class BluetoothDeviceId_Static(winrt._winrt.IInspectable_Static):
    # Windows.Devices.Bluetooth.BluetoothDeviceId Windows.Devices.Bluetooth.BluetoothDeviceId::FromId(System.String)
    def from_id(cls, device_id: str, /) -> BluetoothDeviceId: ...

@typing.final
class BluetoothDeviceId(winrt.system.Object, metaclass=BluetoothDeviceId_Static):
    # System.String Windows.Devices.Bluetooth.BluetoothDeviceId::get_Id()
    @_property
    def id(self) -> str: ...
    # System.Boolean Windows.Devices.Bluetooth.BluetoothDeviceId::get_IsClassicDevice()
    @_property
    def is_classic_device(self) -> bool: ...
    # System.Boolean Windows.Devices.Bluetooth.BluetoothDeviceId::get_IsLowEnergyDevice()
    @_property
    def is_low_energy_device(self) -> bool: ...

@typing.final
class BluetoothLEAppearance_Static(winrt._winrt.IInspectable_Static):
    # Windows.Devices.Bluetooth.BluetoothLEAppearance Windows.Devices.Bluetooth.BluetoothLEAppearance::FromParts(System.UInt16,System.UInt16)
    def from_parts(cls, appearance_category: winrt.system.UInt16, appearance_sub_category: winrt.system.UInt16, /) -> BluetoothLEAppearance: ...
    # Windows.Devices.Bluetooth.BluetoothLEAppearance Windows.Devices.Bluetooth.BluetoothLEAppearance::FromRawValue(System.UInt16)
    def from_raw_value(cls, raw_value: winrt.system.UInt16, /) -> BluetoothLEAppearance: ...

@typing.final
class BluetoothLEAppearance(winrt.system.Object, metaclass=BluetoothLEAppearance_Static):
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearance::get_Category()
    @_property
    def category(self) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearance::get_RawValue()
    @_property
    def raw_value(self) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearance::get_SubCategory()
    @_property
    def sub_category(self) -> winrt.system.UInt16: ...

@typing.final
class BluetoothLEAppearanceCategories_Static(winrt._winrt.IInspectable_Static):
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_BarcodeScanner()
    @_property
    def barcode_scanner(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_BloodPressure()
    @_property
    def blood_pressure(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_Clock()
    @_property
    def clock(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_Computer()
    @_property
    def computer(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_Cycling()
    @_property
    def cycling(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_Display()
    @_property
    def display(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_EyeGlasses()
    @_property
    def eye_glasses(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_GlucoseMeter()
    @_property
    def glucose_meter(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_HeartRate()
    @_property
    def heart_rate(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_HumanInterfaceDevice()
    @_property
    def human_interface_device(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_Keyring()
    @_property
    def keyring(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_MediaPlayer()
    @_property
    def media_player(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_OutdoorSportActivity()
    @_property
    def outdoor_sport_activity(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_Phone()
    @_property
    def phone(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_PulseOximeter()
    @_property
    def pulse_oximeter(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_RemoteControl()
    @_property
    def remote_control(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_RunningWalking()
    @_property
    def running_walking(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_Tag()
    @_property
    def tag(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_Thermometer()
    @_property
    def thermometer(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_Uncategorized()
    @_property
    def uncategorized(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_Watch()
    @_property
    def watch(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories::get_WeightScale()
    @_property
    def weight_scale(cls) -> winrt.system.UInt16: ...

@typing.final
class BluetoothLEAppearanceCategories(winrt.system.Object, metaclass=BluetoothLEAppearanceCategories_Static):
    pass

@typing.final
class BluetoothLEAppearanceSubcategories_Static(winrt._winrt.IInspectable_Static):
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_BarcodeScanner()
    @_property
    def barcode_scanner(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_BloodPressureArm()
    @_property
    def blood_pressure_arm(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_BloodPressureWrist()
    @_property
    def blood_pressure_wrist(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_CardReader()
    @_property
    def card_reader(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_CyclingCadenceSensor()
    @_property
    def cycling_cadence_sensor(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_CyclingComputer()
    @_property
    def cycling_computer(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_CyclingPowerSensor()
    @_property
    def cycling_power_sensor(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_CyclingSpeedCadenceSensor()
    @_property
    def cycling_speed_cadence_sensor(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_CyclingSpeedSensor()
    @_property
    def cycling_speed_sensor(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_DigitalPen()
    @_property
    def digital_pen(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_DigitizerTablet()
    @_property
    def digitizer_tablet(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_Gamepad()
    @_property
    def gamepad(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_Generic()
    @_property
    def generic(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_HeartRateBelt()
    @_property
    def heart_rate_belt(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_Joystick()
    @_property
    def joystick(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_Keyboard()
    @_property
    def keyboard(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_LocationDisplay()
    @_property
    def location_display(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_LocationNavigationDisplay()
    @_property
    def location_navigation_display(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_LocationNavigationPod()
    @_property
    def location_navigation_pod(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_LocationPod()
    @_property
    def location_pod(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_Mouse()
    @_property
    def mouse(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_OximeterFingertip()
    @_property
    def oximeter_fingertip(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_OximeterWristWorn()
    @_property
    def oximeter_wrist_worn(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_RunningWalkingInShoe()
    @_property
    def running_walking_in_shoe(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_RunningWalkingOnHip()
    @_property
    def running_walking_on_hip(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_RunningWalkingOnShoe()
    @_property
    def running_walking_on_shoe(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_SportsWatch()
    @_property
    def sports_watch(cls) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories::get_ThermometerEar()
    @_property
    def thermometer_ear(cls) -> winrt.system.UInt16: ...

@typing.final
class BluetoothLEAppearanceSubcategories(winrt.system.Object, metaclass=BluetoothLEAppearanceSubcategories_Static):
    pass

@typing.final
class BluetoothLEConnectionParameters(winrt.system.Object):
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEConnectionParameters::get_ConnectionInterval()
    @_property
    def connection_interval(self) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEConnectionParameters::get_ConnectionLatency()
    @_property
    def connection_latency(self) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEConnectionParameters::get_LinkTimeout()
    @_property
    def link_timeout(self) -> winrt.system.UInt16: ...

@typing.final
class BluetoothLEConnectionPhy(winrt.system.Object):
    # Windows.Devices.Bluetooth.BluetoothLEConnectionPhyInfo Windows.Devices.Bluetooth.BluetoothLEConnectionPhy::get_ReceiveInfo()
    @_property
    def receive_info(self) -> BluetoothLEConnectionPhyInfo: ...
    # Windows.Devices.Bluetooth.BluetoothLEConnectionPhyInfo Windows.Devices.Bluetooth.BluetoothLEConnectionPhy::get_TransmitInfo()
    @_property
    def transmit_info(self) -> BluetoothLEConnectionPhyInfo: ...

@typing.final
class BluetoothLEConnectionPhyInfo(winrt.system.Object):
    # System.Boolean Windows.Devices.Bluetooth.BluetoothLEConnectionPhyInfo::get_IsCodedPhy()
    @_property
    def is_coded_phy(self) -> bool: ...
    # System.Boolean Windows.Devices.Bluetooth.BluetoothLEConnectionPhyInfo::get_IsUncoded1MPhy()
    @_property
    def is_uncoded1_m_phy(self) -> bool: ...
    # System.Boolean Windows.Devices.Bluetooth.BluetoothLEConnectionPhyInfo::get_IsUncoded2MPhy()
    @_property
    def is_uncoded2_m_phy(self) -> bool: ...

@typing.final
class BluetoothLEDevice_Static(winrt._winrt.IInspectable_Static):
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Bluetooth.BluetoothLEDevice> Windows.Devices.Bluetooth.BluetoothLEDevice::FromBluetoothAddressAsync(System.UInt64)
    def from_bluetooth_address_async(cls, bluetooth_address: winrt.system.UInt64, /) -> windows_foundation.IAsyncOperation[BluetoothLEDevice]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Bluetooth.BluetoothLEDevice> Windows.Devices.Bluetooth.BluetoothLEDevice::FromBluetoothAddressAsync(System.UInt64,Windows.Devices.Bluetooth.BluetoothAddressType)
    def from_bluetooth_address_with_bluetooth_address_type_async(cls, bluetooth_address: winrt.system.UInt64, bluetooth_address_type: BluetoothAddressType, /) -> windows_foundation.IAsyncOperation[BluetoothLEDevice]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Bluetooth.BluetoothLEDevice> Windows.Devices.Bluetooth.BluetoothLEDevice::FromIdAsync(System.String)
    def from_id_async(cls, device_id: str, /) -> windows_foundation.IAsyncOperation[BluetoothLEDevice]: ...
    # System.String Windows.Devices.Bluetooth.BluetoothLEDevice::GetDeviceSelector()
    def get_device_selector(cls) -> str: ...
    # System.String Windows.Devices.Bluetooth.BluetoothLEDevice::GetDeviceSelectorFromAppearance(Windows.Devices.Bluetooth.BluetoothLEAppearance)
    def get_device_selector_from_appearance(cls, appearance: BluetoothLEAppearance, /) -> str: ...
    # System.String Windows.Devices.Bluetooth.BluetoothLEDevice::GetDeviceSelectorFromBluetoothAddress(System.UInt64)
    def get_device_selector_from_bluetooth_address(cls, bluetooth_address: winrt.system.UInt64, /) -> str: ...
    # System.String Windows.Devices.Bluetooth.BluetoothLEDevice::GetDeviceSelectorFromBluetoothAddress(System.UInt64,Windows.Devices.Bluetooth.BluetoothAddressType)
    def get_device_selector_from_bluetooth_address_with_bluetooth_address_type(cls, bluetooth_address: winrt.system.UInt64, bluetooth_address_type: BluetoothAddressType, /) -> str: ...
    # System.String Windows.Devices.Bluetooth.BluetoothLEDevice::GetDeviceSelectorFromConnectionStatus(Windows.Devices.Bluetooth.BluetoothConnectionStatus)
    def get_device_selector_from_connection_status(cls, connection_status: BluetoothConnectionStatus, /) -> str: ...
    # System.String Windows.Devices.Bluetooth.BluetoothLEDevice::GetDeviceSelectorFromDeviceName(System.String)
    def get_device_selector_from_device_name(cls, device_name: str, /) -> str: ...
    # System.String Windows.Devices.Bluetooth.BluetoothLEDevice::GetDeviceSelectorFromPairingState(System.Boolean)
    def get_device_selector_from_pairing_state(cls, pairing_state: bool, /) -> str: ...

@typing.final
class BluetoothLEDevice(winrt.system.Object, windows_foundation.IClosable, metaclass=BluetoothLEDevice_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # System.Void Windows.Devices.Bluetooth.BluetoothLEDevice::Close()
    def close(self) -> None: ...
    # Windows.Devices.Bluetooth.BluetoothLEConnectionParameters Windows.Devices.Bluetooth.BluetoothLEDevice::GetConnectionParameters()
    def get_connection_parameters(self) -> BluetoothLEConnectionParameters: ...
    # Windows.Devices.Bluetooth.BluetoothLEConnectionPhy Windows.Devices.Bluetooth.BluetoothLEDevice::GetConnectionPhy()
    def get_connection_phy(self) -> BluetoothLEConnectionPhy: ...
    # Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService Windows.Devices.Bluetooth.BluetoothLEDevice::GetGattService(System.Guid)
    # @deprecated("Use GetGattServicesForUuidAsync instead of GetGattService.  For more information, see MSDN.")
    def get_gatt_service(self, service_uuid: _uuid.UUID, /) -> windows_devices_bluetooth_genericattributeprofile.GattDeviceService: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult> Windows.Devices.Bluetooth.BluetoothLEDevice::GetGattServicesAsync()
    def get_gatt_services_async(self) -> windows_foundation.IAsyncOperation[windows_devices_bluetooth_genericattributeprofile.GattDeviceServicesResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult> Windows.Devices.Bluetooth.BluetoothLEDevice::GetGattServicesForUuidAsync(System.Guid)
    def get_gatt_services_for_uuid_async(self, service_uuid: _uuid.UUID, /) -> windows_foundation.IAsyncOperation[windows_devices_bluetooth_genericattributeprofile.GattDeviceServicesResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult> Windows.Devices.Bluetooth.BluetoothLEDevice::GetGattServicesForUuidAsync(System.Guid,Windows.Devices.Bluetooth.BluetoothCacheMode)
    def get_gatt_services_for_uuid_with_cache_mode_async(self, service_uuid: _uuid.UUID, cache_mode: BluetoothCacheMode, /) -> windows_foundation.IAsyncOperation[windows_devices_bluetooth_genericattributeprofile.GattDeviceServicesResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceServicesResult> Windows.Devices.Bluetooth.BluetoothLEDevice::GetGattServicesAsync(Windows.Devices.Bluetooth.BluetoothCacheMode)
    def get_gatt_services_with_cache_mode_async(self, cache_mode: BluetoothCacheMode, /) -> windows_foundation.IAsyncOperation[windows_devices_bluetooth_genericattributeprofile.GattDeviceServicesResult]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Devices.Enumeration.DeviceAccessStatus> Windows.Devices.Bluetooth.BluetoothLEDevice::RequestAccessAsync()
    def request_access_async(self) -> windows_foundation.IAsyncOperation[windows_devices_enumeration.DeviceAccessStatus]: ...
    # Windows.Devices.Bluetooth.BluetoothLEPreferredConnectionParametersRequest Windows.Devices.Bluetooth.BluetoothLEDevice::RequestPreferredConnectionParameters(Windows.Devices.Bluetooth.BluetoothLEPreferredConnectionParameters)
    def request_preferred_connection_parameters(self, preferred_connection_parameters: BluetoothLEPreferredConnectionParameters, /) -> BluetoothLEPreferredConnectionParametersRequest: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.Bluetooth.BluetoothLEDevice::add_ConnectionStatusChanged(Windows.Foundation.TypedEventHandler`2<Windows.Devices.Bluetooth.BluetoothLEDevice,System.Object>)
    def add_connection_status_changed(self, handler: windows_foundation.TypedEventHandler[BluetoothLEDevice, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.Bluetooth.BluetoothLEDevice::remove_ConnectionStatusChanged(Windows.Foundation.EventRegistrationToken)
    def remove_connection_status_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.Bluetooth.BluetoothLEDevice::add_GattServicesChanged(Windows.Foundation.TypedEventHandler`2<Windows.Devices.Bluetooth.BluetoothLEDevice,System.Object>)
    def add_gatt_services_changed(self, handler: windows_foundation.TypedEventHandler[BluetoothLEDevice, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.Bluetooth.BluetoothLEDevice::remove_GattServicesChanged(Windows.Foundation.EventRegistrationToken)
    def remove_gatt_services_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.Bluetooth.BluetoothLEDevice::add_NameChanged(Windows.Foundation.TypedEventHandler`2<Windows.Devices.Bluetooth.BluetoothLEDevice,System.Object>)
    def add_name_changed(self, handler: windows_foundation.TypedEventHandler[BluetoothLEDevice, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.Bluetooth.BluetoothLEDevice::remove_NameChanged(Windows.Foundation.EventRegistrationToken)
    def remove_name_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.Bluetooth.BluetoothLEDevice::add_ConnectionParametersChanged(Windows.Foundation.TypedEventHandler`2<Windows.Devices.Bluetooth.BluetoothLEDevice,System.Object>)
    def add_connection_parameters_changed(self, handler: windows_foundation.TypedEventHandler[BluetoothLEDevice, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.Bluetooth.BluetoothLEDevice::remove_ConnectionParametersChanged(Windows.Foundation.EventRegistrationToken)
    def remove_connection_parameters_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Devices.Bluetooth.BluetoothLEDevice::add_ConnectionPhyChanged(Windows.Foundation.TypedEventHandler`2<Windows.Devices.Bluetooth.BluetoothLEDevice,System.Object>)
    def add_connection_phy_changed(self, handler: windows_foundation.TypedEventHandler[BluetoothLEDevice, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Devices.Bluetooth.BluetoothLEDevice::remove_ConnectionPhyChanged(Windows.Foundation.EventRegistrationToken)
    def remove_connection_phy_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.UInt64 Windows.Devices.Bluetooth.BluetoothLEDevice::get_BluetoothAddress()
    @_property
    def bluetooth_address(self) -> winrt.system.UInt64: ...
    # Windows.Devices.Bluetooth.BluetoothConnectionStatus Windows.Devices.Bluetooth.BluetoothLEDevice::get_ConnectionStatus()
    @_property
    def connection_status(self) -> BluetoothConnectionStatus: ...
    # System.String Windows.Devices.Bluetooth.BluetoothLEDevice::get_DeviceId()
    @_property
    def device_id(self) -> str: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService> Windows.Devices.Bluetooth.BluetoothLEDevice::get_GattServices()
    @_property
    def gatt_services(self) -> typing.Sequence[windows_devices_bluetooth_genericattributeprofile.GattDeviceService]: ...
    # System.String Windows.Devices.Bluetooth.BluetoothLEDevice::get_Name()
    @_property
    def name(self) -> str: ...
    # Windows.Devices.Bluetooth.BluetoothLEAppearance Windows.Devices.Bluetooth.BluetoothLEDevice::get_Appearance()
    @_property
    def appearance(self) -> BluetoothLEAppearance: ...
    # Windows.Devices.Bluetooth.BluetoothAddressType Windows.Devices.Bluetooth.BluetoothLEDevice::get_BluetoothAddressType()
    @_property
    def bluetooth_address_type(self) -> BluetoothAddressType: ...
    # Windows.Devices.Enumeration.DeviceInformation Windows.Devices.Bluetooth.BluetoothLEDevice::get_DeviceInformation()
    @_property
    def device_information(self) -> windows_devices_enumeration.DeviceInformation: ...
    # Windows.Devices.Enumeration.DeviceAccessInformation Windows.Devices.Bluetooth.BluetoothLEDevice::get_DeviceAccessInformation()
    @_property
    def device_access_information(self) -> windows_devices_enumeration.DeviceAccessInformation: ...
    # Windows.Devices.Bluetooth.BluetoothDeviceId Windows.Devices.Bluetooth.BluetoothLEDevice::get_BluetoothDeviceId()
    @_property
    def bluetooth_device_id(self) -> BluetoothDeviceId: ...
    # System.Boolean Windows.Devices.Bluetooth.BluetoothLEDevice::get_WasSecureConnectionUsedForPairing()
    @_property
    def was_secure_connection_used_for_pairing(self) -> bool: ...

@typing.final
class BluetoothLEPreferredConnectionParameters_Static(winrt._winrt.IInspectable_Static):
    # Windows.Devices.Bluetooth.BluetoothLEPreferredConnectionParameters Windows.Devices.Bluetooth.BluetoothLEPreferredConnectionParameters::get_Balanced()
    @_property
    def balanced(cls) -> BluetoothLEPreferredConnectionParameters: ...
    # Windows.Devices.Bluetooth.BluetoothLEPreferredConnectionParameters Windows.Devices.Bluetooth.BluetoothLEPreferredConnectionParameters::get_PowerOptimized()
    @_property
    def power_optimized(cls) -> BluetoothLEPreferredConnectionParameters: ...
    # Windows.Devices.Bluetooth.BluetoothLEPreferredConnectionParameters Windows.Devices.Bluetooth.BluetoothLEPreferredConnectionParameters::get_ThroughputOptimized()
    @_property
    def throughput_optimized(cls) -> BluetoothLEPreferredConnectionParameters: ...

@typing.final
class BluetoothLEPreferredConnectionParameters(winrt.system.Object, metaclass=BluetoothLEPreferredConnectionParameters_Static):
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEPreferredConnectionParameters::get_ConnectionLatency()
    @_property
    def connection_latency(self) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEPreferredConnectionParameters::get_LinkTimeout()
    @_property
    def link_timeout(self) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEPreferredConnectionParameters::get_MaxConnectionInterval()
    @_property
    def max_connection_interval(self) -> winrt.system.UInt16: ...
    # System.UInt16 Windows.Devices.Bluetooth.BluetoothLEPreferredConnectionParameters::get_MinConnectionInterval()
    @_property
    def min_connection_interval(self) -> winrt.system.UInt16: ...

@typing.final
class BluetoothLEPreferredConnectionParametersRequest(winrt.system.Object, windows_foundation.IClosable):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # System.Void Windows.Devices.Bluetooth.BluetoothLEPreferredConnectionParametersRequest::Close()
    def close(self) -> None: ...
    # Windows.Devices.Bluetooth.BluetoothLEPreferredConnectionParametersRequestStatus Windows.Devices.Bluetooth.BluetoothLEPreferredConnectionParametersRequest::get_Status()
    @_property
    def status(self) -> BluetoothLEPreferredConnectionParametersRequestStatus: ...

@typing.final
class BluetoothSignalStrengthFilter(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter::get_SamplingInterval()
    @_property
    def sampling_interval(self) -> typing.Optional[datetime.timedelta]: ...
    # System.Void Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter::put_SamplingInterval(Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan>)
    @sampling_interval.setter
    def sampling_interval(self, value: typing.Optional[datetime.timedelta]) -> None: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan> Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter::get_OutOfRangeTimeout()
    @_property
    def out_of_range_timeout(self) -> typing.Optional[datetime.timedelta]: ...
    # System.Void Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter::put_OutOfRangeTimeout(Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan>)
    @out_of_range_timeout.setter
    def out_of_range_timeout(self, value: typing.Optional[datetime.timedelta]) -> None: ...
    # Windows.Foundation.IReference`1<System.Int16> Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter::get_OutOfRangeThresholdInDBm()
    @_property
    def out_of_range_threshold_in_dbm(self) -> typing.Optional[winrt.system.Int16]: ...
    # System.Void Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter::put_OutOfRangeThresholdInDBm(Windows.Foundation.IReference`1<System.Int16>)
    @out_of_range_threshold_in_dbm.setter
    def out_of_range_threshold_in_dbm(self, value: typing.Optional[winrt.system.Int16]) -> None: ...
    # Windows.Foundation.IReference`1<System.Int16> Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter::get_InRangeThresholdInDBm()
    @_property
    def in_range_threshold_in_dbm(self) -> typing.Optional[winrt.system.Int16]: ...
    # System.Void Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter::put_InRangeThresholdInDBm(Windows.Foundation.IReference`1<System.Int16>)
    @in_range_threshold_in_dbm.setter
    def in_range_threshold_in_dbm(self, value: typing.Optional[winrt.system.Int16]) -> None: ...

@typing.final
class BluetoothUuidHelper_Static(winrt._winrt.IInspectable_Static):
    # System.Guid Windows.Devices.Bluetooth.BluetoothUuidHelper::FromShortId(System.UInt32)
    def from_short_id(cls, short_id: winrt.system.UInt32, /) -> _uuid.UUID: ...
    # Windows.Foundation.IReference`1<System.UInt32> Windows.Devices.Bluetooth.BluetoothUuidHelper::TryGetShortId(System.Guid)
    def try_get_short_id(cls, uuid: _uuid.UUID, /) -> typing.Optional[winrt.system.UInt32]: ...

@typing.final
class BluetoothUuidHelper(winrt.system.Object, metaclass=BluetoothUuidHelper_Static):
    pass

