# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.background
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.security.credentials
import winrt.windows.storage
import winrt.windows.storage.streams
import winrt.windows.ui.notifications
import winrt.windows.web

from winrt.windows.networking.backgroundtransfer import BackgroundTransferBehavior, BackgroundTransferCostPolicy, BackgroundTransferPriority, BackgroundTransferStatus

Self = typing.TypeVar('Self')

@typing.final
class BackgroundDownloadProgress:
    bytes_received: winrt.system.UInt64
    total_bytes_to_receive: winrt.system.UInt64
    status: BackgroundTransferStatus
    has_response_changed: bool
    has_restarted: bool
    def __init__(self, bytes_received: winrt.system.UInt64, total_bytes_to_receive: winrt.system.UInt64, status: BackgroundTransferStatus, has_response_changed: bool, has_restarted: bool) -> None: ...

@typing.final
class BackgroundTransferFileRange:
    offset: winrt.system.UInt64
    length: winrt.system.UInt64
    def __init__(self, offset: winrt.system.UInt64, length: winrt.system.UInt64) -> None: ...

@typing.final
class BackgroundUploadProgress:
    bytes_received: winrt.system.UInt64
    bytes_sent: winrt.system.UInt64
    total_bytes_to_receive: winrt.system.UInt64
    total_bytes_to_send: winrt.system.UInt64
    status: BackgroundTransferStatus
    has_response_changed: bool
    has_restarted: bool
    def __init__(self, bytes_received: winrt.system.UInt64, bytes_sent: winrt.system.UInt64, total_bytes_to_receive: winrt.system.UInt64, total_bytes_to_send: winrt.system.UInt64, status: BackgroundTransferStatus, has_response_changed: bool, has_restarted: bool) -> None: ...

@typing.final
class BackgroundDownloader_Static(type):
    @typing.overload
    def get_current_downloads_async(cls) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[DownloadOperation]]: ...
    @typing.overload
    def get_current_downloads_async(cls, group: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[DownloadOperation]]: ...
    def get_current_downloads_for_transfer_group_async(cls, group: typing.Optional[BackgroundTransferGroup], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[DownloadOperation]]: ...
    def request_unconstrained_downloads_async(cls, operations: typing.Iterable[DownloadOperation], /) -> winrt.windows.foundation.IAsyncOperation[UnconstrainedTransferRequestResult]: ...

@typing.final
class BackgroundDownloader(winrt.system.Object, metaclass=BackgroundDownloader_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundDownloader: ...
    @typing.overload
    def __new__(cls: typing.Type[BackgroundDownloader], completion_group: typing.Optional[BackgroundTransferCompletionGroup]) -> BackgroundDownloader:...
    @typing.overload
    def __new__(cls: typing.Type[BackgroundDownloader]) -> BackgroundDownloader:...
    @typing.overload
    def create_download(self, uri: typing.Optional[winrt.windows.foundation.Uri], result_file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> typing.Optional[DownloadOperation]: ...
    @typing.overload
    def create_download(self, uri: typing.Optional[winrt.windows.foundation.Uri], result_file: typing.Optional[winrt.windows.storage.IStorageFile], request_body_file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> typing.Optional[DownloadOperation]: ...
    def create_download_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], result_file: typing.Optional[winrt.windows.storage.IStorageFile], request_body_stream: typing.Optional[winrt.windows.storage.streams.IInputStream], /) -> winrt.windows.foundation.IAsyncOperation[DownloadOperation]: ...
    def set_request_header(self, header_name: str, header_value: str, /) -> None: ...
    @_property
    def failure_toast_notification(self) -> typing.Optional[winrt.windows.ui.notifications.ToastNotification]: ...
    @failure_toast_notification.setter
    def failure_toast_notification(self, value: typing.Optional[winrt.windows.ui.notifications.ToastNotification]) -> None: ...
    @_property
    def success_tile_notification(self) -> typing.Optional[winrt.windows.ui.notifications.TileNotification]: ...
    @success_tile_notification.setter
    def success_tile_notification(self, value: typing.Optional[winrt.windows.ui.notifications.TileNotification]) -> None: ...
    @_property
    def success_toast_notification(self) -> typing.Optional[winrt.windows.ui.notifications.ToastNotification]: ...
    @success_toast_notification.setter
    def success_toast_notification(self, value: typing.Optional[winrt.windows.ui.notifications.ToastNotification]) -> None: ...
    @_property
    def transfer_group(self) -> typing.Optional[BackgroundTransferGroup]: ...
    @transfer_group.setter
    def transfer_group(self, value: typing.Optional[BackgroundTransferGroup]) -> None: ...
    @_property
    def failure_tile_notification(self) -> typing.Optional[winrt.windows.ui.notifications.TileNotification]: ...
    @failure_tile_notification.setter
    def failure_tile_notification(self, value: typing.Optional[winrt.windows.ui.notifications.TileNotification]) -> None: ...
    @_property
    def completion_group(self) -> typing.Optional[BackgroundTransferCompletionGroup]: ...
    @_property
    def cost_policy(self) -> BackgroundTransferCostPolicy: ...
    @cost_policy.setter
    def cost_policy(self, value: BackgroundTransferCostPolicy) -> None: ...
    @_property
    def group(self) -> str: ...
    @group.setter
    def group(self, value: str) -> None: ...
    @_property
    def method(self) -> str: ...
    @method.setter
    def method(self, value: str) -> None: ...
    @_property
    def proxy_credential(self) -> typing.Optional[winrt.windows.security.credentials.PasswordCredential]: ...
    @proxy_credential.setter
    def proxy_credential(self, value: typing.Optional[winrt.windows.security.credentials.PasswordCredential]) -> None: ...
    @_property
    def server_credential(self) -> typing.Optional[winrt.windows.security.credentials.PasswordCredential]: ...
    @server_credential.setter
    def server_credential(self, value: typing.Optional[winrt.windows.security.credentials.PasswordCredential]) -> None: ...

@typing.final
class BackgroundTransferCompletionGroup(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTransferCompletionGroup: ...
    def __new__(cls: typing.Type[BackgroundTransferCompletionGroup]) -> BackgroundTransferCompletionGroup:...
    def enable(self) -> None: ...
    @_property
    def is_enabled(self) -> bool: ...
    @_property
    def trigger(self) -> typing.Optional[winrt.windows.applicationmodel.background.IBackgroundTrigger]: ...

@typing.final
class BackgroundTransferCompletionGroupTriggerDetails(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTransferCompletionGroupTriggerDetails: ...
    @_property
    def downloads(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[DownloadOperation]]: ...
    @_property
    def uploads(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[UploadOperation]]: ...

@typing.final
class BackgroundTransferContentPart(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTransferContentPart: ...
    @typing.overload
    def __new__(cls: typing.Type[BackgroundTransferContentPart], name: str) -> BackgroundTransferContentPart:...
    @typing.overload
    def __new__(cls: typing.Type[BackgroundTransferContentPart], name: str, file_name: str) -> BackgroundTransferContentPart:...
    @typing.overload
    def __new__(cls: typing.Type[BackgroundTransferContentPart]) -> BackgroundTransferContentPart:...
    def set_file(self, value: typing.Optional[winrt.windows.storage.IStorageFile], /) -> None: ...
    def set_header(self, header_name: str, header_value: str, /) -> None: ...
    def set_text(self, value: str, /) -> None: ...

@typing.final
class BackgroundTransferError_Static(type):
    def get_status(cls, hresult: winrt.system.Int32, /) -> winrt.windows.web.WebErrorStatus: ...

@typing.final
class BackgroundTransferError(winrt.system.Object, metaclass=BackgroundTransferError_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTransferError: ...

@typing.final
class BackgroundTransferGroup_Static(type):
    def create_group(cls, name: str, /) -> typing.Optional[BackgroundTransferGroup]: ...

@typing.final
class BackgroundTransferGroup(winrt.system.Object, metaclass=BackgroundTransferGroup_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTransferGroup: ...
    @_property
    def transfer_behavior(self) -> BackgroundTransferBehavior: ...
    @transfer_behavior.setter
    def transfer_behavior(self, value: BackgroundTransferBehavior) -> None: ...
    @_property
    def name(self) -> str: ...

@typing.final
class BackgroundTransferRangesDownloadedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundTransferRangesDownloadedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    @_property
    def added_ranges(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[BackgroundTransferFileRange]]: ...
    @_property
    def was_download_restarted(self) -> bool: ...

@typing.final
class BackgroundUploader_Static(type):
    @typing.overload
    def get_current_uploads_async(cls) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[UploadOperation]]: ...
    @typing.overload
    def get_current_uploads_async(cls, group: str, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[UploadOperation]]: ...
    def get_current_uploads_for_transfer_group_async(cls, group: typing.Optional[BackgroundTransferGroup], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[UploadOperation]]: ...
    def request_unconstrained_uploads_async(cls, operations: typing.Iterable[UploadOperation], /) -> winrt.windows.foundation.IAsyncOperation[UnconstrainedTransferRequestResult]: ...

@typing.final
class BackgroundUploader(winrt.system.Object, metaclass=BackgroundUploader_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> BackgroundUploader: ...
    @typing.overload
    def __new__(cls: typing.Type[BackgroundUploader], completion_group: typing.Optional[BackgroundTransferCompletionGroup]) -> BackgroundUploader:...
    @typing.overload
    def __new__(cls: typing.Type[BackgroundUploader]) -> BackgroundUploader:...
    def create_upload(self, uri: typing.Optional[winrt.windows.foundation.Uri], source_file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> typing.Optional[UploadOperation]: ...
    @typing.overload
    def create_upload_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], parts: typing.Iterable[BackgroundTransferContentPart], /) -> winrt.windows.foundation.IAsyncOperation[UploadOperation]: ...
    @typing.overload
    def create_upload_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], parts: typing.Iterable[BackgroundTransferContentPart], sub_type: str, /) -> winrt.windows.foundation.IAsyncOperation[UploadOperation]: ...
    @typing.overload
    def create_upload_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], parts: typing.Iterable[BackgroundTransferContentPart], sub_type: str, boundary: str, /) -> winrt.windows.foundation.IAsyncOperation[UploadOperation]: ...
    def create_upload_from_stream_async(self, uri: typing.Optional[winrt.windows.foundation.Uri], source_stream: typing.Optional[winrt.windows.storage.streams.IInputStream], /) -> winrt.windows.foundation.IAsyncOperation[UploadOperation]: ...
    def set_request_header(self, header_name: str, header_value: str, /) -> None: ...
    @_property
    def server_credential(self) -> typing.Optional[winrt.windows.security.credentials.PasswordCredential]: ...
    @server_credential.setter
    def server_credential(self, value: typing.Optional[winrt.windows.security.credentials.PasswordCredential]) -> None: ...
    @_property
    def proxy_credential(self) -> typing.Optional[winrt.windows.security.credentials.PasswordCredential]: ...
    @proxy_credential.setter
    def proxy_credential(self, value: typing.Optional[winrt.windows.security.credentials.PasswordCredential]) -> None: ...
    @_property
    def method(self) -> str: ...
    @method.setter
    def method(self, value: str) -> None: ...
    @_property
    def group(self) -> str: ...
    @group.setter
    def group(self, value: str) -> None: ...
    @_property
    def cost_policy(self) -> BackgroundTransferCostPolicy: ...
    @cost_policy.setter
    def cost_policy(self, value: BackgroundTransferCostPolicy) -> None: ...
    @_property
    def failure_tile_notification(self) -> typing.Optional[winrt.windows.ui.notifications.TileNotification]: ...
    @failure_tile_notification.setter
    def failure_tile_notification(self, value: typing.Optional[winrt.windows.ui.notifications.TileNotification]) -> None: ...
    @_property
    def transfer_group(self) -> typing.Optional[BackgroundTransferGroup]: ...
    @transfer_group.setter
    def transfer_group(self, value: typing.Optional[BackgroundTransferGroup]) -> None: ...
    @_property
    def success_toast_notification(self) -> typing.Optional[winrt.windows.ui.notifications.ToastNotification]: ...
    @success_toast_notification.setter
    def success_toast_notification(self, value: typing.Optional[winrt.windows.ui.notifications.ToastNotification]) -> None: ...
    @_property
    def success_tile_notification(self) -> typing.Optional[winrt.windows.ui.notifications.TileNotification]: ...
    @success_tile_notification.setter
    def success_tile_notification(self, value: typing.Optional[winrt.windows.ui.notifications.TileNotification]) -> None: ...
    @_property
    def failure_toast_notification(self) -> typing.Optional[winrt.windows.ui.notifications.ToastNotification]: ...
    @failure_toast_notification.setter
    def failure_toast_notification(self, value: typing.Optional[winrt.windows.ui.notifications.ToastNotification]) -> None: ...
    @_property
    def completion_group(self) -> typing.Optional[BackgroundTransferCompletionGroup]: ...

@typing.final
class ContentPrefetcher_Static(type):
    @_property
    def indirect_content_uri(cls) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @indirect_content_uri.setter
    def indirect_content_uri(cls, value: typing.Optional[winrt.windows.foundation.Uri]) -> None: ...
    @_property
    def content_uris(cls) -> typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.foundation.Uri]]: ...
    @_property
    def last_successful_prefetch_time(cls) -> typing.Optional[typing.Optional[datetime.datetime]]: ...

@typing.final
class ContentPrefetcher(winrt.system.Object, metaclass=ContentPrefetcher_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContentPrefetcher: ...

@typing.final
class DownloadOperation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DownloadOperation: ...
    def attach_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[DownloadOperation, DownloadOperation]: ...
    def get_downloaded_ranges(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[BackgroundTransferFileRange]]: ...
    def get_response_information(self) -> typing.Optional[ResponseInformation]: ...
    def get_result_random_access_stream_reference(self) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]: ...
    def get_result_stream_at(self, position: winrt.system.UInt64, /) -> typing.Optional[winrt.windows.storage.streams.IInputStream]: ...
    def make_current_in_transfer_group(self) -> None: ...
    def pause(self) -> None: ...
    def remove_request_header(self, header_name: str, /) -> None: ...
    def resume(self) -> None: ...
    def set_request_header(self, header_name: str, header_value: str, /) -> None: ...
    def start_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[DownloadOperation, DownloadOperation]: ...
    def add_ranges_downloaded(self, event_handler: winrt.windows.foundation.TypedEventHandler[DownloadOperation, BackgroundTransferRangesDownloadedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_ranges_downloaded(self, event_cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def cost_policy(self) -> BackgroundTransferCostPolicy: ...
    @cost_policy.setter
    def cost_policy(self, value: BackgroundTransferCostPolicy) -> None: ...
    @_property
    def requested_uri(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @requested_uri.setter
    def requested_uri(self, value: typing.Optional[winrt.windows.foundation.Uri]) -> None: ...
    @_property
    def method(self) -> str: ...
    @_property
    def group(self) -> str: ...
    @_property
    def guid(self) -> _uuid.UUID: ...
    @_property
    def priority(self) -> BackgroundTransferPriority: ...
    @priority.setter
    def priority(self, value: BackgroundTransferPriority) -> None: ...
    @_property
    def progress(self) -> BackgroundDownloadProgress: ...
    @_property
    def result_file(self) -> typing.Optional[winrt.windows.storage.IStorageFile]: ...
    @_property
    def transfer_group(self) -> typing.Optional[BackgroundTransferGroup]: ...
    @_property
    def is_random_access_required(self) -> bool: ...
    @is_random_access_required.setter
    def is_random_access_required(self, value: bool) -> None: ...
    @_property
    def current_web_error_status(self) -> typing.Optional[typing.Optional[winrt.windows.web.WebErrorStatus]]: ...
    @_property
    def recoverable_web_error_statuses(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.web.WebErrorStatus]]: ...

@typing.final
class ResponseInformation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResponseInformation: ...
    @_property
    def actual_uri(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @_property
    def headers(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]: ...
    @_property
    def is_resumable(self) -> bool: ...
    @_property
    def status_code(self) -> winrt.system.UInt32: ...

@typing.final
class UnconstrainedTransferRequestResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UnconstrainedTransferRequestResult: ...
    @_property
    def is_unconstrained(self) -> bool: ...

@typing.final
class UploadOperation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> UploadOperation: ...
    def attach_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[UploadOperation, UploadOperation]: ...
    def get_response_information(self) -> typing.Optional[ResponseInformation]: ...
    def get_result_stream_at(self, position: winrt.system.UInt64, /) -> typing.Optional[winrt.windows.storage.streams.IInputStream]: ...
    def make_current_in_transfer_group(self) -> None: ...
    def remove_request_header(self, header_name: str, /) -> None: ...
    def set_request_header(self, header_name: str, header_value: str, /) -> None: ...
    def start_async(self) -> winrt.windows.foundation.IAsyncOperationWithProgress[UploadOperation, UploadOperation]: ...
    @_property
    def cost_policy(self) -> BackgroundTransferCostPolicy: ...
    @cost_policy.setter
    def cost_policy(self, value: BackgroundTransferCostPolicy) -> None: ...
    @_property
    def group(self) -> str: ...
    @_property
    def guid(self) -> _uuid.UUID: ...
    @_property
    def method(self) -> str: ...
    @_property
    def requested_uri(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @_property
    def priority(self) -> BackgroundTransferPriority: ...
    @priority.setter
    def priority(self, value: BackgroundTransferPriority) -> None: ...
    @_property
    def progress(self) -> BackgroundUploadProgress: ...
    @_property
    def source_file(self) -> typing.Optional[winrt.windows.storage.IStorageFile]: ...
    @_property
    def transfer_group(self) -> typing.Optional[BackgroundTransferGroup]: ...

@typing.final
class IBackgroundTransferBase(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTransferBase: ...
    def set_request_header(self, header_name: str, header_value: str, /) -> None: ...
    @_property
    def cost_policy(self) -> BackgroundTransferCostPolicy: ...
    @cost_policy.setter
    def cost_policy(self, value: BackgroundTransferCostPolicy) -> None: ...
    @_property
    def group(self) -> str: ...
    @group.setter
    def group(self, value: str) -> None: ...
    @_property
    def method(self) -> str: ...
    @method.setter
    def method(self, value: str) -> None: ...
    @_property
    def proxy_credential(self) -> typing.Optional[winrt.windows.security.credentials.PasswordCredential]: ...
    @proxy_credential.setter
    def proxy_credential(self, value: typing.Optional[winrt.windows.security.credentials.PasswordCredential]) -> None: ...
    @_property
    def server_credential(self) -> typing.Optional[winrt.windows.security.credentials.PasswordCredential]: ...
    @server_credential.setter
    def server_credential(self, value: typing.Optional[winrt.windows.security.credentials.PasswordCredential]) -> None: ...

@typing.final
class IBackgroundTransferContentPartFactory(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTransferContentPartFactory: ...
    def create_with_name(self, name: str, /) -> typing.Optional[BackgroundTransferContentPart]: ...
    def create_with_name_and_file_name(self, name: str, file_name: str, /) -> typing.Optional[BackgroundTransferContentPart]: ...

@typing.final
class IBackgroundTransferOperation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTransferOperation: ...
    def get_response_information(self) -> typing.Optional[ResponseInformation]: ...
    def get_result_stream_at(self, position: winrt.system.UInt64, /) -> typing.Optional[winrt.windows.storage.streams.IInputStream]: ...
    @_property
    def cost_policy(self) -> BackgroundTransferCostPolicy: ...
    @cost_policy.setter
    def cost_policy(self, value: BackgroundTransferCostPolicy) -> None: ...
    @_property
    def group(self) -> str: ...
    @_property
    def guid(self) -> _uuid.UUID: ...
    @_property
    def method(self) -> str: ...
    @_property
    def requested_uri(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...

@typing.final
class IBackgroundTransferOperationPriority(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IBackgroundTransferOperationPriority: ...
    @_property
    def priority(self) -> BackgroundTransferPriority: ...
    @priority.setter
    def priority(self, value: BackgroundTransferPriority) -> None: ...

