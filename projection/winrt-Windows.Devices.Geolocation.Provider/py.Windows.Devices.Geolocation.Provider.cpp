// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Devices.Geolocation.Provider.h"


namespace py::cpp::Windows::Devices::Geolocation::Provider
{
    // ----- GeolocationProvider class --------------------

    static PyObject* _new_GeolocationProvider(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Devices::Geolocation::Provider::GeolocationProvider instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_GeolocationProvider(py::wrapper::Windows::Devices::Geolocation::Provider::GeolocationProvider* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GeolocationProvider_ClearOverridePosition(py::wrapper::Windows::Devices::Geolocation::Provider::GeolocationProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.Geolocation.Provider.GeolocationProvider", L"ClearOverridePosition", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ClearOverridePosition();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GeolocationProvider_SetOverridePosition(py::wrapper::Windows::Devices::Geolocation::Provider::GeolocationProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.Geolocation.Provider.GeolocationProvider", L"SetOverridePosition", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::BasicGeoposition>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::PositionSource>(args, 1);
                auto param2 = py::convert_to<double>(args, 2);

                return py::convert(self->obj.SetOverridePosition(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GeolocationProvider_get_IsOverridden(py::wrapper::Windows::Devices::Geolocation::Provider::GeolocationProvider* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Geolocation.Provider.GeolocationProvider", L"IsOverridden"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsOverridden());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeolocationProvider_add_IsOverriddenChanged(py::wrapper::Windows::Devices::Geolocation::Provider::GeolocationProvider* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Geolocation.Provider.GeolocationProvider", L"IsOverriddenChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.IsOverriddenChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GeolocationProvider_remove_IsOverriddenChanged(py::wrapper::Windows::Devices::Geolocation::Provider::GeolocationProvider* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Geolocation.Provider.GeolocationProvider", L"IsOverriddenChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.IsOverriddenChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GeolocationProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Geolocation::Provider::GeolocationProvider>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GeolocationProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Geolocation::Provider::GeolocationProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GeolocationProvider[] = {
        { "clear_override_position", reinterpret_cast<PyCFunction>(GeolocationProvider_ClearOverridePosition), METH_VARARGS, nullptr },
        { "set_override_position", reinterpret_cast<PyCFunction>(GeolocationProvider_SetOverridePosition), METH_VARARGS, nullptr },
        { "add_is_overridden_changed", reinterpret_cast<PyCFunction>(GeolocationProvider_add_IsOverriddenChanged), METH_O, nullptr },
        { "remove_is_overridden_changed", reinterpret_cast<PyCFunction>(GeolocationProvider_remove_IsOverriddenChanged), METH_O, nullptr },
        { "_assign_array_", _assign_array_GeolocationProvider, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GeolocationProvider), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GeolocationProvider[] = {
        { "is_overridden", reinterpret_cast<getter>(GeolocationProvider_get_IsOverridden), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GeolocationProvider[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GeolocationProvider) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GeolocationProvider) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GeolocationProvider) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GeolocationProvider) },
        { },
    };

    static PyType_Spec type_spec_GeolocationProvider =
    {
        "winrt._winrt_windows_devices_geolocation_provider.GeolocationProvider",
        sizeof(py::wrapper::Windows::Devices::Geolocation::Provider::GeolocationProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GeolocationProvider
    };

    // ----- Windows.Devices.Geolocation.Provider Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Devices::Geolocation::Provider");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_devices_geolocation_provider",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Devices::Geolocation::Provider

PyMODINIT_FUNC PyInit__winrt_windows_devices_geolocation_provider(void) noexcept
{
    using namespace py::cpp::Windows::Devices::Geolocation::Provider;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GeolocationProvider, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
