// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Windows_Phone_System_Power_H
#define WINRT_Windows_Phone_System_Power_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.250303.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.250303.1"
#include "winrt/Windows.Phone.System.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Phone.System.Power.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Windows_Phone_System_Power_IPowerManagerStatics<D>::PowerSavingMode() const
    {
        winrt::Windows::Phone::System::Power::PowerSavingMode value{};
        if constexpr (!std::is_same_v<D, winrt::Windows::Phone::System::Power::IPowerManagerStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Windows::Phone::System::Power::IPowerManagerStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Windows::Phone::System::Power::IPowerManagerStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PowerSavingMode(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Windows::Phone::System::Power::IPowerManagerStatics>**)this;
            check_hresult(_winrt_abi_type->get_PowerSavingMode(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Windows_Phone_System_Power_IPowerManagerStatics<D>::PowerSavingModeChanged(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& changeHandler) const
    {
        winrt::event_token token{};
        if constexpr (!std::is_same_v<D, winrt::Windows::Phone::System::Power::IPowerManagerStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Windows::Phone::System::Power::IPowerManagerStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Windows::Phone::System::Power::IPowerManagerStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->add_PowerSavingModeChanged(*(void**)(&changeHandler), put_abi(token)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Windows::Phone::System::Power::IPowerManagerStatics>**)this;
            check_hresult(_winrt_abi_type->add_PowerSavingModeChanged(*(void**)(&changeHandler), put_abi(token)));
        }
        return token;
    }
    template <typename D> auto consume_Windows_Phone_System_Power_IPowerManagerStatics<D>::PowerSavingModeChanged(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& changeHandler) const
    {
        return impl::make_event_revoker<D, PowerSavingModeChanged_revoker>(this, PowerSavingModeChanged(changeHandler));
    }
    template <typename D> auto consume_Windows_Phone_System_Power_IPowerManagerStatics<D>::PowerSavingModeChanged(winrt::event_token const& token) const noexcept
    {
        if constexpr (!std::is_same_v<D, winrt::Windows::Phone::System::Power::IPowerManagerStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Windows::Phone::System::Power::IPowerManagerStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Windows::Phone::System::Power::IPowerManagerStatics>**)&_winrt_casted_result;
            _winrt_abi_type->remove_PowerSavingModeChanged(impl::bind_in(token));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Windows::Phone::System::Power::IPowerManagerStatics>**)this;
            _winrt_abi_type->remove_PowerSavingModeChanged(impl::bind_in(token));
        }
    }
    template <typename D> auto consume_Windows_Phone_System_Power_IPowerManagerStatics2<D>::PowerSavingModeEnabled() const
    {
        bool value{};
        if constexpr (!std::is_same_v<D, winrt::Windows::Phone::System::Power::IPowerManagerStatics2>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Windows::Phone::System::Power::IPowerManagerStatics2, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Windows::Phone::System::Power::IPowerManagerStatics2>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PowerSavingModeEnabled(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Windows::Phone::System::Power::IPowerManagerStatics2>**)this;
            check_hresult(_winrt_abi_type->get_PowerSavingModeEnabled(&value));
        }
        return value;
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::Phone::System::Power::IPowerManagerStatics> : produce_base<D, winrt::Windows::Phone::System::Power::IPowerManagerStatics>
    {
        int32_t __stdcall get_PowerSavingMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Phone::System::Power::PowerSavingMode>(this->shim().PowerSavingMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_PowerSavingModeChanged(void* changeHandler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().PowerSavingModeChanged(*reinterpret_cast<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const*>(&changeHandler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_PowerSavingModeChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PowerSavingModeChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::Phone::System::Power::IPowerManagerStatics2> : produce_base<D, winrt::Windows::Phone::System::Power::IPowerManagerStatics2>
    {
        int32_t __stdcall get_PowerSavingModeEnabled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().PowerSavingModeEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Windows::Phone::System::Power
{
    inline auto PowerManager::PowerSavingMode()
    {
        return impl::call_factory_cast<winrt::Windows::Phone::System::Power::PowerSavingMode(*)(IPowerManagerStatics const&), PowerManager, IPowerManagerStatics>([](IPowerManagerStatics const& f) { return f.PowerSavingMode(); });
    }
    inline auto PowerManager::PowerSavingModeChanged(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& changeHandler)
    {
        return impl::call_factory<PowerManager, IPowerManagerStatics>([&](IPowerManagerStatics const& f) { return f.PowerSavingModeChanged(changeHandler); });
    }
    inline auto PowerManager::PowerSavingModeChanged(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& changeHandler)
    {
        auto f = get_activation_factory<PowerManager, winrt::Windows::Phone::System::Power::IPowerManagerStatics>();
        return PowerManager::PowerSavingModeChanged_revoker{ f, f.PowerSavingModeChanged(changeHandler) };
    }
    inline auto PowerManager::PowerSavingModeChanged(winrt::event_token const& token)
    {
        impl::call_factory<PowerManager, IPowerManagerStatics>([&](IPowerManagerStatics const& f) { return f.PowerSavingModeChanged(token); });
    }
    inline auto PowerManager::PowerSavingModeEnabled()
    {
        return impl::call_factory_cast<bool(*)(IPowerManagerStatics2 const&), PowerManager, IPowerManagerStatics2>([](IPowerManagerStatics2 const& f) { return f.PowerSavingModeEnabled(); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Windows::Phone::System::Power::IPowerManagerStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::Phone::System::Power::IPowerManagerStatics2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::Phone::System::Power::PowerManager> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
