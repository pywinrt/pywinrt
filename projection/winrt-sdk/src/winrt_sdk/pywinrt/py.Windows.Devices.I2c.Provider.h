// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#pragma once

#include "pybase.h"
static_assert(winrt::check_version(PYWINRT_VERSION, "2.0.0-beta.2"), "Mismatched Py/WinRT headers.");

#if __has_include("py.Windows.Foundation.h")
#include "py.Windows.Foundation.h"
#endif

#if __has_include("py.Windows.Foundation.Collections.h")
#include "py.Windows.Foundation.Collections.h"
#endif

#include <winrt/Windows.Foundation.h>
#include <winrt/Windows.Foundation.Collections.h>

#include <winrt/Windows.Devices.I2c.Provider.h>

namespace py::proj::Windows::Devices::I2c::Provider
{}

namespace py::impl::Windows::Devices::I2c::Provider
{}

namespace py::wrapper::Windows::Devices::I2c::Provider
{
    using ProviderI2cConnectionSettings = py::winrt_wrapper<winrt::Windows::Devices::I2c::Provider::ProviderI2cConnectionSettings>;
    using II2cControllerProvider = py::winrt_wrapper<winrt::Windows::Devices::I2c::Provider::II2cControllerProvider>;
    using II2cDeviceProvider = py::winrt_wrapper<winrt::Windows::Devices::I2c::Provider::II2cDeviceProvider>;
    using II2cProvider = py::winrt_wrapper<winrt::Windows::Devices::I2c::Provider::II2cProvider>;
    using ProviderI2cTransferResult = py::winrt_struct_wrapper<winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferResult>;
}

namespace py
{
    template<>
    inline constexpr const char* buffer_format<winrt::Windows::Devices::I2c::Provider::ProviderI2cBusSpeed> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::Devices::I2c::Provider::ProviderI2cSharingMode> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferStatus> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferResult> = "T{i:status:I:bytes_transferred:}";


    template<>
    struct py_type<winrt::Windows::Devices::I2c::Provider::ProviderI2cBusSpeed>
    {
        static constexpr const char* module_name = "winrt.windows.devices.i2c.provider";
        static constexpr const char* type_name = "ProviderI2cBusSpeed";
    };

    template<>
    struct py_type<winrt::Windows::Devices::I2c::Provider::ProviderI2cSharingMode>
    {
        static constexpr const char* module_name = "winrt.windows.devices.i2c.provider";
        static constexpr const char* type_name = "ProviderI2cSharingMode";
    };

    template<>
    struct py_type<winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferStatus>
    {
        static constexpr const char* module_name = "winrt.windows.devices.i2c.provider";
        static constexpr const char* type_name = "ProviderI2cTransferStatus";
    };

    template<>
    struct py_type<winrt::Windows::Devices::I2c::Provider::ProviderI2cConnectionSettings>
    {
        static constexpr const char* module_name = "winrt.windows.devices.i2c.provider";
        static constexpr const char* type_name = "ProviderI2cConnectionSettings";
    };

    template<>
    struct py_type<winrt::Windows::Devices::I2c::Provider::II2cControllerProvider>
    {
        static constexpr const char* module_name = "winrt.windows.devices.i2c.provider";
        static constexpr const char* type_name = "II2cControllerProvider";
    };

    template<>
    struct py_type<winrt::Windows::Devices::I2c::Provider::II2cDeviceProvider>
    {
        static constexpr const char* module_name = "winrt.windows.devices.i2c.provider";
        static constexpr const char* type_name = "II2cDeviceProvider";
    };

    template<>
    struct py_type<winrt::Windows::Devices::I2c::Provider::II2cProvider>
    {
        static constexpr const char* module_name = "winrt.windows.devices.i2c.provider";
        static constexpr const char* type_name = "II2cProvider";
    };

    template<>
    struct py_type<winrt::Windows::Devices::I2c::Provider::ProviderI2cTransferResult>
    {
        static constexpr const char* module_name = "winrt.windows.devices.i2c.provider";
        static constexpr const char* type_name = "ProviderI2cTransferResult";
    };
}
