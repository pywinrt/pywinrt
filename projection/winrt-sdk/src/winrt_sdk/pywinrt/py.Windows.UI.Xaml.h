// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#pragma once

#include "pybase.h"
static_assert(winrt::check_version(PYWINRT_VERSION, "2.0.0-beta.2"), "Mismatched Py/WinRT headers.");

#if __has_include("py.Windows.ApplicationModel.h")
#include "py.Windows.ApplicationModel.h"
#endif

#if __has_include("py.Windows.ApplicationModel.Activation.h")
#include "py.Windows.ApplicationModel.Activation.h"
#endif

#if __has_include("py.Windows.ApplicationModel.Core.h")
#include "py.Windows.ApplicationModel.Core.h"
#endif

#if __has_include("py.Windows.ApplicationModel.DataTransfer.h")
#include "py.Windows.ApplicationModel.DataTransfer.h"
#endif

#if __has_include("py.Windows.ApplicationModel.DataTransfer.DragDrop.h")
#include "py.Windows.ApplicationModel.DataTransfer.DragDrop.h"
#endif

#if __has_include("py.Windows.Foundation.h")
#include "py.Windows.Foundation.h"
#endif

#if __has_include("py.Windows.Foundation.Collections.h")
#include "py.Windows.Foundation.Collections.h"
#endif

#if __has_include("py.Windows.Foundation.Numerics.h")
#include "py.Windows.Foundation.Numerics.h"
#endif

#if __has_include("py.Windows.Graphics.Imaging.h")
#include "py.Windows.Graphics.Imaging.h"
#endif

#if __has_include("py.Windows.UI.h")
#include "py.Windows.UI.h"
#endif

#if __has_include("py.Windows.UI.Composition.h")
#include "py.Windows.UI.Composition.h"
#endif

#if __has_include("py.Windows.UI.Core.h")
#include "py.Windows.UI.Core.h"
#endif

#if __has_include("py.Windows.UI.Input.h")
#include "py.Windows.UI.Input.h"
#endif

#if __has_include("py.Windows.UI.Xaml.Automation.Peers.h")
#include "py.Windows.UI.Xaml.Automation.Peers.h"
#endif

#if __has_include("py.Windows.UI.Xaml.Controls.h")
#include "py.Windows.UI.Xaml.Controls.h"
#endif

#if __has_include("py.Windows.UI.Xaml.Controls.Primitives.h")
#include "py.Windows.UI.Xaml.Controls.Primitives.h"
#endif

#if __has_include("py.Windows.UI.Xaml.Data.h")
#include "py.Windows.UI.Xaml.Data.h"
#endif

#if __has_include("py.Windows.UI.Xaml.Input.h")
#include "py.Windows.UI.Xaml.Input.h"
#endif

#if __has_include("py.Windows.UI.Xaml.Interop.h")
#include "py.Windows.UI.Xaml.Interop.h"
#endif

#if __has_include("py.Windows.UI.Xaml.Media.h")
#include "py.Windows.UI.Xaml.Media.h"
#endif

#if __has_include("py.Windows.UI.Xaml.Media.Animation.h")
#include "py.Windows.UI.Xaml.Media.Animation.h"
#endif

#if __has_include("py.Windows.UI.Xaml.Media.Imaging.h")
#include "py.Windows.UI.Xaml.Media.Imaging.h"
#endif

#if __has_include("py.Windows.UI.Xaml.Media.Media3D.h")
#include "py.Windows.UI.Xaml.Media.Media3D.h"
#endif

#include <winrt/Windows.ApplicationModel.h>
#include <winrt/Windows.ApplicationModel.Activation.h>
#include <winrt/Windows.ApplicationModel.Core.h>
#include <winrt/Windows.ApplicationModel.DataTransfer.h>
#include <winrt/Windows.ApplicationModel.DataTransfer.DragDrop.h>
#include <winrt/Windows.Foundation.h>
#include <winrt/Windows.Foundation.Collections.h>
#include <winrt/Windows.Foundation.Numerics.h>
#include <winrt/Windows.Graphics.Imaging.h>
#include <winrt/Windows.UI.h>
#include <winrt/Windows.UI.Composition.h>
#include <winrt/Windows.UI.Core.h>
#include <winrt/Windows.UI.Input.h>
#include <winrt/Windows.UI.Xaml.Automation.Peers.h>
#include <winrt/Windows.UI.Xaml.Controls.h>
#include <winrt/Windows.UI.Xaml.Controls.Primitives.h>
#include <winrt/Windows.UI.Xaml.Data.h>
#include <winrt/Windows.UI.Xaml.Input.h>
#include <winrt/Windows.UI.Xaml.Interop.h>
#include <winrt/Windows.UI.Xaml.Media.h>
#include <winrt/Windows.UI.Xaml.Media.Animation.h>
#include <winrt/Windows.UI.Xaml.Media.Imaging.h>
#include <winrt/Windows.UI.Xaml.Media.Media3D.h>

#include <winrt/Windows.UI.Xaml.h>

namespace py::proj::Windows::UI::Xaml
{}

namespace py::impl::Windows::UI::Xaml
{
    struct ApplicationInitializationCallback
    {
        static winrt::Windows::UI::Xaml::ApplicationInitializationCallback get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle args{ PyTuple_Pack(1, py_param0.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct BindingFailedEventHandler
    {
        static winrt::Windows::UI::Xaml::BindingFailedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct CreateDefaultValueCallback
    {
        static winrt::Windows::UI::Xaml::CreateDefaultValueCallback get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)]()
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle args{ nullptr };
                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                return py::convert_to<winrt::Windows::Foundation::IInspectable>(return_value.get());
            };
        };
    };

    struct DependencyPropertyChangedCallback
    {
        static winrt::Windows::UI::Xaml::DependencyPropertyChangedCallback get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct DependencyPropertyChangedEventHandler
    {
        static winrt::Windows::UI::Xaml::DependencyPropertyChangedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct DragEventHandler
    {
        static winrt::Windows::UI::Xaml::DragEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct EnteredBackgroundEventHandler
    {
        static winrt::Windows::UI::Xaml::EnteredBackgroundEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct ExceptionRoutedEventHandler
    {
        static winrt::Windows::UI::Xaml::ExceptionRoutedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct LeavingBackgroundEventHandler
    {
        static winrt::Windows::UI::Xaml::LeavingBackgroundEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct PropertyChangedCallback
    {
        static winrt::Windows::UI::Xaml::PropertyChangedCallback get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct RoutedEventHandler
    {
        static winrt::Windows::UI::Xaml::RoutedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct SizeChangedEventHandler
    {
        static winrt::Windows::UI::Xaml::SizeChangedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct SuspendingEventHandler
    {
        static winrt::Windows::UI::Xaml::SuspendingEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct UnhandledExceptionEventHandler
    {
        static winrt::Windows::UI::Xaml::UnhandledExceptionEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct VisualStateChangedEventHandler
    {
        static winrt::Windows::UI::Xaml::VisualStateChangedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct WindowActivatedEventHandler
    {
        static winrt::Windows::UI::Xaml::WindowActivatedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct WindowClosedEventHandler
    {
        static winrt::Windows::UI::Xaml::WindowClosedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct WindowSizeChangedEventHandler
    {
        static winrt::Windows::UI::Xaml::WindowSizeChangedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct WindowVisibilityChangedEventHandler
    {
        static winrt::Windows::UI::Xaml::WindowVisibilityChangedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };
}

namespace py::wrapper::Windows::UI::Xaml
{
    using AdaptiveTrigger = py::winrt_wrapper<winrt::Windows::UI::Xaml::AdaptiveTrigger>;
    using Application = py::winrt_wrapper<winrt::Windows::UI::Xaml::Application>;
    using ApplicationInitializationCallbackParams = py::winrt_wrapper<winrt::Windows::UI::Xaml::ApplicationInitializationCallbackParams>;
    using BindingFailedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::BindingFailedEventArgs>;
    using BringIntoViewOptions = py::winrt_wrapper<winrt::Windows::UI::Xaml::BringIntoViewOptions>;
    using BringIntoViewRequestedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::BringIntoViewRequestedEventArgs>;
    using BrushTransition = py::winrt_wrapper<winrt::Windows::UI::Xaml::BrushTransition>;
    using ColorPaletteResources = py::winrt_wrapper<winrt::Windows::UI::Xaml::ColorPaletteResources>;
    using CornerRadiusHelper = py::winrt_wrapper<winrt::Windows::UI::Xaml::CornerRadiusHelper>;
    using DataContextChangedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::DataContextChangedEventArgs>;
    using DataTemplate = py::winrt_wrapper<winrt::Windows::UI::Xaml::DataTemplate>;
    using DataTemplateKey = py::winrt_wrapper<winrt::Windows::UI::Xaml::DataTemplateKey>;
    using DebugSettings = py::winrt_wrapper<winrt::Windows::UI::Xaml::DebugSettings>;
    using DependencyObject = py::winrt_wrapper<winrt::Windows::UI::Xaml::DependencyObject>;
    using DependencyObjectCollection = py::winrt_wrapper<winrt::Windows::UI::Xaml::DependencyObjectCollection>;
    using DependencyProperty = py::winrt_wrapper<winrt::Windows::UI::Xaml::DependencyProperty>;
    using DependencyPropertyChangedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::DependencyPropertyChangedEventArgs>;
    using DispatcherTimer = py::winrt_wrapper<winrt::Windows::UI::Xaml::DispatcherTimer>;
    using DragEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::DragEventArgs>;
    using DragOperationDeferral = py::winrt_wrapper<winrt::Windows::UI::Xaml::DragOperationDeferral>;
    using DragStartingEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::DragStartingEventArgs>;
    using DragUI = py::winrt_wrapper<winrt::Windows::UI::Xaml::DragUI>;
    using DragUIOverride = py::winrt_wrapper<winrt::Windows::UI::Xaml::DragUIOverride>;
    using DropCompletedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::DropCompletedEventArgs>;
    using DurationHelper = py::winrt_wrapper<winrt::Windows::UI::Xaml::DurationHelper>;
    using EffectiveViewportChangedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::EffectiveViewportChangedEventArgs>;
    using ElementFactoryGetArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::ElementFactoryGetArgs>;
    using ElementFactoryRecycleArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::ElementFactoryRecycleArgs>;
    using ElementSoundPlayer = py::winrt_wrapper<winrt::Windows::UI::Xaml::ElementSoundPlayer>;
    using EventTrigger = py::winrt_wrapper<winrt::Windows::UI::Xaml::EventTrigger>;
    using ExceptionRoutedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::ExceptionRoutedEventArgs>;
    using FrameworkElement = py::winrt_wrapper<winrt::Windows::UI::Xaml::FrameworkElement>;
    using FrameworkTemplate = py::winrt_wrapper<winrt::Windows::UI::Xaml::FrameworkTemplate>;
    using FrameworkView = py::winrt_wrapper<winrt::Windows::UI::Xaml::FrameworkView>;
    using FrameworkViewSource = py::winrt_wrapper<winrt::Windows::UI::Xaml::FrameworkViewSource>;
    using GridLengthHelper = py::winrt_wrapper<winrt::Windows::UI::Xaml::GridLengthHelper>;
    using MediaFailedRoutedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::MediaFailedRoutedEventArgs>;
    using PointHelper = py::winrt_wrapper<winrt::Windows::UI::Xaml::PointHelper>;
    using PropertyMetadata = py::winrt_wrapper<winrt::Windows::UI::Xaml::PropertyMetadata>;
    using PropertyPath = py::winrt_wrapper<winrt::Windows::UI::Xaml::PropertyPath>;
    using RectHelper = py::winrt_wrapper<winrt::Windows::UI::Xaml::RectHelper>;
    using ResourceDictionary = py::winrt_wrapper<winrt::Windows::UI::Xaml::ResourceDictionary>;
    using RoutedEvent = py::winrt_wrapper<winrt::Windows::UI::Xaml::RoutedEvent>;
    using RoutedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::RoutedEventArgs>;
    using ScalarTransition = py::winrt_wrapper<winrt::Windows::UI::Xaml::ScalarTransition>;
    using Setter = py::winrt_wrapper<winrt::Windows::UI::Xaml::Setter>;
    using SetterBase = py::winrt_wrapper<winrt::Windows::UI::Xaml::SetterBase>;
    using SetterBaseCollection = py::winrt_wrapper<winrt::Windows::UI::Xaml::SetterBaseCollection>;
    using SizeChangedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::SizeChangedEventArgs>;
    using SizeHelper = py::winrt_wrapper<winrt::Windows::UI::Xaml::SizeHelper>;
    using StateTrigger = py::winrt_wrapper<winrt::Windows::UI::Xaml::StateTrigger>;
    using StateTriggerBase = py::winrt_wrapper<winrt::Windows::UI::Xaml::StateTriggerBase>;
    using Style = py::winrt_wrapper<winrt::Windows::UI::Xaml::Style>;
    using TargetPropertyPath = py::winrt_wrapper<winrt::Windows::UI::Xaml::TargetPropertyPath>;
    using ThicknessHelper = py::winrt_wrapper<winrt::Windows::UI::Xaml::ThicknessHelper>;
    using TriggerAction = py::winrt_wrapper<winrt::Windows::UI::Xaml::TriggerAction>;
    using TriggerActionCollection = py::winrt_wrapper<winrt::Windows::UI::Xaml::TriggerActionCollection>;
    using TriggerBase = py::winrt_wrapper<winrt::Windows::UI::Xaml::TriggerBase>;
    using TriggerCollection = py::winrt_wrapper<winrt::Windows::UI::Xaml::TriggerCollection>;
    using UIElement = py::winrt_wrapper<winrt::Windows::UI::Xaml::UIElement>;
    using UIElementWeakCollection = py::winrt_wrapper<winrt::Windows::UI::Xaml::UIElementWeakCollection>;
    using UnhandledExceptionEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::UnhandledExceptionEventArgs>;
    using Vector3Transition = py::winrt_wrapper<winrt::Windows::UI::Xaml::Vector3Transition>;
    using VisualState = py::winrt_wrapper<winrt::Windows::UI::Xaml::VisualState>;
    using VisualStateChangedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::VisualStateChangedEventArgs>;
    using VisualStateGroup = py::winrt_wrapper<winrt::Windows::UI::Xaml::VisualStateGroup>;
    using VisualStateManager = py::winrt_wrapper<winrt::Windows::UI::Xaml::VisualStateManager>;
    using VisualTransition = py::winrt_wrapper<winrt::Windows::UI::Xaml::VisualTransition>;
    using Window = py::winrt_wrapper<winrt::Windows::UI::Xaml::Window>;
    using WindowCreatedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::WindowCreatedEventArgs>;
    using XamlRoot = py::winrt_wrapper<winrt::Windows::UI::Xaml::XamlRoot>;
    using XamlRootChangedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::XamlRootChangedEventArgs>;
    using IDataTemplateExtension = py::winrt_wrapper<winrt::Windows::UI::Xaml::IDataTemplateExtension>;
    using IElementFactory = py::winrt_wrapper<winrt::Windows::UI::Xaml::IElementFactory>;
    using CornerRadius = py::winrt_struct_wrapper<winrt::Windows::UI::Xaml::CornerRadius>;
    using Duration = py::winrt_struct_wrapper<winrt::Windows::UI::Xaml::Duration>;
    using GridLength = py::winrt_struct_wrapper<winrt::Windows::UI::Xaml::GridLength>;
    using Thickness = py::winrt_struct_wrapper<winrt::Windows::UI::Xaml::Thickness>;
}

namespace py
{
    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::ApplicationHighContrastAdjustment> = "I";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::ApplicationRequiresPointerMode> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::ApplicationTheme> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::AutomationTextAttributesEnum> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::DurationType> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::ElementHighContrastAdjustment> = "I";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::ElementSoundKind> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::ElementSoundMode> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::ElementSoundPlayerState> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::ElementSpatialAudioMode> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::ElementTheme> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::FlowDirection> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::FocusState> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::FocusVisualKind> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::FontCapitals> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::FontEastAsianLanguage> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::FontEastAsianWidths> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::FontFraction> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::FontNumeralAlignment> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::FontNumeralStyle> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::FontVariants> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::GridUnitType> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::HorizontalAlignment> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::LineStackingStrategy> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::OpticalMarginAlignment> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::TextAlignment> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::TextLineBounds> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::TextReadingOrder> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::TextTrimming> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::TextWrapping> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Vector3TransitionComponents> = "I";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::VerticalAlignment> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Visibility> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::CornerRadius> = "T{d:top_left:d:top_right:d:bottom_right:d:bottom_left:}";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Duration> = "T{T{q:duration:}:time_span:i:type:}";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::GridLength> = "T{d:value:i:grid_unit_type:}";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Thickness> = "T{d:left:d:top:d:right:d:bottom:}";


    template<>
    struct py_type<winrt::Windows::UI::Xaml::ApplicationHighContrastAdjustment>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ApplicationHighContrastAdjustment";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::ApplicationRequiresPointerMode>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ApplicationRequiresPointerMode";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::ApplicationTheme>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ApplicationTheme";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::AutomationTextAttributesEnum>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "AutomationTextAttributesEnum";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::DurationType>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "DurationType";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::ElementHighContrastAdjustment>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ElementHighContrastAdjustment";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::ElementSoundKind>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ElementSoundKind";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::ElementSoundMode>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ElementSoundMode";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::ElementSoundPlayerState>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ElementSoundPlayerState";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::ElementSpatialAudioMode>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ElementSpatialAudioMode";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::ElementTheme>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ElementTheme";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::FlowDirection>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "FlowDirection";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::FocusState>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "FocusState";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::FocusVisualKind>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "FocusVisualKind";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::FontCapitals>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "FontCapitals";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::FontEastAsianLanguage>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "FontEastAsianLanguage";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::FontEastAsianWidths>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "FontEastAsianWidths";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::FontFraction>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "FontFraction";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::FontNumeralAlignment>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "FontNumeralAlignment";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::FontNumeralStyle>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "FontNumeralStyle";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::FontVariants>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "FontVariants";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::GridUnitType>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "GridUnitType";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::HorizontalAlignment>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "HorizontalAlignment";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::LineStackingStrategy>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "LineStackingStrategy";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::OpticalMarginAlignment>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "OpticalMarginAlignment";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::TextAlignment>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "TextAlignment";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::TextLineBounds>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "TextLineBounds";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::TextReadingOrder>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "TextReadingOrder";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::TextTrimming>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "TextTrimming";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::TextWrapping>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "TextWrapping";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Vector3TransitionComponents>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "Vector3TransitionComponents";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::VerticalAlignment>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "VerticalAlignment";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Visibility>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "Visibility";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::AdaptiveTrigger>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "AdaptiveTrigger";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Application>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "Application";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::ApplicationInitializationCallbackParams>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ApplicationInitializationCallbackParams";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::BindingFailedEventArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "BindingFailedEventArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::BringIntoViewOptions>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "BringIntoViewOptions";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::BringIntoViewRequestedEventArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "BringIntoViewRequestedEventArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::BrushTransition>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "BrushTransition";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::ColorPaletteResources>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ColorPaletteResources";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::CornerRadiusHelper>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "CornerRadiusHelper";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::DataContextChangedEventArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "DataContextChangedEventArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::DataTemplate>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "DataTemplate";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::DataTemplateKey>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "DataTemplateKey";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::DebugSettings>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "DebugSettings";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::DependencyObject>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "DependencyObject";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::DependencyObjectCollection>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "DependencyObjectCollection";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::DependencyProperty>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "DependencyProperty";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::DependencyPropertyChangedEventArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "DependencyPropertyChangedEventArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::DispatcherTimer>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "DispatcherTimer";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::DragEventArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "DragEventArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::DragOperationDeferral>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "DragOperationDeferral";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::DragStartingEventArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "DragStartingEventArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::DragUI>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "DragUI";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::DragUIOverride>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "DragUIOverride";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::DropCompletedEventArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "DropCompletedEventArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::DurationHelper>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "DurationHelper";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::EffectiveViewportChangedEventArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "EffectiveViewportChangedEventArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::ElementFactoryGetArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ElementFactoryGetArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::ElementFactoryRecycleArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ElementFactoryRecycleArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::ElementSoundPlayer>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ElementSoundPlayer";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::EventTrigger>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "EventTrigger";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::ExceptionRoutedEventArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ExceptionRoutedEventArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::FrameworkElement>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "FrameworkElement";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::FrameworkTemplate>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "FrameworkTemplate";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::FrameworkView>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "FrameworkView";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::FrameworkViewSource>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "FrameworkViewSource";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::GridLengthHelper>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "GridLengthHelper";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::MediaFailedRoutedEventArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "MediaFailedRoutedEventArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::PointHelper>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "PointHelper";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::PropertyMetadata>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "PropertyMetadata";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::PropertyPath>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "PropertyPath";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::RectHelper>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "RectHelper";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::ResourceDictionary>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ResourceDictionary";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::RoutedEvent>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "RoutedEvent";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::RoutedEventArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "RoutedEventArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::ScalarTransition>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ScalarTransition";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Setter>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "Setter";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::SetterBase>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "SetterBase";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::SetterBaseCollection>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "SetterBaseCollection";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::SizeChangedEventArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "SizeChangedEventArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::SizeHelper>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "SizeHelper";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::StateTrigger>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "StateTrigger";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::StateTriggerBase>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "StateTriggerBase";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Style>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "Style";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::TargetPropertyPath>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "TargetPropertyPath";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::ThicknessHelper>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "ThicknessHelper";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::TriggerAction>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "TriggerAction";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::TriggerActionCollection>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "TriggerActionCollection";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::TriggerBase>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "TriggerBase";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::TriggerCollection>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "TriggerCollection";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::UIElement>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "UIElement";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::UIElementWeakCollection>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "UIElementWeakCollection";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::UnhandledExceptionEventArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "UnhandledExceptionEventArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Vector3Transition>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "Vector3Transition";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::VisualState>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "VisualState";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::VisualStateChangedEventArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "VisualStateChangedEventArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::VisualStateGroup>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "VisualStateGroup";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::VisualStateManager>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "VisualStateManager";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::VisualTransition>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "VisualTransition";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Window>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "Window";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::WindowCreatedEventArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "WindowCreatedEventArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::XamlRoot>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "XamlRoot";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::XamlRootChangedEventArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "XamlRootChangedEventArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::IDataTemplateExtension>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "IDataTemplateExtension";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::IElementFactory>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "IElementFactory";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::CornerRadius>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "CornerRadius";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Duration>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "Duration";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::GridLength>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "GridLength";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Thickness>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml";
        static constexpr const char* type_name = "Thickness";
    };
    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::ApplicationInitializationCallback>
    {
        using type = py::impl::Windows::UI::Xaml::ApplicationInitializationCallback;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::BindingFailedEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::BindingFailedEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::CreateDefaultValueCallback>
    {
        using type = py::impl::Windows::UI::Xaml::CreateDefaultValueCallback;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::DependencyPropertyChangedCallback>
    {
        using type = py::impl::Windows::UI::Xaml::DependencyPropertyChangedCallback;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::DependencyPropertyChangedEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::DependencyPropertyChangedEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::DragEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::DragEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::EnteredBackgroundEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::EnteredBackgroundEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::ExceptionRoutedEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::ExceptionRoutedEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::LeavingBackgroundEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::LeavingBackgroundEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::PropertyChangedCallback>
    {
        using type = py::impl::Windows::UI::Xaml::PropertyChangedCallback;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::RoutedEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::RoutedEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::SizeChangedEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::SizeChangedEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::SuspendingEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::SuspendingEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::UnhandledExceptionEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::UnhandledExceptionEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::VisualStateChangedEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::VisualStateChangedEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::WindowActivatedEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::WindowActivatedEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::WindowClosedEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::WindowClosedEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::WindowSizeChangedEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::WindowSizeChangedEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::WindowVisibilityChangedEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::WindowVisibilityChangedEventHandler;
    };

}
