// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#pragma once

#include "pybase.h"
static_assert(winrt::check_version(PYWINRT_VERSION, "2.0.0-beta.2"), "Mismatched Py/WinRT headers.");

#if __has_include("py.Windows.Foundation.h")
#include "py.Windows.Foundation.h"
#endif

#include <winrt/Windows.Foundation.h>

#include <winrt/Windows.UI.Xaml.Interop.h>

namespace py::proj::Windows::UI::Xaml::Interop
{}

namespace py::impl::Windows::UI::Xaml::Interop
{
    struct BindableVectorChangedEventHandler
    {
        static winrt::Windows::UI::Xaml::Interop::BindableVectorChangedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };

    struct NotifyCollectionChangedEventHandler
    {
        static winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventHandler get(PyObject* callable)
        {
            py::delegate_callable _delegate{ callable };

            return [delegate = std::move(_delegate)](auto param0, auto param1)
            {
                auto gil = py::ensure_gil();

                py::pyobj_handle py_param0{ py::convert(param0) };

                if (!py_param0) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param0");
                }

                py::pyobj_handle py_param1{ py::convert(param1) };

                if (!py_param1) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw std::invalid_argument("param1");
                }

                py::pyobj_handle args{ PyTuple_Pack(2, py_param0.get(), py_param1.get()) };

                if (!args) {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }

                py::pyobj_handle return_value{ PyObject_CallObject(delegate.callable(), args.get()) };

                if (!return_value)
                {
                    PyErr_WriteUnraisable(delegate.callable());
                    throw winrt::hresult_error();
                }
            };
        };
    };
}

namespace py::wrapper::Windows::UI::Xaml::Interop
{
    using NotifyCollectionChangedEventArgs = py::winrt_wrapper<winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs>;
    using IBindableIterable = py::winrt_wrapper<winrt::Windows::UI::Xaml::Interop::IBindableIterable>;
    using IBindableIterator = py::winrt_wrapper<winrt::Windows::UI::Xaml::Interop::IBindableIterator>;
    using IBindableObservableVector = py::winrt_wrapper<winrt::Windows::UI::Xaml::Interop::IBindableObservableVector>;
    using IBindableVector = py::winrt_wrapper<winrt::Windows::UI::Xaml::Interop::IBindableVector>;
    using IBindableVectorView = py::winrt_wrapper<winrt::Windows::UI::Xaml::Interop::IBindableVectorView>;
    using INotifyCollectionChanged = py::winrt_wrapper<winrt::Windows::UI::Xaml::Interop::INotifyCollectionChanged>;
    using TypeName = py::winrt_struct_wrapper<winrt::Windows::UI::Xaml::Interop::TypeName>;
}

namespace py
{
    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedAction> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Interop::TypeKind> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::UI::Xaml::Interop::TypeName> = "T{P:name:i:kind:}";


    template<>
    struct py_type<winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedAction>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.interop";
        static constexpr const char* type_name = "NotifyCollectionChangedAction";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Interop::TypeKind>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.interop";
        static constexpr const char* type_name = "TypeKind";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.interop";
        static constexpr const char* type_name = "NotifyCollectionChangedEventArgs";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Interop::IBindableIterable>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.interop";
        static constexpr const char* type_name = "IBindableIterable";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Interop::IBindableIterator>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.interop";
        static constexpr const char* type_name = "IBindableIterator";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Interop::IBindableObservableVector>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.interop";
        static constexpr const char* type_name = "IBindableObservableVector";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Interop::IBindableVector>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.interop";
        static constexpr const char* type_name = "IBindableVector";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Interop::IBindableVectorView>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.interop";
        static constexpr const char* type_name = "IBindableVectorView";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Interop::INotifyCollectionChanged>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.interop";
        static constexpr const char* type_name = "INotifyCollectionChanged";
    };

    template<>
    struct py_type<winrt::Windows::UI::Xaml::Interop::TypeName>
    {
        static constexpr const char* module_name = "winrt.windows.ui.xaml.interop";
        static constexpr const char* type_name = "TypeName";
    };
    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::Interop::BindableVectorChangedEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::Interop::BindableVectorChangedEventHandler;
    };

    template <>
    struct delegate_python_type<winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventHandler>
    {
        using type = py::impl::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventHandler;
    };

}
