// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#pragma once

#include "pybase.h"
static_assert(winrt::check_version(PYWINRT_VERSION, "2.0.0-beta.2"), "Mismatched Py/WinRT headers.");

#if __has_include("py.Windows.Foundation.h")
#include "py.Windows.Foundation.h"
#endif

#if __has_include("py.Windows.Foundation.Collections.h")
#include "py.Windows.Foundation.Collections.h"
#endif

#if __has_include("py.Windows.Security.Cryptography.Certificates.h")
#include "py.Windows.Security.Cryptography.Certificates.h"
#endif

#if __has_include("py.Windows.Storage.Streams.h")
#include "py.Windows.Storage.Streams.h"
#endif

#include <winrt/Windows.Foundation.h>
#include <winrt/Windows.Foundation.Collections.h>
#include <winrt/Windows.Security.Cryptography.Certificates.h>
#include <winrt/Windows.Storage.Streams.h>

#include <winrt/Windows.Security.Cryptography.Core.h>

namespace py::proj::Windows::Security::Cryptography::Core
{}

namespace py::impl::Windows::Security::Cryptography::Core
{}

namespace py::wrapper::Windows::Security::Cryptography::Core
{
    using AsymmetricAlgorithmNames = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::AsymmetricAlgorithmNames>;
    using AsymmetricKeyAlgorithmProvider = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider>;
    using CryptographicEngine = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::CryptographicEngine>;
    using CryptographicHash = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::CryptographicHash>;
    using CryptographicKey = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::CryptographicKey>;
    using EccCurveNames = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::EccCurveNames>;
    using EncryptedAndAuthenticatedData = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData>;
    using HashAlgorithmNames = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::HashAlgorithmNames>;
    using HashAlgorithmProvider = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::HashAlgorithmProvider>;
    using KeyDerivationAlgorithmNames = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::KeyDerivationAlgorithmNames>;
    using KeyDerivationAlgorithmProvider = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider>;
    using KeyDerivationParameters = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::KeyDerivationParameters>;
    using MacAlgorithmNames = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::MacAlgorithmNames>;
    using MacAlgorithmProvider = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::MacAlgorithmProvider>;
    using PersistedKeyProvider = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::PersistedKeyProvider>;
    using SymmetricAlgorithmNames = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::SymmetricAlgorithmNames>;
    using SymmetricKeyAlgorithmProvider = py::winrt_wrapper<winrt::Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider>;
}

namespace py
{
    template<>
    inline constexpr const char* buffer_format<winrt::Windows::Security::Cryptography::Core::Capi1KdfTargetAlgorithm> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::Security::Cryptography::Core::CryptographicPadding> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::Security::Cryptography::Core::CryptographicPrivateKeyBlobType> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType> = "i";


    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::Capi1KdfTargetAlgorithm>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "Capi1KdfTargetAlgorithm";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::CryptographicPadding>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "CryptographicPadding";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::CryptographicPrivateKeyBlobType>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "CryptographicPrivateKeyBlobType";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "CryptographicPublicKeyBlobType";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::AsymmetricAlgorithmNames>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "AsymmetricAlgorithmNames";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "AsymmetricKeyAlgorithmProvider";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::CryptographicEngine>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "CryptographicEngine";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::CryptographicHash>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "CryptographicHash";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::CryptographicKey>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "CryptographicKey";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::EccCurveNames>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "EccCurveNames";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "EncryptedAndAuthenticatedData";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::HashAlgorithmNames>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "HashAlgorithmNames";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::HashAlgorithmProvider>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "HashAlgorithmProvider";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::KeyDerivationAlgorithmNames>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "KeyDerivationAlgorithmNames";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "KeyDerivationAlgorithmProvider";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::KeyDerivationParameters>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "KeyDerivationParameters";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::MacAlgorithmNames>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "MacAlgorithmNames";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::MacAlgorithmProvider>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "MacAlgorithmProvider";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::PersistedKeyProvider>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "PersistedKeyProvider";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::SymmetricAlgorithmNames>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "SymmetricAlgorithmNames";
    };

    template<>
    struct py_type<winrt::Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider>
    {
        static constexpr const char* module_name = "winrt.windows.security.cryptography.core";
        static constexpr const char* type_name = "SymmetricKeyAlgorithmProvider";
    };
}
