// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#pragma once

#include "pybase.h"
static_assert(winrt::check_version(PYWINRT_VERSION, "0.0.0"), "Mismatched Py/WinRT headers.");
#include <winrt/Windows.AI.Actions.Hosting.h>
#include <winrt/Windows.Foundation.h>

#include <winrt/Windows.AI.Actions.h>

namespace py::proj::Windows::AI::Actions
{
}

namespace py
{
    template<>
    inline constexpr const char* buffer_format<winrt::Windows::AI::Actions::ActionEntityKind> = "i";

    template<>
    inline constexpr const char* buffer_format<winrt::Windows::AI::Actions::ActionInvocationResult> = "i";


    template<>
    struct py_type<winrt::Windows::AI::Actions::ActionEntityKind>
    {
        static constexpr std::string_view qualified_name = "winrt.windows.ai.actions.ActionEntityKind";
        static constexpr const char* module_name = "winrt.windows.ai.actions";
        static constexpr const char* type_name = "ActionEntityKind";
    };

    template<>
    struct py_type<winrt::Windows::AI::Actions::ActionInvocationResult>
    {
        static constexpr std::string_view qualified_name = "winrt.windows.ai.actions.ActionInvocationResult";
        static constexpr const char* module_name = "winrt.windows.ai.actions";
        static constexpr const char* type_name = "ActionInvocationResult";
    };

    template<>
    struct py_type<winrt::Windows::AI::Actions::ActionEntity>
    {
        static constexpr std::string_view qualified_name = "winrt.windows.ai.actions.ActionEntity";
        static constexpr const char* module_name = "winrt.windows.ai.actions";
        static constexpr const char* type_name = "ActionEntity";
    };

    template<>
    struct py_type<winrt::Windows::AI::Actions::ActionEntityDisplayInfo>
    {
        static constexpr std::string_view qualified_name = "winrt.windows.ai.actions.ActionEntityDisplayInfo";
        static constexpr const char* module_name = "winrt.windows.ai.actions";
        static constexpr const char* type_name = "ActionEntityDisplayInfo";
    };

    template<>
    struct py_type<winrt::Windows::AI::Actions::ActionEntityFactory>
    {
        static constexpr std::string_view qualified_name = "winrt.windows.ai.actions.ActionEntityFactory";
        static constexpr const char* module_name = "winrt.windows.ai.actions";
        static constexpr const char* type_name = "ActionEntityFactory";
    };

    template<>
    struct py_type<winrt::Windows::AI::Actions::ActionInvocationContext>
    {
        static constexpr std::string_view qualified_name = "winrt.windows.ai.actions.ActionInvocationContext";
        static constexpr const char* module_name = "winrt.windows.ai.actions";
        static constexpr const char* type_name = "ActionInvocationContext";
    };

    template<>
    struct py_type<winrt::Windows::AI::Actions::ActionRuntime>
    {
        static constexpr std::string_view qualified_name = "winrt.windows.ai.actions.ActionRuntime";
        static constexpr const char* module_name = "winrt.windows.ai.actions";
        static constexpr const char* type_name = "ActionRuntime";
    };

    template<>
    struct py_type<winrt::Windows::AI::Actions::DocumentActionEntity>
    {
        static constexpr std::string_view qualified_name = "winrt.windows.ai.actions.DocumentActionEntity";
        static constexpr const char* module_name = "winrt.windows.ai.actions";
        static constexpr const char* type_name = "DocumentActionEntity";
    };

    template<>
    struct py_type<winrt::Windows::AI::Actions::FileActionEntity>
    {
        static constexpr std::string_view qualified_name = "winrt.windows.ai.actions.FileActionEntity";
        static constexpr const char* module_name = "winrt.windows.ai.actions";
        static constexpr const char* type_name = "FileActionEntity";
    };

    template<>
    struct py_type<winrt::Windows::AI::Actions::NamedActionEntity>
    {
        static constexpr std::string_view qualified_name = "winrt.windows.ai.actions.NamedActionEntity";
        static constexpr const char* module_name = "winrt.windows.ai.actions";
        static constexpr const char* type_name = "NamedActionEntity";
    };

    template<>
    struct py_type<winrt::Windows::AI::Actions::PhotoActionEntity>
    {
        static constexpr std::string_view qualified_name = "winrt.windows.ai.actions.PhotoActionEntity";
        static constexpr const char* module_name = "winrt.windows.ai.actions";
        static constexpr const char* type_name = "PhotoActionEntity";
    };

    template<>
    struct py_type<winrt::Windows::AI::Actions::TextActionEntity>
    {
        static constexpr std::string_view qualified_name = "winrt.windows.ai.actions.TextActionEntity";
        static constexpr const char* module_name = "winrt.windows.ai.actions";
        static constexpr const char* type_name = "TextActionEntity";
    };
}

#if __has_include("py.Windows.AI.Actions.Hosting.h")
#include "py.Windows.AI.Actions.Hosting.h"
#endif

#if __has_include("py.Windows.Foundation.h")
#include "py.Windows.Foundation.h"
#endif

namespace py::impl::Windows::AI::Actions
{
}

namespace py::wrapper::Windows::AI::Actions
{
    using ActionEntity = py::winrt_wrapper<winrt::Windows::AI::Actions::ActionEntity>;
    using ActionEntityDisplayInfo = py::winrt_wrapper<winrt::Windows::AI::Actions::ActionEntityDisplayInfo>;
    using ActionEntityFactory = py::winrt_wrapper<winrt::Windows::AI::Actions::ActionEntityFactory>;
    using ActionInvocationContext = py::winrt_wrapper<winrt::Windows::AI::Actions::ActionInvocationContext>;
    using ActionRuntime = py::winrt_wrapper<winrt::Windows::AI::Actions::ActionRuntime>;
    using DocumentActionEntity = py::winrt_wrapper<winrt::Windows::AI::Actions::DocumentActionEntity>;
    using FileActionEntity = py::winrt_wrapper<winrt::Windows::AI::Actions::FileActionEntity>;
    using NamedActionEntity = py::winrt_wrapper<winrt::Windows::AI::Actions::NamedActionEntity>;
    using PhotoActionEntity = py::winrt_wrapper<winrt::Windows::AI::Actions::PhotoActionEntity>;
    using TextActionEntity = py::winrt_wrapper<winrt::Windows::AI::Actions::TextActionEntity>;
}

namespace py
{
}
