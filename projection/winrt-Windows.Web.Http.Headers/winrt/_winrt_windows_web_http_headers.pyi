# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.globalization as windows_globalization
import winrt.windows.networking as windows_networking
import winrt.windows.storage.streams as windows_storage_streams
import winrt.windows.web.http as windows_web_http

Self = typing.TypeVar('Self')

@typing.final
class HttpCacheDirectiveHeaderValueCollection(winrt.system.Object, windows_foundation.ImplementsIStringable, winrt._winrt.MutableSequence[HttpNameValueHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[HttpNameValueHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpNameValueHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpNameValueHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpNameValueHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpNameValueHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpCacheDirectiveHeaderValueCollection: ...
    def append(self, value: HttpNameValueHeaderValue, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[HttpNameValueHeaderValue]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> HttpNameValueHeaderValue: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[HttpNameValueHeaderValue], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[HttpNameValueHeaderValue]: ...
    def index_of(self, value: HttpNameValueHeaderValue, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: HttpNameValueHeaderValue, /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[HttpNameValueHeaderValue], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: HttpNameValueHeaderValue, /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...
    @_property
    def shared_max_age(self) -> typing.Optional[datetime.timedelta]: ...
    @shared_max_age.setter
    def shared_max_age(self, value: typing.Optional[datetime.timedelta]) -> None: ...
    @_property
    def min_fresh(self) -> typing.Optional[datetime.timedelta]: ...
    @min_fresh.setter
    def min_fresh(self, value: typing.Optional[datetime.timedelta]) -> None: ...
    @_property
    def max_stale(self) -> typing.Optional[datetime.timedelta]: ...
    @max_stale.setter
    def max_stale(self, value: typing.Optional[datetime.timedelta]) -> None: ...
    @_property
    def max_age(self) -> typing.Optional[datetime.timedelta]: ...
    @max_age.setter
    def max_age(self, value: typing.Optional[datetime.timedelta]) -> None: ...

@typing.final
class HttpChallengeHeaderValue_Static(type):
    def parse(cls, input: str, /) -> HttpChallengeHeaderValue: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, HttpChallengeHeaderValue]: ...

@typing.final
class HttpChallengeHeaderValue(winrt.system.Object, windows_foundation.ImplementsIStringable, metaclass=HttpChallengeHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpChallengeHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], scheme: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], scheme: str, token: str) -> Self: ...
    def to_string(self) -> str: ...
    @_property
    def parameters(self) -> typing.MutableSequence[HttpNameValueHeaderValue]: ...
    @_property
    def scheme(self) -> str: ...
    @_property
    def token(self) -> str: ...

@typing.final
class HttpChallengeHeaderValueCollection(winrt.system.Object, windows_foundation.ImplementsIStringable, winrt._winrt.MutableSequence[HttpChallengeHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[HttpChallengeHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpChallengeHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpChallengeHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpChallengeHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpChallengeHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpChallengeHeaderValueCollection: ...
    def append(self, value: HttpChallengeHeaderValue, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[HttpChallengeHeaderValue]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> HttpChallengeHeaderValue: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[HttpChallengeHeaderValue], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[HttpChallengeHeaderValue]: ...
    def index_of(self, value: HttpChallengeHeaderValue, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: HttpChallengeHeaderValue, /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[HttpChallengeHeaderValue], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: HttpChallengeHeaderValue, /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpConnectionOptionHeaderValue_Static(type):
    def parse(cls, input: str, /) -> HttpConnectionOptionHeaderValue: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, HttpConnectionOptionHeaderValue]: ...

@typing.final
class HttpConnectionOptionHeaderValue(winrt.system.Object, windows_foundation.ImplementsIStringable, metaclass=HttpConnectionOptionHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpConnectionOptionHeaderValue: ...
    def __new__(cls: typing.Type[Self], token: str) -> Self: ...
    def to_string(self) -> str: ...
    @_property
    def token(self) -> str: ...

@typing.final
class HttpConnectionOptionHeaderValueCollection(winrt.system.Object, windows_foundation.ImplementsIStringable, winrt._winrt.MutableSequence[HttpConnectionOptionHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[HttpConnectionOptionHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpConnectionOptionHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpConnectionOptionHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpConnectionOptionHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpConnectionOptionHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpConnectionOptionHeaderValueCollection: ...
    def append(self, value: HttpConnectionOptionHeaderValue, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[HttpConnectionOptionHeaderValue]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> HttpConnectionOptionHeaderValue: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[HttpConnectionOptionHeaderValue], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[HttpConnectionOptionHeaderValue]: ...
    def index_of(self, value: HttpConnectionOptionHeaderValue, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: HttpConnectionOptionHeaderValue, /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[HttpConnectionOptionHeaderValue], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: HttpConnectionOptionHeaderValue, /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpContentCodingHeaderValue_Static(type):
    def parse(cls, input: str, /) -> HttpContentCodingHeaderValue: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, HttpContentCodingHeaderValue]: ...

@typing.final
class HttpContentCodingHeaderValue(winrt.system.Object, windows_foundation.ImplementsIStringable, metaclass=HttpContentCodingHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentCodingHeaderValue: ...
    def __new__(cls: typing.Type[Self], content_coding: str) -> Self: ...
    def to_string(self) -> str: ...
    @_property
    def content_coding(self) -> str: ...

@typing.final
class HttpContentCodingHeaderValueCollection(winrt.system.Object, windows_foundation.ImplementsIStringable, winrt._winrt.MutableSequence[HttpContentCodingHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[HttpContentCodingHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpContentCodingHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpContentCodingHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpContentCodingHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpContentCodingHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentCodingHeaderValueCollection: ...
    def append(self, value: HttpContentCodingHeaderValue, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[HttpContentCodingHeaderValue]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> HttpContentCodingHeaderValue: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[HttpContentCodingHeaderValue], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[HttpContentCodingHeaderValue]: ...
    def index_of(self, value: HttpContentCodingHeaderValue, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: HttpContentCodingHeaderValue, /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[HttpContentCodingHeaderValue], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: HttpContentCodingHeaderValue, /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpContentCodingWithQualityHeaderValue_Static(type):
    def parse(cls, input: str, /) -> HttpContentCodingWithQualityHeaderValue: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, HttpContentCodingWithQualityHeaderValue]: ...

@typing.final
class HttpContentCodingWithQualityHeaderValue(winrt.system.Object, windows_foundation.ImplementsIStringable, metaclass=HttpContentCodingWithQualityHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentCodingWithQualityHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], content_coding: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], content_coding: str, quality: winrt.system.Double) -> Self: ...
    def to_string(self) -> str: ...
    @_property
    def content_coding(self) -> str: ...
    @_property
    def quality(self) -> typing.Optional[winrt.system.Double]: ...

@typing.final
class HttpContentCodingWithQualityHeaderValueCollection(winrt.system.Object, windows_foundation.ImplementsIStringable, winrt._winrt.MutableSequence[HttpContentCodingWithQualityHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[HttpContentCodingWithQualityHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpContentCodingWithQualityHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpContentCodingWithQualityHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpContentCodingWithQualityHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpContentCodingWithQualityHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentCodingWithQualityHeaderValueCollection: ...
    def append(self, value: HttpContentCodingWithQualityHeaderValue, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[HttpContentCodingWithQualityHeaderValue]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> HttpContentCodingWithQualityHeaderValue: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[HttpContentCodingWithQualityHeaderValue], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[HttpContentCodingWithQualityHeaderValue]: ...
    def index_of(self, value: HttpContentCodingWithQualityHeaderValue, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: HttpContentCodingWithQualityHeaderValue, /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[HttpContentCodingWithQualityHeaderValue], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: HttpContentCodingWithQualityHeaderValue, /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpContentDispositionHeaderValue_Static(type):
    def parse(cls, input: str, /) -> HttpContentDispositionHeaderValue: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, HttpContentDispositionHeaderValue]: ...

@typing.final
class HttpContentDispositionHeaderValue(winrt.system.Object, windows_foundation.ImplementsIStringable, metaclass=HttpContentDispositionHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentDispositionHeaderValue: ...
    def __new__(cls: typing.Type[Self], disposition_type: str) -> Self: ...
    def to_string(self) -> str: ...
    @_property
    def size(self) -> typing.Optional[winrt.system.UInt64]: ...
    @size.setter
    def size(self, value: typing.Optional[winrt.system.UInt64]) -> None: ...
    @_property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @_property
    def file_name_star(self) -> str: ...
    @file_name_star.setter
    def file_name_star(self, value: str) -> None: ...
    @_property
    def file_name(self) -> str: ...
    @file_name.setter
    def file_name(self, value: str) -> None: ...
    @_property
    def disposition_type(self) -> str: ...
    @disposition_type.setter
    def disposition_type(self, value: str) -> None: ...
    @_property
    def parameters(self) -> typing.MutableSequence[HttpNameValueHeaderValue]: ...

@typing.final
class HttpContentHeaderCollection(winrt.system.Object, windows_foundation.ImplementsIStringable, winrt._winrt.MutableMapping[str, str]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool: ...
    def __getitem__(self, key: str) -> str: ...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentHeaderCollection: ...
    def __new__(cls: typing.Type[Self]) -> Self: ...
    def append(self, name: str, value: str, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[str, str]]: ...
    def get_view(self) -> typing.Mapping[str, str]: ...
    def has_key(self, key: str, /) -> bool: ...
    def insert(self, key: str, value: str, /) -> bool: ...
    def lookup(self, key: str, /) -> str: ...
    def remove(self, key: str, /) -> None: ...
    def to_string(self) -> str: ...
    def try_append_without_validation(self, name: str, value: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...
    @_property
    def last_modified(self) -> typing.Optional[datetime.datetime]: ...
    @last_modified.setter
    def last_modified(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @_property
    def expires(self) -> typing.Optional[datetime.datetime]: ...
    @expires.setter
    def expires(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @_property
    def content_type(self) -> HttpMediaTypeHeaderValue: ...
    @content_type.setter
    def content_type(self, value: HttpMediaTypeHeaderValue) -> None: ...
    @_property
    def content_range(self) -> HttpContentRangeHeaderValue: ...
    @content_range.setter
    def content_range(self, value: HttpContentRangeHeaderValue) -> None: ...
    @_property
    def content_md5(self) -> windows_storage_streams.IBuffer: ...
    @content_md5.setter
    def content_md5(self, value: windows_storage_streams.ImplementsIBuffer) -> None: ...
    @_property
    def content_location(self) -> windows_foundation.Uri: ...
    @content_location.setter
    def content_location(self, value: windows_foundation.Uri) -> None: ...
    @_property
    def content_length(self) -> typing.Optional[winrt.system.UInt64]: ...
    @content_length.setter
    def content_length(self, value: typing.Optional[winrt.system.UInt64]) -> None: ...
    @_property
    def content_disposition(self) -> HttpContentDispositionHeaderValue: ...
    @content_disposition.setter
    def content_disposition(self, value: HttpContentDispositionHeaderValue) -> None: ...
    @_property
    def content_encoding(self) -> HttpContentCodingHeaderValueCollection: ...
    @_property
    def content_language(self) -> HttpLanguageHeaderValueCollection: ...

@typing.final
class HttpContentRangeHeaderValue_Static(type):
    def parse(cls, input: str, /) -> HttpContentRangeHeaderValue: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, HttpContentRangeHeaderValue]: ...

@typing.final
class HttpContentRangeHeaderValue(winrt.system.Object, windows_foundation.ImplementsIStringable, metaclass=HttpContentRangeHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentRangeHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], length: winrt.system.UInt64) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], from_: winrt.system.UInt64, to: winrt.system.UInt64) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], from_: winrt.system.UInt64, to: winrt.system.UInt64, length: winrt.system.UInt64) -> Self: ...
    def to_string(self) -> str: ...
    @_property
    def unit(self) -> str: ...
    @unit.setter
    def unit(self, value: str) -> None: ...
    @_property
    def first_byte_position(self) -> typing.Optional[winrt.system.UInt64]: ...
    @_property
    def last_byte_position(self) -> typing.Optional[winrt.system.UInt64]: ...
    @_property
    def length(self) -> typing.Optional[winrt.system.UInt64]: ...

@typing.final
class HttpCookiePairHeaderValue_Static(type):
    def parse(cls, input: str, /) -> HttpCookiePairHeaderValue: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, HttpCookiePairHeaderValue]: ...

@typing.final
class HttpCookiePairHeaderValue(winrt.system.Object, windows_foundation.ImplementsIStringable, metaclass=HttpCookiePairHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpCookiePairHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], name: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], name: str, value: str) -> Self: ...
    def to_string(self) -> str: ...
    @_property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: str) -> None: ...
    @_property
    def name(self) -> str: ...

@typing.final
class HttpCookiePairHeaderValueCollection(winrt.system.Object, windows_foundation.ImplementsIStringable, winrt._winrt.MutableSequence[HttpCookiePairHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[HttpCookiePairHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpCookiePairHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpCookiePairHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpCookiePairHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpCookiePairHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpCookiePairHeaderValueCollection: ...
    def append(self, value: HttpCookiePairHeaderValue, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[HttpCookiePairHeaderValue]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> HttpCookiePairHeaderValue: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[HttpCookiePairHeaderValue], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[HttpCookiePairHeaderValue]: ...
    def index_of(self, value: HttpCookiePairHeaderValue, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: HttpCookiePairHeaderValue, /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[HttpCookiePairHeaderValue], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: HttpCookiePairHeaderValue, /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpCredentialsHeaderValue_Static(type):
    def parse(cls, input: str, /) -> HttpCredentialsHeaderValue: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, HttpCredentialsHeaderValue]: ...

@typing.final
class HttpCredentialsHeaderValue(winrt.system.Object, windows_foundation.ImplementsIStringable, metaclass=HttpCredentialsHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpCredentialsHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], scheme: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], scheme: str, token: str) -> Self: ...
    def to_string(self) -> str: ...
    @_property
    def parameters(self) -> typing.MutableSequence[HttpNameValueHeaderValue]: ...
    @_property
    def scheme(self) -> str: ...
    @_property
    def token(self) -> str: ...

@typing.final
class HttpDateOrDeltaHeaderValue_Static(type):
    def parse(cls, input: str, /) -> HttpDateOrDeltaHeaderValue: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, HttpDateOrDeltaHeaderValue]: ...

@typing.final
class HttpDateOrDeltaHeaderValue(winrt.system.Object, windows_foundation.ImplementsIStringable, metaclass=HttpDateOrDeltaHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpDateOrDeltaHeaderValue: ...
    def to_string(self) -> str: ...
    @_property
    def date(self) -> typing.Optional[datetime.datetime]: ...
    @_property
    def delta(self) -> typing.Optional[datetime.timedelta]: ...

@typing.final
class HttpExpectationHeaderValue_Static(type):
    def parse(cls, input: str, /) -> HttpExpectationHeaderValue: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, HttpExpectationHeaderValue]: ...

@typing.final
class HttpExpectationHeaderValue(winrt.system.Object, windows_foundation.ImplementsIStringable, metaclass=HttpExpectationHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpExpectationHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], name: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], name: str, value: str) -> Self: ...
    def to_string(self) -> str: ...
    @_property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: str) -> None: ...
    @_property
    def name(self) -> str: ...
    @_property
    def parameters(self) -> typing.MutableSequence[HttpNameValueHeaderValue]: ...

@typing.final
class HttpExpectationHeaderValueCollection(winrt.system.Object, windows_foundation.ImplementsIStringable, winrt._winrt.MutableSequence[HttpExpectationHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[HttpExpectationHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpExpectationHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpExpectationHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpExpectationHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpExpectationHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpExpectationHeaderValueCollection: ...
    def append(self, value: HttpExpectationHeaderValue, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[HttpExpectationHeaderValue]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> HttpExpectationHeaderValue: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[HttpExpectationHeaderValue], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[HttpExpectationHeaderValue]: ...
    def index_of(self, value: HttpExpectationHeaderValue, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: HttpExpectationHeaderValue, /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[HttpExpectationHeaderValue], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: HttpExpectationHeaderValue, /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpLanguageHeaderValueCollection(winrt.system.Object, windows_foundation.ImplementsIStringable, winrt._winrt.MutableSequence[windows_globalization.Language]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[windows_globalization.Language]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> windows_globalization.Language: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[windows_globalization.Language]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: windows_globalization.Language) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[windows_globalization.Language]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpLanguageHeaderValueCollection: ...
    def append(self, value: windows_globalization.Language, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[windows_globalization.Language]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> windows_globalization.Language: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[windows_globalization.Language], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[windows_globalization.Language]: ...
    def index_of(self, value: windows_globalization.Language, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: windows_globalization.Language, /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[windows_globalization.Language], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: windows_globalization.Language, /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpLanguageRangeWithQualityHeaderValue_Static(type):
    def parse(cls, input: str, /) -> HttpLanguageRangeWithQualityHeaderValue: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, HttpLanguageRangeWithQualityHeaderValue]: ...

@typing.final
class HttpLanguageRangeWithQualityHeaderValue(winrt.system.Object, windows_foundation.ImplementsIStringable, metaclass=HttpLanguageRangeWithQualityHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpLanguageRangeWithQualityHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], language_range: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], language_range: str, quality: winrt.system.Double) -> Self: ...
    def to_string(self) -> str: ...
    @_property
    def language_range(self) -> str: ...
    @_property
    def quality(self) -> typing.Optional[winrt.system.Double]: ...

@typing.final
class HttpLanguageRangeWithQualityHeaderValueCollection(winrt.system.Object, windows_foundation.ImplementsIStringable, winrt._winrt.MutableSequence[HttpLanguageRangeWithQualityHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[HttpLanguageRangeWithQualityHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpLanguageRangeWithQualityHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpLanguageRangeWithQualityHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpLanguageRangeWithQualityHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpLanguageRangeWithQualityHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpLanguageRangeWithQualityHeaderValueCollection: ...
    def append(self, value: HttpLanguageRangeWithQualityHeaderValue, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[HttpLanguageRangeWithQualityHeaderValue]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> HttpLanguageRangeWithQualityHeaderValue: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[HttpLanguageRangeWithQualityHeaderValue], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[HttpLanguageRangeWithQualityHeaderValue]: ...
    def index_of(self, value: HttpLanguageRangeWithQualityHeaderValue, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: HttpLanguageRangeWithQualityHeaderValue, /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[HttpLanguageRangeWithQualityHeaderValue], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: HttpLanguageRangeWithQualityHeaderValue, /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpMediaTypeHeaderValue_Static(type):
    def parse(cls, input: str, /) -> HttpMediaTypeHeaderValue: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, HttpMediaTypeHeaderValue]: ...

@typing.final
class HttpMediaTypeHeaderValue(winrt.system.Object, windows_foundation.ImplementsIStringable, metaclass=HttpMediaTypeHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpMediaTypeHeaderValue: ...
    def __new__(cls: typing.Type[Self], media_type: str) -> Self: ...
    def to_string(self) -> str: ...
    @_property
    def media_type(self) -> str: ...
    @media_type.setter
    def media_type(self, value: str) -> None: ...
    @_property
    def char_set(self) -> str: ...
    @char_set.setter
    def char_set(self, value: str) -> None: ...
    @_property
    def parameters(self) -> typing.MutableSequence[HttpNameValueHeaderValue]: ...

@typing.final
class HttpMediaTypeWithQualityHeaderValue_Static(type):
    def parse(cls, input: str, /) -> HttpMediaTypeWithQualityHeaderValue: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, HttpMediaTypeWithQualityHeaderValue]: ...

@typing.final
class HttpMediaTypeWithQualityHeaderValue(winrt.system.Object, windows_foundation.ImplementsIStringable, metaclass=HttpMediaTypeWithQualityHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpMediaTypeWithQualityHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], media_type: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], media_type: str, quality: winrt.system.Double) -> Self: ...
    def to_string(self) -> str: ...
    @_property
    def quality(self) -> typing.Optional[winrt.system.Double]: ...
    @quality.setter
    def quality(self, value: typing.Optional[winrt.system.Double]) -> None: ...
    @_property
    def media_type(self) -> str: ...
    @media_type.setter
    def media_type(self, value: str) -> None: ...
    @_property
    def char_set(self) -> str: ...
    @char_set.setter
    def char_set(self, value: str) -> None: ...
    @_property
    def parameters(self) -> typing.MutableSequence[HttpNameValueHeaderValue]: ...

@typing.final
class HttpMediaTypeWithQualityHeaderValueCollection(winrt.system.Object, windows_foundation.ImplementsIStringable, winrt._winrt.MutableSequence[HttpMediaTypeWithQualityHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[HttpMediaTypeWithQualityHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpMediaTypeWithQualityHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpMediaTypeWithQualityHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpMediaTypeWithQualityHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpMediaTypeWithQualityHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpMediaTypeWithQualityHeaderValueCollection: ...
    def append(self, value: HttpMediaTypeWithQualityHeaderValue, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[HttpMediaTypeWithQualityHeaderValue]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> HttpMediaTypeWithQualityHeaderValue: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[HttpMediaTypeWithQualityHeaderValue], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[HttpMediaTypeWithQualityHeaderValue]: ...
    def index_of(self, value: HttpMediaTypeWithQualityHeaderValue, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: HttpMediaTypeWithQualityHeaderValue, /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[HttpMediaTypeWithQualityHeaderValue], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: HttpMediaTypeWithQualityHeaderValue, /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpMethodHeaderValueCollection(winrt.system.Object, windows_foundation.ImplementsIStringable, winrt._winrt.MutableSequence[windows_web_http.HttpMethod]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[windows_web_http.HttpMethod]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> windows_web_http.HttpMethod: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[windows_web_http.HttpMethod]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: windows_web_http.HttpMethod) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[windows_web_http.HttpMethod]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpMethodHeaderValueCollection: ...
    def append(self, value: windows_web_http.HttpMethod, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[windows_web_http.HttpMethod]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> windows_web_http.HttpMethod: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[windows_web_http.HttpMethod], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[windows_web_http.HttpMethod]: ...
    def index_of(self, value: windows_web_http.HttpMethod, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: windows_web_http.HttpMethod, /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[windows_web_http.HttpMethod], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: windows_web_http.HttpMethod, /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpNameValueHeaderValue_Static(type):
    def parse(cls, input: str, /) -> HttpNameValueHeaderValue: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, HttpNameValueHeaderValue]: ...

@typing.final
class HttpNameValueHeaderValue(winrt.system.Object, windows_foundation.ImplementsIStringable, metaclass=HttpNameValueHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpNameValueHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], name: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], name: str, value: str) -> Self: ...
    def to_string(self) -> str: ...
    @_property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: str) -> None: ...
    @_property
    def name(self) -> str: ...

@typing.final
class HttpProductHeaderValue_Static(type):
    def parse(cls, input: str, /) -> HttpProductHeaderValue: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, HttpProductHeaderValue]: ...

@typing.final
class HttpProductHeaderValue(winrt.system.Object, windows_foundation.ImplementsIStringable, metaclass=HttpProductHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpProductHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], product_name: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], product_name: str, product_version: str) -> Self: ...
    def to_string(self) -> str: ...
    @_property
    def name(self) -> str: ...
    @_property
    def version(self) -> str: ...

@typing.final
class HttpProductInfoHeaderValue_Static(type):
    def parse(cls, input: str, /) -> HttpProductInfoHeaderValue: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, HttpProductInfoHeaderValue]: ...

@typing.final
class HttpProductInfoHeaderValue(winrt.system.Object, windows_foundation.ImplementsIStringable, metaclass=HttpProductInfoHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpProductInfoHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], product_comment: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], product_name: str, product_version: str) -> Self: ...
    def to_string(self) -> str: ...
    @_property
    def comment(self) -> str: ...
    @_property
    def product(self) -> HttpProductHeaderValue: ...

@typing.final
class HttpProductInfoHeaderValueCollection(winrt.system.Object, windows_foundation.ImplementsIStringable, winrt._winrt.MutableSequence[HttpProductInfoHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[HttpProductInfoHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpProductInfoHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpProductInfoHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpProductInfoHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpProductInfoHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpProductInfoHeaderValueCollection: ...
    def append(self, value: HttpProductInfoHeaderValue, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[HttpProductInfoHeaderValue]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> HttpProductInfoHeaderValue: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[HttpProductInfoHeaderValue], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[HttpProductInfoHeaderValue]: ...
    def index_of(self, value: HttpProductInfoHeaderValue, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: HttpProductInfoHeaderValue, /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[HttpProductInfoHeaderValue], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: HttpProductInfoHeaderValue, /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpRequestHeaderCollection(winrt.system.Object, windows_foundation.ImplementsIStringable, winrt._winrt.MutableMapping[str, str]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool: ...
    def __getitem__(self, key: str) -> str: ...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpRequestHeaderCollection: ...
    def append(self, name: str, value: str, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[str, str]]: ...
    def get_view(self) -> typing.Mapping[str, str]: ...
    def has_key(self, key: str, /) -> bool: ...
    def insert(self, key: str, value: str, /) -> bool: ...
    def lookup(self, key: str, /) -> str: ...
    def remove(self, key: str, /) -> None: ...
    def to_string(self) -> str: ...
    def try_append_without_validation(self, name: str, value: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...
    @_property
    def referer(self) -> windows_foundation.Uri: ...
    @referer.setter
    def referer(self, value: windows_foundation.Uri) -> None: ...
    @_property
    def proxy_authorization(self) -> HttpCredentialsHeaderValue: ...
    @proxy_authorization.setter
    def proxy_authorization(self, value: HttpCredentialsHeaderValue) -> None: ...
    @_property
    def max_forwards(self) -> typing.Optional[winrt.system.UInt32]: ...
    @max_forwards.setter
    def max_forwards(self, value: typing.Optional[winrt.system.UInt32]) -> None: ...
    @_property
    def if_unmodified_since(self) -> typing.Optional[datetime.datetime]: ...
    @if_unmodified_since.setter
    def if_unmodified_since(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @_property
    def if_modified_since(self) -> typing.Optional[datetime.datetime]: ...
    @if_modified_since.setter
    def if_modified_since(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @_property
    def host(self) -> windows_networking.HostName: ...
    @host.setter
    def host(self, value: windows_networking.HostName) -> None: ...
    @_property
    def from_(self) -> str: ...
    @from_.setter
    def from_(self, value: str) -> None: ...
    @_property
    def date(self) -> typing.Optional[datetime.datetime]: ...
    @date.setter
    def date(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @_property
    def authorization(self) -> HttpCredentialsHeaderValue: ...
    @authorization.setter
    def authorization(self, value: HttpCredentialsHeaderValue) -> None: ...
    @_property
    def accept(self) -> HttpMediaTypeWithQualityHeaderValueCollection: ...
    @_property
    def accept_encoding(self) -> HttpContentCodingWithQualityHeaderValueCollection: ...
    @_property
    def accept_language(self) -> HttpLanguageRangeWithQualityHeaderValueCollection: ...
    @_property
    def cache_control(self) -> HttpCacheDirectiveHeaderValueCollection: ...
    @_property
    def connection(self) -> HttpConnectionOptionHeaderValueCollection: ...
    @_property
    def cookie(self) -> HttpCookiePairHeaderValueCollection: ...
    @_property
    def expect(self) -> HttpExpectationHeaderValueCollection: ...
    @_property
    def transfer_encoding(self) -> HttpTransferCodingHeaderValueCollection: ...
    @_property
    def user_agent(self) -> HttpProductInfoHeaderValueCollection: ...

@typing.final
class HttpResponseHeaderCollection(winrt.system.Object, windows_foundation.ImplementsIStringable, winrt._winrt.MutableMapping[str, str]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool: ...
    def __getitem__(self, key: str) -> str: ...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpResponseHeaderCollection: ...
    def append(self, name: str, value: str, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[windows_foundation_collections.IKeyValuePair[str, str]]: ...
    def get_view(self) -> typing.Mapping[str, str]: ...
    def has_key(self, key: str, /) -> bool: ...
    def insert(self, key: str, value: str, /) -> bool: ...
    def lookup(self, key: str, /) -> str: ...
    def remove(self, key: str, /) -> None: ...
    def to_string(self) -> str: ...
    def try_append_without_validation(self, name: str, value: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...
    @_property
    def retry_after(self) -> HttpDateOrDeltaHeaderValue: ...
    @retry_after.setter
    def retry_after(self, value: HttpDateOrDeltaHeaderValue) -> None: ...
    @_property
    def location(self) -> windows_foundation.Uri: ...
    @location.setter
    def location(self, value: windows_foundation.Uri) -> None: ...
    @_property
    def date(self) -> typing.Optional[datetime.datetime]: ...
    @date.setter
    def date(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @_property
    def age(self) -> typing.Optional[datetime.timedelta]: ...
    @age.setter
    def age(self, value: typing.Optional[datetime.timedelta]) -> None: ...
    @_property
    def allow(self) -> HttpMethodHeaderValueCollection: ...
    @_property
    def cache_control(self) -> HttpCacheDirectiveHeaderValueCollection: ...
    @_property
    def connection(self) -> HttpConnectionOptionHeaderValueCollection: ...
    @_property
    def proxy_authenticate(self) -> HttpChallengeHeaderValueCollection: ...
    @_property
    def transfer_encoding(self) -> HttpTransferCodingHeaderValueCollection: ...
    @_property
    def www_authenticate(self) -> HttpChallengeHeaderValueCollection: ...

@typing.final
class HttpTransferCodingHeaderValue_Static(type):
    def parse(cls, input: str, /) -> HttpTransferCodingHeaderValue: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, HttpTransferCodingHeaderValue]: ...

@typing.final
class HttpTransferCodingHeaderValue(winrt.system.Object, windows_foundation.ImplementsIStringable, metaclass=HttpTransferCodingHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpTransferCodingHeaderValue: ...
    def __new__(cls: typing.Type[Self], input: str) -> Self: ...
    def to_string(self) -> str: ...
    @_property
    def parameters(self) -> typing.MutableSequence[HttpNameValueHeaderValue]: ...
    @_property
    def value(self) -> str: ...

@typing.final
class HttpTransferCodingHeaderValueCollection(winrt.system.Object, windows_foundation.ImplementsIStringable, winrt._winrt.MutableSequence[HttpTransferCodingHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[HttpTransferCodingHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpTransferCodingHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpTransferCodingHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpTransferCodingHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpTransferCodingHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpTransferCodingHeaderValueCollection: ...
    def append(self, value: HttpTransferCodingHeaderValue, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> windows_foundation_collections.IIterator[HttpTransferCodingHeaderValue]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> HttpTransferCodingHeaderValue: ...
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[HttpTransferCodingHeaderValue], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Sequence[HttpTransferCodingHeaderValue]: ...
    def index_of(self, value: HttpTransferCodingHeaderValue, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: HttpTransferCodingHeaderValue, /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Union[winrt.system.Array[HttpTransferCodingHeaderValue], winrt.system.ReadableBuffer], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: HttpTransferCodingHeaderValue, /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

