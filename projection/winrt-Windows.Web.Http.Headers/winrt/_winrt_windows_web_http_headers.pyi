# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.globalization
import winrt.windows.networking
import winrt.windows.storage.streams
import winrt.windows.web.http

Self = typing.TypeVar('Self')

@typing.final
class HttpCacheDirectiveHeaderValueCollection(winrt.system.Object, winrt._winrt.MutableSequence[HttpNameValueHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[HttpNameValueHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpNameValueHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpNameValueHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpNameValueHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpNameValueHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpCacheDirectiveHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpNameValueHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpNameValueHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpNameValueHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpNameValueHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpNameValueHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpNameValueHeaderValue], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpNameValueHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpNameValueHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpNameValueHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...
    @_property
    def shared_max_age(self) -> typing.Optional[typing.Optional[datetime.timedelta]]: ...
    @shared_max_age.setter
    def shared_max_age(self, value: typing.Optional[typing.Optional[datetime.timedelta]]) -> None: ...
    @_property
    def min_fresh(self) -> typing.Optional[typing.Optional[datetime.timedelta]]: ...
    @min_fresh.setter
    def min_fresh(self, value: typing.Optional[typing.Optional[datetime.timedelta]]) -> None: ...
    @_property
    def max_stale(self) -> typing.Optional[typing.Optional[datetime.timedelta]]: ...
    @max_stale.setter
    def max_stale(self, value: typing.Optional[typing.Optional[datetime.timedelta]]) -> None: ...
    @_property
    def max_age(self) -> typing.Optional[typing.Optional[datetime.timedelta]]: ...
    @max_age.setter
    def max_age(self, value: typing.Optional[typing.Optional[datetime.timedelta]]) -> None: ...

@typing.final
class HttpChallengeHeaderValue_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[HttpChallengeHeaderValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[HttpChallengeHeaderValue]]: ...

@typing.final
class HttpChallengeHeaderValue(winrt.system.Object, metaclass=HttpChallengeHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpChallengeHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpChallengeHeaderValue], scheme: str) -> HttpChallengeHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpChallengeHeaderValue], scheme: str, token: str) -> HttpChallengeHeaderValue:...
    def to_string(self) -> str: ...
    @_property
    def parameters(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]: ...
    @_property
    def scheme(self) -> str: ...
    @_property
    def token(self) -> str: ...

@typing.final
class HttpChallengeHeaderValueCollection(winrt.system.Object, winrt._winrt.MutableSequence[HttpChallengeHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[HttpChallengeHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpChallengeHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpChallengeHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpChallengeHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpChallengeHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpChallengeHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpChallengeHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpChallengeHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpChallengeHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpChallengeHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpChallengeHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpChallengeHeaderValue], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpChallengeHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpChallengeHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpChallengeHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpConnectionOptionHeaderValue_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[HttpConnectionOptionHeaderValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[HttpConnectionOptionHeaderValue]]: ...

@typing.final
class HttpConnectionOptionHeaderValue(winrt.system.Object, metaclass=HttpConnectionOptionHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpConnectionOptionHeaderValue: ...
    def __new__(cls: typing.Type[HttpConnectionOptionHeaderValue], token: str) -> HttpConnectionOptionHeaderValue:...
    def to_string(self) -> str: ...
    @_property
    def token(self) -> str: ...

@typing.final
class HttpConnectionOptionHeaderValueCollection(winrt.system.Object, winrt._winrt.MutableSequence[HttpConnectionOptionHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[HttpConnectionOptionHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpConnectionOptionHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpConnectionOptionHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpConnectionOptionHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpConnectionOptionHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpConnectionOptionHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpConnectionOptionHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpConnectionOptionHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpConnectionOptionHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpConnectionOptionHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpConnectionOptionHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpConnectionOptionHeaderValue], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpConnectionOptionHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpConnectionOptionHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpConnectionOptionHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpContentCodingHeaderValue_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[HttpContentCodingHeaderValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[HttpContentCodingHeaderValue]]: ...

@typing.final
class HttpContentCodingHeaderValue(winrt.system.Object, metaclass=HttpContentCodingHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentCodingHeaderValue: ...
    def __new__(cls: typing.Type[HttpContentCodingHeaderValue], content_coding: str) -> HttpContentCodingHeaderValue:...
    def to_string(self) -> str: ...
    @_property
    def content_coding(self) -> str: ...

@typing.final
class HttpContentCodingHeaderValueCollection(winrt.system.Object, winrt._winrt.MutableSequence[HttpContentCodingHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[HttpContentCodingHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpContentCodingHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpContentCodingHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpContentCodingHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpContentCodingHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentCodingHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpContentCodingHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpContentCodingHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpContentCodingHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpContentCodingHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpContentCodingHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpContentCodingHeaderValue], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpContentCodingHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpContentCodingHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpContentCodingHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpContentCodingWithQualityHeaderValue_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[HttpContentCodingWithQualityHeaderValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[HttpContentCodingWithQualityHeaderValue]]: ...

@typing.final
class HttpContentCodingWithQualityHeaderValue(winrt.system.Object, metaclass=HttpContentCodingWithQualityHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentCodingWithQualityHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpContentCodingWithQualityHeaderValue], content_coding: str) -> HttpContentCodingWithQualityHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpContentCodingWithQualityHeaderValue], content_coding: str, quality: winrt.system.Double) -> HttpContentCodingWithQualityHeaderValue:...
    def to_string(self) -> str: ...
    @_property
    def content_coding(self) -> str: ...
    @_property
    def quality(self) -> typing.Optional[typing.Optional[winrt.system.Double]]: ...

@typing.final
class HttpContentCodingWithQualityHeaderValueCollection(winrt.system.Object, winrt._winrt.MutableSequence[HttpContentCodingWithQualityHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[HttpContentCodingWithQualityHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpContentCodingWithQualityHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpContentCodingWithQualityHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpContentCodingWithQualityHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpContentCodingWithQualityHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentCodingWithQualityHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpContentCodingWithQualityHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpContentCodingWithQualityHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpContentCodingWithQualityHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpContentCodingWithQualityHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpContentCodingWithQualityHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpContentCodingWithQualityHeaderValue], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpContentCodingWithQualityHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpContentCodingWithQualityHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpContentCodingWithQualityHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpContentDispositionHeaderValue_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[HttpContentDispositionHeaderValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[HttpContentDispositionHeaderValue]]: ...

@typing.final
class HttpContentDispositionHeaderValue(winrt.system.Object, metaclass=HttpContentDispositionHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentDispositionHeaderValue: ...
    def __new__(cls: typing.Type[HttpContentDispositionHeaderValue], disposition_type: str) -> HttpContentDispositionHeaderValue:...
    def to_string(self) -> str: ...
    @_property
    def size(self) -> typing.Optional[typing.Optional[winrt.system.UInt64]]: ...
    @size.setter
    def size(self, value: typing.Optional[typing.Optional[winrt.system.UInt64]]) -> None: ...
    @_property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @_property
    def file_name_star(self) -> str: ...
    @file_name_star.setter
    def file_name_star(self, value: str) -> None: ...
    @_property
    def file_name(self) -> str: ...
    @file_name.setter
    def file_name(self, value: str) -> None: ...
    @_property
    def disposition_type(self) -> str: ...
    @disposition_type.setter
    def disposition_type(self, value: str) -> None: ...
    @_property
    def parameters(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]: ...

@typing.final
class HttpContentHeaderCollection(winrt.system.Object, winrt._winrt.MutableMapping[str, str]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __getitem__(self, key: str) -> str: ...
    def __delitem__(self, key: str) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentHeaderCollection: ...
    def __new__(cls: typing.Type[HttpContentHeaderCollection]) -> HttpContentHeaderCollection:...
    def append(self, name: str, value: str, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, str]]]: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]: ...
    def has_key(self, key: str, /) -> bool: ...
    def insert(self, key: str, value: str, /) -> bool: ...
    def lookup(self, key: str, /) -> str: ...
    def remove(self, key: str, /) -> None: ...
    def to_string(self) -> str: ...
    def try_append_without_validation(self, name: str, value: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...
    @_property
    def last_modified(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @last_modified.setter
    def last_modified(self, value: typing.Optional[typing.Optional[datetime.datetime]]) -> None: ...
    @_property
    def expires(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @expires.setter
    def expires(self, value: typing.Optional[typing.Optional[datetime.datetime]]) -> None: ...
    @_property
    def content_type(self) -> typing.Optional[HttpMediaTypeHeaderValue]: ...
    @content_type.setter
    def content_type(self, value: typing.Optional[HttpMediaTypeHeaderValue]) -> None: ...
    @_property
    def content_range(self) -> typing.Optional[HttpContentRangeHeaderValue]: ...
    @content_range.setter
    def content_range(self, value: typing.Optional[HttpContentRangeHeaderValue]) -> None: ...
    @_property
    def content_m_d5(self) -> typing.Optional[winrt.windows.storage.streams.IBuffer]: ...
    @content_m_d5.setter
    def content_m_d5(self, value: typing.Optional[winrt.windows.storage.streams.IBuffer]) -> None: ...
    @_property
    def content_location(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @content_location.setter
    def content_location(self, value: typing.Optional[winrt.windows.foundation.Uri]) -> None: ...
    @_property
    def content_length(self) -> typing.Optional[typing.Optional[winrt.system.UInt64]]: ...
    @content_length.setter
    def content_length(self, value: typing.Optional[typing.Optional[winrt.system.UInt64]]) -> None: ...
    @_property
    def content_disposition(self) -> typing.Optional[HttpContentDispositionHeaderValue]: ...
    @content_disposition.setter
    def content_disposition(self, value: typing.Optional[HttpContentDispositionHeaderValue]) -> None: ...
    @_property
    def content_encoding(self) -> typing.Optional[HttpContentCodingHeaderValueCollection]: ...
    @_property
    def content_language(self) -> typing.Optional[HttpLanguageHeaderValueCollection]: ...

@typing.final
class HttpContentRangeHeaderValue_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[HttpContentRangeHeaderValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[HttpContentRangeHeaderValue]]: ...

@typing.final
class HttpContentRangeHeaderValue(winrt.system.Object, metaclass=HttpContentRangeHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpContentRangeHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpContentRangeHeaderValue], length: winrt.system.UInt64) -> HttpContentRangeHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpContentRangeHeaderValue], from_: winrt.system.UInt64, to: winrt.system.UInt64) -> HttpContentRangeHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpContentRangeHeaderValue], from_: winrt.system.UInt64, to: winrt.system.UInt64, length: winrt.system.UInt64) -> HttpContentRangeHeaderValue:...
    def to_string(self) -> str: ...
    @_property
    def unit(self) -> str: ...
    @unit.setter
    def unit(self, value: str) -> None: ...
    @_property
    def first_byte_position(self) -> typing.Optional[typing.Optional[winrt.system.UInt64]]: ...
    @_property
    def last_byte_position(self) -> typing.Optional[typing.Optional[winrt.system.UInt64]]: ...
    @_property
    def length(self) -> typing.Optional[typing.Optional[winrt.system.UInt64]]: ...

@typing.final
class HttpCookiePairHeaderValue_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[HttpCookiePairHeaderValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[HttpCookiePairHeaderValue]]: ...

@typing.final
class HttpCookiePairHeaderValue(winrt.system.Object, metaclass=HttpCookiePairHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpCookiePairHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpCookiePairHeaderValue], name: str) -> HttpCookiePairHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpCookiePairHeaderValue], name: str, value: str) -> HttpCookiePairHeaderValue:...
    def to_string(self) -> str: ...
    @_property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: str) -> None: ...
    @_property
    def name(self) -> str: ...

@typing.final
class HttpCookiePairHeaderValueCollection(winrt.system.Object, winrt._winrt.MutableSequence[HttpCookiePairHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[HttpCookiePairHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpCookiePairHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpCookiePairHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpCookiePairHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpCookiePairHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpCookiePairHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpCookiePairHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpCookiePairHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpCookiePairHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpCookiePairHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpCookiePairHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpCookiePairHeaderValue], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpCookiePairHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpCookiePairHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpCookiePairHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpCredentialsHeaderValue_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[HttpCredentialsHeaderValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[HttpCredentialsHeaderValue]]: ...

@typing.final
class HttpCredentialsHeaderValue(winrt.system.Object, metaclass=HttpCredentialsHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpCredentialsHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpCredentialsHeaderValue], scheme: str) -> HttpCredentialsHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpCredentialsHeaderValue], scheme: str, token: str) -> HttpCredentialsHeaderValue:...
    def to_string(self) -> str: ...
    @_property
    def parameters(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]: ...
    @_property
    def scheme(self) -> str: ...
    @_property
    def token(self) -> str: ...

@typing.final
class HttpDateOrDeltaHeaderValue_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[HttpDateOrDeltaHeaderValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[HttpDateOrDeltaHeaderValue]]: ...

@typing.final
class HttpDateOrDeltaHeaderValue(winrt.system.Object, metaclass=HttpDateOrDeltaHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpDateOrDeltaHeaderValue: ...
    def to_string(self) -> str: ...
    @_property
    def date(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @_property
    def delta(self) -> typing.Optional[typing.Optional[datetime.timedelta]]: ...

@typing.final
class HttpExpectationHeaderValue_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[HttpExpectationHeaderValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[HttpExpectationHeaderValue]]: ...

@typing.final
class HttpExpectationHeaderValue(winrt.system.Object, metaclass=HttpExpectationHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpExpectationHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpExpectationHeaderValue], name: str) -> HttpExpectationHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpExpectationHeaderValue], name: str, value: str) -> HttpExpectationHeaderValue:...
    def to_string(self) -> str: ...
    @_property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: str) -> None: ...
    @_property
    def name(self) -> str: ...
    @_property
    def parameters(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]: ...

@typing.final
class HttpExpectationHeaderValueCollection(winrt.system.Object, winrt._winrt.MutableSequence[HttpExpectationHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[HttpExpectationHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpExpectationHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpExpectationHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpExpectationHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpExpectationHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpExpectationHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpExpectationHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpExpectationHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpExpectationHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpExpectationHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpExpectationHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpExpectationHeaderValue], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpExpectationHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpExpectationHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpExpectationHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpLanguageHeaderValueCollection(winrt.system.Object, winrt._winrt.MutableSequence[winrt.windows.globalization.Language]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[winrt.windows.globalization.Language]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> winrt.windows.globalization.Language: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[winrt.windows.globalization.Language]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: winrt.windows.globalization.Language) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[winrt.windows.globalization.Language]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpLanguageHeaderValueCollection: ...
    def append(self, value: typing.Optional[winrt.windows.globalization.Language], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.globalization.Language]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[winrt.windows.globalization.Language]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[winrt.windows.globalization.Language], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.globalization.Language]]: ...
    def index_of(self, value: typing.Optional[winrt.windows.globalization.Language], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[winrt.windows.globalization.Language], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[winrt.windows.globalization.Language], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[winrt.windows.globalization.Language], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpLanguageRangeWithQualityHeaderValue_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[HttpLanguageRangeWithQualityHeaderValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[HttpLanguageRangeWithQualityHeaderValue]]: ...

@typing.final
class HttpLanguageRangeWithQualityHeaderValue(winrt.system.Object, metaclass=HttpLanguageRangeWithQualityHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpLanguageRangeWithQualityHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpLanguageRangeWithQualityHeaderValue], language_range: str) -> HttpLanguageRangeWithQualityHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpLanguageRangeWithQualityHeaderValue], language_range: str, quality: winrt.system.Double) -> HttpLanguageRangeWithQualityHeaderValue:...
    def to_string(self) -> str: ...
    @_property
    def language_range(self) -> str: ...
    @_property
    def quality(self) -> typing.Optional[typing.Optional[winrt.system.Double]]: ...

@typing.final
class HttpLanguageRangeWithQualityHeaderValueCollection(winrt.system.Object, winrt._winrt.MutableSequence[HttpLanguageRangeWithQualityHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[HttpLanguageRangeWithQualityHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpLanguageRangeWithQualityHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpLanguageRangeWithQualityHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpLanguageRangeWithQualityHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpLanguageRangeWithQualityHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpLanguageRangeWithQualityHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpLanguageRangeWithQualityHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpLanguageRangeWithQualityHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpLanguageRangeWithQualityHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpLanguageRangeWithQualityHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpLanguageRangeWithQualityHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpLanguageRangeWithQualityHeaderValue], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpLanguageRangeWithQualityHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpLanguageRangeWithQualityHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpLanguageRangeWithQualityHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpMediaTypeHeaderValue_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[HttpMediaTypeHeaderValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[HttpMediaTypeHeaderValue]]: ...

@typing.final
class HttpMediaTypeHeaderValue(winrt.system.Object, metaclass=HttpMediaTypeHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpMediaTypeHeaderValue: ...
    def __new__(cls: typing.Type[HttpMediaTypeHeaderValue], media_type: str) -> HttpMediaTypeHeaderValue:...
    def to_string(self) -> str: ...
    @_property
    def media_type(self) -> str: ...
    @media_type.setter
    def media_type(self, value: str) -> None: ...
    @_property
    def char_set(self) -> str: ...
    @char_set.setter
    def char_set(self, value: str) -> None: ...
    @_property
    def parameters(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]: ...

@typing.final
class HttpMediaTypeWithQualityHeaderValue_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[HttpMediaTypeWithQualityHeaderValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[HttpMediaTypeWithQualityHeaderValue]]: ...

@typing.final
class HttpMediaTypeWithQualityHeaderValue(winrt.system.Object, metaclass=HttpMediaTypeWithQualityHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpMediaTypeWithQualityHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpMediaTypeWithQualityHeaderValue], media_type: str) -> HttpMediaTypeWithQualityHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpMediaTypeWithQualityHeaderValue], media_type: str, quality: winrt.system.Double) -> HttpMediaTypeWithQualityHeaderValue:...
    def to_string(self) -> str: ...
    @_property
    def quality(self) -> typing.Optional[typing.Optional[winrt.system.Double]]: ...
    @quality.setter
    def quality(self, value: typing.Optional[typing.Optional[winrt.system.Double]]) -> None: ...
    @_property
    def media_type(self) -> str: ...
    @media_type.setter
    def media_type(self, value: str) -> None: ...
    @_property
    def char_set(self) -> str: ...
    @char_set.setter
    def char_set(self, value: str) -> None: ...
    @_property
    def parameters(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]: ...

@typing.final
class HttpMediaTypeWithQualityHeaderValueCollection(winrt.system.Object, winrt._winrt.MutableSequence[HttpMediaTypeWithQualityHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[HttpMediaTypeWithQualityHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpMediaTypeWithQualityHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpMediaTypeWithQualityHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpMediaTypeWithQualityHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpMediaTypeWithQualityHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpMediaTypeWithQualityHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpMediaTypeWithQualityHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpMediaTypeWithQualityHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpMediaTypeWithQualityHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpMediaTypeWithQualityHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpMediaTypeWithQualityHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpMediaTypeWithQualityHeaderValue], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpMediaTypeWithQualityHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpMediaTypeWithQualityHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpMediaTypeWithQualityHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpMethodHeaderValueCollection(winrt.system.Object, winrt._winrt.MutableSequence[winrt.windows.web.http.HttpMethod]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[winrt.windows.web.http.HttpMethod]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> winrt.windows.web.http.HttpMethod: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[winrt.windows.web.http.HttpMethod]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: winrt.windows.web.http.HttpMethod) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[winrt.windows.web.http.HttpMethod]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpMethodHeaderValueCollection: ...
    def append(self, value: typing.Optional[winrt.windows.web.http.HttpMethod], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.web.http.HttpMethod]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[winrt.windows.web.http.HttpMethod]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[winrt.windows.web.http.HttpMethod], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.web.http.HttpMethod]]: ...
    def index_of(self, value: typing.Optional[winrt.windows.web.http.HttpMethod], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[winrt.windows.web.http.HttpMethod], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[winrt.windows.web.http.HttpMethod], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[winrt.windows.web.http.HttpMethod], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpNameValueHeaderValue_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[HttpNameValueHeaderValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[HttpNameValueHeaderValue]]: ...

@typing.final
class HttpNameValueHeaderValue(winrt.system.Object, metaclass=HttpNameValueHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpNameValueHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpNameValueHeaderValue], name: str) -> HttpNameValueHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpNameValueHeaderValue], name: str, value: str) -> HttpNameValueHeaderValue:...
    def to_string(self) -> str: ...
    @_property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: str) -> None: ...
    @_property
    def name(self) -> str: ...

@typing.final
class HttpProductHeaderValue_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[HttpProductHeaderValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[HttpProductHeaderValue]]: ...

@typing.final
class HttpProductHeaderValue(winrt.system.Object, metaclass=HttpProductHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpProductHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpProductHeaderValue], product_name: str) -> HttpProductHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpProductHeaderValue], product_name: str, product_version: str) -> HttpProductHeaderValue:...
    def to_string(self) -> str: ...
    @_property
    def name(self) -> str: ...
    @_property
    def version(self) -> str: ...

@typing.final
class HttpProductInfoHeaderValue_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[HttpProductInfoHeaderValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[HttpProductInfoHeaderValue]]: ...

@typing.final
class HttpProductInfoHeaderValue(winrt.system.Object, metaclass=HttpProductInfoHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpProductInfoHeaderValue: ...
    @typing.overload
    def __new__(cls: typing.Type[HttpProductInfoHeaderValue], product_comment: str) -> HttpProductInfoHeaderValue:...
    @typing.overload
    def __new__(cls: typing.Type[HttpProductInfoHeaderValue], product_name: str, product_version: str) -> HttpProductInfoHeaderValue:...
    def to_string(self) -> str: ...
    @_property
    def comment(self) -> str: ...
    @_property
    def product(self) -> typing.Optional[HttpProductHeaderValue]: ...

@typing.final
class HttpProductInfoHeaderValueCollection(winrt.system.Object, winrt._winrt.MutableSequence[HttpProductInfoHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[HttpProductInfoHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpProductInfoHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpProductInfoHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpProductInfoHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpProductInfoHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpProductInfoHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpProductInfoHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpProductInfoHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpProductInfoHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpProductInfoHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpProductInfoHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpProductInfoHeaderValue], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpProductInfoHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpProductInfoHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpProductInfoHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class HttpRequestHeaderCollection(winrt.system.Object, winrt._winrt.MutableMapping[str, str]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __getitem__(self, key: str) -> str: ...
    def __delitem__(self, key: str) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpRequestHeaderCollection: ...
    def append(self, name: str, value: str, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, str]]]: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]: ...
    def has_key(self, key: str, /) -> bool: ...
    def insert(self, key: str, value: str, /) -> bool: ...
    def lookup(self, key: str, /) -> str: ...
    def remove(self, key: str, /) -> None: ...
    def to_string(self) -> str: ...
    def try_append_without_validation(self, name: str, value: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...
    @_property
    def referer(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @referer.setter
    def referer(self, value: typing.Optional[winrt.windows.foundation.Uri]) -> None: ...
    @_property
    def proxy_authorization(self) -> typing.Optional[HttpCredentialsHeaderValue]: ...
    @proxy_authorization.setter
    def proxy_authorization(self, value: typing.Optional[HttpCredentialsHeaderValue]) -> None: ...
    @_property
    def max_forwards(self) -> typing.Optional[typing.Optional[winrt.system.UInt32]]: ...
    @max_forwards.setter
    def max_forwards(self, value: typing.Optional[typing.Optional[winrt.system.UInt32]]) -> None: ...
    @_property
    def if_unmodified_since(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @if_unmodified_since.setter
    def if_unmodified_since(self, value: typing.Optional[typing.Optional[datetime.datetime]]) -> None: ...
    @_property
    def if_modified_since(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @if_modified_since.setter
    def if_modified_since(self, value: typing.Optional[typing.Optional[datetime.datetime]]) -> None: ...
    @_property
    def host(self) -> typing.Optional[winrt.windows.networking.HostName]: ...
    @host.setter
    def host(self, value: typing.Optional[winrt.windows.networking.HostName]) -> None: ...
    @_property
    def from_(self) -> str: ...
    @from_.setter
    def from_(self, value: str) -> None: ...
    @_property
    def date(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @date.setter
    def date(self, value: typing.Optional[typing.Optional[datetime.datetime]]) -> None: ...
    @_property
    def authorization(self) -> typing.Optional[HttpCredentialsHeaderValue]: ...
    @authorization.setter
    def authorization(self, value: typing.Optional[HttpCredentialsHeaderValue]) -> None: ...
    @_property
    def accept(self) -> typing.Optional[HttpMediaTypeWithQualityHeaderValueCollection]: ...
    @_property
    def accept_encoding(self) -> typing.Optional[HttpContentCodingWithQualityHeaderValueCollection]: ...
    @_property
    def accept_language(self) -> typing.Optional[HttpLanguageRangeWithQualityHeaderValueCollection]: ...
    @_property
    def cache_control(self) -> typing.Optional[HttpCacheDirectiveHeaderValueCollection]: ...
    @_property
    def connection(self) -> typing.Optional[HttpConnectionOptionHeaderValueCollection]: ...
    @_property
    def cookie(self) -> typing.Optional[HttpCookiePairHeaderValueCollection]: ...
    @_property
    def expect(self) -> typing.Optional[HttpExpectationHeaderValueCollection]: ...
    @_property
    def transfer_encoding(self) -> typing.Optional[HttpTransferCodingHeaderValueCollection]: ...
    @_property
    def user_agent(self) -> typing.Optional[HttpProductInfoHeaderValueCollection]: ...

@typing.final
class HttpResponseHeaderCollection(winrt.system.Object, winrt._winrt.MutableMapping[str, str]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __contains__(self, key: object) -> bool:...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __getitem__(self, key: str) -> str: ...
    def __delitem__(self, key: str) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpResponseHeaderCollection: ...
    def append(self, name: str, value: str, /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[str, str]]]: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, str]]: ...
    def has_key(self, key: str, /) -> bool: ...
    def insert(self, key: str, value: str, /) -> bool: ...
    def lookup(self, key: str, /) -> str: ...
    def remove(self, key: str, /) -> None: ...
    def to_string(self) -> str: ...
    def try_append_without_validation(self, name: str, value: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...
    @_property
    def retry_after(self) -> typing.Optional[HttpDateOrDeltaHeaderValue]: ...
    @retry_after.setter
    def retry_after(self, value: typing.Optional[HttpDateOrDeltaHeaderValue]) -> None: ...
    @_property
    def location(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @location.setter
    def location(self, value: typing.Optional[winrt.windows.foundation.Uri]) -> None: ...
    @_property
    def date(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @date.setter
    def date(self, value: typing.Optional[typing.Optional[datetime.datetime]]) -> None: ...
    @_property
    def age(self) -> typing.Optional[typing.Optional[datetime.timedelta]]: ...
    @age.setter
    def age(self, value: typing.Optional[typing.Optional[datetime.timedelta]]) -> None: ...
    @_property
    def allow(self) -> typing.Optional[HttpMethodHeaderValueCollection]: ...
    @_property
    def cache_control(self) -> typing.Optional[HttpCacheDirectiveHeaderValueCollection]: ...
    @_property
    def connection(self) -> typing.Optional[HttpConnectionOptionHeaderValueCollection]: ...
    @_property
    def proxy_authenticate(self) -> typing.Optional[HttpChallengeHeaderValueCollection]: ...
    @_property
    def transfer_encoding(self) -> typing.Optional[HttpTransferCodingHeaderValueCollection]: ...
    @_property
    def www_authenticate(self) -> typing.Optional[HttpChallengeHeaderValueCollection]: ...

@typing.final
class HttpTransferCodingHeaderValue_Static(type):
    def parse(cls, input: str, /) -> typing.Optional[HttpTransferCodingHeaderValue]: ...
    def try_parse(cls, input: str, /) -> typing.Tuple[bool, typing.Optional[HttpTransferCodingHeaderValue]]: ...

@typing.final
class HttpTransferCodingHeaderValue(winrt.system.Object, metaclass=HttpTransferCodingHeaderValue_Static):
    def __str__(self) -> str: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpTransferCodingHeaderValue: ...
    def __new__(cls: typing.Type[HttpTransferCodingHeaderValue], input: str) -> HttpTransferCodingHeaderValue:...
    def to_string(self) -> str: ...
    @_property
    def parameters(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]: ...
    @_property
    def value(self) -> str: ...

@typing.final
class HttpTransferCodingHeaderValueCollection(winrt.system.Object, winrt._winrt.MutableSequence[HttpTransferCodingHeaderValue]):
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> winrt.windows.foundation.collections.IIterator[HttpTransferCodingHeaderValue]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> HttpTransferCodingHeaderValue: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[HttpTransferCodingHeaderValue]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: HttpTransferCodingHeaderValue) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[HttpTransferCodingHeaderValue]) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpTransferCodingHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpTransferCodingHeaderValue], /) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[HttpTransferCodingHeaderValue]]: ...
    def get_at(self, index: winrt.system.UInt32, /) -> typing.Optional[HttpTransferCodingHeaderValue]: ...
    def get_many(self, start_index: winrt.system.UInt32, items: winrt.system.Array[HttpTransferCodingHeaderValue], /) -> winrt.system.UInt32: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[HttpTransferCodingHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpTransferCodingHeaderValue], /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    def insert_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpTransferCodingHeaderValue], /) -> None: ...
    def parse_add(self, input: str, /) -> None: ...
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: winrt.system.Array[HttpTransferCodingHeaderValue], /) -> None: ...
    def set_at(self, index: winrt.system.UInt32, value: typing.Optional[HttpTransferCodingHeaderValue], /) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str, /) -> bool: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

