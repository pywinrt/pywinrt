# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.security.cryptography.certificates as windows_security_cryptography_certificates
import winrt.windows.storage.streams as windows_storage_streams

from winrt.windows.security.cryptography.core import Capi1KdfTargetAlgorithm, CryptographicPadding, CryptographicPrivateKeyBlobType, CryptographicPublicKeyBlobType

Self = typing.TypeVar('Self')

@typing.final
class AsymmetricAlgorithmNames_Static(type):
    @_property
    def ecdsa_p521_sha512(cls) -> str: ...
    @_property
    def dsa_sha1(cls) -> str: ...
    @_property
    def dsa_sha256(cls) -> str: ...
    @_property
    def ecdsa_p256_sha256(cls) -> str: ...
    @_property
    def ecdsa_p384_sha384(cls) -> str: ...
    @_property
    def rsa_sign_pkcs1_sha256(cls) -> str: ...
    @_property
    def rsa_oaep_sha1(cls) -> str: ...
    @_property
    def rsa_oaep_sha256(cls) -> str: ...
    @_property
    def rsa_oaep_sha384(cls) -> str: ...
    @_property
    def rsa_oaep_sha512(cls) -> str: ...
    @_property
    def rsa_pkcs1(cls) -> str: ...
    @_property
    def rsa_sign_pkcs1_sha1(cls) -> str: ...
    @_property
    def rsa_sign_pkcs1_sha384(cls) -> str: ...
    @_property
    def rsa_sign_pkcs1_sha512(cls) -> str: ...
    @_property
    def rsa_sign_pss_sha1(cls) -> str: ...
    @_property
    def rsa_sign_pss_sha256(cls) -> str: ...
    @_property
    def rsa_sign_pss_sha384(cls) -> str: ...
    @_property
    def rsa_sign_pss_sha512(cls) -> str: ...
    @_property
    def ecdsa_sha384(cls) -> str: ...
    @_property
    def ecdsa_sha512(cls) -> str: ...
    @_property
    def ecdsa_sha256(cls) -> str: ...

@typing.final
class AsymmetricAlgorithmNames(winrt.system.Object, metaclass=AsymmetricAlgorithmNames_Static):
    pass

@typing.final
class AsymmetricKeyAlgorithmProvider_Static(type):
    def open_algorithm(cls, algorithm: str, /) -> AsymmetricKeyAlgorithmProvider: ...

@typing.final
class AsymmetricKeyAlgorithmProvider(winrt.system.Object, metaclass=AsymmetricKeyAlgorithmProvider_Static):
    def create_key_pair(self, key_size: winrt.system.UInt32, /) -> CryptographicKey: ...
    def create_key_pair_with_curve_name(self, curve_name: str, /) -> CryptographicKey: ...
    def create_key_pair_with_curve_parameters(self, parameters: typing.Union[winrt.system.Array[winrt.system.UInt8], winrt.system.ReadableBuffer], /) -> CryptographicKey: ...
    def import_default_private_key_blob(self, key_blob: windows_storage_streams.ImplementsIBuffer, /) -> CryptographicKey: ...
    def import_default_public_key_blob(self, key_blob: windows_storage_streams.ImplementsIBuffer, /) -> CryptographicKey: ...
    def import_key_pair_with_blob_type(self, key_blob: windows_storage_streams.ImplementsIBuffer, blob_type: CryptographicPrivateKeyBlobType, /) -> CryptographicKey: ...
    def import_public_key_with_blob_type(self, key_blob: windows_storage_streams.ImplementsIBuffer, blob_type: CryptographicPublicKeyBlobType, /) -> CryptographicKey: ...
    @_property
    def algorithm_name(self) -> str: ...

@typing.final
class CryptographicEngine_Static(type):
    def decrypt(cls, key: CryptographicKey, data: windows_storage_streams.ImplementsIBuffer, iv: windows_storage_streams.ImplementsIBuffer, /) -> windows_storage_streams.IBuffer: ...
    def decrypt_and_authenticate(cls, key: CryptographicKey, data: windows_storage_streams.ImplementsIBuffer, nonce: windows_storage_streams.ImplementsIBuffer, authentication_tag: windows_storage_streams.ImplementsIBuffer, authenticated_data: windows_storage_streams.ImplementsIBuffer, /) -> windows_storage_streams.IBuffer: ...
    def decrypt_async(cls, key: CryptographicKey, data: windows_storage_streams.ImplementsIBuffer, iv: windows_storage_streams.ImplementsIBuffer, /) -> windows_foundation.IAsyncOperation[windows_storage_streams.IBuffer]: ...
    def derive_key_material(cls, key: CryptographicKey, parameters: KeyDerivationParameters, desired_key_size: winrt.system.UInt32, /) -> windows_storage_streams.IBuffer: ...
    def encrypt(cls, key: CryptographicKey, data: windows_storage_streams.ImplementsIBuffer, iv: windows_storage_streams.ImplementsIBuffer, /) -> windows_storage_streams.IBuffer: ...
    def encrypt_and_authenticate(cls, key: CryptographicKey, data: windows_storage_streams.ImplementsIBuffer, nonce: windows_storage_streams.ImplementsIBuffer, authenticated_data: windows_storage_streams.ImplementsIBuffer, /) -> EncryptedAndAuthenticatedData: ...
    def sign(cls, key: CryptographicKey, data: windows_storage_streams.ImplementsIBuffer, /) -> windows_storage_streams.IBuffer: ...
    def sign_async(cls, key: CryptographicKey, data: windows_storage_streams.ImplementsIBuffer, /) -> windows_foundation.IAsyncOperation[windows_storage_streams.IBuffer]: ...
    def sign_hashed_data(cls, key: CryptographicKey, data: windows_storage_streams.ImplementsIBuffer, /) -> windows_storage_streams.IBuffer: ...
    def sign_hashed_data_async(cls, key: CryptographicKey, data: windows_storage_streams.ImplementsIBuffer, /) -> windows_foundation.IAsyncOperation[windows_storage_streams.IBuffer]: ...
    def verify_signature(cls, key: CryptographicKey, data: windows_storage_streams.ImplementsIBuffer, signature: windows_storage_streams.ImplementsIBuffer, /) -> bool: ...
    def verify_signature_with_hash_input(cls, key: CryptographicKey, data: windows_storage_streams.ImplementsIBuffer, signature: windows_storage_streams.ImplementsIBuffer, /) -> bool: ...

@typing.final
class CryptographicEngine(winrt.system.Object, metaclass=CryptographicEngine_Static):
    pass

@typing.final
class CryptographicHash(winrt.system.Object):
    def append(self, data: windows_storage_streams.ImplementsIBuffer, /) -> None: ...
    def get_value_and_reset(self) -> windows_storage_streams.IBuffer: ...

@typing.final
class CryptographicKey(winrt.system.Object):
    def export_default_private_key_blob_type(self) -> windows_storage_streams.IBuffer: ...
    def export_default_public_key_blob_type(self) -> windows_storage_streams.IBuffer: ...
    def export_private_key_with_blob_type(self, blob_type: CryptographicPrivateKeyBlobType, /) -> windows_storage_streams.IBuffer: ...
    def export_public_key_with_blob_type(self, blob_type: CryptographicPublicKeyBlobType, /) -> windows_storage_streams.IBuffer: ...
    @_property
    def key_size(self) -> winrt.system.UInt32: ...

@typing.final
class EccCurveNames_Static(type):
    @_property
    def all_ecc_curve_names(cls) -> typing.Sequence[str]: ...
    @_property
    def brainpool_p160r1(cls) -> str: ...
    @_property
    def brainpool_p160t1(cls) -> str: ...
    @_property
    def brainpool_p192r1(cls) -> str: ...
    @_property
    def brainpool_p192t1(cls) -> str: ...
    @_property
    def brainpool_p224r1(cls) -> str: ...
    @_property
    def brainpool_p224t1(cls) -> str: ...
    @_property
    def brainpool_p256r1(cls) -> str: ...
    @_property
    def brainpool_p256t1(cls) -> str: ...
    @_property
    def brainpool_p320r1(cls) -> str: ...
    @_property
    def brainpool_p320t1(cls) -> str: ...
    @_property
    def brainpool_p384r1(cls) -> str: ...
    @_property
    def brainpool_p384t1(cls) -> str: ...
    @_property
    def brainpool_p512r1(cls) -> str: ...
    @_property
    def brainpool_p512t1(cls) -> str: ...
    @_property
    def curve25519(cls) -> str: ...
    @_property
    def ec192wapi(cls) -> str: ...
    @_property
    def nist_p192(cls) -> str: ...
    @_property
    def nist_p224(cls) -> str: ...
    @_property
    def nist_p256(cls) -> str: ...
    @_property
    def nist_p384(cls) -> str: ...
    @_property
    def nist_p521(cls) -> str: ...
    @_property
    def nums_p256t1(cls) -> str: ...
    @_property
    def nums_p384t1(cls) -> str: ...
    @_property
    def nums_p512t1(cls) -> str: ...
    @_property
    def sec_p160k1(cls) -> str: ...
    @_property
    def sec_p160r1(cls) -> str: ...
    @_property
    def sec_p160r2(cls) -> str: ...
    @_property
    def sec_p192k1(cls) -> str: ...
    @_property
    def sec_p192r1(cls) -> str: ...
    @_property
    def sec_p224k1(cls) -> str: ...
    @_property
    def sec_p224r1(cls) -> str: ...
    @_property
    def sec_p256k1(cls) -> str: ...
    @_property
    def sec_p256r1(cls) -> str: ...
    @_property
    def sec_p384r1(cls) -> str: ...
    @_property
    def sec_p521r1(cls) -> str: ...
    @_property
    def wtls12(cls) -> str: ...
    @_property
    def wtls7(cls) -> str: ...
    @_property
    def wtls9(cls) -> str: ...
    @_property
    def x962_p192v1(cls) -> str: ...
    @_property
    def x962_p192v2(cls) -> str: ...
    @_property
    def x962_p192v3(cls) -> str: ...
    @_property
    def x962_p239v1(cls) -> str: ...
    @_property
    def x962_p239v2(cls) -> str: ...
    @_property
    def x962_p239v3(cls) -> str: ...
    @_property
    def x962_p256v1(cls) -> str: ...

@typing.final
class EccCurveNames(winrt.system.Object, metaclass=EccCurveNames_Static):
    pass

@typing.final
class EncryptedAndAuthenticatedData(winrt.system.Object):
    @_property
    def authentication_tag(self) -> windows_storage_streams.IBuffer: ...
    @_property
    def encrypted_data(self) -> windows_storage_streams.IBuffer: ...

@typing.final
class HashAlgorithmNames_Static(type):
    @_property
    def md5(cls) -> str: ...
    @_property
    def sha1(cls) -> str: ...
    @_property
    def sha256(cls) -> str: ...
    @_property
    def sha384(cls) -> str: ...
    @_property
    def sha512(cls) -> str: ...

@typing.final
class HashAlgorithmNames(winrt.system.Object, metaclass=HashAlgorithmNames_Static):
    pass

@typing.final
class HashAlgorithmProvider_Static(type):
    def open_algorithm(cls, algorithm: str, /) -> HashAlgorithmProvider: ...

@typing.final
class HashAlgorithmProvider(winrt.system.Object, metaclass=HashAlgorithmProvider_Static):
    def create_hash(self) -> CryptographicHash: ...
    def hash_data(self, data: windows_storage_streams.ImplementsIBuffer, /) -> windows_storage_streams.IBuffer: ...
    @_property
    def algorithm_name(self) -> str: ...
    @_property
    def hash_length(self) -> winrt.system.UInt32: ...

@typing.final
class KeyDerivationAlgorithmNames_Static(type):
    @_property
    def pbkdf2_sha256(cls) -> str: ...
    @_property
    def pbkdf2_md5(cls) -> str: ...
    @_property
    def pbkdf2_sha1(cls) -> str: ...
    @_property
    def sp800108_ctr_hmac_sha512(cls) -> str: ...
    @_property
    def pbkdf2_sha384(cls) -> str: ...
    @_property
    def pbkdf2_sha512(cls) -> str: ...
    @_property
    def sp800108_ctr_hmac_md5(cls) -> str: ...
    @_property
    def sp800108_ctr_hmac_sha1(cls) -> str: ...
    @_property
    def sp800108_ctr_hmac_sha256(cls) -> str: ...
    @_property
    def sp800108_ctr_hmac_sha384(cls) -> str: ...
    @_property
    def sp80056a_concat_md5(cls) -> str: ...
    @_property
    def sp80056a_concat_sha1(cls) -> str: ...
    @_property
    def sp80056a_concat_sha256(cls) -> str: ...
    @_property
    def sp80056a_concat_sha384(cls) -> str: ...
    @_property
    def sp80056a_concat_sha512(cls) -> str: ...
    @_property
    def capi_kdf_sha1(cls) -> str: ...
    @_property
    def capi_kdf_sha256(cls) -> str: ...
    @_property
    def capi_kdf_sha384(cls) -> str: ...
    @_property
    def capi_kdf_sha512(cls) -> str: ...
    @_property
    def capi_kdf_md5(cls) -> str: ...

@typing.final
class KeyDerivationAlgorithmNames(winrt.system.Object, metaclass=KeyDerivationAlgorithmNames_Static):
    pass

@typing.final
class KeyDerivationAlgorithmProvider_Static(type):
    def open_algorithm(cls, algorithm: str, /) -> KeyDerivationAlgorithmProvider: ...

@typing.final
class KeyDerivationAlgorithmProvider(winrt.system.Object, metaclass=KeyDerivationAlgorithmProvider_Static):
    def create_key(self, key_material: windows_storage_streams.ImplementsIBuffer, /) -> CryptographicKey: ...
    @_property
    def algorithm_name(self) -> str: ...

@typing.final
class KeyDerivationParameters_Static(type):
    def build_for_capi1_kdf(cls, capi1_kdf_target_algorithm: Capi1KdfTargetAlgorithm, /) -> KeyDerivationParameters: ...
    def build_for_pbkdf2(cls, pbkdf2_salt: windows_storage_streams.ImplementsIBuffer, iteration_count: winrt.system.UInt32, /) -> KeyDerivationParameters: ...
    def build_for_s_p800108(cls, label: windows_storage_streams.ImplementsIBuffer, context: windows_storage_streams.ImplementsIBuffer, /) -> KeyDerivationParameters: ...
    def build_for_s_p80056a(cls, algorithm_id: windows_storage_streams.ImplementsIBuffer, party_u_info: windows_storage_streams.ImplementsIBuffer, party_v_info: windows_storage_streams.ImplementsIBuffer, supp_pub_info: windows_storage_streams.ImplementsIBuffer, supp_priv_info: windows_storage_streams.ImplementsIBuffer, /) -> KeyDerivationParameters: ...

@typing.final
class KeyDerivationParameters(winrt.system.Object, metaclass=KeyDerivationParameters_Static):
    @_property
    def kdf_generic_binary(self) -> windows_storage_streams.IBuffer: ...
    @kdf_generic_binary.setter
    def kdf_generic_binary(self, value: windows_storage_streams.ImplementsIBuffer) -> None: ...
    @_property
    def iteration_count(self) -> winrt.system.UInt32: ...
    @_property
    def capi1_kdf_target_algorithm(self) -> Capi1KdfTargetAlgorithm: ...
    @capi1_kdf_target_algorithm.setter
    def capi1_kdf_target_algorithm(self, value: Capi1KdfTargetAlgorithm) -> None: ...

@typing.final
class MacAlgorithmNames_Static(type):
    @_property
    def aes_cmac(cls) -> str: ...
    @_property
    def hmac_md5(cls) -> str: ...
    @_property
    def hmac_sha1(cls) -> str: ...
    @_property
    def hmac_sha256(cls) -> str: ...
    @_property
    def hmac_sha384(cls) -> str: ...
    @_property
    def hmac_sha512(cls) -> str: ...

@typing.final
class MacAlgorithmNames(winrt.system.Object, metaclass=MacAlgorithmNames_Static):
    pass

@typing.final
class MacAlgorithmProvider_Static(type):
    def open_algorithm(cls, algorithm: str, /) -> MacAlgorithmProvider: ...

@typing.final
class MacAlgorithmProvider(winrt.system.Object, metaclass=MacAlgorithmProvider_Static):
    def create_hash(self, key_material: windows_storage_streams.ImplementsIBuffer, /) -> CryptographicHash: ...
    def create_key(self, key_material: windows_storage_streams.ImplementsIBuffer, /) -> CryptographicKey: ...
    @_property
    def algorithm_name(self) -> str: ...
    @_property
    def mac_length(self) -> winrt.system.UInt32: ...

@typing.final
class PersistedKeyProvider_Static(type):
    def open_key_pair_from_certificate_async(cls, certificate: windows_security_cryptography_certificates.Certificate, hash_algorithm_name: str, padding: CryptographicPadding, /) -> windows_foundation.IAsyncOperation[CryptographicKey]: ...
    def open_public_key_from_certificate(cls, certificate: windows_security_cryptography_certificates.Certificate, hash_algorithm_name: str, padding: CryptographicPadding, /) -> CryptographicKey: ...

@typing.final
class PersistedKeyProvider(winrt.system.Object, metaclass=PersistedKeyProvider_Static):
    pass

@typing.final
class SymmetricAlgorithmNames_Static(type):
    @_property
    def aes_cbc(cls) -> str: ...
    @_property
    def aes_cbc_pkcs7(cls) -> str: ...
    @_property
    def aes_ccm(cls) -> str: ...
    @_property
    def aes_ecb(cls) -> str: ...
    @_property
    def aes_ecb_pkcs7(cls) -> str: ...
    @_property
    def aes_gcm(cls) -> str: ...
    @_property
    def des_cbc(cls) -> str: ...
    @_property
    def des_cbc_pkcs7(cls) -> str: ...
    @_property
    def des_ecb(cls) -> str: ...
    @_property
    def des_ecb_pkcs7(cls) -> str: ...
    @_property
    def rc2_cbc(cls) -> str: ...
    @_property
    def rc2_cbc_pkcs7(cls) -> str: ...
    @_property
    def rc2_ecb(cls) -> str: ...
    @_property
    def rc2_ecb_pkcs7(cls) -> str: ...
    @_property
    def rc4(cls) -> str: ...
    @_property
    def triple_des_cbc(cls) -> str: ...
    @_property
    def triple_des_cbc_pkcs7(cls) -> str: ...
    @_property
    def triple_des_ecb(cls) -> str: ...
    @_property
    def triple_des_ecb_pkcs7(cls) -> str: ...

@typing.final
class SymmetricAlgorithmNames(winrt.system.Object, metaclass=SymmetricAlgorithmNames_Static):
    pass

@typing.final
class SymmetricKeyAlgorithmProvider_Static(type):
    def open_algorithm(cls, algorithm: str, /) -> SymmetricKeyAlgorithmProvider: ...

@typing.final
class SymmetricKeyAlgorithmProvider(winrt.system.Object, metaclass=SymmetricKeyAlgorithmProvider_Static):
    def create_symmetric_key(self, key_material: windows_storage_streams.ImplementsIBuffer, /) -> CryptographicKey: ...
    @_property
    def algorithm_name(self) -> str: ...
    @_property
    def block_length(self) -> winrt.system.UInt32: ...

