# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.windows.devices.input as windows_devices_input
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.system as windows_system
import winrt.windows.ui.core as windows_ui_core
import winrt.windows.ui.input as windows_ui_input
import winrt.windows.ui.xaml as windows_ui_xaml
import winrt.windows.ui.xaml.controls as windows_ui_xaml_controls

from winrt.windows.ui.xaml.input import FocusInputDeviceKind, FocusNavigationDirection, InputScopeNameValue, KeyTipPlacementMode, KeyboardAcceleratorPlacementMode, KeyboardNavigationMode, ManipulationModes, StandardUICommandKind, XYFocusKeyboardNavigationMode, XYFocusNavigationStrategy, XYFocusNavigationStrategyOverride
from winrt.windows.ui.xaml.input import DoubleTappedEventHandler, HoldingEventHandler, KeyEventHandler, ManipulationCompletedEventHandler, ManipulationDeltaEventHandler, ManipulationInertiaStartingEventHandler, ManipulationStartedEventHandler, ManipulationStartingEventHandler, PointerEventHandler, RightTappedEventHandler, TappedEventHandler

Self = typing.TypeVar('Self')

@typing.final
class AccessKeyDisplayDismissedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...

@typing.final
class AccessKeyDisplayRequestedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs::get_PressedKeys()
    @_property
    def pressed_keys(self) -> str: ...

@typing.final
class AccessKeyInvokedEventArgs(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Boolean Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class AccessKeyManager_Static(winrt._winrt.IInspectable_Static):
    # System.Void Windows.UI.Xaml.Input.AccessKeyManager::ExitDisplayMode()
    def exit_display_mode(cls) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Input.AccessKeyManager::add_IsDisplayModeEnabledChanged(Windows.Foundation.TypedEventHandler`2<System.Object,System.Object>)
    def add_is_display_mode_enabled_changed(cls, handler: windows_foundation.TypedEventHandler[winrt.system.Object, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Input.AccessKeyManager::remove_IsDisplayModeEnabledChanged(Windows.Foundation.EventRegistrationToken)
    def remove_is_display_mode_enabled_changed(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Boolean Windows.UI.Xaml.Input.AccessKeyManager::get_IsDisplayModeEnabled()
    @_property
    def is_display_mode_enabled(cls) -> bool: ...
    # System.Boolean Windows.UI.Xaml.Input.AccessKeyManager::get_AreKeyTipsEnabled()
    @_property
    def are_key_tips_enabled(cls) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.AccessKeyManager::put_AreKeyTipsEnabled(System.Boolean)
    @are_key_tips_enabled.setter
    def are_key_tips_enabled(cls, value: bool) -> None: ...

@typing.final
class AccessKeyManager(winrt.system.Object, metaclass=AccessKeyManager_Static):
    pass

@typing.final
class CanExecuteRequestedEventArgs(winrt.system.Object):
    # System.Boolean Windows.UI.Xaml.Input.CanExecuteRequestedEventArgs::get_CanExecute()
    @_property
    def can_execute(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.CanExecuteRequestedEventArgs::put_CanExecute(System.Boolean)
    @can_execute.setter
    def can_execute(self, value: bool) -> None: ...
    # System.Object Windows.UI.Xaml.Input.CanExecuteRequestedEventArgs::get_Parameter()
    @_property
    def parameter(self) -> winrt.system.Object: ...

@typing.final
class CharacterReceivedRoutedEventArgs(windows_ui_xaml.RoutedEventArgs):
    # System.Boolean Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # System.Char Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs::get_Character()
    @_property
    def character(self) -> winrt.system.Char16: ...
    # Windows.UI.Core.CorePhysicalKeyStatus Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs::get_KeyStatus()
    @_property
    def key_status(self) -> windows_ui_core.CorePhysicalKeyStatus: ...

@typing.final
class ContextRequestedEventArgs(windows_ui_xaml.RoutedEventArgs):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Boolean Windows.UI.Xaml.Input.ContextRequestedEventArgs::TryGetPosition(Windows.UI.Xaml.UIElement,Windows.Foundation.Point&)
    def try_get_position(self, relative_to: windows_ui_xaml.UIElement, /) -> typing.Tuple[bool, windows_foundation.Point]: ...
    # System.Boolean Windows.UI.Xaml.Input.ContextRequestedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.ContextRequestedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...

@typing.final
class DoubleTappedRoutedEventArgs(windows_ui_xaml.RoutedEventArgs):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs::GetPosition(Windows.UI.Xaml.UIElement)
    def get_position(self, relative_to: windows_ui_xaml.UIElement, /) -> windows_foundation.Point: ...
    # System.Boolean Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs::get_PointerDeviceType()
    @_property
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...

@typing.final
class ExecuteRequestedEventArgs(winrt.system.Object):
    # System.Object Windows.UI.Xaml.Input.ExecuteRequestedEventArgs::get_Parameter()
    @_property
    def parameter(self) -> winrt.system.Object: ...

@typing.final
class FindNextElementOptions(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.UI.Xaml.Input.XYFocusNavigationStrategyOverride Windows.UI.Xaml.Input.FindNextElementOptions::get_XYFocusNavigationStrategyOverride()
    @_property
    def x_y_focus_navigation_strategy_override(self) -> XYFocusNavigationStrategyOverride: ...
    # System.Void Windows.UI.Xaml.Input.FindNextElementOptions::put_XYFocusNavigationStrategyOverride(Windows.UI.Xaml.Input.XYFocusNavigationStrategyOverride)
    @x_y_focus_navigation_strategy_override.setter
    def x_y_focus_navigation_strategy_override(self, value: XYFocusNavigationStrategyOverride) -> None: ...
    # Windows.UI.Xaml.DependencyObject Windows.UI.Xaml.Input.FindNextElementOptions::get_SearchRoot()
    @_property
    def search_root(self) -> windows_ui_xaml.DependencyObject: ...
    # System.Void Windows.UI.Xaml.Input.FindNextElementOptions::put_SearchRoot(Windows.UI.Xaml.DependencyObject)
    @search_root.setter
    def search_root(self, value: windows_ui_xaml.DependencyObject) -> None: ...
    # Windows.Foundation.Rect Windows.UI.Xaml.Input.FindNextElementOptions::get_HintRect()
    @_property
    def hint_rect(self) -> windows_foundation.Rect: ...
    # System.Void Windows.UI.Xaml.Input.FindNextElementOptions::put_HintRect(Windows.Foundation.Rect)
    @hint_rect.setter
    def hint_rect(self, value: windows_foundation.Rect) -> None: ...
    # Windows.Foundation.Rect Windows.UI.Xaml.Input.FindNextElementOptions::get_ExclusionRect()
    @_property
    def exclusion_rect(self) -> windows_foundation.Rect: ...
    # System.Void Windows.UI.Xaml.Input.FindNextElementOptions::put_ExclusionRect(Windows.Foundation.Rect)
    @exclusion_rect.setter
    def exclusion_rect(self, value: windows_foundation.Rect) -> None: ...

@typing.final
class FocusManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.UI.Xaml.DependencyObject Windows.UI.Xaml.Input.FocusManager::FindFirstFocusableElement(Windows.UI.Xaml.DependencyObject)
    def find_first_focusable_element(cls, search_scope: windows_ui_xaml.DependencyObject, /) -> windows_ui_xaml.DependencyObject: ...
    # Windows.UI.Xaml.DependencyObject Windows.UI.Xaml.Input.FocusManager::FindLastFocusableElement(Windows.UI.Xaml.DependencyObject)
    def find_last_focusable_element(cls, search_scope: windows_ui_xaml.DependencyObject, /) -> windows_ui_xaml.DependencyObject: ...
    # Windows.UI.Xaml.DependencyObject Windows.UI.Xaml.Input.FocusManager::FindNextElement(Windows.UI.Xaml.Input.FocusNavigationDirection)
    def find_next_element(cls, focus_navigation_direction: FocusNavigationDirection, /) -> windows_ui_xaml.DependencyObject: ...
    # Windows.UI.Xaml.DependencyObject Windows.UI.Xaml.Input.FocusManager::FindNextElement(Windows.UI.Xaml.Input.FocusNavigationDirection,Windows.UI.Xaml.Input.FindNextElementOptions)
    def find_next_element_with_options(cls, focus_navigation_direction: FocusNavigationDirection, focus_navigation_options: FindNextElementOptions, /) -> windows_ui_xaml.DependencyObject: ...
    # Windows.UI.Xaml.UIElement Windows.UI.Xaml.Input.FocusManager::FindNextFocusableElement(Windows.UI.Xaml.Input.FocusNavigationDirection)
    def find_next_focusable_element(cls, focus_navigation_direction: FocusNavigationDirection, /) -> windows_ui_xaml.UIElement: ...
    # Windows.UI.Xaml.UIElement Windows.UI.Xaml.Input.FocusManager::FindNextFocusableElement(Windows.UI.Xaml.Input.FocusNavigationDirection,Windows.Foundation.Rect)
    def find_next_focusable_element_with_hint(cls, focus_navigation_direction: FocusNavigationDirection, hint_rect: windows_foundation.Rect, /) -> windows_ui_xaml.UIElement: ...
    @typing.overload
    # System.Object Windows.UI.Xaml.Input.FocusManager::GetFocusedElement()
    def get_focused_element(cls) -> winrt.system.Object: ...
    @typing.overload
    # System.Object Windows.UI.Xaml.Input.FocusManager::GetFocusedElement(Windows.UI.Xaml.XamlRoot)
    def get_focused_element(cls, xaml_root: windows_ui_xaml.XamlRoot, /) -> winrt.system.Object: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.UI.Xaml.Input.FocusMovementResult> Windows.UI.Xaml.Input.FocusManager::TryFocusAsync(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.FocusState)
    def try_focus_async(cls, element: windows_ui_xaml.DependencyObject, value: windows_ui_xaml.FocusState, /) -> windows_foundation.IAsyncOperation[FocusMovementResult]: ...
    # System.Boolean Windows.UI.Xaml.Input.FocusManager::TryMoveFocus(Windows.UI.Xaml.Input.FocusNavigationDirection)
    def try_move_focus(cls, focus_navigation_direction: FocusNavigationDirection, /) -> bool: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.UI.Xaml.Input.FocusMovementResult> Windows.UI.Xaml.Input.FocusManager::TryMoveFocusAsync(Windows.UI.Xaml.Input.FocusNavigationDirection)
    def try_move_focus_async(cls, focus_navigation_direction: FocusNavigationDirection, /) -> windows_foundation.IAsyncOperation[FocusMovementResult]: ...
    # System.Boolean Windows.UI.Xaml.Input.FocusManager::TryMoveFocus(Windows.UI.Xaml.Input.FocusNavigationDirection,Windows.UI.Xaml.Input.FindNextElementOptions)
    def try_move_focus_with_options(cls, focus_navigation_direction: FocusNavigationDirection, focus_navigation_options: FindNextElementOptions, /) -> bool: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.UI.Xaml.Input.FocusMovementResult> Windows.UI.Xaml.Input.FocusManager::TryMoveFocusAsync(Windows.UI.Xaml.Input.FocusNavigationDirection,Windows.UI.Xaml.Input.FindNextElementOptions)
    def try_move_focus_with_options_async(cls, focus_navigation_direction: FocusNavigationDirection, focus_navigation_options: FindNextElementOptions, /) -> windows_foundation.IAsyncOperation[FocusMovementResult]: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Input.FocusManager::add_GettingFocus(Windows.Foundation.EventHandler`1<Windows.UI.Xaml.Input.GettingFocusEventArgs>)
    def add_getting_focus(cls, handler: windows_foundation.EventHandler[GettingFocusEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Input.FocusManager::remove_GettingFocus(Windows.Foundation.EventRegistrationToken)
    def remove_getting_focus(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Input.FocusManager::add_GotFocus(Windows.Foundation.EventHandler`1<Windows.UI.Xaml.Input.FocusManagerGotFocusEventArgs>)
    def add_got_focus(cls, handler: windows_foundation.EventHandler[FocusManagerGotFocusEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Input.FocusManager::remove_GotFocus(Windows.Foundation.EventRegistrationToken)
    def remove_got_focus(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Input.FocusManager::add_LosingFocus(Windows.Foundation.EventHandler`1<Windows.UI.Xaml.Input.LosingFocusEventArgs>)
    def add_losing_focus(cls, handler: windows_foundation.EventHandler[LosingFocusEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Input.FocusManager::remove_LosingFocus(Windows.Foundation.EventRegistrationToken)
    def remove_losing_focus(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Input.FocusManager::add_LostFocus(Windows.Foundation.EventHandler`1<Windows.UI.Xaml.Input.FocusManagerLostFocusEventArgs>)
    def add_lost_focus(cls, handler: windows_foundation.EventHandler[FocusManagerLostFocusEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Input.FocusManager::remove_LostFocus(Windows.Foundation.EventRegistrationToken)
    def remove_lost_focus(cls, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class FocusManager(winrt.system.Object, metaclass=FocusManager_Static):
    pass

@typing.final
class FocusManagerGotFocusEventArgs(winrt.system.Object):
    # System.Guid Windows.UI.Xaml.Input.FocusManagerGotFocusEventArgs::get_CorrelationId()
    @_property
    def correlation_id(self) -> _uuid.UUID: ...
    # Windows.UI.Xaml.DependencyObject Windows.UI.Xaml.Input.FocusManagerGotFocusEventArgs::get_NewFocusedElement()
    @_property
    def new_focused_element(self) -> windows_ui_xaml.DependencyObject: ...

@typing.final
class FocusManagerLostFocusEventArgs(winrt.system.Object):
    # System.Guid Windows.UI.Xaml.Input.FocusManagerLostFocusEventArgs::get_CorrelationId()
    @_property
    def correlation_id(self) -> _uuid.UUID: ...
    # Windows.UI.Xaml.DependencyObject Windows.UI.Xaml.Input.FocusManagerLostFocusEventArgs::get_OldFocusedElement()
    @_property
    def old_focused_element(self) -> windows_ui_xaml.DependencyObject: ...

@typing.final
class FocusMovementResult(winrt.system.Object):
    # System.Boolean Windows.UI.Xaml.Input.FocusMovementResult::get_Succeeded()
    @_property
    def succeeded(self) -> bool: ...

@typing.final
class GettingFocusEventArgs(windows_ui_xaml.RoutedEventArgs):
    # System.Boolean Windows.UI.Xaml.Input.GettingFocusEventArgs::TryCancel()
    def try_cancel(self) -> bool: ...
    # System.Boolean Windows.UI.Xaml.Input.GettingFocusEventArgs::TrySetNewFocusedElement(Windows.UI.Xaml.DependencyObject)
    def try_set_new_focused_element(self, element: windows_ui_xaml.DependencyObject, /) -> bool: ...
    # Windows.UI.Xaml.DependencyObject Windows.UI.Xaml.Input.GettingFocusEventArgs::get_NewFocusedElement()
    @_property
    def new_focused_element(self) -> windows_ui_xaml.DependencyObject: ...
    # System.Void Windows.UI.Xaml.Input.GettingFocusEventArgs::put_NewFocusedElement(Windows.UI.Xaml.DependencyObject)
    @new_focused_element.setter
    def new_focused_element(self, value: windows_ui_xaml.DependencyObject) -> None: ...
    # System.Boolean Windows.UI.Xaml.Input.GettingFocusEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.GettingFocusEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Xaml.Input.GettingFocusEventArgs::get_Cancel()
    @_property
    def cancel(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.GettingFocusEventArgs::put_Cancel(System.Boolean)
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    # Windows.UI.Xaml.Input.FocusNavigationDirection Windows.UI.Xaml.Input.GettingFocusEventArgs::get_Direction()
    @_property
    def direction(self) -> FocusNavigationDirection: ...
    # Windows.UI.Xaml.FocusState Windows.UI.Xaml.Input.GettingFocusEventArgs::get_FocusState()
    @_property
    def focus_state(self) -> windows_ui_xaml.FocusState: ...
    # Windows.UI.Xaml.Input.FocusInputDeviceKind Windows.UI.Xaml.Input.GettingFocusEventArgs::get_InputDevice()
    @_property
    def input_device(self) -> FocusInputDeviceKind: ...
    # Windows.UI.Xaml.DependencyObject Windows.UI.Xaml.Input.GettingFocusEventArgs::get_OldFocusedElement()
    @_property
    def old_focused_element(self) -> windows_ui_xaml.DependencyObject: ...
    # System.Guid Windows.UI.Xaml.Input.GettingFocusEventArgs::get_CorrelationId()
    @_property
    def correlation_id(self) -> _uuid.UUID: ...

@typing.final
class HoldingRoutedEventArgs(windows_ui_xaml.RoutedEventArgs):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Input.HoldingRoutedEventArgs::GetPosition(Windows.UI.Xaml.UIElement)
    def get_position(self, relative_to: windows_ui_xaml.UIElement, /) -> windows_foundation.Point: ...
    # System.Boolean Windows.UI.Xaml.Input.HoldingRoutedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.HoldingRoutedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Windows.UI.Input.HoldingState Windows.UI.Xaml.Input.HoldingRoutedEventArgs::get_HoldingState()
    @_property
    def holding_state(self) -> windows_ui_input.HoldingState: ...
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Xaml.Input.HoldingRoutedEventArgs::get_PointerDeviceType()
    @_property
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...

@typing.final
class InertiaExpansionBehavior(winrt.system.Object):
    # System.Double Windows.UI.Xaml.Input.InertiaExpansionBehavior::get_DesiredExpansion()
    @_property
    def desired_expansion(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Input.InertiaExpansionBehavior::put_DesiredExpansion(System.Double)
    @desired_expansion.setter
    def desired_expansion(self, value: winrt.system.Double) -> None: ...
    # System.Double Windows.UI.Xaml.Input.InertiaExpansionBehavior::get_DesiredDeceleration()
    @_property
    def desired_deceleration(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Input.InertiaExpansionBehavior::put_DesiredDeceleration(System.Double)
    @desired_deceleration.setter
    def desired_deceleration(self, value: winrt.system.Double) -> None: ...

@typing.final
class InertiaRotationBehavior(winrt.system.Object):
    # System.Double Windows.UI.Xaml.Input.InertiaRotationBehavior::get_DesiredRotation()
    @_property
    def desired_rotation(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Input.InertiaRotationBehavior::put_DesiredRotation(System.Double)
    @desired_rotation.setter
    def desired_rotation(self, value: winrt.system.Double) -> None: ...
    # System.Double Windows.UI.Xaml.Input.InertiaRotationBehavior::get_DesiredDeceleration()
    @_property
    def desired_deceleration(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Input.InertiaRotationBehavior::put_DesiredDeceleration(System.Double)
    @desired_deceleration.setter
    def desired_deceleration(self, value: winrt.system.Double) -> None: ...

@typing.final
class InertiaTranslationBehavior(winrt.system.Object):
    # System.Double Windows.UI.Xaml.Input.InertiaTranslationBehavior::get_DesiredDisplacement()
    @_property
    def desired_displacement(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Input.InertiaTranslationBehavior::put_DesiredDisplacement(System.Double)
    @desired_displacement.setter
    def desired_displacement(self, value: winrt.system.Double) -> None: ...
    # System.Double Windows.UI.Xaml.Input.InertiaTranslationBehavior::get_DesiredDeceleration()
    @_property
    def desired_deceleration(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Input.InertiaTranslationBehavior::put_DesiredDeceleration(System.Double)
    @desired_deceleration.setter
    def desired_deceleration(self, value: winrt.system.Double) -> None: ...

@typing.final
class InputScope(windows_ui_xaml.DependencyObject):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Input.InputScopeName> Windows.UI.Xaml.Input.InputScope::get_Names()
    @_property
    def names(self) -> typing.MutableSequence[InputScopeName]: ...

@typing.final
class InputScopeName(windows_ui_xaml.DependencyObject):
    @typing.overload
    def __new__(cls: typing.Type[Self], name_value: InputScopeNameValue) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.UI.Xaml.Input.InputScopeNameValue Windows.UI.Xaml.Input.InputScopeName::get_NameValue()
    @_property
    def name_value(self) -> InputScopeNameValue: ...
    # System.Void Windows.UI.Xaml.Input.InputScopeName::put_NameValue(Windows.UI.Xaml.Input.InputScopeNameValue)
    @name_value.setter
    def name_value(self, value: InputScopeNameValue) -> None: ...

@typing.final
class KeyRoutedEventArgs(windows_ui_xaml.RoutedEventArgs):
    # System.Boolean Windows.UI.Xaml.Input.KeyRoutedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.KeyRoutedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Windows.System.VirtualKey Windows.UI.Xaml.Input.KeyRoutedEventArgs::get_Key()
    @_property
    def key(self) -> windows_system.VirtualKey: ...
    # Windows.UI.Core.CorePhysicalKeyStatus Windows.UI.Xaml.Input.KeyRoutedEventArgs::get_KeyStatus()
    @_property
    def key_status(self) -> windows_ui_core.CorePhysicalKeyStatus: ...
    # Windows.System.VirtualKey Windows.UI.Xaml.Input.KeyRoutedEventArgs::get_OriginalKey()
    @_property
    def original_key(self) -> windows_system.VirtualKey: ...
    # System.String Windows.UI.Xaml.Input.KeyRoutedEventArgs::get_DeviceId()
    @_property
    def device_id(self) -> str: ...

class KeyboardAccelerator_Static(windows_ui_xaml.DependencyObject_Static):
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Input.KeyboardAccelerator::get_IsEnabledProperty()
    @_property
    @typing.final
    def is_enabled_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Input.KeyboardAccelerator::get_KeyProperty()
    @_property
    @typing.final
    def key_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Input.KeyboardAccelerator::get_ModifiersProperty()
    @_property
    @typing.final
    def modifiers_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Input.KeyboardAccelerator::get_ScopeOwnerProperty()
    @_property
    @typing.final
    def scope_owner_property(cls) -> windows_ui_xaml.DependencyProperty: ...

class KeyboardAccelerator(windows_ui_xaml.DependencyObject, metaclass=KeyboardAccelerator_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Input.KeyboardAccelerator::add_Invoked(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Input.KeyboardAccelerator,Windows.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>)
    def add_invoked(self, handler: windows_foundation.TypedEventHandler[KeyboardAccelerator, KeyboardAcceleratorInvokedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Windows.UI.Xaml.Input.KeyboardAccelerator::remove_Invoked(Windows.Foundation.EventRegistrationToken)
    def remove_invoked(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.UI.Xaml.DependencyObject Windows.UI.Xaml.Input.KeyboardAccelerator::get_ScopeOwner()
    @_property
    def scope_owner(self) -> windows_ui_xaml.DependencyObject: ...
    # System.Void Windows.UI.Xaml.Input.KeyboardAccelerator::put_ScopeOwner(Windows.UI.Xaml.DependencyObject)
    @scope_owner.setter
    @typing.final
    def scope_owner(self, value: windows_ui_xaml.DependencyObject) -> None: ...
    # Windows.System.VirtualKeyModifiers Windows.UI.Xaml.Input.KeyboardAccelerator::get_Modifiers()
    @_property
    def modifiers(self) -> windows_system.VirtualKeyModifiers: ...
    # System.Void Windows.UI.Xaml.Input.KeyboardAccelerator::put_Modifiers(Windows.System.VirtualKeyModifiers)
    @modifiers.setter
    @typing.final
    def modifiers(self, value: windows_system.VirtualKeyModifiers) -> None: ...
    # Windows.System.VirtualKey Windows.UI.Xaml.Input.KeyboardAccelerator::get_Key()
    @_property
    def key(self) -> windows_system.VirtualKey: ...
    # System.Void Windows.UI.Xaml.Input.KeyboardAccelerator::put_Key(Windows.System.VirtualKey)
    @key.setter
    @typing.final
    def key(self, value: windows_system.VirtualKey) -> None: ...
    # System.Boolean Windows.UI.Xaml.Input.KeyboardAccelerator::get_IsEnabled()
    @_property
    def is_enabled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.KeyboardAccelerator::put_IsEnabled(System.Boolean)
    @is_enabled.setter
    @typing.final
    def is_enabled(self, value: bool) -> None: ...

@typing.final
class KeyboardAcceleratorInvokedEventArgs(winrt.system.Object):
    # System.Boolean Windows.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Windows.UI.Xaml.DependencyObject Windows.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs::get_Element()
    @_property
    def element(self) -> windows_ui_xaml.DependencyObject: ...
    # Windows.UI.Xaml.Input.KeyboardAccelerator Windows.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs::get_KeyboardAccelerator()
    @_property
    def keyboard_accelerator(self) -> KeyboardAccelerator: ...

@typing.final
class LosingFocusEventArgs(windows_ui_xaml.RoutedEventArgs):
    # System.Boolean Windows.UI.Xaml.Input.LosingFocusEventArgs::TryCancel()
    def try_cancel(self) -> bool: ...
    # System.Boolean Windows.UI.Xaml.Input.LosingFocusEventArgs::TrySetNewFocusedElement(Windows.UI.Xaml.DependencyObject)
    def try_set_new_focused_element(self, element: windows_ui_xaml.DependencyObject, /) -> bool: ...
    # Windows.UI.Xaml.DependencyObject Windows.UI.Xaml.Input.LosingFocusEventArgs::get_NewFocusedElement()
    @_property
    def new_focused_element(self) -> windows_ui_xaml.DependencyObject: ...
    # System.Void Windows.UI.Xaml.Input.LosingFocusEventArgs::put_NewFocusedElement(Windows.UI.Xaml.DependencyObject)
    @new_focused_element.setter
    def new_focused_element(self, value: windows_ui_xaml.DependencyObject) -> None: ...
    # System.Boolean Windows.UI.Xaml.Input.LosingFocusEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.LosingFocusEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Xaml.Input.LosingFocusEventArgs::get_Cancel()
    @_property
    def cancel(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.LosingFocusEventArgs::put_Cancel(System.Boolean)
    @cancel.setter
    def cancel(self, value: bool) -> None: ...
    # Windows.UI.Xaml.Input.FocusNavigationDirection Windows.UI.Xaml.Input.LosingFocusEventArgs::get_Direction()
    @_property
    def direction(self) -> FocusNavigationDirection: ...
    # Windows.UI.Xaml.FocusState Windows.UI.Xaml.Input.LosingFocusEventArgs::get_FocusState()
    @_property
    def focus_state(self) -> windows_ui_xaml.FocusState: ...
    # Windows.UI.Xaml.Input.FocusInputDeviceKind Windows.UI.Xaml.Input.LosingFocusEventArgs::get_InputDevice()
    @_property
    def input_device(self) -> FocusInputDeviceKind: ...
    # Windows.UI.Xaml.DependencyObject Windows.UI.Xaml.Input.LosingFocusEventArgs::get_OldFocusedElement()
    @_property
    def old_focused_element(self) -> windows_ui_xaml.DependencyObject: ...
    # System.Guid Windows.UI.Xaml.Input.LosingFocusEventArgs::get_CorrelationId()
    @_property
    def correlation_id(self) -> _uuid.UUID: ...

@typing.final
class ManipulationCompletedRoutedEventArgs(windows_ui_xaml.RoutedEventArgs):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Boolean Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Windows.UI.Xaml.UIElement Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs::get_Container()
    @_property
    def container(self) -> windows_ui_xaml.UIElement: ...
    # Windows.UI.Input.ManipulationDelta Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs::get_Cumulative()
    @_property
    def cumulative(self) -> windows_ui_input.ManipulationDelta: ...
    # System.Boolean Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs::get_IsInertial()
    @_property
    def is_inertial(self) -> bool: ...
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs::get_PointerDeviceType()
    @_property
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...
    # Windows.UI.Input.ManipulationVelocities Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs::get_Velocities()
    @_property
    def velocities(self) -> windows_ui_input.ManipulationVelocities: ...

@typing.final
class ManipulationDeltaRoutedEventArgs(windows_ui_xaml.RoutedEventArgs):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs::Complete()
    def complete(self) -> None: ...
    # System.Boolean Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Windows.UI.Xaml.UIElement Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs::get_Container()
    @_property
    def container(self) -> windows_ui_xaml.UIElement: ...
    # Windows.UI.Input.ManipulationDelta Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs::get_Cumulative()
    @_property
    def cumulative(self) -> windows_ui_input.ManipulationDelta: ...
    # Windows.UI.Input.ManipulationDelta Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs::get_Delta()
    @_property
    def delta(self) -> windows_ui_input.ManipulationDelta: ...
    # System.Boolean Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs::get_IsInertial()
    @_property
    def is_inertial(self) -> bool: ...
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs::get_PointerDeviceType()
    @_property
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs::get_Position()
    @_property
    def position(self) -> windows_foundation.Point: ...
    # Windows.UI.Input.ManipulationVelocities Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs::get_Velocities()
    @_property
    def velocities(self) -> windows_ui_input.ManipulationVelocities: ...

@typing.final
class ManipulationInertiaStartingRoutedEventArgs(windows_ui_xaml.RoutedEventArgs):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.UI.Xaml.Input.InertiaTranslationBehavior Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs::get_TranslationBehavior()
    @_property
    def translation_behavior(self) -> InertiaTranslationBehavior: ...
    # System.Void Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs::put_TranslationBehavior(Windows.UI.Xaml.Input.InertiaTranslationBehavior)
    @translation_behavior.setter
    def translation_behavior(self, value: InertiaTranslationBehavior) -> None: ...
    # Windows.UI.Xaml.Input.InertiaRotationBehavior Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs::get_RotationBehavior()
    @_property
    def rotation_behavior(self) -> InertiaRotationBehavior: ...
    # System.Void Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs::put_RotationBehavior(Windows.UI.Xaml.Input.InertiaRotationBehavior)
    @rotation_behavior.setter
    def rotation_behavior(self, value: InertiaRotationBehavior) -> None: ...
    # System.Boolean Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Windows.UI.Xaml.Input.InertiaExpansionBehavior Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs::get_ExpansionBehavior()
    @_property
    def expansion_behavior(self) -> InertiaExpansionBehavior: ...
    # System.Void Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs::put_ExpansionBehavior(Windows.UI.Xaml.Input.InertiaExpansionBehavior)
    @expansion_behavior.setter
    def expansion_behavior(self, value: InertiaExpansionBehavior) -> None: ...
    # Windows.UI.Xaml.UIElement Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs::get_Container()
    @_property
    def container(self) -> windows_ui_xaml.UIElement: ...
    # Windows.UI.Input.ManipulationDelta Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs::get_Cumulative()
    @_property
    def cumulative(self) -> windows_ui_input.ManipulationDelta: ...
    # Windows.UI.Input.ManipulationDelta Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs::get_Delta()
    @_property
    def delta(self) -> windows_ui_input.ManipulationDelta: ...
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs::get_PointerDeviceType()
    @_property
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...
    # Windows.UI.Input.ManipulationVelocities Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs::get_Velocities()
    @_property
    def velocities(self) -> windows_ui_input.ManipulationVelocities: ...

@typing.final
class ManipulationPivot(winrt.system.Object):
    @typing.overload
    def __new__(cls: typing.Type[Self], center: windows_foundation.Point, radius: winrt.system.Double) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Double Windows.UI.Xaml.Input.ManipulationPivot::get_Radius()
    @_property
    def radius(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.Xaml.Input.ManipulationPivot::put_Radius(System.Double)
    @radius.setter
    def radius(self, value: winrt.system.Double) -> None: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Input.ManipulationPivot::get_Center()
    @_property
    def center(self) -> windows_foundation.Point: ...
    # System.Void Windows.UI.Xaml.Input.ManipulationPivot::put_Center(Windows.Foundation.Point)
    @center.setter
    def center(self, value: windows_foundation.Point) -> None: ...

class ManipulationStartedRoutedEventArgs_Static(windows_ui_xaml.RoutedEventArgs_Static):
    pass

class ManipulationStartedRoutedEventArgs(windows_ui_xaml.RoutedEventArgs, metaclass=ManipulationStartedRoutedEventArgs_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @typing.final
    # System.Void Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs::Complete()
    def complete(self) -> None: ...
    # System.Boolean Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    @typing.final
    def handled(self, value: bool) -> None: ...
    # Windows.UI.Xaml.UIElement Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs::get_Container()
    @_property
    @typing.final
    def container(self) -> windows_ui_xaml.UIElement: ...
    # Windows.UI.Input.ManipulationDelta Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs::get_Cumulative()
    @_property
    @typing.final
    def cumulative(self) -> windows_ui_input.ManipulationDelta: ...
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs::get_PointerDeviceType()
    @_property
    @typing.final
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs::get_Position()
    @_property
    @typing.final
    def position(self) -> windows_foundation.Point: ...

@typing.final
class ManipulationStartingRoutedEventArgs(windows_ui_xaml.RoutedEventArgs):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.UI.Xaml.Input.ManipulationPivot Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs::get_Pivot()
    @_property
    def pivot(self) -> ManipulationPivot: ...
    # System.Void Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs::put_Pivot(Windows.UI.Xaml.Input.ManipulationPivot)
    @pivot.setter
    def pivot(self, value: ManipulationPivot) -> None: ...
    # Windows.UI.Xaml.Input.ManipulationModes Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs::get_Mode()
    @_property
    def mode(self) -> ManipulationModes: ...
    # System.Void Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs::put_Mode(Windows.UI.Xaml.Input.ManipulationModes)
    @mode.setter
    def mode(self, value: ManipulationModes) -> None: ...
    # System.Boolean Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Windows.UI.Xaml.UIElement Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs::get_Container()
    @_property
    def container(self) -> windows_ui_xaml.UIElement: ...
    # System.Void Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs::put_Container(Windows.UI.Xaml.UIElement)
    @container.setter
    def container(self, value: windows_ui_xaml.UIElement) -> None: ...

@typing.final
class NoFocusCandidateFoundEventArgs(windows_ui_xaml.RoutedEventArgs):
    # System.Boolean Windows.UI.Xaml.Input.NoFocusCandidateFoundEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.NoFocusCandidateFoundEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Windows.UI.Xaml.Input.FocusNavigationDirection Windows.UI.Xaml.Input.NoFocusCandidateFoundEventArgs::get_Direction()
    @_property
    def direction(self) -> FocusNavigationDirection: ...
    # Windows.UI.Xaml.Input.FocusInputDeviceKind Windows.UI.Xaml.Input.NoFocusCandidateFoundEventArgs::get_InputDevice()
    @_property
    def input_device(self) -> FocusInputDeviceKind: ...

@typing.final
class Pointer(winrt.system.Object):
    # System.Boolean Windows.UI.Xaml.Input.Pointer::get_IsInContact()
    @_property
    def is_in_contact(self) -> bool: ...
    # System.Boolean Windows.UI.Xaml.Input.Pointer::get_IsInRange()
    @_property
    def is_in_range(self) -> bool: ...
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Xaml.Input.Pointer::get_PointerDeviceType()
    @_property
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...
    # System.UInt32 Windows.UI.Xaml.Input.Pointer::get_PointerId()
    @_property
    def pointer_id(self) -> winrt.system.UInt32: ...

@typing.final
class PointerRoutedEventArgs(windows_ui_xaml.RoutedEventArgs):
    # Windows.UI.Input.PointerPoint Windows.UI.Xaml.Input.PointerRoutedEventArgs::GetCurrentPoint(Windows.UI.Xaml.UIElement)
    def get_current_point(self, relative_to: windows_ui_xaml.UIElement, /) -> windows_ui_input.PointerPoint: ...
    # Windows.Foundation.Collections.IVector`1<Windows.UI.Input.PointerPoint> Windows.UI.Xaml.Input.PointerRoutedEventArgs::GetIntermediatePoints(Windows.UI.Xaml.UIElement)
    def get_intermediate_points(self, relative_to: windows_ui_xaml.UIElement, /) -> typing.MutableSequence[windows_ui_input.PointerPoint]: ...
    # System.Boolean Windows.UI.Xaml.Input.PointerRoutedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.PointerRoutedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Windows.System.VirtualKeyModifiers Windows.UI.Xaml.Input.PointerRoutedEventArgs::get_KeyModifiers()
    @_property
    def key_modifiers(self) -> windows_system.VirtualKeyModifiers: ...
    # Windows.UI.Xaml.Input.Pointer Windows.UI.Xaml.Input.PointerRoutedEventArgs::get_Pointer()
    @_property
    def pointer(self) -> Pointer: ...
    # System.Boolean Windows.UI.Xaml.Input.PointerRoutedEventArgs::get_IsGenerated()
    @_property
    def is_generated(self) -> bool: ...

@typing.final
class ProcessKeyboardAcceleratorEventArgs(winrt.system.Object):
    # System.Boolean Windows.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Windows.System.VirtualKey Windows.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs::get_Key()
    @_property
    def key(self) -> windows_system.VirtualKey: ...
    # Windows.System.VirtualKeyModifiers Windows.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs::get_Modifiers()
    @_property
    def modifiers(self) -> windows_system.VirtualKeyModifiers: ...

@typing.final
class RightTappedRoutedEventArgs(windows_ui_xaml.RoutedEventArgs):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Input.RightTappedRoutedEventArgs::GetPosition(Windows.UI.Xaml.UIElement)
    def get_position(self, relative_to: windows_ui_xaml.UIElement, /) -> windows_foundation.Point: ...
    # System.Boolean Windows.UI.Xaml.Input.RightTappedRoutedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.RightTappedRoutedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Xaml.Input.RightTappedRoutedEventArgs::get_PointerDeviceType()
    @_property
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...

class StandardUICommand_Static(XamlUICommand_Static):
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Input.StandardUICommand::get_KindProperty()
    @_property
    @typing.final
    def kind_property(cls) -> windows_ui_xaml.DependencyProperty: ...

class StandardUICommand(XamlUICommand, metaclass=StandardUICommand_Static):
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], kind: StandardUICommandKind) -> Self: ...
    # Windows.UI.Xaml.Input.StandardUICommandKind Windows.UI.Xaml.Input.StandardUICommand::get_Kind()
    @_property
    def kind(self) -> StandardUICommandKind: ...
    # System.Void Windows.UI.Xaml.Input.StandardUICommand::put_Kind(Windows.UI.Xaml.Input.StandardUICommandKind)
    @kind.setter
    @typing.final
    def kind(self, value: StandardUICommandKind) -> None: ...

@typing.final
class TappedRoutedEventArgs(windows_ui_xaml.RoutedEventArgs):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Point Windows.UI.Xaml.Input.TappedRoutedEventArgs::GetPosition(Windows.UI.Xaml.UIElement)
    def get_position(self, relative_to: windows_ui_xaml.UIElement, /) -> windows_foundation.Point: ...
    # System.Boolean Windows.UI.Xaml.Input.TappedRoutedEventArgs::get_Handled()
    @_property
    def handled(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.TappedRoutedEventArgs::put_Handled(System.Boolean)
    @handled.setter
    def handled(self, value: bool) -> None: ...
    # Windows.Devices.Input.PointerDeviceType Windows.UI.Xaml.Input.TappedRoutedEventArgs::get_PointerDeviceType()
    @_property
    def pointer_device_type(self) -> windows_devices_input.PointerDeviceType: ...

class XamlUICommand_Static(windows_ui_xaml.DependencyObject_Static):
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Input.XamlUICommand::get_AccessKeyProperty()
    @_property
    @typing.final
    def access_key_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Input.XamlUICommand::get_CommandProperty()
    @_property
    @typing.final
    def command_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Input.XamlUICommand::get_DescriptionProperty()
    @_property
    @typing.final
    def description_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Input.XamlUICommand::get_IconSourceProperty()
    @_property
    @typing.final
    def icon_source_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Input.XamlUICommand::get_KeyboardAcceleratorsProperty()
    @_property
    @typing.final
    def keyboard_accelerators_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Input.XamlUICommand::get_LabelProperty()
    @_property
    @typing.final
    def label_property(cls) -> windows_ui_xaml.DependencyProperty: ...

class XamlUICommand(windows_ui_xaml.DependencyObject, ICommand, metaclass=XamlUICommand_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Boolean Windows.UI.Xaml.Input.XamlUICommand::CanExecute(System.Object)
    def can_execute(self, parameter: winrt.system.Object, /) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.XamlUICommand::Execute(System.Object)
    def execute(self, parameter: winrt.system.Object, /) -> None: ...
    @typing.final
    # System.Void Windows.UI.Xaml.Input.XamlUICommand::NotifyCanExecuteChanged()
    def notify_can_execute_changed(self) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Input.XamlUICommand::add_CanExecuteRequested(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Input.XamlUICommand,Windows.UI.Xaml.Input.CanExecuteRequestedEventArgs>)
    def add_can_execute_requested(self, handler: windows_foundation.TypedEventHandler[XamlUICommand, CanExecuteRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Windows.UI.Xaml.Input.XamlUICommand::remove_CanExecuteRequested(Windows.Foundation.EventRegistrationToken)
    def remove_can_execute_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Input.XamlUICommand::add_ExecuteRequested(Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Input.XamlUICommand,Windows.UI.Xaml.Input.ExecuteRequestedEventArgs>)
    def add_execute_requested(self, handler: windows_foundation.TypedEventHandler[XamlUICommand, ExecuteRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Windows.UI.Xaml.Input.XamlUICommand::remove_ExecuteRequested(Windows.Foundation.EventRegistrationToken)
    def remove_execute_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @typing.final
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Input.XamlUICommand::add_CanExecuteChanged(Windows.Foundation.EventHandler`1<System.Object>)
    def add_can_execute_changed(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    @typing.final
    # System.Void Windows.UI.Xaml.Input.XamlUICommand::remove_CanExecuteChanged(Windows.Foundation.EventRegistrationToken)
    def remove_can_execute_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Windows.UI.Xaml.Input.XamlUICommand::get_Label()
    @_property
    def label(self) -> str: ...
    # System.Void Windows.UI.Xaml.Input.XamlUICommand::put_Label(System.String)
    @label.setter
    @typing.final
    def label(self, value: str) -> None: ...
    # Windows.UI.Xaml.Controls.IconSource Windows.UI.Xaml.Input.XamlUICommand::get_IconSource()
    @_property
    def icon_source(self) -> windows_ui_xaml_controls.IconSource: ...
    # System.Void Windows.UI.Xaml.Input.XamlUICommand::put_IconSource(Windows.UI.Xaml.Controls.IconSource)
    @icon_source.setter
    @typing.final
    def icon_source(self, value: windows_ui_xaml_controls.IconSource) -> None: ...
    # System.String Windows.UI.Xaml.Input.XamlUICommand::get_Description()
    @_property
    def description(self) -> str: ...
    # System.Void Windows.UI.Xaml.Input.XamlUICommand::put_Description(System.String)
    @description.setter
    @typing.final
    def description(self, value: str) -> None: ...
    # Windows.UI.Xaml.Input.ICommand Windows.UI.Xaml.Input.XamlUICommand::get_Command()
    @_property
    def command(self) -> ICommand: ...
    # System.Void Windows.UI.Xaml.Input.XamlUICommand::put_Command(Windows.UI.Xaml.Input.ICommand)
    @command.setter
    @typing.final
    def command(self, value: ICommand) -> None: ...
    # System.String Windows.UI.Xaml.Input.XamlUICommand::get_AccessKey()
    @_property
    def access_key(self) -> str: ...
    # System.Void Windows.UI.Xaml.Input.XamlUICommand::put_AccessKey(System.String)
    @access_key.setter
    @typing.final
    def access_key(self, value: str) -> None: ...
    # Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Input.KeyboardAccelerator> Windows.UI.Xaml.Input.XamlUICommand::get_KeyboardAccelerators()
    @_property
    @typing.final
    def keyboard_accelerators(self) -> typing.MutableSequence[KeyboardAccelerator]: ...

@typing.final
class _ICommand: ...

class ICommand(winrt._winrt.IInspectable):
    # System.Boolean Windows.UI.Xaml.Input.ICommand::CanExecute(System.Object)
    @abstractmethod
    def can_execute(self, parameter: winrt.system.Object, /) -> bool: ...
    # System.Void Windows.UI.Xaml.Input.ICommand::Execute(System.Object)
    @abstractmethod
    def execute(self, parameter: winrt.system.Object, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Input.ICommand::add_CanExecuteChanged(Windows.Foundation.EventHandler`1<System.Object>)
    @abstractmethod
    def add_can_execute_changed(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Input.ICommand::remove_CanExecuteChanged(Windows.Foundation.EventRegistrationToken)
    @abstractmethod
    def remove_can_execute_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

