// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Storage.Pickers.Provider.h"


namespace py::cpp::Windows::Storage::Pickers::Provider
{
    // ----- FileOpenPickerUI class --------------------

    static PyObject* _new_FileOpenPickerUI(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Storage::Pickers::Provider::FileOpenPickerUI>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Storage::Pickers::Provider::FileOpenPickerUI>::type_name);
        return nullptr;
    }

    static void _dealloc_FileOpenPickerUI(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FileOpenPickerUI_AddFile(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.Provider.FileOpenPickerUI", L"AddFile", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 1);

                return py::convert(self->obj.AddFile(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_CanAddFile(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.Provider.FileOpenPickerUI", L"CanAddFile", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);

                return py::convert(self->obj.CanAddFile(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_ContainsFile(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.Provider.FileOpenPickerUI", L"ContainsFile", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ContainsFile(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_RemoveFile(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.Provider.FileOpenPickerUI", L"RemoveFile", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.RemoveFile(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_get_Title(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.Provider.FileOpenPickerUI", L"Title"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileOpenPickerUI_put_Title(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.Provider.FileOpenPickerUI", L"Title"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Title(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileOpenPickerUI_get_AllowedFileTypes(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.Provider.FileOpenPickerUI", L"AllowedFileTypes"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AllowedFileTypes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_get_SelectionMode(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.Provider.FileOpenPickerUI", L"SelectionMode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SelectionMode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_get_SettingsIdentifier(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.Provider.FileOpenPickerUI", L"SettingsIdentifier"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SettingsIdentifier());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_add_Closing(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Storage.Pickers.Provider.FileOpenPickerUI", L"Closing"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Storage::Pickers::Provider::FileOpenPickerUI, winrt::Windows::Storage::Pickers::Provider::PickerClosingEventArgs>>(arg);

            return py::convert(self->obj.Closing(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_remove_Closing(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Storage.Pickers.Provider.FileOpenPickerUI", L"Closing"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Closing(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_add_FileRemoved(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Storage.Pickers.Provider.FileOpenPickerUI", L"FileRemoved"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Storage::Pickers::Provider::FileOpenPickerUI, winrt::Windows::Storage::Pickers::Provider::FileRemovedEventArgs>>(arg);

            return py::convert(self->obj.FileRemoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileOpenPickerUI_remove_FileRemoved(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Storage.Pickers.Provider.FileOpenPickerUI", L"FileRemoved"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FileRemoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_FileOpenPickerUI(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::Pickers::Provider::FileOpenPickerUI>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FileOpenPickerUI(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::FileOpenPickerUI>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FileOpenPickerUI[] = {
        { "add_file", reinterpret_cast<PyCFunction>(FileOpenPickerUI_AddFile), METH_VARARGS, nullptr },
        { "can_add_file", reinterpret_cast<PyCFunction>(FileOpenPickerUI_CanAddFile), METH_VARARGS, nullptr },
        { "contains_file", reinterpret_cast<PyCFunction>(FileOpenPickerUI_ContainsFile), METH_VARARGS, nullptr },
        { "remove_file", reinterpret_cast<PyCFunction>(FileOpenPickerUI_RemoveFile), METH_VARARGS, nullptr },
        { "add_closing", reinterpret_cast<PyCFunction>(FileOpenPickerUI_add_Closing), METH_O, nullptr },
        { "remove_closing", reinterpret_cast<PyCFunction>(FileOpenPickerUI_remove_Closing), METH_O, nullptr },
        { "add_file_removed", reinterpret_cast<PyCFunction>(FileOpenPickerUI_add_FileRemoved), METH_O, nullptr },
        { "remove_file_removed", reinterpret_cast<PyCFunction>(FileOpenPickerUI_remove_FileRemoved), METH_O, nullptr },
        { "_assign_array_", _assign_array_FileOpenPickerUI, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FileOpenPickerUI), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_FileOpenPickerUI[] = {
        { "title", reinterpret_cast<getter>(FileOpenPickerUI_get_Title), reinterpret_cast<setter>(FileOpenPickerUI_put_Title), nullptr, nullptr },
        { "allowed_file_types", reinterpret_cast<getter>(FileOpenPickerUI_get_AllowedFileTypes), nullptr, nullptr, nullptr },
        { "selection_mode", reinterpret_cast<getter>(FileOpenPickerUI_get_SelectionMode), nullptr, nullptr, nullptr },
        { "settings_identifier", reinterpret_cast<getter>(FileOpenPickerUI_get_SettingsIdentifier), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_FileOpenPickerUI[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_FileOpenPickerUI) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FileOpenPickerUI) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FileOpenPickerUI) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FileOpenPickerUI) },
        { },
    };

    static PyType_Spec type_spec_FileOpenPickerUI =
    {
        "winrt._winrt_windows_storage_pickers_provider.FileOpenPickerUI",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::FileOpenPickerUI),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileOpenPickerUI
    };

    // ----- FileRemovedEventArgs class --------------------

    static PyObject* _new_FileRemovedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Storage::Pickers::Provider::FileRemovedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Storage::Pickers::Provider::FileRemovedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_FileRemovedEventArgs(py::wrapper::Windows::Storage::Pickers::Provider::FileRemovedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FileRemovedEventArgs_get_Id(py::wrapper::Windows::Storage::Pickers::Provider::FileRemovedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.Provider.FileRemovedEventArgs", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_FileRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::Pickers::Provider::FileRemovedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FileRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::FileRemovedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FileRemovedEventArgs[] = {
        { "_assign_array_", _assign_array_FileRemovedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FileRemovedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_FileRemovedEventArgs[] = {
        { "id", reinterpret_cast<getter>(FileRemovedEventArgs_get_Id), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_FileRemovedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_FileRemovedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FileRemovedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FileRemovedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FileRemovedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_FileRemovedEventArgs =
    {
        "winrt._winrt_windows_storage_pickers_provider.FileRemovedEventArgs",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::FileRemovedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileRemovedEventArgs
    };

    // ----- FileSavePickerUI class --------------------

    static PyObject* _new_FileSavePickerUI(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Storage::Pickers::Provider::FileSavePickerUI>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Storage::Pickers::Provider::FileSavePickerUI>::type_name);
        return nullptr;
    }

    static void _dealloc_FileSavePickerUI(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FileSavePickerUI_TrySetFileName(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.Provider.FileSavePickerUI", L"TrySetFileName", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.TrySetFileName(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileSavePickerUI_get_Title(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.Provider.FileSavePickerUI", L"Title"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileSavePickerUI_put_Title(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.Provider.FileSavePickerUI", L"Title"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Title(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* FileSavePickerUI_get_AllowedFileTypes(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.Provider.FileSavePickerUI", L"AllowedFileTypes"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AllowedFileTypes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileSavePickerUI_get_FileName(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.Provider.FileSavePickerUI", L"FileName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FileName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileSavePickerUI_get_SettingsIdentifier(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.Provider.FileSavePickerUI", L"SettingsIdentifier"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SettingsIdentifier());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileSavePickerUI_add_FileNameChanged(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Storage.Pickers.Provider.FileSavePickerUI", L"FileNameChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Storage::Pickers::Provider::FileSavePickerUI, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.FileNameChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileSavePickerUI_remove_FileNameChanged(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Storage.Pickers.Provider.FileSavePickerUI", L"FileNameChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FileNameChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileSavePickerUI_add_TargetFileRequested(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Storage.Pickers.Provider.FileSavePickerUI", L"TargetFileRequested"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Storage::Pickers::Provider::FileSavePickerUI, winrt::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs>>(arg);

            return py::convert(self->obj.TargetFileRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileSavePickerUI_remove_TargetFileRequested(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Storage.Pickers.Provider.FileSavePickerUI", L"TargetFileRequested"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.TargetFileRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_FileSavePickerUI(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::Pickers::Provider::FileSavePickerUI>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FileSavePickerUI(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::FileSavePickerUI>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FileSavePickerUI[] = {
        { "try_set_file_name", reinterpret_cast<PyCFunction>(FileSavePickerUI_TrySetFileName), METH_VARARGS, nullptr },
        { "add_file_name_changed", reinterpret_cast<PyCFunction>(FileSavePickerUI_add_FileNameChanged), METH_O, nullptr },
        { "remove_file_name_changed", reinterpret_cast<PyCFunction>(FileSavePickerUI_remove_FileNameChanged), METH_O, nullptr },
        { "add_target_file_requested", reinterpret_cast<PyCFunction>(FileSavePickerUI_add_TargetFileRequested), METH_O, nullptr },
        { "remove_target_file_requested", reinterpret_cast<PyCFunction>(FileSavePickerUI_remove_TargetFileRequested), METH_O, nullptr },
        { "_assign_array_", _assign_array_FileSavePickerUI, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FileSavePickerUI), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_FileSavePickerUI[] = {
        { "title", reinterpret_cast<getter>(FileSavePickerUI_get_Title), reinterpret_cast<setter>(FileSavePickerUI_put_Title), nullptr, nullptr },
        { "allowed_file_types", reinterpret_cast<getter>(FileSavePickerUI_get_AllowedFileTypes), nullptr, nullptr, nullptr },
        { "file_name", reinterpret_cast<getter>(FileSavePickerUI_get_FileName), nullptr, nullptr, nullptr },
        { "settings_identifier", reinterpret_cast<getter>(FileSavePickerUI_get_SettingsIdentifier), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_FileSavePickerUI[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_FileSavePickerUI) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FileSavePickerUI) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FileSavePickerUI) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FileSavePickerUI) },
        { },
    };

    static PyType_Spec type_spec_FileSavePickerUI =
    {
        "winrt._winrt_windows_storage_pickers_provider.FileSavePickerUI",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::FileSavePickerUI),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileSavePickerUI
    };

    // ----- PickerClosingDeferral class --------------------

    static PyObject* _new_PickerClosingDeferral(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Storage::Pickers::Provider::PickerClosingDeferral>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Storage::Pickers::Provider::PickerClosingDeferral>::type_name);
        return nullptr;
    }

    static void _dealloc_PickerClosingDeferral(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingDeferral* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PickerClosingDeferral_Complete(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingDeferral* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.Provider.PickerClosingDeferral", L"Complete", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Complete();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_PickerClosingDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::Pickers::Provider::PickerClosingDeferral>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PickerClosingDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::PickerClosingDeferral>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PickerClosingDeferral[] = {
        { "complete", reinterpret_cast<PyCFunction>(PickerClosingDeferral_Complete), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_PickerClosingDeferral, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PickerClosingDeferral), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PickerClosingDeferral[] = {
        { }
    };

    static PyType_Slot _type_slots_PickerClosingDeferral[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PickerClosingDeferral) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PickerClosingDeferral) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PickerClosingDeferral) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PickerClosingDeferral) },
        { },
    };

    static PyType_Spec type_spec_PickerClosingDeferral =
    {
        "winrt._winrt_windows_storage_pickers_provider.PickerClosingDeferral",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingDeferral),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PickerClosingDeferral
    };

    // ----- PickerClosingEventArgs class --------------------

    static PyObject* _new_PickerClosingEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Storage::Pickers::Provider::PickerClosingEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Storage::Pickers::Provider::PickerClosingEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_PickerClosingEventArgs(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PickerClosingEventArgs_get_ClosingOperation(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.Provider.PickerClosingEventArgs", L"ClosingOperation"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ClosingOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PickerClosingEventArgs_get_IsCanceled(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.Provider.PickerClosingEventArgs", L"IsCanceled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsCanceled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PickerClosingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::Pickers::Provider::PickerClosingEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PickerClosingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::PickerClosingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PickerClosingEventArgs[] = {
        { "_assign_array_", _assign_array_PickerClosingEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PickerClosingEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PickerClosingEventArgs[] = {
        { "closing_operation", reinterpret_cast<getter>(PickerClosingEventArgs_get_ClosingOperation), nullptr, nullptr, nullptr },
        { "is_canceled", reinterpret_cast<getter>(PickerClosingEventArgs_get_IsCanceled), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PickerClosingEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PickerClosingEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PickerClosingEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PickerClosingEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PickerClosingEventArgs) },
        { },
    };

    static PyType_Spec type_spec_PickerClosingEventArgs =
    {
        "winrt._winrt_windows_storage_pickers_provider.PickerClosingEventArgs",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PickerClosingEventArgs
    };

    // ----- PickerClosingOperation class --------------------

    static PyObject* _new_PickerClosingOperation(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Storage::Pickers::Provider::PickerClosingOperation>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Storage::Pickers::Provider::PickerClosingOperation>::type_name);
        return nullptr;
    }

    static void _dealloc_PickerClosingOperation(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingOperation* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PickerClosingOperation_GetDeferral(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingOperation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.Provider.PickerClosingOperation", L"GetDeferral", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PickerClosingOperation_get_Deadline(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingOperation* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.Provider.PickerClosingOperation", L"Deadline"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Deadline());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PickerClosingOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::Pickers::Provider::PickerClosingOperation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PickerClosingOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::PickerClosingOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PickerClosingOperation[] = {
        { "get_deferral", reinterpret_cast<PyCFunction>(PickerClosingOperation_GetDeferral), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_PickerClosingOperation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PickerClosingOperation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PickerClosingOperation[] = {
        { "deadline", reinterpret_cast<getter>(PickerClosingOperation_get_Deadline), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PickerClosingOperation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PickerClosingOperation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PickerClosingOperation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PickerClosingOperation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PickerClosingOperation) },
        { },
    };

    static PyType_Spec type_spec_PickerClosingOperation =
    {
        "winrt._winrt_windows_storage_pickers_provider.PickerClosingOperation",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::PickerClosingOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PickerClosingOperation
    };

    // ----- TargetFileRequest class --------------------

    static PyObject* _new_TargetFileRequest(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Storage::Pickers::Provider::TargetFileRequest>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Storage::Pickers::Provider::TargetFileRequest>::type_name);
        return nullptr;
    }

    static void _dealloc_TargetFileRequest(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequest* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* TargetFileRequest_GetDeferral(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequest* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.Provider.TargetFileRequest", L"GetDeferral", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* TargetFileRequest_get_TargetFile(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequest* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.Provider.TargetFileRequest", L"TargetFile"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TargetFile());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TargetFileRequest_put_TargetFile(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequest* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.Provider.TargetFileRequest", L"TargetFile"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(arg);

            self->obj.TargetFile(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_TargetFileRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::Pickers::Provider::TargetFileRequest>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_TargetFileRequest(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::TargetFileRequest>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetFileRequest[] = {
        { "get_deferral", reinterpret_cast<PyCFunction>(TargetFileRequest_GetDeferral), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_TargetFileRequest, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_TargetFileRequest), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_TargetFileRequest[] = {
        { "target_file", reinterpret_cast<getter>(TargetFileRequest_get_TargetFile), reinterpret_cast<setter>(TargetFileRequest_put_TargetFile), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_TargetFileRequest[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_TargetFileRequest) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_TargetFileRequest) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_TargetFileRequest) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_TargetFileRequest) },
        { },
    };

    static PyType_Spec type_spec_TargetFileRequest =
    {
        "winrt._winrt_windows_storage_pickers_provider.TargetFileRequest",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequest),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetFileRequest
    };

    // ----- TargetFileRequestDeferral class --------------------

    static PyObject* _new_TargetFileRequestDeferral(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Storage::Pickers::Provider::TargetFileRequestDeferral>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Storage::Pickers::Provider::TargetFileRequestDeferral>::type_name);
        return nullptr;
    }

    static void _dealloc_TargetFileRequestDeferral(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequestDeferral* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* TargetFileRequestDeferral_Complete(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequestDeferral* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.Pickers.Provider.TargetFileRequestDeferral", L"Complete", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Complete();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_TargetFileRequestDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::Pickers::Provider::TargetFileRequestDeferral>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_TargetFileRequestDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::TargetFileRequestDeferral>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetFileRequestDeferral[] = {
        { "complete", reinterpret_cast<PyCFunction>(TargetFileRequestDeferral_Complete), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_TargetFileRequestDeferral, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_TargetFileRequestDeferral), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_TargetFileRequestDeferral[] = {
        { }
    };

    static PyType_Slot _type_slots_TargetFileRequestDeferral[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_TargetFileRequestDeferral) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_TargetFileRequestDeferral) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_TargetFileRequestDeferral) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_TargetFileRequestDeferral) },
        { },
    };

    static PyType_Spec type_spec_TargetFileRequestDeferral =
    {
        "winrt._winrt_windows_storage_pickers_provider.TargetFileRequestDeferral",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequestDeferral),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetFileRequestDeferral
    };

    // ----- TargetFileRequestedEventArgs class --------------------

    static PyObject* _new_TargetFileRequestedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_TargetFileRequestedEventArgs(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* TargetFileRequestedEventArgs_get_Request(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.Pickers.Provider.TargetFileRequestedEventArgs", L"Request"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Request());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_TargetFileRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_TargetFileRequestedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_TargetFileRequestedEventArgs[] = {
        { "_assign_array_", _assign_array_TargetFileRequestedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_TargetFileRequestedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_TargetFileRequestedEventArgs[] = {
        { "request", reinterpret_cast<getter>(TargetFileRequestedEventArgs_get_Request), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_TargetFileRequestedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_TargetFileRequestedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_TargetFileRequestedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_TargetFileRequestedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_TargetFileRequestedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_TargetFileRequestedEventArgs =
    {
        "winrt._winrt_windows_storage_pickers_provider.TargetFileRequestedEventArgs",
        sizeof(py::wrapper::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TargetFileRequestedEventArgs
    };

    // ----- Windows.Storage.Pickers.Provider Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Storage::Pickers::Provider");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_storage_pickers_provider",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Storage::Pickers::Provider

PyMODINIT_FUNC PyInit__winrt_windows_storage_pickers_provider(void) noexcept
{
    using namespace py::cpp::Windows::Storage::Pickers::Provider;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_FileOpenPickerUI, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_FileRemovedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_FileSavePickerUI, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PickerClosingDeferral, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PickerClosingEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PickerClosingOperation, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_TargetFileRequest, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_TargetFileRequestDeferral, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_TargetFileRequestedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
