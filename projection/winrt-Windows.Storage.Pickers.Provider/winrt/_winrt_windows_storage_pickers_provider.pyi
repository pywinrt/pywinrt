# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.1.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.storage as windows_storage

from winrt.windows.storage.pickers.provider import AddFileResult, FileSelectionMode, SetFileNameResult

Self = typing.TypeVar('Self')

@typing.final
class FileOpenPickerUI(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FileOpenPickerUI: ...
    def add_file(self, id: str, file: typing.Optional[windows_storage.IStorageFile], /) -> AddFileResult: ...
    def can_add_file(self, file: typing.Optional[windows_storage.IStorageFile], /) -> bool: ...
    def contains_file(self, id: str, /) -> bool: ...
    def remove_file(self, id: str, /) -> None: ...
    def add_closing(self, handler: windows_foundation.TypedEventHandler[FileOpenPickerUI, PickerClosingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_closing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_file_removed(self, handler: windows_foundation.TypedEventHandler[FileOpenPickerUI, FileRemovedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_file_removed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> None: ...
    @_property
    def allowed_file_types(self) -> typing.Optional[windows_foundation_collections.IVectorView[str]]: ...
    @_property
    def selection_mode(self) -> FileSelectionMode: ...
    @_property
    def settings_identifier(self) -> str: ...

@typing.final
class FileRemovedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FileRemovedEventArgs: ...
    @_property
    def id(self) -> str: ...

@typing.final
class FileSavePickerUI(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FileSavePickerUI: ...
    def try_set_file_name(self, value: str, /) -> SetFileNameResult: ...
    def add_file_name_changed(self, handler: windows_foundation.TypedEventHandler[FileSavePickerUI, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_file_name_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    def add_target_file_requested(self, handler: windows_foundation.TypedEventHandler[FileSavePickerUI, TargetFileRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    def remove_target_file_requested(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> None: ...
    @_property
    def allowed_file_types(self) -> typing.Optional[windows_foundation_collections.IVectorView[str]]: ...
    @_property
    def file_name(self) -> str: ...
    @_property
    def settings_identifier(self) -> str: ...

@typing.final
class PickerClosingDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PickerClosingDeferral: ...
    def complete(self) -> None: ...

@typing.final
class PickerClosingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PickerClosingEventArgs: ...
    @_property
    def closing_operation(self) -> typing.Optional[PickerClosingOperation]: ...
    @_property
    def is_canceled(self) -> bool: ...

@typing.final
class PickerClosingOperation(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PickerClosingOperation: ...
    def get_deferral(self) -> typing.Optional[PickerClosingDeferral]: ...
    @_property
    def deadline(self) -> datetime.datetime: ...

@typing.final
class TargetFileRequest(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TargetFileRequest: ...
    def get_deferral(self) -> typing.Optional[TargetFileRequestDeferral]: ...
    @_property
    def target_file(self) -> typing.Optional[windows_storage.IStorageFile]: ...
    @target_file.setter
    def target_file(self, value: typing.Optional[windows_storage.IStorageFile]) -> None: ...

@typing.final
class TargetFileRequestDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TargetFileRequestDeferral: ...
    def complete(self) -> None: ...

@typing.final
class TargetFileRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TargetFileRequestedEventArgs: ...
    @_property
    def request(self) -> typing.Optional[TargetFileRequest]: ...

