# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.microsoft.ui.composition
import winrt.microsoft.ui.xaml.controls
import winrt.windows.foundation.collections
import winrt.windows.ui

Self = typing.TypeVar('Self')

@typing.final
class AnimatedAcceptVisualSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnimatedAcceptVisualSource: ...
    def __new__(cls: typing.Type[AnimatedAcceptVisualSource]) -> AnimatedAcceptVisualSource:...
    def set_color_property(self, property_name: str, value: winrt.windows.ui.Color, /) -> None: ...
    def try_create_animated_visual(self, compositor: typing.Optional[winrt.microsoft.ui.composition.Compositor], /) -> typing.Tuple[typing.Optional[winrt.microsoft.ui.xaml.controls.IAnimatedVisual], typing.Optional[winrt.system.Object]]: ...
    @_property
    def markers(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Double]]: ...

@typing.final
class AnimatedBackVisualSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnimatedBackVisualSource: ...
    def __new__(cls: typing.Type[AnimatedBackVisualSource]) -> AnimatedBackVisualSource:...
    def set_color_property(self, property_name: str, value: winrt.windows.ui.Color, /) -> None: ...
    def try_create_animated_visual(self, compositor: typing.Optional[winrt.microsoft.ui.composition.Compositor], /) -> typing.Tuple[typing.Optional[winrt.microsoft.ui.xaml.controls.IAnimatedVisual], typing.Optional[winrt.system.Object]]: ...
    @_property
    def markers(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Double]]: ...

@typing.final
class AnimatedChevronDownSmallVisualSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnimatedChevronDownSmallVisualSource: ...
    def __new__(cls: typing.Type[AnimatedChevronDownSmallVisualSource]) -> AnimatedChevronDownSmallVisualSource:...
    def set_color_property(self, property_name: str, value: winrt.windows.ui.Color, /) -> None: ...
    def try_create_animated_visual(self, compositor: typing.Optional[winrt.microsoft.ui.composition.Compositor], /) -> typing.Tuple[typing.Optional[winrt.microsoft.ui.xaml.controls.IAnimatedVisual], typing.Optional[winrt.system.Object]]: ...
    @_property
    def markers(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Double]]: ...

@typing.final
class AnimatedChevronRightDownSmallVisualSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnimatedChevronRightDownSmallVisualSource: ...
    def __new__(cls: typing.Type[AnimatedChevronRightDownSmallVisualSource]) -> AnimatedChevronRightDownSmallVisualSource:...
    def set_color_property(self, property_name: str, value: winrt.windows.ui.Color, /) -> None: ...
    def try_create_animated_visual(self, compositor: typing.Optional[winrt.microsoft.ui.composition.Compositor], /) -> typing.Tuple[typing.Optional[winrt.microsoft.ui.xaml.controls.IAnimatedVisual], typing.Optional[winrt.system.Object]]: ...
    @_property
    def markers(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Double]]: ...

@typing.final
class AnimatedChevronUpDownSmallVisualSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnimatedChevronUpDownSmallVisualSource: ...
    def __new__(cls: typing.Type[AnimatedChevronUpDownSmallVisualSource]) -> AnimatedChevronUpDownSmallVisualSource:...
    def set_color_property(self, property_name: str, value: winrt.windows.ui.Color, /) -> None: ...
    def try_create_animated_visual(self, compositor: typing.Optional[winrt.microsoft.ui.composition.Compositor], /) -> typing.Tuple[typing.Optional[winrt.microsoft.ui.xaml.controls.IAnimatedVisual], typing.Optional[winrt.system.Object]]: ...
    @_property
    def markers(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Double]]: ...

@typing.final
class AnimatedFindVisualSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnimatedFindVisualSource: ...
    def __new__(cls: typing.Type[AnimatedFindVisualSource]) -> AnimatedFindVisualSource:...
    def set_color_property(self, property_name: str, value: winrt.windows.ui.Color, /) -> None: ...
    def try_create_animated_visual(self, compositor: typing.Optional[winrt.microsoft.ui.composition.Compositor], /) -> typing.Tuple[typing.Optional[winrt.microsoft.ui.xaml.controls.IAnimatedVisual], typing.Optional[winrt.system.Object]]: ...
    @_property
    def markers(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Double]]: ...

@typing.final
class AnimatedGlobalNavigationButtonVisualSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnimatedGlobalNavigationButtonVisualSource: ...
    def __new__(cls: typing.Type[AnimatedGlobalNavigationButtonVisualSource]) -> AnimatedGlobalNavigationButtonVisualSource:...
    def set_color_property(self, property_name: str, value: winrt.windows.ui.Color, /) -> None: ...
    def try_create_animated_visual(self, compositor: typing.Optional[winrt.microsoft.ui.composition.Compositor], /) -> typing.Tuple[typing.Optional[winrt.microsoft.ui.xaml.controls.IAnimatedVisual], typing.Optional[winrt.system.Object]]: ...
    @_property
    def markers(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Double]]: ...

@typing.final
class AnimatedSettingsVisualSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AnimatedSettingsVisualSource: ...
    def __new__(cls: typing.Type[AnimatedSettingsVisualSource]) -> AnimatedSettingsVisualSource:...
    def set_color_property(self, property_name: str, value: winrt.windows.ui.Color, /) -> None: ...
    def try_create_animated_visual(self, compositor: typing.Optional[winrt.microsoft.ui.composition.Compositor], /) -> typing.Tuple[typing.Optional[winrt.microsoft.ui.xaml.controls.IAnimatedVisual], typing.Optional[winrt.system.Object]]: ...
    @_property
    def markers(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Double]]: ...

