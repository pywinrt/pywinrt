# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel.datatransfer
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage.streams
import winrt.windows.system
import winrt.windows.ui
import winrt.windows.ui.core
import winrt.windows.web
import winrt.windows.web.http
import winrt.windows.web.ui

from winrt.windows.web.ui.interop import WebViewControlAcceleratorKeyRoutingStage, WebViewControlMoveFocusReason, WebViewControlProcessCapabilityState

Self = typing.TypeVar('Self')

@typing.final
class WebViewControl(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebViewControl: ...
    def add_initialize_script(self, script: str, /) -> None: ...
    def build_local_stream_uri(self, content_identifier: str, relative_path: str, /) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    def capture_preview_to_stream_async(self, stream: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> winrt.windows.foundation.IAsyncAction: ...
    def capture_selected_content_to_data_package_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.applicationmodel.datatransfer.DataPackage]: ...
    def close(self) -> None: ...
    def get_deferred_permission_request_by_id(self, id: winrt.system.UInt32, /) -> typing.Optional[winrt.windows.web.ui.WebViewControlDeferredPermissionRequest]: ...
    def go_back(self) -> None: ...
    def go_forward(self) -> None: ...
    def invoke_script_async(self, script_name: str, arguments: typing.Iterable[str], /) -> winrt.windows.foundation.IAsyncOperation[str]: ...
    def move_focus(self, reason: WebViewControlMoveFocusReason, /) -> None: ...
    def navigate(self, source: typing.Optional[winrt.windows.foundation.Uri], /) -> None: ...
    def navigate_to_local_stream_uri(self, source: typing.Optional[winrt.windows.foundation.Uri], stream_resolver: typing.Optional[winrt.windows.web.IUriToStreamResolver], /) -> None: ...
    def navigate_to_string(self, text: str, /) -> None: ...
    def navigate_with_http_request_message(self, request_message: typing.Optional[winrt.windows.web.http.HttpRequestMessage], /) -> None: ...
    def refresh(self) -> None: ...
    def stop(self) -> None: ...
    def add_contains_full_screen_element_changed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_contains_full_screen_element_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_content_loading(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlContentLoadingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_content_loading(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_d_o_m_content_loaded(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlDOMContentLoadedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_d_o_m_content_loaded(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_content_loading(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlContentLoadingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_frame_content_loading(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_d_o_m_content_loaded(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlDOMContentLoadedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_frame_d_o_m_content_loaded(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_navigation_completed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlNavigationCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_frame_navigation_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_frame_navigation_starting(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlNavigationStartingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_frame_navigation_starting(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_long_running_script_detected(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlLongRunningScriptDetectedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_long_running_script_detected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_navigation_completed(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlNavigationCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_navigation_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_navigation_starting(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlNavigationStartingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_navigation_starting(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_new_window_requested(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlNewWindowRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_new_window_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_permission_requested(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlPermissionRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_permission_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_script_notify(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlScriptNotifyEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_script_notify(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_unsafe_content_warning_displaying(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_unsafe_content_warning_displaying(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_unsupported_uri_scheme_identified(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_unsupported_uri_scheme_identified(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_unviewable_content_identified(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlUnviewableContentIdentifiedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_unviewable_content_identified(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_web_resource_requested(self, handler: winrt.windows.foundation.TypedEventHandler[winrt.windows.web.ui.IWebViewControl, winrt.windows.web.ui.WebViewControlWebResourceRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_web_resource_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_accelerator_key_pressed(self, handler: winrt.windows.foundation.TypedEventHandler[WebViewControl, WebViewControlAcceleratorKeyPressedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_accelerator_key_pressed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_move_focus_requested(self, handler: winrt.windows.foundation.TypedEventHandler[WebViewControl, WebViewControlMoveFocusRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_move_focus_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_got_focus(self, handler: winrt.windows.foundation.TypedEventHandler[WebViewControl, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_got_focus(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_lost_focus(self, handler: winrt.windows.foundation.TypedEventHandler[WebViewControl, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_lost_focus(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def scale(self) -> winrt.system.Double: ...
    @scale.setter
    def scale(self, value: winrt.system.Double) -> None: ...
    @_property
    def is_visible(self) -> bool: ...
    @is_visible.setter
    def is_visible(self, value: bool) -> None: ...
    @_property
    def bounds(self) -> winrt.windows.foundation.Rect: ...
    @bounds.setter
    def bounds(self, value: winrt.windows.foundation.Rect) -> None: ...
    @_property
    def process(self) -> typing.Optional[WebViewControlProcess]: ...
    @_property
    def source(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @source.setter
    def source(self, value: typing.Optional[winrt.windows.foundation.Uri]) -> None: ...
    @_property
    def default_background_color(self) -> winrt.windows.ui.Color: ...
    @default_background_color.setter
    def default_background_color(self, value: winrt.windows.ui.Color) -> None: ...
    @_property
    def can_go_back(self) -> bool: ...
    @_property
    def can_go_forward(self) -> bool: ...
    @_property
    def contains_full_screen_element(self) -> bool: ...
    @_property
    def deferred_permission_requests(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.web.ui.WebViewControlDeferredPermissionRequest]]: ...
    @_property
    def document_title(self) -> str: ...
    @_property
    def settings(self) -> typing.Optional[winrt.windows.web.ui.WebViewControlSettings]: ...

@typing.final
class WebViewControlAcceleratorKeyPressedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebViewControlAcceleratorKeyPressedEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def event_type(self) -> winrt.windows.ui.core.CoreAcceleratorKeyEventType: ...
    @_property
    def key_status(self) -> winrt.windows.ui.core.CorePhysicalKeyStatus: ...
    @_property
    def routing_stage(self) -> WebViewControlAcceleratorKeyRoutingStage: ...
    @_property
    def virtual_key(self) -> winrt.windows.system.VirtualKey: ...

@typing.final
class WebViewControlMoveFocusRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebViewControlMoveFocusRequestedEventArgs: ...
    @_property
    def reason(self) -> WebViewControlMoveFocusReason: ...

@typing.final
class WebViewControlProcess(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebViewControlProcess: ...
    @typing.overload
    def __new__(cls: typing.Type[WebViewControlProcess], process_options: typing.Optional[WebViewControlProcessOptions]) -> WebViewControlProcess:...
    @typing.overload
    def __new__(cls: typing.Type[WebViewControlProcess]) -> WebViewControlProcess:...
    def create_web_view_control_async(self, host_window_handle: winrt.system.Int64, bounds: winrt.windows.foundation.Rect, /) -> winrt.windows.foundation.IAsyncOperation[WebViewControl]: ...
    def get_web_view_controls(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[WebViewControl]]: ...
    def terminate(self) -> None: ...
    def add_process_exited(self, handler: winrt.windows.foundation.TypedEventHandler[WebViewControlProcess, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_process_exited(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def enterprise_id(self) -> str: ...
    @_property
    def is_private_network_client_server_capability_enabled(self) -> bool: ...
    @_property
    def process_id(self) -> winrt.system.UInt32: ...

@typing.final
class WebViewControlProcessOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebViewControlProcessOptions: ...
    def __new__(cls: typing.Type[WebViewControlProcessOptions]) -> WebViewControlProcessOptions:...
    @_property
    def private_network_client_server_capability(self) -> WebViewControlProcessCapabilityState: ...
    @private_network_client_server_capability.setter
    def private_network_client_server_capability(self, value: WebViewControlProcessCapabilityState) -> None: ...
    @_property
    def enterprise_id(self) -> str: ...
    @enterprise_id.setter
    def enterprise_id(self, value: str) -> None: ...

