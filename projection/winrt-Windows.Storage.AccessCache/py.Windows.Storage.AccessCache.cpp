// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Storage.AccessCache.h"


namespace py::cpp::Windows::Storage::AccessCache
{
    // ----- AccessListEntryView class --------------------

    static PyObject* _new_AccessListEntryView(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Storage::AccessCache::AccessListEntryView>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Storage::AccessCache::AccessListEntryView>::type_name);
        return nullptr;
    }

    static void _dealloc_AccessListEntryView(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AccessListEntryView_First(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.AccessListEntryView", L"First", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AccessListEntryView_GetAt(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.AccessListEntryView", L"GetAt", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AccessListEntryView_GetMany(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.AccessListEntryView", L"GetMany", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<py::pybuf_view<winrt::Windows::Storage::AccessCache::AccessListEntry, true>>(args, 1);

                return py::convert(self->obj.GetMany(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AccessListEntryView_IndexOf(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.AccessListEntryView", L"IndexOf", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessListEntry>(args, 0);
                uint32_t param1 {  };

                auto return_value = self->obj.IndexOf(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AccessListEntryView_get_Size(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.AccessListEntryView", L"Size"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AccessListEntryView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::AccessCache::AccessListEntryView>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AccessListEntryView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::AccessCache::AccessListEntryView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_AccessListEntryView(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _seq_length_AccessListEntryView(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _seq_item_AccessListEntryView(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, Py_ssize_t i) noexcept
    {
        try
        {
            return py::convert(self->obj.GetAt(static_cast<uint32_t>(i)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _seq_subscript_AccessListEntryView(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView* self, PyObject* slice) noexcept
    {
        try
        {
            if (PyIndex_Check(slice))
            {
                pyobj_handle index{PyNumber_Index(slice)};

                if (!index)
                {
                    return nullptr;
                }

                auto i = PyNumber_AsSsize_t(index.get(), PyExc_IndexError);

                if (i == -1 && PyErr_Occurred())
                {
                    return nullptr;
                }

                return _seq_item_AccessListEntryView(self, i);
            }

            if (!PySlice_Check(slice))
            {
                PyErr_Format(
                    PyExc_TypeError,
                    "indicies must be integers, not '%s'",
                    Py_TYPE(slice)->tp_name);
            }

            Py_ssize_t start, stop, step, length;

            if (PySlice_GetIndicesEx(
                    slice, self->obj.Size(), &start, &stop, &step, &length)
                < 0)
            {
                return nullptr;
            }

            if (step != 1)
            {
                PyErr_SetString(
                    PyExc_NotImplementedError,
                    "slices with step other than 1 are not implemented");
                return nullptr;
            }

            winrt::com_array<winrt::Windows::Storage::AccessCache::AccessListEntry> items(static_cast<uint32_t>(length), empty_instance<winrt::Windows::Storage::AccessCache::AccessListEntry>::get());

            auto count = self->obj.GetMany(static_cast<uint32_t>(start), items);

            if (count != static_cast<uint32_t>(length))
            {
                PyErr_Format(
                    PyExc_RuntimeError,
                    "returned count %d did not match requested length %zd",
                    count,
                    length);
                return nullptr;
            }

            return convert(items);}
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AccessListEntryView[] = {
        { "first", reinterpret_cast<PyCFunction>(AccessListEntryView_First), METH_VARARGS, nullptr },
        { "get_at", reinterpret_cast<PyCFunction>(AccessListEntryView_GetAt), METH_VARARGS, nullptr },
        { "get_many", reinterpret_cast<PyCFunction>(AccessListEntryView_GetMany), METH_VARARGS, nullptr },
        { "index_of", reinterpret_cast<PyCFunction>(AccessListEntryView_IndexOf), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_AccessListEntryView, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AccessListEntryView), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AccessListEntryView[] = {
        { "size", reinterpret_cast<getter>(AccessListEntryView_get_Size), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AccessListEntryView[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AccessListEntryView) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AccessListEntryView) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AccessListEntryView) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AccessListEntryView) },
        { Py_tp_iter, reinterpret_cast<void*>(_iterator_AccessListEntryView) },
        { Py_sq_length, reinterpret_cast<void*>(_seq_length_AccessListEntryView) },
        { Py_sq_item, reinterpret_cast<void*>(_seq_item_AccessListEntryView) },
        { Py_mp_subscript, reinterpret_cast<void*>(_seq_subscript_AccessListEntryView) },
        { },
    };

    static PyType_Spec type_spec_AccessListEntryView =
    {
        "winrt._winrt_windows_storage_accesscache.AccessListEntryView",
        sizeof(py::wrapper::Windows::Storage::AccessCache::AccessListEntryView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AccessListEntryView
    };

    // ----- ItemRemovedEventArgs class --------------------

    static PyObject* _new_ItemRemovedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Storage::AccessCache::ItemRemovedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Storage::AccessCache::ItemRemovedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_ItemRemovedEventArgs(py::wrapper::Windows::Storage::AccessCache::ItemRemovedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ItemRemovedEventArgs_get_RemovedEntry(py::wrapper::Windows::Storage::AccessCache::ItemRemovedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.ItemRemovedEventArgs", L"RemovedEntry"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RemovedEntry());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ItemRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::AccessCache::ItemRemovedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ItemRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::AccessCache::ItemRemovedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ItemRemovedEventArgs[] = {
        { "_assign_array_", _assign_array_ItemRemovedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ItemRemovedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ItemRemovedEventArgs[] = {
        { "removed_entry", reinterpret_cast<getter>(ItemRemovedEventArgs_get_RemovedEntry), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ItemRemovedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ItemRemovedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ItemRemovedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ItemRemovedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ItemRemovedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_ItemRemovedEventArgs =
    {
        "winrt._winrt_windows_storage_accesscache.ItemRemovedEventArgs",
        sizeof(py::wrapper::Windows::Storage::AccessCache::ItemRemovedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ItemRemovedEventArgs
    };

    // ----- StorageApplicationPermissions class --------------------

    static PyObject* _new_StorageApplicationPermissions(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Storage::AccessCache::StorageApplicationPermissions>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Storage::AccessCache::StorageApplicationPermissions>::type_name);
        return nullptr;
    }

    static PyObject* StorageApplicationPermissions_GetFutureAccessListForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageApplicationPermissions", L"GetFutureAccessListForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::Storage::AccessCache::StorageApplicationPermissions::GetFutureAccessListForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageApplicationPermissions_GetMostRecentlyUsedListForUser(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageApplicationPermissions", L"GetMostRecentlyUsedListForUser", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);

                return py::convert(winrt::Windows::Storage::AccessCache::StorageApplicationPermissions::GetMostRecentlyUsedListForUser(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageApplicationPermissions_get_FutureAccessList(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.StorageApplicationPermissions", L"FutureAccessList"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Storage::AccessCache::StorageApplicationPermissions::FutureAccessList());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageApplicationPermissions_get_MostRecentlyUsedList(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.StorageApplicationPermissions", L"MostRecentlyUsedList"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Storage::AccessCache::StorageApplicationPermissions::MostRecentlyUsedList());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorageApplicationPermissions[] = {
        { }
    };

    static PyGetSetDef _getset_StorageApplicationPermissions[] = {
        { }
    };

    static PyType_Slot _type_slots_StorageApplicationPermissions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_StorageApplicationPermissions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_StorageApplicationPermissions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_StorageApplicationPermissions) },
        { },
    };

    static PyType_Spec type_spec_StorageApplicationPermissions =
    {
        "winrt._winrt_windows_storage_accesscache.StorageApplicationPermissions",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorageApplicationPermissions
    };

    static PyGetSetDef getset_StorageApplicationPermissions_Static[] = {
        { "future_access_list", reinterpret_cast<getter>(StorageApplicationPermissions_get_FutureAccessList), nullptr, nullptr, nullptr },
        { "most_recently_used_list", reinterpret_cast<getter>(StorageApplicationPermissions_get_MostRecentlyUsedList), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_StorageApplicationPermissions_Static[] = {
        { "get_future_access_list_for_user", reinterpret_cast<PyCFunction>(StorageApplicationPermissions_GetFutureAccessListForUser), METH_VARARGS, nullptr },
        { "get_most_recently_used_list_for_user", reinterpret_cast<PyCFunction>(StorageApplicationPermissions_GetMostRecentlyUsedListForUser), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_StorageApplicationPermissions_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_StorageApplicationPermissions_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_StorageApplicationPermissions_Static) },
        { }
    };

    static PyType_Spec type_spec_StorageApplicationPermissions_Static =
    {
        "winrt._winrt_windows_storage_accesscache.StorageApplicationPermissions_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_StorageApplicationPermissions_Static
    };

    // ----- StorageItemAccessList class --------------------

    static PyObject* _new_StorageItemAccessList(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Storage::AccessCache::StorageItemAccessList>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Storage::AccessCache::StorageItemAccessList>::type_name);
        return nullptr;
    }

    static void _dealloc_StorageItemAccessList(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* StorageItemAccessList_Add(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"Add", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.Add(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"Add", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.Add(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_AddOrReplace(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"AddOrReplace", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);

                self->obj.AddOrReplace(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"AddOrReplace", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                self->obj.AddOrReplace(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_CheckAccess(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"CheckAccess", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.CheckAccess(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_Clear(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"Clear", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_ContainsItem(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"ContainsItem", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ContainsItem(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_GetFileAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"GetFileAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"GetFileAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFileAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_GetFolderAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"GetFolderAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFolderAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"GetFolderAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFolderAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_GetItemAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"GetItemAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetItemAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"GetItemAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetItemAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_Remove(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"Remove", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Remove(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_get_Entries(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"Entries"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Entries());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemAccessList_get_MaximumItemsAllowed(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.StorageItemAccessList", L"MaximumItemsAllowed"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MaximumItemsAllowed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_StorageItemAccessList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::AccessCache::StorageItemAccessList>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_StorageItemAccessList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::AccessCache::StorageItemAccessList>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorageItemAccessList[] = {
        { "add", reinterpret_cast<PyCFunction>(StorageItemAccessList_Add), METH_VARARGS, nullptr },
        { "add_or_replace", reinterpret_cast<PyCFunction>(StorageItemAccessList_AddOrReplace), METH_VARARGS, nullptr },
        { "check_access", reinterpret_cast<PyCFunction>(StorageItemAccessList_CheckAccess), METH_VARARGS, nullptr },
        { "clear", reinterpret_cast<PyCFunction>(StorageItemAccessList_Clear), METH_VARARGS, nullptr },
        { "contains_item", reinterpret_cast<PyCFunction>(StorageItemAccessList_ContainsItem), METH_VARARGS, nullptr },
        { "get_file_async", reinterpret_cast<PyCFunction>(StorageItemAccessList_GetFileAsync), METH_VARARGS, nullptr },
        { "get_folder_async", reinterpret_cast<PyCFunction>(StorageItemAccessList_GetFolderAsync), METH_VARARGS, nullptr },
        { "get_item_async", reinterpret_cast<PyCFunction>(StorageItemAccessList_GetItemAsync), METH_VARARGS, nullptr },
        { "remove", reinterpret_cast<PyCFunction>(StorageItemAccessList_Remove), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_StorageItemAccessList, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_StorageItemAccessList), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_StorageItemAccessList[] = {
        { "entries", reinterpret_cast<getter>(StorageItemAccessList_get_Entries), nullptr, nullptr, nullptr },
        { "maximum_items_allowed", reinterpret_cast<getter>(StorageItemAccessList_get_MaximumItemsAllowed), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_StorageItemAccessList[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_StorageItemAccessList) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_StorageItemAccessList) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_StorageItemAccessList) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_StorageItemAccessList) },
        { },
    };

    static PyType_Spec type_spec_StorageItemAccessList =
    {
        "winrt._winrt_windows_storage_accesscache.StorageItemAccessList",
        sizeof(py::wrapper::Windows::Storage::AccessCache::StorageItemAccessList),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorageItemAccessList
    };

    // ----- StorageItemMostRecentlyUsedList class --------------------

    static PyObject* _new_StorageItemMostRecentlyUsedList(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList>::type_name);
        return nullptr;
    }

    static void _dealloc_StorageItemMostRecentlyUsedList(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* StorageItemMostRecentlyUsedList_Add(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"Add", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.Add(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"Add", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.Add(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"Add", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Storage::AccessCache::RecentStorageItemVisibility>(args, 2);

                return py::convert(self->obj.Add(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_AddOrReplace(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"AddOrReplace", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);

                self->obj.AddOrReplace(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"AddOrReplace", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                self->obj.AddOrReplace(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"AddOrReplace", 4))
            {
                py::set_arg_count_version_error(4);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Storage::AccessCache::RecentStorageItemVisibility>(args, 3);

                self->obj.AddOrReplace(param0, param1, param2, param3);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_CheckAccess(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"CheckAccess", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.CheckAccess(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_Clear(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"Clear", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_ContainsItem(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"ContainsItem", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ContainsItem(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_GetFileAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"GetFileAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"GetFileAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFileAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_GetFolderAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"GetFolderAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFolderAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"GetFolderAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFolderAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_GetItemAsync(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"GetItemAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetItemAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"GetItemAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetItemAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_Remove(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"Remove", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Remove(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_get_Entries(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"Entries"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Entries());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_get_MaximumItemsAllowed(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"MaximumItemsAllowed"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MaximumItemsAllowed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_add_ItemRemoved(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"ItemRemoved"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList, winrt::Windows::Storage::AccessCache::ItemRemovedEventArgs>>(arg);

            return py::convert(self->obj.ItemRemoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* StorageItemMostRecentlyUsedList_remove_ItemRemoved(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList", L"ItemRemoved"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ItemRemoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_StorageItemMostRecentlyUsedList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_StorageItemMostRecentlyUsedList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_StorageItemMostRecentlyUsedList[] = {
        { "add", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_Add), METH_VARARGS, nullptr },
        { "add_or_replace", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_AddOrReplace), METH_VARARGS, nullptr },
        { "check_access", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_CheckAccess), METH_VARARGS, nullptr },
        { "clear", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_Clear), METH_VARARGS, nullptr },
        { "contains_item", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_ContainsItem), METH_VARARGS, nullptr },
        { "get_file_async", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_GetFileAsync), METH_VARARGS, nullptr },
        { "get_folder_async", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_GetFolderAsync), METH_VARARGS, nullptr },
        { "get_item_async", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_GetItemAsync), METH_VARARGS, nullptr },
        { "remove", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_Remove), METH_VARARGS, nullptr },
        { "add_item_removed", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_add_ItemRemoved), METH_O, nullptr },
        { "remove_item_removed", reinterpret_cast<PyCFunction>(StorageItemMostRecentlyUsedList_remove_ItemRemoved), METH_O, nullptr },
        { "_assign_array_", _assign_array_StorageItemMostRecentlyUsedList, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_StorageItemMostRecentlyUsedList), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_StorageItemMostRecentlyUsedList[] = {
        { "entries", reinterpret_cast<getter>(StorageItemMostRecentlyUsedList_get_Entries), nullptr, nullptr, nullptr },
        { "maximum_items_allowed", reinterpret_cast<getter>(StorageItemMostRecentlyUsedList_get_MaximumItemsAllowed), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_StorageItemMostRecentlyUsedList[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_StorageItemMostRecentlyUsedList) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_StorageItemMostRecentlyUsedList) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_StorageItemMostRecentlyUsedList) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_StorageItemMostRecentlyUsedList) },
        { },
    };

    static PyType_Spec type_spec_StorageItemMostRecentlyUsedList =
    {
        "winrt._winrt_windows_storage_accesscache.StorageItemMostRecentlyUsedList",
        sizeof(py::wrapper::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_StorageItemMostRecentlyUsedList
    };

    // ----- IStorageItemAccessList interface --------------------

    static PyObject* _new_IStorageItemAccessList(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Storage::AccessCache::IStorageItemAccessList>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Storage::AccessCache::IStorageItemAccessList>::type_name);
        return nullptr;
    }

    static void _dealloc_IStorageItemAccessList(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IStorageItemAccessList_Add(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"Add", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.Add(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"Add", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.Add(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_AddOrReplace(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"AddOrReplace", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);

                self->obj.AddOrReplace(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"AddOrReplace", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                self->obj.AddOrReplace(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_CheckAccess(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"CheckAccess", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(self->obj.CheckAccess(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_Clear(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"Clear", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_ContainsItem(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"ContainsItem", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ContainsItem(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_GetFileAsync(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"GetFileAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFileAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"GetFileAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFileAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_GetFolderAsync(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"GetFolderAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetFolderAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"GetFolderAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetFolderAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_GetItemAsync(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"GetItemAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetItemAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"GetItemAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::AccessCache::AccessCacheOptions>(args, 1);

                return py::convert(self->obj.GetItemAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_Remove(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"Remove", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Remove(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_get_Entries(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"Entries"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Entries());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* IStorageItemAccessList_get_MaximumItemsAllowed(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Storage.AccessCache.IStorageItemAccessList", L"MaximumItemsAllowed"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.MaximumItemsAllowed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_IStorageItemAccessList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::AccessCache::IStorageItemAccessList>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IStorageItemAccessList(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Storage::AccessCache::IStorageItemAccessList>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IStorageItemAccessList[] = {
        { "add", reinterpret_cast<PyCFunction>(IStorageItemAccessList_Add), METH_VARARGS, nullptr },
        { "add_or_replace", reinterpret_cast<PyCFunction>(IStorageItemAccessList_AddOrReplace), METH_VARARGS, nullptr },
        { "check_access", reinterpret_cast<PyCFunction>(IStorageItemAccessList_CheckAccess), METH_VARARGS, nullptr },
        { "clear", reinterpret_cast<PyCFunction>(IStorageItemAccessList_Clear), METH_VARARGS, nullptr },
        { "contains_item", reinterpret_cast<PyCFunction>(IStorageItemAccessList_ContainsItem), METH_VARARGS, nullptr },
        { "get_file_async", reinterpret_cast<PyCFunction>(IStorageItemAccessList_GetFileAsync), METH_VARARGS, nullptr },
        { "get_folder_async", reinterpret_cast<PyCFunction>(IStorageItemAccessList_GetFolderAsync), METH_VARARGS, nullptr },
        { "get_item_async", reinterpret_cast<PyCFunction>(IStorageItemAccessList_GetItemAsync), METH_VARARGS, nullptr },
        { "remove", reinterpret_cast<PyCFunction>(IStorageItemAccessList_Remove), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_IStorageItemAccessList, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IStorageItemAccessList), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IStorageItemAccessList[] = {
        { "entries", reinterpret_cast<getter>(IStorageItemAccessList_get_Entries), nullptr, nullptr, nullptr },
        { "maximum_items_allowed", reinterpret_cast<getter>(IStorageItemAccessList_get_MaximumItemsAllowed), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IStorageItemAccessList[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_IStorageItemAccessList) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IStorageItemAccessList) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IStorageItemAccessList) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IStorageItemAccessList) },
        { },
    };

    static PyType_Spec type_spec_IStorageItemAccessList =
    {
        "winrt._winrt_windows_storage_accesscache.IStorageItemAccessList",
        sizeof(py::wrapper::Windows::Storage::AccessCache::IStorageItemAccessList),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IStorageItemAccessList
    };

    // ----- AccessListEntry struct --------------------

    winrt_struct_wrapper<winrt::Windows::Storage::AccessCache::AccessListEntry>* _new_AccessListEntry(PyTypeObject* subclass, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Storage::AccessCache::AccessListEntry>*>(subclass->tp_alloc(subclass, 0));

        if (!self)
        {
            return nullptr;
        }

        std::construct_at(&self->obj);

        return self;
    }

    int _init_AccessListEntry(winrt_struct_wrapper<winrt::Windows::Storage::AccessCache::AccessListEntry>* self, PyObject* args, PyObject* kwds) noexcept
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            self->obj = {};
            return 0;
        }

        winrt::hstring _Token{};
        winrt::hstring _Metadata{};

        static const char* kwlist[] = {"token", "metadata", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "uu", const_cast<char**>(kwlist), &_Token, &_Metadata))
        {
            return -1;
        }

        try
        {
            self->obj = {_Token, _Metadata};
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static void _dealloc_AccessListEntry(py::wrapper::Windows::Storage::AccessCache::AccessListEntry* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_AccessListEntry(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Storage::AccessCache::AccessListEntry>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_AccessListEntry[] = {
        { "_assign_array_", _assign_array_AccessListEntry, METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyObject* AccessListEntry_get_Token(py::wrapper::Windows::Storage::AccessCache::AccessListEntry* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Token);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AccessListEntry_set_Token(py::wrapper::Windows::Storage::AccessCache::AccessListEntry* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.Token = py::converter<winrt::hstring>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* AccessListEntry_get_Metadata(py::wrapper::Windows::Storage::AccessCache::AccessListEntry* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Metadata);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int AccessListEntry_set_Metadata(py::wrapper::Windows::Storage::AccessCache::AccessListEntry* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.Metadata = py::converter<winrt::hstring>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_AccessListEntry[] = {
        { "token", reinterpret_cast<getter>(AccessListEntry_get_Token), reinterpret_cast<setter>(AccessListEntry_set_Token), nullptr, nullptr },
        { "metadata", reinterpret_cast<getter>(AccessListEntry_get_Metadata), reinterpret_cast<setter>(AccessListEntry_set_Metadata), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AccessListEntry[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AccessListEntry) },
        { Py_tp_init, reinterpret_cast<void*>(_init_AccessListEntry) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AccessListEntry) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AccessListEntry) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AccessListEntry) },
        { },
    };

    static PyType_Spec type_spec_AccessListEntry =
    {
        "winrt._winrt_windows_storage_accesscache.AccessListEntry",
        sizeof(py::wrapper::Windows::Storage::AccessCache::AccessListEntry),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AccessListEntry
    };

    // ----- Windows.Storage.AccessCache Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Storage::AccessCache");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_storage_accesscache",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Storage::AccessCache

PyMODINIT_FUNC PyInit__winrt_windows_storage_accesscache(void) noexcept
{
    using namespace py::cpp::Windows::Storage::AccessCache;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AccessListEntryView, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ItemRemovedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_StorageApplicationPermissions_Static{PyType_FromSpec(&type_spec_StorageApplicationPermissions_Static)};
    if (!type_StorageApplicationPermissions_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_StorageApplicationPermissions, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_StorageApplicationPermissions_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_StorageItemAccessList, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_StorageItemMostRecentlyUsedList, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_IStorageItemAccessList, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AccessListEntry, nullptr, nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
