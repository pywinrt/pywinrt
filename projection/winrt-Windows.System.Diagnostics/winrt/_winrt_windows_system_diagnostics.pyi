# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.data.json
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.system

from winrt.windows.system.diagnostics import DiagnosticActionState

Self = typing.TypeVar('Self')

@typing.final
class DiagnosticActionResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DiagnosticActionResult: ...
    @_property
    def extended_error(self) -> winrt.windows.foundation.HResult: ...
    @_property
    def results(self) -> typing.Optional[winrt.windows.foundation.collections.ValueSet]: ...

@typing.final
class DiagnosticInvoker_Static(type):
    def get_default(cls) -> typing.Optional[DiagnosticInvoker]: ...
    def get_for_user(cls, user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[DiagnosticInvoker]: ...
    @_property
    def is_supported(cls) -> bool: ...

@typing.final
class DiagnosticInvoker(winrt.system.Object, metaclass=DiagnosticInvoker_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DiagnosticInvoker: ...
    def run_diagnostic_action_async(self, context: typing.Optional[winrt.windows.data.json.JsonObject], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[DiagnosticActionResult, DiagnosticActionState]: ...
    def run_diagnostic_action_from_string_async(self, context: str, /) -> winrt.windows.foundation.IAsyncOperationWithProgress[DiagnosticActionResult, DiagnosticActionState]: ...

@typing.final
class ProcessCpuUsage(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProcessCpuUsage: ...
    def get_report(self) -> typing.Optional[ProcessCpuUsageReport]: ...

@typing.final
class ProcessCpuUsageReport(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProcessCpuUsageReport: ...
    @_property
    def kernel_time(self) -> datetime.timedelta: ...
    @_property
    def user_time(self) -> datetime.timedelta: ...

@typing.final
class ProcessDiagnosticInfo_Static(type):
    def get_for_current_process(cls) -> typing.Optional[ProcessDiagnosticInfo]: ...
    def get_for_processes(cls) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[ProcessDiagnosticInfo]]: ...
    def try_get_for_process_id(cls, process_id: winrt.system.UInt32, /) -> typing.Optional[ProcessDiagnosticInfo]: ...

@typing.final
class ProcessDiagnosticInfo(winrt.system.Object, metaclass=ProcessDiagnosticInfo_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProcessDiagnosticInfo: ...
    def get_app_diagnostic_infos(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.system.AppDiagnosticInfo]]: ...
    @_property
    def cpu_usage(self) -> typing.Optional[ProcessCpuUsage]: ...
    @_property
    def disk_usage(self) -> typing.Optional[ProcessDiskUsage]: ...
    @_property
    def executable_file_name(self) -> str: ...
    @_property
    def memory_usage(self) -> typing.Optional[ProcessMemoryUsage]: ...
    @_property
    def parent(self) -> typing.Optional[ProcessDiagnosticInfo]: ...
    @_property
    def process_id(self) -> winrt.system.UInt32: ...
    @_property
    def process_start_time(self) -> datetime.datetime: ...
    @_property
    def is_packaged(self) -> bool: ...

@typing.final
class ProcessDiskUsage(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProcessDiskUsage: ...
    def get_report(self) -> typing.Optional[ProcessDiskUsageReport]: ...

@typing.final
class ProcessDiskUsageReport(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProcessDiskUsageReport: ...
    @_property
    def bytes_read_count(self) -> winrt.system.Int64: ...
    @_property
    def bytes_written_count(self) -> winrt.system.Int64: ...
    @_property
    def other_bytes_count(self) -> winrt.system.Int64: ...
    @_property
    def other_operation_count(self) -> winrt.system.Int64: ...
    @_property
    def read_operation_count(self) -> winrt.system.Int64: ...
    @_property
    def write_operation_count(self) -> winrt.system.Int64: ...

@typing.final
class ProcessMemoryUsage(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProcessMemoryUsage: ...
    def get_report(self) -> typing.Optional[ProcessMemoryUsageReport]: ...

@typing.final
class ProcessMemoryUsageReport(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ProcessMemoryUsageReport: ...
    @_property
    def non_paged_pool_size_in_bytes(self) -> winrt.system.UInt64: ...
    @_property
    def page_fault_count(self) -> winrt.system.UInt32: ...
    @_property
    def page_file_size_in_bytes(self) -> winrt.system.UInt64: ...
    @_property
    def paged_pool_size_in_bytes(self) -> winrt.system.UInt64: ...
    @_property
    def peak_non_paged_pool_size_in_bytes(self) -> winrt.system.UInt64: ...
    @_property
    def peak_page_file_size_in_bytes(self) -> winrt.system.UInt64: ...
    @_property
    def peak_paged_pool_size_in_bytes(self) -> winrt.system.UInt64: ...
    @_property
    def peak_virtual_memory_size_in_bytes(self) -> winrt.system.UInt64: ...
    @_property
    def peak_working_set_size_in_bytes(self) -> winrt.system.UInt64: ...
    @_property
    def private_page_count(self) -> winrt.system.UInt64: ...
    @_property
    def virtual_memory_size_in_bytes(self) -> winrt.system.UInt64: ...
    @_property
    def working_set_size_in_bytes(self) -> winrt.system.UInt64: ...

@typing.final
class SystemCpuUsage(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemCpuUsage: ...
    def get_report(self) -> typing.Optional[SystemCpuUsageReport]: ...

@typing.final
class SystemCpuUsageReport(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemCpuUsageReport: ...
    @_property
    def idle_time(self) -> datetime.timedelta: ...
    @_property
    def kernel_time(self) -> datetime.timedelta: ...
    @_property
    def user_time(self) -> datetime.timedelta: ...

@typing.final
class SystemDiagnosticInfo_Static(type):
    def get_for_current_system(cls) -> typing.Optional[SystemDiagnosticInfo]: ...
    def is_architecture_supported(cls, type: winrt.windows.system.ProcessorArchitecture, /) -> bool: ...
    @_property
    def preferred_architecture(cls) -> winrt.windows.system.ProcessorArchitecture: ...

@typing.final
class SystemDiagnosticInfo(winrt.system.Object, metaclass=SystemDiagnosticInfo_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemDiagnosticInfo: ...
    @_property
    def cpu_usage(self) -> typing.Optional[SystemCpuUsage]: ...
    @_property
    def memory_usage(self) -> typing.Optional[SystemMemoryUsage]: ...

@typing.final
class SystemMemoryUsage(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemMemoryUsage: ...
    def get_report(self) -> typing.Optional[SystemMemoryUsageReport]: ...

@typing.final
class SystemMemoryUsageReport(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SystemMemoryUsageReport: ...
    @_property
    def available_size_in_bytes(self) -> winrt.system.UInt64: ...
    @_property
    def committed_size_in_bytes(self) -> winrt.system.UInt64: ...
    @_property
    def total_physical_size_in_bytes(self) -> winrt.system.UInt64: ...

