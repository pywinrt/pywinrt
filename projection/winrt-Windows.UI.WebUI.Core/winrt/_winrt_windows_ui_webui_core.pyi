# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property
from abc import abstractmethod

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.ui as windows_ui

from winrt.windows.ui.webui.core import WebUICommandBarClosedDisplayMode
from winrt.windows.ui.webui.core import MenuClosedEventHandler, MenuOpenedEventHandler, SizeChangedEventHandler

Self = typing.TypeVar('Self')

@typing.final
class WebUICommandBar_Static(winrt._winrt.IInspectable_Static):
    # Windows.UI.WebUI.Core.WebUICommandBar Windows.UI.WebUI.Core.WebUICommandBar::GetForCurrentView()
    def get_for_current_view(cls) -> WebUICommandBar: ...

@typing.final
class WebUICommandBar(winrt.system.Object, metaclass=WebUICommandBar_Static):
    # Windows.Foundation.EventRegistrationToken Windows.UI.WebUI.Core.WebUICommandBar::add_MenuClosed(Windows.UI.WebUI.Core.MenuClosedEventHandler)
    def add_menu_closed(self, handler: MenuClosedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBar::remove_MenuClosed(Windows.Foundation.EventRegistrationToken)
    def remove_menu_closed(self, value: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.WebUI.Core.WebUICommandBar::add_MenuOpened(Windows.UI.WebUI.Core.MenuOpenedEventHandler)
    def add_menu_opened(self, handler: MenuOpenedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBar::remove_MenuOpened(Windows.Foundation.EventRegistrationToken)
    def remove_menu_opened(self, value: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.WebUI.Core.WebUICommandBar::add_SizeChanged(Windows.UI.WebUI.Core.SizeChangedEventHandler)
    def add_size_changed(self, handler: SizeChangedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBar::remove_SizeChanged(Windows.Foundation.EventRegistrationToken)
    def remove_size_changed(self, value: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.Boolean Windows.UI.WebUI.Core.WebUICommandBar::get_Visible()
    @_property
    def visible(self) -> bool: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBar::put_Visible(System.Boolean)
    @visible.setter
    def visible(self, value: bool) -> None: ...
    # System.Double Windows.UI.WebUI.Core.WebUICommandBar::get_Opacity()
    @_property
    def opacity(self) -> winrt.system.Double: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBar::put_Opacity(System.Double)
    @opacity.setter
    def opacity(self, value: winrt.system.Double) -> None: ...
    # System.Boolean Windows.UI.WebUI.Core.WebUICommandBar::get_IsOpen()
    @_property
    def is_open(self) -> bool: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBar::put_IsOpen(System.Boolean)
    @is_open.setter
    def is_open(self, value: bool) -> None: ...
    # Windows.UI.Color Windows.UI.WebUI.Core.WebUICommandBar::get_ForegroundColor()
    @_property
    def foreground_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBar::put_ForegroundColor(Windows.UI.Color)
    @foreground_color.setter
    def foreground_color(self, value: windows_ui.Color) -> None: ...
    # Windows.UI.WebUI.Core.WebUICommandBarClosedDisplayMode Windows.UI.WebUI.Core.WebUICommandBar::get_ClosedDisplayMode()
    @_property
    def closed_display_mode(self) -> WebUICommandBarClosedDisplayMode: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBar::put_ClosedDisplayMode(Windows.UI.WebUI.Core.WebUICommandBarClosedDisplayMode)
    @closed_display_mode.setter
    def closed_display_mode(self, value: WebUICommandBarClosedDisplayMode) -> None: ...
    # Windows.UI.Color Windows.UI.WebUI.Core.WebUICommandBar::get_BackgroundColor()
    @_property
    def background_color(self) -> windows_ui.Color: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBar::put_BackgroundColor(Windows.UI.Color)
    @background_color.setter
    def background_color(self, value: windows_ui.Color) -> None: ...
    # Windows.Foundation.Collections.IObservableVector`1<Windows.UI.WebUI.Core.IWebUICommandBarElement> Windows.UI.WebUI.Core.WebUICommandBar::get_PrimaryCommands()
    @_property
    def primary_commands(self) -> windows_foundation_collections.IObservableVector[IWebUICommandBarElement]: ...
    # Windows.Foundation.Collections.IObservableVector`1<Windows.UI.WebUI.Core.IWebUICommandBarElement> Windows.UI.WebUI.Core.WebUICommandBar::get_SecondaryCommands()
    @_property
    def secondary_commands(self) -> windows_foundation_collections.IObservableVector[IWebUICommandBarElement]: ...
    # Windows.Foundation.Size Windows.UI.WebUI.Core.WebUICommandBar::get_Size()
    @_property
    def size(self) -> windows_foundation.Size: ...

@typing.final
class WebUICommandBarBitmapIcon(winrt.system.Object, IWebUICommandBarIcon):
    @typing.overload
    def __new__(cls: typing.Type[Self], uri: windows_foundation.Uri) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.Uri Windows.UI.WebUI.Core.WebUICommandBarBitmapIcon::get_Uri()
    @_property
    def uri(self) -> windows_foundation.Uri: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBarBitmapIcon::put_Uri(Windows.Foundation.Uri)
    @uri.setter
    def uri(self, value: windows_foundation.Uri) -> None: ...

@typing.final
class WebUICommandBarConfirmationButton(winrt.system.Object, IWebUICommandBarElement):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.WebUI.Core.WebUICommandBarConfirmationButton::add_ItemInvoked(Windows.Foundation.TypedEventHandler`2<Windows.UI.WebUI.Core.WebUICommandBarConfirmationButton,Windows.UI.WebUI.Core.WebUICommandBarItemInvokedEventArgs>)
    def add_item_invoked(self, handler: windows_foundation.TypedEventHandler[WebUICommandBarConfirmationButton, WebUICommandBarItemInvokedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBarConfirmationButton::remove_ItemInvoked(Windows.Foundation.EventRegistrationToken)
    def remove_item_invoked(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Windows.UI.WebUI.Core.WebUICommandBarConfirmationButton::get_Text()
    @_property
    def text(self) -> str: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBarConfirmationButton::put_Text(System.String)
    @text.setter
    def text(self, value: str) -> None: ...

@typing.final
class WebUICommandBarIconButton(winrt.system.Object, IWebUICommandBarElement):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.WebUI.Core.WebUICommandBarIconButton::add_ItemInvoked(Windows.Foundation.TypedEventHandler`2<Windows.UI.WebUI.Core.WebUICommandBarIconButton,Windows.UI.WebUI.Core.WebUICommandBarItemInvokedEventArgs>)
    def add_item_invoked(self, handler: windows_foundation.TypedEventHandler[WebUICommandBarIconButton, WebUICommandBarItemInvokedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBarIconButton::remove_ItemInvoked(Windows.Foundation.EventRegistrationToken)
    def remove_item_invoked(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # System.String Windows.UI.WebUI.Core.WebUICommandBarIconButton::get_Label()
    @_property
    def label(self) -> str: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBarIconButton::put_Label(System.String)
    @label.setter
    def label(self, value: str) -> None: ...
    # System.Boolean Windows.UI.WebUI.Core.WebUICommandBarIconButton::get_IsToggleButton()
    @_property
    def is_toggle_button(self) -> bool: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBarIconButton::put_IsToggleButton(System.Boolean)
    @is_toggle_button.setter
    def is_toggle_button(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.WebUI.Core.WebUICommandBarIconButton::get_IsChecked()
    @_property
    def is_checked(self) -> bool: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBarIconButton::put_IsChecked(System.Boolean)
    @is_checked.setter
    def is_checked(self, value: bool) -> None: ...
    # Windows.UI.WebUI.Core.IWebUICommandBarIcon Windows.UI.WebUI.Core.WebUICommandBarIconButton::get_Icon()
    @_property
    def icon(self) -> IWebUICommandBarIcon: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBarIconButton::put_Icon(Windows.UI.WebUI.Core.IWebUICommandBarIcon)
    @icon.setter
    def icon(self, value: IWebUICommandBarIcon) -> None: ...
    # System.Boolean Windows.UI.WebUI.Core.WebUICommandBarIconButton::get_Enabled()
    @_property
    def enabled(self) -> bool: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBarIconButton::put_Enabled(System.Boolean)
    @enabled.setter
    def enabled(self, value: bool) -> None: ...

@typing.final
class WebUICommandBarItemInvokedEventArgs(winrt.system.Object):
    # System.Boolean Windows.UI.WebUI.Core.WebUICommandBarItemInvokedEventArgs::get_IsPrimaryCommand()
    @_property
    def is_primary_command(self) -> bool: ...

@typing.final
class WebUICommandBarSizeChangedEventArgs(winrt.system.Object):
    # Windows.Foundation.Size Windows.UI.WebUI.Core.WebUICommandBarSizeChangedEventArgs::get_Size()
    @_property
    def size(self) -> windows_foundation.Size: ...

@typing.final
class WebUICommandBarSymbolIcon(winrt.system.Object, IWebUICommandBarIcon):
    @typing.overload
    def __new__(cls: typing.Type[Self], symbol: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.String Windows.UI.WebUI.Core.WebUICommandBarSymbolIcon::get_Symbol()
    @_property
    def symbol(self) -> str: ...
    # System.Void Windows.UI.WebUI.Core.WebUICommandBarSymbolIcon::put_Symbol(System.String)
    @symbol.setter
    def symbol(self, value: str) -> None: ...

@typing.final
class _IWebUICommandBarElement: ...

class IWebUICommandBarElement(winrt._winrt.IInspectable):  # type: ignore[misc]
    pass

@typing.final
class _IWebUICommandBarIcon: ...

class IWebUICommandBarIcon(winrt._winrt.IInspectable):  # type: ignore[misc]
    pass

