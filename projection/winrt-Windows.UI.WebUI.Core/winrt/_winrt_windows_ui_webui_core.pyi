# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.ui

from winrt.windows.ui.webui.core import WebUICommandBarClosedDisplayMode
from winrt.windows.ui.webui.core import MenuClosedEventHandler, MenuOpenedEventHandler, SizeChangedEventHandler

Self = typing.TypeVar('Self')

@typing.final
class WebUICommandBar_Static(type):
    def get_for_current_view(cls) -> typing.Optional[WebUICommandBar]: ...

@typing.final
class WebUICommandBar(winrt.system.Object, metaclass=WebUICommandBar_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICommandBar: ...
    def add_menu_closed(self, handler: typing.Optional[MenuClosedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_menu_closed(self, value: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_menu_opened(self, handler: typing.Optional[MenuOpenedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_menu_opened(self, value: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_size_changed(self, handler: typing.Optional[SizeChangedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_size_changed(self, value: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> None: ...
    @_property
    def opacity(self) -> winrt.system.Double: ...
    @opacity.setter
    def opacity(self, value: winrt.system.Double) -> None: ...
    @_property
    def is_open(self) -> bool: ...
    @is_open.setter
    def is_open(self, value: bool) -> None: ...
    @_property
    def foreground_color(self) -> winrt.windows.ui.Color: ...
    @foreground_color.setter
    def foreground_color(self, value: winrt.windows.ui.Color) -> None: ...
    @_property
    def closed_display_mode(self) -> WebUICommandBarClosedDisplayMode: ...
    @closed_display_mode.setter
    def closed_display_mode(self, value: WebUICommandBarClosedDisplayMode) -> None: ...
    @_property
    def background_color(self) -> winrt.windows.ui.Color: ...
    @background_color.setter
    def background_color(self, value: winrt.windows.ui.Color) -> None: ...
    @_property
    def primary_commands(self) -> typing.Optional[winrt.windows.foundation.collections.IObservableVector[IWebUICommandBarElement]]: ...
    @_property
    def secondary_commands(self) -> typing.Optional[winrt.windows.foundation.collections.IObservableVector[IWebUICommandBarElement]]: ...
    @_property
    def size(self) -> winrt.windows.foundation.Size: ...

@typing.final
class WebUICommandBarBitmapIcon(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICommandBarBitmapIcon: ...
    @typing.overload
    def __new__(cls: typing.Type[WebUICommandBarBitmapIcon], uri: typing.Optional[winrt.windows.foundation.Uri]) -> WebUICommandBarBitmapIcon:...
    @typing.overload
    def __new__(cls: typing.Type[WebUICommandBarBitmapIcon]) -> WebUICommandBarBitmapIcon:...
    @_property
    def uri(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @uri.setter
    def uri(self, value: typing.Optional[winrt.windows.foundation.Uri]) -> None: ...

@typing.final
class WebUICommandBarConfirmationButton(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICommandBarConfirmationButton: ...
    def __new__(cls: typing.Type[WebUICommandBarConfirmationButton]) -> WebUICommandBarConfirmationButton:...
    def add_item_invoked(self, handler: winrt.windows.foundation.TypedEventHandler[WebUICommandBarConfirmationButton, WebUICommandBarItemInvokedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_item_invoked(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: str) -> None: ...

@typing.final
class WebUICommandBarIconButton(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICommandBarIconButton: ...
    def __new__(cls: typing.Type[WebUICommandBarIconButton]) -> WebUICommandBarIconButton:...
    def add_item_invoked(self, handler: winrt.windows.foundation.TypedEventHandler[WebUICommandBarIconButton, WebUICommandBarItemInvokedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_item_invoked(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> None: ...
    @_property
    def is_toggle_button(self) -> bool: ...
    @is_toggle_button.setter
    def is_toggle_button(self, value: bool) -> None: ...
    @_property
    def is_checked(self) -> bool: ...
    @is_checked.setter
    def is_checked(self, value: bool) -> None: ...
    @_property
    def icon(self) -> typing.Optional[IWebUICommandBarIcon]: ...
    @icon.setter
    def icon(self, value: typing.Optional[IWebUICommandBarIcon]) -> None: ...
    @_property
    def enabled(self) -> bool: ...
    @enabled.setter
    def enabled(self, value: bool) -> None: ...

@typing.final
class WebUICommandBarItemInvokedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICommandBarItemInvokedEventArgs: ...
    @_property
    def is_primary_command(self) -> bool: ...

@typing.final
class WebUICommandBarSizeChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICommandBarSizeChangedEventArgs: ...
    @_property
    def size(self) -> winrt.windows.foundation.Size: ...

@typing.final
class WebUICommandBarSymbolIcon(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebUICommandBarSymbolIcon: ...
    @typing.overload
    def __new__(cls: typing.Type[WebUICommandBarSymbolIcon], symbol: str) -> WebUICommandBarSymbolIcon:...
    @typing.overload
    def __new__(cls: typing.Type[WebUICommandBarSymbolIcon]) -> WebUICommandBarSymbolIcon:...
    @_property
    def symbol(self) -> str: ...
    @symbol.setter
    def symbol(self, value: str) -> None: ...

@typing.final
class IWebUICommandBarElement(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IWebUICommandBarElement: ...

@typing.final
class IWebUICommandBarIcon(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IWebUICommandBarIcon: ...

