# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage.streams

from winrt.windows.media.playto import PlayToConnectionError, PlayToConnectionState

Self = typing.TypeVar('Self')

@typing.final
class CurrentTimeChangeRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CurrentTimeChangeRequestedEventArgs: ...
    @_property
    def time(self) -> datetime.timedelta: ...

@typing.final
class MuteChangeRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MuteChangeRequestedEventArgs: ...
    @_property
    def mute(self) -> bool: ...

@typing.final
class PlayToConnection(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayToConnection: ...
    def add_error(self, handler: winrt.windows.foundation.TypedEventHandler[PlayToConnection, PlayToConnectionErrorEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_error(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_state_changed(self, handler: winrt.windows.foundation.TypedEventHandler[PlayToConnection, PlayToConnectionStateChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_state_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_transferred(self, handler: winrt.windows.foundation.TypedEventHandler[PlayToConnection, PlayToConnectionTransferredEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_transferred(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def state(self) -> PlayToConnectionState: ...

@typing.final
class PlayToConnectionErrorEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayToConnectionErrorEventArgs: ...
    @_property
    def code(self) -> PlayToConnectionError: ...
    @_property
    def message(self) -> str: ...

@typing.final
class PlayToConnectionStateChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayToConnectionStateChangedEventArgs: ...
    @_property
    def current_state(self) -> PlayToConnectionState: ...
    @_property
    def previous_state(self) -> PlayToConnectionState: ...

@typing.final
class PlayToConnectionTransferredEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayToConnectionTransferredEventArgs: ...
    @_property
    def current_source(self) -> typing.Optional[PlayToSource]: ...
    @_property
    def previous_source(self) -> typing.Optional[PlayToSource]: ...

@typing.final
class PlayToManager_Static(type):
    def get_for_current_view(cls) -> typing.Optional[PlayToManager]: ...
    def show_play_to_u_i(cls) -> None: ...

@typing.final
class PlayToManager(winrt.system.Object, metaclass=PlayToManager_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayToManager: ...
    def add_source_requested(self, handler: winrt.windows.foundation.TypedEventHandler[PlayToManager, PlayToSourceRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_source_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_source_selected(self, handler: winrt.windows.foundation.TypedEventHandler[PlayToManager, PlayToSourceSelectedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_source_selected(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def default_source_selection(self) -> bool: ...
    @default_source_selection.setter
    def default_source_selection(self, value: bool) -> None: ...

@typing.final
class PlayToReceiver(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayToReceiver: ...
    def __new__(cls: typing.Type[PlayToReceiver]) -> PlayToReceiver:...
    def notify_duration_change(self, duration: datetime.timedelta, /) -> None: ...
    def notify_ended(self) -> None: ...
    def notify_error(self) -> None: ...
    def notify_loaded_metadata(self) -> None: ...
    def notify_paused(self) -> None: ...
    def notify_playing(self) -> None: ...
    def notify_rate_change(self, rate: winrt.system.Double, /) -> None: ...
    def notify_seeked(self) -> None: ...
    def notify_seeking(self) -> None: ...
    def notify_stopped(self) -> None: ...
    def notify_time_update(self, current_time: datetime.timedelta, /) -> None: ...
    def notify_volume_change(self, volume: winrt.system.Double, mute: bool, /) -> None: ...
    def start_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def stop_async(self) -> winrt.windows.foundation.IAsyncAction: ...
    def add_current_time_change_requested(self, handler: winrt.windows.foundation.TypedEventHandler[PlayToReceiver, CurrentTimeChangeRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_current_time_change_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_mute_change_requested(self, handler: winrt.windows.foundation.TypedEventHandler[PlayToReceiver, MuteChangeRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_mute_change_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pause_requested(self, handler: winrt.windows.foundation.TypedEventHandler[PlayToReceiver, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pause_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_play_requested(self, handler: winrt.windows.foundation.TypedEventHandler[PlayToReceiver, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_play_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_playback_rate_change_requested(self, handler: winrt.windows.foundation.TypedEventHandler[PlayToReceiver, PlaybackRateChangeRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_playback_rate_change_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_source_change_requested(self, handler: winrt.windows.foundation.TypedEventHandler[PlayToReceiver, SourceChangeRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_source_change_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_stop_requested(self, handler: winrt.windows.foundation.TypedEventHandler[PlayToReceiver, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_stop_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_time_update_requested(self, handler: winrt.windows.foundation.TypedEventHandler[PlayToReceiver, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_time_update_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_volume_change_requested(self, handler: winrt.windows.foundation.TypedEventHandler[PlayToReceiver, VolumeChangeRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_volume_change_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def supports_video(self) -> bool: ...
    @supports_video.setter
    def supports_video(self, value: bool) -> None: ...
    @_property
    def supports_image(self) -> bool: ...
    @supports_image.setter
    def supports_image(self, value: bool) -> None: ...
    @_property
    def supports_audio(self) -> bool: ...
    @supports_audio.setter
    def supports_audio(self, value: bool) -> None: ...
    @_property
    def friendly_name(self) -> str: ...
    @friendly_name.setter
    def friendly_name(self, value: str) -> None: ...
    @_property
    def properties(self) -> typing.Optional[winrt.windows.foundation.collections.IPropertySet]: ...

@typing.final
class PlayToSource(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayToSource: ...
    def play_next(self) -> None: ...
    @_property
    def next(self) -> typing.Optional[PlayToSource]: ...
    @next.setter
    def next(self, value: typing.Optional[PlayToSource]) -> None: ...
    @_property
    def connection(self) -> typing.Optional[PlayToConnection]: ...
    @_property
    def preferred_source_uri(self) -> typing.Optional[winrt.windows.foundation.Uri]: ...
    @preferred_source_uri.setter
    def preferred_source_uri(self, value: typing.Optional[winrt.windows.foundation.Uri]) -> None: ...

@typing.final
class PlayToSourceDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayToSourceDeferral: ...
    def complete(self) -> None: ...

@typing.final
class PlayToSourceRequest(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayToSourceRequest: ...
    def display_error_string(self, error_string: str, /) -> None: ...
    def get_deferral(self) -> typing.Optional[PlayToSourceDeferral]: ...
    def set_source(self, value: typing.Optional[PlayToSource], /) -> None: ...
    @_property
    def deadline(self) -> datetime.datetime: ...

@typing.final
class PlayToSourceRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayToSourceRequestedEventArgs: ...
    @_property
    def source_request(self) -> typing.Optional[PlayToSourceRequest]: ...

@typing.final
class PlayToSourceSelectedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlayToSourceSelectedEventArgs: ...
    @_property
    def friendly_name(self) -> str: ...
    @_property
    def icon(self) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamWithContentType]: ...
    @_property
    def supports_audio(self) -> bool: ...
    @_property
    def supports_image(self) -> bool: ...
    @_property
    def supports_video(self) -> bool: ...

@typing.final
class PlaybackRateChangeRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PlaybackRateChangeRequestedEventArgs: ...
    @_property
    def rate(self) -> winrt.system.Double: ...

@typing.final
class SourceChangeRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SourceChangeRequestedEventArgs: ...
    @_property
    def album(self) -> str: ...
    @_property
    def author(self) -> str: ...
    @_property
    def date(self) -> typing.Optional[typing.Optional[datetime.datetime]]: ...
    @_property
    def description(self) -> str: ...
    @_property
    def genre(self) -> str: ...
    @_property
    def properties(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[str, winrt.system.Object]]: ...
    @_property
    def rating(self) -> typing.Optional[typing.Optional[winrt.system.UInt32]]: ...
    @_property
    def stream(self) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamWithContentType]: ...
    @_property
    def thumbnail(self) -> typing.Optional[winrt.windows.storage.streams.IRandomAccessStreamReference]: ...
    @_property
    def title(self) -> str: ...

@typing.final
class VolumeChangeRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VolumeChangeRequestedEventArgs: ...
    @_property
    def volume(self) -> winrt.system.Double: ...

