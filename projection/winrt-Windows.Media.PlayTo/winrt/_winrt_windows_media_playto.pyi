# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.storage.streams as windows_storage_streams

from winrt.windows.media.playto import PlayToConnectionError, PlayToConnectionState

Self = typing.TypeVar('Self')

@typing.final
class CurrentTimeChangeRequestedEventArgs(winrt.system.Object):
    # Windows.Foundation.TimeSpan Windows.Media.PlayTo.CurrentTimeChangeRequestedEventArgs::get_Time()
    @_property
    def time(self) -> datetime.timedelta: ...

@typing.final
class MuteChangeRequestedEventArgs(winrt.system.Object):
    # System.Boolean Windows.Media.PlayTo.MuteChangeRequestedEventArgs::get_Mute()
    @_property
    def mute(self) -> bool: ...

@typing.final
class PlayToConnection(winrt.system.Object):
    # Windows.Foundation.EventRegistrationToken Windows.Media.PlayTo.PlayToConnection::add_Error(Windows.Foundation.TypedEventHandler`2<Windows.Media.PlayTo.PlayToConnection,Windows.Media.PlayTo.PlayToConnectionErrorEventArgs>)
    # @deprecated("PlayToConnection may be altered or unavailable for releases after Windows 10. Instead, use CastingConnection.")
    def add_error(self, handler: windows_foundation.TypedEventHandler[PlayToConnection, PlayToConnectionErrorEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.PlayTo.PlayToConnection::remove_Error(Windows.Foundation.EventRegistrationToken)
    # @deprecated("PlayToConnection may be altered or unavailable for releases after Windows 10. Instead, use CastingConnection.")
    def remove_error(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.PlayTo.PlayToConnection::add_StateChanged(Windows.Foundation.TypedEventHandler`2<Windows.Media.PlayTo.PlayToConnection,Windows.Media.PlayTo.PlayToConnectionStateChangedEventArgs>)
    # @deprecated("PlayToConnection may be altered or unavailable for releases after Windows 10. Instead, use CastingConnection.")
    def add_state_changed(self, handler: windows_foundation.TypedEventHandler[PlayToConnection, PlayToConnectionStateChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.PlayTo.PlayToConnection::remove_StateChanged(Windows.Foundation.EventRegistrationToken)
    # @deprecated("PlayToConnection may be altered or unavailable for releases after Windows 10. Instead, use CastingConnection.")
    def remove_state_changed(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.PlayTo.PlayToConnection::add_Transferred(Windows.Foundation.TypedEventHandler`2<Windows.Media.PlayTo.PlayToConnection,Windows.Media.PlayTo.PlayToConnectionTransferredEventArgs>)
    # @deprecated("PlayToConnection may be altered or unavailable for releases after Windows 10. Instead, use CastingConnection.")
    def add_transferred(self, handler: windows_foundation.TypedEventHandler[PlayToConnection, PlayToConnectionTransferredEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.PlayTo.PlayToConnection::remove_Transferred(Windows.Foundation.EventRegistrationToken)
    # @deprecated("PlayToConnection may be altered or unavailable for releases after Windows 10. Instead, use CastingConnection.")
    def remove_transferred(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Media.PlayTo.PlayToConnectionState Windows.Media.PlayTo.PlayToConnection::get_State()
    @_property
    def state(self) -> PlayToConnectionState: ...

@typing.final
class PlayToConnectionErrorEventArgs(winrt.system.Object):
    # Windows.Media.PlayTo.PlayToConnectionError Windows.Media.PlayTo.PlayToConnectionErrorEventArgs::get_Code()
    @_property
    def code(self) -> PlayToConnectionError: ...
    # System.String Windows.Media.PlayTo.PlayToConnectionErrorEventArgs::get_Message()
    @_property
    def message(self) -> str: ...

@typing.final
class PlayToConnectionStateChangedEventArgs(winrt.system.Object):
    # Windows.Media.PlayTo.PlayToConnectionState Windows.Media.PlayTo.PlayToConnectionStateChangedEventArgs::get_CurrentState()
    @_property
    def current_state(self) -> PlayToConnectionState: ...
    # Windows.Media.PlayTo.PlayToConnectionState Windows.Media.PlayTo.PlayToConnectionStateChangedEventArgs::get_PreviousState()
    @_property
    def previous_state(self) -> PlayToConnectionState: ...

@typing.final
class PlayToConnectionTransferredEventArgs(winrt.system.Object):
    # Windows.Media.PlayTo.PlayToSource Windows.Media.PlayTo.PlayToConnectionTransferredEventArgs::get_CurrentSource()
    @_property
    def current_source(self) -> PlayToSource: ...
    # Windows.Media.PlayTo.PlayToSource Windows.Media.PlayTo.PlayToConnectionTransferredEventArgs::get_PreviousSource()
    @_property
    def previous_source(self) -> PlayToSource: ...

@typing.final
class PlayToManager_Static(winrt._winrt.IInspectable_Static):
    # Windows.Media.PlayTo.PlayToManager Windows.Media.PlayTo.PlayToManager::GetForCurrentView()
    # @deprecated("PlayToManager may be altered or unavailable for releases after Windows 10.")
    def get_for_current_view(cls) -> PlayToManager: ...
    # System.Void Windows.Media.PlayTo.PlayToManager::ShowPlayToUI()
    # @deprecated("PlayToManager may be altered or unavailable for releases after Windows 10.")
    def show_play_to_ui(cls) -> None: ...

@typing.final
class PlayToManager(winrt.system.Object, metaclass=PlayToManager_Static):
    # Windows.Foundation.EventRegistrationToken Windows.Media.PlayTo.PlayToManager::add_SourceRequested(Windows.Foundation.TypedEventHandler`2<Windows.Media.PlayTo.PlayToManager,Windows.Media.PlayTo.PlayToSourceRequestedEventArgs>)
    # @deprecated("PlayToManager may be altered or unavailable for releases after Windows 10.")
    def add_source_requested(self, handler: windows_foundation.TypedEventHandler[PlayToManager, PlayToSourceRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.PlayTo.PlayToManager::remove_SourceRequested(Windows.Foundation.EventRegistrationToken)
    # @deprecated("PlayToManager may be altered or unavailable for releases after Windows 10.")
    def remove_source_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.PlayTo.PlayToManager::add_SourceSelected(Windows.Foundation.TypedEventHandler`2<Windows.Media.PlayTo.PlayToManager,Windows.Media.PlayTo.PlayToSourceSelectedEventArgs>)
    # @deprecated("PlayToManager may be altered or unavailable for releases after Windows 10.")
    def add_source_selected(self, handler: windows_foundation.TypedEventHandler[PlayToManager, PlayToSourceSelectedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.PlayTo.PlayToManager::remove_SourceSelected(Windows.Foundation.EventRegistrationToken)
    # @deprecated("PlayToManager may be altered or unavailable for releases after Windows 10.")
    def remove_source_selected(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.Boolean Windows.Media.PlayTo.PlayToManager::get_DefaultSourceSelection()
    @_property
    def default_source_selection(self) -> bool: ...
    # System.Void Windows.Media.PlayTo.PlayToManager::put_DefaultSourceSelection(System.Boolean)
    @default_source_selection.setter
    def default_source_selection(self, value: bool) -> None: ...

@typing.final
class PlayToReceiver(winrt.system.Object):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::NotifyDurationChange(Windows.Foundation.TimeSpan)
    def notify_duration_change(self, duration: datetime.timedelta, /) -> None: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::NotifyEnded()
    def notify_ended(self) -> None: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::NotifyError()
    def notify_error(self) -> None: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::NotifyLoadedMetadata()
    def notify_loaded_metadata(self) -> None: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::NotifyPaused()
    def notify_paused(self) -> None: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::NotifyPlaying()
    def notify_playing(self) -> None: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::NotifyRateChange(System.Double)
    def notify_rate_change(self, rate: winrt.system.Double, /) -> None: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::NotifySeeked()
    def notify_seeked(self) -> None: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::NotifySeeking()
    def notify_seeking(self) -> None: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::NotifyStopped()
    def notify_stopped(self) -> None: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::NotifyTimeUpdate(Windows.Foundation.TimeSpan)
    def notify_time_update(self, current_time: datetime.timedelta, /) -> None: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::NotifyVolumeChange(System.Double,System.Boolean)
    def notify_volume_change(self, volume: winrt.system.Double, mute: bool, /) -> None: ...
    # Windows.Foundation.IAsyncAction Windows.Media.PlayTo.PlayToReceiver::StartAsync()
    def start_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.IAsyncAction Windows.Media.PlayTo.PlayToReceiver::StopAsync()
    def stop_async(self) -> windows_foundation.IAsyncAction: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.PlayTo.PlayToReceiver::add_CurrentTimeChangeRequested(Windows.Foundation.TypedEventHandler`2<Windows.Media.PlayTo.PlayToReceiver,Windows.Media.PlayTo.CurrentTimeChangeRequestedEventArgs>)
    def add_current_time_change_requested(self, handler: windows_foundation.TypedEventHandler[PlayToReceiver, CurrentTimeChangeRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::remove_CurrentTimeChangeRequested(Windows.Foundation.EventRegistrationToken)
    def remove_current_time_change_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.PlayTo.PlayToReceiver::add_MuteChangeRequested(Windows.Foundation.TypedEventHandler`2<Windows.Media.PlayTo.PlayToReceiver,Windows.Media.PlayTo.MuteChangeRequestedEventArgs>)
    def add_mute_change_requested(self, handler: windows_foundation.TypedEventHandler[PlayToReceiver, MuteChangeRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::remove_MuteChangeRequested(Windows.Foundation.EventRegistrationToken)
    def remove_mute_change_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.PlayTo.PlayToReceiver::add_PauseRequested(Windows.Foundation.TypedEventHandler`2<Windows.Media.PlayTo.PlayToReceiver,System.Object>)
    def add_pause_requested(self, handler: windows_foundation.TypedEventHandler[PlayToReceiver, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::remove_PauseRequested(Windows.Foundation.EventRegistrationToken)
    def remove_pause_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.PlayTo.PlayToReceiver::add_PlayRequested(Windows.Foundation.TypedEventHandler`2<Windows.Media.PlayTo.PlayToReceiver,System.Object>)
    def add_play_requested(self, handler: windows_foundation.TypedEventHandler[PlayToReceiver, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::remove_PlayRequested(Windows.Foundation.EventRegistrationToken)
    def remove_play_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.PlayTo.PlayToReceiver::add_PlaybackRateChangeRequested(Windows.Foundation.TypedEventHandler`2<Windows.Media.PlayTo.PlayToReceiver,Windows.Media.PlayTo.PlaybackRateChangeRequestedEventArgs>)
    def add_playback_rate_change_requested(self, handler: windows_foundation.TypedEventHandler[PlayToReceiver, PlaybackRateChangeRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::remove_PlaybackRateChangeRequested(Windows.Foundation.EventRegistrationToken)
    def remove_playback_rate_change_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.PlayTo.PlayToReceiver::add_SourceChangeRequested(Windows.Foundation.TypedEventHandler`2<Windows.Media.PlayTo.PlayToReceiver,Windows.Media.PlayTo.SourceChangeRequestedEventArgs>)
    def add_source_change_requested(self, handler: windows_foundation.TypedEventHandler[PlayToReceiver, SourceChangeRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::remove_SourceChangeRequested(Windows.Foundation.EventRegistrationToken)
    def remove_source_change_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.PlayTo.PlayToReceiver::add_StopRequested(Windows.Foundation.TypedEventHandler`2<Windows.Media.PlayTo.PlayToReceiver,System.Object>)
    def add_stop_requested(self, handler: windows_foundation.TypedEventHandler[PlayToReceiver, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::remove_StopRequested(Windows.Foundation.EventRegistrationToken)
    def remove_stop_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.PlayTo.PlayToReceiver::add_TimeUpdateRequested(Windows.Foundation.TypedEventHandler`2<Windows.Media.PlayTo.PlayToReceiver,System.Object>)
    def add_time_update_requested(self, handler: windows_foundation.TypedEventHandler[PlayToReceiver, winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::remove_TimeUpdateRequested(Windows.Foundation.EventRegistrationToken)
    def remove_time_update_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Media.PlayTo.PlayToReceiver::add_VolumeChangeRequested(Windows.Foundation.TypedEventHandler`2<Windows.Media.PlayTo.PlayToReceiver,Windows.Media.PlayTo.VolumeChangeRequestedEventArgs>)
    def add_volume_change_requested(self, handler: windows_foundation.TypedEventHandler[PlayToReceiver, VolumeChangeRequestedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::remove_VolumeChangeRequested(Windows.Foundation.EventRegistrationToken)
    def remove_volume_change_requested(self, token: typing.Union[windows_foundation.EventRegistrationToken, typing.Tuple[winrt.system.Int64]], /) -> None: ...
    # System.Boolean Windows.Media.PlayTo.PlayToReceiver::get_SupportsVideo()
    @_property
    def supports_video(self) -> bool: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::put_SupportsVideo(System.Boolean)
    @supports_video.setter
    def supports_video(self, value: bool) -> None: ...
    # System.Boolean Windows.Media.PlayTo.PlayToReceiver::get_SupportsImage()
    @_property
    def supports_image(self) -> bool: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::put_SupportsImage(System.Boolean)
    @supports_image.setter
    def supports_image(self, value: bool) -> None: ...
    # System.Boolean Windows.Media.PlayTo.PlayToReceiver::get_SupportsAudio()
    @_property
    def supports_audio(self) -> bool: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::put_SupportsAudio(System.Boolean)
    @supports_audio.setter
    def supports_audio(self, value: bool) -> None: ...
    # System.String Windows.Media.PlayTo.PlayToReceiver::get_FriendlyName()
    @_property
    def friendly_name(self) -> str: ...
    # System.Void Windows.Media.PlayTo.PlayToReceiver::put_FriendlyName(System.String)
    @friendly_name.setter
    def friendly_name(self, value: str) -> None: ...
    # Windows.Foundation.Collections.IPropertySet Windows.Media.PlayTo.PlayToReceiver::get_Properties()
    @_property
    def properties(self) -> windows_foundation_collections.IPropertySet: ...

@typing.final
class PlayToSource(winrt.system.Object):
    # System.Void Windows.Media.PlayTo.PlayToSource::PlayNext()
    # @deprecated("PlayToSource may be altered or unavailable for releases after Windows 10. Instead, use CastingSource.")
    def play_next(self) -> None: ...
    # Windows.Media.PlayTo.PlayToSource Windows.Media.PlayTo.PlayToSource::get_Next()
    @_property
    def next(self) -> PlayToSource: ...
    # System.Void Windows.Media.PlayTo.PlayToSource::put_Next(Windows.Media.PlayTo.PlayToSource)
    @next.setter
    def next(self, value: PlayToSource) -> None: ...
    # Windows.Media.PlayTo.PlayToConnection Windows.Media.PlayTo.PlayToSource::get_Connection()
    @_property
    def connection(self) -> PlayToConnection: ...
    # Windows.Foundation.Uri Windows.Media.PlayTo.PlayToSource::get_PreferredSourceUri()
    @_property
    def preferred_source_uri(self) -> windows_foundation.Uri: ...
    # System.Void Windows.Media.PlayTo.PlayToSource::put_PreferredSourceUri(Windows.Foundation.Uri)
    @preferred_source_uri.setter
    def preferred_source_uri(self, value: windows_foundation.Uri) -> None: ...

@typing.final
class PlayToSourceDeferral(winrt.system.Object):
    # System.Void Windows.Media.PlayTo.PlayToSourceDeferral::Complete()
    # @deprecated("PlayToSourceDeferral may be altered or unavailable for releases after Windows 10.")
    def complete(self) -> None: ...

@typing.final
class PlayToSourceRequest(winrt.system.Object):
    # System.Void Windows.Media.PlayTo.PlayToSourceRequest::DisplayErrorString(System.String)
    # @deprecated("PlayToSourceRequest may be altered or unavailable for releases after Windows 10.")
    def display_error_string(self, error_string: str, /) -> None: ...
    # Windows.Media.PlayTo.PlayToSourceDeferral Windows.Media.PlayTo.PlayToSourceRequest::GetDeferral()
    # @deprecated("PlayToSourceRequest may be altered or unavailable for releases after Windows 10.")
    def get_deferral(self) -> PlayToSourceDeferral: ...
    # System.Void Windows.Media.PlayTo.PlayToSourceRequest::SetSource(Windows.Media.PlayTo.PlayToSource)
    # @deprecated("PlayToSourceRequest may be altered or unavailable for releases after Windows 10.")
    def set_source(self, value: PlayToSource, /) -> None: ...
    # Windows.Foundation.DateTime Windows.Media.PlayTo.PlayToSourceRequest::get_Deadline()
    @_property
    def deadline(self) -> datetime.datetime: ...

@typing.final
class PlayToSourceRequestedEventArgs(winrt.system.Object):
    # Windows.Media.PlayTo.PlayToSourceRequest Windows.Media.PlayTo.PlayToSourceRequestedEventArgs::get_SourceRequest()
    @_property
    def source_request(self) -> PlayToSourceRequest: ...

@typing.final
class PlayToSourceSelectedEventArgs(winrt.system.Object):
    # System.String Windows.Media.PlayTo.PlayToSourceSelectedEventArgs::get_FriendlyName()
    @_property
    def friendly_name(self) -> str: ...
    # Windows.Storage.Streams.IRandomAccessStreamWithContentType Windows.Media.PlayTo.PlayToSourceSelectedEventArgs::get_Icon()
    @_property
    def icon(self) -> windows_storage_streams.IRandomAccessStreamWithContentType: ...
    # System.Boolean Windows.Media.PlayTo.PlayToSourceSelectedEventArgs::get_SupportsAudio()
    @_property
    def supports_audio(self) -> bool: ...
    # System.Boolean Windows.Media.PlayTo.PlayToSourceSelectedEventArgs::get_SupportsImage()
    @_property
    def supports_image(self) -> bool: ...
    # System.Boolean Windows.Media.PlayTo.PlayToSourceSelectedEventArgs::get_SupportsVideo()
    @_property
    def supports_video(self) -> bool: ...

@typing.final
class PlaybackRateChangeRequestedEventArgs(winrt.system.Object):
    # System.Double Windows.Media.PlayTo.PlaybackRateChangeRequestedEventArgs::get_Rate()
    @_property
    def rate(self) -> winrt.system.Double: ...

@typing.final
class SourceChangeRequestedEventArgs(winrt.system.Object):
    # System.String Windows.Media.PlayTo.SourceChangeRequestedEventArgs::get_Album()
    @_property
    def album(self) -> str: ...
    # System.String Windows.Media.PlayTo.SourceChangeRequestedEventArgs::get_Author()
    @_property
    def author(self) -> str: ...
    # Windows.Foundation.IReference`1<Windows.Foundation.DateTime> Windows.Media.PlayTo.SourceChangeRequestedEventArgs::get_Date()
    @_property
    def date(self) -> typing.Optional[datetime.datetime]: ...
    # System.String Windows.Media.PlayTo.SourceChangeRequestedEventArgs::get_Description()
    @_property
    def description(self) -> str: ...
    # System.String Windows.Media.PlayTo.SourceChangeRequestedEventArgs::get_Genre()
    @_property
    def genre(self) -> str: ...
    # Windows.Foundation.Collections.IMapView`2<System.String,System.Object> Windows.Media.PlayTo.SourceChangeRequestedEventArgs::get_Properties()
    @_property
    def properties(self) -> typing.Mapping[str, winrt.system.Object]: ...
    # Windows.Foundation.IReference`1<System.UInt32> Windows.Media.PlayTo.SourceChangeRequestedEventArgs::get_Rating()
    @_property
    def rating(self) -> typing.Optional[winrt.system.UInt32]: ...
    # Windows.Storage.Streams.IRandomAccessStreamWithContentType Windows.Media.PlayTo.SourceChangeRequestedEventArgs::get_Stream()
    @_property
    def stream(self) -> windows_storage_streams.IRandomAccessStreamWithContentType: ...
    # Windows.Storage.Streams.IRandomAccessStreamReference Windows.Media.PlayTo.SourceChangeRequestedEventArgs::get_Thumbnail()
    @_property
    def thumbnail(self) -> windows_storage_streams.IRandomAccessStreamReference: ...
    # System.String Windows.Media.PlayTo.SourceChangeRequestedEventArgs::get_Title()
    @_property
    def title(self) -> str: ...

@typing.final
class VolumeChangeRequestedEventArgs(winrt.system.Object):
    # System.Double Windows.Media.PlayTo.VolumeChangeRequestedEventArgs::get_Volume()
    @_property
    def volume(self) -> winrt.system.Double: ...

