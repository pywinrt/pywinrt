# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.ui.xaml as windows_ui_xaml
import winrt.windows.ui.xaml.interop as windows_ui_xaml_interop

from winrt.windows.ui.xaml.data import BindingMode, RelativeSourceMode, UpdateSourceTrigger
from winrt.windows.ui.xaml.data import CurrentChangingEventHandler, PropertyChangedEventHandler

Self = typing.TypeVar('Self')

@typing.final
class LoadMoreItemsResult:
    count: winrt.system.UInt32
    def __init__(self, count: winrt.system.UInt32 = 0) -> None: ...

class Binding_Static(BindingBase_Static):
    pass

class Binding(BindingBase, metaclass=Binding_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Object Windows.UI.Xaml.Data.Binding::get_Source()
    @_property
    def source(self) -> winrt.system.Object: ...
    # System.Void Windows.UI.Xaml.Data.Binding::put_Source(System.Object)
    @source.setter
    @typing.final
    def source(self, value: winrt.system.Object) -> None: ...
    # Windows.UI.Xaml.Data.RelativeSource Windows.UI.Xaml.Data.Binding::get_RelativeSource()
    @_property
    def relative_source(self) -> RelativeSource: ...
    # System.Void Windows.UI.Xaml.Data.Binding::put_RelativeSource(Windows.UI.Xaml.Data.RelativeSource)
    @relative_source.setter
    @typing.final
    def relative_source(self, value: RelativeSource) -> None: ...
    # Windows.UI.Xaml.PropertyPath Windows.UI.Xaml.Data.Binding::get_Path()
    @_property
    def path(self) -> windows_ui_xaml.PropertyPath: ...
    # System.Void Windows.UI.Xaml.Data.Binding::put_Path(Windows.UI.Xaml.PropertyPath)
    @path.setter
    @typing.final
    def path(self, value: windows_ui_xaml.PropertyPath) -> None: ...
    # Windows.UI.Xaml.Data.BindingMode Windows.UI.Xaml.Data.Binding::get_Mode()
    @_property
    def mode(self) -> BindingMode: ...
    # System.Void Windows.UI.Xaml.Data.Binding::put_Mode(Windows.UI.Xaml.Data.BindingMode)
    @mode.setter
    @typing.final
    def mode(self, value: BindingMode) -> None: ...
    # System.String Windows.UI.Xaml.Data.Binding::get_ElementName()
    @_property
    def element_name(self) -> str: ...
    # System.Void Windows.UI.Xaml.Data.Binding::put_ElementName(System.String)
    @element_name.setter
    @typing.final
    def element_name(self, value: str) -> None: ...
    # System.Object Windows.UI.Xaml.Data.Binding::get_ConverterParameter()
    @_property
    def converter_parameter(self) -> winrt.system.Object: ...
    # System.Void Windows.UI.Xaml.Data.Binding::put_ConverterParameter(System.Object)
    @converter_parameter.setter
    @typing.final
    def converter_parameter(self, value: winrt.system.Object) -> None: ...
    # System.String Windows.UI.Xaml.Data.Binding::get_ConverterLanguage()
    @_property
    def converter_language(self) -> str: ...
    # System.Void Windows.UI.Xaml.Data.Binding::put_ConverterLanguage(System.String)
    @converter_language.setter
    @typing.final
    def converter_language(self, value: str) -> None: ...
    # Windows.UI.Xaml.Data.IValueConverter Windows.UI.Xaml.Data.Binding::get_Converter()
    @_property
    def converter(self) -> IValueConverter: ...
    # System.Void Windows.UI.Xaml.Data.Binding::put_Converter(Windows.UI.Xaml.Data.IValueConverter)
    @converter.setter
    @typing.final
    def converter(self, value: ImplementsIValueConverter) -> None: ...
    # Windows.UI.Xaml.Data.UpdateSourceTrigger Windows.UI.Xaml.Data.Binding::get_UpdateSourceTrigger()
    @_property
    def update_source_trigger(self) -> UpdateSourceTrigger: ...
    # System.Void Windows.UI.Xaml.Data.Binding::put_UpdateSourceTrigger(Windows.UI.Xaml.Data.UpdateSourceTrigger)
    @update_source_trigger.setter
    @typing.final
    def update_source_trigger(self, value: UpdateSourceTrigger) -> None: ...
    # System.Object Windows.UI.Xaml.Data.Binding::get_TargetNullValue()
    @_property
    def target_null_value(self) -> winrt.system.Object: ...
    # System.Void Windows.UI.Xaml.Data.Binding::put_TargetNullValue(System.Object)
    @target_null_value.setter
    @typing.final
    def target_null_value(self, value: winrt.system.Object) -> None: ...
    # System.Object Windows.UI.Xaml.Data.Binding::get_FallbackValue()
    @_property
    def fallback_value(self) -> winrt.system.Object: ...
    # System.Void Windows.UI.Xaml.Data.Binding::put_FallbackValue(System.Object)
    @fallback_value.setter
    @typing.final
    def fallback_value(self, value: winrt.system.Object) -> None: ...

class BindingBase_Static(windows_ui_xaml.DependencyObject_Static):
    pass

class BindingBase(windows_ui_xaml.DependencyObject, metaclass=BindingBase_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...

class BindingExpression_Static(BindingExpressionBase_Static):
    pass

class BindingExpression(BindingExpressionBase, metaclass=BindingExpression_Static):
    @typing.final
    # System.Void Windows.UI.Xaml.Data.BindingExpression::UpdateSource()
    def update_source(self) -> None: ...
    # System.Object Windows.UI.Xaml.Data.BindingExpression::get_DataItem()
    @_property
    @typing.final
    def data_item(self) -> winrt.system.Object: ...
    # Windows.UI.Xaml.Data.Binding Windows.UI.Xaml.Data.BindingExpression::get_ParentBinding()
    @_property
    @typing.final
    def parent_binding(self) -> Binding: ...

class BindingExpressionBase_Static(type):
    pass

class BindingExpressionBase(winrt.system.Object, metaclass=BindingExpressionBase_Static):
    pass

@typing.final
class BindingOperations_Static(type):
    # System.Void Windows.UI.Xaml.Data.BindingOperations::SetBinding(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyProperty,Windows.UI.Xaml.Data.BindingBase)
    def set_binding(cls, target: windows_ui_xaml.DependencyObject, dp: windows_ui_xaml.DependencyProperty, binding: BindingBase, /) -> None: ...

@typing.final
class BindingOperations(winrt.system.Object, metaclass=BindingOperations_Static):
    pass

@typing.final
class CollectionViewSource_Static(windows_ui_xaml.DependencyObject_Static):
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Data.CollectionViewSource::get_IsSourceGroupedProperty()
    @_property
    def is_source_grouped_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Data.CollectionViewSource::get_ItemsPathProperty()
    @_property
    def items_path_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Data.CollectionViewSource::get_SourceProperty()
    @_property
    def source_property(cls) -> windows_ui_xaml.DependencyProperty: ...
    # Windows.UI.Xaml.DependencyProperty Windows.UI.Xaml.Data.CollectionViewSource::get_ViewProperty()
    @_property
    def view_property(cls) -> windows_ui_xaml.DependencyProperty: ...

@typing.final
class CollectionViewSource(windows_ui_xaml.DependencyObject, metaclass=CollectionViewSource_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # System.Object Windows.UI.Xaml.Data.CollectionViewSource::get_Source()
    @_property
    def source(self) -> winrt.system.Object: ...
    # System.Void Windows.UI.Xaml.Data.CollectionViewSource::put_Source(System.Object)
    @source.setter
    def source(self, value: winrt.system.Object) -> None: ...
    # Windows.UI.Xaml.PropertyPath Windows.UI.Xaml.Data.CollectionViewSource::get_ItemsPath()
    @_property
    def items_path(self) -> windows_ui_xaml.PropertyPath: ...
    # System.Void Windows.UI.Xaml.Data.CollectionViewSource::put_ItemsPath(Windows.UI.Xaml.PropertyPath)
    @items_path.setter
    def items_path(self, value: windows_ui_xaml.PropertyPath) -> None: ...
    # System.Boolean Windows.UI.Xaml.Data.CollectionViewSource::get_IsSourceGrouped()
    @_property
    def is_source_grouped(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Data.CollectionViewSource::put_IsSourceGrouped(System.Boolean)
    @is_source_grouped.setter
    def is_source_grouped(self, value: bool) -> None: ...
    # Windows.UI.Xaml.Data.ICollectionView Windows.UI.Xaml.Data.CollectionViewSource::get_View()
    @_property
    def view(self) -> ICollectionView: ...

class CurrentChangingEventArgs_Static(type):
    pass

class CurrentChangingEventArgs(winrt.system.Object, metaclass=CurrentChangingEventArgs_Static):
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], is_cancelable: bool) -> Self: ...
    # System.Boolean Windows.UI.Xaml.Data.CurrentChangingEventArgs::get_Cancel()
    @_property
    def cancel(self) -> bool: ...
    # System.Void Windows.UI.Xaml.Data.CurrentChangingEventArgs::put_Cancel(System.Boolean)
    @cancel.setter
    @typing.final
    def cancel(self, value: bool) -> None: ...
    # System.Boolean Windows.UI.Xaml.Data.CurrentChangingEventArgs::get_IsCancelable()
    @_property
    @typing.final
    def is_cancelable(self) -> bool: ...

class ItemIndexRange_Static(type):
    pass

class ItemIndexRange(winrt.system.Object, metaclass=ItemIndexRange_Static):
    def __new__(cls: typing.Type[Self], first_index: winrt.system.Int32, length: winrt.system.UInt32) -> Self: ...
    # System.Int32 Windows.UI.Xaml.Data.ItemIndexRange::get_FirstIndex()
    @_property
    @typing.final
    def first_index(self) -> winrt.system.Int32: ...
    # System.Int32 Windows.UI.Xaml.Data.ItemIndexRange::get_LastIndex()
    @_property
    @typing.final
    def last_index(self) -> winrt.system.Int32: ...
    # System.UInt32 Windows.UI.Xaml.Data.ItemIndexRange::get_Length()
    @_property
    @typing.final
    def length(self) -> winrt.system.UInt32: ...

class PropertyChangedEventArgs_Static(type):
    pass

class PropertyChangedEventArgs(winrt.system.Object, metaclass=PropertyChangedEventArgs_Static):
    def __new__(cls: typing.Type[Self], name: str) -> Self: ...
    # System.String Windows.UI.Xaml.Data.PropertyChangedEventArgs::get_PropertyName()
    @_property
    @typing.final
    def property_name(self) -> str: ...

class RelativeSource_Static(windows_ui_xaml.DependencyObject_Static):
    pass

class RelativeSource(windows_ui_xaml.DependencyObject, metaclass=RelativeSource_Static):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    # Windows.UI.Xaml.Data.RelativeSourceMode Windows.UI.Xaml.Data.RelativeSource::get_Mode()
    @_property
    def mode(self) -> RelativeSourceMode: ...
    # System.Void Windows.UI.Xaml.Data.RelativeSource::put_Mode(Windows.UI.Xaml.Data.RelativeSourceMode)
    @mode.setter
    @typing.final
    def mode(self, value: RelativeSourceMode) -> None: ...

class ImplementsICollectionView():
    pass

@typing.final
class ICollectionView(winrt.system.Object, ImplementsICollectionView, windows_foundation_collections.ImplementsIObservableVector[winrt.system.Object], winrt._winrt.MutableSequence[winrt.system.Object]):
    def __len__(self) -> int: ...
    def __iter__(self) -> windows_foundation_collections.IIterator[winrt.system.Object]: ...
    @typing.overload
    def __getitem__(self, index: typing.SupportsIndex) -> winrt.system.Object: ...
    @typing.overload
    def __getitem__(self, index: slice) -> winrt.system.Array[winrt.system.Object]: ...
    @typing.overload
    def __delitem__(self, index: typing.SupportsIndex) -> None: ...
    @typing.overload
    def __delitem__(self, index: slice) -> None: ...
    @typing.overload
    def __setitem__(self, index: typing.SupportsIndex, value: winrt.system.Object) -> None: ...
    @typing.overload
    def __setitem__(self, index: slice, value: typing.Iterable[winrt.system.Object]) -> None: ...
    # System.Void Windows.Foundation.Collections.IVector`1::Append(T)
    def append(self, value: winrt.system.Object, /) -> None: ...
    # System.Void Windows.Foundation.Collections.IVector`1::Clear()
    def clear(self) -> None: ...
    # Windows.Foundation.Collections.IIterator`1<T> Windows.Foundation.Collections.IIterable`1::First()
    def first(self) -> windows_foundation_collections.IIterator[winrt.system.Object]: ...
    # T Windows.Foundation.Collections.IVector`1::GetAt(System.UInt32)
    def get_at(self, index: winrt.system.UInt32, /) -> winrt.system.Object: ...
    # System.UInt32 Windows.Foundation.Collections.IVector`1::GetMany(System.UInt32,T[])
    def get_many(self, start_index: winrt.system.UInt32, items: typing.Union[winrt.system.Array[winrt.system.Object], winrt.system.WriteableBuffer], /) -> winrt.system.UInt32: ...
    # Windows.Foundation.Collections.IVectorView`1<T> Windows.Foundation.Collections.IVector`1::GetView()
    def get_view(self) -> typing.Sequence[winrt.system.Object]: ...
    # System.Boolean Windows.Foundation.Collections.IVector`1::IndexOf(T,System.UInt32&)
    def index_of(self, value: winrt.system.Object, /) -> typing.Tuple[bool, winrt.system.UInt32]: ...
    # System.Void Windows.Foundation.Collections.IVector`1::InsertAt(System.UInt32,T)
    def insert_at(self, index: winrt.system.UInt32, value: winrt.system.Object, /) -> None: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.UI.Xaml.Data.LoadMoreItemsResult> Windows.UI.Xaml.Data.ICollectionView::LoadMoreItemsAsync(System.UInt32)
    def load_more_items_async(self, count: winrt.system.UInt32, /) -> windows_foundation.IAsyncOperation[LoadMoreItemsResult]: ...
    # System.Boolean Windows.UI.Xaml.Data.ICollectionView::MoveCurrentTo(System.Object)
    def move_current_to(self, item: winrt.system.Object, /) -> bool: ...
    # System.Boolean Windows.UI.Xaml.Data.ICollectionView::MoveCurrentToFirst()
    def move_current_to_first(self) -> bool: ...
    # System.Boolean Windows.UI.Xaml.Data.ICollectionView::MoveCurrentToLast()
    def move_current_to_last(self) -> bool: ...
    # System.Boolean Windows.UI.Xaml.Data.ICollectionView::MoveCurrentToNext()
    def move_current_to_next(self) -> bool: ...
    # System.Boolean Windows.UI.Xaml.Data.ICollectionView::MoveCurrentToPosition(System.Int32)
    def move_current_to_position(self, index: winrt.system.Int32, /) -> bool: ...
    # System.Boolean Windows.UI.Xaml.Data.ICollectionView::MoveCurrentToPrevious()
    def move_current_to_previous(self) -> bool: ...
    # System.Void Windows.Foundation.Collections.IVector`1::RemoveAt(System.UInt32)
    def remove_at(self, index: winrt.system.UInt32, /) -> None: ...
    # System.Void Windows.Foundation.Collections.IVector`1::RemoveAtEnd()
    def remove_at_end(self) -> None: ...
    # System.Void Windows.Foundation.Collections.IVector`1::ReplaceAll(T[])
    def replace_all(self, items: typing.Union[winrt.system.Array[winrt.system.Object], winrt.system.ReadableBuffer], /) -> None: ...
    # System.Void Windows.Foundation.Collections.IVector`1::SetAt(System.UInt32,T)
    def set_at(self, index: winrt.system.UInt32, value: winrt.system.Object, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Data.ICollectionView::add_CurrentChanged(Windows.Foundation.EventHandler`1<System.Object>)
    def add_current_changed(self, handler: windows_foundation.EventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Data.ICollectionView::remove_CurrentChanged(Windows.Foundation.EventRegistrationToken)
    def remove_current_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Data.ICollectionView::add_CurrentChanging(Windows.UI.Xaml.Data.CurrentChangingEventHandler)
    def add_current_changing(self, handler: CurrentChangingEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Data.ICollectionView::remove_CurrentChanging(Windows.Foundation.EventRegistrationToken)
    def remove_current_changing(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.Foundation.Collections.IObservableVector`1::add_VectorChanged(Windows.Foundation.Collections.VectorChangedEventHandler`1<T>)
    def add_vector_changed(self, vhnd: windows_foundation_collections.VectorChangedEventHandler[winrt.system.Object], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.Foundation.Collections.IObservableVector`1::remove_VectorChanged(Windows.Foundation.EventRegistrationToken)
    def remove_vector_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.Collections.IObservableVector`1<System.Object> Windows.UI.Xaml.Data.ICollectionView::get_CollectionGroups()
    @_property
    def collection_groups(self) -> windows_foundation_collections.IObservableVector[winrt.system.Object]: ...
    # System.Object Windows.UI.Xaml.Data.ICollectionView::get_CurrentItem()
    @_property
    def current_item(self) -> winrt.system.Object: ...
    # System.Int32 Windows.UI.Xaml.Data.ICollectionView::get_CurrentPosition()
    @_property
    def current_position(self) -> winrt.system.Int32: ...
    # System.Boolean Windows.UI.Xaml.Data.ICollectionView::get_HasMoreItems()
    @_property
    def has_more_items(self) -> bool: ...
    # System.Boolean Windows.UI.Xaml.Data.ICollectionView::get_IsCurrentAfterLast()
    @_property
    def is_current_after_last(self) -> bool: ...
    # System.Boolean Windows.UI.Xaml.Data.ICollectionView::get_IsCurrentBeforeFirst()
    @_property
    def is_current_before_first(self) -> bool: ...
    # System.UInt32 Windows.Foundation.Collections.IVector`1::get_Size()
    @_property
    def size(self) -> winrt.system.UInt32: ...

class ImplementsICollectionViewFactory():
    pass

@typing.final
class ICollectionViewFactory(winrt.system.Object, ImplementsICollectionViewFactory):
    # Windows.UI.Xaml.Data.ICollectionView Windows.UI.Xaml.Data.ICollectionViewFactory::CreateView()
    def create_view(self) -> ICollectionView: ...

class ImplementsICollectionViewGroup():
    pass

@typing.final
class ICollectionViewGroup(winrt.system.Object, ImplementsICollectionViewGroup):
    # System.Object Windows.UI.Xaml.Data.ICollectionViewGroup::get_Group()
    @_property
    def group(self) -> winrt.system.Object: ...
    # Windows.Foundation.Collections.IObservableVector`1<System.Object> Windows.UI.Xaml.Data.ICollectionViewGroup::get_GroupItems()
    @_property
    def group_items(self) -> windows_foundation_collections.IObservableVector[winrt.system.Object]: ...

class ImplementsICustomProperty():
    pass

@typing.final
class ICustomProperty(winrt.system.Object, ImplementsICustomProperty):
    # System.Object Windows.UI.Xaml.Data.ICustomProperty::GetIndexedValue(System.Object,System.Object)
    def get_indexed_value(self, target: winrt.system.Object, index: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Object Windows.UI.Xaml.Data.ICustomProperty::GetValue(System.Object)
    def get_value(self, target: winrt.system.Object, /) -> winrt.system.Object: ...
    # System.Void Windows.UI.Xaml.Data.ICustomProperty::SetIndexedValue(System.Object,System.Object,System.Object)
    def set_indexed_value(self, target: winrt.system.Object, value: winrt.system.Object, index: winrt.system.Object, /) -> None: ...
    # System.Void Windows.UI.Xaml.Data.ICustomProperty::SetValue(System.Object,System.Object)
    def set_value(self, target: winrt.system.Object, value: winrt.system.Object, /) -> None: ...
    # System.Boolean Windows.UI.Xaml.Data.ICustomProperty::get_CanRead()
    @_property
    def can_read(self) -> bool: ...
    # System.Boolean Windows.UI.Xaml.Data.ICustomProperty::get_CanWrite()
    @_property
    def can_write(self) -> bool: ...
    # System.String Windows.UI.Xaml.Data.ICustomProperty::get_Name()
    @_property
    def name(self) -> str: ...
    # Windows.UI.Xaml.Interop.TypeName Windows.UI.Xaml.Data.ICustomProperty::get_Type()
    @_property
    def type(self) -> windows_ui_xaml_interop.TypeName: ...

class ImplementsICustomPropertyProvider():
    pass

@typing.final
class ICustomPropertyProvider(winrt.system.Object, ImplementsICustomPropertyProvider):
    # Windows.UI.Xaml.Data.ICustomProperty Windows.UI.Xaml.Data.ICustomPropertyProvider::GetCustomProperty(System.String)
    def get_custom_property(self, name: str, /) -> ICustomProperty: ...
    # Windows.UI.Xaml.Data.ICustomProperty Windows.UI.Xaml.Data.ICustomPropertyProvider::GetIndexedProperty(System.String,Windows.UI.Xaml.Interop.TypeName)
    def get_indexed_property(self, name: str, type: windows_ui_xaml_interop.TypeName, /) -> ICustomProperty: ...
    # System.String Windows.UI.Xaml.Data.ICustomPropertyProvider::GetStringRepresentation()
    def get_string_representation(self) -> str: ...
    # Windows.UI.Xaml.Interop.TypeName Windows.UI.Xaml.Data.ICustomPropertyProvider::get_Type()
    @_property
    def type(self) -> windows_ui_xaml_interop.TypeName: ...

class ImplementsIItemsRangeInfo():
    pass

@typing.final
class IItemsRangeInfo(winrt.system.Object, ImplementsIItemsRangeInfo, windows_foundation.ImplementsIClosable):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, exc_type: typing.Optional[typing.Type[BaseException]], exc_value: typing.Optional[BaseException], traceback: typing.Optional[types.TracebackType]) -> None: ...
    # System.Void Windows.Foundation.IClosable::Close()
    def close(self) -> None: ...
    # System.Void Windows.UI.Xaml.Data.IItemsRangeInfo::RangesChanged(Windows.UI.Xaml.Data.ItemIndexRange,Windows.Foundation.Collections.IVectorView`1<Windows.UI.Xaml.Data.ItemIndexRange>)
    def ranges_changed(self, visible_range: ItemIndexRange, tracked_items: typing.Sequence[ItemIndexRange], /) -> None: ...

class ImplementsINotifyPropertyChanged():
    pass

@typing.final
class INotifyPropertyChanged(winrt.system.Object, ImplementsINotifyPropertyChanged):
    # Windows.Foundation.EventRegistrationToken Windows.UI.Xaml.Data.INotifyPropertyChanged::add_PropertyChanged(Windows.UI.Xaml.Data.PropertyChangedEventHandler)
    def add_property_changed(self, handler: PropertyChangedEventHandler, /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.UI.Xaml.Data.INotifyPropertyChanged::remove_PropertyChanged(Windows.Foundation.EventRegistrationToken)
    def remove_property_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

class ImplementsISelectionInfo():
    pass

@typing.final
class ISelectionInfo(winrt.system.Object, ImplementsISelectionInfo):
    # System.Void Windows.UI.Xaml.Data.ISelectionInfo::DeselectRange(Windows.UI.Xaml.Data.ItemIndexRange)
    def deselect_range(self, item_index_range: ItemIndexRange, /) -> None: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.UI.Xaml.Data.ItemIndexRange> Windows.UI.Xaml.Data.ISelectionInfo::GetSelectedRanges()
    def get_selected_ranges(self) -> typing.Sequence[ItemIndexRange]: ...
    # System.Boolean Windows.UI.Xaml.Data.ISelectionInfo::IsSelected(System.Int32)
    def is_selected(self, index: winrt.system.Int32, /) -> bool: ...
    # System.Void Windows.UI.Xaml.Data.ISelectionInfo::SelectRange(Windows.UI.Xaml.Data.ItemIndexRange)
    def select_range(self, item_index_range: ItemIndexRange, /) -> None: ...

class ImplementsISupportIncrementalLoading():
    pass

@typing.final
class ISupportIncrementalLoading(winrt.system.Object, ImplementsISupportIncrementalLoading):
    # Windows.Foundation.IAsyncOperation`1<Windows.UI.Xaml.Data.LoadMoreItemsResult> Windows.UI.Xaml.Data.ISupportIncrementalLoading::LoadMoreItemsAsync(System.UInt32)
    def load_more_items_async(self, count: winrt.system.UInt32, /) -> windows_foundation.IAsyncOperation[LoadMoreItemsResult]: ...
    # System.Boolean Windows.UI.Xaml.Data.ISupportIncrementalLoading::get_HasMoreItems()
    @_property
    def has_more_items(self) -> bool: ...

class ImplementsIValueConverter():
    pass

@typing.final
class IValueConverter(winrt.system.Object, ImplementsIValueConverter):
    # System.Object Windows.UI.Xaml.Data.IValueConverter::Convert(System.Object,Windows.UI.Xaml.Interop.TypeName,System.Object,System.String)
    def convert(self, value: winrt.system.Object, target_type: windows_ui_xaml_interop.TypeName, parameter: winrt.system.Object, language: str, /) -> winrt.system.Object: ...
    # System.Object Windows.UI.Xaml.Data.IValueConverter::ConvertBack(System.Object,Windows.UI.Xaml.Interop.TypeName,System.Object,System.String)
    def convert_back(self, value: winrt.system.Object, target_type: windows_ui_xaml_interop.TypeName, parameter: winrt.system.Object, language: str, /) -> winrt.system.Object: ...

