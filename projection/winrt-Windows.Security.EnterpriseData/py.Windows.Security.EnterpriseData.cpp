// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Security.EnterpriseData.h"


namespace py::cpp::Windows::Security::EnterpriseData
{
    // ----- BufferProtectUnprotectResult class --------------------

    static PyObject* _new_BufferProtectUnprotectResult(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::EnterpriseData::BufferProtectUnprotectResult>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::EnterpriseData::BufferProtectUnprotectResult>::type_name);
        return nullptr;
    }

    static void _dealloc_BufferProtectUnprotectResult(py::wrapper::Windows::Security::EnterpriseData::BufferProtectUnprotectResult* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* BufferProtectUnprotectResult_get_Buffer(py::wrapper::Windows::Security::EnterpriseData::BufferProtectUnprotectResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.BufferProtectUnprotectResult", L"Buffer"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Buffer());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* BufferProtectUnprotectResult_get_ProtectionInfo(py::wrapper::Windows::Security::EnterpriseData::BufferProtectUnprotectResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.BufferProtectUnprotectResult", L"ProtectionInfo"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProtectionInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_BufferProtectUnprotectResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::EnterpriseData::BufferProtectUnprotectResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_BufferProtectUnprotectResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::EnterpriseData::BufferProtectUnprotectResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_BufferProtectUnprotectResult[] = {
        { "_assign_array_", _assign_array_BufferProtectUnprotectResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_BufferProtectUnprotectResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_BufferProtectUnprotectResult[] = {
        { "buffer", reinterpret_cast<getter>(BufferProtectUnprotectResult_get_Buffer), nullptr, nullptr, nullptr },
        { "protection_info", reinterpret_cast<getter>(BufferProtectUnprotectResult_get_ProtectionInfo), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_BufferProtectUnprotectResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_BufferProtectUnprotectResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_BufferProtectUnprotectResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_BufferProtectUnprotectResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_BufferProtectUnprotectResult) },
        { },
    };

    static PyType_Spec type_spec_BufferProtectUnprotectResult =
    {
        "winrt._winrt_windows_security_enterprisedata.BufferProtectUnprotectResult",
        sizeof(py::wrapper::Windows::Security::EnterpriseData::BufferProtectUnprotectResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_BufferProtectUnprotectResult
    };

    // ----- DataProtectionInfo class --------------------

    static PyObject* _new_DataProtectionInfo(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::EnterpriseData::DataProtectionInfo>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::EnterpriseData::DataProtectionInfo>::type_name);
        return nullptr;
    }

    static void _dealloc_DataProtectionInfo(py::wrapper::Windows::Security::EnterpriseData::DataProtectionInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DataProtectionInfo_get_Identity(py::wrapper::Windows::Security::EnterpriseData::DataProtectionInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.DataProtectionInfo", L"Identity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Identity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DataProtectionInfo_get_Status(py::wrapper::Windows::Security::EnterpriseData::DataProtectionInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.DataProtectionInfo", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_DataProtectionInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::EnterpriseData::DataProtectionInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DataProtectionInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::EnterpriseData::DataProtectionInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DataProtectionInfo[] = {
        { "_assign_array_", _assign_array_DataProtectionInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DataProtectionInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DataProtectionInfo[] = {
        { "identity", reinterpret_cast<getter>(DataProtectionInfo_get_Identity), nullptr, nullptr, nullptr },
        { "status", reinterpret_cast<getter>(DataProtectionInfo_get_Status), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DataProtectionInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DataProtectionInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DataProtectionInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DataProtectionInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DataProtectionInfo) },
        { },
    };

    static PyType_Spec type_spec_DataProtectionInfo =
    {
        "winrt._winrt_windows_security_enterprisedata.DataProtectionInfo",
        sizeof(py::wrapper::Windows::Security::EnterpriseData::DataProtectionInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DataProtectionInfo
    };

    // ----- DataProtectionManager class --------------------

    static PyObject* _new_DataProtectionManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::EnterpriseData::DataProtectionManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::EnterpriseData::DataProtectionManager>::type_name);
        return nullptr;
    }

    static PyObject* DataProtectionManager_GetProtectionInfoAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.DataProtectionManager", L"GetProtectionInfoAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::DataProtectionManager::GetProtectionInfoAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DataProtectionManager_GetStreamProtectionInfoAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.DataProtectionManager", L"GetStreamProtectionInfoAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IInputStream>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::DataProtectionManager::GetStreamProtectionInfoAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DataProtectionManager_ProtectAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.DataProtectionManager", L"ProtectAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::EnterpriseData::DataProtectionManager::ProtectAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DataProtectionManager_ProtectStreamAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.DataProtectionManager", L"ProtectStreamAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IInputStream>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Storage::Streams::IOutputStream>(args, 2);

                return py::convert(winrt::Windows::Security::EnterpriseData::DataProtectionManager::ProtectStreamAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DataProtectionManager_UnprotectAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.DataProtectionManager", L"UnprotectAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::DataProtectionManager::UnprotectAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DataProtectionManager_UnprotectStreamAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.DataProtectionManager", L"UnprotectStreamAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IInputStream>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IOutputStream>(args, 1);

                return py::convert(winrt::Windows::Security::EnterpriseData::DataProtectionManager::UnprotectStreamAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_DataProtectionManager[] = {
        { }
    };

    static PyGetSetDef _getset_DataProtectionManager[] = {
        { }
    };

    static PyType_Slot _type_slots_DataProtectionManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DataProtectionManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DataProtectionManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DataProtectionManager) },
        { },
    };

    static PyType_Spec type_spec_DataProtectionManager =
    {
        "winrt._winrt_windows_security_enterprisedata.DataProtectionManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DataProtectionManager
    };

    static PyGetSetDef getset_DataProtectionManager_Static[] = {
        { }
    };

    static PyMethodDef methods_DataProtectionManager_Static[] = {
        { "get_protection_info_async", reinterpret_cast<PyCFunction>(DataProtectionManager_GetProtectionInfoAsync), METH_VARARGS, nullptr },
        { "get_stream_protection_info_async", reinterpret_cast<PyCFunction>(DataProtectionManager_GetStreamProtectionInfoAsync), METH_VARARGS, nullptr },
        { "protect_async", reinterpret_cast<PyCFunction>(DataProtectionManager_ProtectAsync), METH_VARARGS, nullptr },
        { "protect_stream_async", reinterpret_cast<PyCFunction>(DataProtectionManager_ProtectStreamAsync), METH_VARARGS, nullptr },
        { "unprotect_async", reinterpret_cast<PyCFunction>(DataProtectionManager_UnprotectAsync), METH_VARARGS, nullptr },
        { "unprotect_stream_async", reinterpret_cast<PyCFunction>(DataProtectionManager_UnprotectStreamAsync), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_DataProtectionManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_DataProtectionManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_DataProtectionManager_Static) },
        { }
    };

    static PyType_Spec type_spec_DataProtectionManager_Static =
    {
        "winrt._winrt_windows_security_enterprisedata.DataProtectionManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_DataProtectionManager_Static
    };

    // ----- FileProtectionInfo class --------------------

    static PyObject* _new_FileProtectionInfo(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::EnterpriseData::FileProtectionInfo>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::EnterpriseData::FileProtectionInfo>::type_name);
        return nullptr;
    }

    static void _dealloc_FileProtectionInfo(py::wrapper::Windows::Security::EnterpriseData::FileProtectionInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FileProtectionInfo_get_Identity(py::wrapper::Windows::Security::EnterpriseData::FileProtectionInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.FileProtectionInfo", L"Identity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Identity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileProtectionInfo_get_IsRoamable(py::wrapper::Windows::Security::EnterpriseData::FileProtectionInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.FileProtectionInfo", L"IsRoamable"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsRoamable());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileProtectionInfo_get_Status(py::wrapper::Windows::Security::EnterpriseData::FileProtectionInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.FileProtectionInfo", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* FileProtectionInfo_get_IsProtectWhileOpenSupported(py::wrapper::Windows::Security::EnterpriseData::FileProtectionInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.FileProtectionInfo", L"IsProtectWhileOpenSupported"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsProtectWhileOpenSupported());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_FileProtectionInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::EnterpriseData::FileProtectionInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FileProtectionInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::EnterpriseData::FileProtectionInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FileProtectionInfo[] = {
        { "_assign_array_", _assign_array_FileProtectionInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FileProtectionInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_FileProtectionInfo[] = {
        { "identity", reinterpret_cast<getter>(FileProtectionInfo_get_Identity), nullptr, nullptr, nullptr },
        { "is_roamable", reinterpret_cast<getter>(FileProtectionInfo_get_IsRoamable), nullptr, nullptr, nullptr },
        { "status", reinterpret_cast<getter>(FileProtectionInfo_get_Status), nullptr, nullptr, nullptr },
        { "is_protect_while_open_supported", reinterpret_cast<getter>(FileProtectionInfo_get_IsProtectWhileOpenSupported), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_FileProtectionInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_FileProtectionInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FileProtectionInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FileProtectionInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FileProtectionInfo) },
        { },
    };

    static PyType_Spec type_spec_FileProtectionInfo =
    {
        "winrt._winrt_windows_security_enterprisedata.FileProtectionInfo",
        sizeof(py::wrapper::Windows::Security::EnterpriseData::FileProtectionInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileProtectionInfo
    };

    // ----- FileProtectionManager class --------------------

    static PyObject* _new_FileProtectionManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::EnterpriseData::FileProtectionManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::EnterpriseData::FileProtectionManager>::type_name);
        return nullptr;
    }

    static PyObject* FileProtectionManager_CopyProtectionAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.FileProtectionManager", L"CopyProtectionAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);

                return py::convert(winrt::Windows::Security::EnterpriseData::FileProtectionManager::CopyProtectionAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileProtectionManager_CreateProtectedAndOpenAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.FileProtectionManager", L"CreateProtectedAndOpenAsync", 4))
            {
                py::set_arg_count_version_error(4);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFolder>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Storage::CreationCollisionOption>(args, 3);

                return py::convert(winrt::Windows::Security::EnterpriseData::FileProtectionManager::CreateProtectedAndOpenAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileProtectionManager_GetProtectionInfoAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.FileProtectionManager", L"GetProtectionInfoAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::FileProtectionManager::GetProtectionInfoAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileProtectionManager_IsContainerAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.FileProtectionManager", L"IsContainerAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::FileProtectionManager::IsContainerAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileProtectionManager_LoadFileFromContainerAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.FileProtectionManager", L"LoadFileFromContainerAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::FileProtectionManager::LoadFileFromContainerAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.FileProtectionManager", L"LoadFileFromContainerAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);

                return py::convert(winrt::Windows::Security::EnterpriseData::FileProtectionManager::LoadFileFromContainerAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.FileProtectionManager", L"LoadFileFromContainerAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Storage::NameCollisionOption>(args, 2);

                return py::convert(winrt::Windows::Security::EnterpriseData::FileProtectionManager::LoadFileFromContainerAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileProtectionManager_ProtectAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.FileProtectionManager", L"ProtectAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::EnterpriseData::FileProtectionManager::ProtectAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileProtectionManager_SaveFileAsContainerAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.FileProtectionManager", L"SaveFileAsContainerAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::FileProtectionManager::SaveFileAsContainerAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.FileProtectionManager", L"SaveFileAsContainerAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 1);

                return py::convert(winrt::Windows::Security::EnterpriseData::FileProtectionManager::SaveFileAsContainerAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileProtectionManager_UnprotectAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.FileProtectionManager", L"UnprotectAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::FileProtectionManager::UnprotectAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.FileProtectionManager", L"UnprotectAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Security::EnterpriseData::FileUnprotectOptions>(args, 1);

                return py::convert(winrt::Windows::Security::EnterpriseData::FileProtectionManager::UnprotectAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_FileProtectionManager[] = {
        { }
    };

    static PyGetSetDef _getset_FileProtectionManager[] = {
        { }
    };

    static PyType_Slot _type_slots_FileProtectionManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_FileProtectionManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FileProtectionManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FileProtectionManager) },
        { },
    };

    static PyType_Spec type_spec_FileProtectionManager =
    {
        "winrt._winrt_windows_security_enterprisedata.FileProtectionManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileProtectionManager
    };

    static PyGetSetDef getset_FileProtectionManager_Static[] = {
        { }
    };

    static PyMethodDef methods_FileProtectionManager_Static[] = {
        { "copy_protection_async", reinterpret_cast<PyCFunction>(FileProtectionManager_CopyProtectionAsync), METH_VARARGS, nullptr },
        { "create_protected_and_open_async", reinterpret_cast<PyCFunction>(FileProtectionManager_CreateProtectedAndOpenAsync), METH_VARARGS, nullptr },
        { "get_protection_info_async", reinterpret_cast<PyCFunction>(FileProtectionManager_GetProtectionInfoAsync), METH_VARARGS, nullptr },
        { "is_container_async", reinterpret_cast<PyCFunction>(FileProtectionManager_IsContainerAsync), METH_VARARGS, nullptr },
        { "load_file_from_container_async", reinterpret_cast<PyCFunction>(FileProtectionManager_LoadFileFromContainerAsync), METH_VARARGS, nullptr },
        { "protect_async", reinterpret_cast<PyCFunction>(FileProtectionManager_ProtectAsync), METH_VARARGS, nullptr },
        { "save_file_as_container_async", reinterpret_cast<PyCFunction>(FileProtectionManager_SaveFileAsContainerAsync), METH_VARARGS, nullptr },
        { "unprotect_async", reinterpret_cast<PyCFunction>(FileProtectionManager_UnprotectAsync), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_FileProtectionManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_FileProtectionManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_FileProtectionManager_Static) },
        { }
    };

    static PyType_Spec type_spec_FileProtectionManager_Static =
    {
        "winrt._winrt_windows_security_enterprisedata.FileProtectionManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_FileProtectionManager_Static
    };

    // ----- FileRevocationManager class --------------------

    static PyObject* _new_FileRevocationManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::EnterpriseData::FileRevocationManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::EnterpriseData::FileRevocationManager>::type_name);
        return nullptr;
    }

    static PyObject* FileRevocationManager_CopyProtectionAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.FileRevocationManager", L"CopyProtectionAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 1);

                return py::convert(winrt::Windows::Security::EnterpriseData::FileRevocationManager::CopyProtectionAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileRevocationManager_GetStatusAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.FileRevocationManager", L"GetStatusAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::FileRevocationManager::GetStatusAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileRevocationManager_ProtectAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.FileRevocationManager", L"ProtectAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::EnterpriseData::FileRevocationManager::ProtectAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* FileRevocationManager_Revoke(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.FileRevocationManager", L"Revoke", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Security::EnterpriseData::FileRevocationManager::Revoke(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_FileRevocationManager[] = {
        { }
    };

    static PyGetSetDef _getset_FileRevocationManager[] = {
        { }
    };

    static PyType_Slot _type_slots_FileRevocationManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_FileRevocationManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FileRevocationManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FileRevocationManager) },
        { },
    };

    static PyType_Spec type_spec_FileRevocationManager =
    {
        "winrt._winrt_windows_security_enterprisedata.FileRevocationManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileRevocationManager
    };

    static PyGetSetDef getset_FileRevocationManager_Static[] = {
        { }
    };

    static PyMethodDef methods_FileRevocationManager_Static[] = {
        { "copy_protection_async", reinterpret_cast<PyCFunction>(FileRevocationManager_CopyProtectionAsync), METH_VARARGS, nullptr },
        { "get_status_async", reinterpret_cast<PyCFunction>(FileRevocationManager_GetStatusAsync), METH_VARARGS, nullptr },
        { "protect_async", reinterpret_cast<PyCFunction>(FileRevocationManager_ProtectAsync), METH_VARARGS, nullptr },
        { "revoke", reinterpret_cast<PyCFunction>(FileRevocationManager_Revoke), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_FileRevocationManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_FileRevocationManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_FileRevocationManager_Static) },
        { }
    };

    static PyType_Spec type_spec_FileRevocationManager_Static =
    {
        "winrt._winrt_windows_security_enterprisedata.FileRevocationManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_FileRevocationManager_Static
    };

    // ----- FileUnprotectOptions class --------------------

    static PyObject* _new_FileUnprotectOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<bool>(args, 0);

                winrt::Windows::Security::EnterpriseData::FileUnprotectOptions instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_FileUnprotectOptions(py::wrapper::Windows::Security::EnterpriseData::FileUnprotectOptions* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* FileUnprotectOptions_get_Audit(py::wrapper::Windows::Security::EnterpriseData::FileUnprotectOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.FileUnprotectOptions", L"Audit"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Audit());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int FileUnprotectOptions_put_Audit(py::wrapper::Windows::Security::EnterpriseData::FileUnprotectOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.FileUnprotectOptions", L"Audit"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Audit(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_FileUnprotectOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::EnterpriseData::FileUnprotectOptions>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_FileUnprotectOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::EnterpriseData::FileUnprotectOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_FileUnprotectOptions[] = {
        { "_assign_array_", _assign_array_FileUnprotectOptions, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_FileUnprotectOptions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_FileUnprotectOptions[] = {
        { "audit", reinterpret_cast<getter>(FileUnprotectOptions_get_Audit), reinterpret_cast<setter>(FileUnprotectOptions_put_Audit), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_FileUnprotectOptions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_FileUnprotectOptions) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_FileUnprotectOptions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_FileUnprotectOptions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_FileUnprotectOptions) },
        { },
    };

    static PyType_Spec type_spec_FileUnprotectOptions =
    {
        "winrt._winrt_windows_security_enterprisedata.FileUnprotectOptions",
        sizeof(py::wrapper::Windows::Security::EnterpriseData::FileUnprotectOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_FileUnprotectOptions
    };

    // ----- ProtectedAccessResumedEventArgs class --------------------

    static PyObject* _new_ProtectedAccessResumedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_ProtectedAccessResumedEventArgs(py::wrapper::Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ProtectedAccessResumedEventArgs_get_Identities(py::wrapper::Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectedAccessResumedEventArgs", L"Identities"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Identities());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ProtectedAccessResumedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ProtectedAccessResumedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProtectedAccessResumedEventArgs[] = {
        { "_assign_array_", _assign_array_ProtectedAccessResumedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ProtectedAccessResumedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ProtectedAccessResumedEventArgs[] = {
        { "identities", reinterpret_cast<getter>(ProtectedAccessResumedEventArgs_get_Identities), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ProtectedAccessResumedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ProtectedAccessResumedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ProtectedAccessResumedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ProtectedAccessResumedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ProtectedAccessResumedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_ProtectedAccessResumedEventArgs =
    {
        "winrt._winrt_windows_security_enterprisedata.ProtectedAccessResumedEventArgs",
        sizeof(py::wrapper::Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProtectedAccessResumedEventArgs
    };

    // ----- ProtectedAccessSuspendingEventArgs class --------------------

    static PyObject* _new_ProtectedAccessSuspendingEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_ProtectedAccessSuspendingEventArgs(py::wrapper::Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ProtectedAccessSuspendingEventArgs_GetDeferral(py::wrapper::Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectedAccessSuspendingEventArgs", L"GetDeferral", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectedAccessSuspendingEventArgs_get_Deadline(py::wrapper::Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectedAccessSuspendingEventArgs", L"Deadline"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Deadline());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProtectedAccessSuspendingEventArgs_get_Identities(py::wrapper::Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectedAccessSuspendingEventArgs", L"Identities"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Identities());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ProtectedAccessSuspendingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ProtectedAccessSuspendingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProtectedAccessSuspendingEventArgs[] = {
        { "get_deferral", reinterpret_cast<PyCFunction>(ProtectedAccessSuspendingEventArgs_GetDeferral), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ProtectedAccessSuspendingEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ProtectedAccessSuspendingEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ProtectedAccessSuspendingEventArgs[] = {
        { "deadline", reinterpret_cast<getter>(ProtectedAccessSuspendingEventArgs_get_Deadline), nullptr, nullptr, nullptr },
        { "identities", reinterpret_cast<getter>(ProtectedAccessSuspendingEventArgs_get_Identities), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ProtectedAccessSuspendingEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ProtectedAccessSuspendingEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ProtectedAccessSuspendingEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ProtectedAccessSuspendingEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ProtectedAccessSuspendingEventArgs) },
        { },
    };

    static PyType_Spec type_spec_ProtectedAccessSuspendingEventArgs =
    {
        "winrt._winrt_windows_security_enterprisedata.ProtectedAccessSuspendingEventArgs",
        sizeof(py::wrapper::Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProtectedAccessSuspendingEventArgs
    };

    // ----- ProtectedContainerExportResult class --------------------

    static PyObject* _new_ProtectedContainerExportResult(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::EnterpriseData::ProtectedContainerExportResult>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::EnterpriseData::ProtectedContainerExportResult>::type_name);
        return nullptr;
    }

    static void _dealloc_ProtectedContainerExportResult(py::wrapper::Windows::Security::EnterpriseData::ProtectedContainerExportResult* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ProtectedContainerExportResult_get_File(py::wrapper::Windows::Security::EnterpriseData::ProtectedContainerExportResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectedContainerExportResult", L"File"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.File());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProtectedContainerExportResult_get_Status(py::wrapper::Windows::Security::EnterpriseData::ProtectedContainerExportResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectedContainerExportResult", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ProtectedContainerExportResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::EnterpriseData::ProtectedContainerExportResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ProtectedContainerExportResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::EnterpriseData::ProtectedContainerExportResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProtectedContainerExportResult[] = {
        { "_assign_array_", _assign_array_ProtectedContainerExportResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ProtectedContainerExportResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ProtectedContainerExportResult[] = {
        { "file", reinterpret_cast<getter>(ProtectedContainerExportResult_get_File), nullptr, nullptr, nullptr },
        { "status", reinterpret_cast<getter>(ProtectedContainerExportResult_get_Status), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ProtectedContainerExportResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ProtectedContainerExportResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ProtectedContainerExportResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ProtectedContainerExportResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ProtectedContainerExportResult) },
        { },
    };

    static PyType_Spec type_spec_ProtectedContainerExportResult =
    {
        "winrt._winrt_windows_security_enterprisedata.ProtectedContainerExportResult",
        sizeof(py::wrapper::Windows::Security::EnterpriseData::ProtectedContainerExportResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProtectedContainerExportResult
    };

    // ----- ProtectedContainerImportResult class --------------------

    static PyObject* _new_ProtectedContainerImportResult(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::EnterpriseData::ProtectedContainerImportResult>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::EnterpriseData::ProtectedContainerImportResult>::type_name);
        return nullptr;
    }

    static void _dealloc_ProtectedContainerImportResult(py::wrapper::Windows::Security::EnterpriseData::ProtectedContainerImportResult* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ProtectedContainerImportResult_get_File(py::wrapper::Windows::Security::EnterpriseData::ProtectedContainerImportResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectedContainerImportResult", L"File"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.File());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProtectedContainerImportResult_get_Status(py::wrapper::Windows::Security::EnterpriseData::ProtectedContainerImportResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectedContainerImportResult", L"Status"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ProtectedContainerImportResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::EnterpriseData::ProtectedContainerImportResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ProtectedContainerImportResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::EnterpriseData::ProtectedContainerImportResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProtectedContainerImportResult[] = {
        { "_assign_array_", _assign_array_ProtectedContainerImportResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ProtectedContainerImportResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ProtectedContainerImportResult[] = {
        { "file", reinterpret_cast<getter>(ProtectedContainerImportResult_get_File), nullptr, nullptr, nullptr },
        { "status", reinterpret_cast<getter>(ProtectedContainerImportResult_get_Status), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ProtectedContainerImportResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ProtectedContainerImportResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ProtectedContainerImportResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ProtectedContainerImportResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ProtectedContainerImportResult) },
        { },
    };

    static PyType_Spec type_spec_ProtectedContainerImportResult =
    {
        "winrt._winrt_windows_security_enterprisedata.ProtectedContainerImportResult",
        sizeof(py::wrapper::Windows::Security::EnterpriseData::ProtectedContainerImportResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProtectedContainerImportResult
    };

    // ----- ProtectedContentRevokedEventArgs class --------------------

    static PyObject* _new_ProtectedContentRevokedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_ProtectedContentRevokedEventArgs(py::wrapper::Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ProtectedContentRevokedEventArgs_get_Identities(py::wrapper::Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectedContentRevokedEventArgs", L"Identities"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Identities());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ProtectedContentRevokedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ProtectedContentRevokedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProtectedContentRevokedEventArgs[] = {
        { "_assign_array_", _assign_array_ProtectedContentRevokedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ProtectedContentRevokedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ProtectedContentRevokedEventArgs[] = {
        { "identities", reinterpret_cast<getter>(ProtectedContentRevokedEventArgs_get_Identities), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ProtectedContentRevokedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ProtectedContentRevokedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ProtectedContentRevokedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ProtectedContentRevokedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ProtectedContentRevokedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_ProtectedContentRevokedEventArgs =
    {
        "winrt._winrt_windows_security_enterprisedata.ProtectedContentRevokedEventArgs",
        sizeof(py::wrapper::Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProtectedContentRevokedEventArgs
    };

    // ----- ProtectedFileCreateResult class --------------------

    static PyObject* _new_ProtectedFileCreateResult(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::EnterpriseData::ProtectedFileCreateResult>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::EnterpriseData::ProtectedFileCreateResult>::type_name);
        return nullptr;
    }

    static void _dealloc_ProtectedFileCreateResult(py::wrapper::Windows::Security::EnterpriseData::ProtectedFileCreateResult* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ProtectedFileCreateResult_get_File(py::wrapper::Windows::Security::EnterpriseData::ProtectedFileCreateResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectedFileCreateResult", L"File"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.File());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProtectedFileCreateResult_get_ProtectionInfo(py::wrapper::Windows::Security::EnterpriseData::ProtectedFileCreateResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectedFileCreateResult", L"ProtectionInfo"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ProtectionInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProtectedFileCreateResult_get_Stream(py::wrapper::Windows::Security::EnterpriseData::ProtectedFileCreateResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectedFileCreateResult", L"Stream"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Stream());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ProtectedFileCreateResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::EnterpriseData::ProtectedFileCreateResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ProtectedFileCreateResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::EnterpriseData::ProtectedFileCreateResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProtectedFileCreateResult[] = {
        { "_assign_array_", _assign_array_ProtectedFileCreateResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ProtectedFileCreateResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ProtectedFileCreateResult[] = {
        { "file", reinterpret_cast<getter>(ProtectedFileCreateResult_get_File), nullptr, nullptr, nullptr },
        { "protection_info", reinterpret_cast<getter>(ProtectedFileCreateResult_get_ProtectionInfo), nullptr, nullptr, nullptr },
        { "stream", reinterpret_cast<getter>(ProtectedFileCreateResult_get_Stream), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ProtectedFileCreateResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ProtectedFileCreateResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ProtectedFileCreateResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ProtectedFileCreateResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ProtectedFileCreateResult) },
        { },
    };

    static PyType_Spec type_spec_ProtectedFileCreateResult =
    {
        "winrt._winrt_windows_security_enterprisedata.ProtectedFileCreateResult",
        sizeof(py::wrapper::Windows::Security::EnterpriseData::ProtectedFileCreateResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProtectedFileCreateResult
    };

    // ----- ProtectionPolicyAuditInfo class --------------------

    static PyObject* _new_ProtectionPolicyAuditInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditAction>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);

                winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo instance{ param0, param1, param2, param3 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditAction>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_ProtectionPolicyAuditInfo(py::wrapper::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ProtectionPolicyAuditInfo_get_TargetDescription(py::wrapper::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo", L"TargetDescription"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TargetDescription());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProtectionPolicyAuditInfo_put_TargetDescription(py::wrapper::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo", L"TargetDescription"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.TargetDescription(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProtectionPolicyAuditInfo_get_SourceDescription(py::wrapper::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo", L"SourceDescription"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SourceDescription());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProtectionPolicyAuditInfo_put_SourceDescription(py::wrapper::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo", L"SourceDescription"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.SourceDescription(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProtectionPolicyAuditInfo_get_DataDescription(py::wrapper::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo", L"DataDescription"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DataDescription());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProtectionPolicyAuditInfo_put_DataDescription(py::wrapper::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo", L"DataDescription"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DataDescription(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProtectionPolicyAuditInfo_get_Action(py::wrapper::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo", L"Action"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Action());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProtectionPolicyAuditInfo_put_Action(py::wrapper::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyAuditInfo", L"Action"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditAction>(arg);

            self->obj.Action(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_ProtectionPolicyAuditInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ProtectionPolicyAuditInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProtectionPolicyAuditInfo[] = {
        { "_assign_array_", _assign_array_ProtectionPolicyAuditInfo, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ProtectionPolicyAuditInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ProtectionPolicyAuditInfo[] = {
        { "target_description", reinterpret_cast<getter>(ProtectionPolicyAuditInfo_get_TargetDescription), reinterpret_cast<setter>(ProtectionPolicyAuditInfo_put_TargetDescription), nullptr, nullptr },
        { "source_description", reinterpret_cast<getter>(ProtectionPolicyAuditInfo_get_SourceDescription), reinterpret_cast<setter>(ProtectionPolicyAuditInfo_put_SourceDescription), nullptr, nullptr },
        { "data_description", reinterpret_cast<getter>(ProtectionPolicyAuditInfo_get_DataDescription), reinterpret_cast<setter>(ProtectionPolicyAuditInfo_put_DataDescription), nullptr, nullptr },
        { "action", reinterpret_cast<getter>(ProtectionPolicyAuditInfo_get_Action), reinterpret_cast<setter>(ProtectionPolicyAuditInfo_put_Action), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ProtectionPolicyAuditInfo[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ProtectionPolicyAuditInfo) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ProtectionPolicyAuditInfo) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ProtectionPolicyAuditInfo) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ProtectionPolicyAuditInfo) },
        { },
    };

    static PyType_Spec type_spec_ProtectionPolicyAuditInfo =
    {
        "winrt._winrt_windows_security_enterprisedata.ProtectionPolicyAuditInfo",
        sizeof(py::wrapper::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProtectionPolicyAuditInfo
    };

    // ----- ProtectionPolicyManager class --------------------

    static PyObject* _new_ProtectionPolicyManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager>::type_name);
        return nullptr;
    }

    static void _dealloc_ProtectionPolicyManager(py::wrapper::Windows::Security::EnterpriseData::ProtectionPolicyManager* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ProtectionPolicyManager_CheckAccess(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"CheckAccess", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::CheckAccess(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_CheckAccessForApp(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"CheckAccessForApp", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::CheckAccessForApp(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_ClearProcessUIPolicy(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"ClearProcessUIPolicy", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::ClearProcessUIPolicy();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_CreateCurrentThreadNetworkContext(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"CreateCurrentThreadNetworkContext", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::CreateCurrentThreadNetworkContext(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_GetEnforcementLevel(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"GetEnforcementLevel", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::GetEnforcementLevel(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"GetForCurrentView", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_GetPrimaryManagedIdentityForIdentity(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"GetPrimaryManagedIdentityForIdentity", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::GetPrimaryManagedIdentityForIdentity(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_GetPrimaryManagedIdentityForNetworkEndpointAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"GetPrimaryManagedIdentityForNetworkEndpointAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Networking::HostName>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::GetPrimaryManagedIdentityForNetworkEndpointAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_HasContentBeenRevokedSince(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"HasContentBeenRevokedSince", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::DateTime>(args, 1);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::HasContentBeenRevokedSince(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_IsFileProtectionRequiredAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"IsFileProtectionRequiredAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageItem>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::IsFileProtectionRequiredAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_IsFileProtectionRequiredForNewFileAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"IsFileProtectionRequiredForNewFileAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFolder>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::IsFileProtectionRequiredForNewFileAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_IsIdentityManaged(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"IsIdentityManaged", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::IsIdentityManaged(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_IsProtectionUnderLockRequired(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"IsProtectionUnderLockRequired", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::IsProtectionUnderLockRequired(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_IsRoamableProtectionEnabled(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"IsRoamableProtectionEnabled", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::IsRoamableProtectionEnabled(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_IsUserDecryptionAllowed(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"IsUserDecryptionAllowed", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::IsUserDecryptionAllowed(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_LogAuditEvent(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"LogAuditEvent", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo>(args, 2);

                winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::LogAuditEvent(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_RequestAccessAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"RequestAccessAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::RequestAccessAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"RequestAccessAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo>(args, 2);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::RequestAccessAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"RequestAccessAsync", 4))
            {
                py::set_arg_count_version_error(4);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::RequestAccessAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 5)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"RequestAccessAsync", 5))
            {
                py::set_arg_count_version_error(5);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyRequestAccessBehavior>(args, 4);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::RequestAccessAsync(param0, param1, param2, param3, param4));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_RequestAccessForAppAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"RequestAccessForAppAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::RequestAccessForAppAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"RequestAccessForAppAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo>(args, 2);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::RequestAccessForAppAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"RequestAccessForAppAsync", 4))
            {
                py::set_arg_count_version_error(4);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::RequestAccessForAppAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 5)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"RequestAccessForAppAsync", 5))
            {
                py::set_arg_count_version_error(5);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyRequestAccessBehavior>(args, 4);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::RequestAccessForAppAsync(param0, param1, param2, param3, param4));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_RequestAccessToFilesForAppAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"RequestAccessToFilesForAppAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Storage::IStorageItem>>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo>(args, 2);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::RequestAccessToFilesForAppAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 5)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"RequestAccessToFilesForAppAsync", 5))
            {
                py::set_arg_count_version_error(5);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Storage::IStorageItem>>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyRequestAccessBehavior>(args, 4);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::RequestAccessToFilesForAppAsync(param0, param1, param2, param3, param4));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_RequestAccessToFilesForProcessAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"RequestAccessToFilesForProcessAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Storage::IStorageItem>>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo>(args, 2);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::RequestAccessToFilesForProcessAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 5)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"RequestAccessToFilesForProcessAsync", 5))
            {
                py::set_arg_count_version_error(5);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Storage::IStorageItem>>(args, 0);
                auto param1 = py::convert_to<uint32_t>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyAuditInfo>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Security::EnterpriseData::ProtectionPolicyRequestAccessBehavior>(args, 4);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::RequestAccessToFilesForProcessAsync(param0, param1, param2, param3, param4));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_RevokeContent(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"RevokeContent", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::RevokeContent(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_TryApplyProcessUIPolicy(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"TryApplyProcessUIPolicy", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::TryApplyProcessUIPolicy(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_get_Identity(py::wrapper::Windows::Security::EnterpriseData::ProtectionPolicyManager* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"Identity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Identity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProtectionPolicyManager_put_Identity(py::wrapper::Windows::Security::EnterpriseData::ProtectionPolicyManager* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"Identity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Identity(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProtectionPolicyManager_get_ShowEnterpriseIndicator(py::wrapper::Windows::Security::EnterpriseData::ProtectionPolicyManager* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"ShowEnterpriseIndicator"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ShowEnterpriseIndicator());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ProtectionPolicyManager_put_ShowEnterpriseIndicator(py::wrapper::Windows::Security::EnterpriseData::ProtectionPolicyManager* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"ShowEnterpriseIndicator"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.ShowEnterpriseIndicator(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ProtectionPolicyManager_get_IsProtectionEnabled(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"IsProtectionEnabled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::IsProtectionEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_get_PrimaryManagedIdentity(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"PrimaryManagedIdentity"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::PrimaryManagedIdentity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_add_PolicyChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"PolicyChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::PolicyChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_remove_PolicyChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"PolicyChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::PolicyChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_add_ProtectedAccessResumed(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"ProtectedAccessResumed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs>>(arg);

            return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::ProtectedAccessResumed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_remove_ProtectedAccessResumed(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"ProtectedAccessResumed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::ProtectedAccessResumed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_add_ProtectedAccessSuspending(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"ProtectedAccessSuspending"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs>>(arg);

            return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::ProtectedAccessSuspending(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_remove_ProtectedAccessSuspending(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"ProtectedAccessSuspending"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::ProtectedAccessSuspending(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_add_ProtectedContentRevoked(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"ProtectedContentRevoked"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs>>(arg);

            return py::convert(winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::ProtectedContentRevoked(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ProtectionPolicyManager_remove_ProtectedContentRevoked(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Security.EnterpriseData.ProtectionPolicyManager", L"ProtectedContentRevoked"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager::ProtectedContentRevoked(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_ProtectionPolicyManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ProtectionPolicyManager(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::EnterpriseData::ProtectionPolicyManager>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ProtectionPolicyManager[] = {
        { "add_policy_changed", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_add_PolicyChanged), METH_O | METH_STATIC, nullptr },
        { "remove_policy_changed", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_remove_PolicyChanged), METH_O | METH_STATIC, nullptr },
        { "add_protected_access_resumed", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_add_ProtectedAccessResumed), METH_O | METH_STATIC, nullptr },
        { "remove_protected_access_resumed", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_remove_ProtectedAccessResumed), METH_O | METH_STATIC, nullptr },
        { "add_protected_access_suspending", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_add_ProtectedAccessSuspending), METH_O | METH_STATIC, nullptr },
        { "remove_protected_access_suspending", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_remove_ProtectedAccessSuspending), METH_O | METH_STATIC, nullptr },
        { "add_protected_content_revoked", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_add_ProtectedContentRevoked), METH_O | METH_STATIC, nullptr },
        { "remove_protected_content_revoked", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_remove_ProtectedContentRevoked), METH_O | METH_STATIC, nullptr },
        { "_assign_array_", _assign_array_ProtectionPolicyManager, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ProtectionPolicyManager), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ProtectionPolicyManager[] = {
        { "identity", reinterpret_cast<getter>(ProtectionPolicyManager_get_Identity), reinterpret_cast<setter>(ProtectionPolicyManager_put_Identity), nullptr, nullptr },
        { "show_enterprise_indicator", reinterpret_cast<getter>(ProtectionPolicyManager_get_ShowEnterpriseIndicator), reinterpret_cast<setter>(ProtectionPolicyManager_put_ShowEnterpriseIndicator), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ProtectionPolicyManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ProtectionPolicyManager) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ProtectionPolicyManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ProtectionPolicyManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ProtectionPolicyManager) },
        { },
    };

    static PyType_Spec type_spec_ProtectionPolicyManager =
    {
        "winrt._winrt_windows_security_enterprisedata.ProtectionPolicyManager",
        sizeof(py::wrapper::Windows::Security::EnterpriseData::ProtectionPolicyManager),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ProtectionPolicyManager
    };

    static PyGetSetDef getset_ProtectionPolicyManager_Static[] = {
        { "is_protection_enabled", reinterpret_cast<getter>(ProtectionPolicyManager_get_IsProtectionEnabled), nullptr, nullptr, nullptr },
        { "primary_managed_identity", reinterpret_cast<getter>(ProtectionPolicyManager_get_PrimaryManagedIdentity), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_ProtectionPolicyManager_Static[] = {
        { "check_access", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_CheckAccess), METH_VARARGS, nullptr },
        { "check_access_for_app", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_CheckAccessForApp), METH_VARARGS, nullptr },
        { "clear_process_u_i_policy", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_ClearProcessUIPolicy), METH_VARARGS, nullptr },
        { "create_current_thread_network_context", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_CreateCurrentThreadNetworkContext), METH_VARARGS, nullptr },
        { "get_enforcement_level", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_GetEnforcementLevel), METH_VARARGS, nullptr },
        { "get_for_current_view", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_GetForCurrentView), METH_VARARGS, nullptr },
        { "get_primary_managed_identity_for_identity", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_GetPrimaryManagedIdentityForIdentity), METH_VARARGS, nullptr },
        { "get_primary_managed_identity_for_network_endpoint_async", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_GetPrimaryManagedIdentityForNetworkEndpointAsync), METH_VARARGS, nullptr },
        { "has_content_been_revoked_since", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_HasContentBeenRevokedSince), METH_VARARGS, nullptr },
        { "is_file_protection_required_async", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_IsFileProtectionRequiredAsync), METH_VARARGS, nullptr },
        { "is_file_protection_required_for_new_file_async", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_IsFileProtectionRequiredForNewFileAsync), METH_VARARGS, nullptr },
        { "is_identity_managed", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_IsIdentityManaged), METH_VARARGS, nullptr },
        { "is_protection_under_lock_required", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_IsProtectionUnderLockRequired), METH_VARARGS, nullptr },
        { "is_roamable_protection_enabled", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_IsRoamableProtectionEnabled), METH_VARARGS, nullptr },
        { "is_user_decryption_allowed", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_IsUserDecryptionAllowed), METH_VARARGS, nullptr },
        { "log_audit_event", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_LogAuditEvent), METH_VARARGS, nullptr },
        { "request_access_async", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_RequestAccessAsync), METH_VARARGS, nullptr },
        { "request_access_for_app_async", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_RequestAccessForAppAsync), METH_VARARGS, nullptr },
        { "request_access_to_files_for_app_async", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_RequestAccessToFilesForAppAsync), METH_VARARGS, nullptr },
        { "request_access_to_files_for_process_async", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_RequestAccessToFilesForProcessAsync), METH_VARARGS, nullptr },
        { "revoke_content", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_RevokeContent), METH_VARARGS, nullptr },
        { "try_apply_process_u_i_policy", reinterpret_cast<PyCFunction>(ProtectionPolicyManager_TryApplyProcessUIPolicy), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_ProtectionPolicyManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_ProtectionPolicyManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_ProtectionPolicyManager_Static) },
        { }
    };

    static PyType_Spec type_spec_ProtectionPolicyManager_Static =
    {
        "winrt._winrt_windows_security_enterprisedata.ProtectionPolicyManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_ProtectionPolicyManager_Static
    };

    // ----- ThreadNetworkContext class --------------------

    static PyObject* _new_ThreadNetworkContext(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::EnterpriseData::ThreadNetworkContext>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::EnterpriseData::ThreadNetworkContext>::type_name);
        return nullptr;
    }

    static void _dealloc_ThreadNetworkContext(py::wrapper::Windows::Security::EnterpriseData::ThreadNetworkContext* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ThreadNetworkContext_Close(py::wrapper::Windows::Security::EnterpriseData::ThreadNetworkContext* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.EnterpriseData.ThreadNetworkContext", L"Close", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_ThreadNetworkContext(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::EnterpriseData::ThreadNetworkContext>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ThreadNetworkContext(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::EnterpriseData::ThreadNetworkContext>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_ThreadNetworkContext(py::wrapper::Windows::Security::EnterpriseData::ThreadNetworkContext* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_ThreadNetworkContext(py::wrapper::Windows::Security::EnterpriseData::ThreadNetworkContext* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ThreadNetworkContext[] = {
        { "close", reinterpret_cast<PyCFunction>(ThreadNetworkContext_Close), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ThreadNetworkContext, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ThreadNetworkContext), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_ThreadNetworkContext), METH_NOARGS, nullptr },
        { "__exit__",  reinterpret_cast<PyCFunction>(_exit_ThreadNetworkContext), METH_VARARGS, nullptr },
        { }
    };

    static PyGetSetDef _getset_ThreadNetworkContext[] = {
        { }
    };

    static PyType_Slot _type_slots_ThreadNetworkContext[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_ThreadNetworkContext) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ThreadNetworkContext) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ThreadNetworkContext) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ThreadNetworkContext) },
        { },
    };

    static PyType_Spec type_spec_ThreadNetworkContext =
    {
        "winrt._winrt_windows_security_enterprisedata.ThreadNetworkContext",
        sizeof(py::wrapper::Windows::Security::EnterpriseData::ThreadNetworkContext),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ThreadNetworkContext
    };

    // ----- Windows.Security.EnterpriseData Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Security::EnterpriseData");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_security_enterprisedata",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Security::EnterpriseData

PyMODINIT_FUNC PyInit__winrt_windows_security_enterprisedata(void) noexcept
{
    using namespace py::cpp::Windows::Security::EnterpriseData;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_BufferProtectUnprotectResult, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_DataProtectionInfo, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_DataProtectionManager_Static{PyType_FromSpec(&type_spec_DataProtectionManager_Static)};
    if (!type_DataProtectionManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_DataProtectionManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_DataProtectionManager_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_FileProtectionInfo, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_FileProtectionManager_Static{PyType_FromSpec(&type_spec_FileProtectionManager_Static)};
    if (!type_FileProtectionManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_FileProtectionManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_FileProtectionManager_Static.get())) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_FileRevocationManager_Static{PyType_FromSpec(&type_spec_FileRevocationManager_Static)};
    if (!type_FileRevocationManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_FileRevocationManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_FileRevocationManager_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_FileUnprotectOptions, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ProtectedAccessResumedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ProtectedAccessSuspendingEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ProtectedContainerExportResult, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ProtectedContainerImportResult, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ProtectedContentRevokedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ProtectedFileCreateResult, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ProtectionPolicyAuditInfo, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_ProtectionPolicyManager_Static{PyType_FromSpec(&type_spec_ProtectionPolicyManager_Static)};
    if (!type_ProtectionPolicyManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ProtectionPolicyManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_ProtectionPolicyManager_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ThreadNetworkContext, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
