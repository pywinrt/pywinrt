# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.devices.humaninterfacedevice
import winrt.windows.foundation
import winrt.windows.foundation.collections

from winrt.windows.devices.input.preview import GazeDeviceConfigurationStatePreview

Self = typing.TypeVar('Self')

@typing.final
class GazeDevicePreview(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GazeDevicePreview: ...
    def get_boolean_control_descriptions(self, usage_page: winrt.system.UInt16, usage_id: winrt.system.UInt16, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.devices.humaninterfacedevice.HidBooleanControlDescription]]: ...
    def get_numeric_control_descriptions(self, usage_page: winrt.system.UInt16, usage_id: winrt.system.UInt16, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.devices.humaninterfacedevice.HidNumericControlDescription]]: ...
    def request_calibration_async(self) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    @_property
    def can_track_eyes(self) -> bool: ...
    @_property
    def can_track_head(self) -> bool: ...
    @_property
    def configuration_state(self) -> GazeDeviceConfigurationStatePreview: ...
    @_property
    def id(self) -> winrt.system.UInt32: ...

@typing.final
class GazeDeviceWatcherAddedPreviewEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GazeDeviceWatcherAddedPreviewEventArgs: ...
    @_property
    def device(self) -> typing.Optional[GazeDevicePreview]: ...

@typing.final
class GazeDeviceWatcherPreview(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GazeDeviceWatcherPreview: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add_added(self, handler: winrt.windows.foundation.TypedEventHandler[GazeDeviceWatcherPreview, GazeDeviceWatcherAddedPreviewEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_added(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_enumeration_completed(self, handler: winrt.windows.foundation.TypedEventHandler[GazeDeviceWatcherPreview, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_enumeration_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_removed(self, handler: winrt.windows.foundation.TypedEventHandler[GazeDeviceWatcherPreview, GazeDeviceWatcherRemovedPreviewEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_removed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_updated(self, handler: winrt.windows.foundation.TypedEventHandler[GazeDeviceWatcherPreview, GazeDeviceWatcherUpdatedPreviewEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_updated(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class GazeDeviceWatcherRemovedPreviewEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GazeDeviceWatcherRemovedPreviewEventArgs: ...
    @_property
    def device(self) -> typing.Optional[GazeDevicePreview]: ...

@typing.final
class GazeDeviceWatcherUpdatedPreviewEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GazeDeviceWatcherUpdatedPreviewEventArgs: ...
    @_property
    def device(self) -> typing.Optional[GazeDevicePreview]: ...

@typing.final
class GazeEnteredPreviewEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GazeEnteredPreviewEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def current_point(self) -> typing.Optional[GazePointPreview]: ...

@typing.final
class GazeExitedPreviewEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GazeExitedPreviewEventArgs: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def current_point(self) -> typing.Optional[GazePointPreview]: ...

@typing.final
class GazeInputSourcePreview_Static(type):
    def create_watcher(cls) -> typing.Optional[GazeDeviceWatcherPreview]: ...
    def get_for_current_view(cls) -> typing.Optional[GazeInputSourcePreview]: ...

@typing.final
class GazeInputSourcePreview(winrt.system.Object, metaclass=GazeInputSourcePreview_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GazeInputSourcePreview: ...
    def add_gaze_entered(self, handler: winrt.windows.foundation.TypedEventHandler[GazeInputSourcePreview, GazeEnteredPreviewEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_gaze_entered(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_gaze_exited(self, handler: winrt.windows.foundation.TypedEventHandler[GazeInputSourcePreview, GazeExitedPreviewEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_gaze_exited(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_gaze_moved(self, handler: winrt.windows.foundation.TypedEventHandler[GazeInputSourcePreview, GazeMovedPreviewEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_gaze_moved(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class GazeMovedPreviewEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GazeMovedPreviewEventArgs: ...
    def get_intermediate_points(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[GazePointPreview]]: ...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def current_point(self) -> typing.Optional[GazePointPreview]: ...

@typing.final
class GazePointPreview(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GazePointPreview: ...
    @_property
    def eye_gaze_position(self) -> typing.Optional[typing.Optional[winrt.windows.foundation.Point]]: ...
    @_property
    def head_gaze_position(self) -> typing.Optional[typing.Optional[winrt.windows.foundation.Point]]: ...
    @_property
    def hid_input_report(self) -> typing.Optional[winrt.windows.devices.humaninterfacedevice.HidInputReport]: ...
    @_property
    def source_device(self) -> typing.Optional[GazeDevicePreview]: ...
    @_property
    def timestamp(self) -> winrt.system.UInt64: ...

