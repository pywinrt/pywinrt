// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Devices.Input.Preview.h"


namespace py::cpp::Windows::Devices::Input::Preview
{
    // ----- GazeDevicePreview class --------------------

    static PyObject* _new_GazeDevicePreview(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Devices::Input::Preview::GazeDevicePreview>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Devices::Input::Preview::GazeDevicePreview>::type_name);
        return nullptr;
    }

    static void _dealloc_GazeDevicePreview(py::wrapper::Windows::Devices::Input::Preview::GazeDevicePreview* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GazeDevicePreview_GetBooleanControlDescriptions(py::wrapper::Windows::Devices::Input::Preview::GazeDevicePreview* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.Input.Preview.GazeDevicePreview", L"GetBooleanControlDescriptions", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint16_t>(args, 0);
                auto param1 = py::convert_to<uint16_t>(args, 1);

                return py::convert(self->obj.GetBooleanControlDescriptions(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GazeDevicePreview_GetNumericControlDescriptions(py::wrapper::Windows::Devices::Input::Preview::GazeDevicePreview* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.Input.Preview.GazeDevicePreview", L"GetNumericControlDescriptions", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint16_t>(args, 0);
                auto param1 = py::convert_to<uint16_t>(args, 1);

                return py::convert(self->obj.GetNumericControlDescriptions(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GazeDevicePreview_RequestCalibrationAsync(py::wrapper::Windows::Devices::Input::Preview::GazeDevicePreview* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.Input.Preview.GazeDevicePreview", L"RequestCalibrationAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.RequestCalibrationAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GazeDevicePreview_get_CanTrackEyes(py::wrapper::Windows::Devices::Input::Preview::GazeDevicePreview* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazeDevicePreview", L"CanTrackEyes"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CanTrackEyes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazeDevicePreview_get_CanTrackHead(py::wrapper::Windows::Devices::Input::Preview::GazeDevicePreview* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazeDevicePreview", L"CanTrackHead"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CanTrackHead());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazeDevicePreview_get_ConfigurationState(py::wrapper::Windows::Devices::Input::Preview::GazeDevicePreview* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazeDevicePreview", L"ConfigurationState"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ConfigurationState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazeDevicePreview_get_Id(py::wrapper::Windows::Devices::Input::Preview::GazeDevicePreview* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazeDevicePreview", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GazeDevicePreview(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Input::Preview::GazeDevicePreview>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GazeDevicePreview(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Input::Preview::GazeDevicePreview>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GazeDevicePreview[] = {
        { "get_boolean_control_descriptions", reinterpret_cast<PyCFunction>(GazeDevicePreview_GetBooleanControlDescriptions), METH_VARARGS, nullptr },
        { "get_numeric_control_descriptions", reinterpret_cast<PyCFunction>(GazeDevicePreview_GetNumericControlDescriptions), METH_VARARGS, nullptr },
        { "request_calibration_async", reinterpret_cast<PyCFunction>(GazeDevicePreview_RequestCalibrationAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_GazeDevicePreview, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GazeDevicePreview), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GazeDevicePreview[] = {
        { "can_track_eyes", reinterpret_cast<getter>(GazeDevicePreview_get_CanTrackEyes), nullptr, nullptr, nullptr },
        { "can_track_head", reinterpret_cast<getter>(GazeDevicePreview_get_CanTrackHead), nullptr, nullptr, nullptr },
        { "configuration_state", reinterpret_cast<getter>(GazeDevicePreview_get_ConfigurationState), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(GazeDevicePreview_get_Id), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GazeDevicePreview[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GazeDevicePreview) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GazeDevicePreview) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GazeDevicePreview) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GazeDevicePreview) },
        { },
    };

    static PyType_Spec type_spec_GazeDevicePreview =
    {
        "winrt._winrt_windows_devices_input_preview.GazeDevicePreview",
        sizeof(py::wrapper::Windows::Devices::Input::Preview::GazeDevicePreview),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GazeDevicePreview
    };

    // ----- GazeDeviceWatcherAddedPreviewEventArgs class --------------------

    static PyObject* _new_GazeDeviceWatcherAddedPreviewEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherAddedPreviewEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherAddedPreviewEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_GazeDeviceWatcherAddedPreviewEventArgs(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherAddedPreviewEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GazeDeviceWatcherAddedPreviewEventArgs_get_Device(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherAddedPreviewEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazeDeviceWatcherAddedPreviewEventArgs", L"Device"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Device());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GazeDeviceWatcherAddedPreviewEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherAddedPreviewEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GazeDeviceWatcherAddedPreviewEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherAddedPreviewEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GazeDeviceWatcherAddedPreviewEventArgs[] = {
        { "_assign_array_", _assign_array_GazeDeviceWatcherAddedPreviewEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GazeDeviceWatcherAddedPreviewEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GazeDeviceWatcherAddedPreviewEventArgs[] = {
        { "device", reinterpret_cast<getter>(GazeDeviceWatcherAddedPreviewEventArgs_get_Device), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GazeDeviceWatcherAddedPreviewEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GazeDeviceWatcherAddedPreviewEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GazeDeviceWatcherAddedPreviewEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GazeDeviceWatcherAddedPreviewEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GazeDeviceWatcherAddedPreviewEventArgs) },
        { },
    };

    static PyType_Spec type_spec_GazeDeviceWatcherAddedPreviewEventArgs =
    {
        "winrt._winrt_windows_devices_input_preview.GazeDeviceWatcherAddedPreviewEventArgs",
        sizeof(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherAddedPreviewEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GazeDeviceWatcherAddedPreviewEventArgs
    };

    // ----- GazeDeviceWatcherPreview class --------------------

    static PyObject* _new_GazeDeviceWatcherPreview(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview>::type_name);
        return nullptr;
    }

    static void _dealloc_GazeDeviceWatcherPreview(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GazeDeviceWatcherPreview_Start(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.Input.Preview.GazeDeviceWatcherPreview", L"Start", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Start();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GazeDeviceWatcherPreview_Stop(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.Input.Preview.GazeDeviceWatcherPreview", L"Stop", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.Stop();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GazeDeviceWatcherPreview_add_Added(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Input.Preview.GazeDeviceWatcherPreview", L"Added"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview, winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherAddedPreviewEventArgs>>(arg);

            return py::convert(self->obj.Added(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazeDeviceWatcherPreview_remove_Added(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Input.Preview.GazeDeviceWatcherPreview", L"Added"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Added(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazeDeviceWatcherPreview_add_EnumerationCompleted(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Input.Preview.GazeDeviceWatcherPreview", L"EnumerationCompleted"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.EnumerationCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazeDeviceWatcherPreview_remove_EnumerationCompleted(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Input.Preview.GazeDeviceWatcherPreview", L"EnumerationCompleted"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.EnumerationCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazeDeviceWatcherPreview_add_Removed(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Input.Preview.GazeDeviceWatcherPreview", L"Removed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview, winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherRemovedPreviewEventArgs>>(arg);

            return py::convert(self->obj.Removed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazeDeviceWatcherPreview_remove_Removed(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Input.Preview.GazeDeviceWatcherPreview", L"Removed"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Removed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazeDeviceWatcherPreview_add_Updated(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Input.Preview.GazeDeviceWatcherPreview", L"Updated"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview, winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherUpdatedPreviewEventArgs>>(arg);

            return py::convert(self->obj.Updated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazeDeviceWatcherPreview_remove_Updated(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Input.Preview.GazeDeviceWatcherPreview", L"Updated"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Updated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GazeDeviceWatcherPreview(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GazeDeviceWatcherPreview(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GazeDeviceWatcherPreview[] = {
        { "start", reinterpret_cast<PyCFunction>(GazeDeviceWatcherPreview_Start), METH_VARARGS, nullptr },
        { "stop", reinterpret_cast<PyCFunction>(GazeDeviceWatcherPreview_Stop), METH_VARARGS, nullptr },
        { "add_added", reinterpret_cast<PyCFunction>(GazeDeviceWatcherPreview_add_Added), METH_O, nullptr },
        { "remove_added", reinterpret_cast<PyCFunction>(GazeDeviceWatcherPreview_remove_Added), METH_O, nullptr },
        { "add_enumeration_completed", reinterpret_cast<PyCFunction>(GazeDeviceWatcherPreview_add_EnumerationCompleted), METH_O, nullptr },
        { "remove_enumeration_completed", reinterpret_cast<PyCFunction>(GazeDeviceWatcherPreview_remove_EnumerationCompleted), METH_O, nullptr },
        { "add_removed", reinterpret_cast<PyCFunction>(GazeDeviceWatcherPreview_add_Removed), METH_O, nullptr },
        { "remove_removed", reinterpret_cast<PyCFunction>(GazeDeviceWatcherPreview_remove_Removed), METH_O, nullptr },
        { "add_updated", reinterpret_cast<PyCFunction>(GazeDeviceWatcherPreview_add_Updated), METH_O, nullptr },
        { "remove_updated", reinterpret_cast<PyCFunction>(GazeDeviceWatcherPreview_remove_Updated), METH_O, nullptr },
        { "_assign_array_", _assign_array_GazeDeviceWatcherPreview, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GazeDeviceWatcherPreview), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GazeDeviceWatcherPreview[] = {
        { }
    };

    static PyType_Slot _type_slots_GazeDeviceWatcherPreview[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GazeDeviceWatcherPreview) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GazeDeviceWatcherPreview) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GazeDeviceWatcherPreview) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GazeDeviceWatcherPreview) },
        { },
    };

    static PyType_Spec type_spec_GazeDeviceWatcherPreview =
    {
        "winrt._winrt_windows_devices_input_preview.GazeDeviceWatcherPreview",
        sizeof(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherPreview),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GazeDeviceWatcherPreview
    };

    // ----- GazeDeviceWatcherRemovedPreviewEventArgs class --------------------

    static PyObject* _new_GazeDeviceWatcherRemovedPreviewEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherRemovedPreviewEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherRemovedPreviewEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_GazeDeviceWatcherRemovedPreviewEventArgs(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherRemovedPreviewEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GazeDeviceWatcherRemovedPreviewEventArgs_get_Device(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherRemovedPreviewEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazeDeviceWatcherRemovedPreviewEventArgs", L"Device"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Device());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GazeDeviceWatcherRemovedPreviewEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherRemovedPreviewEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GazeDeviceWatcherRemovedPreviewEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherRemovedPreviewEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GazeDeviceWatcherRemovedPreviewEventArgs[] = {
        { "_assign_array_", _assign_array_GazeDeviceWatcherRemovedPreviewEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GazeDeviceWatcherRemovedPreviewEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GazeDeviceWatcherRemovedPreviewEventArgs[] = {
        { "device", reinterpret_cast<getter>(GazeDeviceWatcherRemovedPreviewEventArgs_get_Device), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GazeDeviceWatcherRemovedPreviewEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GazeDeviceWatcherRemovedPreviewEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GazeDeviceWatcherRemovedPreviewEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GazeDeviceWatcherRemovedPreviewEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GazeDeviceWatcherRemovedPreviewEventArgs) },
        { },
    };

    static PyType_Spec type_spec_GazeDeviceWatcherRemovedPreviewEventArgs =
    {
        "winrt._winrt_windows_devices_input_preview.GazeDeviceWatcherRemovedPreviewEventArgs",
        sizeof(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherRemovedPreviewEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GazeDeviceWatcherRemovedPreviewEventArgs
    };

    // ----- GazeDeviceWatcherUpdatedPreviewEventArgs class --------------------

    static PyObject* _new_GazeDeviceWatcherUpdatedPreviewEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherUpdatedPreviewEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherUpdatedPreviewEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_GazeDeviceWatcherUpdatedPreviewEventArgs(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherUpdatedPreviewEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GazeDeviceWatcherUpdatedPreviewEventArgs_get_Device(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherUpdatedPreviewEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazeDeviceWatcherUpdatedPreviewEventArgs", L"Device"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Device());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GazeDeviceWatcherUpdatedPreviewEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherUpdatedPreviewEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GazeDeviceWatcherUpdatedPreviewEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Input::Preview::GazeDeviceWatcherUpdatedPreviewEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GazeDeviceWatcherUpdatedPreviewEventArgs[] = {
        { "_assign_array_", _assign_array_GazeDeviceWatcherUpdatedPreviewEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GazeDeviceWatcherUpdatedPreviewEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GazeDeviceWatcherUpdatedPreviewEventArgs[] = {
        { "device", reinterpret_cast<getter>(GazeDeviceWatcherUpdatedPreviewEventArgs_get_Device), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GazeDeviceWatcherUpdatedPreviewEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GazeDeviceWatcherUpdatedPreviewEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GazeDeviceWatcherUpdatedPreviewEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GazeDeviceWatcherUpdatedPreviewEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GazeDeviceWatcherUpdatedPreviewEventArgs) },
        { },
    };

    static PyType_Spec type_spec_GazeDeviceWatcherUpdatedPreviewEventArgs =
    {
        "winrt._winrt_windows_devices_input_preview.GazeDeviceWatcherUpdatedPreviewEventArgs",
        sizeof(py::wrapper::Windows::Devices::Input::Preview::GazeDeviceWatcherUpdatedPreviewEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GazeDeviceWatcherUpdatedPreviewEventArgs
    };

    // ----- GazeEnteredPreviewEventArgs class --------------------

    static PyObject* _new_GazeEnteredPreviewEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Devices::Input::Preview::GazeEnteredPreviewEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Devices::Input::Preview::GazeEnteredPreviewEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_GazeEnteredPreviewEventArgs(py::wrapper::Windows::Devices::Input::Preview::GazeEnteredPreviewEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GazeEnteredPreviewEventArgs_get_Handled(py::wrapper::Windows::Devices::Input::Preview::GazeEnteredPreviewEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazeEnteredPreviewEventArgs", L"Handled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int GazeEnteredPreviewEventArgs_put_Handled(py::wrapper::Windows::Devices::Input::Preview::GazeEnteredPreviewEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazeEnteredPreviewEventArgs", L"Handled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* GazeEnteredPreviewEventArgs_get_CurrentPoint(py::wrapper::Windows::Devices::Input::Preview::GazeEnteredPreviewEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazeEnteredPreviewEventArgs", L"CurrentPoint"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CurrentPoint());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GazeEnteredPreviewEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Input::Preview::GazeEnteredPreviewEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GazeEnteredPreviewEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Input::Preview::GazeEnteredPreviewEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GazeEnteredPreviewEventArgs[] = {
        { "_assign_array_", _assign_array_GazeEnteredPreviewEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GazeEnteredPreviewEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GazeEnteredPreviewEventArgs[] = {
        { "handled", reinterpret_cast<getter>(GazeEnteredPreviewEventArgs_get_Handled), reinterpret_cast<setter>(GazeEnteredPreviewEventArgs_put_Handled), nullptr, nullptr },
        { "current_point", reinterpret_cast<getter>(GazeEnteredPreviewEventArgs_get_CurrentPoint), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GazeEnteredPreviewEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GazeEnteredPreviewEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GazeEnteredPreviewEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GazeEnteredPreviewEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GazeEnteredPreviewEventArgs) },
        { },
    };

    static PyType_Spec type_spec_GazeEnteredPreviewEventArgs =
    {
        "winrt._winrt_windows_devices_input_preview.GazeEnteredPreviewEventArgs",
        sizeof(py::wrapper::Windows::Devices::Input::Preview::GazeEnteredPreviewEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GazeEnteredPreviewEventArgs
    };

    // ----- GazeExitedPreviewEventArgs class --------------------

    static PyObject* _new_GazeExitedPreviewEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Devices::Input::Preview::GazeExitedPreviewEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Devices::Input::Preview::GazeExitedPreviewEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_GazeExitedPreviewEventArgs(py::wrapper::Windows::Devices::Input::Preview::GazeExitedPreviewEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GazeExitedPreviewEventArgs_get_Handled(py::wrapper::Windows::Devices::Input::Preview::GazeExitedPreviewEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazeExitedPreviewEventArgs", L"Handled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int GazeExitedPreviewEventArgs_put_Handled(py::wrapper::Windows::Devices::Input::Preview::GazeExitedPreviewEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazeExitedPreviewEventArgs", L"Handled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* GazeExitedPreviewEventArgs_get_CurrentPoint(py::wrapper::Windows::Devices::Input::Preview::GazeExitedPreviewEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazeExitedPreviewEventArgs", L"CurrentPoint"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CurrentPoint());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GazeExitedPreviewEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Input::Preview::GazeExitedPreviewEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GazeExitedPreviewEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Input::Preview::GazeExitedPreviewEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GazeExitedPreviewEventArgs[] = {
        { "_assign_array_", _assign_array_GazeExitedPreviewEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GazeExitedPreviewEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GazeExitedPreviewEventArgs[] = {
        { "handled", reinterpret_cast<getter>(GazeExitedPreviewEventArgs_get_Handled), reinterpret_cast<setter>(GazeExitedPreviewEventArgs_put_Handled), nullptr, nullptr },
        { "current_point", reinterpret_cast<getter>(GazeExitedPreviewEventArgs_get_CurrentPoint), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GazeExitedPreviewEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GazeExitedPreviewEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GazeExitedPreviewEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GazeExitedPreviewEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GazeExitedPreviewEventArgs) },
        { },
    };

    static PyType_Spec type_spec_GazeExitedPreviewEventArgs =
    {
        "winrt._winrt_windows_devices_input_preview.GazeExitedPreviewEventArgs",
        sizeof(py::wrapper::Windows::Devices::Input::Preview::GazeExitedPreviewEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GazeExitedPreviewEventArgs
    };

    // ----- GazeInputSourcePreview class --------------------

    static PyObject* _new_GazeInputSourcePreview(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Devices::Input::Preview::GazeInputSourcePreview>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Devices::Input::Preview::GazeInputSourcePreview>::type_name);
        return nullptr;
    }

    static void _dealloc_GazeInputSourcePreview(py::wrapper::Windows::Devices::Input::Preview::GazeInputSourcePreview* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GazeInputSourcePreview_CreateWatcher(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.Input.Preview.GazeInputSourcePreview", L"CreateWatcher", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Devices::Input::Preview::GazeInputSourcePreview::CreateWatcher());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GazeInputSourcePreview_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.Input.Preview.GazeInputSourcePreview", L"GetForCurrentView", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Devices::Input::Preview::GazeInputSourcePreview::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GazeInputSourcePreview_add_GazeEntered(py::wrapper::Windows::Devices::Input::Preview::GazeInputSourcePreview* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Input.Preview.GazeInputSourcePreview", L"GazeEntered"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Input::Preview::GazeInputSourcePreview, winrt::Windows::Devices::Input::Preview::GazeEnteredPreviewEventArgs>>(arg);

            return py::convert(self->obj.GazeEntered(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazeInputSourcePreview_remove_GazeEntered(py::wrapper::Windows::Devices::Input::Preview::GazeInputSourcePreview* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Input.Preview.GazeInputSourcePreview", L"GazeEntered"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.GazeEntered(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazeInputSourcePreview_add_GazeExited(py::wrapper::Windows::Devices::Input::Preview::GazeInputSourcePreview* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Input.Preview.GazeInputSourcePreview", L"GazeExited"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Input::Preview::GazeInputSourcePreview, winrt::Windows::Devices::Input::Preview::GazeExitedPreviewEventArgs>>(arg);

            return py::convert(self->obj.GazeExited(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazeInputSourcePreview_remove_GazeExited(py::wrapper::Windows::Devices::Input::Preview::GazeInputSourcePreview* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Input.Preview.GazeInputSourcePreview", L"GazeExited"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.GazeExited(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazeInputSourcePreview_add_GazeMoved(py::wrapper::Windows::Devices::Input::Preview::GazeInputSourcePreview* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Input.Preview.GazeInputSourcePreview", L"GazeMoved"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Devices::Input::Preview::GazeInputSourcePreview, winrt::Windows::Devices::Input::Preview::GazeMovedPreviewEventArgs>>(arg);

            return py::convert(self->obj.GazeMoved(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazeInputSourcePreview_remove_GazeMoved(py::wrapper::Windows::Devices::Input::Preview::GazeInputSourcePreview* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Devices.Input.Preview.GazeInputSourcePreview", L"GazeMoved"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.GazeMoved(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GazeInputSourcePreview(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Input::Preview::GazeInputSourcePreview>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GazeInputSourcePreview(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Input::Preview::GazeInputSourcePreview>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GazeInputSourcePreview[] = {
        { "add_gaze_entered", reinterpret_cast<PyCFunction>(GazeInputSourcePreview_add_GazeEntered), METH_O, nullptr },
        { "remove_gaze_entered", reinterpret_cast<PyCFunction>(GazeInputSourcePreview_remove_GazeEntered), METH_O, nullptr },
        { "add_gaze_exited", reinterpret_cast<PyCFunction>(GazeInputSourcePreview_add_GazeExited), METH_O, nullptr },
        { "remove_gaze_exited", reinterpret_cast<PyCFunction>(GazeInputSourcePreview_remove_GazeExited), METH_O, nullptr },
        { "add_gaze_moved", reinterpret_cast<PyCFunction>(GazeInputSourcePreview_add_GazeMoved), METH_O, nullptr },
        { "remove_gaze_moved", reinterpret_cast<PyCFunction>(GazeInputSourcePreview_remove_GazeMoved), METH_O, nullptr },
        { "_assign_array_", _assign_array_GazeInputSourcePreview, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GazeInputSourcePreview), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GazeInputSourcePreview[] = {
        { }
    };

    static PyType_Slot _type_slots_GazeInputSourcePreview[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GazeInputSourcePreview) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GazeInputSourcePreview) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GazeInputSourcePreview) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GazeInputSourcePreview) },
        { },
    };

    static PyType_Spec type_spec_GazeInputSourcePreview =
    {
        "winrt._winrt_windows_devices_input_preview.GazeInputSourcePreview",
        sizeof(py::wrapper::Windows::Devices::Input::Preview::GazeInputSourcePreview),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GazeInputSourcePreview
    };

    static PyGetSetDef getset_GazeInputSourcePreview_Static[] = {
        { }
    };

    static PyMethodDef methods_GazeInputSourcePreview_Static[] = {
        { "create_watcher", reinterpret_cast<PyCFunction>(GazeInputSourcePreview_CreateWatcher), METH_VARARGS, nullptr },
        { "get_for_current_view", reinterpret_cast<PyCFunction>(GazeInputSourcePreview_GetForCurrentView), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_GazeInputSourcePreview_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_GazeInputSourcePreview_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_GazeInputSourcePreview_Static) },
        { }
    };

    static PyType_Spec type_spec_GazeInputSourcePreview_Static =
    {
        "winrt._winrt_windows_devices_input_preview.GazeInputSourcePreview_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_GazeInputSourcePreview_Static
    };

    // ----- GazeMovedPreviewEventArgs class --------------------

    static PyObject* _new_GazeMovedPreviewEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Devices::Input::Preview::GazeMovedPreviewEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Devices::Input::Preview::GazeMovedPreviewEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_GazeMovedPreviewEventArgs(py::wrapper::Windows::Devices::Input::Preview::GazeMovedPreviewEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GazeMovedPreviewEventArgs_GetIntermediatePoints(py::wrapper::Windows::Devices::Input::Preview::GazeMovedPreviewEventArgs* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Devices.Input.Preview.GazeMovedPreviewEventArgs", L"GetIntermediatePoints", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetIntermediatePoints());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GazeMovedPreviewEventArgs_get_Handled(py::wrapper::Windows::Devices::Input::Preview::GazeMovedPreviewEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazeMovedPreviewEventArgs", L"Handled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Handled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int GazeMovedPreviewEventArgs_put_Handled(py::wrapper::Windows::Devices::Input::Preview::GazeMovedPreviewEventArgs* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazeMovedPreviewEventArgs", L"Handled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Handled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* GazeMovedPreviewEventArgs_get_CurrentPoint(py::wrapper::Windows::Devices::Input::Preview::GazeMovedPreviewEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazeMovedPreviewEventArgs", L"CurrentPoint"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CurrentPoint());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GazeMovedPreviewEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Input::Preview::GazeMovedPreviewEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GazeMovedPreviewEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Input::Preview::GazeMovedPreviewEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GazeMovedPreviewEventArgs[] = {
        { "get_intermediate_points", reinterpret_cast<PyCFunction>(GazeMovedPreviewEventArgs_GetIntermediatePoints), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_GazeMovedPreviewEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GazeMovedPreviewEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GazeMovedPreviewEventArgs[] = {
        { "handled", reinterpret_cast<getter>(GazeMovedPreviewEventArgs_get_Handled), reinterpret_cast<setter>(GazeMovedPreviewEventArgs_put_Handled), nullptr, nullptr },
        { "current_point", reinterpret_cast<getter>(GazeMovedPreviewEventArgs_get_CurrentPoint), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GazeMovedPreviewEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GazeMovedPreviewEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GazeMovedPreviewEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GazeMovedPreviewEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GazeMovedPreviewEventArgs) },
        { },
    };

    static PyType_Spec type_spec_GazeMovedPreviewEventArgs =
    {
        "winrt._winrt_windows_devices_input_preview.GazeMovedPreviewEventArgs",
        sizeof(py::wrapper::Windows::Devices::Input::Preview::GazeMovedPreviewEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GazeMovedPreviewEventArgs
    };

    // ----- GazePointPreview class --------------------

    static PyObject* _new_GazePointPreview(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Devices::Input::Preview::GazePointPreview>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Devices::Input::Preview::GazePointPreview>::type_name);
        return nullptr;
    }

    static void _dealloc_GazePointPreview(py::wrapper::Windows::Devices::Input::Preview::GazePointPreview* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GazePointPreview_get_EyeGazePosition(py::wrapper::Windows::Devices::Input::Preview::GazePointPreview* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazePointPreview", L"EyeGazePosition"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.EyeGazePosition());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazePointPreview_get_HeadGazePosition(py::wrapper::Windows::Devices::Input::Preview::GazePointPreview* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazePointPreview", L"HeadGazePosition"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.HeadGazePosition());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazePointPreview_get_HidInputReport(py::wrapper::Windows::Devices::Input::Preview::GazePointPreview* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazePointPreview", L"HidInputReport"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.HidInputReport());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazePointPreview_get_SourceDevice(py::wrapper::Windows::Devices::Input::Preview::GazePointPreview* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazePointPreview", L"SourceDevice"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SourceDevice());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GazePointPreview_get_Timestamp(py::wrapper::Windows::Devices::Input::Preview::GazePointPreview* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.Input.Preview.GazePointPreview", L"Timestamp"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Timestamp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_GazePointPreview(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Devices::Input::Preview::GazePointPreview>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_GazePointPreview(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::Input::Preview::GazePointPreview>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GazePointPreview[] = {
        { "_assign_array_", _assign_array_GazePointPreview, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GazePointPreview), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GazePointPreview[] = {
        { "eye_gaze_position", reinterpret_cast<getter>(GazePointPreview_get_EyeGazePosition), nullptr, nullptr, nullptr },
        { "head_gaze_position", reinterpret_cast<getter>(GazePointPreview_get_HeadGazePosition), nullptr, nullptr, nullptr },
        { "hid_input_report", reinterpret_cast<getter>(GazePointPreview_get_HidInputReport), nullptr, nullptr, nullptr },
        { "source_device", reinterpret_cast<getter>(GazePointPreview_get_SourceDevice), nullptr, nullptr, nullptr },
        { "timestamp", reinterpret_cast<getter>(GazePointPreview_get_Timestamp), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GazePointPreview[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_GazePointPreview) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_GazePointPreview) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_GazePointPreview) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_GazePointPreview) },
        { },
    };

    static PyType_Spec type_spec_GazePointPreview =
    {
        "winrt._winrt_windows_devices_input_preview.GazePointPreview",
        sizeof(py::wrapper::Windows::Devices::Input::Preview::GazePointPreview),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GazePointPreview
    };

    // ----- Windows.Devices.Input.Preview Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Devices::Input::Preview");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_devices_input_preview",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Devices::Input::Preview

PyMODINIT_FUNC PyInit__winrt_windows_devices_input_preview(void) noexcept
{
    using namespace py::cpp::Windows::Devices::Input::Preview;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GazeDevicePreview, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GazeDeviceWatcherAddedPreviewEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GazeDeviceWatcherPreview, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GazeDeviceWatcherRemovedPreviewEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GazeDeviceWatcherUpdatedPreviewEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GazeEnteredPreviewEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GazeExitedPreviewEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_GazeInputSourcePreview_Static{PyType_FromSpec(&type_spec_GazeInputSourcePreview_Static)};
    if (!type_GazeInputSourcePreview_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GazeInputSourcePreview, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_GazeInputSourcePreview_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GazeMovedPreviewEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_GazePointPreview, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
