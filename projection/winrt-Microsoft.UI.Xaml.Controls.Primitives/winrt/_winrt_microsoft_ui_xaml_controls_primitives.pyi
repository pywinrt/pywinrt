# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.microsoft.ui.composition
import winrt.microsoft.ui.input
import winrt.microsoft.ui.xaml
import winrt.microsoft.ui.xaml.automation.peers
import winrt.microsoft.ui.xaml.controls
import winrt.microsoft.ui.xaml.input
import winrt.microsoft.ui.xaml.media
import winrt.microsoft.ui.xaml.media.animation
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.foundation.numerics
import winrt.windows.ui
import winrt.windows.ui.xaml.interop

from winrt.microsoft.ui.xaml.controls.primitives import AnimationDirection, ComponentResourceLocation, CornerRadiusFilterKind, CornerRadiusToThicknessConverterKind, EdgeTransitionLocation, FlyoutPlacementMode, FlyoutShowMode, GeneratorDirection, GroupHeaderPlacement, ListViewItemPresenterCheckMode, ListViewItemPresenterSelectionIndicatorMode, PlacementMode, PopupPlacementMode, ScrollEventType, ScrollSnapPointsAlignment, ScrollingIndicatorMode, SliderSnapsTo, SnapPointsAlignment, TickPlacement
from winrt.microsoft.ui.xaml.controls.primitives import DragCompletedEventHandler, DragDeltaEventHandler, DragStartedEventHandler, ItemsChangedEventHandler, RangeBaseValueChangedEventHandler, ScrollEventHandler

Self = typing.TypeVar('Self')

@typing.final
class GeneratorPosition:
    index: winrt.system.Int32
    offset: winrt.system.Int32
    def __init__(self, index: winrt.system.Int32, offset: winrt.system.Int32) -> None: ...

@typing.final
class AppBarButtonTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppBarButtonTemplateSettings: ...
    @_property
    def keyboard_accelerator_text_min_width(self) -> winrt.system.Double: ...

@typing.final
class AppBarTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppBarTemplateSettings: ...
    @_property
    def clip_rect(self) -> winrt.windows.foundation.Rect: ...
    @_property
    def compact_root_margin(self) -> winrt.microsoft.ui.xaml.Thickness: ...
    @_property
    def compact_vertical_delta(self) -> winrt.system.Double: ...
    @_property
    def hidden_root_margin(self) -> winrt.microsoft.ui.xaml.Thickness: ...
    @_property
    def hidden_vertical_delta(self) -> winrt.system.Double: ...
    @_property
    def minimal_root_margin(self) -> winrt.microsoft.ui.xaml.Thickness: ...
    @_property
    def minimal_vertical_delta(self) -> winrt.system.Double: ...
    @_property
    def negative_compact_vertical_delta(self) -> winrt.system.Double: ...
    @_property
    def negative_hidden_vertical_delta(self) -> winrt.system.Double: ...
    @_property
    def negative_minimal_vertical_delta(self) -> winrt.system.Double: ...

@typing.final
class AppBarToggleButtonTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppBarToggleButtonTemplateSettings: ...
    @_property
    def keyboard_accelerator_text_min_width(self) -> winrt.system.Double: ...

@typing.final
class AutoSuggestBoxHelper_Static(type):
    def get_keep_interior_corners_square(cls, auto_suggest_box: typing.Optional[winrt.microsoft.ui.xaml.controls.AutoSuggestBox], /) -> bool: ...
    def set_keep_interior_corners_square(cls, auto_suggest_box: typing.Optional[winrt.microsoft.ui.xaml.controls.AutoSuggestBox], value: bool, /) -> None: ...
    @_property
    def keep_interior_corners_square_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class AutoSuggestBoxHelper(winrt.system.Object, metaclass=AutoSuggestBoxHelper_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AutoSuggestBoxHelper: ...

@typing.final
class ButtonBase_Static(type):
    @_property
    def click_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def command_parameter_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def command_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def is_pointer_over_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def is_pressed_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class ButtonBase(winrt.system.Object, metaclass=ButtonBase_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ButtonBase: ...
    def add_click(self, handler: typing.Optional[winrt.microsoft.ui.xaml.RoutedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_click(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def command_parameter(self) -> typing.Optional[winrt.system.Object]: ...
    @command_parameter.setter
    def command_parameter(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def command(self) -> typing.Optional[winrt.microsoft.ui.xaml.input.ICommand]: ...
    @command.setter
    def command(self, value: typing.Optional[winrt.microsoft.ui.xaml.input.ICommand]) -> None: ...
    @_property
    def click_mode(self) -> winrt.microsoft.ui.xaml.controls.ClickMode: ...
    @click_mode.setter
    def click_mode(self, value: winrt.microsoft.ui.xaml.controls.ClickMode) -> None: ...
    @_property
    def is_pointer_over(self) -> bool: ...
    @_property
    def is_pressed(self) -> bool: ...

@typing.final
class CalendarPanel(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CalendarPanel: ...
    def __new__(cls: typing.Type[CalendarPanel]) -> CalendarPanel:...

@typing.final
class CalendarViewTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CalendarViewTemplateSettings: ...
    @_property
    def center_x(self) -> winrt.system.Double: ...
    @_property
    def center_y(self) -> winrt.system.Double: ...
    @_property
    def clip_rect(self) -> winrt.windows.foundation.Rect: ...
    @_property
    def has_more_content_after(self) -> bool: ...
    @_property
    def has_more_content_before(self) -> bool: ...
    @_property
    def has_more_views(self) -> bool: ...
    @_property
    def header_text(self) -> str: ...
    @_property
    def min_view_width(self) -> winrt.system.Double: ...
    @_property
    def week_day1(self) -> str: ...
    @_property
    def week_day2(self) -> str: ...
    @_property
    def week_day3(self) -> str: ...
    @_property
    def week_day4(self) -> str: ...
    @_property
    def week_day5(self) -> str: ...
    @_property
    def week_day6(self) -> str: ...
    @_property
    def week_day7(self) -> str: ...

@typing.final
class CarouselPanel(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CarouselPanel: ...
    def __new__(cls: typing.Type[CarouselPanel]) -> CarouselPanel:...
    def get_irregular_snap_points(self, orientation: winrt.microsoft.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.system.Single]]: ...
    def get_regular_snap_points(self, orientation: winrt.microsoft.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Tuple[winrt.system.Single, winrt.system.Single]: ...
    def line_down(self) -> None: ...
    def line_left(self) -> None: ...
    def line_right(self) -> None: ...
    def line_up(self) -> None: ...
    def make_visible(self, visual: typing.Optional[winrt.microsoft.ui.xaml.UIElement], rectangle: winrt.windows.foundation.Rect, /) -> winrt.windows.foundation.Rect: ...
    def mouse_wheel_down(self) -> None: ...
    def mouse_wheel_left(self) -> None: ...
    def mouse_wheel_right(self) -> None: ...
    def mouse_wheel_up(self) -> None: ...
    def page_down(self) -> None: ...
    def page_left(self) -> None: ...
    def page_right(self) -> None: ...
    def page_up(self) -> None: ...
    def set_horizontal_offset(self, offset: winrt.system.Double, /) -> None: ...
    def set_vertical_offset(self, offset: winrt.system.Double, /) -> None: ...
    def add_horizontal_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_horizontal_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_vertical_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_vertical_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def scroll_owner(self) -> typing.Optional[winrt.system.Object]: ...
    @scroll_owner.setter
    def scroll_owner(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def can_vertically_scroll(self) -> bool: ...
    @can_vertically_scroll.setter
    def can_vertically_scroll(self, value: bool) -> None: ...
    @_property
    def can_horizontally_scroll(self) -> bool: ...
    @can_horizontally_scroll.setter
    def can_horizontally_scroll(self, value: bool) -> None: ...
    @_property
    def extent_height(self) -> winrt.system.Double: ...
    @_property
    def extent_width(self) -> winrt.system.Double: ...
    @_property
    def horizontal_offset(self) -> winrt.system.Double: ...
    @_property
    def vertical_offset(self) -> winrt.system.Double: ...
    @_property
    def viewport_height(self) -> winrt.system.Double: ...
    @_property
    def viewport_width(self) -> winrt.system.Double: ...
    @_property
    def are_horizontal_snap_points_regular(self) -> bool: ...
    @_property
    def are_vertical_snap_points_regular(self) -> bool: ...

@typing.final
class ColorPickerSlider_Static(type):
    @_property
    def color_channel_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class ColorPickerSlider(winrt.system.Object, metaclass=ColorPickerSlider_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ColorPickerSlider: ...
    def __new__(cls: typing.Type[ColorPickerSlider]) -> ColorPickerSlider:...
    @_property
    def color_channel(self) -> winrt.microsoft.ui.xaml.controls.ColorPickerHsvChannel: ...
    @color_channel.setter
    def color_channel(self, value: winrt.microsoft.ui.xaml.controls.ColorPickerHsvChannel) -> None: ...

@typing.final
class ColorSpectrum_Static(type):
    @_property
    def color_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def components_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def hsv_color_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def max_hue_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def max_saturation_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def max_value_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def min_hue_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def min_saturation_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def min_value_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def shape_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class ColorSpectrum(winrt.system.Object, metaclass=ColorSpectrum_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ColorSpectrum: ...
    def __new__(cls: typing.Type[ColorSpectrum]) -> ColorSpectrum:...
    def add_color_changed(self, handler: winrt.windows.foundation.TypedEventHandler[ColorSpectrum, winrt.microsoft.ui.xaml.controls.ColorChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_color_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def shape(self) -> winrt.microsoft.ui.xaml.controls.ColorSpectrumShape: ...
    @shape.setter
    def shape(self, value: winrt.microsoft.ui.xaml.controls.ColorSpectrumShape) -> None: ...
    @_property
    def min_value(self) -> winrt.system.Int32: ...
    @min_value.setter
    def min_value(self, value: winrt.system.Int32) -> None: ...
    @_property
    def min_saturation(self) -> winrt.system.Int32: ...
    @min_saturation.setter
    def min_saturation(self, value: winrt.system.Int32) -> None: ...
    @_property
    def min_hue(self) -> winrt.system.Int32: ...
    @min_hue.setter
    def min_hue(self, value: winrt.system.Int32) -> None: ...
    @_property
    def max_value(self) -> winrt.system.Int32: ...
    @max_value.setter
    def max_value(self, value: winrt.system.Int32) -> None: ...
    @_property
    def max_saturation(self) -> winrt.system.Int32: ...
    @max_saturation.setter
    def max_saturation(self, value: winrt.system.Int32) -> None: ...
    @_property
    def max_hue(self) -> winrt.system.Int32: ...
    @max_hue.setter
    def max_hue(self, value: winrt.system.Int32) -> None: ...
    @_property
    def hsv_color(self) -> winrt.windows.foundation.numerics.Vector4: ...
    @hsv_color.setter
    def hsv_color(self, value: winrt.windows.foundation.numerics.Vector4) -> None: ...
    @_property
    def components(self) -> winrt.microsoft.ui.xaml.controls.ColorSpectrumComponents: ...
    @components.setter
    def components(self, value: winrt.microsoft.ui.xaml.controls.ColorSpectrumComponents) -> None: ...
    @_property
    def color(self) -> winrt.windows.ui.Color: ...
    @color.setter
    def color(self, value: winrt.windows.ui.Color) -> None: ...

@typing.final
class ColumnMajorUniformToLargestGridLayout_Static(type):
    @_property
    def column_spacing_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def max_columns_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def row_spacing_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class ColumnMajorUniformToLargestGridLayout(winrt.system.Object, metaclass=ColumnMajorUniformToLargestGridLayout_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ColumnMajorUniformToLargestGridLayout: ...
    def __new__(cls: typing.Type[ColumnMajorUniformToLargestGridLayout]) -> ColumnMajorUniformToLargestGridLayout:...
    @_property
    def row_spacing(self) -> winrt.system.Double: ...
    @row_spacing.setter
    def row_spacing(self, value: winrt.system.Double) -> None: ...
    @_property
    def max_columns(self) -> winrt.system.Int32: ...
    @max_columns.setter
    def max_columns(self, value: winrt.system.Int32) -> None: ...
    @_property
    def column_spacing(self) -> winrt.system.Double: ...
    @column_spacing.setter
    def column_spacing(self, value: winrt.system.Double) -> None: ...

@typing.final
class ComboBoxHelper_Static(type):
    def get_keep_interior_corners_square(cls, combo_box: typing.Optional[winrt.microsoft.ui.xaml.controls.ComboBox], /) -> bool: ...
    def set_keep_interior_corners_square(cls, combo_box: typing.Optional[winrt.microsoft.ui.xaml.controls.ComboBox], value: bool, /) -> None: ...
    @_property
    def keep_interior_corners_square_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class ComboBoxHelper(winrt.system.Object, metaclass=ComboBoxHelper_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ComboBoxHelper: ...

@typing.final
class ComboBoxTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ComboBoxTemplateSettings: ...
    @_property
    def drop_down_closed_height(self) -> winrt.system.Double: ...
    @_property
    def drop_down_content_min_width(self) -> winrt.system.Double: ...
    @_property
    def drop_down_offset(self) -> winrt.system.Double: ...
    @_property
    def drop_down_opened_height(self) -> winrt.system.Double: ...
    @_property
    def selected_item_direction(self) -> AnimationDirection: ...

@typing.final
class CommandBarFlyoutCommandBar_Static(type):
    @_property
    def system_backdrop_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class CommandBarFlyoutCommandBar(winrt.system.Object, metaclass=CommandBarFlyoutCommandBar_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CommandBarFlyoutCommandBar: ...
    def __new__(cls: typing.Type[CommandBarFlyoutCommandBar]) -> CommandBarFlyoutCommandBar:...
    @_property
    def flyout_template_settings(self) -> typing.Optional[CommandBarFlyoutCommandBarTemplateSettings]: ...
    @_property
    def system_backdrop(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.SystemBackdrop]: ...
    @system_backdrop.setter
    def system_backdrop(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.SystemBackdrop]) -> None: ...

@typing.final
class CommandBarFlyoutCommandBarAutomationProperties_Static(type):
    def get_control_type(cls, element: typing.Optional[winrt.microsoft.ui.xaml.UIElement], /) -> winrt.microsoft.ui.xaml.automation.peers.AutomationControlType: ...
    def set_control_type(cls, element: typing.Optional[winrt.microsoft.ui.xaml.UIElement], value: winrt.microsoft.ui.xaml.automation.peers.AutomationControlType, /) -> None: ...
    @_property
    def control_type_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class CommandBarFlyoutCommandBarAutomationProperties(winrt.system.Object, metaclass=CommandBarFlyoutCommandBarAutomationProperties_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CommandBarFlyoutCommandBarAutomationProperties: ...

@typing.final
class CommandBarFlyoutCommandBarTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CommandBarFlyoutCommandBarTemplateSettings: ...
    @_property
    def close_animation_end_position(self) -> winrt.system.Double: ...
    @_property
    def content_clip_rect(self) -> winrt.windows.foundation.Rect: ...
    @_property
    def current_width(self) -> winrt.system.Double: ...
    @_property
    def expand_down_animation_end_position(self) -> winrt.system.Double: ...
    @_property
    def expand_down_animation_hold_position(self) -> winrt.system.Double: ...
    @_property
    def expand_down_animation_start_position(self) -> winrt.system.Double: ...
    @_property
    def expand_down_overflow_vertical_position(self) -> winrt.system.Double: ...
    @_property
    def expand_up_animation_end_position(self) -> winrt.system.Double: ...
    @_property
    def expand_up_animation_hold_position(self) -> winrt.system.Double: ...
    @_property
    def expand_up_animation_start_position(self) -> winrt.system.Double: ...
    @_property
    def expand_up_overflow_vertical_position(self) -> winrt.system.Double: ...
    @_property
    def expanded_width(self) -> winrt.system.Double: ...
    @_property
    def open_animation_end_position(self) -> winrt.system.Double: ...
    @_property
    def open_animation_start_position(self) -> winrt.system.Double: ...
    @_property
    def overflow_content_clip_rect(self) -> winrt.windows.foundation.Rect: ...
    @_property
    def width_expansion_animation_end_position(self) -> winrt.system.Double: ...
    @_property
    def width_expansion_animation_start_position(self) -> winrt.system.Double: ...
    @_property
    def width_expansion_delta(self) -> winrt.system.Double: ...
    @_property
    def width_expansion_more_button_animation_end_position(self) -> winrt.system.Double: ...
    @_property
    def width_expansion_more_button_animation_start_position(self) -> winrt.system.Double: ...

@typing.final
class CommandBarTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CommandBarTemplateSettings: ...
    @_property
    def content_height(self) -> winrt.system.Double: ...
    @_property
    def effective_overflow_button_visibility(self) -> winrt.microsoft.ui.xaml.Visibility: ...
    @_property
    def negative_overflow_content_height(self) -> winrt.system.Double: ...
    @_property
    def overflow_content_clip_rect(self) -> winrt.windows.foundation.Rect: ...
    @_property
    def overflow_content_compact_y_translation(self) -> winrt.system.Double: ...
    @_property
    def overflow_content_height(self) -> winrt.system.Double: ...
    @_property
    def overflow_content_hidden_y_translation(self) -> winrt.system.Double: ...
    @_property
    def overflow_content_horizontal_offset(self) -> winrt.system.Double: ...
    @_property
    def overflow_content_max_height(self) -> winrt.system.Double: ...
    @_property
    def overflow_content_max_width(self) -> winrt.system.Double: ...
    @_property
    def overflow_content_min_width(self) -> winrt.system.Double: ...
    @_property
    def overflow_content_minimal_y_translation(self) -> winrt.system.Double: ...

@typing.final
class CornerRadiusFilterConverter_Static(type):
    @_property
    def filter_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def scale_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class CornerRadiusFilterConverter(winrt.system.Object, metaclass=CornerRadiusFilterConverter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CornerRadiusFilterConverter: ...
    def __new__(cls: typing.Type[CornerRadiusFilterConverter]) -> CornerRadiusFilterConverter:...
    def convert(self, value: typing.Optional[winrt.system.Object], target_type: winrt.windows.ui.xaml.interop.TypeName, parameter: typing.Optional[winrt.system.Object], language: str, /) -> typing.Optional[winrt.system.Object]: ...
    def convert_back(self, value: typing.Optional[winrt.system.Object], target_type: winrt.windows.ui.xaml.interop.TypeName, parameter: typing.Optional[winrt.system.Object], language: str, /) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def scale(self) -> winrt.system.Double: ...
    @scale.setter
    def scale(self, value: winrt.system.Double) -> None: ...
    @_property
    def filter(self) -> CornerRadiusFilterKind: ...
    @filter.setter
    def filter(self, value: CornerRadiusFilterKind) -> None: ...

@typing.final
class CornerRadiusToThicknessConverter_Static(type):
    @_property
    def conversion_kind_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def multiplier_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class CornerRadiusToThicknessConverter(winrt.system.Object, metaclass=CornerRadiusToThicknessConverter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CornerRadiusToThicknessConverter: ...
    def __new__(cls: typing.Type[CornerRadiusToThicknessConverter]) -> CornerRadiusToThicknessConverter:...
    def convert(self, value: typing.Optional[winrt.system.Object], target_type: winrt.windows.ui.xaml.interop.TypeName, parameter: typing.Optional[winrt.system.Object], language: str, /) -> typing.Optional[winrt.system.Object]: ...
    def convert_back(self, value: typing.Optional[winrt.system.Object], target_type: winrt.windows.ui.xaml.interop.TypeName, parameter: typing.Optional[winrt.system.Object], language: str, /) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def multiplier(self) -> winrt.system.Double: ...
    @multiplier.setter
    def multiplier(self, value: winrt.system.Double) -> None: ...
    @_property
    def conversion_kind(self) -> CornerRadiusToThicknessConverterKind: ...
    @conversion_kind.setter
    def conversion_kind(self, value: CornerRadiusToThicknessConverterKind) -> None: ...

@typing.final
class DragCompletedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragCompletedEventArgs: ...
    def __new__(cls: typing.Type[DragCompletedEventArgs], horizontal_change: winrt.system.Double, vertical_change: winrt.system.Double, canceled: bool) -> DragCompletedEventArgs:...
    @_property
    def canceled(self) -> bool: ...
    @_property
    def horizontal_change(self) -> winrt.system.Double: ...
    @_property
    def vertical_change(self) -> winrt.system.Double: ...

@typing.final
class DragDeltaEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragDeltaEventArgs: ...
    def __new__(cls: typing.Type[DragDeltaEventArgs], horizontal_change: winrt.system.Double, vertical_change: winrt.system.Double) -> DragDeltaEventArgs:...
    @_property
    def horizontal_change(self) -> winrt.system.Double: ...
    @_property
    def vertical_change(self) -> winrt.system.Double: ...

@typing.final
class DragStartedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DragStartedEventArgs: ...
    def __new__(cls: typing.Type[DragStartedEventArgs], horizontal_offset: winrt.system.Double, vertical_offset: winrt.system.Double) -> DragStartedEventArgs:...
    @_property
    def horizontal_offset(self) -> winrt.system.Double: ...
    @_property
    def vertical_offset(self) -> winrt.system.Double: ...

@typing.final
class FlyoutBase_Static(type):
    def get_attached_flyout(cls, element: typing.Optional[winrt.microsoft.ui.xaml.FrameworkElement], /) -> typing.Optional[FlyoutBase]: ...
    def set_attached_flyout(cls, element: typing.Optional[winrt.microsoft.ui.xaml.FrameworkElement], value: typing.Optional[FlyoutBase], /) -> None: ...
    def show_attached_flyout(cls, flyout_owner: typing.Optional[winrt.microsoft.ui.xaml.FrameworkElement], /) -> None: ...
    @_property
    def allow_focus_on_interaction_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def allow_focus_when_disabled_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def are_open_close_animations_enabled_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def attached_flyout_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def element_sound_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def input_device_prefers_primary_commands_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def is_open_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def light_dismiss_overlay_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def overlay_input_pass_through_element_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def placement_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def should_constrain_to_root_bounds_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def show_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def target_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def system_backdrop_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class FlyoutBase(winrt.system.Object, metaclass=FlyoutBase_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FlyoutBase: ...
    def create_presenter(self) -> typing.Optional[winrt.microsoft.ui.xaml.controls.Control]: ...
    def hide(self) -> None: ...
    def on_process_keyboard_accelerators(self, args: typing.Optional[winrt.microsoft.ui.xaml.input.ProcessKeyboardAcceleratorEventArgs], /) -> None: ...
    @typing.overload
    def show_at(self, placement_target: typing.Optional[winrt.microsoft.ui.xaml.FrameworkElement], /) -> None: ...
    @typing.overload
    def show_at(self, placement_target: typing.Optional[winrt.microsoft.ui.xaml.DependencyObject], show_options: typing.Optional[FlyoutShowOptions], /) -> None: ...
    def try_invoke_keyboard_accelerator(self, args: typing.Optional[winrt.microsoft.ui.xaml.input.ProcessKeyboardAcceleratorEventArgs], /) -> None: ...
    def add_closed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_closing(self, handler: winrt.windows.foundation.TypedEventHandler[FlyoutBase, FlyoutBaseClosingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closing(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_opened(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_opened(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_opening(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_opening(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def xaml_root(self) -> typing.Optional[winrt.microsoft.ui.xaml.XamlRoot]: ...
    @xaml_root.setter
    def xaml_root(self, value: typing.Optional[winrt.microsoft.ui.xaml.XamlRoot]) -> None: ...
    @_property
    def show_mode(self) -> FlyoutShowMode: ...
    @show_mode.setter
    def show_mode(self, value: FlyoutShowMode) -> None: ...
    @_property
    def should_constrain_to_root_bounds(self) -> bool: ...
    @should_constrain_to_root_bounds.setter
    def should_constrain_to_root_bounds(self, value: bool) -> None: ...
    @_property
    def placement(self) -> FlyoutPlacementMode: ...
    @placement.setter
    def placement(self, value: FlyoutPlacementMode) -> None: ...
    @_property
    def overlay_input_pass_through_element(self) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyObject]: ...
    @overlay_input_pass_through_element.setter
    def overlay_input_pass_through_element(self, value: typing.Optional[winrt.microsoft.ui.xaml.DependencyObject]) -> None: ...
    @_property
    def light_dismiss_overlay_mode(self) -> winrt.microsoft.ui.xaml.controls.LightDismissOverlayMode: ...
    @light_dismiss_overlay_mode.setter
    def light_dismiss_overlay_mode(self, value: winrt.microsoft.ui.xaml.controls.LightDismissOverlayMode) -> None: ...
    @_property
    def element_sound_mode(self) -> winrt.microsoft.ui.xaml.ElementSoundMode: ...
    @element_sound_mode.setter
    def element_sound_mode(self, value: winrt.microsoft.ui.xaml.ElementSoundMode) -> None: ...
    @_property
    def are_open_close_animations_enabled(self) -> bool: ...
    @are_open_close_animations_enabled.setter
    def are_open_close_animations_enabled(self, value: bool) -> None: ...
    @_property
    def allow_focus_when_disabled(self) -> bool: ...
    @allow_focus_when_disabled.setter
    def allow_focus_when_disabled(self, value: bool) -> None: ...
    @_property
    def allow_focus_on_interaction(self) -> bool: ...
    @allow_focus_on_interaction.setter
    def allow_focus_on_interaction(self, value: bool) -> None: ...
    @_property
    def input_device_prefers_primary_commands(self) -> bool: ...
    @_property
    def is_constrained_to_root_bounds(self) -> bool: ...
    @_property
    def is_open(self) -> bool: ...
    @_property
    def target(self) -> typing.Optional[winrt.microsoft.ui.xaml.FrameworkElement]: ...
    @_property
    def system_backdrop(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.SystemBackdrop]: ...
    @system_backdrop.setter
    def system_backdrop(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.SystemBackdrop]) -> None: ...

@typing.final
class FlyoutBaseClosingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FlyoutBaseClosingEventArgs: ...
    @_property
    def cancel(self) -> bool: ...
    @cancel.setter
    def cancel(self, value: bool) -> None: ...

@typing.final
class FlyoutShowOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FlyoutShowOptions: ...
    def __new__(cls: typing.Type[FlyoutShowOptions]) -> FlyoutShowOptions:...
    @_property
    def show_mode(self) -> FlyoutShowMode: ...
    @show_mode.setter
    def show_mode(self, value: FlyoutShowMode) -> None: ...
    @_property
    def position(self) -> typing.Optional[typing.Optional[winrt.windows.foundation.Point]]: ...
    @position.setter
    def position(self, value: typing.Optional[typing.Optional[winrt.windows.foundation.Point]]) -> None: ...
    @_property
    def placement(self) -> FlyoutPlacementMode: ...
    @placement.setter
    def placement(self, value: FlyoutPlacementMode) -> None: ...
    @_property
    def exclusion_rect(self) -> typing.Optional[typing.Optional[winrt.windows.foundation.Rect]]: ...
    @exclusion_rect.setter
    def exclusion_rect(self, value: typing.Optional[typing.Optional[winrt.windows.foundation.Rect]]) -> None: ...

@typing.final
class GeneratorPositionHelper_Static(type):
    def from_index_and_offset(cls, index: winrt.system.Int32, offset: winrt.system.Int32, /) -> GeneratorPosition: ...

@typing.final
class GeneratorPositionHelper(winrt.system.Object, metaclass=GeneratorPositionHelper_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GeneratorPositionHelper: ...

@typing.final
class GridViewItemPresenter_Static(type):
    @_property
    def check_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_hint_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_selecting_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def content_margin_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def disabled_opacity_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def drag_background_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def drag_foreground_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def drag_opacity_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def focus_border_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def grid_view_item_presenter_horizontal_content_alignment_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def grid_view_item_presenter_padding_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def grid_view_item_presenter_vertical_content_alignment_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def placeholder_background_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def pointer_over_background_margin_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def pointer_over_background_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def reorder_hint_offset_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_background_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_border_thickness_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_foreground_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_pointer_over_background_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_pointer_over_border_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selection_check_mark_visual_enabled_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class GridViewItemPresenter(winrt.system.Object, metaclass=GridViewItemPresenter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GridViewItemPresenter: ...
    def __new__(cls: typing.Type[GridViewItemPresenter]) -> GridViewItemPresenter:...
    @_property
    def selection_check_mark_visual_enabled(self) -> bool: ...
    @selection_check_mark_visual_enabled.setter
    def selection_check_mark_visual_enabled(self, value: bool) -> None: ...
    @_property
    def selected_pointer_over_border_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selected_pointer_over_border_brush.setter
    def selected_pointer_over_border_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selected_pointer_over_background(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selected_pointer_over_background.setter
    def selected_pointer_over_background(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selected_foreground(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selected_foreground.setter
    def selected_foreground(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selected_border_thickness(self) -> winrt.microsoft.ui.xaml.Thickness: ...
    @selected_border_thickness.setter
    def selected_border_thickness(self, value: winrt.microsoft.ui.xaml.Thickness) -> None: ...
    @_property
    def selected_background(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selected_background.setter
    def selected_background(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def reorder_hint_offset(self) -> winrt.system.Double: ...
    @reorder_hint_offset.setter
    def reorder_hint_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def pointer_over_background_margin(self) -> winrt.microsoft.ui.xaml.Thickness: ...
    @pointer_over_background_margin.setter
    def pointer_over_background_margin(self, value: winrt.microsoft.ui.xaml.Thickness) -> None: ...
    @_property
    def pointer_over_background(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @pointer_over_background.setter
    def pointer_over_background(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def placeholder_background(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @placeholder_background.setter
    def placeholder_background(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def grid_view_item_presenter_vertical_content_alignment(self) -> winrt.microsoft.ui.xaml.VerticalAlignment: ...
    @grid_view_item_presenter_vertical_content_alignment.setter
    def grid_view_item_presenter_vertical_content_alignment(self, value: winrt.microsoft.ui.xaml.VerticalAlignment) -> None: ...
    @_property
    def grid_view_item_presenter_padding(self) -> winrt.microsoft.ui.xaml.Thickness: ...
    @grid_view_item_presenter_padding.setter
    def grid_view_item_presenter_padding(self, value: winrt.microsoft.ui.xaml.Thickness) -> None: ...
    @_property
    def grid_view_item_presenter_horizontal_content_alignment(self) -> winrt.microsoft.ui.xaml.HorizontalAlignment: ...
    @grid_view_item_presenter_horizontal_content_alignment.setter
    def grid_view_item_presenter_horizontal_content_alignment(self, value: winrt.microsoft.ui.xaml.HorizontalAlignment) -> None: ...
    @_property
    def focus_border_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @focus_border_brush.setter
    def focus_border_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def drag_opacity(self) -> winrt.system.Double: ...
    @drag_opacity.setter
    def drag_opacity(self, value: winrt.system.Double) -> None: ...
    @_property
    def drag_foreground(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @drag_foreground.setter
    def drag_foreground(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def drag_background(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @drag_background.setter
    def drag_background(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def disabled_opacity(self) -> winrt.system.Double: ...
    @disabled_opacity.setter
    def disabled_opacity(self, value: winrt.system.Double) -> None: ...
    @_property
    def content_margin(self) -> winrt.microsoft.ui.xaml.Thickness: ...
    @content_margin.setter
    def content_margin(self, value: winrt.microsoft.ui.xaml.Thickness) -> None: ...
    @_property
    def check_selecting_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_selecting_brush.setter
    def check_selecting_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def check_hint_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_hint_brush.setter
    def check_hint_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def check_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_brush.setter
    def check_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...

@typing.final
class GridViewItemTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> GridViewItemTemplateSettings: ...
    @_property
    def drag_items_count(self) -> winrt.system.Int32: ...

@typing.final
class InfoBarPanel_Static(type):
    def get_horizontal_orientation_margin(cls, object: typing.Optional[winrt.microsoft.ui.xaml.DependencyObject], /) -> winrt.microsoft.ui.xaml.Thickness: ...
    def get_vertical_orientation_margin(cls, object: typing.Optional[winrt.microsoft.ui.xaml.DependencyObject], /) -> winrt.microsoft.ui.xaml.Thickness: ...
    def set_horizontal_orientation_margin(cls, object: typing.Optional[winrt.microsoft.ui.xaml.DependencyObject], value: winrt.microsoft.ui.xaml.Thickness, /) -> None: ...
    def set_vertical_orientation_margin(cls, object: typing.Optional[winrt.microsoft.ui.xaml.DependencyObject], value: winrt.microsoft.ui.xaml.Thickness, /) -> None: ...
    @_property
    def horizontal_orientation_margin_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def horizontal_orientation_padding_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def vertical_orientation_margin_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def vertical_orientation_padding_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class InfoBarPanel(winrt.system.Object, metaclass=InfoBarPanel_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> InfoBarPanel: ...
    def __new__(cls: typing.Type[InfoBarPanel]) -> InfoBarPanel:...
    @_property
    def vertical_orientation_padding(self) -> winrt.microsoft.ui.xaml.Thickness: ...
    @vertical_orientation_padding.setter
    def vertical_orientation_padding(self, value: winrt.microsoft.ui.xaml.Thickness) -> None: ...
    @_property
    def horizontal_orientation_padding(self) -> winrt.microsoft.ui.xaml.Thickness: ...
    @horizontal_orientation_padding.setter
    def horizontal_orientation_padding(self, value: winrt.microsoft.ui.xaml.Thickness) -> None: ...

@typing.final
class ItemsChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ItemsChangedEventArgs: ...
    @_property
    def action(self) -> winrt.system.Int32: ...
    @_property
    def item_count(self) -> winrt.system.Int32: ...
    @_property
    def item_u_i_count(self) -> winrt.system.Int32: ...
    @_property
    def old_position(self) -> GeneratorPosition: ...
    @_property
    def position(self) -> GeneratorPosition: ...

@typing.final
class JumpListItemBackgroundConverter_Static(type):
    @_property
    def disabled_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def enabled_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class JumpListItemBackgroundConverter(winrt.system.Object, metaclass=JumpListItemBackgroundConverter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> JumpListItemBackgroundConverter: ...
    def __new__(cls: typing.Type[JumpListItemBackgroundConverter]) -> JumpListItemBackgroundConverter:...
    def convert(self, value: typing.Optional[winrt.system.Object], target_type: winrt.windows.ui.xaml.interop.TypeName, parameter: typing.Optional[winrt.system.Object], language: str, /) -> typing.Optional[winrt.system.Object]: ...
    def convert_back(self, value: typing.Optional[winrt.system.Object], target_type: winrt.windows.ui.xaml.interop.TypeName, parameter: typing.Optional[winrt.system.Object], language: str, /) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def enabled(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @enabled.setter
    def enabled(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def disabled(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @disabled.setter
    def disabled(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...

@typing.final
class JumpListItemForegroundConverter_Static(type):
    @_property
    def disabled_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def enabled_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class JumpListItemForegroundConverter(winrt.system.Object, metaclass=JumpListItemForegroundConverter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> JumpListItemForegroundConverter: ...
    def __new__(cls: typing.Type[JumpListItemForegroundConverter]) -> JumpListItemForegroundConverter:...
    def convert(self, value: typing.Optional[winrt.system.Object], target_type: winrt.windows.ui.xaml.interop.TypeName, parameter: typing.Optional[winrt.system.Object], language: str, /) -> typing.Optional[winrt.system.Object]: ...
    def convert_back(self, value: typing.Optional[winrt.system.Object], target_type: winrt.windows.ui.xaml.interop.TypeName, parameter: typing.Optional[winrt.system.Object], language: str, /) -> typing.Optional[winrt.system.Object]: ...
    @_property
    def enabled(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @enabled.setter
    def enabled(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def disabled(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @disabled.setter
    def disabled(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...

@typing.final
class LayoutInformation_Static(type):
    def get_available_size(cls, element: typing.Optional[winrt.microsoft.ui.xaml.UIElement], /) -> winrt.windows.foundation.Size: ...
    def get_layout_exception_element(cls, dispatcher: typing.Optional[winrt.system.Object], /) -> typing.Optional[winrt.microsoft.ui.xaml.UIElement]: ...
    def get_layout_slot(cls, element: typing.Optional[winrt.microsoft.ui.xaml.FrameworkElement], /) -> winrt.windows.foundation.Rect: ...

@typing.final
class LayoutInformation(winrt.system.Object, metaclass=LayoutInformation_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LayoutInformation: ...

@typing.final
class ListViewItemPresenter_Static(type):
    @_property
    def check_box_border_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_box_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_box_corner_radius_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_box_disabled_border_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_box_disabled_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_box_pointer_over_border_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_box_pointer_over_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_box_pressed_border_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_box_pressed_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_box_selected_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_box_selected_disabled_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_box_selected_pointer_over_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_box_selected_pressed_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_disabled_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_hint_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_pressed_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def check_selecting_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def content_margin_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def disabled_opacity_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def drag_background_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def drag_foreground_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def drag_opacity_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def focus_border_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def focus_secondary_border_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def list_view_item_presenter_horizontal_content_alignment_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def list_view_item_presenter_padding_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def list_view_item_presenter_vertical_content_alignment_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def placeholder_background_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def pointer_over_background_margin_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def pointer_over_background_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def pointer_over_border_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def pointer_over_foreground_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def pressed_background_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def reorder_hint_offset_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def reveal_background_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def reveal_background_shows_above_content_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def reveal_border_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def reveal_border_thickness_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_background_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_border_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_border_thickness_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_disabled_background_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_disabled_border_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_foreground_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_inner_border_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_pointer_over_background_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_pointer_over_border_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_pressed_background_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_pressed_border_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selection_check_mark_visual_enabled_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selection_indicator_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selection_indicator_corner_radius_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selection_indicator_disabled_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selection_indicator_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selection_indicator_pointer_over_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selection_indicator_pressed_brush_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selection_indicator_visual_enabled_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class ListViewItemPresenter(winrt.system.Object, metaclass=ListViewItemPresenter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ListViewItemPresenter: ...
    def __new__(cls: typing.Type[ListViewItemPresenter]) -> ListViewItemPresenter:...
    @_property
    def list_view_item_presenter_vertical_content_alignment(self) -> winrt.microsoft.ui.xaml.VerticalAlignment: ...
    @list_view_item_presenter_vertical_content_alignment.setter
    def list_view_item_presenter_vertical_content_alignment(self, value: winrt.microsoft.ui.xaml.VerticalAlignment) -> None: ...
    @_property
    def list_view_item_presenter_padding(self) -> winrt.microsoft.ui.xaml.Thickness: ...
    @list_view_item_presenter_padding.setter
    def list_view_item_presenter_padding(self, value: winrt.microsoft.ui.xaml.Thickness) -> None: ...
    @_property
    def list_view_item_presenter_horizontal_content_alignment(self) -> winrt.microsoft.ui.xaml.HorizontalAlignment: ...
    @list_view_item_presenter_horizontal_content_alignment.setter
    def list_view_item_presenter_horizontal_content_alignment(self, value: winrt.microsoft.ui.xaml.HorizontalAlignment) -> None: ...
    @_property
    def focus_secondary_border_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @focus_secondary_border_brush.setter
    def focus_secondary_border_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def focus_border_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @focus_border_brush.setter
    def focus_border_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def drag_opacity(self) -> winrt.system.Double: ...
    @drag_opacity.setter
    def drag_opacity(self, value: winrt.system.Double) -> None: ...
    @_property
    def reveal_background(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @reveal_background.setter
    def reveal_background(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def drag_background(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @drag_background.setter
    def drag_background(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def disabled_opacity(self) -> winrt.system.Double: ...
    @disabled_opacity.setter
    def disabled_opacity(self, value: winrt.system.Double) -> None: ...
    @_property
    def content_margin(self) -> winrt.microsoft.ui.xaml.Thickness: ...
    @content_margin.setter
    def content_margin(self, value: winrt.microsoft.ui.xaml.Thickness) -> None: ...
    @_property
    def check_selecting_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_selecting_brush.setter
    def check_selecting_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def check_pressed_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_pressed_brush.setter
    def check_pressed_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def check_mode(self) -> ListViewItemPresenterCheckMode: ...
    @check_mode.setter
    def check_mode(self, value: ListViewItemPresenterCheckMode) -> None: ...
    @_property
    def check_hint_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_hint_brush.setter
    def check_hint_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def check_box_border_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_box_border_brush.setter
    def check_box_border_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def check_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_brush.setter
    def check_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def check_box_selected_pressed_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_box_selected_pressed_brush.setter
    def check_box_selected_pressed_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def check_box_selected_pointer_over_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_box_selected_pointer_over_brush.setter
    def check_box_selected_pointer_over_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def check_box_selected_disabled_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_box_selected_disabled_brush.setter
    def check_box_selected_disabled_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def check_box_selected_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_box_selected_brush.setter
    def check_box_selected_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def check_box_pressed_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_box_pressed_brush.setter
    def check_box_pressed_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selection_check_mark_visual_enabled(self) -> bool: ...
    @selection_check_mark_visual_enabled.setter
    def selection_check_mark_visual_enabled(self, value: bool) -> None: ...
    @_property
    def check_box_pointer_over_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_box_pointer_over_brush.setter
    def check_box_pointer_over_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def check_box_pointer_over_border_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_box_pointer_over_border_brush.setter
    def check_box_pointer_over_border_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def check_box_disabled_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_box_disabled_brush.setter
    def check_box_disabled_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def check_box_disabled_border_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_box_disabled_border_brush.setter
    def check_box_disabled_border_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def check_box_corner_radius(self) -> winrt.microsoft.ui.xaml.CornerRadius: ...
    @check_box_corner_radius.setter
    def check_box_corner_radius(self, value: winrt.microsoft.ui.xaml.CornerRadius) -> None: ...
    @_property
    def check_box_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_box_brush.setter
    def check_box_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def check_disabled_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_disabled_brush.setter
    def check_disabled_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def placeholder_background(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @placeholder_background.setter
    def placeholder_background(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selected_disabled_border_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selected_disabled_border_brush.setter
    def selected_disabled_border_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selection_indicator_pressed_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selection_indicator_pressed_brush.setter
    def selection_indicator_pressed_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selection_indicator_pointer_over_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selection_indicator_pointer_over_brush.setter
    def selection_indicator_pointer_over_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selection_indicator_mode(self) -> ListViewItemPresenterSelectionIndicatorMode: ...
    @selection_indicator_mode.setter
    def selection_indicator_mode(self, value: ListViewItemPresenterSelectionIndicatorMode) -> None: ...
    @_property
    def selection_indicator_disabled_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selection_indicator_disabled_brush.setter
    def selection_indicator_disabled_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selection_indicator_corner_radius(self) -> winrt.microsoft.ui.xaml.CornerRadius: ...
    @selection_indicator_corner_radius.setter
    def selection_indicator_corner_radius(self, value: winrt.microsoft.ui.xaml.CornerRadius) -> None: ...
    @_property
    def selection_indicator_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selection_indicator_brush.setter
    def selection_indicator_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def check_box_pressed_border_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @check_box_pressed_border_brush.setter
    def check_box_pressed_border_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selected_pressed_border_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selected_pressed_border_brush.setter
    def selected_pressed_border_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selected_pressed_background(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selected_pressed_background.setter
    def selected_pressed_background(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selected_pointer_over_border_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selected_pointer_over_border_brush.setter
    def selected_pointer_over_border_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selected_pointer_over_background(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selected_pointer_over_background.setter
    def selected_pointer_over_background(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selected_inner_border_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selected_inner_border_brush.setter
    def selected_inner_border_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selected_foreground(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selected_foreground.setter
    def selected_foreground(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selection_indicator_visual_enabled(self) -> bool: ...
    @selection_indicator_visual_enabled.setter
    def selection_indicator_visual_enabled(self, value: bool) -> None: ...
    @_property
    def selected_disabled_background(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selected_disabled_background.setter
    def selected_disabled_background(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selected_border_thickness(self) -> winrt.microsoft.ui.xaml.Thickness: ...
    @selected_border_thickness.setter
    def selected_border_thickness(self, value: winrt.microsoft.ui.xaml.Thickness) -> None: ...
    @_property
    def selected_border_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selected_border_brush.setter
    def selected_border_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def selected_background(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @selected_background.setter
    def selected_background(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def reveal_border_thickness(self) -> winrt.microsoft.ui.xaml.Thickness: ...
    @reveal_border_thickness.setter
    def reveal_border_thickness(self, value: winrt.microsoft.ui.xaml.Thickness) -> None: ...
    @_property
    def reveal_border_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @reveal_border_brush.setter
    def reveal_border_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def reveal_background_shows_above_content(self) -> bool: ...
    @reveal_background_shows_above_content.setter
    def reveal_background_shows_above_content(self, value: bool) -> None: ...
    @_property
    def drag_foreground(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @drag_foreground.setter
    def drag_foreground(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def reorder_hint_offset(self) -> winrt.system.Double: ...
    @reorder_hint_offset.setter
    def reorder_hint_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def pressed_background(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @pressed_background.setter
    def pressed_background(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def pointer_over_foreground(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @pointer_over_foreground.setter
    def pointer_over_foreground(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def pointer_over_border_brush(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @pointer_over_border_brush.setter
    def pointer_over_border_brush(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def pointer_over_background_margin(self) -> winrt.microsoft.ui.xaml.Thickness: ...
    @pointer_over_background_margin.setter
    def pointer_over_background_margin(self, value: winrt.microsoft.ui.xaml.Thickness) -> None: ...
    @_property
    def pointer_over_background(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @pointer_over_background.setter
    def pointer_over_background(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...

@typing.final
class ListViewItemTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ListViewItemTemplateSettings: ...
    @_property
    def drag_items_count(self) -> winrt.system.Int32: ...

@typing.final
class LoopingSelector_Static(type):
    @_property
    def item_height_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def item_template_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def item_width_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def items_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_index_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_item_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def should_loop_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class LoopingSelector(winrt.system.Object, metaclass=LoopingSelector_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LoopingSelector: ...
    def add_selection_changed(self, handler: typing.Optional[winrt.microsoft.ui.xaml.controls.SelectionChangedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_selection_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def should_loop(self) -> bool: ...
    @should_loop.setter
    def should_loop(self, value: bool) -> None: ...
    @_property
    def selected_item(self) -> typing.Optional[winrt.system.Object]: ...
    @selected_item.setter
    def selected_item(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def selected_index(self) -> winrt.system.Int32: ...
    @selected_index.setter
    def selected_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def items(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[winrt.system.Object]]: ...
    @items.setter
    def items(self, value: typing.Optional[winrt.windows.foundation.collections.IVector[winrt.system.Object]]) -> None: ...
    @_property
    def item_width(self) -> winrt.system.Int32: ...
    @item_width.setter
    def item_width(self, value: winrt.system.Int32) -> None: ...
    @_property
    def item_template(self) -> typing.Optional[winrt.microsoft.ui.xaml.DataTemplate]: ...
    @item_template.setter
    def item_template(self, value: typing.Optional[winrt.microsoft.ui.xaml.DataTemplate]) -> None: ...
    @_property
    def item_height(self) -> winrt.system.Int32: ...
    @item_height.setter
    def item_height(self, value: winrt.system.Int32) -> None: ...

@typing.final
class LoopingSelectorItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LoopingSelectorItem: ...

@typing.final
class LoopingSelectorPanel(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> LoopingSelectorPanel: ...
    def get_irregular_snap_points(self, orientation: winrt.microsoft.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.system.Single]]: ...
    def get_regular_snap_points(self, orientation: winrt.microsoft.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Tuple[winrt.system.Single, winrt.system.Single]: ...
    def add_horizontal_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_horizontal_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_vertical_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_vertical_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def are_horizontal_snap_points_regular(self) -> bool: ...
    @_property
    def are_vertical_snap_points_regular(self) -> bool: ...

@typing.final
class MenuFlyoutItemTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MenuFlyoutItemTemplateSettings: ...
    @_property
    def keyboard_accelerator_text_min_width(self) -> winrt.system.Double: ...

@typing.final
class MenuFlyoutPresenterTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MenuFlyoutPresenterTemplateSettings: ...
    @_property
    def flyout_content_min_width(self) -> winrt.system.Double: ...

@typing.final
class MonochromaticOverlayPresenter_Static(type):
    @_property
    def replacement_color_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def source_element_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class MonochromaticOverlayPresenter(winrt.system.Object, metaclass=MonochromaticOverlayPresenter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MonochromaticOverlayPresenter: ...
    def __new__(cls: typing.Type[MonochromaticOverlayPresenter]) -> MonochromaticOverlayPresenter:...
    @_property
    def source_element(self) -> typing.Optional[winrt.microsoft.ui.xaml.UIElement]: ...
    @source_element.setter
    def source_element(self, value: typing.Optional[winrt.microsoft.ui.xaml.UIElement]) -> None: ...
    @_property
    def replacement_color(self) -> winrt.windows.ui.Color: ...
    @replacement_color.setter
    def replacement_color(self, value: winrt.windows.ui.Color) -> None: ...

@typing.final
class NavigationViewItemPresenter_Static(type):
    @_property
    def icon_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def template_settings_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def info_badge_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class NavigationViewItemPresenter(winrt.system.Object, metaclass=NavigationViewItemPresenter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationViewItemPresenter: ...
    def __new__(cls: typing.Type[NavigationViewItemPresenter]) -> NavigationViewItemPresenter:...
    @_property
    def icon(self) -> typing.Optional[winrt.microsoft.ui.xaml.controls.IconElement]: ...
    @icon.setter
    def icon(self, value: typing.Optional[winrt.microsoft.ui.xaml.controls.IconElement]) -> None: ...
    @_property
    def template_settings(self) -> typing.Optional[NavigationViewItemPresenterTemplateSettings]: ...
    @_property
    def info_badge(self) -> typing.Optional[winrt.microsoft.ui.xaml.controls.InfoBadge]: ...
    @info_badge.setter
    def info_badge(self, value: typing.Optional[winrt.microsoft.ui.xaml.controls.InfoBadge]) -> None: ...

@typing.final
class NavigationViewItemPresenterTemplateSettings_Static(type):
    @_property
    def icon_width_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def smaller_icon_width_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class NavigationViewItemPresenterTemplateSettings(winrt.system.Object, metaclass=NavigationViewItemPresenterTemplateSettings_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NavigationViewItemPresenterTemplateSettings: ...
    def __new__(cls: typing.Type[NavigationViewItemPresenterTemplateSettings]) -> NavigationViewItemPresenterTemplateSettings:...
    @_property
    def icon_width(self) -> winrt.system.Double: ...
    @_property
    def smaller_icon_width(self) -> winrt.system.Double: ...

@typing.final
class OrientedVirtualizingPanel(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> OrientedVirtualizingPanel: ...
    def get_insertion_indexes(self, position: winrt.windows.foundation.Point, /) -> typing.Tuple[winrt.system.Int32, winrt.system.Int32]: ...
    def get_irregular_snap_points(self, orientation: winrt.microsoft.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.system.Single]]: ...
    def get_regular_snap_points(self, orientation: winrt.microsoft.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Tuple[winrt.system.Single, winrt.system.Single]: ...
    def line_down(self) -> None: ...
    def line_left(self) -> None: ...
    def line_right(self) -> None: ...
    def line_up(self) -> None: ...
    def make_visible(self, visual: typing.Optional[winrt.microsoft.ui.xaml.UIElement], rectangle: winrt.windows.foundation.Rect, /) -> winrt.windows.foundation.Rect: ...
    def mouse_wheel_down(self) -> None: ...
    def mouse_wheel_left(self) -> None: ...
    def mouse_wheel_right(self) -> None: ...
    def mouse_wheel_up(self) -> None: ...
    def page_down(self) -> None: ...
    def page_left(self) -> None: ...
    def page_right(self) -> None: ...
    def page_up(self) -> None: ...
    def set_horizontal_offset(self, offset: winrt.system.Double, /) -> None: ...
    def set_vertical_offset(self, offset: winrt.system.Double, /) -> None: ...
    def add_horizontal_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_horizontal_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_vertical_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_vertical_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def scroll_owner(self) -> typing.Optional[winrt.system.Object]: ...
    @scroll_owner.setter
    def scroll_owner(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def can_vertically_scroll(self) -> bool: ...
    @can_vertically_scroll.setter
    def can_vertically_scroll(self, value: bool) -> None: ...
    @_property
    def can_horizontally_scroll(self) -> bool: ...
    @can_horizontally_scroll.setter
    def can_horizontally_scroll(self, value: bool) -> None: ...
    @_property
    def extent_height(self) -> winrt.system.Double: ...
    @_property
    def extent_width(self) -> winrt.system.Double: ...
    @_property
    def horizontal_offset(self) -> winrt.system.Double: ...
    @_property
    def vertical_offset(self) -> winrt.system.Double: ...
    @_property
    def viewport_height(self) -> winrt.system.Double: ...
    @_property
    def viewport_width(self) -> winrt.system.Double: ...
    @_property
    def are_horizontal_snap_points_regular(self) -> bool: ...
    @_property
    def are_vertical_snap_points_regular(self) -> bool: ...

@typing.final
class PickerFlyoutBase_Static(type):
    def get_title(cls, element: typing.Optional[winrt.microsoft.ui.xaml.DependencyObject], /) -> str: ...
    def set_title(cls, element: typing.Optional[winrt.microsoft.ui.xaml.DependencyObject], value: str, /) -> None: ...
    @_property
    def title_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class PickerFlyoutBase(winrt.system.Object, metaclass=PickerFlyoutBase_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PickerFlyoutBase: ...
    def on_confirmed(self) -> None: ...
    def should_show_confirmation_buttons(self) -> bool: ...

@typing.final
class PivotHeaderItem(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PivotHeaderItem: ...
    def __new__(cls: typing.Type[PivotHeaderItem]) -> PivotHeaderItem:...

@typing.final
class PivotHeaderPanel(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PivotHeaderPanel: ...
    def __new__(cls: typing.Type[PivotHeaderPanel]) -> PivotHeaderPanel:...

@typing.final
class PivotPanel(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PivotPanel: ...
    def __new__(cls: typing.Type[PivotPanel]) -> PivotPanel:...
    def get_irregular_snap_points(self, orientation: winrt.microsoft.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.system.Single]]: ...
    def get_regular_snap_points(self, orientation: winrt.microsoft.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Tuple[winrt.system.Single, winrt.system.Single]: ...
    def add_horizontal_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_horizontal_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_vertical_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_vertical_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def are_horizontal_snap_points_regular(self) -> bool: ...
    @_property
    def are_vertical_snap_points_regular(self) -> bool: ...

@typing.final
class Popup_Static(type):
    @_property
    def child_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def child_transitions_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def horizontal_offset_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def is_light_dismiss_enabled_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def is_open_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def light_dismiss_overlay_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def should_constrain_to_root_bounds_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def vertical_offset_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def desired_placement_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def placement_target_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def system_backdrop_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class Popup(winrt.system.Object, metaclass=Popup_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Popup: ...
    def __new__(cls: typing.Type[Popup]) -> Popup:...
    def add_closed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_closed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_opened(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_opened(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_actual_placement_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_actual_placement_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def vertical_offset(self) -> winrt.system.Double: ...
    @vertical_offset.setter
    def vertical_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def should_constrain_to_root_bounds(self) -> bool: ...
    @should_constrain_to_root_bounds.setter
    def should_constrain_to_root_bounds(self, value: bool) -> None: ...
    @_property
    def light_dismiss_overlay_mode(self) -> winrt.microsoft.ui.xaml.controls.LightDismissOverlayMode: ...
    @light_dismiss_overlay_mode.setter
    def light_dismiss_overlay_mode(self, value: winrt.microsoft.ui.xaml.controls.LightDismissOverlayMode) -> None: ...
    @_property
    def is_open(self) -> bool: ...
    @is_open.setter
    def is_open(self, value: bool) -> None: ...
    @_property
    def is_light_dismiss_enabled(self) -> bool: ...
    @is_light_dismiss_enabled.setter
    def is_light_dismiss_enabled(self, value: bool) -> None: ...
    @_property
    def horizontal_offset(self) -> winrt.system.Double: ...
    @horizontal_offset.setter
    def horizontal_offset(self, value: winrt.system.Double) -> None: ...
    @_property
    def child_transitions(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.animation.TransitionCollection]: ...
    @child_transitions.setter
    def child_transitions(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.animation.TransitionCollection]) -> None: ...
    @_property
    def child(self) -> typing.Optional[winrt.microsoft.ui.xaml.UIElement]: ...
    @child.setter
    def child(self, value: typing.Optional[winrt.microsoft.ui.xaml.UIElement]) -> None: ...
    @_property
    def is_constrained_to_root_bounds(self) -> bool: ...
    @_property
    def placement_target(self) -> typing.Optional[winrt.microsoft.ui.xaml.FrameworkElement]: ...
    @placement_target.setter
    def placement_target(self, value: typing.Optional[winrt.microsoft.ui.xaml.FrameworkElement]) -> None: ...
    @_property
    def desired_placement(self) -> PopupPlacementMode: ...
    @desired_placement.setter
    def desired_placement(self, value: PopupPlacementMode) -> None: ...
    @_property
    def actual_placement(self) -> PopupPlacementMode: ...
    @_property
    def system_backdrop(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.SystemBackdrop]: ...
    @system_backdrop.setter
    def system_backdrop(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.SystemBackdrop]) -> None: ...

@typing.final
class RangeBase_Static(type):
    @_property
    def large_change_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def maximum_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def minimum_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def small_change_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def value_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class RangeBase(winrt.system.Object, metaclass=RangeBase_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RangeBase: ...
    def on_maximum_changed(self, old_maximum: winrt.system.Double, new_maximum: winrt.system.Double, /) -> None: ...
    def on_minimum_changed(self, old_minimum: winrt.system.Double, new_minimum: winrt.system.Double, /) -> None: ...
    def on_value_changed(self, old_value: winrt.system.Double, new_value: winrt.system.Double, /) -> None: ...
    def add_value_changed(self, handler: typing.Optional[RangeBaseValueChangedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_value_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def value(self) -> winrt.system.Double: ...
    @value.setter
    def value(self, value: winrt.system.Double) -> None: ...
    @_property
    def small_change(self) -> winrt.system.Double: ...
    @small_change.setter
    def small_change(self, value: winrt.system.Double) -> None: ...
    @_property
    def minimum(self) -> winrt.system.Double: ...
    @minimum.setter
    def minimum(self, value: winrt.system.Double) -> None: ...
    @_property
    def maximum(self) -> winrt.system.Double: ...
    @maximum.setter
    def maximum(self, value: winrt.system.Double) -> None: ...
    @_property
    def large_change(self) -> winrt.system.Double: ...
    @large_change.setter
    def large_change(self, value: winrt.system.Double) -> None: ...

@typing.final
class RangeBaseValueChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RangeBaseValueChangedEventArgs: ...
    @_property
    def new_value(self) -> winrt.system.Double: ...
    @_property
    def old_value(self) -> winrt.system.Double: ...

@typing.final
class RepeatButton_Static(type):
    @_property
    def delay_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def interval_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class RepeatButton(winrt.system.Object, metaclass=RepeatButton_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RepeatButton: ...
    def __new__(cls: typing.Type[RepeatButton]) -> RepeatButton:...
    @_property
    def interval(self) -> winrt.system.Int32: ...
    @interval.setter
    def interval(self, value: winrt.system.Int32) -> None: ...
    @_property
    def delay(self) -> winrt.system.Int32: ...
    @delay.setter
    def delay(self, value: winrt.system.Int32) -> None: ...

@typing.final
class RepeatedScrollSnapPoint(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RepeatedScrollSnapPoint: ...
    def __new__(cls: typing.Type[RepeatedScrollSnapPoint], offset: winrt.system.Double, interval: winrt.system.Double, start: winrt.system.Double, end: winrt.system.Double, alignment: ScrollSnapPointsAlignment) -> RepeatedScrollSnapPoint:...
    @_property
    def end(self) -> winrt.system.Double: ...
    @_property
    def interval(self) -> winrt.system.Double: ...
    @_property
    def offset(self) -> winrt.system.Double: ...
    @_property
    def start(self) -> winrt.system.Double: ...

@typing.final
class RepeatedZoomSnapPoint(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> RepeatedZoomSnapPoint: ...
    def __new__(cls: typing.Type[RepeatedZoomSnapPoint], offset: winrt.system.Double, interval: winrt.system.Double, start: winrt.system.Double, end: winrt.system.Double) -> RepeatedZoomSnapPoint:...
    @_property
    def end(self) -> winrt.system.Double: ...
    @_property
    def interval(self) -> winrt.system.Double: ...
    @_property
    def offset(self) -> winrt.system.Double: ...
    @_property
    def start(self) -> winrt.system.Double: ...

@typing.final
class ScrollBar_Static(type):
    @_property
    def indicator_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def orientation_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def viewport_size_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class ScrollBar(winrt.system.Object, metaclass=ScrollBar_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollBar: ...
    def __new__(cls: typing.Type[ScrollBar]) -> ScrollBar:...
    def add_scroll(self, handler: typing.Optional[ScrollEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_scroll(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def viewport_size(self) -> winrt.system.Double: ...
    @viewport_size.setter
    def viewport_size(self, value: winrt.system.Double) -> None: ...
    @_property
    def orientation(self) -> winrt.microsoft.ui.xaml.controls.Orientation: ...
    @orientation.setter
    def orientation(self, value: winrt.microsoft.ui.xaml.controls.Orientation) -> None: ...
    @_property
    def indicator_mode(self) -> ScrollingIndicatorMode: ...
    @indicator_mode.setter
    def indicator_mode(self, value: ScrollingIndicatorMode) -> None: ...

@typing.final
class ScrollControllerAddScrollVelocityRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollControllerAddScrollVelocityRequestedEventArgs: ...
    def __new__(cls: typing.Type[ScrollControllerAddScrollVelocityRequestedEventArgs], offset_velocity: winrt.system.Single, inertia_decay_rate: typing.Optional[winrt.system.Single]) -> ScrollControllerAddScrollVelocityRequestedEventArgs:...
    @_property
    def correlation_id(self) -> winrt.system.Int32: ...
    @correlation_id.setter
    def correlation_id(self, value: winrt.system.Int32) -> None: ...
    @_property
    def inertia_decay_rate(self) -> typing.Optional[typing.Optional[winrt.system.Single]]: ...
    @_property
    def offset_velocity(self) -> winrt.system.Single: ...

@typing.final
class ScrollControllerPanRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollControllerPanRequestedEventArgs: ...
    def __new__(cls: typing.Type[ScrollControllerPanRequestedEventArgs], pointer_point: typing.Optional[winrt.microsoft.ui.input.PointerPoint]) -> ScrollControllerPanRequestedEventArgs:...
    @_property
    def handled(self) -> bool: ...
    @handled.setter
    def handled(self, value: bool) -> None: ...
    @_property
    def pointer_point(self) -> typing.Optional[winrt.microsoft.ui.input.PointerPoint]: ...

@typing.final
class ScrollControllerScrollByRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollControllerScrollByRequestedEventArgs: ...
    def __new__(cls: typing.Type[ScrollControllerScrollByRequestedEventArgs], offset_delta: winrt.system.Double, options: typing.Optional[winrt.microsoft.ui.xaml.controls.ScrollingScrollOptions]) -> ScrollControllerScrollByRequestedEventArgs:...
    @_property
    def correlation_id(self) -> winrt.system.Int32: ...
    @correlation_id.setter
    def correlation_id(self, value: winrt.system.Int32) -> None: ...
    @_property
    def offset_delta(self) -> winrt.system.Double: ...
    @_property
    def options(self) -> typing.Optional[winrt.microsoft.ui.xaml.controls.ScrollingScrollOptions]: ...

@typing.final
class ScrollControllerScrollToRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollControllerScrollToRequestedEventArgs: ...
    def __new__(cls: typing.Type[ScrollControllerScrollToRequestedEventArgs], offset: winrt.system.Double, options: typing.Optional[winrt.microsoft.ui.xaml.controls.ScrollingScrollOptions]) -> ScrollControllerScrollToRequestedEventArgs:...
    @_property
    def correlation_id(self) -> winrt.system.Int32: ...
    @correlation_id.setter
    def correlation_id(self, value: winrt.system.Int32) -> None: ...
    @_property
    def offset(self) -> winrt.system.Double: ...
    @_property
    def options(self) -> typing.Optional[winrt.microsoft.ui.xaml.controls.ScrollingScrollOptions]: ...

@typing.final
class ScrollEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollEventArgs: ...
    def __new__(cls: typing.Type[ScrollEventArgs]) -> ScrollEventArgs:...
    @_property
    def new_value(self) -> winrt.system.Double: ...
    @_property
    def scroll_event_type(self) -> ScrollEventType: ...

@typing.final
class ScrollPresenter_Static(type):
    @_property
    def background_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def computed_horizontal_scroll_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def computed_vertical_scroll_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def content_orientation_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def content_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def horizontal_anchor_ratio_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def horizontal_scroll_chain_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def horizontal_scroll_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def horizontal_scroll_rail_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def ignored_input_kinds_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def max_zoom_factor_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def min_zoom_factor_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def vertical_anchor_ratio_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def vertical_scroll_chain_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def vertical_scroll_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def vertical_scroll_rail_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def zoom_chain_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def zoom_mode_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class ScrollPresenter(winrt.system.Object, metaclass=ScrollPresenter_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollPresenter: ...
    def __new__(cls: typing.Type[ScrollPresenter]) -> ScrollPresenter:...
    def add_scroll_velocity(self, offsets_velocity: winrt.windows.foundation.numerics.Vector2, inertia_decay_rate: typing.Optional[winrt.windows.foundation.numerics.Vector2], /) -> winrt.system.Int32: ...
    def add_zoom_velocity(self, zoom_factor_velocity: winrt.system.Single, center_point: typing.Optional[winrt.windows.foundation.numerics.Vector2], inertia_decay_rate: typing.Optional[winrt.system.Single], /) -> winrt.system.Int32: ...
    def register_anchor_candidate(self, element: typing.Optional[winrt.microsoft.ui.xaml.UIElement], /) -> None: ...
    @typing.overload
    def scroll_by(self, horizontal_offset_delta: winrt.system.Double, vertical_offset_delta: winrt.system.Double, /) -> winrt.system.Int32: ...
    @typing.overload
    def scroll_by(self, horizontal_offset_delta: winrt.system.Double, vertical_offset_delta: winrt.system.Double, options: typing.Optional[winrt.microsoft.ui.xaml.controls.ScrollingScrollOptions], /) -> winrt.system.Int32: ...
    @typing.overload
    def scroll_to(self, horizontal_offset: winrt.system.Double, vertical_offset: winrt.system.Double, /) -> winrt.system.Int32: ...
    @typing.overload
    def scroll_to(self, horizontal_offset: winrt.system.Double, vertical_offset: winrt.system.Double, options: typing.Optional[winrt.microsoft.ui.xaml.controls.ScrollingScrollOptions], /) -> winrt.system.Int32: ...
    def unregister_anchor_candidate(self, element: typing.Optional[winrt.microsoft.ui.xaml.UIElement], /) -> None: ...
    @typing.overload
    def zoom_by(self, zoom_factor_delta: winrt.system.Single, center_point: typing.Optional[winrt.windows.foundation.numerics.Vector2], /) -> winrt.system.Int32: ...
    @typing.overload
    def zoom_by(self, zoom_factor_delta: winrt.system.Single, center_point: typing.Optional[winrt.windows.foundation.numerics.Vector2], options: typing.Optional[winrt.microsoft.ui.xaml.controls.ScrollingZoomOptions], /) -> winrt.system.Int32: ...
    @typing.overload
    def zoom_to(self, zoom_factor: winrt.system.Single, center_point: typing.Optional[winrt.windows.foundation.numerics.Vector2], /) -> winrt.system.Int32: ...
    @typing.overload
    def zoom_to(self, zoom_factor: winrt.system.Single, center_point: typing.Optional[winrt.windows.foundation.numerics.Vector2], options: typing.Optional[winrt.microsoft.ui.xaml.controls.ScrollingZoomOptions], /) -> winrt.system.Int32: ...
    def add_anchor_requested(self, handler: winrt.windows.foundation.TypedEventHandler[ScrollPresenter, winrt.microsoft.ui.xaml.controls.ScrollingAnchorRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_anchor_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_bringing_into_view(self, handler: winrt.windows.foundation.TypedEventHandler[ScrollPresenter, winrt.microsoft.ui.xaml.controls.ScrollingBringingIntoViewEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_bringing_into_view(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_extent_changed(self, handler: winrt.windows.foundation.TypedEventHandler[ScrollPresenter, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_extent_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_scroll_animation_starting(self, handler: winrt.windows.foundation.TypedEventHandler[ScrollPresenter, winrt.microsoft.ui.xaml.controls.ScrollingScrollAnimationStartingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_scroll_animation_starting(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_scroll_completed(self, handler: winrt.windows.foundation.TypedEventHandler[ScrollPresenter, winrt.microsoft.ui.xaml.controls.ScrollingScrollCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_scroll_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_state_changed(self, handler: winrt.windows.foundation.TypedEventHandler[ScrollPresenter, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_state_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_view_changed(self, handler: winrt.windows.foundation.TypedEventHandler[ScrollPresenter, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_view_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_zoom_animation_starting(self, handler: winrt.windows.foundation.TypedEventHandler[ScrollPresenter, winrt.microsoft.ui.xaml.controls.ScrollingZoomAnimationStartingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_zoom_animation_starting(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_zoom_completed(self, handler: winrt.windows.foundation.TypedEventHandler[ScrollPresenter, winrt.microsoft.ui.xaml.controls.ScrollingZoomCompletedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_zoom_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def current_anchor(self) -> typing.Optional[winrt.microsoft.ui.xaml.UIElement]: ...
    @_property
    def ignored_input_kinds(self) -> winrt.microsoft.ui.xaml.controls.ScrollingInputKinds: ...
    @ignored_input_kinds.setter
    def ignored_input_kinds(self, value: winrt.microsoft.ui.xaml.controls.ScrollingInputKinds) -> None: ...
    @_property
    def horizontal_anchor_ratio(self) -> winrt.system.Double: ...
    @horizontal_anchor_ratio.setter
    def horizontal_anchor_ratio(self, value: winrt.system.Double) -> None: ...
    @_property
    def max_zoom_factor(self) -> winrt.system.Double: ...
    @max_zoom_factor.setter
    def max_zoom_factor(self, value: winrt.system.Double) -> None: ...
    @_property
    def horizontal_scroll_rail_mode(self) -> winrt.microsoft.ui.xaml.controls.ScrollingRailMode: ...
    @horizontal_scroll_rail_mode.setter
    def horizontal_scroll_rail_mode(self, value: winrt.microsoft.ui.xaml.controls.ScrollingRailMode) -> None: ...
    @_property
    def horizontal_scroll_mode(self) -> winrt.microsoft.ui.xaml.controls.ScrollingScrollMode: ...
    @horizontal_scroll_mode.setter
    def horizontal_scroll_mode(self, value: winrt.microsoft.ui.xaml.controls.ScrollingScrollMode) -> None: ...
    @_property
    def content_orientation(self) -> winrt.microsoft.ui.xaml.controls.ScrollingContentOrientation: ...
    @content_orientation.setter
    def content_orientation(self, value: winrt.microsoft.ui.xaml.controls.ScrollingContentOrientation) -> None: ...
    @_property
    def content(self) -> typing.Optional[winrt.microsoft.ui.xaml.UIElement]: ...
    @content.setter
    def content(self, value: typing.Optional[winrt.microsoft.ui.xaml.UIElement]) -> None: ...
    @_property
    def horizontal_scroll_controller(self) -> typing.Optional[IScrollController]: ...
    @horizontal_scroll_controller.setter
    def horizontal_scroll_controller(self, value: typing.Optional[IScrollController]) -> None: ...
    @_property
    def horizontal_scroll_chain_mode(self) -> winrt.microsoft.ui.xaml.controls.ScrollingChainMode: ...
    @horizontal_scroll_chain_mode.setter
    def horizontal_scroll_chain_mode(self, value: winrt.microsoft.ui.xaml.controls.ScrollingChainMode) -> None: ...
    @_property
    def min_zoom_factor(self) -> winrt.system.Double: ...
    @min_zoom_factor.setter
    def min_zoom_factor(self, value: winrt.system.Double) -> None: ...
    @_property
    def background(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @background.setter
    def background(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...
    @_property
    def zoom_mode(self) -> winrt.microsoft.ui.xaml.controls.ScrollingZoomMode: ...
    @zoom_mode.setter
    def zoom_mode(self, value: winrt.microsoft.ui.xaml.controls.ScrollingZoomMode) -> None: ...
    @_property
    def zoom_chain_mode(self) -> winrt.microsoft.ui.xaml.controls.ScrollingChainMode: ...
    @zoom_chain_mode.setter
    def zoom_chain_mode(self, value: winrt.microsoft.ui.xaml.controls.ScrollingChainMode) -> None: ...
    @_property
    def vertical_scroll_rail_mode(self) -> winrt.microsoft.ui.xaml.controls.ScrollingRailMode: ...
    @vertical_scroll_rail_mode.setter
    def vertical_scroll_rail_mode(self, value: winrt.microsoft.ui.xaml.controls.ScrollingRailMode) -> None: ...
    @_property
    def vertical_scroll_mode(self) -> winrt.microsoft.ui.xaml.controls.ScrollingScrollMode: ...
    @vertical_scroll_mode.setter
    def vertical_scroll_mode(self, value: winrt.microsoft.ui.xaml.controls.ScrollingScrollMode) -> None: ...
    @_property
    def vertical_scroll_controller(self) -> typing.Optional[IScrollController]: ...
    @vertical_scroll_controller.setter
    def vertical_scroll_controller(self, value: typing.Optional[IScrollController]) -> None: ...
    @_property
    def vertical_scroll_chain_mode(self) -> winrt.microsoft.ui.xaml.controls.ScrollingChainMode: ...
    @vertical_scroll_chain_mode.setter
    def vertical_scroll_chain_mode(self, value: winrt.microsoft.ui.xaml.controls.ScrollingChainMode) -> None: ...
    @_property
    def vertical_anchor_ratio(self) -> winrt.system.Double: ...
    @vertical_anchor_ratio.setter
    def vertical_anchor_ratio(self, value: winrt.system.Double) -> None: ...
    @_property
    def computed_horizontal_scroll_mode(self) -> winrt.microsoft.ui.xaml.controls.ScrollingScrollMode: ...
    @_property
    def computed_vertical_scroll_mode(self) -> winrt.microsoft.ui.xaml.controls.ScrollingScrollMode: ...
    @_property
    def expression_animation_sources(self) -> typing.Optional[winrt.microsoft.ui.composition.CompositionPropertySet]: ...
    @_property
    def extent_height(self) -> winrt.system.Double: ...
    @_property
    def extent_width(self) -> winrt.system.Double: ...
    @_property
    def horizontal_offset(self) -> winrt.system.Double: ...
    @_property
    def horizontal_snap_points(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[ScrollSnapPointBase]]: ...
    @_property
    def scrollable_height(self) -> winrt.system.Double: ...
    @_property
    def scrollable_width(self) -> winrt.system.Double: ...
    @_property
    def state(self) -> winrt.microsoft.ui.xaml.controls.ScrollingInteractionState: ...
    @_property
    def vertical_offset(self) -> winrt.system.Double: ...
    @_property
    def vertical_snap_points(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[ScrollSnapPointBase]]: ...
    @_property
    def viewport_height(self) -> winrt.system.Double: ...
    @_property
    def viewport_width(self) -> winrt.system.Double: ...
    @_property
    def zoom_factor(self) -> winrt.system.Single: ...
    @_property
    def zoom_snap_points(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[ZoomSnapPointBase]]: ...

@typing.final
class ScrollSnapPoint(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollSnapPoint: ...
    def __new__(cls: typing.Type[ScrollSnapPoint], snap_point_value: winrt.system.Double, alignment: ScrollSnapPointsAlignment) -> ScrollSnapPoint:...
    @_property
    def value(self) -> winrt.system.Double: ...

@typing.final
class ScrollSnapPointBase(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ScrollSnapPointBase: ...
    @_property
    def alignment(self) -> ScrollSnapPointsAlignment: ...

@typing.final
class Selector_Static(type):
    def get_is_selection_active(cls, element: typing.Optional[winrt.microsoft.ui.xaml.DependencyObject], /) -> bool: ...
    @_property
    def is_synchronized_with_current_item_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_index_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_item_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_value_path_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def selected_value_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class Selector(winrt.system.Object, metaclass=Selector_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Selector: ...
    def add_selection_changed(self, handler: typing.Optional[winrt.microsoft.ui.xaml.controls.SelectionChangedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_selection_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def selected_value_path(self) -> str: ...
    @selected_value_path.setter
    def selected_value_path(self, value: str) -> None: ...
    @_property
    def selected_value(self) -> typing.Optional[winrt.system.Object]: ...
    @selected_value.setter
    def selected_value(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def selected_item(self) -> typing.Optional[winrt.system.Object]: ...
    @selected_item.setter
    def selected_item(self, value: typing.Optional[winrt.system.Object]) -> None: ...
    @_property
    def selected_index(self) -> winrt.system.Int32: ...
    @selected_index.setter
    def selected_index(self, value: winrt.system.Int32) -> None: ...
    @_property
    def is_synchronized_with_current_item(self) -> typing.Optional[typing.Optional[bool]]: ...
    @is_synchronized_with_current_item.setter
    def is_synchronized_with_current_item(self, value: typing.Optional[typing.Optional[bool]]) -> None: ...

@typing.final
class SelectorItem_Static(type):
    @_property
    def is_selected_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class SelectorItem(winrt.system.Object, metaclass=SelectorItem_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SelectorItem: ...
    @_property
    def is_selected(self) -> bool: ...
    @is_selected.setter
    def is_selected(self, value: bool) -> None: ...

@typing.final
class SnapPointBase(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SnapPointBase: ...

@typing.final
class SplitViewTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SplitViewTemplateSettings: ...
    @_property
    def compact_pane_grid_length(self) -> winrt.microsoft.ui.xaml.GridLength: ...
    @_property
    def negative_open_pane_length(self) -> winrt.system.Double: ...
    @_property
    def negative_open_pane_length_minus_compact_length(self) -> winrt.system.Double: ...
    @_property
    def open_pane_grid_length(self) -> winrt.microsoft.ui.xaml.GridLength: ...
    @_property
    def open_pane_length(self) -> winrt.system.Double: ...
    @_property
    def open_pane_length_minus_compact_length(self) -> winrt.system.Double: ...

@typing.final
class TabViewListView(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TabViewListView: ...
    def __new__(cls: typing.Type[TabViewListView]) -> TabViewListView:...

@typing.final
class Thumb_Static(type):
    @_property
    def is_dragging_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class Thumb(winrt.system.Object, metaclass=Thumb_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Thumb: ...
    def __new__(cls: typing.Type[Thumb]) -> Thumb:...
    def cancel_drag(self) -> None: ...
    def add_drag_completed(self, handler: typing.Optional[DragCompletedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_drag_completed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_drag_delta(self, handler: typing.Optional[DragDeltaEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_drag_delta(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_drag_started(self, handler: typing.Optional[DragStartedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_drag_started(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_dragging(self) -> bool: ...

@typing.final
class TickBar_Static(type):
    @_property
    def fill_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class TickBar(winrt.system.Object, metaclass=TickBar_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TickBar: ...
    def __new__(cls: typing.Type[TickBar]) -> TickBar:...
    @_property
    def fill(self) -> typing.Optional[winrt.microsoft.ui.xaml.media.Brush]: ...
    @fill.setter
    def fill(self, value: typing.Optional[winrt.microsoft.ui.xaml.media.Brush]) -> None: ...

@typing.final
class ToggleButton_Static(type):
    @_property
    def is_checked_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...
    @_property
    def is_three_state_property(cls) -> typing.Optional[winrt.microsoft.ui.xaml.DependencyProperty]: ...

@typing.final
class ToggleButton(winrt.system.Object, metaclass=ToggleButton_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToggleButton: ...
    def __new__(cls: typing.Type[ToggleButton]) -> ToggleButton:...
    def on_toggle(self) -> None: ...
    def add_checked(self, handler: typing.Optional[winrt.microsoft.ui.xaml.RoutedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_checked(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_indeterminate(self, handler: typing.Optional[winrt.microsoft.ui.xaml.RoutedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_indeterminate(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_unchecked(self, handler: typing.Optional[winrt.microsoft.ui.xaml.RoutedEventHandler], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_unchecked(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_three_state(self) -> bool: ...
    @is_three_state.setter
    def is_three_state(self, value: bool) -> None: ...
    @_property
    def is_checked(self) -> typing.Optional[typing.Optional[bool]]: ...
    @is_checked.setter
    def is_checked(self, value: typing.Optional[typing.Optional[bool]]) -> None: ...

@typing.final
class ToggleSwitchTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToggleSwitchTemplateSettings: ...
    @_property
    def curtain_current_to_off_offset(self) -> winrt.system.Double: ...
    @_property
    def curtain_current_to_on_offset(self) -> winrt.system.Double: ...
    @_property
    def curtain_off_to_on_offset(self) -> winrt.system.Double: ...
    @_property
    def curtain_on_to_off_offset(self) -> winrt.system.Double: ...
    @_property
    def knob_current_to_off_offset(self) -> winrt.system.Double: ...
    @_property
    def knob_current_to_on_offset(self) -> winrt.system.Double: ...
    @_property
    def knob_off_to_on_offset(self) -> winrt.system.Double: ...
    @_property
    def knob_on_to_off_offset(self) -> winrt.system.Double: ...

@typing.final
class ToolTipTemplateSettings(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ToolTipTemplateSettings: ...
    @_property
    def from_horizontal_offset(self) -> winrt.system.Double: ...
    @_property
    def from_vertical_offset(self) -> winrt.system.Double: ...

@typing.final
class ZoomSnapPoint(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ZoomSnapPoint: ...
    def __new__(cls: typing.Type[ZoomSnapPoint], snap_point_value: winrt.system.Double) -> ZoomSnapPoint:...
    @_property
    def value(self) -> winrt.system.Double: ...

@typing.final
class ZoomSnapPointBase(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ZoomSnapPointBase: ...

@typing.final
class IScrollController(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IScrollController: ...
    def get_scroll_animation(self, correlation_id: winrt.system.Int32, start_position: winrt.windows.foundation.numerics.Vector2, end_position: winrt.windows.foundation.numerics.Vector2, default_animation: typing.Optional[winrt.microsoft.ui.composition.CompositionAnimation], /) -> typing.Optional[winrt.microsoft.ui.composition.CompositionAnimation]: ...
    def notify_requested_scroll_completed(self, correlation_id: winrt.system.Int32, /) -> None: ...
    def set_is_scrollable(self, is_scrollable: bool, /) -> None: ...
    def set_values(self, min_offset: winrt.system.Double, max_offset: winrt.system.Double, offset: winrt.system.Double, viewport_length: winrt.system.Double, /) -> None: ...
    def add_add_scroll_velocity_requested(self, handler: winrt.windows.foundation.TypedEventHandler[IScrollController, ScrollControllerAddScrollVelocityRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_add_scroll_velocity_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_can_scroll_changed(self, handler: winrt.windows.foundation.TypedEventHandler[IScrollController, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_can_scroll_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_is_scrolling_with_mouse_changed(self, handler: winrt.windows.foundation.TypedEventHandler[IScrollController, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_is_scrolling_with_mouse_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_scroll_by_requested(self, handler: winrt.windows.foundation.TypedEventHandler[IScrollController, ScrollControllerScrollByRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_scroll_by_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_scroll_to_requested(self, handler: winrt.windows.foundation.TypedEventHandler[IScrollController, ScrollControllerScrollToRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_scroll_to_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def can_scroll(self) -> bool: ...
    @_property
    def is_scrolling_with_mouse(self) -> bool: ...
    @_property
    def panning_info(self) -> typing.Optional[IScrollControllerPanningInfo]: ...

@typing.final
class IScrollControllerPanningInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IScrollControllerPanningInfo: ...
    def set_panning_element_expression_animation_sources(self, property_set: typing.Optional[winrt.microsoft.ui.composition.CompositionPropertySet], min_offset_property_name: str, max_offset_property_name: str, offset_property_name: str, multiplier_property_name: str, /) -> None: ...
    def add_changed(self, handler: winrt.windows.foundation.TypedEventHandler[IScrollControllerPanningInfo, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_pan_requested(self, handler: winrt.windows.foundation.TypedEventHandler[IScrollControllerPanningInfo, ScrollControllerPanRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_pan_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_rail_enabled(self) -> bool: ...
    @_property
    def pan_orientation(self) -> winrt.microsoft.ui.xaml.controls.Orientation: ...
    @_property
    def panning_element_ancestor(self) -> typing.Optional[winrt.microsoft.ui.xaml.UIElement]: ...

@typing.final
class IScrollSnapPointsInfo(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IScrollSnapPointsInfo: ...
    def get_irregular_snap_points(self, orientation: winrt.microsoft.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.system.Single]]: ...
    def get_regular_snap_points(self, orientation: winrt.microsoft.ui.xaml.controls.Orientation, alignment: SnapPointsAlignment, /) -> typing.Tuple[winrt.system.Single, winrt.system.Single]: ...
    def add_horizontal_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_horizontal_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_vertical_snap_points_changed(self, handler: winrt.windows.foundation.EventHandler[winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_vertical_snap_points_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def are_horizontal_snap_points_regular(self) -> bool: ...
    @_property
    def are_vertical_snap_points_regular(self) -> bool: ...

