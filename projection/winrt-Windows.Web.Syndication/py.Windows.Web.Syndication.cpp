// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "py.Windows.Web.Syndication.h"


namespace py::cpp::Windows::Web::Syndication
{
    // ----- SyndicationAttribute class --------------------

    static PyObject* _new_SyndicationAttribute(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                winrt::Windows::Web::Syndication::SyndicationAttribute instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Web::Syndication::SyndicationAttribute instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SyndicationAttribute(py::wrapper::Windows::Web::Syndication::SyndicationAttribute* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SyndicationAttribute_get_Value(py::wrapper::Windows::Web::Syndication::SyndicationAttribute* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationAttribute", L"Value"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationAttribute_put_Value(py::wrapper::Windows::Web::Syndication::SyndicationAttribute* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationAttribute", L"Value"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Value(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationAttribute_get_Namespace(py::wrapper::Windows::Web::Syndication::SyndicationAttribute* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationAttribute", L"Namespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Namespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationAttribute_put_Namespace(py::wrapper::Windows::Web::Syndication::SyndicationAttribute* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationAttribute", L"Namespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Namespace(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationAttribute_get_Name(py::wrapper::Windows::Web::Syndication::SyndicationAttribute* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationAttribute", L"Name"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationAttribute_put_Name(py::wrapper::Windows::Web::Syndication::SyndicationAttribute* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationAttribute", L"Name"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Name(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_SyndicationAttribute(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Web::Syndication::SyndicationAttribute>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SyndicationAttribute(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::Syndication::SyndicationAttribute>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SyndicationAttribute[] = {
        { "_assign_array_", _assign_array_SyndicationAttribute, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SyndicationAttribute), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SyndicationAttribute[] = {
        { "value", reinterpret_cast<getter>(SyndicationAttribute_get_Value), reinterpret_cast<setter>(SyndicationAttribute_put_Value), nullptr, nullptr },
        { "namespace", reinterpret_cast<getter>(SyndicationAttribute_get_Namespace), reinterpret_cast<setter>(SyndicationAttribute_put_Namespace), nullptr, nullptr },
        { "name", reinterpret_cast<getter>(SyndicationAttribute_get_Name), reinterpret_cast<setter>(SyndicationAttribute_put_Name), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SyndicationAttribute[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_SyndicationAttribute) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SyndicationAttribute) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SyndicationAttribute) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SyndicationAttribute) },
        { }
    };

    static PyType_Spec type_spec_SyndicationAttribute = {
        "winrt._winrt_windows_web_syndication.SyndicationAttribute",
        sizeof(py::wrapper::Windows::Web::Syndication::SyndicationAttribute),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SyndicationAttribute};

    // ----- SyndicationCategory class --------------------

    static PyObject* _new_SyndicationCategory(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Web::Syndication::SyndicationCategory instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                winrt::Windows::Web::Syndication::SyndicationCategory instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Web::Syndication::SyndicationCategory instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SyndicationCategory(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SyndicationCategory_GetXmlDocument(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.SyndicationCategory", L"GetXmlDocument", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationFormat>(args, 0);

                return py::convert(self->obj.GetXmlDocument(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SyndicationCategory_get_Term(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"Term"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Term());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationCategory_put_Term(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"Term"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Term(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationCategory_get_Scheme(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"Scheme"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Scheme());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationCategory_put_Scheme(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"Scheme"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Scheme(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationCategory_get_Label(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"Label"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Label());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationCategory_put_Label(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"Label"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Label(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationCategory_get_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationCategory_put_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeValue(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationCategory_get_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationCategory_put_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeNamespace(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationCategory_get_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationCategory_put_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationCategory_get_Language(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationCategory_put_Language(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Language(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationCategory_get_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.BaseUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationCategory_put_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.BaseUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationCategory_get_AttributeExtensions(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"AttributeExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.AttributeExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationCategory_get_ElementExtensions(py::wrapper::Windows::Web::Syndication::SyndicationCategory* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationCategory", L"ElementExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ElementExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_SyndicationCategory(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Web::Syndication::SyndicationCategory>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SyndicationCategory(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::Syndication::SyndicationCategory>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SyndicationCategory[] = {
        { "get_xml_document", reinterpret_cast<PyCFunction>(SyndicationCategory_GetXmlDocument), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_SyndicationCategory, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SyndicationCategory), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SyndicationCategory[] = {
        { "term", reinterpret_cast<getter>(SyndicationCategory_get_Term), reinterpret_cast<setter>(SyndicationCategory_put_Term), nullptr, nullptr },
        { "scheme", reinterpret_cast<getter>(SyndicationCategory_get_Scheme), reinterpret_cast<setter>(SyndicationCategory_put_Scheme), nullptr, nullptr },
        { "label", reinterpret_cast<getter>(SyndicationCategory_get_Label), reinterpret_cast<setter>(SyndicationCategory_put_Label), nullptr, nullptr },
        { "node_value", reinterpret_cast<getter>(SyndicationCategory_get_NodeValue), reinterpret_cast<setter>(SyndicationCategory_put_NodeValue), nullptr, nullptr },
        { "node_namespace", reinterpret_cast<getter>(SyndicationCategory_get_NodeNamespace), reinterpret_cast<setter>(SyndicationCategory_put_NodeNamespace), nullptr, nullptr },
        { "node_name", reinterpret_cast<getter>(SyndicationCategory_get_NodeName), reinterpret_cast<setter>(SyndicationCategory_put_NodeName), nullptr, nullptr },
        { "language", reinterpret_cast<getter>(SyndicationCategory_get_Language), reinterpret_cast<setter>(SyndicationCategory_put_Language), nullptr, nullptr },
        { "base_uri", reinterpret_cast<getter>(SyndicationCategory_get_BaseUri), reinterpret_cast<setter>(SyndicationCategory_put_BaseUri), nullptr, nullptr },
        { "attribute_extensions", reinterpret_cast<getter>(SyndicationCategory_get_AttributeExtensions), nullptr, nullptr, nullptr },
        { "element_extensions", reinterpret_cast<getter>(SyndicationCategory_get_ElementExtensions), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SyndicationCategory[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_SyndicationCategory) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SyndicationCategory) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SyndicationCategory) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SyndicationCategory) },
        { }
    };

    static PyType_Spec type_spec_SyndicationCategory = {
        "winrt._winrt_windows_web_syndication.SyndicationCategory",
        sizeof(py::wrapper::Windows::Web::Syndication::SyndicationCategory),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SyndicationCategory};

    // ----- SyndicationClient class --------------------

    static PyObject* _new_SyndicationClient(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::PasswordCredential>(args, 0);

                winrt::Windows::Web::Syndication::SyndicationClient instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Web::Syndication::SyndicationClient instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SyndicationClient(py::wrapper::Windows::Web::Syndication::SyndicationClient* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SyndicationClient_RetrieveFeedAsync(py::wrapper::Windows::Web::Syndication::SyndicationClient* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.SyndicationClient", L"RetrieveFeedAsync", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(self->obj.RetrieveFeedAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SyndicationClient_SetRequestHeader(py::wrapper::Windows::Web::Syndication::SyndicationClient* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.SyndicationClient", L"SetRequestHeader", 2))
                {
                    py::set_arg_count_version_error(2);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                self->obj.SetRequestHeader(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SyndicationClient_get_Timeout(py::wrapper::Windows::Web::Syndication::SyndicationClient* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationClient", L"Timeout"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Timeout());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationClient_put_Timeout(py::wrapper::Windows::Web::Syndication::SyndicationClient* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationClient", L"Timeout"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.Timeout(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationClient_get_ServerCredential(py::wrapper::Windows::Web::Syndication::SyndicationClient* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationClient", L"ServerCredential"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ServerCredential());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationClient_put_ServerCredential(py::wrapper::Windows::Web::Syndication::SyndicationClient* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationClient", L"ServerCredential"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Security::Credentials::PasswordCredential>(arg);

            self->obj.ServerCredential(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationClient_get_ProxyCredential(py::wrapper::Windows::Web::Syndication::SyndicationClient* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationClient", L"ProxyCredential"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ProxyCredential());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationClient_put_ProxyCredential(py::wrapper::Windows::Web::Syndication::SyndicationClient* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationClient", L"ProxyCredential"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Security::Credentials::PasswordCredential>(arg);

            self->obj.ProxyCredential(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationClient_get_MaxResponseBufferSize(py::wrapper::Windows::Web::Syndication::SyndicationClient* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationClient", L"MaxResponseBufferSize"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.MaxResponseBufferSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationClient_put_MaxResponseBufferSize(py::wrapper::Windows::Web::Syndication::SyndicationClient* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationClient", L"MaxResponseBufferSize"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.MaxResponseBufferSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationClient_get_BypassCacheOnRetrieve(py::wrapper::Windows::Web::Syndication::SyndicationClient* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationClient", L"BypassCacheOnRetrieve"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.BypassCacheOnRetrieve());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationClient_put_BypassCacheOnRetrieve(py::wrapper::Windows::Web::Syndication::SyndicationClient* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationClient", L"BypassCacheOnRetrieve"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<bool>(arg);

            self->obj.BypassCacheOnRetrieve(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_SyndicationClient(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Web::Syndication::SyndicationClient>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SyndicationClient(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::Syndication::SyndicationClient>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SyndicationClient[] = {
        { "retrieve_feed_async", reinterpret_cast<PyCFunction>(SyndicationClient_RetrieveFeedAsync), METH_VARARGS, nullptr },
        { "set_request_header", reinterpret_cast<PyCFunction>(SyndicationClient_SetRequestHeader), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_SyndicationClient, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SyndicationClient), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SyndicationClient[] = {
        { "timeout", reinterpret_cast<getter>(SyndicationClient_get_Timeout), reinterpret_cast<setter>(SyndicationClient_put_Timeout), nullptr, nullptr },
        { "server_credential", reinterpret_cast<getter>(SyndicationClient_get_ServerCredential), reinterpret_cast<setter>(SyndicationClient_put_ServerCredential), nullptr, nullptr },
        { "proxy_credential", reinterpret_cast<getter>(SyndicationClient_get_ProxyCredential), reinterpret_cast<setter>(SyndicationClient_put_ProxyCredential), nullptr, nullptr },
        { "max_response_buffer_size", reinterpret_cast<getter>(SyndicationClient_get_MaxResponseBufferSize), reinterpret_cast<setter>(SyndicationClient_put_MaxResponseBufferSize), nullptr, nullptr },
        { "bypass_cache_on_retrieve", reinterpret_cast<getter>(SyndicationClient_get_BypassCacheOnRetrieve), reinterpret_cast<setter>(SyndicationClient_put_BypassCacheOnRetrieve), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SyndicationClient[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_SyndicationClient) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SyndicationClient) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SyndicationClient) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SyndicationClient) },
        { }
    };

    static PyType_Spec type_spec_SyndicationClient = {
        "winrt._winrt_windows_web_syndication.SyndicationClient",
        sizeof(py::wrapper::Windows::Web::Syndication::SyndicationClient),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SyndicationClient};

    // ----- SyndicationContent class --------------------

    static PyObject* _new_SyndicationContent(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationTextType>(args, 1);

                winrt::Windows::Web::Syndication::SyndicationContent instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                winrt::Windows::Web::Syndication::SyndicationContent instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Web::Syndication::SyndicationContent instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SyndicationContent(py::wrapper::Windows::Web::Syndication::SyndicationContent* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SyndicationContent_GetXmlDocument(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.SyndicationContent", L"GetXmlDocument", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationFormat>(args, 0);

                return py::convert(self->obj.GetXmlDocument(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SyndicationContent_get_SourceUri(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"SourceUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.SourceUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationContent_put_SourceUri(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"SourceUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.SourceUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationContent_get_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationContent_put_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeValue(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationContent_get_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.BaseUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationContent_put_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.BaseUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationContent_get_Language(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationContent_put_Language(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Language(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationContent_get_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationContent_put_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationContent_get_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationContent_put_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeNamespace(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationContent_get_AttributeExtensions(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"AttributeExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.AttributeExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationContent_get_ElementExtensions(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"ElementExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ElementExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationContent_get_Text(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"Text"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Text());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationContent_put_Text(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"Text"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Text(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationContent_get_Type(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"Type"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationContent_put_Type(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"Type"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Type(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationContent_get_Xml(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"Xml"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Xml());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationContent_put_Xml(py::wrapper::Windows::Web::Syndication::SyndicationContent* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationContent", L"Xml"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Data::Xml::Dom::XmlDocument>(arg);

            self->obj.Xml(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_SyndicationContent(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Web::Syndication::SyndicationContent>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SyndicationContent(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::Syndication::SyndicationContent>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SyndicationContent[] = {
        { "get_xml_document", reinterpret_cast<PyCFunction>(SyndicationContent_GetXmlDocument), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_SyndicationContent, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SyndicationContent), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SyndicationContent[] = {
        { "source_uri", reinterpret_cast<getter>(SyndicationContent_get_SourceUri), reinterpret_cast<setter>(SyndicationContent_put_SourceUri), nullptr, nullptr },
        { "node_value", reinterpret_cast<getter>(SyndicationContent_get_NodeValue), reinterpret_cast<setter>(SyndicationContent_put_NodeValue), nullptr, nullptr },
        { "base_uri", reinterpret_cast<getter>(SyndicationContent_get_BaseUri), reinterpret_cast<setter>(SyndicationContent_put_BaseUri), nullptr, nullptr },
        { "language", reinterpret_cast<getter>(SyndicationContent_get_Language), reinterpret_cast<setter>(SyndicationContent_put_Language), nullptr, nullptr },
        { "node_name", reinterpret_cast<getter>(SyndicationContent_get_NodeName), reinterpret_cast<setter>(SyndicationContent_put_NodeName), nullptr, nullptr },
        { "node_namespace", reinterpret_cast<getter>(SyndicationContent_get_NodeNamespace), reinterpret_cast<setter>(SyndicationContent_put_NodeNamespace), nullptr, nullptr },
        { "attribute_extensions", reinterpret_cast<getter>(SyndicationContent_get_AttributeExtensions), nullptr, nullptr, nullptr },
        { "element_extensions", reinterpret_cast<getter>(SyndicationContent_get_ElementExtensions), nullptr, nullptr, nullptr },
        { "text", reinterpret_cast<getter>(SyndicationContent_get_Text), reinterpret_cast<setter>(SyndicationContent_put_Text), nullptr, nullptr },
        { "type", reinterpret_cast<getter>(SyndicationContent_get_Type), reinterpret_cast<setter>(SyndicationContent_put_Type), nullptr, nullptr },
        { "xml", reinterpret_cast<getter>(SyndicationContent_get_Xml), reinterpret_cast<setter>(SyndicationContent_put_Xml), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SyndicationContent[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_SyndicationContent) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SyndicationContent) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SyndicationContent) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SyndicationContent) },
        { }
    };

    static PyType_Spec type_spec_SyndicationContent = {
        "winrt._winrt_windows_web_syndication.SyndicationContent",
        sizeof(py::wrapper::Windows::Web::Syndication::SyndicationContent),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SyndicationContent};

    // ----- SyndicationError class --------------------

    static PyObject* _new_SyndicationError(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Web::Syndication::SyndicationError>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Web::Syndication::SyndicationError>::type_name);
        return nullptr;
    }

    static PyObject* SyndicationError_GetStatus(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.SyndicationError", L"GetStatus", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(winrt::Windows::Web::Syndication::SyndicationError::GetStatus(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_SyndicationError[] = {
        { }
    };

    static PyGetSetDef _getset_SyndicationError[] = {
        { }
    };

    static PyType_Slot _type_slots_SyndicationError[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_SyndicationError) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SyndicationError) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SyndicationError) },
        { }
    };

    static PyType_Spec type_spec_SyndicationError = {
        "winrt._winrt_windows_web_syndication.SyndicationError",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SyndicationError};

    static PyGetSetDef getset_SyndicationError_Static[] = {
        { }
    };

    static PyMethodDef methods_SyndicationError_Static[] = {
        { "get_status", reinterpret_cast<PyCFunction>(SyndicationError_GetStatus), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_SyndicationError_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_SyndicationError_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_SyndicationError_Static) },
        { }
    };

    static PyType_Spec type_spec_SyndicationError_Static =
    {
        "winrt._winrt_windows_web_syndication.SyndicationError_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_SyndicationError_Static
    };

    // ----- SyndicationFeed class --------------------

    static PyObject* _new_SyndicationFeed(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 2);

                winrt::Windows::Web::Syndication::SyndicationFeed instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Web::Syndication::SyndicationFeed instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SyndicationFeed(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SyndicationFeed_GetXmlDocument(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.SyndicationFeed", L"GetXmlDocument", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationFormat>(args, 0);

                return py::convert(self->obj.GetXmlDocument(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SyndicationFeed_Load(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Load", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Load(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SyndicationFeed_LoadFromXml(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.SyndicationFeed", L"LoadFromXml", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Data::Xml::Dom::XmlDocument>(args, 0);

                self->obj.LoadFromXml(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SyndicationFeed_get_Title(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Title"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationFeed_put_Title(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Title"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Web::Syndication::ISyndicationText>(arg);

            self->obj.Title(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationFeed_get_Subtitle(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Subtitle"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Subtitle());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationFeed_put_Subtitle(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Subtitle"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Web::Syndication::ISyndicationText>(arg);

            self->obj.Subtitle(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationFeed_get_Rights(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Rights"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Rights());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationFeed_put_Rights(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Rights"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Web::Syndication::ISyndicationText>(arg);

            self->obj.Rights(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationFeed_get_Generator(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Generator"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Generator());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationFeed_put_Generator(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Generator"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationGenerator>(arg);

            self->obj.Generator(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationFeed_get_LastUpdatedTime(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"LastUpdatedTime"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.LastUpdatedTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationFeed_put_LastUpdatedTime(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"LastUpdatedTime"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.LastUpdatedTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationFeed_get_ImageUri(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"ImageUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ImageUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationFeed_put_ImageUri(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"ImageUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.ImageUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationFeed_get_IconUri(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"IconUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.IconUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationFeed_put_IconUri(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"IconUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.IconUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationFeed_get_Id(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Id"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationFeed_put_Id(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Id"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Id(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationFeed_get_FirstUri(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"FirstUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.FirstUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationFeed_get_Items(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Items"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Items());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationFeed_get_LastUri(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"LastUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.LastUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationFeed_get_Links(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Links"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Links());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationFeed_get_NextUri(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"NextUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NextUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationFeed_get_PreviousUri(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"PreviousUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.PreviousUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationFeed_get_Categories(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Categories"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Categories());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationFeed_get_SourceFormat(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"SourceFormat"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.SourceFormat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationFeed_get_Contributors(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Contributors"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Contributors());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationFeed_get_Authors(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Authors"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Authors());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationFeed_get_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationFeed_put_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeValue(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationFeed_get_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationFeed_put_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeNamespace(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationFeed_get_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationFeed_put_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationFeed_get_Language(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationFeed_put_Language(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Language(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationFeed_get_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.BaseUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationFeed_put_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.BaseUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationFeed_get_AttributeExtensions(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"AttributeExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.AttributeExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationFeed_get_ElementExtensions(py::wrapper::Windows::Web::Syndication::SyndicationFeed* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationFeed", L"ElementExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ElementExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_SyndicationFeed(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Web::Syndication::SyndicationFeed>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SyndicationFeed(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::Syndication::SyndicationFeed>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SyndicationFeed[] = {
        { "get_xml_document", reinterpret_cast<PyCFunction>(SyndicationFeed_GetXmlDocument), METH_VARARGS, nullptr },
        { "load", reinterpret_cast<PyCFunction>(SyndicationFeed_Load), METH_VARARGS, nullptr },
        { "load_from_xml", reinterpret_cast<PyCFunction>(SyndicationFeed_LoadFromXml), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_SyndicationFeed, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SyndicationFeed), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SyndicationFeed[] = {
        { "title", reinterpret_cast<getter>(SyndicationFeed_get_Title), reinterpret_cast<setter>(SyndicationFeed_put_Title), nullptr, nullptr },
        { "subtitle", reinterpret_cast<getter>(SyndicationFeed_get_Subtitle), reinterpret_cast<setter>(SyndicationFeed_put_Subtitle), nullptr, nullptr },
        { "rights", reinterpret_cast<getter>(SyndicationFeed_get_Rights), reinterpret_cast<setter>(SyndicationFeed_put_Rights), nullptr, nullptr },
        { "generator", reinterpret_cast<getter>(SyndicationFeed_get_Generator), reinterpret_cast<setter>(SyndicationFeed_put_Generator), nullptr, nullptr },
        { "last_updated_time", reinterpret_cast<getter>(SyndicationFeed_get_LastUpdatedTime), reinterpret_cast<setter>(SyndicationFeed_put_LastUpdatedTime), nullptr, nullptr },
        { "image_uri", reinterpret_cast<getter>(SyndicationFeed_get_ImageUri), reinterpret_cast<setter>(SyndicationFeed_put_ImageUri), nullptr, nullptr },
        { "icon_uri", reinterpret_cast<getter>(SyndicationFeed_get_IconUri), reinterpret_cast<setter>(SyndicationFeed_put_IconUri), nullptr, nullptr },
        { "id", reinterpret_cast<getter>(SyndicationFeed_get_Id), reinterpret_cast<setter>(SyndicationFeed_put_Id), nullptr, nullptr },
        { "first_uri", reinterpret_cast<getter>(SyndicationFeed_get_FirstUri), nullptr, nullptr, nullptr },
        { "items", reinterpret_cast<getter>(SyndicationFeed_get_Items), nullptr, nullptr, nullptr },
        { "last_uri", reinterpret_cast<getter>(SyndicationFeed_get_LastUri), nullptr, nullptr, nullptr },
        { "links", reinterpret_cast<getter>(SyndicationFeed_get_Links), nullptr, nullptr, nullptr },
        { "next_uri", reinterpret_cast<getter>(SyndicationFeed_get_NextUri), nullptr, nullptr, nullptr },
        { "previous_uri", reinterpret_cast<getter>(SyndicationFeed_get_PreviousUri), nullptr, nullptr, nullptr },
        { "categories", reinterpret_cast<getter>(SyndicationFeed_get_Categories), nullptr, nullptr, nullptr },
        { "source_format", reinterpret_cast<getter>(SyndicationFeed_get_SourceFormat), nullptr, nullptr, nullptr },
        { "contributors", reinterpret_cast<getter>(SyndicationFeed_get_Contributors), nullptr, nullptr, nullptr },
        { "authors", reinterpret_cast<getter>(SyndicationFeed_get_Authors), nullptr, nullptr, nullptr },
        { "node_value", reinterpret_cast<getter>(SyndicationFeed_get_NodeValue), reinterpret_cast<setter>(SyndicationFeed_put_NodeValue), nullptr, nullptr },
        { "node_namespace", reinterpret_cast<getter>(SyndicationFeed_get_NodeNamespace), reinterpret_cast<setter>(SyndicationFeed_put_NodeNamespace), nullptr, nullptr },
        { "node_name", reinterpret_cast<getter>(SyndicationFeed_get_NodeName), reinterpret_cast<setter>(SyndicationFeed_put_NodeName), nullptr, nullptr },
        { "language", reinterpret_cast<getter>(SyndicationFeed_get_Language), reinterpret_cast<setter>(SyndicationFeed_put_Language), nullptr, nullptr },
        { "base_uri", reinterpret_cast<getter>(SyndicationFeed_get_BaseUri), reinterpret_cast<setter>(SyndicationFeed_put_BaseUri), nullptr, nullptr },
        { "attribute_extensions", reinterpret_cast<getter>(SyndicationFeed_get_AttributeExtensions), nullptr, nullptr, nullptr },
        { "element_extensions", reinterpret_cast<getter>(SyndicationFeed_get_ElementExtensions), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SyndicationFeed[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_SyndicationFeed) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SyndicationFeed) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SyndicationFeed) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SyndicationFeed) },
        { }
    };

    static PyType_Spec type_spec_SyndicationFeed = {
        "winrt._winrt_windows_web_syndication.SyndicationFeed",
        sizeof(py::wrapper::Windows::Web::Syndication::SyndicationFeed),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SyndicationFeed};

    // ----- SyndicationGenerator class --------------------

    static PyObject* _new_SyndicationGenerator(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Web::Syndication::SyndicationGenerator instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Web::Syndication::SyndicationGenerator instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SyndicationGenerator(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SyndicationGenerator_GetXmlDocument(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"GetXmlDocument", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationFormat>(args, 0);

                return py::convert(self->obj.GetXmlDocument(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SyndicationGenerator_get_Version(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"Version"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Version());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationGenerator_put_Version(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"Version"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Version(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationGenerator_get_Uri(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"Uri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationGenerator_put_Uri(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"Uri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Uri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationGenerator_get_Text(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"Text"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Text());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationGenerator_put_Text(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"Text"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Text(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationGenerator_get_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationGenerator_put_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeValue(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationGenerator_get_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationGenerator_put_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeNamespace(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationGenerator_get_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationGenerator_put_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationGenerator_get_Language(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationGenerator_put_Language(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Language(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationGenerator_get_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.BaseUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationGenerator_put_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.BaseUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationGenerator_get_AttributeExtensions(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"AttributeExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.AttributeExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationGenerator_get_ElementExtensions(py::wrapper::Windows::Web::Syndication::SyndicationGenerator* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationGenerator", L"ElementExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ElementExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_SyndicationGenerator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Web::Syndication::SyndicationGenerator>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SyndicationGenerator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::Syndication::SyndicationGenerator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SyndicationGenerator[] = {
        { "get_xml_document", reinterpret_cast<PyCFunction>(SyndicationGenerator_GetXmlDocument), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_SyndicationGenerator, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SyndicationGenerator), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SyndicationGenerator[] = {
        { "version", reinterpret_cast<getter>(SyndicationGenerator_get_Version), reinterpret_cast<setter>(SyndicationGenerator_put_Version), nullptr, nullptr },
        { "uri", reinterpret_cast<getter>(SyndicationGenerator_get_Uri), reinterpret_cast<setter>(SyndicationGenerator_put_Uri), nullptr, nullptr },
        { "text", reinterpret_cast<getter>(SyndicationGenerator_get_Text), reinterpret_cast<setter>(SyndicationGenerator_put_Text), nullptr, nullptr },
        { "node_value", reinterpret_cast<getter>(SyndicationGenerator_get_NodeValue), reinterpret_cast<setter>(SyndicationGenerator_put_NodeValue), nullptr, nullptr },
        { "node_namespace", reinterpret_cast<getter>(SyndicationGenerator_get_NodeNamespace), reinterpret_cast<setter>(SyndicationGenerator_put_NodeNamespace), nullptr, nullptr },
        { "node_name", reinterpret_cast<getter>(SyndicationGenerator_get_NodeName), reinterpret_cast<setter>(SyndicationGenerator_put_NodeName), nullptr, nullptr },
        { "language", reinterpret_cast<getter>(SyndicationGenerator_get_Language), reinterpret_cast<setter>(SyndicationGenerator_put_Language), nullptr, nullptr },
        { "base_uri", reinterpret_cast<getter>(SyndicationGenerator_get_BaseUri), reinterpret_cast<setter>(SyndicationGenerator_put_BaseUri), nullptr, nullptr },
        { "attribute_extensions", reinterpret_cast<getter>(SyndicationGenerator_get_AttributeExtensions), nullptr, nullptr, nullptr },
        { "element_extensions", reinterpret_cast<getter>(SyndicationGenerator_get_ElementExtensions), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SyndicationGenerator[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_SyndicationGenerator) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SyndicationGenerator) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SyndicationGenerator) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SyndicationGenerator) },
        { }
    };

    static PyType_Spec type_spec_SyndicationGenerator = {
        "winrt._winrt_windows_web_syndication.SyndicationGenerator",
        sizeof(py::wrapper::Windows::Web::Syndication::SyndicationGenerator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SyndicationGenerator};

    // ----- SyndicationItem class --------------------

    static PyObject* _new_SyndicationItem(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationContent>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 2);

                winrt::Windows::Web::Syndication::SyndicationItem instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Web::Syndication::SyndicationItem instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SyndicationItem(py::wrapper::Windows::Web::Syndication::SyndicationItem* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SyndicationItem_GetXmlDocument(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.SyndicationItem", L"GetXmlDocument", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationFormat>(args, 0);

                return py::convert(self->obj.GetXmlDocument(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SyndicationItem_Load(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.SyndicationItem", L"Load", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Load(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SyndicationItem_LoadFromXml(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.SyndicationItem", L"LoadFromXml", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Data::Xml::Dom::XmlDocument>(args, 0);

                self->obj.LoadFromXml(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SyndicationItem_get_Title(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Title"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationItem_put_Title(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Title"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Web::Syndication::ISyndicationText>(arg);

            self->obj.Title(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationItem_get_Source(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Source"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Source());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationItem_put_Source(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Source"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationFeed>(arg);

            self->obj.Source(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationItem_get_Rights(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Rights"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Rights());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationItem_put_Rights(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Rights"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Web::Syndication::ISyndicationText>(arg);

            self->obj.Rights(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationItem_get_Summary(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Summary"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Summary());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationItem_put_Summary(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Summary"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Web::Syndication::ISyndicationText>(arg);

            self->obj.Summary(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationItem_get_PublishedDate(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"PublishedDate"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.PublishedDate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationItem_put_PublishedDate(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"PublishedDate"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.PublishedDate(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationItem_get_CommentsUri(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"CommentsUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.CommentsUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationItem_put_CommentsUri(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"CommentsUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.CommentsUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationItem_get_Id(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Id"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationItem_put_Id(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Id"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Id(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationItem_get_LastUpdatedTime(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"LastUpdatedTime"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.LastUpdatedTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationItem_put_LastUpdatedTime(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"LastUpdatedTime"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::DateTime>(arg);

            self->obj.LastUpdatedTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationItem_get_Content(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Content"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Content());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationItem_put_Content(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Content"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationContent>(arg);

            self->obj.Content(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationItem_get_EditUri(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"EditUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.EditUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationItem_get_Links(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Links"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Links());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationItem_get_Authors(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Authors"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Authors());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationItem_get_Categories(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Categories"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Categories());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationItem_get_Contributors(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Contributors"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Contributors());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationItem_get_ItemUri(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"ItemUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ItemUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationItem_get_ETag(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"ETag"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ETag());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationItem_get_EditMediaUri(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"EditMediaUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.EditMediaUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationItem_get_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationItem_put_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeValue(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationItem_get_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationItem_put_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeNamespace(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationItem_get_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationItem_put_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationItem_get_Language(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationItem_put_Language(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Language(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationItem_get_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.BaseUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationItem_put_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.BaseUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationItem_get_AttributeExtensions(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"AttributeExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.AttributeExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationItem_get_ElementExtensions(py::wrapper::Windows::Web::Syndication::SyndicationItem* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationItem", L"ElementExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ElementExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_SyndicationItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Web::Syndication::SyndicationItem>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SyndicationItem(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::Syndication::SyndicationItem>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SyndicationItem[] = {
        { "get_xml_document", reinterpret_cast<PyCFunction>(SyndicationItem_GetXmlDocument), METH_VARARGS, nullptr },
        { "load", reinterpret_cast<PyCFunction>(SyndicationItem_Load), METH_VARARGS, nullptr },
        { "load_from_xml", reinterpret_cast<PyCFunction>(SyndicationItem_LoadFromXml), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_SyndicationItem, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SyndicationItem), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SyndicationItem[] = {
        { "title", reinterpret_cast<getter>(SyndicationItem_get_Title), reinterpret_cast<setter>(SyndicationItem_put_Title), nullptr, nullptr },
        { "source", reinterpret_cast<getter>(SyndicationItem_get_Source), reinterpret_cast<setter>(SyndicationItem_put_Source), nullptr, nullptr },
        { "rights", reinterpret_cast<getter>(SyndicationItem_get_Rights), reinterpret_cast<setter>(SyndicationItem_put_Rights), nullptr, nullptr },
        { "summary", reinterpret_cast<getter>(SyndicationItem_get_Summary), reinterpret_cast<setter>(SyndicationItem_put_Summary), nullptr, nullptr },
        { "published_date", reinterpret_cast<getter>(SyndicationItem_get_PublishedDate), reinterpret_cast<setter>(SyndicationItem_put_PublishedDate), nullptr, nullptr },
        { "comments_uri", reinterpret_cast<getter>(SyndicationItem_get_CommentsUri), reinterpret_cast<setter>(SyndicationItem_put_CommentsUri), nullptr, nullptr },
        { "id", reinterpret_cast<getter>(SyndicationItem_get_Id), reinterpret_cast<setter>(SyndicationItem_put_Id), nullptr, nullptr },
        { "last_updated_time", reinterpret_cast<getter>(SyndicationItem_get_LastUpdatedTime), reinterpret_cast<setter>(SyndicationItem_put_LastUpdatedTime), nullptr, nullptr },
        { "content", reinterpret_cast<getter>(SyndicationItem_get_Content), reinterpret_cast<setter>(SyndicationItem_put_Content), nullptr, nullptr },
        { "edit_uri", reinterpret_cast<getter>(SyndicationItem_get_EditUri), nullptr, nullptr, nullptr },
        { "links", reinterpret_cast<getter>(SyndicationItem_get_Links), nullptr, nullptr, nullptr },
        { "authors", reinterpret_cast<getter>(SyndicationItem_get_Authors), nullptr, nullptr, nullptr },
        { "categories", reinterpret_cast<getter>(SyndicationItem_get_Categories), nullptr, nullptr, nullptr },
        { "contributors", reinterpret_cast<getter>(SyndicationItem_get_Contributors), nullptr, nullptr, nullptr },
        { "item_uri", reinterpret_cast<getter>(SyndicationItem_get_ItemUri), nullptr, nullptr, nullptr },
        { "e_tag", reinterpret_cast<getter>(SyndicationItem_get_ETag), nullptr, nullptr, nullptr },
        { "edit_media_uri", reinterpret_cast<getter>(SyndicationItem_get_EditMediaUri), nullptr, nullptr, nullptr },
        { "node_value", reinterpret_cast<getter>(SyndicationItem_get_NodeValue), reinterpret_cast<setter>(SyndicationItem_put_NodeValue), nullptr, nullptr },
        { "node_namespace", reinterpret_cast<getter>(SyndicationItem_get_NodeNamespace), reinterpret_cast<setter>(SyndicationItem_put_NodeNamespace), nullptr, nullptr },
        { "node_name", reinterpret_cast<getter>(SyndicationItem_get_NodeName), reinterpret_cast<setter>(SyndicationItem_put_NodeName), nullptr, nullptr },
        { "language", reinterpret_cast<getter>(SyndicationItem_get_Language), reinterpret_cast<setter>(SyndicationItem_put_Language), nullptr, nullptr },
        { "base_uri", reinterpret_cast<getter>(SyndicationItem_get_BaseUri), reinterpret_cast<setter>(SyndicationItem_put_BaseUri), nullptr, nullptr },
        { "attribute_extensions", reinterpret_cast<getter>(SyndicationItem_get_AttributeExtensions), nullptr, nullptr, nullptr },
        { "element_extensions", reinterpret_cast<getter>(SyndicationItem_get_ElementExtensions), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SyndicationItem[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_SyndicationItem) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SyndicationItem) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SyndicationItem) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SyndicationItem) },
        { }
    };

    static PyType_Spec type_spec_SyndicationItem = {
        "winrt._winrt_windows_web_syndication.SyndicationItem",
        sizeof(py::wrapper::Windows::Web::Syndication::SyndicationItem),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SyndicationItem};

    // ----- SyndicationLink class --------------------

    static PyObject* _new_SyndicationLink(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                winrt::Windows::Web::Syndication::SyndicationLink instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 5)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);
                auto param3 = py::convert_to<winrt::hstring>(args, 3);
                auto param4 = py::convert_to<uint32_t>(args, 4);

                winrt::Windows::Web::Syndication::SyndicationLink instance{ param0, param1, param2, param3, param4 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Web::Syndication::SyndicationLink instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SyndicationLink(py::wrapper::Windows::Web::Syndication::SyndicationLink* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SyndicationLink_GetXmlDocument(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.SyndicationLink", L"GetXmlDocument", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationFormat>(args, 0);

                return py::convert(self->obj.GetXmlDocument(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SyndicationLink_get_Uri(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"Uri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationLink_put_Uri(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"Uri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Uri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationLink_get_Title(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"Title"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Title());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationLink_put_Title(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"Title"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Title(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationLink_get_ResourceLanguage(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"ResourceLanguage"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ResourceLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationLink_put_ResourceLanguage(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"ResourceLanguage"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.ResourceLanguage(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationLink_get_Relationship(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"Relationship"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Relationship());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationLink_put_Relationship(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"Relationship"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Relationship(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationLink_get_MediaType(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"MediaType"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.MediaType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationLink_put_MediaType(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"MediaType"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.MediaType(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationLink_get_Length(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"Length"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Length());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationLink_put_Length(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"Length"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.Length(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationLink_get_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationLink_put_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeValue(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationLink_get_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationLink_put_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeNamespace(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationLink_get_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationLink_put_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationLink_get_Language(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationLink_put_Language(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Language(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationLink_get_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.BaseUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationLink_put_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.BaseUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationLink_get_AttributeExtensions(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"AttributeExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.AttributeExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationLink_get_ElementExtensions(py::wrapper::Windows::Web::Syndication::SyndicationLink* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationLink", L"ElementExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ElementExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_SyndicationLink(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Web::Syndication::SyndicationLink>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SyndicationLink(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::Syndication::SyndicationLink>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SyndicationLink[] = {
        { "get_xml_document", reinterpret_cast<PyCFunction>(SyndicationLink_GetXmlDocument), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_SyndicationLink, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SyndicationLink), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SyndicationLink[] = {
        { "uri", reinterpret_cast<getter>(SyndicationLink_get_Uri), reinterpret_cast<setter>(SyndicationLink_put_Uri), nullptr, nullptr },
        { "title", reinterpret_cast<getter>(SyndicationLink_get_Title), reinterpret_cast<setter>(SyndicationLink_put_Title), nullptr, nullptr },
        { "resource_language", reinterpret_cast<getter>(SyndicationLink_get_ResourceLanguage), reinterpret_cast<setter>(SyndicationLink_put_ResourceLanguage), nullptr, nullptr },
        { "relationship", reinterpret_cast<getter>(SyndicationLink_get_Relationship), reinterpret_cast<setter>(SyndicationLink_put_Relationship), nullptr, nullptr },
        { "media_type", reinterpret_cast<getter>(SyndicationLink_get_MediaType), reinterpret_cast<setter>(SyndicationLink_put_MediaType), nullptr, nullptr },
        { "length", reinterpret_cast<getter>(SyndicationLink_get_Length), reinterpret_cast<setter>(SyndicationLink_put_Length), nullptr, nullptr },
        { "node_value", reinterpret_cast<getter>(SyndicationLink_get_NodeValue), reinterpret_cast<setter>(SyndicationLink_put_NodeValue), nullptr, nullptr },
        { "node_namespace", reinterpret_cast<getter>(SyndicationLink_get_NodeNamespace), reinterpret_cast<setter>(SyndicationLink_put_NodeNamespace), nullptr, nullptr },
        { "node_name", reinterpret_cast<getter>(SyndicationLink_get_NodeName), reinterpret_cast<setter>(SyndicationLink_put_NodeName), nullptr, nullptr },
        { "language", reinterpret_cast<getter>(SyndicationLink_get_Language), reinterpret_cast<setter>(SyndicationLink_put_Language), nullptr, nullptr },
        { "base_uri", reinterpret_cast<getter>(SyndicationLink_get_BaseUri), reinterpret_cast<setter>(SyndicationLink_put_BaseUri), nullptr, nullptr },
        { "attribute_extensions", reinterpret_cast<getter>(SyndicationLink_get_AttributeExtensions), nullptr, nullptr, nullptr },
        { "element_extensions", reinterpret_cast<getter>(SyndicationLink_get_ElementExtensions), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SyndicationLink[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_SyndicationLink) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SyndicationLink) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SyndicationLink) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SyndicationLink) },
        { }
    };

    static PyType_Spec type_spec_SyndicationLink = {
        "winrt._winrt_windows_web_syndication.SyndicationLink",
        sizeof(py::wrapper::Windows::Web::Syndication::SyndicationLink),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SyndicationLink};

    // ----- SyndicationNode class --------------------

    static PyObject* _new_SyndicationNode(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                winrt::Windows::Web::Syndication::SyndicationNode instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Web::Syndication::SyndicationNode instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SyndicationNode(py::wrapper::Windows::Web::Syndication::SyndicationNode* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SyndicationNode_GetXmlDocument(py::wrapper::Windows::Web::Syndication::SyndicationNode* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.SyndicationNode", L"GetXmlDocument", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationFormat>(args, 0);

                return py::convert(self->obj.GetXmlDocument(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SyndicationNode_get_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationNode* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationNode", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationNode_put_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationNode* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationNode", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeValue(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationNode_get_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationNode* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationNode", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationNode_put_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationNode* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationNode", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeNamespace(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationNode_get_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationNode* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationNode", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationNode_put_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationNode* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationNode", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationNode_get_Language(py::wrapper::Windows::Web::Syndication::SyndicationNode* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationNode", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationNode_put_Language(py::wrapper::Windows::Web::Syndication::SyndicationNode* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationNode", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Language(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationNode_get_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationNode* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationNode", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.BaseUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationNode_put_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationNode* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationNode", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.BaseUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationNode_get_AttributeExtensions(py::wrapper::Windows::Web::Syndication::SyndicationNode* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationNode", L"AttributeExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.AttributeExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationNode_get_ElementExtensions(py::wrapper::Windows::Web::Syndication::SyndicationNode* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationNode", L"ElementExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ElementExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_SyndicationNode(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Web::Syndication::SyndicationNode>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SyndicationNode(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::Syndication::SyndicationNode>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SyndicationNode[] = {
        { "get_xml_document", reinterpret_cast<PyCFunction>(SyndicationNode_GetXmlDocument), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_SyndicationNode, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SyndicationNode), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SyndicationNode[] = {
        { "node_value", reinterpret_cast<getter>(SyndicationNode_get_NodeValue), reinterpret_cast<setter>(SyndicationNode_put_NodeValue), nullptr, nullptr },
        { "node_namespace", reinterpret_cast<getter>(SyndicationNode_get_NodeNamespace), reinterpret_cast<setter>(SyndicationNode_put_NodeNamespace), nullptr, nullptr },
        { "node_name", reinterpret_cast<getter>(SyndicationNode_get_NodeName), reinterpret_cast<setter>(SyndicationNode_put_NodeName), nullptr, nullptr },
        { "language", reinterpret_cast<getter>(SyndicationNode_get_Language), reinterpret_cast<setter>(SyndicationNode_put_Language), nullptr, nullptr },
        { "base_uri", reinterpret_cast<getter>(SyndicationNode_get_BaseUri), reinterpret_cast<setter>(SyndicationNode_put_BaseUri), nullptr, nullptr },
        { "attribute_extensions", reinterpret_cast<getter>(SyndicationNode_get_AttributeExtensions), nullptr, nullptr, nullptr },
        { "element_extensions", reinterpret_cast<getter>(SyndicationNode_get_ElementExtensions), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SyndicationNode[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_SyndicationNode) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SyndicationNode) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SyndicationNode) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SyndicationNode) },
        { }
    };

    static PyType_Spec type_spec_SyndicationNode = {
        "winrt._winrt_windows_web_syndication.SyndicationNode",
        sizeof(py::wrapper::Windows::Web::Syndication::SyndicationNode),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SyndicationNode};

    // ----- SyndicationPerson class --------------------

    static PyObject* _new_SyndicationPerson(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Web::Syndication::SyndicationPerson instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 2);

                winrt::Windows::Web::Syndication::SyndicationPerson instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Web::Syndication::SyndicationPerson instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SyndicationPerson(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SyndicationPerson_GetXmlDocument(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.SyndicationPerson", L"GetXmlDocument", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationFormat>(args, 0);

                return py::convert(self->obj.GetXmlDocument(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SyndicationPerson_get_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationPerson_put_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeValue(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationPerson_get_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationPerson_put_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeNamespace(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationPerson_get_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationPerson_put_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationPerson_get_Language(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationPerson_put_Language(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Language(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationPerson_get_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.BaseUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationPerson_put_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.BaseUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationPerson_get_AttributeExtensions(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"AttributeExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.AttributeExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationPerson_get_ElementExtensions(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"ElementExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ElementExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationPerson_get_Uri(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"Uri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationPerson_put_Uri(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"Uri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Uri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationPerson_get_Name(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"Name"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationPerson_put_Name(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"Name"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Name(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationPerson_get_Email(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"Email"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Email());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationPerson_put_Email(py::wrapper::Windows::Web::Syndication::SyndicationPerson* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationPerson", L"Email"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Email(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_SyndicationPerson(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Web::Syndication::SyndicationPerson>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SyndicationPerson(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::Syndication::SyndicationPerson>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SyndicationPerson[] = {
        { "get_xml_document", reinterpret_cast<PyCFunction>(SyndicationPerson_GetXmlDocument), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_SyndicationPerson, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SyndicationPerson), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SyndicationPerson[] = {
        { "node_value", reinterpret_cast<getter>(SyndicationPerson_get_NodeValue), reinterpret_cast<setter>(SyndicationPerson_put_NodeValue), nullptr, nullptr },
        { "node_namespace", reinterpret_cast<getter>(SyndicationPerson_get_NodeNamespace), reinterpret_cast<setter>(SyndicationPerson_put_NodeNamespace), nullptr, nullptr },
        { "node_name", reinterpret_cast<getter>(SyndicationPerson_get_NodeName), reinterpret_cast<setter>(SyndicationPerson_put_NodeName), nullptr, nullptr },
        { "language", reinterpret_cast<getter>(SyndicationPerson_get_Language), reinterpret_cast<setter>(SyndicationPerson_put_Language), nullptr, nullptr },
        { "base_uri", reinterpret_cast<getter>(SyndicationPerson_get_BaseUri), reinterpret_cast<setter>(SyndicationPerson_put_BaseUri), nullptr, nullptr },
        { "attribute_extensions", reinterpret_cast<getter>(SyndicationPerson_get_AttributeExtensions), nullptr, nullptr, nullptr },
        { "element_extensions", reinterpret_cast<getter>(SyndicationPerson_get_ElementExtensions), nullptr, nullptr, nullptr },
        { "uri", reinterpret_cast<getter>(SyndicationPerson_get_Uri), reinterpret_cast<setter>(SyndicationPerson_put_Uri), nullptr, nullptr },
        { "name", reinterpret_cast<getter>(SyndicationPerson_get_Name), reinterpret_cast<setter>(SyndicationPerson_put_Name), nullptr, nullptr },
        { "email", reinterpret_cast<getter>(SyndicationPerson_get_Email), reinterpret_cast<setter>(SyndicationPerson_put_Email), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SyndicationPerson[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_SyndicationPerson) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SyndicationPerson) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SyndicationPerson) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SyndicationPerson) },
        { }
    };

    static PyType_Spec type_spec_SyndicationPerson = {
        "winrt._winrt_windows_web_syndication.SyndicationPerson",
        sizeof(py::wrapper::Windows::Web::Syndication::SyndicationPerson),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SyndicationPerson};

    // ----- SyndicationText class --------------------

    static PyObject* _new_SyndicationText(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Web::Syndication::SyndicationText instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationTextType>(args, 1);

                winrt::Windows::Web::Syndication::SyndicationText instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Web::Syndication::SyndicationText instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SyndicationText(py::wrapper::Windows::Web::Syndication::SyndicationText* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SyndicationText_GetXmlDocument(py::wrapper::Windows::Web::Syndication::SyndicationText* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.SyndicationText", L"GetXmlDocument", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationFormat>(args, 0);

                return py::convert(self->obj.GetXmlDocument(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SyndicationText_get_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationText_put_NodeValue(py::wrapper::Windows::Web::Syndication::SyndicationText* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeValue(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationText_get_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationText_put_NodeNamespace(py::wrapper::Windows::Web::Syndication::SyndicationText* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeNamespace(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationText_get_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationText_put_NodeName(py::wrapper::Windows::Web::Syndication::SyndicationText* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationText_get_Language(py::wrapper::Windows::Web::Syndication::SyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationText_put_Language(py::wrapper::Windows::Web::Syndication::SyndicationText* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Language(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationText_get_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.BaseUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationText_put_BaseUri(py::wrapper::Windows::Web::Syndication::SyndicationText* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.BaseUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationText_get_AttributeExtensions(py::wrapper::Windows::Web::Syndication::SyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"AttributeExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.AttributeExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationText_get_ElementExtensions(py::wrapper::Windows::Web::Syndication::SyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"ElementExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ElementExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* SyndicationText_get_Xml(py::wrapper::Windows::Web::Syndication::SyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"Xml"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Xml());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationText_put_Xml(py::wrapper::Windows::Web::Syndication::SyndicationText* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"Xml"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Data::Xml::Dom::XmlDocument>(arg);

            self->obj.Xml(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationText_get_Type(py::wrapper::Windows::Web::Syndication::SyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"Type"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationText_put_Type(py::wrapper::Windows::Web::Syndication::SyndicationText* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"Type"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Type(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SyndicationText_get_Text(py::wrapper::Windows::Web::Syndication::SyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"Text"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Text());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SyndicationText_put_Text(py::wrapper::Windows::Web::Syndication::SyndicationText* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.SyndicationText", L"Text"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Text(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_SyndicationText(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Web::Syndication::SyndicationText>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_SyndicationText(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::Syndication::SyndicationText>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SyndicationText[] = {
        { "get_xml_document", reinterpret_cast<PyCFunction>(SyndicationText_GetXmlDocument), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_SyndicationText, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SyndicationText), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SyndicationText[] = {
        { "node_value", reinterpret_cast<getter>(SyndicationText_get_NodeValue), reinterpret_cast<setter>(SyndicationText_put_NodeValue), nullptr, nullptr },
        { "node_namespace", reinterpret_cast<getter>(SyndicationText_get_NodeNamespace), reinterpret_cast<setter>(SyndicationText_put_NodeNamespace), nullptr, nullptr },
        { "node_name", reinterpret_cast<getter>(SyndicationText_get_NodeName), reinterpret_cast<setter>(SyndicationText_put_NodeName), nullptr, nullptr },
        { "language", reinterpret_cast<getter>(SyndicationText_get_Language), reinterpret_cast<setter>(SyndicationText_put_Language), nullptr, nullptr },
        { "base_uri", reinterpret_cast<getter>(SyndicationText_get_BaseUri), reinterpret_cast<setter>(SyndicationText_put_BaseUri), nullptr, nullptr },
        { "attribute_extensions", reinterpret_cast<getter>(SyndicationText_get_AttributeExtensions), nullptr, nullptr, nullptr },
        { "element_extensions", reinterpret_cast<getter>(SyndicationText_get_ElementExtensions), nullptr, nullptr, nullptr },
        { "xml", reinterpret_cast<getter>(SyndicationText_get_Xml), reinterpret_cast<setter>(SyndicationText_put_Xml), nullptr, nullptr },
        { "type", reinterpret_cast<getter>(SyndicationText_get_Type), reinterpret_cast<setter>(SyndicationText_put_Type), nullptr, nullptr },
        { "text", reinterpret_cast<getter>(SyndicationText_get_Text), reinterpret_cast<setter>(SyndicationText_put_Text), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SyndicationText[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_SyndicationText) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_SyndicationText) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_SyndicationText) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_SyndicationText) },
        { }
    };

    static PyType_Spec type_spec_SyndicationText = {
        "winrt._winrt_windows_web_syndication.SyndicationText",
        sizeof(py::wrapper::Windows::Web::Syndication::SyndicationText),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SyndicationText};

    // ----- ISyndicationClient interface --------------------

    static PyObject* _new_ISyndicationClient(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Web::Syndication::ISyndicationClient>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Web::Syndication::ISyndicationClient>::type_name);
        return nullptr;
    }

    static void _dealloc_ISyndicationClient(py::wrapper::Windows::Web::Syndication::ISyndicationClient* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ISyndicationClient_RetrieveFeedAsync(py::wrapper::Windows::Web::Syndication::ISyndicationClient* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.ISyndicationClient", L"RetrieveFeedAsync", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(self->obj.RetrieveFeedAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISyndicationClient_SetRequestHeader(py::wrapper::Windows::Web::Syndication::ISyndicationClient* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.ISyndicationClient", L"SetRequestHeader", 2))
                {
                    py::set_arg_count_version_error(2);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                self->obj.SetRequestHeader(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISyndicationClient_get_BypassCacheOnRetrieve(py::wrapper::Windows::Web::Syndication::ISyndicationClient* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationClient", L"BypassCacheOnRetrieve"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.BypassCacheOnRetrieve());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationClient_put_BypassCacheOnRetrieve(py::wrapper::Windows::Web::Syndication::ISyndicationClient* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationClient", L"BypassCacheOnRetrieve"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<bool>(arg);

            self->obj.BypassCacheOnRetrieve(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ISyndicationClient_get_MaxResponseBufferSize(py::wrapper::Windows::Web::Syndication::ISyndicationClient* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationClient", L"MaxResponseBufferSize"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.MaxResponseBufferSize());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationClient_put_MaxResponseBufferSize(py::wrapper::Windows::Web::Syndication::ISyndicationClient* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationClient", L"MaxResponseBufferSize"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.MaxResponseBufferSize(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ISyndicationClient_get_ProxyCredential(py::wrapper::Windows::Web::Syndication::ISyndicationClient* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationClient", L"ProxyCredential"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ProxyCredential());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationClient_put_ProxyCredential(py::wrapper::Windows::Web::Syndication::ISyndicationClient* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationClient", L"ProxyCredential"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Security::Credentials::PasswordCredential>(arg);

            self->obj.ProxyCredential(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ISyndicationClient_get_ServerCredential(py::wrapper::Windows::Web::Syndication::ISyndicationClient* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationClient", L"ServerCredential"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ServerCredential());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationClient_put_ServerCredential(py::wrapper::Windows::Web::Syndication::ISyndicationClient* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationClient", L"ServerCredential"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Security::Credentials::PasswordCredential>(arg);

            self->obj.ServerCredential(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ISyndicationClient_get_Timeout(py::wrapper::Windows::Web::Syndication::ISyndicationClient* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationClient", L"Timeout"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Timeout());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationClient_put_Timeout(py::wrapper::Windows::Web::Syndication::ISyndicationClient* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationClient", L"Timeout"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.Timeout(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_ISyndicationClient(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Web::Syndication::ISyndicationClient>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ISyndicationClient(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::Syndication::ISyndicationClient>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ISyndicationClient[] = {
        { "retrieve_feed_async", reinterpret_cast<PyCFunction>(ISyndicationClient_RetrieveFeedAsync), METH_VARARGS, nullptr },
        { "set_request_header", reinterpret_cast<PyCFunction>(ISyndicationClient_SetRequestHeader), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ISyndicationClient, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ISyndicationClient), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ISyndicationClient[] = {
        { "bypass_cache_on_retrieve", reinterpret_cast<getter>(ISyndicationClient_get_BypassCacheOnRetrieve), reinterpret_cast<setter>(ISyndicationClient_put_BypassCacheOnRetrieve), nullptr, nullptr },
        { "max_response_buffer_size", reinterpret_cast<getter>(ISyndicationClient_get_MaxResponseBufferSize), reinterpret_cast<setter>(ISyndicationClient_put_MaxResponseBufferSize), nullptr, nullptr },
        { "proxy_credential", reinterpret_cast<getter>(ISyndicationClient_get_ProxyCredential), reinterpret_cast<setter>(ISyndicationClient_put_ProxyCredential), nullptr, nullptr },
        { "server_credential", reinterpret_cast<getter>(ISyndicationClient_get_ServerCredential), reinterpret_cast<setter>(ISyndicationClient_put_ServerCredential), nullptr, nullptr },
        { "timeout", reinterpret_cast<getter>(ISyndicationClient_get_Timeout), reinterpret_cast<setter>(ISyndicationClient_put_Timeout), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ISyndicationClient[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ISyndicationClient) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ISyndicationClient) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ISyndicationClient) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ISyndicationClient) },
        { }
    };

    static PyType_Spec type_spec_ISyndicationClient = {
        "winrt._winrt_windows_web_syndication.ISyndicationClient",
        sizeof(py::wrapper::Windows::Web::Syndication::ISyndicationClient),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ISyndicationClient};

    // ----- ISyndicationNode interface --------------------

    static PyObject* _new_ISyndicationNode(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Web::Syndication::ISyndicationNode>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Web::Syndication::ISyndicationNode>::type_name);
        return nullptr;
    }

    static void _dealloc_ISyndicationNode(py::wrapper::Windows::Web::Syndication::ISyndicationNode* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ISyndicationNode_GetXmlDocument(py::wrapper::Windows::Web::Syndication::ISyndicationNode* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.ISyndicationNode", L"GetXmlDocument", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationFormat>(args, 0);

                return py::convert(self->obj.GetXmlDocument(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISyndicationNode_get_AttributeExtensions(py::wrapper::Windows::Web::Syndication::ISyndicationNode* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"AttributeExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.AttributeExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ISyndicationNode_get_BaseUri(py::wrapper::Windows::Web::Syndication::ISyndicationNode* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.BaseUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationNode_put_BaseUri(py::wrapper::Windows::Web::Syndication::ISyndicationNode* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.BaseUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ISyndicationNode_get_ElementExtensions(py::wrapper::Windows::Web::Syndication::ISyndicationNode* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"ElementExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ElementExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ISyndicationNode_get_Language(py::wrapper::Windows::Web::Syndication::ISyndicationNode* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationNode_put_Language(py::wrapper::Windows::Web::Syndication::ISyndicationNode* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Language(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ISyndicationNode_get_NodeName(py::wrapper::Windows::Web::Syndication::ISyndicationNode* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationNode_put_NodeName(py::wrapper::Windows::Web::Syndication::ISyndicationNode* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ISyndicationNode_get_NodeNamespace(py::wrapper::Windows::Web::Syndication::ISyndicationNode* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationNode_put_NodeNamespace(py::wrapper::Windows::Web::Syndication::ISyndicationNode* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeNamespace(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ISyndicationNode_get_NodeValue(py::wrapper::Windows::Web::Syndication::ISyndicationNode* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationNode_put_NodeValue(py::wrapper::Windows::Web::Syndication::ISyndicationNode* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeValue(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_ISyndicationNode(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Web::Syndication::ISyndicationNode>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ISyndicationNode(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::Syndication::ISyndicationNode>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ISyndicationNode[] = {
        { "get_xml_document", reinterpret_cast<PyCFunction>(ISyndicationNode_GetXmlDocument), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ISyndicationNode, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ISyndicationNode), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ISyndicationNode[] = {
        { "attribute_extensions", reinterpret_cast<getter>(ISyndicationNode_get_AttributeExtensions), nullptr, nullptr, nullptr },
        { "base_uri", reinterpret_cast<getter>(ISyndicationNode_get_BaseUri), reinterpret_cast<setter>(ISyndicationNode_put_BaseUri), nullptr, nullptr },
        { "element_extensions", reinterpret_cast<getter>(ISyndicationNode_get_ElementExtensions), nullptr, nullptr, nullptr },
        { "language", reinterpret_cast<getter>(ISyndicationNode_get_Language), reinterpret_cast<setter>(ISyndicationNode_put_Language), nullptr, nullptr },
        { "node_name", reinterpret_cast<getter>(ISyndicationNode_get_NodeName), reinterpret_cast<setter>(ISyndicationNode_put_NodeName), nullptr, nullptr },
        { "node_namespace", reinterpret_cast<getter>(ISyndicationNode_get_NodeNamespace), reinterpret_cast<setter>(ISyndicationNode_put_NodeNamespace), nullptr, nullptr },
        { "node_value", reinterpret_cast<getter>(ISyndicationNode_get_NodeValue), reinterpret_cast<setter>(ISyndicationNode_put_NodeValue), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ISyndicationNode[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ISyndicationNode) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ISyndicationNode) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ISyndicationNode) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ISyndicationNode) },
        { }
    };

    static PyType_Spec type_spec_ISyndicationNode = {
        "winrt._winrt_windows_web_syndication.ISyndicationNode",
        sizeof(py::wrapper::Windows::Web::Syndication::ISyndicationNode),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ISyndicationNode};

    // ----- ISyndicationText interface --------------------

    static PyObject* _new_ISyndicationText(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Web::Syndication::ISyndicationText>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Web::Syndication::ISyndicationText>::type_name);
        return nullptr;
    }

    static void _dealloc_ISyndicationText(py::wrapper::Windows::Web::Syndication::ISyndicationText* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ISyndicationText_GetXmlDocument(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Web.Syndication.ISyndicationNode", L"GetXmlDocument", 1))
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Web::Syndication::SyndicationFormat>(args, 0);

                return py::convert(self->obj.GetXmlDocument(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ISyndicationText_get_Text(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationText", L"Text"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Text());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationText_put_Text(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationText", L"Text"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Text(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ISyndicationText_get_Type(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationText", L"Type"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationText_put_Type(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationText", L"Type"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Type(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ISyndicationText_get_Xml(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationText", L"Xml"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Xml());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationText_put_Xml(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationText", L"Xml"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Data::Xml::Dom::XmlDocument>(arg);

            self->obj.Xml(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ISyndicationText_get_AttributeExtensions(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"AttributeExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.AttributeExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ISyndicationText_get_BaseUri(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.BaseUri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationText_put_BaseUri(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"BaseUri"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.BaseUri(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ISyndicationText_get_ElementExtensions(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"ElementExtensions"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.ElementExtensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ISyndicationText_get_Language(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.Language());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationText_put_Language(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"Language"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Language(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ISyndicationText_get_NodeName(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationText_put_NodeName(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"NodeName"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ISyndicationText_get_NodeNamespace(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationText_put_NodeNamespace(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"NodeNamespace"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeNamespace(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* ISyndicationText_get_NodeValue(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, void* /*unused*/) noexcept
    {
        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert(self->obj.NodeValue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISyndicationText_put_NodeValue(py::wrapper::Windows::Web::Syndication::ISyndicationText* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Web.Syndication.ISyndicationNode", L"NodeValue"))
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NodeValue(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_ISyndicationText(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Web::Syndication::ISyndicationText>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_ISyndicationText(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Web::Syndication::ISyndicationText>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ISyndicationText[] = {
        { "get_xml_document", reinterpret_cast<PyCFunction>(ISyndicationText_GetXmlDocument), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_ISyndicationText, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ISyndicationText), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ISyndicationText[] = {
        { "text", reinterpret_cast<getter>(ISyndicationText_get_Text), reinterpret_cast<setter>(ISyndicationText_put_Text), nullptr, nullptr },
        { "type", reinterpret_cast<getter>(ISyndicationText_get_Type), reinterpret_cast<setter>(ISyndicationText_put_Type), nullptr, nullptr },
        { "xml", reinterpret_cast<getter>(ISyndicationText_get_Xml), reinterpret_cast<setter>(ISyndicationText_put_Xml), nullptr, nullptr },
        { "attribute_extensions", reinterpret_cast<getter>(ISyndicationText_get_AttributeExtensions), nullptr, nullptr, nullptr },
        { "base_uri", reinterpret_cast<getter>(ISyndicationText_get_BaseUri), reinterpret_cast<setter>(ISyndicationText_put_BaseUri), nullptr, nullptr },
        { "element_extensions", reinterpret_cast<getter>(ISyndicationText_get_ElementExtensions), nullptr, nullptr, nullptr },
        { "language", reinterpret_cast<getter>(ISyndicationText_get_Language), reinterpret_cast<setter>(ISyndicationText_put_Language), nullptr, nullptr },
        { "node_name", reinterpret_cast<getter>(ISyndicationText_get_NodeName), reinterpret_cast<setter>(ISyndicationText_put_NodeName), nullptr, nullptr },
        { "node_namespace", reinterpret_cast<getter>(ISyndicationText_get_NodeNamespace), reinterpret_cast<setter>(ISyndicationText_put_NodeNamespace), nullptr, nullptr },
        { "node_value", reinterpret_cast<getter>(ISyndicationText_get_NodeValue), reinterpret_cast<setter>(ISyndicationText_put_NodeValue), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ISyndicationText[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_ISyndicationText) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_ISyndicationText) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_ISyndicationText) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_ISyndicationText) },
        { }
    };

    static PyType_Spec type_spec_ISyndicationText = {
        "winrt._winrt_windows_web_syndication.ISyndicationText",
        sizeof(py::wrapper::Windows::Web::Syndication::ISyndicationText),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ISyndicationText};

    // ----- RetrievalProgress struct --------------------

    winrt_struct_wrapper<winrt::Windows::Web::Syndication::RetrievalProgress>* _new_RetrievalProgress(PyTypeObject* subclass, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Web::Syndication::RetrievalProgress>*>(subclass->tp_alloc(subclass, 0));

        if (!self)
        {
            return nullptr;
        }

        std::construct_at(&self->obj);

        return self;
    }

    int _init_RetrievalProgress(winrt_struct_wrapper<winrt::Windows::Web::Syndication::RetrievalProgress>* self, PyObject* args, PyObject* kwds) noexcept
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            self->obj = {};
            return 0;
        }

        uint32_t _BytesRetrieved{};
        uint32_t _TotalBytesToRetrieve{};

        static const char* kwlist[] = {"bytes_retrieved", "total_bytes_to_retrieve", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "II", const_cast<char**>(kwlist), &_BytesRetrieved, &_TotalBytesToRetrieve))
        {
            return -1;
        }

        try
        {
            self->obj = {_BytesRetrieved, _TotalBytesToRetrieve};
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static void _dealloc_RetrievalProgress(py::wrapper::Windows::Web::Syndication::RetrievalProgress* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_RetrievalProgress(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Web::Syndication::RetrievalProgress>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_RetrievalProgress[] = {
        { "_assign_array_", _assign_array_RetrievalProgress, METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyObject* RetrievalProgress_get_BytesRetrieved(py::wrapper::Windows::Web::Syndication::RetrievalProgress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BytesRetrieved);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int RetrievalProgress_set_BytesRetrieved(py::wrapper::Windows::Web::Syndication::RetrievalProgress* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.BytesRetrieved = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* RetrievalProgress_get_TotalBytesToRetrieve(py::wrapper::Windows::Web::Syndication::RetrievalProgress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TotalBytesToRetrieve);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int RetrievalProgress_set_TotalBytesToRetrieve(py::wrapper::Windows::Web::Syndication::RetrievalProgress* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.TotalBytesToRetrieve = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_RetrievalProgress[] = {
        { "bytes_retrieved", reinterpret_cast<getter>(RetrievalProgress_get_BytesRetrieved), reinterpret_cast<setter>(RetrievalProgress_set_BytesRetrieved), nullptr, nullptr },
        { "total_bytes_to_retrieve", reinterpret_cast<getter>(RetrievalProgress_get_TotalBytesToRetrieve), reinterpret_cast<setter>(RetrievalProgress_set_TotalBytesToRetrieve), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_RetrievalProgress[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_RetrievalProgress) },
        { Py_tp_init, reinterpret_cast<void*>(_init_RetrievalProgress) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_RetrievalProgress) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_RetrievalProgress) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_RetrievalProgress) },
        { }
    };

    static PyType_Spec type_spec_RetrievalProgress = {
        "winrt._winrt_windows_web_syndication.RetrievalProgress",
        sizeof(py::wrapper::Windows::Web::Syndication::RetrievalProgress),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_RetrievalProgress};

    // ----- TransferProgress struct --------------------

    winrt_struct_wrapper<winrt::Windows::Web::Syndication::TransferProgress>* _new_TransferProgress(PyTypeObject* subclass, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Web::Syndication::TransferProgress>*>(subclass->tp_alloc(subclass, 0));

        if (!self)
        {
            return nullptr;
        }

        std::construct_at(&self->obj);

        return self;
    }

    int _init_TransferProgress(winrt_struct_wrapper<winrt::Windows::Web::Syndication::TransferProgress>* self, PyObject* args, PyObject* kwds) noexcept
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            self->obj = {};
            return 0;
        }

        uint32_t _BytesSent{};
        uint32_t _TotalBytesToSend{};
        uint32_t _BytesRetrieved{};
        uint32_t _TotalBytesToRetrieve{};

        static const char* kwlist[] = {"bytes_sent", "total_bytes_to_send", "bytes_retrieved", "total_bytes_to_retrieve", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "IIII", const_cast<char**>(kwlist), &_BytesSent, &_TotalBytesToSend, &_BytesRetrieved, &_TotalBytesToRetrieve))
        {
            return -1;
        }

        try
        {
            self->obj = {_BytesSent, _TotalBytesToSend, _BytesRetrieved, _TotalBytesToRetrieve};
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static void _dealloc_TransferProgress(py::wrapper::Windows::Web::Syndication::TransferProgress* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_TransferProgress(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Web::Syndication::TransferProgress>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_TransferProgress[] = {
        { "_assign_array_", _assign_array_TransferProgress, METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyObject* TransferProgress_get_BytesSent(py::wrapper::Windows::Web::Syndication::TransferProgress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BytesSent);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TransferProgress_set_BytesSent(py::wrapper::Windows::Web::Syndication::TransferProgress* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.BytesSent = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* TransferProgress_get_TotalBytesToSend(py::wrapper::Windows::Web::Syndication::TransferProgress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TotalBytesToSend);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TransferProgress_set_TotalBytesToSend(py::wrapper::Windows::Web::Syndication::TransferProgress* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.TotalBytesToSend = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* TransferProgress_get_BytesRetrieved(py::wrapper::Windows::Web::Syndication::TransferProgress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BytesRetrieved);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TransferProgress_set_BytesRetrieved(py::wrapper::Windows::Web::Syndication::TransferProgress* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.BytesRetrieved = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* TransferProgress_get_TotalBytesToRetrieve(py::wrapper::Windows::Web::Syndication::TransferProgress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TotalBytesToRetrieve);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int TransferProgress_set_TotalBytesToRetrieve(py::wrapper::Windows::Web::Syndication::TransferProgress* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.TotalBytesToRetrieve = py::converter<uint32_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_TransferProgress[] = {
        { "bytes_sent", reinterpret_cast<getter>(TransferProgress_get_BytesSent), reinterpret_cast<setter>(TransferProgress_set_BytesSent), nullptr, nullptr },
        { "total_bytes_to_send", reinterpret_cast<getter>(TransferProgress_get_TotalBytesToSend), reinterpret_cast<setter>(TransferProgress_set_TotalBytesToSend), nullptr, nullptr },
        { "bytes_retrieved", reinterpret_cast<getter>(TransferProgress_get_BytesRetrieved), reinterpret_cast<setter>(TransferProgress_set_BytesRetrieved), nullptr, nullptr },
        { "total_bytes_to_retrieve", reinterpret_cast<getter>(TransferProgress_get_TotalBytesToRetrieve), reinterpret_cast<setter>(TransferProgress_set_TotalBytesToRetrieve), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_TransferProgress[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_TransferProgress) },
        { Py_tp_init, reinterpret_cast<void*>(_init_TransferProgress) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_TransferProgress) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_TransferProgress) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_TransferProgress) },
        { }
    };

    static PyType_Spec type_spec_TransferProgress = {
        "winrt._winrt_windows_web_syndication.TransferProgress",
        sizeof(py::wrapper::Windows::Web::Syndication::TransferProgress),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_TransferProgress};

    // ----- Windows.Web.Syndication Initialization --------------------

    PyDoc_STRVAR(module_doc, "Windows.Web.Syndication");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_windows_web_syndication",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Windows::Web::Syndication

PyMODINIT_FUNC PyInit__winrt_windows_web_syndication(void) noexcept
{
    using namespace py::cpp::Windows::Web::Syndication;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SyndicationAttribute, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SyndicationCategory, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SyndicationClient, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SyndicationContent, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_SyndicationError_Static{PyType_FromSpec(&type_spec_SyndicationError_Static)};
    if (!type_SyndicationError_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SyndicationError, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_SyndicationError_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SyndicationFeed, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SyndicationGenerator, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SyndicationItem, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SyndicationLink, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SyndicationNode, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SyndicationPerson, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_SyndicationText, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ISyndicationClient, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ISyndicationNode, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_ISyndicationText, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_RetrievalProgress, nullptr, nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_TransferProgress, nullptr, nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
