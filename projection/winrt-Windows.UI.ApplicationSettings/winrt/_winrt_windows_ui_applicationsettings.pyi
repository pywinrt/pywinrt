# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.security.credentials
import winrt.windows.system
import winrt.windows.ui.popups

from winrt.windows.ui.applicationsettings import SettingsEdgeLocation, SupportedWebAccountActions, WebAccountAction
from winrt.windows.ui.applicationsettings import CredentialCommandCredentialDeletedHandler, WebAccountCommandInvokedHandler, WebAccountProviderCommandInvokedHandler

Self = typing.TypeVar('Self')

@typing.final
class AccountsSettingsPane_Static(type):
    def get_for_current_view(cls) -> typing.Optional[AccountsSettingsPane]: ...
    def show(cls) -> None: ...
    def show_add_account_async(cls) -> winrt.windows.foundation.IAsyncAction: ...
    def show_add_account_for_user_async(cls, user: typing.Optional[winrt.windows.system.User], /) -> winrt.windows.foundation.IAsyncAction: ...
    def show_manage_accounts_async(cls) -> winrt.windows.foundation.IAsyncAction: ...
    def show_manage_accounts_for_user_async(cls, user: typing.Optional[winrt.windows.system.User], /) -> winrt.windows.foundation.IAsyncAction: ...

@typing.final
class AccountsSettingsPane(winrt.system.Object, metaclass=AccountsSettingsPane_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AccountsSettingsPane: ...
    def add_account_commands_requested(self, handler: winrt.windows.foundation.TypedEventHandler[AccountsSettingsPane, AccountsSettingsPaneCommandsRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_account_commands_requested(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class AccountsSettingsPaneCommandsRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AccountsSettingsPaneCommandsRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[AccountsSettingsPaneEventDeferral]: ...
    @_property
    def header_text(self) -> str: ...
    @header_text.setter
    def header_text(self, value: str) -> None: ...
    @_property
    def commands(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[SettingsCommand]]: ...
    @_property
    def credential_commands(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[CredentialCommand]]: ...
    @_property
    def web_account_commands(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[WebAccountCommand]]: ...
    @_property
    def web_account_provider_commands(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[WebAccountProviderCommand]]: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...

@typing.final
class AccountsSettingsPaneEventDeferral(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AccountsSettingsPaneEventDeferral: ...
    def complete(self) -> None: ...

@typing.final
class CredentialCommand(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CredentialCommand: ...
    @typing.overload
    def __new__(cls: typing.Type[CredentialCommand], password_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential]) -> CredentialCommand:...
    @typing.overload
    def __new__(cls: typing.Type[CredentialCommand], password_credential: typing.Optional[winrt.windows.security.credentials.PasswordCredential], deleted: typing.Optional[CredentialCommandCredentialDeletedHandler]) -> CredentialCommand:...
    @_property
    def credential_deleted(self) -> typing.Optional[CredentialCommandCredentialDeletedHandler]: ...
    @_property
    def password_credential(self) -> typing.Optional[winrt.windows.security.credentials.PasswordCredential]: ...

@typing.final
class SettingsCommand_Static(type):
    @_property
    def accounts_command(cls) -> typing.Optional[SettingsCommand]: ...

@typing.final
class SettingsCommand(winrt.system.Object, metaclass=SettingsCommand_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SettingsCommand: ...
    def __new__(cls: typing.Type[SettingsCommand], settings_command_id: typing.Optional[winrt.system.Object], label: str, handler: typing.Optional[winrt.windows.ui.popups.UICommandInvokedHandler]) -> SettingsCommand:...
    @_property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> None: ...
    @_property
    def invoked(self) -> typing.Optional[winrt.windows.ui.popups.UICommandInvokedHandler]: ...
    @invoked.setter
    def invoked(self, value: typing.Optional[winrt.windows.ui.popups.UICommandInvokedHandler]) -> None: ...
    @_property
    def id(self) -> typing.Optional[winrt.system.Object]: ...
    @id.setter
    def id(self, value: typing.Optional[winrt.system.Object]) -> None: ...

@typing.final
class SettingsPane_Static(type):
    def get_for_current_view(cls) -> typing.Optional[SettingsPane]: ...
    def show(cls) -> None: ...
    @_property
    def edge(cls) -> SettingsEdgeLocation: ...

@typing.final
class SettingsPane(winrt.system.Object, metaclass=SettingsPane_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SettingsPane: ...
    def add_commands_requested(self, handler: winrt.windows.foundation.TypedEventHandler[SettingsPane, SettingsPaneCommandsRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_commands_requested(self, cookie: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class SettingsPaneCommandsRequest(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SettingsPaneCommandsRequest: ...
    @_property
    def application_commands(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[SettingsCommand]]: ...

@typing.final
class SettingsPaneCommandsRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> SettingsPaneCommandsRequestedEventArgs: ...
    @_property
    def request(self) -> typing.Optional[SettingsPaneCommandsRequest]: ...

@typing.final
class WebAccountCommand(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebAccountCommand: ...
    def __new__(cls: typing.Type[WebAccountCommand], web_account: typing.Optional[winrt.windows.security.credentials.WebAccount], invoked: typing.Optional[WebAccountCommandInvokedHandler], actions: SupportedWebAccountActions) -> WebAccountCommand:...
    @_property
    def actions(self) -> SupportedWebAccountActions: ...
    @_property
    def invoked(self) -> typing.Optional[WebAccountCommandInvokedHandler]: ...
    @_property
    def web_account(self) -> typing.Optional[winrt.windows.security.credentials.WebAccount]: ...

@typing.final
class WebAccountInvokedArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebAccountInvokedArgs: ...
    @_property
    def action(self) -> WebAccountAction: ...

@typing.final
class WebAccountProviderCommand(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> WebAccountProviderCommand: ...
    def __new__(cls: typing.Type[WebAccountProviderCommand], web_account_provider: typing.Optional[winrt.windows.security.credentials.WebAccountProvider], invoked: typing.Optional[WebAccountProviderCommandInvokedHandler]) -> WebAccountProviderCommand:...
    @_property
    def invoked(self) -> typing.Optional[WebAccountProviderCommandInvokedHandler]: ...
    @_property
    def web_account_provider(self) -> typing.Optional[winrt.windows.security.credentials.WebAccountProvider]: ...

