// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "py.Windows.Graphics.DirectX.Direct3D11.h"

namespace py::cpp::Windows::Graphics::DirectX::Direct3D11
{
    // ----- IDirect3DDevice interface --------------------

    static PyObject* _new_IDirect3DDevice(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>::type_name);
        return nullptr;
    }

    static void _dealloc_IDirect3DDevice(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IDirect3DDevice_Close(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Foundation.IClosable", L"Close", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                {
                    auto _gil = release_gil();
                    self->obj.Close();
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IDirect3DDevice_Trim(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice", L"Trim", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                {
                    auto _gil = release_gil();
                    self->obj.Trim();
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _enter_IDirect3DDevice(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_IDirect3DDevice(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            {
                auto _gil = py::release_gil();
                self->obj.Close();
            }

            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IDirect3DDevice[] = {
        { "close", reinterpret_cast<PyCFunction>(IDirect3DDevice_Close), METH_VARARGS, nullptr },
        { "trim", reinterpret_cast<PyCFunction>(IDirect3DDevice_Trim), METH_VARARGS, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_IDirect3DDevice), METH_NOARGS, nullptr },
        { "__exit__", reinterpret_cast<PyCFunction>(_exit_IDirect3DDevice), METH_VARARGS, nullptr },
        { }};

    static PyGetSetDef _getset_IDirect3DDevice[] = {
        { }};

    static PyType_Slot _type_slots_IDirect3DDevice[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_IDirect3DDevice) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IDirect3DDevice) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IDirect3DDevice) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IDirect3DDevice) },
        { }};

    static PyType_Spec type_spec_IDirect3DDevice = {
        "winrt._winrt_windows_graphics_directx_direct3d11._IDirect3DDevice",
        sizeof(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IDirect3DDevice};

    struct ImplementsIDirect3DDevice : py::ImplementsInterfaceT<ImplementsIDirect3DDevice, winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>
    {
        ImplementsIDirect3DDevice() = delete;
        ImplementsIDirect3DDevice(PyObject* py_obj, winrt::impl::inspectable_abi* runtime_class) : py::ImplementsInterfaceT<ImplementsIDirect3DDevice, winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>(py_obj, runtime_class)
        {
        }

        auto Close()
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "close")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallNoArgs(method.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto Trim()
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "trim")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallNoArgs(method.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }
    };

    static PyObject* _assign_array_IDirect3DDevice(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IDirect3DDevice(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _guid_ImplementsIDirect3DDevice(PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::guid_of<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _make_ImplementsIDirect3DDevice(PyObject* /*unused*/, PyObject* args) noexcept
    {
        try
        {
            PyObject* py_obj;
            winrt::impl::inspectable_abi* runtime_class;

            if (!PyArg_ParseTuple(args, "On", &py_obj, &runtime_class))
            {
                return nullptr;
            }

            auto iface{std::make_unique<ImplementsIDirect3DDevice>(py_obj, runtime_class)};

            return PyLong_FromVoidPtr(iface.release());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef methods_ImplementsIDirect3DDevice[] = {
        { "_assign_array_", _assign_array_IDirect3DDevice, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IDirect3DDevice), METH_O | METH_STATIC, nullptr },
        { "_guid_", reinterpret_cast<PyCFunction>(_guid_ImplementsIDirect3DDevice), METH_NOARGS | METH_STATIC, nullptr },
        { "_make_", reinterpret_cast<PyCFunction>(_make_ImplementsIDirect3DDevice), METH_VARARGS | METH_STATIC, nullptr },
        { }};

    static PyType_Slot type_slots_ImplementsIDirect3DDevice[] = {
        { Py_tp_methods, reinterpret_cast<void*>(methods_ImplementsIDirect3DDevice) },
        { }};

    static PyType_Spec type_spec_ImplementsIDirect3DDevice = {
        "winrt._winrt_windows_graphics_directx_direct3d11.IDirect3DDevice",
        0,
        0,
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,
        type_slots_ImplementsIDirect3DDevice};

    // ----- IDirect3DSurface interface --------------------

    static PyObject* _new_IDirect3DSurface(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>::type_name);
        return nullptr;
    }

    static void _dealloc_IDirect3DSurface(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IDirect3DSurface_Close(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Foundation.IClosable", L"Close", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                {
                    auto _gil = release_gil();
                    self->obj.Close();
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IDirect3DSurface_get_Description(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface", L"Description");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Description();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_IDirect3DSurface(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_IDirect3DSurface(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            {
                auto _gil = py::release_gil();
                self->obj.Close();
            }

            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IDirect3DSurface[] = {
        { "close", reinterpret_cast<PyCFunction>(IDirect3DSurface_Close), METH_VARARGS, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_IDirect3DSurface), METH_NOARGS, nullptr },
        { "__exit__", reinterpret_cast<PyCFunction>(_exit_IDirect3DSurface), METH_VARARGS, nullptr },
        { }};

    static PyGetSetDef _getset_IDirect3DSurface[] = {
        { "description", reinterpret_cast<getter>(IDirect3DSurface_get_Description), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_IDirect3DSurface[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_IDirect3DSurface) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_IDirect3DSurface) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_IDirect3DSurface) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_IDirect3DSurface) },
        { }};

    static PyType_Spec type_spec_IDirect3DSurface = {
        "winrt._winrt_windows_graphics_directx_direct3d11._IDirect3DSurface",
        sizeof(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IDirect3DSurface};

    struct ImplementsIDirect3DSurface : py::ImplementsInterfaceT<ImplementsIDirect3DSurface, winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>
    {
        ImplementsIDirect3DSurface() = delete;
        ImplementsIDirect3DSurface(PyObject* py_obj, winrt::impl::inspectable_abi* runtime_class) : py::ImplementsInterfaceT<ImplementsIDirect3DSurface, winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>(py_obj, runtime_class)
        {
        }

        auto Close()
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle method{PyObject_GetAttrString(self.get(), "close")};
                if (!method)
                {
                    throw python_exception();
                }

                py::pyobj_handle return_value{PyObject_CallNoArgs(method.get())};
                if (!return_value)
                {
                    throw python_exception();
                }
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }

        auto Description()
        {
            try
            {
                py::pyobj_handle self{this->get_py_obj()};

                py::pyobj_handle value{PyObject_GetAttrString(self.get(), "description")};
                if (!value)
                {
                    throw python_exception();
                }

                return py::convert_to<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>(value.get());
            }
            catch (python_exception)
            {
                py::write_unraisable_and_throw();
            }
        }
    };

    static PyObject* _assign_array_IDirect3DSurface(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_IDirect3DSurface(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _guid_ImplementsIDirect3DSurface(PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::guid_of<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _make_ImplementsIDirect3DSurface(PyObject* /*unused*/, PyObject* args) noexcept
    {
        try
        {
            PyObject* py_obj;
            winrt::impl::inspectable_abi* runtime_class;

            if (!PyArg_ParseTuple(args, "On", &py_obj, &runtime_class))
            {
                return nullptr;
            }

            auto iface{std::make_unique<ImplementsIDirect3DSurface>(py_obj, runtime_class)};

            return PyLong_FromVoidPtr(iface.release());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef methods_ImplementsIDirect3DSurface[] = {
        { "_assign_array_", _assign_array_IDirect3DSurface, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IDirect3DSurface), METH_O | METH_STATIC, nullptr },
        { "_guid_", reinterpret_cast<PyCFunction>(_guid_ImplementsIDirect3DSurface), METH_NOARGS | METH_STATIC, nullptr },
        { "_make_", reinterpret_cast<PyCFunction>(_make_ImplementsIDirect3DSurface), METH_VARARGS | METH_STATIC, nullptr },
        { }};

    static PyType_Slot type_slots_ImplementsIDirect3DSurface[] = {
        { Py_tp_methods, reinterpret_cast<void*>(methods_ImplementsIDirect3DSurface) },
        { }};

    static PyType_Spec type_spec_ImplementsIDirect3DSurface = {
        "winrt._winrt_windows_graphics_directx_direct3d11.IDirect3DSurface",
        0,
        0,
        Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,
        type_slots_ImplementsIDirect3DSurface};

    // ----- Direct3DMultisampleDescription struct --------------------

    winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription Direct3DMultisampleDescription_from_tuple(PyObject* tuple)
    {
        if (PyTuple_GET_SIZE(tuple) != 2)
        {
            PyErr_SetString(PyExc_TypeError, "Incorrect number of fields");
            throw python_exception();
        }

        winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription result{};

        result.Count = py::convert_to<int32_t>(tuple, 0);
        result.Quality = py::convert_to<int32_t>(tuple, 1);

        return result;
    }

    PyObject* _new_Direct3DMultisampleDescription(PyTypeObject* subclass, PyObject* args, PyObject* kwds) noexcept
    {
        pyobj_handle self_obj{(subclass->tp_alloc(subclass, 0))};
        if (!self_obj)
        {
            return nullptr;
        }

        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>*>(self_obj.get());
        std::construct_at(&self->obj);

        auto tuple_size = PyTuple_Size(args);
        if ((tuple_size == 0) && (!kwds))
        {
            return self_obj.detach();
        }

        int32_t _Count{};
        int32_t _Quality{};

        static const char* kwlist[] = {"count", "quality", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "|ii", const_cast<char**>(kwlist), &_Count, &_Quality))
        {
            return nullptr;
        }

        try
        {
            self->obj.Count = _Count;
            self->obj.Quality = _Quality;

            return self_obj.detach();
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_Direct3DMultisampleDescription(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_Direct3DMultisampleDescription(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    PyObject* _replace_Direct3DMultisampleDescription(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription* self, PyObject* args, PyObject* kwds) noexcept
    {
        try
        {
            int32_t _Count{self->obj.Count};
            int32_t _Quality{self->obj.Quality};

            static const char* kwlist[] = {"count", "quality", nullptr};
            if (!PyArg_ParseTupleAndKeywords(args, kwds, "|$ii", const_cast<char**>(kwlist), &_Count, &_Quality))
            {
                return nullptr;
            }

            auto copy = self->obj;
            copy.Count = _Count;
            copy.Quality = _Quality;

            return convert(copy);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    PyObject* unpack_Direct3DMultisampleDescription(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription* self, PyObject* /*unused*/) noexcept
    {
        py::pyobj_handle Count{convert(self->obj.Count)};
        if (!Count)
        {
            return nullptr;
        }

        py::pyobj_handle Quality{convert(self->obj.Quality)};
        if (!Quality)
        {
            return nullptr;
        }

        pyobj_handle tuple{PyTuple_New(2)};
        if (!tuple)
        {
            return nullptr;
        }

        PyTuple_SET_ITEM(tuple.get(), 0, Count.detach());
        PyTuple_SET_ITEM(tuple.get(), 1, Quality.detach());

        return tuple.detach();
    }

    static PyMethodDef _methods_Direct3DMultisampleDescription[] = {
        { "_assign_array_", _assign_array_Direct3DMultisampleDescription, METH_O | METH_STATIC, nullptr },
        { "__replace__", reinterpret_cast<PyCFunction>(_replace_Direct3DMultisampleDescription), METH_VARARGS | METH_KEYWORDS, nullptr },
        { "unpack", reinterpret_cast<PyCFunction>(unpack_Direct3DMultisampleDescription), METH_NOARGS, nullptr },
        { }};

    static PyObject* Direct3DMultisampleDescription_get_Count(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Count);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Direct3DMultisampleDescription_get_Quality(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Quality);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyGetSetDef _getset_Direct3DMultisampleDescription[] = {
        { "count", reinterpret_cast<getter>(Direct3DMultisampleDescription_get_Count), nullptr, nullptr, nullptr },
        { "quality", reinterpret_cast<getter>(Direct3DMultisampleDescription_get_Quality), nullptr, nullptr, nullptr },
        { }};

    static PyObject* _richcompare_Direct3DMultisampleDescription(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription* self, PyObject* other, int op) noexcept
    {
        try
        {
            auto _other = py::convert_to<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>(other);

            if (op == Py_EQ)
            {
                if (self->obj == _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            if (op == Py_NE)
            {
                if (self->obj != _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            Py_RETURN_NOTIMPLEMENTED;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _repr_Direct3DMultisampleDescription(PyObject* self) noexcept
    {
        py::pyobj_handle Count{PyObject_GetAttrString(self, "count")};
        if (!Count)
        {
            return nullptr;
        }

        py::pyobj_handle Quality{PyObject_GetAttrString(self, "quality")};
        if (!Quality)
        {
            return nullptr;
        }

        return PyUnicode_FromFormat("Direct3DMultisampleDescription(count=%R, quality=%R)", Count.get(), Quality.get());
    }

    static PyType_Slot _type_slots_Direct3DMultisampleDescription[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_Direct3DMultisampleDescription) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_Direct3DMultisampleDescription) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_Direct3DMultisampleDescription) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_Direct3DMultisampleDescription) },
        { Py_tp_richcompare, reinterpret_cast<void*>(_richcompare_Direct3DMultisampleDescription) },
        { Py_tp_repr, reinterpret_cast<void*>(_repr_Direct3DMultisampleDescription) },
        { }};

    static PyType_Spec type_spec_Direct3DMultisampleDescription = {
        "winrt._winrt_windows_graphics_directx_direct3d11.Direct3DMultisampleDescription",
        sizeof(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Direct3DMultisampleDescription};

    // ----- Direct3DSurfaceDescription struct --------------------

    winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription Direct3DSurfaceDescription_from_tuple(PyObject* tuple)
    {
        if (PyTuple_GET_SIZE(tuple) != 4)
        {
            PyErr_SetString(PyExc_TypeError, "Incorrect number of fields");
            throw python_exception();
        }

        winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription result{};

        result.Width = py::convert_to<int32_t>(tuple, 0);
        result.Height = py::convert_to<int32_t>(tuple, 1);
        result.Format = py::convert_to<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>(tuple, 2);
        result.MultisampleDescription = py::convert_to<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>(tuple, 3);

        return result;
    }

    PyObject* _new_Direct3DSurfaceDescription(PyTypeObject* subclass, PyObject* args, PyObject* kwds) noexcept
    {
        pyobj_handle self_obj{(subclass->tp_alloc(subclass, 0))};
        if (!self_obj)
        {
            return nullptr;
        }

        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>*>(self_obj.get());
        std::construct_at(&self->obj);

        auto tuple_size = PyTuple_Size(args);
        if ((tuple_size == 0) && (!kwds))
        {
            return self_obj.detach();
        }

        int32_t _Width{};
        int32_t _Height{};
        int32_t _Format{};
        PyObject* _MultisampleDescription{};

        static const char* kwlist[] = {"width", "height", "format", "multisample_description", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "|iiiO", const_cast<char**>(kwlist), &_Width, &_Height, &_Format, &_MultisampleDescription))
        {
            return nullptr;
        }

        try
        {
            self->obj.Width = _Width;
            self->obj.Height = _Height;
            self->obj.Format = static_cast<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>(_Format);
            self->obj.MultisampleDescription = _MultisampleDescription ? py::convert_to<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>(_MultisampleDescription) : winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription{};

            return self_obj.detach();
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_Direct3DSurfaceDescription(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_Direct3DSurfaceDescription(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    PyObject* _replace_Direct3DSurfaceDescription(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription* self, PyObject* args, PyObject* kwds) noexcept
    {
        try
        {
            int32_t _Width{self->obj.Width};
            int32_t _Height{self->obj.Height};
            int32_t _Format{static_cast<int32_t>(self->obj.Format)};
            PyObject* _MultisampleDescription{};

            static const char* kwlist[] = {"width", "height", "format", "multisample_description", nullptr};
            if (!PyArg_ParseTupleAndKeywords(args, kwds, "|$iiiO", const_cast<char**>(kwlist), &_Width, &_Height, &_Format, &_MultisampleDescription))
            {
                return nullptr;
            }

            auto copy = self->obj;
            copy.Width = _Width;
            copy.Height = _Height;
            copy.Format = static_cast<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>(_Format);
            copy.MultisampleDescription = _MultisampleDescription ? py::convert_to<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>(_MultisampleDescription) : self->obj.MultisampleDescription;

            return convert(copy);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    PyObject* unpack_Direct3DSurfaceDescription(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription* self, PyObject* /*unused*/) noexcept
    {
        py::pyobj_handle Width{convert(self->obj.Width)};
        if (!Width)
        {
            return nullptr;
        }

        py::pyobj_handle Height{convert(self->obj.Height)};
        if (!Height)
        {
            return nullptr;
        }

        py::pyobj_handle Format{convert(self->obj.Format)};
        if (!Format)
        {
            return nullptr;
        }

        py::pyobj_handle MultisampleDescription{convert(self->obj.MultisampleDescription)};
        if (!MultisampleDescription)
        {
            return nullptr;
        }

        pyobj_handle tuple{PyTuple_New(4)};
        if (!tuple)
        {
            return nullptr;
        }

        PyTuple_SET_ITEM(tuple.get(), 0, Width.detach());
        PyTuple_SET_ITEM(tuple.get(), 1, Height.detach());
        PyTuple_SET_ITEM(tuple.get(), 2, Format.detach());
        PyTuple_SET_ITEM(tuple.get(), 3, MultisampleDescription.detach());

        return tuple.detach();
    }

    static PyMethodDef _methods_Direct3DSurfaceDescription[] = {
        { "_assign_array_", _assign_array_Direct3DSurfaceDescription, METH_O | METH_STATIC, nullptr },
        { "__replace__", reinterpret_cast<PyCFunction>(_replace_Direct3DSurfaceDescription), METH_VARARGS | METH_KEYWORDS, nullptr },
        { "unpack", reinterpret_cast<PyCFunction>(unpack_Direct3DSurfaceDescription), METH_NOARGS, nullptr },
        { }};

    static PyObject* Direct3DSurfaceDescription_get_Width(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Width);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Direct3DSurfaceDescription_get_Height(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Height);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Direct3DSurfaceDescription_get_Format(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Format);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Direct3DSurfaceDescription_get_MultisampleDescription(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MultisampleDescription);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyGetSetDef _getset_Direct3DSurfaceDescription[] = {
        { "width", reinterpret_cast<getter>(Direct3DSurfaceDescription_get_Width), nullptr, nullptr, nullptr },
        { "height", reinterpret_cast<getter>(Direct3DSurfaceDescription_get_Height), nullptr, nullptr, nullptr },
        { "format", reinterpret_cast<getter>(Direct3DSurfaceDescription_get_Format), nullptr, nullptr, nullptr },
        { "multisample_description", reinterpret_cast<getter>(Direct3DSurfaceDescription_get_MultisampleDescription), nullptr, nullptr, nullptr },
        { }};

    static PyObject* _richcompare_Direct3DSurfaceDescription(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription* self, PyObject* other, int op) noexcept
    {
        try
        {
            auto _other = py::convert_to<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>(other);

            if (op == Py_EQ)
            {
                if (self->obj == _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            if (op == Py_NE)
            {
                if (self->obj != _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            Py_RETURN_NOTIMPLEMENTED;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _repr_Direct3DSurfaceDescription(PyObject* self) noexcept
    {
        py::pyobj_handle Width{PyObject_GetAttrString(self, "width")};
        if (!Width)
        {
            return nullptr;
        }

        py::pyobj_handle Height{PyObject_GetAttrString(self, "height")};
        if (!Height)
        {
            return nullptr;
        }

        py::pyobj_handle Format{PyObject_GetAttrString(self, "format")};
        if (!Format)
        {
            return nullptr;
        }

        py::pyobj_handle MultisampleDescription{PyObject_GetAttrString(self, "multisample_description")};
        if (!MultisampleDescription)
        {
            return nullptr;
        }

        return PyUnicode_FromFormat("Direct3DSurfaceDescription(width=%R, height=%R, format=%R, multisample_description=%R)", Width.get(), Height.get(), Format.get(), MultisampleDescription.get());
    }

    static PyType_Slot _type_slots_Direct3DSurfaceDescription[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_Direct3DSurfaceDescription) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_Direct3DSurfaceDescription) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_Direct3DSurfaceDescription) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_Direct3DSurfaceDescription) },
        { Py_tp_richcompare, reinterpret_cast<void*>(_richcompare_Direct3DSurfaceDescription) },
        { Py_tp_repr, reinterpret_cast<void*>(_repr_Direct3DSurfaceDescription) },
        { }};

    static PyType_Spec type_spec_Direct3DSurfaceDescription = {
        "winrt._winrt_windows_graphics_directx_direct3d11.Direct3DSurfaceDescription",
        sizeof(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Direct3DSurfaceDescription};

    // ----- Windows.Graphics.DirectX.Direct3D11 Initialization --------------------

    PyDoc_STRVAR(module_doc, "Windows.Graphics.DirectX.Direct3D11");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_windows_graphics_directx_direct3d11",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Windows::Graphics::DirectX::Direct3D11

PyMODINIT_FUNC PyInit__winrt_windows_graphics_directx_direct3d11(void) noexcept
{
    using namespace py::cpp::Windows::Graphics::DirectX::Direct3D11;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto inspectable_meta_type = py::get_inspectable_meta_type();
    if (!inspectable_meta_type)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pytype_handle IDirect3DDevice_type{py::register_python_type(module.get(), &type_spec_IDirect3DDevice, object_bases.get(), nullptr)};
    if (!IDirect3DDevice_type)
    {
        return nullptr;
    }

    py::pytype_handle ImplementsIDirect3DDevice_type{py::register_python_type(module.get(), &type_spec_ImplementsIDirect3DDevice, nullptr, inspectable_meta_type)};
    if (!ImplementsIDirect3DDevice_type)
    {
        return nullptr;
    }

    if (PyModule_AddType(module.get(), ImplementsIDirect3DDevice_type.get()) == -1)
    {
        return nullptr;
    }

    py::pytype_handle IDirect3DSurface_type{py::register_python_type(module.get(), &type_spec_IDirect3DSurface, object_bases.get(), nullptr)};
    if (!IDirect3DSurface_type)
    {
        return nullptr;
    }

    py::pytype_handle ImplementsIDirect3DSurface_type{py::register_python_type(module.get(), &type_spec_ImplementsIDirect3DSurface, nullptr, inspectable_meta_type)};
    if (!ImplementsIDirect3DSurface_type)
    {
        return nullptr;
    }

    if (PyModule_AddType(module.get(), ImplementsIDirect3DSurface_type.get()) == -1)
    {
        return nullptr;
    }

    py::pytype_handle Direct3DMultisampleDescription_type{py::register_python_type(module.get(), &type_spec_Direct3DMultisampleDescription, nullptr, nullptr)};
    if (!Direct3DMultisampleDescription_type)
    {
        return nullptr;
    }

    py::pyobj_handle Direct3DMultisampleDescription_from_tuple_capsule{PyCapsule_New(reinterpret_cast<void*>(Direct3DMultisampleDescription_from_tuple),"winrt._winrt_windows_graphics_directx_direct3d11.Direct3DMultisampleDescription_from_tuple", nullptr)};
    if (!Direct3DMultisampleDescription_from_tuple_capsule)
    {
        return nullptr;
    }

    if (PyModule_AddObjectRef(module.get(), "Direct3DMultisampleDescription_from_tuple", Direct3DMultisampleDescription_from_tuple_capsule.get()) == -1)
    {
        return nullptr;
    }
    py::pytype_handle Direct3DSurfaceDescription_type{py::register_python_type(module.get(), &type_spec_Direct3DSurfaceDescription, nullptr, nullptr)};
    if (!Direct3DSurfaceDescription_type)
    {
        return nullptr;
    }

    py::pyobj_handle Direct3DSurfaceDescription_from_tuple_capsule{PyCapsule_New(reinterpret_cast<void*>(Direct3DSurfaceDescription_from_tuple),"winrt._winrt_windows_graphics_directx_direct3d11.Direct3DSurfaceDescription_from_tuple", nullptr)};
    if (!Direct3DSurfaceDescription_from_tuple_capsule)
    {
        return nullptr;
    }

    if (PyModule_AddObjectRef(module.get(), "Direct3DSurfaceDescription_from_tuple", Direct3DSurfaceDescription_from_tuple_capsule.get()) == -1)
    {
        return nullptr;
    }

    return module.detach();
}
