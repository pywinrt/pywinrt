# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel

from winrt.microsoft.windows.applicationmodel.dynamicdependency import PackageDependencyLifetimeArtifactKind, PackageDependencyProcessorArchitectures

Self = typing.TypeVar('Self')

@typing.final
class PackageDependencyContextId:
    id: winrt.system.UInt64
    def __init__(self, id: winrt.system.UInt64) -> None: ...

@typing.final
class AddPackageDependencyOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AddPackageDependencyOptions: ...
    def __new__(cls: typing.Type[AddPackageDependencyOptions]) -> AddPackageDependencyOptions:...
    @_property
    def rank(self) -> winrt.system.Int32: ...
    @rank.setter
    def rank(self, value: winrt.system.Int32) -> None: ...
    @_property
    def prepend_if_rank_collision(self) -> bool: ...
    @prepend_if_rank_collision.setter
    def prepend_if_rank_collision(self, value: bool) -> None: ...

@typing.final
class CreatePackageDependencyOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> CreatePackageDependencyOptions: ...
    def __new__(cls: typing.Type[CreatePackageDependencyOptions]) -> CreatePackageDependencyOptions:...
    @_property
    def verify_dependency_resolution(self) -> bool: ...
    @verify_dependency_resolution.setter
    def verify_dependency_resolution(self, value: bool) -> None: ...
    @_property
    def lifetime_artifact_kind(self) -> PackageDependencyLifetimeArtifactKind: ...
    @lifetime_artifact_kind.setter
    def lifetime_artifact_kind(self, value: PackageDependencyLifetimeArtifactKind) -> None: ...
    @_property
    def lifetime_artifact(self) -> str: ...
    @lifetime_artifact.setter
    def lifetime_artifact(self, value: str) -> None: ...
    @_property
    def architectures(self) -> PackageDependencyProcessorArchitectures: ...
    @architectures.setter
    def architectures(self, value: PackageDependencyProcessorArchitectures) -> None: ...

@typing.final
class PackageDependency_Static(type):
    @typing.overload
    def create(cls, package_family_name: str, min_version: winrt.windows.applicationmodel.PackageVersion, /) -> typing.Optional[PackageDependency]: ...
    @typing.overload
    def create(cls, package_family_name: str, min_version: winrt.windows.applicationmodel.PackageVersion, options: typing.Optional[CreatePackageDependencyOptions], /) -> typing.Optional[PackageDependency]: ...
    def create_for_system(cls, package_family_name: str, min_version: winrt.windows.applicationmodel.PackageVersion, options: typing.Optional[CreatePackageDependencyOptions], /) -> typing.Optional[PackageDependency]: ...
    def get_from_id(cls, id: str, /) -> typing.Optional[PackageDependency]: ...
    def get_from_id_for_system(cls, id: str, /) -> typing.Optional[PackageDependency]: ...
    @_property
    def generation_id(cls) -> winrt.system.UInt32: ...
    @_property
    def package_graph_revision_id(cls) -> winrt.system.UInt32: ...

@typing.final
class PackageDependency(winrt.system.Object, metaclass=PackageDependency_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PackageDependency: ...
    @typing.overload
    def add(self) -> typing.Optional[PackageDependencyContext]: ...
    @typing.overload
    def add(self, options: typing.Optional[AddPackageDependencyOptions], /) -> typing.Optional[PackageDependencyContext]: ...
    def delete(self) -> None: ...
    @_property
    def id(self) -> str: ...

@typing.final
class PackageDependencyContext(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PackageDependencyContext: ...
    def __new__(cls: typing.Type[PackageDependencyContext], context_id: PackageDependencyContextId) -> PackageDependencyContext:...
    def remove(self) -> None: ...
    @_property
    def context_id(self) -> PackageDependencyContextId: ...
    @_property
    def package_dependency_id(self) -> str: ...
    @_property
    def package_full_name(self) -> str: ...

@typing.final
class PackageDependencyRank_Static(type):
    @_property
    def default(cls) -> winrt.system.Int32: ...

@typing.final
class PackageDependencyRank(winrt.system.Object, metaclass=PackageDependencyRank_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PackageDependencyRank: ...

