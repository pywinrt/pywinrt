// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.ApplicationModel.AppExtensions.h"


namespace py::cpp::Windows::ApplicationModel::AppExtensions
{
    // ----- AppExtension class --------------------

    static PyObject* _new_AppExtension(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtension>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtension>::type_name);
        return nullptr;
    }

    static void _dealloc_AppExtension(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppExtension_GetExtensionPropertiesAsync(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.AppExtensions.AppExtension", L"GetExtensionPropertiesAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetExtensionPropertiesAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppExtension_GetPublicFolderAsync(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.AppExtensions.AppExtension", L"GetPublicFolderAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetPublicFolderAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppExtension_get_AppInfo(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtension", L"AppInfo"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AppInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtension_get_Description(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtension", L"Description"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtension_get_DisplayName(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtension", L"DisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtension_get_Id(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtension", L"Id"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtension_get_Package(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtension", L"Package"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtension_get_AppUserModelId(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtension", L"AppUserModelId"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AppUserModelId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppExtension(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::AppExtensions::AppExtension>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppExtension(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppExtensions::AppExtension>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppExtension[] = {
        { "get_extension_properties_async", reinterpret_cast<PyCFunction>(AppExtension_GetExtensionPropertiesAsync), METH_VARARGS, nullptr },
        { "get_public_folder_async", reinterpret_cast<PyCFunction>(AppExtension_GetPublicFolderAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_AppExtension, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppExtension), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppExtension[] = {
        { "app_info", reinterpret_cast<getter>(AppExtension_get_AppInfo), nullptr, nullptr, nullptr },
        { "description", reinterpret_cast<getter>(AppExtension_get_Description), nullptr, nullptr, nullptr },
        { "display_name", reinterpret_cast<getter>(AppExtension_get_DisplayName), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(AppExtension_get_Id), nullptr, nullptr, nullptr },
        { "package", reinterpret_cast<getter>(AppExtension_get_Package), nullptr, nullptr, nullptr },
        { "app_user_model_id", reinterpret_cast<getter>(AppExtension_get_AppUserModelId), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppExtension[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppExtension) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppExtension) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppExtension) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppExtension) },
        { },
    };

    static PyType_Spec type_spec_AppExtension =
    {
        "winrt._winrt_windows_applicationmodel_appextensions.AppExtension",
        sizeof(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtension),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppExtension
    };

    // ----- AppExtensionCatalog class --------------------

    static PyObject* _new_AppExtensionCatalog(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog>::type_name);
        return nullptr;
    }

    static void _dealloc_AppExtensionCatalog(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppExtensionCatalog_FindAllAsync(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionCatalog", L"FindAllAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.FindAllAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_Open(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionCatalog", L"Open", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog::Open(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_RequestRemovePackageAsync(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionCatalog", L"RequestRemovePackageAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.RequestRemovePackageAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_add_PackageInstalled(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionCatalog", L"PackageInstalled"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog, winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs>>(arg);

            return py::convert(self->obj.PackageInstalled(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_remove_PackageInstalled(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionCatalog", L"PackageInstalled"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PackageInstalled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_add_PackageStatusChanged(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionCatalog", L"PackageStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog, winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs>>(arg);

            return py::convert(self->obj.PackageStatusChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_remove_PackageStatusChanged(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionCatalog", L"PackageStatusChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PackageStatusChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_add_PackageUninstalling(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionCatalog", L"PackageUninstalling"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog, winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs>>(arg);

            return py::convert(self->obj.PackageUninstalling(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_remove_PackageUninstalling(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionCatalog", L"PackageUninstalling"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PackageUninstalling(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_add_PackageUpdated(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionCatalog", L"PackageUpdated"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog, winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs>>(arg);

            return py::convert(self->obj.PackageUpdated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_remove_PackageUpdated(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionCatalog", L"PackageUpdated"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PackageUpdated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_add_PackageUpdating(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionCatalog", L"PackageUpdating"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog, winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs>>(arg);

            return py::convert(self->obj.PackageUpdating(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionCatalog_remove_PackageUpdating(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionCatalog", L"PackageUpdating"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PackageUpdating(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppExtensionCatalog(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppExtensionCatalog(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppExtensionCatalog[] = {
        { "find_all_async", reinterpret_cast<PyCFunction>(AppExtensionCatalog_FindAllAsync), METH_VARARGS, nullptr },
        { "request_remove_package_async", reinterpret_cast<PyCFunction>(AppExtensionCatalog_RequestRemovePackageAsync), METH_VARARGS, nullptr },
        { "add_package_installed", reinterpret_cast<PyCFunction>(AppExtensionCatalog_add_PackageInstalled), METH_O, nullptr },
        { "remove_package_installed", reinterpret_cast<PyCFunction>(AppExtensionCatalog_remove_PackageInstalled), METH_O, nullptr },
        { "add_package_status_changed", reinterpret_cast<PyCFunction>(AppExtensionCatalog_add_PackageStatusChanged), METH_O, nullptr },
        { "remove_package_status_changed", reinterpret_cast<PyCFunction>(AppExtensionCatalog_remove_PackageStatusChanged), METH_O, nullptr },
        { "add_package_uninstalling", reinterpret_cast<PyCFunction>(AppExtensionCatalog_add_PackageUninstalling), METH_O, nullptr },
        { "remove_package_uninstalling", reinterpret_cast<PyCFunction>(AppExtensionCatalog_remove_PackageUninstalling), METH_O, nullptr },
        { "add_package_updated", reinterpret_cast<PyCFunction>(AppExtensionCatalog_add_PackageUpdated), METH_O, nullptr },
        { "remove_package_updated", reinterpret_cast<PyCFunction>(AppExtensionCatalog_remove_PackageUpdated), METH_O, nullptr },
        { "add_package_updating", reinterpret_cast<PyCFunction>(AppExtensionCatalog_add_PackageUpdating), METH_O, nullptr },
        { "remove_package_updating", reinterpret_cast<PyCFunction>(AppExtensionCatalog_remove_PackageUpdating), METH_O, nullptr },
        { "_assign_array_", _assign_array_AppExtensionCatalog, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppExtensionCatalog), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppExtensionCatalog[] = {
        { }
    };

    static PyType_Slot _type_slots_AppExtensionCatalog[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppExtensionCatalog) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppExtensionCatalog) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppExtensionCatalog) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppExtensionCatalog) },
        { },
    };

    static PyType_Spec type_spec_AppExtensionCatalog =
    {
        "winrt._winrt_windows_applicationmodel_appextensions.AppExtensionCatalog",
        sizeof(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionCatalog),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppExtensionCatalog
    };

    static PyGetSetDef getset_AppExtensionCatalog_Static[] = {
        { }
    };

    static PyMethodDef methods_AppExtensionCatalog_Static[] = {
        { "open", reinterpret_cast<PyCFunction>(AppExtensionCatalog_Open), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_AppExtensionCatalog_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_AppExtensionCatalog_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_AppExtensionCatalog_Static) },
        { }
    };

    static PyType_Spec type_spec_AppExtensionCatalog_Static =
    {
        "winrt._winrt_windows_applicationmodel_appextensions.AppExtensionCatalog_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_AppExtensionCatalog_Static
    };

    // ----- AppExtensionPackageInstalledEventArgs class --------------------

    static PyObject* _new_AppExtensionPackageInstalledEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_AppExtensionPackageInstalledEventArgs(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppExtensionPackageInstalledEventArgs_get_AppExtensionName(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionPackageInstalledEventArgs", L"AppExtensionName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AppExtensionName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionPackageInstalledEventArgs_get_Extensions(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionPackageInstalledEventArgs", L"Extensions"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Extensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionPackageInstalledEventArgs_get_Package(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionPackageInstalledEventArgs", L"Package"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppExtensionPackageInstalledEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppExtensionPackageInstalledEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppExtensionPackageInstalledEventArgs[] = {
        { "_assign_array_", _assign_array_AppExtensionPackageInstalledEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppExtensionPackageInstalledEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppExtensionPackageInstalledEventArgs[] = {
        { "app_extension_name", reinterpret_cast<getter>(AppExtensionPackageInstalledEventArgs_get_AppExtensionName), nullptr, nullptr, nullptr },
        { "extensions", reinterpret_cast<getter>(AppExtensionPackageInstalledEventArgs_get_Extensions), nullptr, nullptr, nullptr },
        { "package", reinterpret_cast<getter>(AppExtensionPackageInstalledEventArgs_get_Package), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppExtensionPackageInstalledEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppExtensionPackageInstalledEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppExtensionPackageInstalledEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppExtensionPackageInstalledEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppExtensionPackageInstalledEventArgs) },
        { },
    };

    static PyType_Spec type_spec_AppExtensionPackageInstalledEventArgs =
    {
        "winrt._winrt_windows_applicationmodel_appextensions.AppExtensionPackageInstalledEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppExtensionPackageInstalledEventArgs
    };

    // ----- AppExtensionPackageStatusChangedEventArgs class --------------------

    static PyObject* _new_AppExtensionPackageStatusChangedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_AppExtensionPackageStatusChangedEventArgs(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppExtensionPackageStatusChangedEventArgs_get_AppExtensionName(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionPackageStatusChangedEventArgs", L"AppExtensionName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AppExtensionName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionPackageStatusChangedEventArgs_get_Package(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionPackageStatusChangedEventArgs", L"Package"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppExtensionPackageStatusChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppExtensionPackageStatusChangedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppExtensionPackageStatusChangedEventArgs[] = {
        { "_assign_array_", _assign_array_AppExtensionPackageStatusChangedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppExtensionPackageStatusChangedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppExtensionPackageStatusChangedEventArgs[] = {
        { "app_extension_name", reinterpret_cast<getter>(AppExtensionPackageStatusChangedEventArgs_get_AppExtensionName), nullptr, nullptr, nullptr },
        { "package", reinterpret_cast<getter>(AppExtensionPackageStatusChangedEventArgs_get_Package), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppExtensionPackageStatusChangedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppExtensionPackageStatusChangedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppExtensionPackageStatusChangedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppExtensionPackageStatusChangedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppExtensionPackageStatusChangedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_AppExtensionPackageStatusChangedEventArgs =
    {
        "winrt._winrt_windows_applicationmodel_appextensions.AppExtensionPackageStatusChangedEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppExtensionPackageStatusChangedEventArgs
    };

    // ----- AppExtensionPackageUninstallingEventArgs class --------------------

    static PyObject* _new_AppExtensionPackageUninstallingEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_AppExtensionPackageUninstallingEventArgs(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppExtensionPackageUninstallingEventArgs_get_AppExtensionName(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionPackageUninstallingEventArgs", L"AppExtensionName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AppExtensionName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionPackageUninstallingEventArgs_get_Package(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionPackageUninstallingEventArgs", L"Package"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppExtensionPackageUninstallingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppExtensionPackageUninstallingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppExtensionPackageUninstallingEventArgs[] = {
        { "_assign_array_", _assign_array_AppExtensionPackageUninstallingEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppExtensionPackageUninstallingEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppExtensionPackageUninstallingEventArgs[] = {
        { "app_extension_name", reinterpret_cast<getter>(AppExtensionPackageUninstallingEventArgs_get_AppExtensionName), nullptr, nullptr, nullptr },
        { "package", reinterpret_cast<getter>(AppExtensionPackageUninstallingEventArgs_get_Package), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppExtensionPackageUninstallingEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppExtensionPackageUninstallingEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppExtensionPackageUninstallingEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppExtensionPackageUninstallingEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppExtensionPackageUninstallingEventArgs) },
        { },
    };

    static PyType_Spec type_spec_AppExtensionPackageUninstallingEventArgs =
    {
        "winrt._winrt_windows_applicationmodel_appextensions.AppExtensionPackageUninstallingEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppExtensionPackageUninstallingEventArgs
    };

    // ----- AppExtensionPackageUpdatedEventArgs class --------------------

    static PyObject* _new_AppExtensionPackageUpdatedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_AppExtensionPackageUpdatedEventArgs(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppExtensionPackageUpdatedEventArgs_get_AppExtensionName(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatedEventArgs", L"AppExtensionName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AppExtensionName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionPackageUpdatedEventArgs_get_Extensions(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatedEventArgs", L"Extensions"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Extensions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionPackageUpdatedEventArgs_get_Package(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatedEventArgs", L"Package"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppExtensionPackageUpdatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppExtensionPackageUpdatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppExtensionPackageUpdatedEventArgs[] = {
        { "_assign_array_", _assign_array_AppExtensionPackageUpdatedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppExtensionPackageUpdatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppExtensionPackageUpdatedEventArgs[] = {
        { "app_extension_name", reinterpret_cast<getter>(AppExtensionPackageUpdatedEventArgs_get_AppExtensionName), nullptr, nullptr, nullptr },
        { "extensions", reinterpret_cast<getter>(AppExtensionPackageUpdatedEventArgs_get_Extensions), nullptr, nullptr, nullptr },
        { "package", reinterpret_cast<getter>(AppExtensionPackageUpdatedEventArgs_get_Package), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppExtensionPackageUpdatedEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppExtensionPackageUpdatedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppExtensionPackageUpdatedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppExtensionPackageUpdatedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppExtensionPackageUpdatedEventArgs) },
        { },
    };

    static PyType_Spec type_spec_AppExtensionPackageUpdatedEventArgs =
    {
        "winrt._winrt_windows_applicationmodel_appextensions.AppExtensionPackageUpdatedEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppExtensionPackageUpdatedEventArgs
    };

    // ----- AppExtensionPackageUpdatingEventArgs class --------------------

    static PyObject* _new_AppExtensionPackageUpdatingEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_AppExtensionPackageUpdatingEventArgs(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* AppExtensionPackageUpdatingEventArgs_get_AppExtensionName(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatingEventArgs", L"AppExtensionName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AppExtensionName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* AppExtensionPackageUpdatingEventArgs_get_Package(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatingEventArgs", L"Package"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Package());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_AppExtensionPackageUpdatingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_AppExtensionPackageUpdatingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_AppExtensionPackageUpdatingEventArgs[] = {
        { "_assign_array_", _assign_array_AppExtensionPackageUpdatingEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_AppExtensionPackageUpdatingEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_AppExtensionPackageUpdatingEventArgs[] = {
        { "app_extension_name", reinterpret_cast<getter>(AppExtensionPackageUpdatingEventArgs_get_AppExtensionName), nullptr, nullptr, nullptr },
        { "package", reinterpret_cast<getter>(AppExtensionPackageUpdatingEventArgs_get_Package), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_AppExtensionPackageUpdatingEventArgs[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_AppExtensionPackageUpdatingEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_AppExtensionPackageUpdatingEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_AppExtensionPackageUpdatingEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_AppExtensionPackageUpdatingEventArgs) },
        { },
    };

    static PyType_Spec type_spec_AppExtensionPackageUpdatingEventArgs =
    {
        "winrt._winrt_windows_applicationmodel_appextensions.AppExtensionPackageUpdatingEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_AppExtensionPackageUpdatingEventArgs
    };

    // ----- Windows.ApplicationModel.AppExtensions Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::ApplicationModel::AppExtensions");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_applicationmodel_appextensions",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::ApplicationModel::AppExtensions

PyMODINIT_FUNC PyInit__winrt_windows_applicationmodel_appextensions(void) noexcept
{
    using namespace py::cpp::Windows::ApplicationModel::AppExtensions;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppExtension, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_AppExtensionCatalog_Static{PyType_FromSpec(&type_spec_AppExtensionCatalog_Static)};
    if (!type_AppExtensionCatalog_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppExtensionCatalog, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_AppExtensionCatalog_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppExtensionPackageInstalledEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppExtensionPackageStatusChangedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppExtensionPackageUninstallingEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppExtensionPackageUpdatedEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_AppExtensionPackageUpdatingEventArgs, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
