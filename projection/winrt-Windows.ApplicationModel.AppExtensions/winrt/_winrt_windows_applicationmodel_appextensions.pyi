# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.storage

Self = typing.TypeVar('Self')

@typing.final
class AppExtension(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppExtension: ...
    def get_extension_properties_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IPropertySet]: ...
    def get_public_folder_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.storage.StorageFolder]: ...
    @_property
    def app_info(self) -> typing.Optional[winrt.windows.applicationmodel.AppInfo]: ...
    @_property
    def description(self) -> str: ...
    @_property
    def display_name(self) -> str: ...
    @_property
    def id(self) -> str: ...
    @_property
    def package(self) -> typing.Optional[winrt.windows.applicationmodel.Package]: ...
    @_property
    def app_user_model_id(self) -> str: ...

@typing.final
class AppExtensionCatalog_Static(type):
    def open(cls, app_extension_name: str, /) -> typing.Optional[AppExtensionCatalog]: ...

@typing.final
class AppExtensionCatalog(winrt.system.Object, metaclass=AppExtensionCatalog_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppExtensionCatalog: ...
    def find_all_async(self) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVectorView[AppExtension]]: ...
    def request_remove_package_async(self, package_full_name: str, /) -> winrt.windows.foundation.IAsyncOperation[bool]: ...
    def add_package_installed(self, handler: winrt.windows.foundation.TypedEventHandler[AppExtensionCatalog, AppExtensionPackageInstalledEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_package_installed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_package_status_changed(self, handler: winrt.windows.foundation.TypedEventHandler[AppExtensionCatalog, AppExtensionPackageStatusChangedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_package_status_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_package_uninstalling(self, handler: winrt.windows.foundation.TypedEventHandler[AppExtensionCatalog, AppExtensionPackageUninstallingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_package_uninstalling(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_package_updated(self, handler: winrt.windows.foundation.TypedEventHandler[AppExtensionCatalog, AppExtensionPackageUpdatedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_package_updated(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_package_updating(self, handler: winrt.windows.foundation.TypedEventHandler[AppExtensionCatalog, AppExtensionPackageUpdatingEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_package_updating(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class AppExtensionPackageInstalledEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppExtensionPackageInstalledEventArgs: ...
    @_property
    def app_extension_name(self) -> str: ...
    @_property
    def extensions(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[AppExtension]]: ...
    @_property
    def package(self) -> typing.Optional[winrt.windows.applicationmodel.Package]: ...

@typing.final
class AppExtensionPackageStatusChangedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppExtensionPackageStatusChangedEventArgs: ...
    @_property
    def app_extension_name(self) -> str: ...
    @_property
    def package(self) -> typing.Optional[winrt.windows.applicationmodel.Package]: ...

@typing.final
class AppExtensionPackageUninstallingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppExtensionPackageUninstallingEventArgs: ...
    @_property
    def app_extension_name(self) -> str: ...
    @_property
    def package(self) -> typing.Optional[winrt.windows.applicationmodel.Package]: ...

@typing.final
class AppExtensionPackageUpdatedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppExtensionPackageUpdatedEventArgs: ...
    @_property
    def app_extension_name(self) -> str: ...
    @_property
    def extensions(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[AppExtension]]: ...
    @_property
    def package(self) -> typing.Optional[winrt.windows.applicationmodel.Package]: ...

@typing.final
class AppExtensionPackageUpdatingEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AppExtensionPackageUpdatingEventArgs: ...
    @_property
    def app_extension_name(self) -> str: ...
    @_property
    def package(self) -> typing.Optional[winrt.windows.applicationmodel.Package]: ...

