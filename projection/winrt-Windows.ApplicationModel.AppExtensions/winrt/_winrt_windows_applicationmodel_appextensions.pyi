# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.applicationmodel as windows_applicationmodel
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.storage as windows_storage

Self = typing.TypeVar('Self')

@typing.final
class AppExtension(winrt.system.Object):
    # Windows.Foundation.Collections.IPropertySet Windows.ApplicationModel.AppExtensions.AppExtension::GetExtensionProperties()
    def get_extension_properties(self) -> windows_foundation_collections.IPropertySet: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IPropertySet> Windows.ApplicationModel.AppExtensions.AppExtension::GetExtensionPropertiesAsync()
    def get_extension_properties_async(self) -> windows_foundation.IAsyncOperation[windows_foundation_collections.IPropertySet]: ...
    # Windows.Storage.StorageFolder Windows.ApplicationModel.AppExtensions.AppExtension::GetPublicFolder()
    def get_public_folder(self) -> windows_storage.StorageFolder: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Storage.StorageFolder> Windows.ApplicationModel.AppExtensions.AppExtension::GetPublicFolderAsync()
    def get_public_folder_async(self) -> windows_foundation.IAsyncOperation[windows_storage.StorageFolder]: ...
    # System.String Windows.ApplicationModel.AppExtensions.AppExtension::GetPublicPath()
    def get_public_path(self) -> str: ...
    # Windows.ApplicationModel.AppInfo Windows.ApplicationModel.AppExtensions.AppExtension::get_AppInfo()
    @_property
    def app_info(self) -> windows_applicationmodel.AppInfo: ...
    # System.String Windows.ApplicationModel.AppExtensions.AppExtension::get_Description()
    @_property
    def description(self) -> str: ...
    # System.String Windows.ApplicationModel.AppExtensions.AppExtension::get_DisplayName()
    @_property
    def display_name(self) -> str: ...
    # System.String Windows.ApplicationModel.AppExtensions.AppExtension::get_Id()
    @_property
    def id(self) -> str: ...
    # Windows.ApplicationModel.Package Windows.ApplicationModel.AppExtensions.AppExtension::get_Package()
    @_property
    def package(self) -> windows_applicationmodel.Package: ...
    # System.String Windows.ApplicationModel.AppExtensions.AppExtension::get_AppUserModelId()
    @_property
    def app_user_model_id(self) -> str: ...

@typing.final
class AppExtensionCatalog_Static(type):
    # Windows.ApplicationModel.AppExtensions.AppExtensionCatalog Windows.ApplicationModel.AppExtensions.AppExtensionCatalog::Open(System.String)
    def open(cls, app_extension_name: str, /) -> AppExtensionCatalog: ...

@typing.final
class AppExtensionCatalog(winrt.system.Object, metaclass=AppExtensionCatalog_Static):
    # Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.AppExtensions.AppExtension> Windows.ApplicationModel.AppExtensions.AppExtensionCatalog::FindAll()
    def find_all(self) -> typing.Sequence[AppExtension]: ...
    # Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.AppExtensions.AppExtension>> Windows.ApplicationModel.AppExtensions.AppExtensionCatalog::FindAllAsync()
    def find_all_async(self) -> windows_foundation.IAsyncOperation[typing.Sequence[AppExtension]]: ...
    # Windows.Foundation.IAsyncOperation`1<System.Boolean> Windows.ApplicationModel.AppExtensions.AppExtensionCatalog::RequestRemovePackageAsync(System.String)
    def request_remove_package_async(self, package_full_name: str, /) -> windows_foundation.IAsyncOperation[bool]: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.AppExtensions.AppExtensionCatalog::add_PackageInstalled(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.AppExtensions.AppExtensionCatalog,Windows.ApplicationModel.AppExtensions.AppExtensionPackageInstalledEventArgs>)
    def add_package_installed(self, handler: windows_foundation.TypedEventHandler[AppExtensionCatalog, AppExtensionPackageInstalledEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.AppExtensions.AppExtensionCatalog::remove_PackageInstalled(Windows.Foundation.EventRegistrationToken)
    def remove_package_installed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.AppExtensions.AppExtensionCatalog::add_PackageStatusChanged(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.AppExtensions.AppExtensionCatalog,Windows.ApplicationModel.AppExtensions.AppExtensionPackageStatusChangedEventArgs>)
    def add_package_status_changed(self, handler: windows_foundation.TypedEventHandler[AppExtensionCatalog, AppExtensionPackageStatusChangedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.AppExtensions.AppExtensionCatalog::remove_PackageStatusChanged(Windows.Foundation.EventRegistrationToken)
    def remove_package_status_changed(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.AppExtensions.AppExtensionCatalog::add_PackageUninstalling(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.AppExtensions.AppExtensionCatalog,Windows.ApplicationModel.AppExtensions.AppExtensionPackageUninstallingEventArgs>)
    def add_package_uninstalling(self, handler: windows_foundation.TypedEventHandler[AppExtensionCatalog, AppExtensionPackageUninstallingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.AppExtensions.AppExtensionCatalog::remove_PackageUninstalling(Windows.Foundation.EventRegistrationToken)
    def remove_package_uninstalling(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.AppExtensions.AppExtensionCatalog::add_PackageUpdated(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.AppExtensions.AppExtensionCatalog,Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatedEventArgs>)
    def add_package_updated(self, handler: windows_foundation.TypedEventHandler[AppExtensionCatalog, AppExtensionPackageUpdatedEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.AppExtensions.AppExtensionCatalog::remove_PackageUpdated(Windows.Foundation.EventRegistrationToken)
    def remove_package_updated(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...
    # Windows.Foundation.EventRegistrationToken Windows.ApplicationModel.AppExtensions.AppExtensionCatalog::add_PackageUpdating(Windows.Foundation.TypedEventHandler`2<Windows.ApplicationModel.AppExtensions.AppExtensionCatalog,Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatingEventArgs>)
    def add_package_updating(self, handler: windows_foundation.TypedEventHandler[AppExtensionCatalog, AppExtensionPackageUpdatingEventArgs], /) -> windows_foundation.EventRegistrationToken: ...
    # System.Void Windows.ApplicationModel.AppExtensions.AppExtensionCatalog::remove_PackageUpdating(Windows.Foundation.EventRegistrationToken)
    def remove_package_updating(self, token: windows_foundation.EventRegistrationToken, /) -> None: ...

@typing.final
class AppExtensionPackageInstalledEventArgs(winrt.system.Object):
    # System.String Windows.ApplicationModel.AppExtensions.AppExtensionPackageInstalledEventArgs::get_AppExtensionName()
    @_property
    def app_extension_name(self) -> str: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.AppExtensions.AppExtension> Windows.ApplicationModel.AppExtensions.AppExtensionPackageInstalledEventArgs::get_Extensions()
    @_property
    def extensions(self) -> typing.Sequence[AppExtension]: ...
    # Windows.ApplicationModel.Package Windows.ApplicationModel.AppExtensions.AppExtensionPackageInstalledEventArgs::get_Package()
    @_property
    def package(self) -> windows_applicationmodel.Package: ...

@typing.final
class AppExtensionPackageStatusChangedEventArgs(winrt.system.Object):
    # System.String Windows.ApplicationModel.AppExtensions.AppExtensionPackageStatusChangedEventArgs::get_AppExtensionName()
    @_property
    def app_extension_name(self) -> str: ...
    # Windows.ApplicationModel.Package Windows.ApplicationModel.AppExtensions.AppExtensionPackageStatusChangedEventArgs::get_Package()
    @_property
    def package(self) -> windows_applicationmodel.Package: ...

@typing.final
class AppExtensionPackageUninstallingEventArgs(winrt.system.Object):
    # System.String Windows.ApplicationModel.AppExtensions.AppExtensionPackageUninstallingEventArgs::get_AppExtensionName()
    @_property
    def app_extension_name(self) -> str: ...
    # Windows.ApplicationModel.Package Windows.ApplicationModel.AppExtensions.AppExtensionPackageUninstallingEventArgs::get_Package()
    @_property
    def package(self) -> windows_applicationmodel.Package: ...

@typing.final
class AppExtensionPackageUpdatedEventArgs(winrt.system.Object):
    # System.String Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatedEventArgs::get_AppExtensionName()
    @_property
    def app_extension_name(self) -> str: ...
    # Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.AppExtensions.AppExtension> Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatedEventArgs::get_Extensions()
    @_property
    def extensions(self) -> typing.Sequence[AppExtension]: ...
    # Windows.ApplicationModel.Package Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatedEventArgs::get_Package()
    @_property
    def package(self) -> windows_applicationmodel.Package: ...

@typing.final
class AppExtensionPackageUpdatingEventArgs(winrt.system.Object):
    # System.String Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatingEventArgs::get_AppExtensionName()
    @_property
    def app_extension_name(self) -> str: ...
    # Windows.ApplicationModel.Package Windows.ApplicationModel.AppExtensions.AppExtensionPackageUpdatingEventArgs::get_Package()
    @_property
    def package(self) -> windows_applicationmodel.Package: ...

