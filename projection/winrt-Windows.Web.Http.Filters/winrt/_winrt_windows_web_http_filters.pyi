# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.networking.sockets
import winrt.windows.security.credentials
import winrt.windows.security.cryptography.certificates
import winrt.windows.system
import winrt.windows.web.http

from winrt.windows.web.http.filters import HttpCacheReadBehavior, HttpCacheWriteBehavior, HttpCookieUsageBehavior

Self = typing.TypeVar('Self')

@typing.final
class HttpBaseProtocolFilter_Static(type):
    def create_for_user(cls, user: typing.Optional[winrt.windows.system.User], /) -> typing.Optional[HttpBaseProtocolFilter]: ...

@typing.final
class HttpBaseProtocolFilter(winrt.system.Object, metaclass=HttpBaseProtocolFilter_Static):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpBaseProtocolFilter: ...
    def __new__(cls: typing.Type[HttpBaseProtocolFilter]) -> HttpBaseProtocolFilter:...
    def clear_authentication_cache(self) -> None: ...
    def close(self) -> None: ...
    def send_request_async(self, request: typing.Optional[winrt.windows.web.http.HttpRequestMessage], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.web.http.HttpResponseMessage, winrt.windows.web.http.HttpProgress]: ...
    def add_server_custom_validation_requested(self, handler: winrt.windows.foundation.TypedEventHandler[HttpBaseProtocolFilter, HttpServerCustomValidationRequestedEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_server_custom_validation_requested(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def use_proxy(self) -> bool: ...
    @use_proxy.setter
    def use_proxy(self, value: bool) -> None: ...
    @_property
    def server_credential(self) -> typing.Optional[winrt.windows.security.credentials.PasswordCredential]: ...
    @server_credential.setter
    def server_credential(self, value: typing.Optional[winrt.windows.security.credentials.PasswordCredential]) -> None: ...
    @_property
    def proxy_credential(self) -> typing.Optional[winrt.windows.security.credentials.PasswordCredential]: ...
    @proxy_credential.setter
    def proxy_credential(self, value: typing.Optional[winrt.windows.security.credentials.PasswordCredential]) -> None: ...
    @_property
    def max_connections_per_server(self) -> winrt.system.UInt32: ...
    @max_connections_per_server.setter
    def max_connections_per_server(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def client_certificate(self) -> typing.Optional[winrt.windows.security.cryptography.certificates.Certificate]: ...
    @client_certificate.setter
    def client_certificate(self, value: typing.Optional[winrt.windows.security.cryptography.certificates.Certificate]) -> None: ...
    @_property
    def automatic_decompression(self) -> bool: ...
    @automatic_decompression.setter
    def automatic_decompression(self, value: bool) -> None: ...
    @_property
    def allow_u_i(self) -> bool: ...
    @allow_u_i.setter
    def allow_u_i(self, value: bool) -> None: ...
    @_property
    def allow_auto_redirect(self) -> bool: ...
    @allow_auto_redirect.setter
    def allow_auto_redirect(self, value: bool) -> None: ...
    @_property
    def cache_control(self) -> typing.Optional[HttpCacheControl]: ...
    @_property
    def cookie_manager(self) -> typing.Optional[winrt.windows.web.http.HttpCookieManager]: ...
    @_property
    def ignorable_server_certificate_errors(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.security.cryptography.certificates.ChainValidationResult]]: ...
    @_property
    def max_version(self) -> winrt.windows.web.http.HttpVersion: ...
    @max_version.setter
    def max_version(self, value: winrt.windows.web.http.HttpVersion) -> None: ...
    @_property
    def cookie_usage_behavior(self) -> HttpCookieUsageBehavior: ...
    @cookie_usage_behavior.setter
    def cookie_usage_behavior(self, value: HttpCookieUsageBehavior) -> None: ...
    @_property
    def user(self) -> typing.Optional[winrt.windows.system.User]: ...

@typing.final
class HttpCacheControl(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpCacheControl: ...
    @_property
    def write_behavior(self) -> HttpCacheWriteBehavior: ...
    @write_behavior.setter
    def write_behavior(self, value: HttpCacheWriteBehavior) -> None: ...
    @_property
    def read_behavior(self) -> HttpCacheReadBehavior: ...
    @read_behavior.setter
    def read_behavior(self, value: HttpCacheReadBehavior) -> None: ...

@typing.final
class HttpServerCustomValidationRequestedEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HttpServerCustomValidationRequestedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winrt.windows.foundation.Deferral]: ...
    def reject(self) -> None: ...
    @_property
    def request_message(self) -> typing.Optional[winrt.windows.web.http.HttpRequestMessage]: ...
    @_property
    def server_certificate(self) -> typing.Optional[winrt.windows.security.cryptography.certificates.Certificate]: ...
    @_property
    def server_certificate_error_severity(self) -> winrt.windows.networking.sockets.SocketSslErrorSeverity: ...
    @_property
    def server_certificate_errors(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.security.cryptography.certificates.ChainValidationResult]]: ...
    @_property
    def server_intermediate_certificates(self) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.security.cryptography.certificates.Certificate]]: ...

@typing.final
class IHttpFilter(winrt.system.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IHttpFilter: ...
    def close(self) -> None: ...
    def send_request_async(self, request: typing.Optional[winrt.windows.web.http.HttpRequestMessage], /) -> winrt.windows.foundation.IAsyncOperationWithProgress[winrt.windows.web.http.HttpResponseMessage, winrt.windows.web.http.HttpProgress]: ...

