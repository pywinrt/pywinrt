// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.ApplicationModel.CommunicationBlocking.h"


namespace py::cpp::Windows::ApplicationModel::CommunicationBlocking
{
    // ----- CommunicationBlockingAccessManager class --------------------

    static PyObject* _new_CommunicationBlockingAccessManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAccessManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAccessManager>::type_name);
        return nullptr;
    }

    static PyObject* CommunicationBlockingAccessManager_IsBlockedNumberAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.CommunicationBlocking.CommunicationBlockingAccessManager", L"IsBlockedNumberAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAccessManager::IsBlockedNumberAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CommunicationBlockingAccessManager_ShowBlockNumbersUI(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.CommunicationBlocking.CommunicationBlockingAccessManager", L"ShowBlockNumbersUI", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAccessManager::ShowBlockNumbersUI(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CommunicationBlockingAccessManager_ShowBlockedCallsUI(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.CommunicationBlocking.CommunicationBlockingAccessManager", L"ShowBlockedCallsUI", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAccessManager::ShowBlockedCallsUI();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CommunicationBlockingAccessManager_ShowBlockedMessagesUI(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.CommunicationBlocking.CommunicationBlockingAccessManager", L"ShowBlockedMessagesUI", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAccessManager::ShowBlockedMessagesUI();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CommunicationBlockingAccessManager_ShowUnblockNumbersUI(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.CommunicationBlocking.CommunicationBlockingAccessManager", L"ShowUnblockNumbersUI", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                return py::convert(winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAccessManager::ShowUnblockNumbersUI(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CommunicationBlockingAccessManager_get_IsBlockingActive(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.CommunicationBlocking.CommunicationBlockingAccessManager", L"IsBlockingActive"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAccessManager::IsBlockingActive());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CommunicationBlockingAccessManager[] = {
        { }
    };

    static PyGetSetDef _getset_CommunicationBlockingAccessManager[] = {
        { }
    };

    static PyType_Slot _type_slots_CommunicationBlockingAccessManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CommunicationBlockingAccessManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CommunicationBlockingAccessManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CommunicationBlockingAccessManager) },
        { },
    };

    static PyType_Spec type_spec_CommunicationBlockingAccessManager =
    {
        "winrt._winrt_windows_applicationmodel_communicationblocking.CommunicationBlockingAccessManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CommunicationBlockingAccessManager
    };

    static PyGetSetDef getset_CommunicationBlockingAccessManager_Static[] = {
        { "is_blocking_active", reinterpret_cast<getter>(CommunicationBlockingAccessManager_get_IsBlockingActive), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_CommunicationBlockingAccessManager_Static[] = {
        { "is_blocked_number_async", reinterpret_cast<PyCFunction>(CommunicationBlockingAccessManager_IsBlockedNumberAsync), METH_VARARGS, nullptr },
        { "show_block_numbers_u_i", reinterpret_cast<PyCFunction>(CommunicationBlockingAccessManager_ShowBlockNumbersUI), METH_VARARGS, nullptr },
        { "show_blocked_calls_u_i", reinterpret_cast<PyCFunction>(CommunicationBlockingAccessManager_ShowBlockedCallsUI), METH_VARARGS, nullptr },
        { "show_blocked_messages_u_i", reinterpret_cast<PyCFunction>(CommunicationBlockingAccessManager_ShowBlockedMessagesUI), METH_VARARGS, nullptr },
        { "show_unblock_numbers_u_i", reinterpret_cast<PyCFunction>(CommunicationBlockingAccessManager_ShowUnblockNumbersUI), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_CommunicationBlockingAccessManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_CommunicationBlockingAccessManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_CommunicationBlockingAccessManager_Static) },
        { }
    };

    static PyType_Spec type_spec_CommunicationBlockingAccessManager_Static =
    {
        "winrt._winrt_windows_applicationmodel_communicationblocking.CommunicationBlockingAccessManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_CommunicationBlockingAccessManager_Static
    };

    // ----- CommunicationBlockingAppManager class --------------------

    static PyObject* _new_CommunicationBlockingAppManager(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAppManager>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAppManager>::type_name);
        return nullptr;
    }

    static PyObject* CommunicationBlockingAppManager_RequestSetAsActiveBlockingAppAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.CommunicationBlocking.CommunicationBlockingAppManager", L"RequestSetAsActiveBlockingAppAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAppManager::RequestSetAsActiveBlockingAppAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CommunicationBlockingAppManager_ShowCommunicationBlockingSettingsUI(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.CommunicationBlocking.CommunicationBlockingAppManager", L"ShowCommunicationBlockingSettingsUI", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAppManager::ShowCommunicationBlockingSettingsUI();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CommunicationBlockingAppManager_get_IsCurrentAppActiveBlockingApp(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.ApplicationModel.CommunicationBlocking.CommunicationBlockingAppManager", L"IsCurrentAppActiveBlockingApp"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::ApplicationModel::CommunicationBlocking::CommunicationBlockingAppManager::IsCurrentAppActiveBlockingApp());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CommunicationBlockingAppManager[] = {
        { }
    };

    static PyGetSetDef _getset_CommunicationBlockingAppManager[] = {
        { }
    };

    static PyType_Slot _type_slots_CommunicationBlockingAppManager[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CommunicationBlockingAppManager) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CommunicationBlockingAppManager) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CommunicationBlockingAppManager) },
        { },
    };

    static PyType_Spec type_spec_CommunicationBlockingAppManager =
    {
        "winrt._winrt_windows_applicationmodel_communicationblocking.CommunicationBlockingAppManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CommunicationBlockingAppManager
    };

    static PyGetSetDef getset_CommunicationBlockingAppManager_Static[] = {
        { "is_current_app_active_blocking_app", reinterpret_cast<getter>(CommunicationBlockingAppManager_get_IsCurrentAppActiveBlockingApp), nullptr, nullptr, nullptr },
        { }
    };

    static PyMethodDef methods_CommunicationBlockingAppManager_Static[] = {
        { "request_set_as_active_blocking_app_async", reinterpret_cast<PyCFunction>(CommunicationBlockingAppManager_RequestSetAsActiveBlockingAppAsync), METH_VARARGS, nullptr },
        { "show_communication_blocking_settings_u_i", reinterpret_cast<PyCFunction>(CommunicationBlockingAppManager_ShowCommunicationBlockingSettingsUI), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_CommunicationBlockingAppManager_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_CommunicationBlockingAppManager_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_CommunicationBlockingAppManager_Static) },
        { }
    };

    static PyType_Spec type_spec_CommunicationBlockingAppManager_Static =
    {
        "winrt._winrt_windows_applicationmodel_communicationblocking.CommunicationBlockingAppManager_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_CommunicationBlockingAppManager_Static
    };

    // ----- Windows.ApplicationModel.CommunicationBlocking Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::ApplicationModel::CommunicationBlocking");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_applicationmodel_communicationblocking",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::ApplicationModel::CommunicationBlocking

PyMODINIT_FUNC PyInit__winrt_windows_applicationmodel_communicationblocking(void) noexcept
{
    using namespace py::cpp::Windows::ApplicationModel::CommunicationBlocking;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_CommunicationBlockingAccessManager_Static{PyType_FromSpec(&type_spec_CommunicationBlockingAccessManager_Static)};
    if (!type_CommunicationBlockingAccessManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CommunicationBlockingAccessManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_CommunicationBlockingAccessManager_Static.get())) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_CommunicationBlockingAppManager_Static{PyType_FromSpec(&type_spec_CommunicationBlockingAppManager_Static)};
    if (!type_CommunicationBlockingAppManager_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CommunicationBlockingAppManager, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_CommunicationBlockingAppManager_Static.get())) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
