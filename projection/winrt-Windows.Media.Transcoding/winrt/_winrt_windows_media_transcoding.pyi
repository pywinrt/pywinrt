# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.media.core
import winrt.windows.media.mediaproperties
import winrt.windows.storage
import winrt.windows.storage.streams

from winrt.windows.media.transcoding import MediaVideoProcessingAlgorithm, TranscodeFailureReason

Self = typing.TypeVar('Self')

@typing.final
class MediaTranscoder(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaTranscoder: ...
    def __new__(cls: typing.Type[MediaTranscoder]) -> MediaTranscoder:...
    @typing.overload
    def add_audio_effect(self, activatable_class_id: str, /) -> None: ...
    @typing.overload
    def add_audio_effect(self, activatable_class_id: str, effect_required: bool, configuration: typing.Optional[winrt.windows.foundation.collections.IPropertySet], /) -> None: ...
    @typing.overload
    def add_video_effect(self, activatable_class_id: str, /) -> None: ...
    @typing.overload
    def add_video_effect(self, activatable_class_id: str, effect_required: bool, configuration: typing.Optional[winrt.windows.foundation.collections.IPropertySet], /) -> None: ...
    def clear_effects(self) -> None: ...
    def prepare_file_transcode_async(self, source: typing.Optional[winrt.windows.storage.IStorageFile], destination: typing.Optional[winrt.windows.storage.IStorageFile], profile: typing.Optional[winrt.windows.media.mediaproperties.MediaEncodingProfile], /) -> winrt.windows.foundation.IAsyncOperation[PrepareTranscodeResult]: ...
    def prepare_media_stream_source_transcode_async(self, source: typing.Optional[winrt.windows.media.core.IMediaSource], destination: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], profile: typing.Optional[winrt.windows.media.mediaproperties.MediaEncodingProfile], /) -> winrt.windows.foundation.IAsyncOperation[PrepareTranscodeResult]: ...
    def prepare_stream_transcode_async(self, source: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], destination: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], profile: typing.Optional[winrt.windows.media.mediaproperties.MediaEncodingProfile], /) -> winrt.windows.foundation.IAsyncOperation[PrepareTranscodeResult]: ...
    @_property
    def trim_stop_time(self) -> datetime.timedelta: ...
    @trim_stop_time.setter
    def trim_stop_time(self, value: datetime.timedelta) -> None: ...
    @_property
    def trim_start_time(self) -> datetime.timedelta: ...
    @trim_start_time.setter
    def trim_start_time(self, value: datetime.timedelta) -> None: ...
    @_property
    def hardware_acceleration_enabled(self) -> bool: ...
    @hardware_acceleration_enabled.setter
    def hardware_acceleration_enabled(self, value: bool) -> None: ...
    @_property
    def always_reencode(self) -> bool: ...
    @always_reencode.setter
    def always_reencode(self, value: bool) -> None: ...
    @_property
    def video_processing_algorithm(self) -> MediaVideoProcessingAlgorithm: ...
    @video_processing_algorithm.setter
    def video_processing_algorithm(self, value: MediaVideoProcessingAlgorithm) -> None: ...

@typing.final
class PrepareTranscodeResult(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> PrepareTranscodeResult: ...
    def transcode_async(self) -> winrt.windows.foundation.IAsyncActionWithProgress[winrt.system.Double]: ...
    @_property
    def can_transcode(self) -> bool: ...
    @_property
    def failure_reason(self) -> TranscodeFailureReason: ...

