// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Media.Transcoding.h"


namespace py::cpp::Windows::Media::Transcoding
{
    // ----- MediaTranscoder class --------------------

    static PyObject* _new_MediaTranscoder(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Media::Transcoding::MediaTranscoder instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MediaTranscoder(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* MediaTranscoder_AddAudioEffect(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"AddAudioEffect", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.AddAudioEffect(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"AddAudioEffect", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<bool>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IPropertySet>(args, 2);

                self->obj.AddAudioEffect(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaTranscoder_AddVideoEffect(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"AddVideoEffect", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.AddVideoEffect(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"AddVideoEffect", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<bool>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IPropertySet>(args, 2);

                self->obj.AddVideoEffect(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaTranscoder_ClearEffects(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"ClearEffects", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                self->obj.ClearEffects();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaTranscoder_PrepareFileTranscodeAsync(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"PrepareFileTranscodeAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::IStorageFile>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Media::MediaProperties::MediaEncodingProfile>(args, 2);

                return py::convert(self->obj.PrepareFileTranscodeAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaTranscoder_PrepareMediaStreamSourceTranscodeAsync(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"PrepareMediaStreamSourceTranscodeAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Media::Core::IMediaSource>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Media::MediaProperties::MediaEncodingProfile>(args, 2);

                return py::convert(self->obj.PrepareMediaStreamSourceTranscodeAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaTranscoder_PrepareStreamTranscodeAsync(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"PrepareStreamTranscodeAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Media::MediaProperties::MediaEncodingProfile>(args, 2);

                return py::convert(self->obj.PrepareStreamTranscodeAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MediaTranscoder_get_TrimStopTime(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"TrimStopTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TrimStopTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MediaTranscoder_put_TrimStopTime(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"TrimStopTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(arg);

            self->obj.TrimStopTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MediaTranscoder_get_TrimStartTime(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"TrimStartTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TrimStartTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MediaTranscoder_put_TrimStartTime(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"TrimStartTime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(arg);

            self->obj.TrimStartTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MediaTranscoder_get_HardwareAccelerationEnabled(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"HardwareAccelerationEnabled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.HardwareAccelerationEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MediaTranscoder_put_HardwareAccelerationEnabled(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"HardwareAccelerationEnabled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.HardwareAccelerationEnabled(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MediaTranscoder_get_AlwaysReencode(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"AlwaysReencode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AlwaysReencode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MediaTranscoder_put_AlwaysReencode(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"AlwaysReencode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AlwaysReencode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MediaTranscoder_get_VideoProcessingAlgorithm(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"VideoProcessingAlgorithm"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.VideoProcessingAlgorithm());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MediaTranscoder_put_VideoProcessingAlgorithm(py::wrapper::Windows::Media::Transcoding::MediaTranscoder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Transcoding.MediaTranscoder", L"VideoProcessingAlgorithm"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Media::Transcoding::MediaVideoProcessingAlgorithm>(arg);

            self->obj.VideoProcessingAlgorithm(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_MediaTranscoder(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::Transcoding::MediaTranscoder>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_MediaTranscoder(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Transcoding::MediaTranscoder>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MediaTranscoder[] = {
        { "add_audio_effect", reinterpret_cast<PyCFunction>(MediaTranscoder_AddAudioEffect), METH_VARARGS, nullptr },
        { "add_video_effect", reinterpret_cast<PyCFunction>(MediaTranscoder_AddVideoEffect), METH_VARARGS, nullptr },
        { "clear_effects", reinterpret_cast<PyCFunction>(MediaTranscoder_ClearEffects), METH_VARARGS, nullptr },
        { "prepare_file_transcode_async", reinterpret_cast<PyCFunction>(MediaTranscoder_PrepareFileTranscodeAsync), METH_VARARGS, nullptr },
        { "prepare_media_stream_source_transcode_async", reinterpret_cast<PyCFunction>(MediaTranscoder_PrepareMediaStreamSourceTranscodeAsync), METH_VARARGS, nullptr },
        { "prepare_stream_transcode_async", reinterpret_cast<PyCFunction>(MediaTranscoder_PrepareStreamTranscodeAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_MediaTranscoder, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_MediaTranscoder), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MediaTranscoder[] = {
        { "trim_stop_time", reinterpret_cast<getter>(MediaTranscoder_get_TrimStopTime), reinterpret_cast<setter>(MediaTranscoder_put_TrimStopTime), nullptr, nullptr },
        { "trim_start_time", reinterpret_cast<getter>(MediaTranscoder_get_TrimStartTime), reinterpret_cast<setter>(MediaTranscoder_put_TrimStartTime), nullptr, nullptr },
        { "hardware_acceleration_enabled", reinterpret_cast<getter>(MediaTranscoder_get_HardwareAccelerationEnabled), reinterpret_cast<setter>(MediaTranscoder_put_HardwareAccelerationEnabled), nullptr, nullptr },
        { "always_reencode", reinterpret_cast<getter>(MediaTranscoder_get_AlwaysReencode), reinterpret_cast<setter>(MediaTranscoder_put_AlwaysReencode), nullptr, nullptr },
        { "video_processing_algorithm", reinterpret_cast<getter>(MediaTranscoder_get_VideoProcessingAlgorithm), reinterpret_cast<setter>(MediaTranscoder_put_VideoProcessingAlgorithm), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MediaTranscoder[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_MediaTranscoder) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_MediaTranscoder) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_MediaTranscoder) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_MediaTranscoder) },
        { },
    };

    static PyType_Spec type_spec_MediaTranscoder =
    {
        "winrt._winrt_windows_media_transcoding.MediaTranscoder",
        sizeof(py::wrapper::Windows::Media::Transcoding::MediaTranscoder),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MediaTranscoder
    };

    // ----- PrepareTranscodeResult class --------------------

    static PyObject* _new_PrepareTranscodeResult(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Media::Transcoding::PrepareTranscodeResult>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Media::Transcoding::PrepareTranscodeResult>::type_name);
        return nullptr;
    }

    static void _dealloc_PrepareTranscodeResult(py::wrapper::Windows::Media::Transcoding::PrepareTranscodeResult* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrepareTranscodeResult_TranscodeAsync(py::wrapper::Windows::Media::Transcoding::PrepareTranscodeResult* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Media.Transcoding.PrepareTranscodeResult", L"TranscodeAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.TranscodeAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrepareTranscodeResult_get_CanTranscode(py::wrapper::Windows::Media::Transcoding::PrepareTranscodeResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Transcoding.PrepareTranscodeResult", L"CanTranscode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CanTranscode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrepareTranscodeResult_get_FailureReason(py::wrapper::Windows::Media::Transcoding::PrepareTranscodeResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Media.Transcoding.PrepareTranscodeResult", L"FailureReason"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.FailureReason());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrepareTranscodeResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Media::Transcoding::PrepareTranscodeResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrepareTranscodeResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Media::Transcoding::PrepareTranscodeResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrepareTranscodeResult[] = {
        { "transcode_async", reinterpret_cast<PyCFunction>(PrepareTranscodeResult_TranscodeAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_PrepareTranscodeResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrepareTranscodeResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrepareTranscodeResult[] = {
        { "can_transcode", reinterpret_cast<getter>(PrepareTranscodeResult_get_CanTranscode), nullptr, nullptr, nullptr },
        { "failure_reason", reinterpret_cast<getter>(PrepareTranscodeResult_get_FailureReason), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrepareTranscodeResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrepareTranscodeResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrepareTranscodeResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrepareTranscodeResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrepareTranscodeResult) },
        { },
    };

    static PyType_Spec type_spec_PrepareTranscodeResult =
    {
        "winrt._winrt_windows_media_transcoding.PrepareTranscodeResult",
        sizeof(py::wrapper::Windows::Media::Transcoding::PrepareTranscodeResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrepareTranscodeResult
    };

    // ----- Windows.Media.Transcoding Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Media::Transcoding");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_media_transcoding",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Media::Transcoding

PyMODINIT_FUNC PyInit__winrt_windows_media_transcoding(void) noexcept
{
    using namespace py::cpp::Windows::Media::Transcoding;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_MediaTranscoder, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrepareTranscodeResult, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
