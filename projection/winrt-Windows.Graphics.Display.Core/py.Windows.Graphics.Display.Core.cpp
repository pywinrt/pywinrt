// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Graphics.Display.Core.h"


namespace py::cpp::Windows::Graphics::Display::Core
{
    // ----- HdmiDisplayInformation class --------------------

    static PyObject* _new_HdmiDisplayInformation(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Display::Core::HdmiDisplayInformation>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Display::Core::HdmiDisplayInformation>::type_name);
        return nullptr;
    }

    static void _dealloc_HdmiDisplayInformation(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayInformation* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HdmiDisplayInformation_GetCurrentDisplayMode(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayInformation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Display.Core.HdmiDisplayInformation", L"GetCurrentDisplayMode", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetCurrentDisplayMode());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HdmiDisplayInformation_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Display.Core.HdmiDisplayInformation", L"GetForCurrentView", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Graphics::Display::Core::HdmiDisplayInformation::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HdmiDisplayInformation_GetSupportedDisplayModes(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayInformation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Display.Core.HdmiDisplayInformation", L"GetSupportedDisplayModes", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetSupportedDisplayModes());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HdmiDisplayInformation_RequestSetCurrentDisplayModeAsync(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayInformation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Display.Core.HdmiDisplayInformation", L"RequestSetCurrentDisplayModeAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Display::Core::HdmiDisplayMode>(args, 0);

                return py::convert(self->obj.RequestSetCurrentDisplayModeAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Display.Core.HdmiDisplayInformation", L"RequestSetCurrentDisplayModeAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Display::Core::HdmiDisplayMode>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Graphics::Display::Core::HdmiDisplayHdrOption>(args, 1);

                return py::convert(self->obj.RequestSetCurrentDisplayModeAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Display.Core.HdmiDisplayInformation", L"RequestSetCurrentDisplayModeAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Display::Core::HdmiDisplayMode>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Graphics::Display::Core::HdmiDisplayHdrOption>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata>(args, 2);

                return py::convert(self->obj.RequestSetCurrentDisplayModeAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HdmiDisplayInformation_SetDefaultDisplayModeAsync(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayInformation* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Display.Core.HdmiDisplayInformation", L"SetDefaultDisplayModeAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.SetDefaultDisplayModeAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HdmiDisplayInformation_add_DisplayModesChanged(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayInformation* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Display.Core.HdmiDisplayInformation", L"DisplayModesChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Display::Core::HdmiDisplayInformation, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.DisplayModesChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HdmiDisplayInformation_remove_DisplayModesChanged(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayInformation* self, PyObject* arg) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Display.Core.HdmiDisplayInformation", L"DisplayModesChanged"))
        {
            PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.DisplayModesChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HdmiDisplayInformation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Display::Core::HdmiDisplayInformation>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HdmiDisplayInformation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Display::Core::HdmiDisplayInformation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HdmiDisplayInformation[] = {
        { "get_current_display_mode", reinterpret_cast<PyCFunction>(HdmiDisplayInformation_GetCurrentDisplayMode), METH_VARARGS, nullptr },
        { "get_supported_display_modes", reinterpret_cast<PyCFunction>(HdmiDisplayInformation_GetSupportedDisplayModes), METH_VARARGS, nullptr },
        { "request_set_current_display_mode_async", reinterpret_cast<PyCFunction>(HdmiDisplayInformation_RequestSetCurrentDisplayModeAsync), METH_VARARGS, nullptr },
        { "set_default_display_mode_async", reinterpret_cast<PyCFunction>(HdmiDisplayInformation_SetDefaultDisplayModeAsync), METH_VARARGS, nullptr },
        { "add_display_modes_changed", reinterpret_cast<PyCFunction>(HdmiDisplayInformation_add_DisplayModesChanged), METH_O, nullptr },
        { "remove_display_modes_changed", reinterpret_cast<PyCFunction>(HdmiDisplayInformation_remove_DisplayModesChanged), METH_O, nullptr },
        { "_assign_array_", _assign_array_HdmiDisplayInformation, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HdmiDisplayInformation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_HdmiDisplayInformation[] = {
        { }
    };

    static PyType_Slot _type_slots_HdmiDisplayInformation[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_HdmiDisplayInformation) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HdmiDisplayInformation) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HdmiDisplayInformation) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HdmiDisplayInformation) },
        { },
    };

    static PyType_Spec type_spec_HdmiDisplayInformation =
    {
        "winrt._winrt_windows_graphics_display_core.HdmiDisplayInformation",
        sizeof(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayInformation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HdmiDisplayInformation
    };

    static PyGetSetDef getset_HdmiDisplayInformation_Static[] = {
        { }
    };

    static PyMethodDef methods_HdmiDisplayInformation_Static[] = {
        { "get_for_current_view", reinterpret_cast<PyCFunction>(HdmiDisplayInformation_GetForCurrentView), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_HdmiDisplayInformation_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_HdmiDisplayInformation_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_HdmiDisplayInformation_Static) },
        { }
    };

    static PyType_Spec type_spec_HdmiDisplayInformation_Static =
    {
        "winrt._winrt_windows_graphics_display_core.HdmiDisplayInformation_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_HdmiDisplayInformation_Static
    };

    // ----- HdmiDisplayMode class --------------------

    static PyObject* _new_HdmiDisplayMode(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Display::Core::HdmiDisplayMode>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Display::Core::HdmiDisplayMode>::type_name);
        return nullptr;
    }

    static void _dealloc_HdmiDisplayMode(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayMode* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HdmiDisplayMode_IsEqual(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayMode* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Display.Core.HdmiDisplayMode", L"IsEqual", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Display::Core::HdmiDisplayMode>(args, 0);

                return py::convert(self->obj.IsEqual(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HdmiDisplayMode_get_BitsPerPixel(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayMode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Display.Core.HdmiDisplayMode", L"BitsPerPixel"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.BitsPerPixel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HdmiDisplayMode_get_ColorSpace(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayMode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Display.Core.HdmiDisplayMode", L"ColorSpace"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ColorSpace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HdmiDisplayMode_get_Is2086MetadataSupported(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayMode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Display.Core.HdmiDisplayMode", L"Is2086MetadataSupported"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Is2086MetadataSupported());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HdmiDisplayMode_get_IsSdrLuminanceSupported(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayMode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Display.Core.HdmiDisplayMode", L"IsSdrLuminanceSupported"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsSdrLuminanceSupported());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HdmiDisplayMode_get_IsSmpte2084Supported(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayMode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Display.Core.HdmiDisplayMode", L"IsSmpte2084Supported"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsSmpte2084Supported());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HdmiDisplayMode_get_PixelEncoding(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayMode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Display.Core.HdmiDisplayMode", L"PixelEncoding"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PixelEncoding());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HdmiDisplayMode_get_RefreshRate(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayMode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Display.Core.HdmiDisplayMode", L"RefreshRate"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RefreshRate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HdmiDisplayMode_get_ResolutionHeightInRawPixels(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayMode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Display.Core.HdmiDisplayMode", L"ResolutionHeightInRawPixels"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ResolutionHeightInRawPixels());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HdmiDisplayMode_get_ResolutionWidthInRawPixels(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayMode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Display.Core.HdmiDisplayMode", L"ResolutionWidthInRawPixels"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ResolutionWidthInRawPixels());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HdmiDisplayMode_get_StereoEnabled(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayMode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Display.Core.HdmiDisplayMode", L"StereoEnabled"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.StereoEnabled());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HdmiDisplayMode_get_IsDolbyVisionLowLatencySupported(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayMode* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Display.Core.HdmiDisplayMode", L"IsDolbyVisionLowLatencySupported"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.IsDolbyVisionLowLatencySupported());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HdmiDisplayMode(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Display::Core::HdmiDisplayMode>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HdmiDisplayMode(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Display::Core::HdmiDisplayMode>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HdmiDisplayMode[] = {
        { "is_equal", reinterpret_cast<PyCFunction>(HdmiDisplayMode_IsEqual), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_HdmiDisplayMode, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HdmiDisplayMode), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_HdmiDisplayMode[] = {
        { "bits_per_pixel", reinterpret_cast<getter>(HdmiDisplayMode_get_BitsPerPixel), nullptr, nullptr, nullptr },
        { "color_space", reinterpret_cast<getter>(HdmiDisplayMode_get_ColorSpace), nullptr, nullptr, nullptr },
        { "is2086_metadata_supported", reinterpret_cast<getter>(HdmiDisplayMode_get_Is2086MetadataSupported), nullptr, nullptr, nullptr },
        { "is_sdr_luminance_supported", reinterpret_cast<getter>(HdmiDisplayMode_get_IsSdrLuminanceSupported), nullptr, nullptr, nullptr },
        { "is_smpte2084_supported", reinterpret_cast<getter>(HdmiDisplayMode_get_IsSmpte2084Supported), nullptr, nullptr, nullptr },
        { "pixel_encoding", reinterpret_cast<getter>(HdmiDisplayMode_get_PixelEncoding), nullptr, nullptr, nullptr },
        { "refresh_rate", reinterpret_cast<getter>(HdmiDisplayMode_get_RefreshRate), nullptr, nullptr, nullptr },
        { "resolution_height_in_raw_pixels", reinterpret_cast<getter>(HdmiDisplayMode_get_ResolutionHeightInRawPixels), nullptr, nullptr, nullptr },
        { "resolution_width_in_raw_pixels", reinterpret_cast<getter>(HdmiDisplayMode_get_ResolutionWidthInRawPixels), nullptr, nullptr, nullptr },
        { "stereo_enabled", reinterpret_cast<getter>(HdmiDisplayMode_get_StereoEnabled), nullptr, nullptr, nullptr },
        { "is_dolby_vision_low_latency_supported", reinterpret_cast<getter>(HdmiDisplayMode_get_IsDolbyVisionLowLatencySupported), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_HdmiDisplayMode[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_HdmiDisplayMode) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HdmiDisplayMode) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HdmiDisplayMode) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HdmiDisplayMode) },
        { },
    };

    static PyType_Spec type_spec_HdmiDisplayMode =
    {
        "winrt._winrt_windows_graphics_display_core.HdmiDisplayMode",
        sizeof(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayMode),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HdmiDisplayMode
    };

    // ----- HdmiDisplayHdr2086Metadata struct --------------------

    winrt_struct_wrapper<winrt::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata>* _new_HdmiDisplayHdr2086Metadata(PyTypeObject* subclass, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata>*>(subclass->tp_alloc(subclass, 0));

        if (!self)
        {
            return nullptr;
        }

        std::construct_at(&self->obj);

        return self;
    }

    int _init_HdmiDisplayHdr2086Metadata(winrt_struct_wrapper<winrt::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata>* self, PyObject* args, PyObject* kwds) noexcept
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            self->obj = {};
            return 0;
        }

        uint16_t _RedPrimaryX{};
        uint16_t _RedPrimaryY{};
        uint16_t _GreenPrimaryX{};
        uint16_t _GreenPrimaryY{};
        uint16_t _BluePrimaryX{};
        uint16_t _BluePrimaryY{};
        uint16_t _WhitePointX{};
        uint16_t _WhitePointY{};
        uint16_t _MaxMasteringLuminance{};
        uint16_t _MinMasteringLuminance{};
        uint16_t _MaxContentLightLevel{};
        uint16_t _MaxFrameAverageLightLevel{};

        static const char* kwlist[] = {"red_primary_x", "red_primary_y", "green_primary_x", "green_primary_y", "blue_primary_x", "blue_primary_y", "white_point_x", "white_point_y", "max_mastering_luminance", "min_mastering_luminance", "max_content_light_level", "max_frame_average_light_level", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "HHHHHHHHHHHH", const_cast<char**>(kwlist), &_RedPrimaryX, &_RedPrimaryY, &_GreenPrimaryX, &_GreenPrimaryY, &_BluePrimaryX, &_BluePrimaryY, &_WhitePointX, &_WhitePointY, &_MaxMasteringLuminance, &_MinMasteringLuminance, &_MaxContentLightLevel, &_MaxFrameAverageLightLevel))
        {
            return -1;
        }

        try
        {
            self->obj = {_RedPrimaryX, _RedPrimaryY, _GreenPrimaryX, _GreenPrimaryY, _BluePrimaryX, _BluePrimaryY, _WhitePointX, _WhitePointY, _MaxMasteringLuminance, _MinMasteringLuminance, _MaxContentLightLevel, _MaxFrameAverageLightLevel};
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static void _dealloc_HdmiDisplayHdr2086Metadata(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_HdmiDisplayHdr2086Metadata(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_HdmiDisplayHdr2086Metadata[] = {
        { "_assign_array_", _assign_array_HdmiDisplayHdr2086Metadata, METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyObject* HdmiDisplayHdr2086Metadata_get_RedPrimaryX(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RedPrimaryX);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HdmiDisplayHdr2086Metadata_set_RedPrimaryX(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.RedPrimaryX = py::converter<uint16_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HdmiDisplayHdr2086Metadata_get_RedPrimaryY(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RedPrimaryY);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HdmiDisplayHdr2086Metadata_set_RedPrimaryY(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.RedPrimaryY = py::converter<uint16_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HdmiDisplayHdr2086Metadata_get_GreenPrimaryX(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GreenPrimaryX);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HdmiDisplayHdr2086Metadata_set_GreenPrimaryX(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.GreenPrimaryX = py::converter<uint16_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HdmiDisplayHdr2086Metadata_get_GreenPrimaryY(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GreenPrimaryY);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HdmiDisplayHdr2086Metadata_set_GreenPrimaryY(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.GreenPrimaryY = py::converter<uint16_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HdmiDisplayHdr2086Metadata_get_BluePrimaryX(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BluePrimaryX);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HdmiDisplayHdr2086Metadata_set_BluePrimaryX(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.BluePrimaryX = py::converter<uint16_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HdmiDisplayHdr2086Metadata_get_BluePrimaryY(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BluePrimaryY);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HdmiDisplayHdr2086Metadata_set_BluePrimaryY(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.BluePrimaryY = py::converter<uint16_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HdmiDisplayHdr2086Metadata_get_WhitePointX(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WhitePointX);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HdmiDisplayHdr2086Metadata_set_WhitePointX(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.WhitePointX = py::converter<uint16_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HdmiDisplayHdr2086Metadata_get_WhitePointY(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WhitePointY);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HdmiDisplayHdr2086Metadata_set_WhitePointY(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.WhitePointY = py::converter<uint16_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HdmiDisplayHdr2086Metadata_get_MaxMasteringLuminance(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxMasteringLuminance);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HdmiDisplayHdr2086Metadata_set_MaxMasteringLuminance(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.MaxMasteringLuminance = py::converter<uint16_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HdmiDisplayHdr2086Metadata_get_MinMasteringLuminance(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MinMasteringLuminance);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HdmiDisplayHdr2086Metadata_set_MinMasteringLuminance(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.MinMasteringLuminance = py::converter<uint16_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HdmiDisplayHdr2086Metadata_get_MaxContentLightLevel(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxContentLightLevel);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HdmiDisplayHdr2086Metadata_set_MaxContentLightLevel(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.MaxContentLightLevel = py::converter<uint16_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HdmiDisplayHdr2086Metadata_get_MaxFrameAverageLightLevel(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxFrameAverageLightLevel);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HdmiDisplayHdr2086Metadata_set_MaxFrameAverageLightLevel(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.MaxFrameAverageLightLevel = py::converter<uint16_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_HdmiDisplayHdr2086Metadata[] = {
        { "red_primary_x", reinterpret_cast<getter>(HdmiDisplayHdr2086Metadata_get_RedPrimaryX), reinterpret_cast<setter>(HdmiDisplayHdr2086Metadata_set_RedPrimaryX), nullptr, nullptr },
        { "red_primary_y", reinterpret_cast<getter>(HdmiDisplayHdr2086Metadata_get_RedPrimaryY), reinterpret_cast<setter>(HdmiDisplayHdr2086Metadata_set_RedPrimaryY), nullptr, nullptr },
        { "green_primary_x", reinterpret_cast<getter>(HdmiDisplayHdr2086Metadata_get_GreenPrimaryX), reinterpret_cast<setter>(HdmiDisplayHdr2086Metadata_set_GreenPrimaryX), nullptr, nullptr },
        { "green_primary_y", reinterpret_cast<getter>(HdmiDisplayHdr2086Metadata_get_GreenPrimaryY), reinterpret_cast<setter>(HdmiDisplayHdr2086Metadata_set_GreenPrimaryY), nullptr, nullptr },
        { "blue_primary_x", reinterpret_cast<getter>(HdmiDisplayHdr2086Metadata_get_BluePrimaryX), reinterpret_cast<setter>(HdmiDisplayHdr2086Metadata_set_BluePrimaryX), nullptr, nullptr },
        { "blue_primary_y", reinterpret_cast<getter>(HdmiDisplayHdr2086Metadata_get_BluePrimaryY), reinterpret_cast<setter>(HdmiDisplayHdr2086Metadata_set_BluePrimaryY), nullptr, nullptr },
        { "white_point_x", reinterpret_cast<getter>(HdmiDisplayHdr2086Metadata_get_WhitePointX), reinterpret_cast<setter>(HdmiDisplayHdr2086Metadata_set_WhitePointX), nullptr, nullptr },
        { "white_point_y", reinterpret_cast<getter>(HdmiDisplayHdr2086Metadata_get_WhitePointY), reinterpret_cast<setter>(HdmiDisplayHdr2086Metadata_set_WhitePointY), nullptr, nullptr },
        { "max_mastering_luminance", reinterpret_cast<getter>(HdmiDisplayHdr2086Metadata_get_MaxMasteringLuminance), reinterpret_cast<setter>(HdmiDisplayHdr2086Metadata_set_MaxMasteringLuminance), nullptr, nullptr },
        { "min_mastering_luminance", reinterpret_cast<getter>(HdmiDisplayHdr2086Metadata_get_MinMasteringLuminance), reinterpret_cast<setter>(HdmiDisplayHdr2086Metadata_set_MinMasteringLuminance), nullptr, nullptr },
        { "max_content_light_level", reinterpret_cast<getter>(HdmiDisplayHdr2086Metadata_get_MaxContentLightLevel), reinterpret_cast<setter>(HdmiDisplayHdr2086Metadata_set_MaxContentLightLevel), nullptr, nullptr },
        { "max_frame_average_light_level", reinterpret_cast<getter>(HdmiDisplayHdr2086Metadata_get_MaxFrameAverageLightLevel), reinterpret_cast<setter>(HdmiDisplayHdr2086Metadata_set_MaxFrameAverageLightLevel), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_HdmiDisplayHdr2086Metadata[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_HdmiDisplayHdr2086Metadata) },
        { Py_tp_init, reinterpret_cast<void*>(_init_HdmiDisplayHdr2086Metadata) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HdmiDisplayHdr2086Metadata) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HdmiDisplayHdr2086Metadata) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HdmiDisplayHdr2086Metadata) },
        { },
    };

    static PyType_Spec type_spec_HdmiDisplayHdr2086Metadata =
    {
        "winrt._winrt_windows_graphics_display_core.HdmiDisplayHdr2086Metadata",
        sizeof(py::wrapper::Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HdmiDisplayHdr2086Metadata
    };

    // ----- Windows.Graphics.Display.Core Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Graphics::Display::Core");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_graphics_display_core",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Graphics::Display::Core

PyMODINIT_FUNC PyInit__winrt_windows_graphics_display_core(void) noexcept
{
    using namespace py::cpp::Windows::Graphics::Display::Core;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_HdmiDisplayInformation_Static{PyType_FromSpec(&type_spec_HdmiDisplayInformation_Static)};
    if (!type_HdmiDisplayInformation_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_HdmiDisplayInformation, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_HdmiDisplayInformation_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_HdmiDisplayMode, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_HdmiDisplayHdr2086Metadata, nullptr, nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
