# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.1.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.data.xml.dom as windows_data_xml_dom
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections
import winrt.windows.security.credentials as windows_security_credentials
import winrt.windows.storage.streams as windows_storage_streams
import winrt.windows.web.syndication as windows_web_syndication

Self = typing.TypeVar('Self')

@typing.final
class AtomPubClient(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AtomPubClient: ...
    @typing.overload
    def __new__(cls: typing.Type[AtomPubClient], server_credential: typing.Optional[windows_security_credentials.PasswordCredential]) -> AtomPubClient: ...
    @typing.overload
    def __new__(cls: typing.Type[AtomPubClient]) -> AtomPubClient: ...
    def cancel_async_operations(self) -> None: ...
    def create_media_resource_async(self, uri: typing.Optional[windows_foundation.Uri], media_type: str, description: str, media_stream: typing.Optional[windows_storage_streams.IInputStream], /) -> windows_foundation.IAsyncOperationWithProgress[windows_web_syndication.SyndicationItem, windows_web_syndication.TransferProgress]: ...
    def create_resource_async(self, uri: typing.Optional[windows_foundation.Uri], description: str, item: typing.Optional[windows_web_syndication.SyndicationItem], /) -> windows_foundation.IAsyncOperationWithProgress[windows_web_syndication.SyndicationItem, windows_web_syndication.TransferProgress]: ...
    def delete_resource_async(self, uri: typing.Optional[windows_foundation.Uri], /) -> windows_foundation.IAsyncActionWithProgress[windows_web_syndication.TransferProgress]: ...
    def delete_resource_item_async(self, item: typing.Optional[windows_web_syndication.SyndicationItem], /) -> windows_foundation.IAsyncActionWithProgress[windows_web_syndication.TransferProgress]: ...
    def retrieve_feed_async(self, uri: typing.Optional[windows_foundation.Uri], /) -> windows_foundation.IAsyncOperationWithProgress[windows_web_syndication.SyndicationFeed, windows_web_syndication.RetrievalProgress]: ...
    def retrieve_media_resource_async(self, uri: typing.Optional[windows_foundation.Uri], /) -> windows_foundation.IAsyncOperationWithProgress[windows_storage_streams.IInputStream, windows_web_syndication.RetrievalProgress]: ...
    def retrieve_resource_async(self, uri: typing.Optional[windows_foundation.Uri], /) -> windows_foundation.IAsyncOperationWithProgress[windows_web_syndication.SyndicationItem, windows_web_syndication.RetrievalProgress]: ...
    def retrieve_service_document_async(self, uri: typing.Optional[windows_foundation.Uri], /) -> windows_foundation.IAsyncOperationWithProgress[ServiceDocument, windows_web_syndication.RetrievalProgress]: ...
    def set_request_header(self, name: str, value: str, /) -> None: ...
    def update_media_resource_async(self, uri: typing.Optional[windows_foundation.Uri], media_type: str, media_stream: typing.Optional[windows_storage_streams.IInputStream], /) -> windows_foundation.IAsyncActionWithProgress[windows_web_syndication.TransferProgress]: ...
    def update_resource_async(self, uri: typing.Optional[windows_foundation.Uri], item: typing.Optional[windows_web_syndication.SyndicationItem], /) -> windows_foundation.IAsyncActionWithProgress[windows_web_syndication.TransferProgress]: ...
    def update_resource_item_async(self, item: typing.Optional[windows_web_syndication.SyndicationItem], /) -> windows_foundation.IAsyncActionWithProgress[windows_web_syndication.TransferProgress]: ...
    @_property
    def timeout(self) -> winrt.system.UInt32: ...
    @timeout.setter
    def timeout(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def server_credential(self) -> typing.Optional[windows_security_credentials.PasswordCredential]: ...
    @server_credential.setter
    def server_credential(self, value: typing.Optional[windows_security_credentials.PasswordCredential]) -> None: ...
    @_property
    def proxy_credential(self) -> typing.Optional[windows_security_credentials.PasswordCredential]: ...
    @proxy_credential.setter
    def proxy_credential(self, value: typing.Optional[windows_security_credentials.PasswordCredential]) -> None: ...
    @_property
    def max_response_buffer_size(self) -> winrt.system.UInt32: ...
    @max_response_buffer_size.setter
    def max_response_buffer_size(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def bypass_cache_on_retrieve(self) -> bool: ...
    @bypass_cache_on_retrieve.setter
    def bypass_cache_on_retrieve(self, value: bool) -> None: ...

@typing.final
class ResourceCollection(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ResourceCollection: ...
    def get_xml_document(self, format: windows_web_syndication.SyndicationFormat, /) -> typing.Optional[windows_data_xml_dom.XmlDocument]: ...
    @_property
    def accepts(self) -> typing.Optional[windows_foundation_collections.IVectorView[str]]: ...
    @_property
    def categories(self) -> typing.Optional[windows_foundation_collections.IVectorView[windows_web_syndication.SyndicationCategory]]: ...
    @_property
    def title(self) -> typing.Optional[windows_web_syndication.ISyndicationText]: ...
    @_property
    def uri(self) -> typing.Optional[windows_foundation.Uri]: ...
    @_property
    def base_uri(self) -> typing.Optional[windows_foundation.Uri]: ...
    @base_uri.setter
    def base_uri(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def node_value(self) -> str: ...
    @node_value.setter
    def node_value(self, value: str) -> None: ...
    @_property
    def node_namespace(self) -> str: ...
    @node_namespace.setter
    def node_namespace(self, value: str) -> None: ...
    @_property
    def node_name(self) -> str: ...
    @node_name.setter
    def node_name(self, value: str) -> None: ...
    @_property
    def language(self) -> str: ...
    @language.setter
    def language(self, value: str) -> None: ...
    @_property
    def attribute_extensions(self) -> typing.Optional[windows_foundation_collections.IVector[windows_web_syndication.SyndicationAttribute]]: ...
    @_property
    def element_extensions(self) -> typing.Optional[windows_foundation_collections.IVector[windows_web_syndication.ISyndicationNode]]: ...

@typing.final
class ServiceDocument(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ServiceDocument: ...
    def get_xml_document(self, format: windows_web_syndication.SyndicationFormat, /) -> typing.Optional[windows_data_xml_dom.XmlDocument]: ...
    @_property
    def workspaces(self) -> typing.Optional[windows_foundation_collections.IVectorView[Workspace]]: ...
    @_property
    def node_value(self) -> str: ...
    @node_value.setter
    def node_value(self, value: str) -> None: ...
    @_property
    def node_namespace(self) -> str: ...
    @node_namespace.setter
    def node_namespace(self, value: str) -> None: ...
    @_property
    def node_name(self) -> str: ...
    @node_name.setter
    def node_name(self, value: str) -> None: ...
    @_property
    def language(self) -> str: ...
    @language.setter
    def language(self, value: str) -> None: ...
    @_property
    def base_uri(self) -> typing.Optional[windows_foundation.Uri]: ...
    @base_uri.setter
    def base_uri(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def attribute_extensions(self) -> typing.Optional[windows_foundation_collections.IVector[windows_web_syndication.SyndicationAttribute]]: ...
    @_property
    def element_extensions(self) -> typing.Optional[windows_foundation_collections.IVector[windows_web_syndication.ISyndicationNode]]: ...

@typing.final
class Workspace(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Workspace: ...
    def get_xml_document(self, format: windows_web_syndication.SyndicationFormat, /) -> typing.Optional[windows_data_xml_dom.XmlDocument]: ...
    @_property
    def collections(self) -> typing.Optional[windows_foundation_collections.IVectorView[ResourceCollection]]: ...
    @_property
    def title(self) -> typing.Optional[windows_web_syndication.ISyndicationText]: ...
    @_property
    def node_value(self) -> str: ...
    @node_value.setter
    def node_value(self, value: str) -> None: ...
    @_property
    def node_namespace(self) -> str: ...
    @node_namespace.setter
    def node_namespace(self, value: str) -> None: ...
    @_property
    def node_name(self) -> str: ...
    @node_name.setter
    def node_name(self, value: str) -> None: ...
    @_property
    def language(self) -> str: ...
    @language.setter
    def language(self, value: str) -> None: ...
    @_property
    def base_uri(self) -> typing.Optional[windows_foundation.Uri]: ...
    @base_uri.setter
    def base_uri(self, value: typing.Optional[windows_foundation.Uri]) -> None: ...
    @_property
    def attribute_extensions(self) -> typing.Optional[windows_foundation_collections.IVector[windows_web_syndication.SyndicationAttribute]]: ...
    @_property
    def element_extensions(self) -> typing.Optional[windows_foundation_collections.IVector[windows_web_syndication.ISyndicationNode]]: ...

