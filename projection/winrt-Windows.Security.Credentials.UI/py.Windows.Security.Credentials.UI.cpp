// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Security.Credentials.UI.h"


namespace py::cpp::Windows::Security::Credentials::UI
{
    // ----- CredentialPicker class --------------------

    static PyObject* _new_CredentialPicker(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::Credentials::UI::CredentialPicker>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::Credentials::UI::CredentialPicker>::type_name);
        return nullptr;
    }

    static PyObject* CredentialPicker_PickAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Credentials.UI.CredentialPicker", L"PickAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::UI::CredentialPickerOptions>(args, 0);

                return py::convert(winrt::Windows::Security::Credentials::UI::CredentialPicker::PickAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Credentials.UI.CredentialPicker", L"PickAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::Credentials::UI::CredentialPicker::PickAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Credentials.UI.CredentialPicker", L"PickAsync", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(winrt::Windows::Security::Credentials::UI::CredentialPicker::PickAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_CredentialPicker[] = {
        { }
    };

    static PyGetSetDef _getset_CredentialPicker[] = {
        { }
    };

    static PyType_Slot _type_slots_CredentialPicker[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CredentialPicker) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CredentialPicker) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CredentialPicker) },
        { },
    };

    static PyType_Spec type_spec_CredentialPicker =
    {
        "winrt._winrt_windows_security_credentials_ui.CredentialPicker",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CredentialPicker
    };

    static PyGetSetDef getset_CredentialPicker_Static[] = {
        { }
    };

    static PyMethodDef methods_CredentialPicker_Static[] = {
        { "pick_async", reinterpret_cast<PyCFunction>(CredentialPicker_PickAsync), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_CredentialPicker_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_CredentialPicker_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_CredentialPicker_Static) },
        { }
    };

    static PyType_Spec type_spec_CredentialPicker_Static =
    {
        "winrt._winrt_windows_security_credentials_ui.CredentialPicker_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_CredentialPicker_Static
    };

    // ----- CredentialPickerOptions class --------------------

    static PyObject* _new_CredentialPickerOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Security::Credentials::UI::CredentialPickerOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CredentialPickerOptions(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CredentialPickerOptions_get_TargetName(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"TargetName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.TargetName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_TargetName(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"TargetName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.TargetName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_PreviousCredential(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"PreviousCredential"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PreviousCredential());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_PreviousCredential(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"PreviousCredential"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(arg);

            self->obj.PreviousCredential(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_Message(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"Message"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Message());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_Message(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"Message"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Message(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_ErrorCode(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"ErrorCode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ErrorCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_ErrorCode(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"ErrorCode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.ErrorCode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_CustomAuthenticationProtocol(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"CustomAuthenticationProtocol"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CustomAuthenticationProtocol());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_CustomAuthenticationProtocol(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"CustomAuthenticationProtocol"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CustomAuthenticationProtocol(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_CredentialSaveOption(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"CredentialSaveOption"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CredentialSaveOption());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_CredentialSaveOption(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"CredentialSaveOption"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Security::Credentials::UI::CredentialSaveOption>(arg);

            self->obj.CredentialSaveOption(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_Caption(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"Caption"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Caption());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_Caption(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"Caption"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Caption(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_CallerSavesCredential(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"CallerSavesCredential"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CallerSavesCredential());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_CallerSavesCredential(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"CallerSavesCredential"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.CallerSavesCredential(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_AuthenticationProtocol(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"AuthenticationProtocol"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AuthenticationProtocol());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_AuthenticationProtocol(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"AuthenticationProtocol"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Security::Credentials::UI::AuthenticationProtocol>(arg);

            self->obj.AuthenticationProtocol(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_AlwaysDisplayDialog(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"AlwaysDisplayDialog"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AlwaysDisplayDialog());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_AlwaysDisplayDialog(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerOptions", L"AlwaysDisplayDialog"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AlwaysDisplayDialog(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_CredentialPickerOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Credentials::UI::CredentialPickerOptions>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CredentialPickerOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Credentials::UI::CredentialPickerOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CredentialPickerOptions[] = {
        { "_assign_array_", _assign_array_CredentialPickerOptions, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CredentialPickerOptions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CredentialPickerOptions[] = {
        { "target_name", reinterpret_cast<getter>(CredentialPickerOptions_get_TargetName), reinterpret_cast<setter>(CredentialPickerOptions_put_TargetName), nullptr, nullptr },
        { "previous_credential", reinterpret_cast<getter>(CredentialPickerOptions_get_PreviousCredential), reinterpret_cast<setter>(CredentialPickerOptions_put_PreviousCredential), nullptr, nullptr },
        { "message", reinterpret_cast<getter>(CredentialPickerOptions_get_Message), reinterpret_cast<setter>(CredentialPickerOptions_put_Message), nullptr, nullptr },
        { "error_code", reinterpret_cast<getter>(CredentialPickerOptions_get_ErrorCode), reinterpret_cast<setter>(CredentialPickerOptions_put_ErrorCode), nullptr, nullptr },
        { "custom_authentication_protocol", reinterpret_cast<getter>(CredentialPickerOptions_get_CustomAuthenticationProtocol), reinterpret_cast<setter>(CredentialPickerOptions_put_CustomAuthenticationProtocol), nullptr, nullptr },
        { "credential_save_option", reinterpret_cast<getter>(CredentialPickerOptions_get_CredentialSaveOption), reinterpret_cast<setter>(CredentialPickerOptions_put_CredentialSaveOption), nullptr, nullptr },
        { "caption", reinterpret_cast<getter>(CredentialPickerOptions_get_Caption), reinterpret_cast<setter>(CredentialPickerOptions_put_Caption), nullptr, nullptr },
        { "caller_saves_credential", reinterpret_cast<getter>(CredentialPickerOptions_get_CallerSavesCredential), reinterpret_cast<setter>(CredentialPickerOptions_put_CallerSavesCredential), nullptr, nullptr },
        { "authentication_protocol", reinterpret_cast<getter>(CredentialPickerOptions_get_AuthenticationProtocol), reinterpret_cast<setter>(CredentialPickerOptions_put_AuthenticationProtocol), nullptr, nullptr },
        { "always_display_dialog", reinterpret_cast<getter>(CredentialPickerOptions_get_AlwaysDisplayDialog), reinterpret_cast<setter>(CredentialPickerOptions_put_AlwaysDisplayDialog), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CredentialPickerOptions[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CredentialPickerOptions) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CredentialPickerOptions) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CredentialPickerOptions) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CredentialPickerOptions) },
        { },
    };

    static PyType_Spec type_spec_CredentialPickerOptions =
    {
        "winrt._winrt_windows_security_credentials_ui.CredentialPickerOptions",
        sizeof(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CredentialPickerOptions
    };

    // ----- CredentialPickerResults class --------------------

    static PyObject* _new_CredentialPickerResults(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::Credentials::UI::CredentialPickerResults>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::Credentials::UI::CredentialPickerResults>::type_name);
        return nullptr;
    }

    static void _dealloc_CredentialPickerResults(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CredentialPickerResults_get_Credential(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerResults", L"Credential"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Credential());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_CredentialDomainName(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerResults", L"CredentialDomainName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CredentialDomainName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_CredentialPassword(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerResults", L"CredentialPassword"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CredentialPassword());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_CredentialSaveOption(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerResults", L"CredentialSaveOption"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CredentialSaveOption());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_CredentialSaved(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerResults", L"CredentialSaved"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CredentialSaved());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_CredentialUserName(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerResults", L"CredentialUserName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.CredentialUserName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_ErrorCode(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Security.Credentials.UI.CredentialPickerResults", L"ErrorCode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ErrorCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_CredentialPickerResults(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Credentials::UI::CredentialPickerResults>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_CredentialPickerResults(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Credentials::UI::CredentialPickerResults>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CredentialPickerResults[] = {
        { "_assign_array_", _assign_array_CredentialPickerResults, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CredentialPickerResults), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CredentialPickerResults[] = {
        { "credential", reinterpret_cast<getter>(CredentialPickerResults_get_Credential), nullptr, nullptr, nullptr },
        { "credential_domain_name", reinterpret_cast<getter>(CredentialPickerResults_get_CredentialDomainName), nullptr, nullptr, nullptr },
        { "credential_password", reinterpret_cast<getter>(CredentialPickerResults_get_CredentialPassword), nullptr, nullptr, nullptr },
        { "credential_save_option", reinterpret_cast<getter>(CredentialPickerResults_get_CredentialSaveOption), nullptr, nullptr, nullptr },
        { "credential_saved", reinterpret_cast<getter>(CredentialPickerResults_get_CredentialSaved), nullptr, nullptr, nullptr },
        { "credential_user_name", reinterpret_cast<getter>(CredentialPickerResults_get_CredentialUserName), nullptr, nullptr, nullptr },
        { "error_code", reinterpret_cast<getter>(CredentialPickerResults_get_ErrorCode), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CredentialPickerResults[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_CredentialPickerResults) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_CredentialPickerResults) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_CredentialPickerResults) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_CredentialPickerResults) },
        { },
    };

    static PyType_Spec type_spec_CredentialPickerResults =
    {
        "winrt._winrt_windows_security_credentials_ui.CredentialPickerResults",
        sizeof(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CredentialPickerResults
    };

    // ----- UserConsentVerifier class --------------------

    static PyObject* _new_UserConsentVerifier(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Security::Credentials::UI::UserConsentVerifier>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Security::Credentials::UI::UserConsentVerifier>::type_name);
        return nullptr;
    }

    static PyObject* UserConsentVerifier_CheckAvailabilityAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Credentials.UI.UserConsentVerifier", L"CheckAvailabilityAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::Security::Credentials::UI::UserConsentVerifier::CheckAvailabilityAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserConsentVerifier_RequestVerificationAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Credentials.UI.UserConsentVerifier", L"RequestVerificationAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::Credentials::UI::UserConsentVerifier::RequestVerificationAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserConsentVerifier[] = {
        { }
    };

    static PyGetSetDef _getset_UserConsentVerifier[] = {
        { }
    };

    static PyType_Slot _type_slots_UserConsentVerifier[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_UserConsentVerifier) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_UserConsentVerifier) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_UserConsentVerifier) },
        { },
    };

    static PyType_Spec type_spec_UserConsentVerifier =
    {
        "winrt._winrt_windows_security_credentials_ui.UserConsentVerifier",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserConsentVerifier
    };

    static PyGetSetDef getset_UserConsentVerifier_Static[] = {
        { }
    };

    static PyMethodDef methods_UserConsentVerifier_Static[] = {
        { "check_availability_async", reinterpret_cast<PyCFunction>(UserConsentVerifier_CheckAvailabilityAsync), METH_VARARGS, nullptr },
        { "request_verification_async", reinterpret_cast<PyCFunction>(UserConsentVerifier_RequestVerificationAsync), METH_VARARGS, nullptr },
        { }
    };

    static PyType_Slot type_slots_UserConsentVerifier_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_UserConsentVerifier_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_UserConsentVerifier_Static) },
        { }
    };

    static PyType_Spec type_spec_UserConsentVerifier_Static =
    {
        "winrt._winrt_windows_security_credentials_ui.UserConsentVerifier_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_UserConsentVerifier_Static
    };

    // ----- Windows.Security.Credentials.UI Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Security::Credentials::UI");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_security_credentials_ui",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Security::Credentials::UI

PyMODINIT_FUNC PyInit__winrt_windows_security_credentials_ui(void) noexcept
{
    using namespace py::cpp::Windows::Security::Credentials::UI;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_CredentialPicker_Static{PyType_FromSpec(&type_spec_CredentialPicker_Static)};
    if (!type_CredentialPicker_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CredentialPicker, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_CredentialPicker_Static.get())) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CredentialPickerOptions, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_CredentialPickerResults, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    py::pyobj_handle type_UserConsentVerifier_Static{PyType_FromSpec(&type_spec_UserConsentVerifier_Static)};
    if (!type_UserConsentVerifier_Static)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_UserConsentVerifier, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_UserConsentVerifier_Static.get())) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
