// WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

#include "py.Windows.Graphics.Holographic.h"

namespace py::cpp::Windows::Graphics::Holographic
{
    // ----- HolographicCamera class --------------------

    static PyObject* _new_HolographicCamera(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Holographic::HolographicCamera>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Holographic::HolographicCamera>::type_name);
        return nullptr;
    }

    static void _dealloc_HolographicCamera(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicCamera_SetFarPlaneDistance(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"SetFarPlaneDistance", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<double>(args, 0);

                {
                    auto _gil = release_gil();
                    self->obj.SetFarPlaneDistance(param0);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_SetNearPlaneDistance(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"SetNearPlaneDistance", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<double>(args, 0);

                {
                    auto _gil = release_gil();
                    self->obj.SetNearPlaneDistance(param0);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_ViewportScaleFactor(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"ViewportScaleFactor");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.ViewportScaleFactor();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicCamera_put_ViewportScaleFactor(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"ViewportScaleFactor");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<double>(arg);

            {
                auto _gil = release_gil();
                self->obj.ViewportScaleFactor(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HolographicCamera_get_Id(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"Id");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Id();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_IsStereo(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"IsStereo");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.IsStereo();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_RenderTargetSize(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"RenderTargetSize");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.RenderTargetSize();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_Display(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"Display");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Display();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_LeftViewportParameters(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"LeftViewportParameters");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.LeftViewportParameters();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_RightViewportParameters(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"RightViewportParameters");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.RightViewportParameters();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_IsPrimaryLayerEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"IsPrimaryLayerEnabled");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.IsPrimaryLayerEnabled();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicCamera_put_IsPrimaryLayerEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"IsPrimaryLayerEnabled");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<bool>(arg);

            {
                auto _gil = release_gil();
                self->obj.IsPrimaryLayerEnabled(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HolographicCamera_get_MaxQuadLayerCount(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"MaxQuadLayerCount");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.MaxQuadLayerCount();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_QuadLayers(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"QuadLayers");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.QuadLayers();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_CanOverrideViewport(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"CanOverrideViewport");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.CanOverrideViewport();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_IsHardwareContentProtectionEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"IsHardwareContentProtectionEnabled");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.IsHardwareContentProtectionEnabled();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicCamera_put_IsHardwareContentProtectionEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"IsHardwareContentProtectionEnabled");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<bool>(arg);

            {
                auto _gil = release_gil();
                self->obj.IsHardwareContentProtectionEnabled(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HolographicCamera_get_IsHardwareContentProtectionSupported(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"IsHardwareContentProtectionSupported");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.IsHardwareContentProtectionSupported();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCamera_get_ViewConfiguration(py::wrapper::Windows::Graphics::Holographic::HolographicCamera* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCamera", L"ViewConfiguration");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.ViewConfiguration();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HolographicCamera(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicCamera>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicCamera(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicCamera>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicCamera[] = {
        { "set_far_plane_distance", reinterpret_cast<PyCFunction>(HolographicCamera_SetFarPlaneDistance), METH_VARARGS, nullptr },
        { "set_near_plane_distance", reinterpret_cast<PyCFunction>(HolographicCamera_SetNearPlaneDistance), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_HolographicCamera, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicCamera), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicCamera[] = {
        { "viewport_scale_factor", reinterpret_cast<getter>(HolographicCamera_get_ViewportScaleFactor), reinterpret_cast<setter>(HolographicCamera_put_ViewportScaleFactor), nullptr, nullptr },
        { "id", reinterpret_cast<getter>(HolographicCamera_get_Id), nullptr, nullptr, nullptr },
        { "is_stereo", reinterpret_cast<getter>(HolographicCamera_get_IsStereo), nullptr, nullptr, nullptr },
        { "render_target_size", reinterpret_cast<getter>(HolographicCamera_get_RenderTargetSize), nullptr, nullptr, nullptr },
        { "display", reinterpret_cast<getter>(HolographicCamera_get_Display), nullptr, nullptr, nullptr },
        { "left_viewport_parameters", reinterpret_cast<getter>(HolographicCamera_get_LeftViewportParameters), nullptr, nullptr, nullptr },
        { "right_viewport_parameters", reinterpret_cast<getter>(HolographicCamera_get_RightViewportParameters), nullptr, nullptr, nullptr },
        { "is_primary_layer_enabled", reinterpret_cast<getter>(HolographicCamera_get_IsPrimaryLayerEnabled), reinterpret_cast<setter>(HolographicCamera_put_IsPrimaryLayerEnabled), nullptr, nullptr },
        { "max_quad_layer_count", reinterpret_cast<getter>(HolographicCamera_get_MaxQuadLayerCount), nullptr, nullptr, nullptr },
        { "quad_layers", reinterpret_cast<getter>(HolographicCamera_get_QuadLayers), nullptr, nullptr, nullptr },
        { "can_override_viewport", reinterpret_cast<getter>(HolographicCamera_get_CanOverrideViewport), nullptr, nullptr, nullptr },
        { "is_hardware_content_protection_enabled", reinterpret_cast<getter>(HolographicCamera_get_IsHardwareContentProtectionEnabled), reinterpret_cast<setter>(HolographicCamera_put_IsHardwareContentProtectionEnabled), nullptr, nullptr },
        { "is_hardware_content_protection_supported", reinterpret_cast<getter>(HolographicCamera_get_IsHardwareContentProtectionSupported), nullptr, nullptr, nullptr },
        { "view_configuration", reinterpret_cast<getter>(HolographicCamera_get_ViewConfiguration), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_HolographicCamera[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicCamera) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicCamera) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicCamera) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicCamera) },
        { }};

    static PyType_Spec type_spec_HolographicCamera = {
        "winrt._winrt_windows_graphics_holographic.HolographicCamera",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicCamera),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicCamera};

    // ----- HolographicCameraPose class --------------------

    static PyObject* _new_HolographicCameraPose(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Holographic::HolographicCameraPose>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Holographic::HolographicCameraPose>::type_name);
        return nullptr;
    }

    static void _dealloc_HolographicCameraPose(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicCameraPose_OverrideProjectionTransform(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicCameraPose", L"OverrideProjectionTransform", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicStereoTransform>(args, 0);

                {
                    auto _gil = release_gil();
                    self->obj.OverrideProjectionTransform(param0);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_OverrideViewTransform(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicCameraPose", L"OverrideViewTransform", 2);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(2);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicStereoTransform>(args, 1);

                {
                    auto _gil = release_gil();
                    self->obj.OverrideViewTransform(param0, param1);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_OverrideViewport(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicCameraPose", L"OverrideViewport", 2);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(2);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 1);

                {
                    auto _gil = release_gil();
                    self->obj.OverrideViewport(param0, param1);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_TryGetCullingFrustum(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicCameraPose", L"TryGetCullingFrustum", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.TryGetCullingFrustum(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_TryGetViewTransform(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicCameraPose", L"TryGetViewTransform", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.TryGetViewTransform(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_TryGetVisibleFrustum(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicCameraPose", L"TryGetVisibleFrustum", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.TryGetVisibleFrustum(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_get_FarPlaneDistance(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCameraPose", L"FarPlaneDistance");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.FarPlaneDistance();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_get_HolographicCamera(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCameraPose", L"HolographicCamera");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.HolographicCamera();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_get_NearPlaneDistance(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCameraPose", L"NearPlaneDistance");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.NearPlaneDistance();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_get_ProjectionTransform(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCameraPose", L"ProjectionTransform");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.ProjectionTransform();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCameraPose_get_Viewport(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCameraPose", L"Viewport");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Viewport();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HolographicCameraPose(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicCameraPose>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicCameraPose(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicCameraPose>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicCameraPose[] = {
        { "override_projection_transform", reinterpret_cast<PyCFunction>(HolographicCameraPose_OverrideProjectionTransform), METH_VARARGS, nullptr },
        { "override_view_transform", reinterpret_cast<PyCFunction>(HolographicCameraPose_OverrideViewTransform), METH_VARARGS, nullptr },
        { "override_viewport", reinterpret_cast<PyCFunction>(HolographicCameraPose_OverrideViewport), METH_VARARGS, nullptr },
        { "try_get_culling_frustum", reinterpret_cast<PyCFunction>(HolographicCameraPose_TryGetCullingFrustum), METH_VARARGS, nullptr },
        { "try_get_view_transform", reinterpret_cast<PyCFunction>(HolographicCameraPose_TryGetViewTransform), METH_VARARGS, nullptr },
        { "try_get_visible_frustum", reinterpret_cast<PyCFunction>(HolographicCameraPose_TryGetVisibleFrustum), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_HolographicCameraPose, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicCameraPose), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicCameraPose[] = {
        { "far_plane_distance", reinterpret_cast<getter>(HolographicCameraPose_get_FarPlaneDistance), nullptr, nullptr, nullptr },
        { "holographic_camera", reinterpret_cast<getter>(HolographicCameraPose_get_HolographicCamera), nullptr, nullptr, nullptr },
        { "near_plane_distance", reinterpret_cast<getter>(HolographicCameraPose_get_NearPlaneDistance), nullptr, nullptr, nullptr },
        { "projection_transform", reinterpret_cast<getter>(HolographicCameraPose_get_ProjectionTransform), nullptr, nullptr, nullptr },
        { "viewport", reinterpret_cast<getter>(HolographicCameraPose_get_Viewport), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_HolographicCameraPose[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicCameraPose) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicCameraPose) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicCameraPose) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicCameraPose) },
        { }};

    static PyType_Spec type_spec_HolographicCameraPose = {
        "winrt._winrt_windows_graphics_holographic.HolographicCameraPose",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicCameraPose),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicCameraPose};

    // ----- HolographicCameraRenderingParameters class --------------------

    static PyObject* _new_HolographicCameraRenderingParameters(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Holographic::HolographicCameraRenderingParameters>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Holographic::HolographicCameraRenderingParameters>::type_name);
        return nullptr;
    }

    static void _dealloc_HolographicCameraRenderingParameters(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicCameraRenderingParameters_CommitDirect3D11DepthBuffer(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicCameraRenderingParameters", L"CommitDirect3D11DepthBuffer", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>(args, 0);

                {
                    auto _gil = release_gil();
                    self->obj.CommitDirect3D11DepthBuffer(param0);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraRenderingParameters_SetFocusPoint(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicCameraRenderingParameters", L"SetFocusPoint", 2);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(2);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);

                {
                    auto _gil = release_gil();
                    self->obj.SetFocusPoint(param0, param1);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraRenderingParameters_SetFocusPointWithNormal(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicCameraRenderingParameters", L"SetFocusPoint", 3);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(3);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 2);

                {
                    auto _gil = release_gil();
                    self->obj.SetFocusPoint(param0, param1, param2);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraRenderingParameters_SetFocusPointWithNormalLinearVelocity(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicCameraRenderingParameters", L"SetFocusPoint", 4);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(4);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 3);

                {
                    auto _gil = release_gil();
                    self->obj.SetFocusPoint(param0, param1, param2, param3);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicCameraRenderingParameters_get_Direct3D11BackBuffer(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCameraRenderingParameters", L"Direct3D11BackBuffer");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Direct3D11BackBuffer();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCameraRenderingParameters_get_Direct3D11Device(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCameraRenderingParameters", L"Direct3D11Device");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Direct3D11Device();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCameraRenderingParameters_get_ReprojectionMode(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCameraRenderingParameters", L"ReprojectionMode");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.ReprojectionMode();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicCameraRenderingParameters_put_ReprojectionMode(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCameraRenderingParameters", L"ReprojectionMode");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicReprojectionMode>(arg);

            {
                auto _gil = release_gil();
                self->obj.ReprojectionMode(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HolographicCameraRenderingParameters_get_IsContentProtectionEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCameraRenderingParameters", L"IsContentProtectionEnabled");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.IsContentProtectionEnabled();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicCameraRenderingParameters_put_IsContentProtectionEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCameraRenderingParameters", L"IsContentProtectionEnabled");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<bool>(arg);

            {
                auto _gil = release_gil();
                self->obj.IsContentProtectionEnabled(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HolographicCameraRenderingParameters_get_DepthReprojectionMethod(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCameraRenderingParameters", L"DepthReprojectionMethod");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.DepthReprojectionMethod();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicCameraRenderingParameters_put_DepthReprojectionMethod(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCameraRenderingParameters", L"DepthReprojectionMethod");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicDepthReprojectionMethod>(arg);

            {
                auto _gil = release_gil();
                self->obj.DepthReprojectionMethod(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _assign_array_HolographicCameraRenderingParameters(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicCameraRenderingParameters>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicCameraRenderingParameters(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicCameraRenderingParameters>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicCameraRenderingParameters[] = {
        { "commit_direct3d11_depth_buffer", reinterpret_cast<PyCFunction>(HolographicCameraRenderingParameters_CommitDirect3D11DepthBuffer), METH_VARARGS, nullptr },
        { "set_focus_point", reinterpret_cast<PyCFunction>(HolographicCameraRenderingParameters_SetFocusPoint), METH_VARARGS, nullptr },
        { "set_focus_point_with_normal", reinterpret_cast<PyCFunction>(HolographicCameraRenderingParameters_SetFocusPointWithNormal), METH_VARARGS, nullptr },
        { "set_focus_point_with_normal_linear_velocity", reinterpret_cast<PyCFunction>(HolographicCameraRenderingParameters_SetFocusPointWithNormalLinearVelocity), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_HolographicCameraRenderingParameters, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicCameraRenderingParameters), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicCameraRenderingParameters[] = {
        { "direct3d11_back_buffer", reinterpret_cast<getter>(HolographicCameraRenderingParameters_get_Direct3D11BackBuffer), nullptr, nullptr, nullptr },
        { "direct3d11_device", reinterpret_cast<getter>(HolographicCameraRenderingParameters_get_Direct3D11Device), nullptr, nullptr, nullptr },
        { "reprojection_mode", reinterpret_cast<getter>(HolographicCameraRenderingParameters_get_ReprojectionMode), reinterpret_cast<setter>(HolographicCameraRenderingParameters_put_ReprojectionMode), nullptr, nullptr },
        { "is_content_protection_enabled", reinterpret_cast<getter>(HolographicCameraRenderingParameters_get_IsContentProtectionEnabled), reinterpret_cast<setter>(HolographicCameraRenderingParameters_put_IsContentProtectionEnabled), nullptr, nullptr },
        { "depth_reprojection_method", reinterpret_cast<getter>(HolographicCameraRenderingParameters_get_DepthReprojectionMethod), reinterpret_cast<setter>(HolographicCameraRenderingParameters_put_DepthReprojectionMethod), nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_HolographicCameraRenderingParameters[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicCameraRenderingParameters) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicCameraRenderingParameters) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicCameraRenderingParameters) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicCameraRenderingParameters) },
        { }};

    static PyType_Spec type_spec_HolographicCameraRenderingParameters = {
        "winrt._winrt_windows_graphics_holographic.HolographicCameraRenderingParameters",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicCameraRenderingParameters),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicCameraRenderingParameters};

    // ----- HolographicCameraViewportParameters class --------------------

    static PyObject* _new_HolographicCameraViewportParameters(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Holographic::HolographicCameraViewportParameters>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Holographic::HolographicCameraViewportParameters>::type_name);
        return nullptr;
    }

    static void _dealloc_HolographicCameraViewportParameters(py::wrapper::Windows::Graphics::Holographic::HolographicCameraViewportParameters* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicCameraViewportParameters_get_HiddenAreaMesh(py::wrapper::Windows::Graphics::Holographic::HolographicCameraViewportParameters* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCameraViewportParameters", L"HiddenAreaMesh");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.HiddenAreaMesh();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicCameraViewportParameters_get_VisibleAreaMesh(py::wrapper::Windows::Graphics::Holographic::HolographicCameraViewportParameters* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicCameraViewportParameters", L"VisibleAreaMesh");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.VisibleAreaMesh();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HolographicCameraViewportParameters(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicCameraViewportParameters>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicCameraViewportParameters(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicCameraViewportParameters>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicCameraViewportParameters[] = {
        { "_assign_array_", _assign_array_HolographicCameraViewportParameters, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicCameraViewportParameters), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicCameraViewportParameters[] = {
        { "hidden_area_mesh", reinterpret_cast<getter>(HolographicCameraViewportParameters_get_HiddenAreaMesh), nullptr, nullptr, nullptr },
        { "visible_area_mesh", reinterpret_cast<getter>(HolographicCameraViewportParameters_get_VisibleAreaMesh), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_HolographicCameraViewportParameters[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicCameraViewportParameters) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicCameraViewportParameters) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicCameraViewportParameters) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicCameraViewportParameters) },
        { }};

    static PyType_Spec type_spec_HolographicCameraViewportParameters = {
        "winrt._winrt_windows_graphics_holographic.HolographicCameraViewportParameters",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicCameraViewportParameters),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicCameraViewportParameters};

    // ----- HolographicDisplay class --------------------

    static PyObject* _new_HolographicDisplay(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Holographic::HolographicDisplay>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Holographic::HolographicDisplay>::type_name);
        return nullptr;
    }

    static void _dealloc_HolographicDisplay(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicDisplay_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicDisplay", L"GetDefault", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Windows::Graphics::Holographic::HolographicDisplay::GetDefault();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicDisplay_TryGetViewConfiguration(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicDisplay", L"TryGetViewConfiguration", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicViewConfigurationKind>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.TryGetViewConfiguration(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicDisplay_get_AdapterId(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicDisplay", L"AdapterId");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.AdapterId();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicDisplay_get_DisplayName(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicDisplay", L"DisplayName");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.DisplayName();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicDisplay_get_IsOpaque(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicDisplay", L"IsOpaque");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.IsOpaque();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicDisplay_get_IsStereo(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicDisplay", L"IsStereo");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.IsStereo();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicDisplay_get_MaxViewportSize(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicDisplay", L"MaxViewportSize");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.MaxViewportSize();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicDisplay_get_SpatialLocator(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicDisplay", L"SpatialLocator");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SpatialLocator();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicDisplay_get_RefreshRate(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicDisplay", L"RefreshRate");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.RefreshRate();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HolographicDisplay(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicDisplay>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicDisplay(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicDisplay>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicDisplay[] = {
        { "try_get_view_configuration", reinterpret_cast<PyCFunction>(HolographicDisplay_TryGetViewConfiguration), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_HolographicDisplay, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicDisplay), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicDisplay[] = {
        { "adapter_id", reinterpret_cast<getter>(HolographicDisplay_get_AdapterId), nullptr, nullptr, nullptr },
        { "display_name", reinterpret_cast<getter>(HolographicDisplay_get_DisplayName), nullptr, nullptr, nullptr },
        { "is_opaque", reinterpret_cast<getter>(HolographicDisplay_get_IsOpaque), nullptr, nullptr, nullptr },
        { "is_stereo", reinterpret_cast<getter>(HolographicDisplay_get_IsStereo), nullptr, nullptr, nullptr },
        { "max_viewport_size", reinterpret_cast<getter>(HolographicDisplay_get_MaxViewportSize), nullptr, nullptr, nullptr },
        { "spatial_locator", reinterpret_cast<getter>(HolographicDisplay_get_SpatialLocator), nullptr, nullptr, nullptr },
        { "refresh_rate", reinterpret_cast<getter>(HolographicDisplay_get_RefreshRate), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_HolographicDisplay[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicDisplay) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicDisplay) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicDisplay) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicDisplay) },
        { }};

    static PyType_Spec type_spec_HolographicDisplay = {
        "winrt._winrt_windows_graphics_holographic.HolographicDisplay",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicDisplay),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicDisplay};

    static PyGetSetDef getset_HolographicDisplay_Static[] = {
        { }};

    static PyMethodDef methods_HolographicDisplay_Static[] = {
        { "get_default", reinterpret_cast<PyCFunction>(HolographicDisplay_GetDefault), METH_VARARGS, nullptr },
        { }};

    static PyType_Slot type_slots_HolographicDisplay_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_HolographicDisplay_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_HolographicDisplay_Static) },
        { }
    };

    static PyType_Spec type_spec_HolographicDisplay_Static = {
        "winrt._winrt_windows_graphics_holographic.HolographicDisplay_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_HolographicDisplay_Static};

    // ----- HolographicFrame class --------------------

    static PyObject* _new_HolographicFrame(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Holographic::HolographicFrame>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Holographic::HolographicFrame>::type_name);
        return nullptr;
    }

    static void _dealloc_HolographicFrame(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicFrame_GetQuadLayerUpdateParameters(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicFrame", L"GetQuadLayerUpdateParameters", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicQuadLayer>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.GetQuadLayerUpdateParameters(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_GetRenderingParameters(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicFrame", L"GetRenderingParameters", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicCameraPose>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.GetRenderingParameters(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_PresentUsingCurrentPrediction(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicFrame", L"PresentUsingCurrentPrediction", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.PresentUsingCurrentPrediction();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_PresentUsingCurrentPredictionWithBehavior(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicFrame", L"PresentUsingCurrentPrediction", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicFramePresentWaitBehavior>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.PresentUsingCurrentPrediction(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_UpdateCurrentPrediction(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicFrame", L"UpdateCurrentPrediction", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                {
                    auto _gil = release_gil();
                    self->obj.UpdateCurrentPrediction();
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_WaitForFrameToFinish(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicFrame", L"WaitForFrameToFinish", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                {
                    auto _gil = release_gil();
                    self->obj.WaitForFrameToFinish();
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_get_AddedCameras(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFrame", L"AddedCameras");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.AddedCameras();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_get_CurrentPrediction(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFrame", L"CurrentPrediction");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.CurrentPrediction();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_get_Duration(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFrame", L"Duration");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Duration();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_get_RemovedCameras(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFrame", L"RemovedCameras");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.RemovedCameras();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrame_get_Id(py::wrapper::Windows::Graphics::Holographic::HolographicFrame* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFrame", L"Id");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Id();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HolographicFrame(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicFrame>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicFrame(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicFrame>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicFrame[] = {
        { "get_quad_layer_update_parameters", reinterpret_cast<PyCFunction>(HolographicFrame_GetQuadLayerUpdateParameters), METH_VARARGS, nullptr },
        { "get_rendering_parameters", reinterpret_cast<PyCFunction>(HolographicFrame_GetRenderingParameters), METH_VARARGS, nullptr },
        { "present_using_current_prediction", reinterpret_cast<PyCFunction>(HolographicFrame_PresentUsingCurrentPrediction), METH_VARARGS, nullptr },
        { "present_using_current_prediction_with_behavior", reinterpret_cast<PyCFunction>(HolographicFrame_PresentUsingCurrentPredictionWithBehavior), METH_VARARGS, nullptr },
        { "update_current_prediction", reinterpret_cast<PyCFunction>(HolographicFrame_UpdateCurrentPrediction), METH_VARARGS, nullptr },
        { "wait_for_frame_to_finish", reinterpret_cast<PyCFunction>(HolographicFrame_WaitForFrameToFinish), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_HolographicFrame, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicFrame), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicFrame[] = {
        { "added_cameras", reinterpret_cast<getter>(HolographicFrame_get_AddedCameras), nullptr, nullptr, nullptr },
        { "current_prediction", reinterpret_cast<getter>(HolographicFrame_get_CurrentPrediction), nullptr, nullptr, nullptr },
        { "duration", reinterpret_cast<getter>(HolographicFrame_get_Duration), nullptr, nullptr, nullptr },
        { "removed_cameras", reinterpret_cast<getter>(HolographicFrame_get_RemovedCameras), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(HolographicFrame_get_Id), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_HolographicFrame[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicFrame) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicFrame) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicFrame) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicFrame) },
        { }};

    static PyType_Spec type_spec_HolographicFrame = {
        "winrt._winrt_windows_graphics_holographic.HolographicFrame",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicFrame),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicFrame};

    // ----- HolographicFramePrediction class --------------------

    static PyObject* _new_HolographicFramePrediction(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Holographic::HolographicFramePrediction>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Holographic::HolographicFramePrediction>::type_name);
        return nullptr;
    }

    static void _dealloc_HolographicFramePrediction(py::wrapper::Windows::Graphics::Holographic::HolographicFramePrediction* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicFramePrediction_get_CameraPoses(py::wrapper::Windows::Graphics::Holographic::HolographicFramePrediction* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFramePrediction", L"CameraPoses");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.CameraPoses();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFramePrediction_get_Timestamp(py::wrapper::Windows::Graphics::Holographic::HolographicFramePrediction* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFramePrediction", L"Timestamp");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Timestamp();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HolographicFramePrediction(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicFramePrediction>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicFramePrediction(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicFramePrediction>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicFramePrediction[] = {
        { "_assign_array_", _assign_array_HolographicFramePrediction, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicFramePrediction), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicFramePrediction[] = {
        { "camera_poses", reinterpret_cast<getter>(HolographicFramePrediction_get_CameraPoses), nullptr, nullptr, nullptr },
        { "timestamp", reinterpret_cast<getter>(HolographicFramePrediction_get_Timestamp), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_HolographicFramePrediction[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicFramePrediction) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicFramePrediction) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicFramePrediction) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicFramePrediction) },
        { }};

    static PyType_Spec type_spec_HolographicFramePrediction = {
        "winrt._winrt_windows_graphics_holographic.HolographicFramePrediction",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicFramePrediction),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicFramePrediction};

    // ----- HolographicFramePresentationMonitor class --------------------

    static PyObject* _new_HolographicFramePresentationMonitor(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Holographic::HolographicFramePresentationMonitor>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Holographic::HolographicFramePresentationMonitor>::type_name);
        return nullptr;
    }

    static void _dealloc_HolographicFramePresentationMonitor(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationMonitor* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicFramePresentationMonitor_Close(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationMonitor* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicFramePresentationMonitor", L"Close", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                {
                    auto _gil = release_gil();
                    self->obj.Close();
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicFramePresentationMonitor_ReadReports(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationMonitor* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicFramePresentationMonitor", L"ReadReports", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.ReadReports();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_HolographicFramePresentationMonitor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicFramePresentationMonitor>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicFramePresentationMonitor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicFramePresentationMonitor>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_HolographicFramePresentationMonitor(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationMonitor* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_HolographicFramePresentationMonitor(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationMonitor* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            {
                auto _gil = py::release_gil();
                self->obj.Close();
            }

            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicFramePresentationMonitor[] = {
        { "close", reinterpret_cast<PyCFunction>(HolographicFramePresentationMonitor_Close), METH_VARARGS, nullptr },
        { "read_reports", reinterpret_cast<PyCFunction>(HolographicFramePresentationMonitor_ReadReports), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_HolographicFramePresentationMonitor, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicFramePresentationMonitor), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_HolographicFramePresentationMonitor), METH_NOARGS, nullptr },
        { "__exit__", reinterpret_cast<PyCFunction>(_exit_HolographicFramePresentationMonitor), METH_VARARGS, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicFramePresentationMonitor[] = {
        { }};

    static PyType_Slot _type_slots_HolographicFramePresentationMonitor[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicFramePresentationMonitor) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicFramePresentationMonitor) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicFramePresentationMonitor) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicFramePresentationMonitor) },
        { }};

    static PyType_Spec type_spec_HolographicFramePresentationMonitor = {
        "winrt._winrt_windows_graphics_holographic.HolographicFramePresentationMonitor",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationMonitor),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicFramePresentationMonitor};

    // ----- HolographicFramePresentationReport class --------------------

    static PyObject* _new_HolographicFramePresentationReport(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Holographic::HolographicFramePresentationReport>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Holographic::HolographicFramePresentationReport>::type_name);
        return nullptr;
    }

    static void _dealloc_HolographicFramePresentationReport(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationReport* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicFramePresentationReport_get_AppGpuDuration(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationReport* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFramePresentationReport", L"AppGpuDuration");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.AppGpuDuration();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFramePresentationReport_get_AppGpuOverrun(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationReport* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFramePresentationReport", L"AppGpuOverrun");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.AppGpuOverrun();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFramePresentationReport_get_CompositorGpuDuration(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationReport* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFramePresentationReport", L"CompositorGpuDuration");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.CompositorGpuDuration();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFramePresentationReport_get_MissedPresentationOpportunityCount(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationReport* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFramePresentationReport", L"MissedPresentationOpportunityCount");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.MissedPresentationOpportunityCount();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFramePresentationReport_get_PresentationCount(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationReport* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFramePresentationReport", L"PresentationCount");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.PresentationCount();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HolographicFramePresentationReport(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicFramePresentationReport>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicFramePresentationReport(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicFramePresentationReport>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicFramePresentationReport[] = {
        { "_assign_array_", _assign_array_HolographicFramePresentationReport, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicFramePresentationReport), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicFramePresentationReport[] = {
        { "app_gpu_duration", reinterpret_cast<getter>(HolographicFramePresentationReport_get_AppGpuDuration), nullptr, nullptr, nullptr },
        { "app_gpu_overrun", reinterpret_cast<getter>(HolographicFramePresentationReport_get_AppGpuOverrun), nullptr, nullptr, nullptr },
        { "compositor_gpu_duration", reinterpret_cast<getter>(HolographicFramePresentationReport_get_CompositorGpuDuration), nullptr, nullptr, nullptr },
        { "missed_presentation_opportunity_count", reinterpret_cast<getter>(HolographicFramePresentationReport_get_MissedPresentationOpportunityCount), nullptr, nullptr, nullptr },
        { "presentation_count", reinterpret_cast<getter>(HolographicFramePresentationReport_get_PresentationCount), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_HolographicFramePresentationReport[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicFramePresentationReport) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicFramePresentationReport) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicFramePresentationReport) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicFramePresentationReport) },
        { }};

    static PyType_Spec type_spec_HolographicFramePresentationReport = {
        "winrt._winrt_windows_graphics_holographic.HolographicFramePresentationReport",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicFramePresentationReport),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicFramePresentationReport};

    // ----- HolographicFrameRenderingReport class --------------------

    static PyObject* _new_HolographicFrameRenderingReport(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Holographic::HolographicFrameRenderingReport>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Holographic::HolographicFrameRenderingReport>::type_name);
        return nullptr;
    }

    static void _dealloc_HolographicFrameRenderingReport(py::wrapper::Windows::Graphics::Holographic::HolographicFrameRenderingReport* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicFrameRenderingReport_get_FrameId(py::wrapper::Windows::Graphics::Holographic::HolographicFrameRenderingReport* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFrameRenderingReport", L"FrameId");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.FrameId();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrameRenderingReport_get_MissedLatchCount(py::wrapper::Windows::Graphics::Holographic::HolographicFrameRenderingReport* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFrameRenderingReport", L"MissedLatchCount");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.MissedLatchCount();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrameRenderingReport_get_SystemRelativeActualGpuFinishTime(py::wrapper::Windows::Graphics::Holographic::HolographicFrameRenderingReport* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFrameRenderingReport", L"SystemRelativeActualGpuFinishTime");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SystemRelativeActualGpuFinishTime();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrameRenderingReport_get_SystemRelativeFrameReadyTime(py::wrapper::Windows::Graphics::Holographic::HolographicFrameRenderingReport* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFrameRenderingReport", L"SystemRelativeFrameReadyTime");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SystemRelativeFrameReadyTime();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrameRenderingReport_get_SystemRelativeTargetLatchTime(py::wrapper::Windows::Graphics::Holographic::HolographicFrameRenderingReport* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFrameRenderingReport", L"SystemRelativeTargetLatchTime");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SystemRelativeTargetLatchTime();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HolographicFrameRenderingReport(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicFrameRenderingReport>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicFrameRenderingReport(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicFrameRenderingReport>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicFrameRenderingReport[] = {
        { "_assign_array_", _assign_array_HolographicFrameRenderingReport, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicFrameRenderingReport), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicFrameRenderingReport[] = {
        { "frame_id", reinterpret_cast<getter>(HolographicFrameRenderingReport_get_FrameId), nullptr, nullptr, nullptr },
        { "missed_latch_count", reinterpret_cast<getter>(HolographicFrameRenderingReport_get_MissedLatchCount), nullptr, nullptr, nullptr },
        { "system_relative_actual_gpu_finish_time", reinterpret_cast<getter>(HolographicFrameRenderingReport_get_SystemRelativeActualGpuFinishTime), nullptr, nullptr, nullptr },
        { "system_relative_frame_ready_time", reinterpret_cast<getter>(HolographicFrameRenderingReport_get_SystemRelativeFrameReadyTime), nullptr, nullptr, nullptr },
        { "system_relative_target_latch_time", reinterpret_cast<getter>(HolographicFrameRenderingReport_get_SystemRelativeTargetLatchTime), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_HolographicFrameRenderingReport[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicFrameRenderingReport) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicFrameRenderingReport) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicFrameRenderingReport) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicFrameRenderingReport) },
        { }};

    static PyType_Spec type_spec_HolographicFrameRenderingReport = {
        "winrt._winrt_windows_graphics_holographic.HolographicFrameRenderingReport",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicFrameRenderingReport),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicFrameRenderingReport};

    // ----- HolographicFrameScanoutMonitor class --------------------

    static PyObject* _new_HolographicFrameScanoutMonitor(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor>::type_name);
        return nullptr;
    }

    static void _dealloc_HolographicFrameScanoutMonitor(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicFrameScanoutMonitor_Close(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicFrameScanoutMonitor", L"Close", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                {
                    auto _gil = release_gil();
                    self->obj.Close();
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicFrameScanoutMonitor_ReadReports(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicFrameScanoutMonitor", L"ReadReports", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.ReadReports();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_HolographicFrameScanoutMonitor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicFrameScanoutMonitor(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_HolographicFrameScanoutMonitor(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_HolographicFrameScanoutMonitor(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            {
                auto _gil = py::release_gil();
                self->obj.Close();
            }

            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicFrameScanoutMonitor[] = {
        { "close", reinterpret_cast<PyCFunction>(HolographicFrameScanoutMonitor_Close), METH_VARARGS, nullptr },
        { "read_reports", reinterpret_cast<PyCFunction>(HolographicFrameScanoutMonitor_ReadReports), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_HolographicFrameScanoutMonitor, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicFrameScanoutMonitor), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_HolographicFrameScanoutMonitor), METH_NOARGS, nullptr },
        { "__exit__", reinterpret_cast<PyCFunction>(_exit_HolographicFrameScanoutMonitor), METH_VARARGS, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicFrameScanoutMonitor[] = {
        { }};

    static PyType_Slot _type_slots_HolographicFrameScanoutMonitor[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicFrameScanoutMonitor) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicFrameScanoutMonitor) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicFrameScanoutMonitor) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicFrameScanoutMonitor) },
        { }};

    static PyType_Spec type_spec_HolographicFrameScanoutMonitor = {
        "winrt._winrt_windows_graphics_holographic.HolographicFrameScanoutMonitor",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutMonitor),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicFrameScanoutMonitor};

    // ----- HolographicFrameScanoutReport class --------------------

    static PyObject* _new_HolographicFrameScanoutReport(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Holographic::HolographicFrameScanoutReport>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Holographic::HolographicFrameScanoutReport>::type_name);
        return nullptr;
    }

    static void _dealloc_HolographicFrameScanoutReport(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutReport* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicFrameScanoutReport_get_MissedScanoutCount(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutReport* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFrameScanoutReport", L"MissedScanoutCount");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.MissedScanoutCount();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrameScanoutReport_get_RenderingReport(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutReport* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFrameScanoutReport", L"RenderingReport");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.RenderingReport();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrameScanoutReport_get_SystemRelativeLatchTime(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutReport* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFrameScanoutReport", L"SystemRelativeLatchTime");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SystemRelativeLatchTime();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrameScanoutReport_get_SystemRelativePhotonTime(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutReport* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFrameScanoutReport", L"SystemRelativePhotonTime");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SystemRelativePhotonTime();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicFrameScanoutReport_get_SystemRelativeScanoutStartTime(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutReport* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicFrameScanoutReport", L"SystemRelativeScanoutStartTime");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SystemRelativeScanoutStartTime();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HolographicFrameScanoutReport(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicFrameScanoutReport>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicFrameScanoutReport(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicFrameScanoutReport>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicFrameScanoutReport[] = {
        { "_assign_array_", _assign_array_HolographicFrameScanoutReport, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicFrameScanoutReport), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicFrameScanoutReport[] = {
        { "missed_scanout_count", reinterpret_cast<getter>(HolographicFrameScanoutReport_get_MissedScanoutCount), nullptr, nullptr, nullptr },
        { "rendering_report", reinterpret_cast<getter>(HolographicFrameScanoutReport_get_RenderingReport), nullptr, nullptr, nullptr },
        { "system_relative_latch_time", reinterpret_cast<getter>(HolographicFrameScanoutReport_get_SystemRelativeLatchTime), nullptr, nullptr, nullptr },
        { "system_relative_photon_time", reinterpret_cast<getter>(HolographicFrameScanoutReport_get_SystemRelativePhotonTime), nullptr, nullptr, nullptr },
        { "system_relative_scanout_start_time", reinterpret_cast<getter>(HolographicFrameScanoutReport_get_SystemRelativeScanoutStartTime), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_HolographicFrameScanoutReport[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicFrameScanoutReport) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicFrameScanoutReport) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicFrameScanoutReport) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicFrameScanoutReport) },
        { }};

    static PyType_Spec type_spec_HolographicFrameScanoutReport = {
        "winrt._winrt_windows_graphics_holographic.HolographicFrameScanoutReport",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicFrameScanoutReport),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicFrameScanoutReport};

    // ----- HolographicQuadLayer class --------------------

    static PyObject* _new_HolographicQuadLayer(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Size>(args, 0);

                winrt::Windows::Graphics::Holographic::HolographicQuadLayer instance{param0};
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Size>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>(args, 1);

                winrt::Windows::Graphics::Holographic::HolographicQuadLayer instance{param0, param1};
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_HolographicQuadLayer(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayer* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicQuadLayer_Close(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayer* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicQuadLayer", L"Close", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                {
                    auto _gil = release_gil();
                    self->obj.Close();
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayer_get_PixelFormat(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayer* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicQuadLayer", L"PixelFormat");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.PixelFormat();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayer_get_Size(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayer* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicQuadLayer", L"Size");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Size();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HolographicQuadLayer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicQuadLayer>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicQuadLayer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicQuadLayer>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_HolographicQuadLayer(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayer* self, PyObject* /*unused*/) noexcept
    {
        return Py_NewRef(self);
    }

    static PyObject* _exit_HolographicQuadLayer(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayer* self, PyObject* /*unused*/) noexcept
    {
        try
        {
            {
                auto _gil = py::release_gil();
                self->obj.Close();
            }

            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicQuadLayer[] = {
        { "close", reinterpret_cast<PyCFunction>(HolographicQuadLayer_Close), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_HolographicQuadLayer, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicQuadLayer), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_HolographicQuadLayer), METH_NOARGS, nullptr },
        { "__exit__", reinterpret_cast<PyCFunction>(_exit_HolographicQuadLayer), METH_VARARGS, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicQuadLayer[] = {
        { "pixel_format", reinterpret_cast<getter>(HolographicQuadLayer_get_PixelFormat), nullptr, nullptr, nullptr },
        { "size", reinterpret_cast<getter>(HolographicQuadLayer_get_Size), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_HolographicQuadLayer[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicQuadLayer) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicQuadLayer) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicQuadLayer) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicQuadLayer) },
        { }};

    static PyType_Spec type_spec_HolographicQuadLayer = {
        "winrt._winrt_windows_graphics_holographic.HolographicQuadLayer",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayer),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicQuadLayer};

    // ----- HolographicQuadLayerUpdateParameters class --------------------

    static PyObject* _new_HolographicQuadLayerUpdateParameters(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters>::type_name);
        return nullptr;
    }

    static void _dealloc_HolographicQuadLayerUpdateParameters(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicQuadLayerUpdateParameters_AcquireBufferToUpdateContent(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicQuadLayerUpdateParameters", L"AcquireBufferToUpdateContent", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.AcquireBufferToUpdateContent();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayerUpdateParameters_AcquireBufferToUpdateContentWithHardwareProtection(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicQuadLayerUpdateParameters", L"AcquireBufferToUpdateContentWithHardwareProtection", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.AcquireBufferToUpdateContentWithHardwareProtection();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayerUpdateParameters_UpdateContentProtectionEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicQuadLayerUpdateParameters", L"UpdateContentProtectionEnabled", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<bool>(args, 0);

                {
                    auto _gil = release_gil();
                    self->obj.UpdateContentProtectionEnabled(param0);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayerUpdateParameters_UpdateExtents(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicQuadLayerUpdateParameters", L"UpdateExtents", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float2>(args, 0);

                {
                    auto _gil = release_gil();
                    self->obj.UpdateExtents(param0);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayerUpdateParameters_UpdateLocationWithDisplayRelativeMode(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicQuadLayerUpdateParameters", L"UpdateLocationWithDisplayRelativeMode", 2);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(2);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::quaternion>(args, 1);

                {
                    auto _gil = release_gil();
                    self->obj.UpdateLocationWithDisplayRelativeMode(param0, param1);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayerUpdateParameters_UpdateLocationWithStationaryMode(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicQuadLayerUpdateParameters", L"UpdateLocationWithStationaryMode", 3);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(3);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Numerics::quaternion>(args, 2);

                {
                    auto _gil = release_gil();
                    self->obj.UpdateLocationWithStationaryMode(param0, param1, param2);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayerUpdateParameters_UpdateViewport(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicQuadLayerUpdateParameters", L"UpdateViewport", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);

                {
                    auto _gil = release_gil();
                    self->obj.UpdateViewport(param0);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicQuadLayerUpdateParameters_get_CanAcquireWithHardwareProtection(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicQuadLayerUpdateParameters", L"CanAcquireWithHardwareProtection");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.CanAcquireWithHardwareProtection();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HolographicQuadLayerUpdateParameters(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicQuadLayerUpdateParameters(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicQuadLayerUpdateParameters[] = {
        { "acquire_buffer_to_update_content", reinterpret_cast<PyCFunction>(HolographicQuadLayerUpdateParameters_AcquireBufferToUpdateContent), METH_VARARGS, nullptr },
        { "acquire_buffer_to_update_content_with_hardware_protection", reinterpret_cast<PyCFunction>(HolographicQuadLayerUpdateParameters_AcquireBufferToUpdateContentWithHardwareProtection), METH_VARARGS, nullptr },
        { "update_content_protection_enabled", reinterpret_cast<PyCFunction>(HolographicQuadLayerUpdateParameters_UpdateContentProtectionEnabled), METH_VARARGS, nullptr },
        { "update_extents", reinterpret_cast<PyCFunction>(HolographicQuadLayerUpdateParameters_UpdateExtents), METH_VARARGS, nullptr },
        { "update_location_with_display_relative_mode", reinterpret_cast<PyCFunction>(HolographicQuadLayerUpdateParameters_UpdateLocationWithDisplayRelativeMode), METH_VARARGS, nullptr },
        { "update_location_with_stationary_mode", reinterpret_cast<PyCFunction>(HolographicQuadLayerUpdateParameters_UpdateLocationWithStationaryMode), METH_VARARGS, nullptr },
        { "update_viewport", reinterpret_cast<PyCFunction>(HolographicQuadLayerUpdateParameters_UpdateViewport), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_HolographicQuadLayerUpdateParameters, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicQuadLayerUpdateParameters), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicQuadLayerUpdateParameters[] = {
        { "can_acquire_with_hardware_protection", reinterpret_cast<getter>(HolographicQuadLayerUpdateParameters_get_CanAcquireWithHardwareProtection), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_HolographicQuadLayerUpdateParameters[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicQuadLayerUpdateParameters) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicQuadLayerUpdateParameters) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicQuadLayerUpdateParameters) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicQuadLayerUpdateParameters) },
        { }};

    static PyType_Spec type_spec_HolographicQuadLayerUpdateParameters = {
        "winrt._winrt_windows_graphics_holographic.HolographicQuadLayerUpdateParameters",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicQuadLayerUpdateParameters};

    // ----- HolographicSpace class --------------------

    static PyObject* _new_HolographicSpace(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Holographic::HolographicSpace>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Holographic::HolographicSpace>::type_name);
        return nullptr;
    }

    static void _dealloc_HolographicSpace(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicSpace_CreateForCoreWindow(PyObject* /*unused*/, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"CreateForCoreWindow", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::UI::Core::CoreWindow>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return winrt::Windows::Graphics::Holographic::HolographicSpace::CreateForCoreWindow(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_CreateFramePresentationMonitor(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"CreateFramePresentationMonitor", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.CreateFramePresentationMonitor(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_CreateFrameScanoutMonitor(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"CreateFrameScanoutMonitor", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.CreateFrameScanoutMonitor(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_CreateNextFrame(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"CreateNextFrame", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.CreateNextFrame();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_SetDirect3D11Device(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"SetDirect3D11Device", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>(args, 0);

                {
                    auto _gil = release_gil();
                    self->obj.SetDirect3D11Device(param0);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_WaitForNextFrameReady(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"WaitForNextFrameReady", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                {
                    auto _gil = release_gil();
                    self->obj.WaitForNextFrameReady();
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_WaitForNextFrameReadyWithHeadStart(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"WaitForNextFrameReadyWithHeadStart", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Foundation::TimeSpan>(args, 0);

                {
                    auto _gil = release_gil();
                    self->obj.WaitForNextFrameReadyWithHeadStart(param0);
                }

                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_get_PrimaryAdapterId(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"PrimaryAdapterId");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.PrimaryAdapterId();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_get_UserPresence(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"UserPresence");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.UserPresence();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_get_IsAvailable(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"IsAvailable");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return winrt::Windows::Graphics::Holographic::HolographicSpace::IsAvailable();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_get_IsSupported(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"IsSupported");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return winrt::Windows::Graphics::Holographic::HolographicSpace::IsSupported();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_get_IsConfigured(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"IsConfigured");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return winrt::Windows::Graphics::Holographic::HolographicSpace::IsConfigured();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_add_CameraAdded(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"CameraAdded");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Holographic::HolographicSpace, winrt::Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs>>(arg);

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.CameraAdded(param0);
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_remove_CameraAdded(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"CameraAdded");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::event_token>(arg);

            {
                auto _gil = release_gil();
                self->obj.CameraAdded(param0);
            }

            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_add_CameraRemoved(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"CameraRemoved");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Holographic::HolographicSpace, winrt::Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs>>(arg);

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.CameraRemoved(param0);
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_remove_CameraRemoved(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"CameraRemoved");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::event_token>(arg);

            {
                auto _gil = release_gil();
                self->obj.CameraRemoved(param0);
            }

            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_add_UserPresenceChanged(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"UserPresenceChanged");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Graphics::Holographic::HolographicSpace, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.UserPresenceChanged(param0);
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_remove_UserPresenceChanged(py::wrapper::Windows::Graphics::Holographic::HolographicSpace* self, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"UserPresenceChanged");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::event_token>(arg);

            {
                auto _gil = release_gil();
                self->obj.UserPresenceChanged(param0);
            }

            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_add_IsAvailableChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"IsAvailableChanged");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return winrt::Windows::Graphics::Holographic::HolographicSpace::IsAvailableChanged(param0);
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicSpace_remove_IsAvailableChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            static std::optional<bool> is_event_present{};

            if (!is_event_present.has_value())
            {
                is_event_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsEventPresent(L"Windows.Graphics.Holographic.HolographicSpace", L"IsAvailableChanged");
            }

            if (!is_event_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "event is not available in this version of Windows");
                return nullptr;
            }

            auto param0 = py::convert_to<winrt::event_token>(arg);

            {
                auto _gil = release_gil();
                winrt::Windows::Graphics::Holographic::HolographicSpace::IsAvailableChanged(param0);
            }

            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HolographicSpace(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicSpace>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicSpace(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicSpace>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicSpace[] = {
        { "create_frame_presentation_monitor", reinterpret_cast<PyCFunction>(HolographicSpace_CreateFramePresentationMonitor), METH_VARARGS, nullptr },
        { "create_frame_scanout_monitor", reinterpret_cast<PyCFunction>(HolographicSpace_CreateFrameScanoutMonitor), METH_VARARGS, nullptr },
        { "create_next_frame", reinterpret_cast<PyCFunction>(HolographicSpace_CreateNextFrame), METH_VARARGS, nullptr },
        { "set_direct3d11_device", reinterpret_cast<PyCFunction>(HolographicSpace_SetDirect3D11Device), METH_VARARGS, nullptr },
        { "wait_for_next_frame_ready", reinterpret_cast<PyCFunction>(HolographicSpace_WaitForNextFrameReady), METH_VARARGS, nullptr },
        { "wait_for_next_frame_ready_with_head_start", reinterpret_cast<PyCFunction>(HolographicSpace_WaitForNextFrameReadyWithHeadStart), METH_VARARGS, nullptr },
        { "add_camera_added", reinterpret_cast<PyCFunction>(HolographicSpace_add_CameraAdded), METH_O, nullptr },
        { "remove_camera_added", reinterpret_cast<PyCFunction>(HolographicSpace_remove_CameraAdded), METH_O, nullptr },
        { "add_camera_removed", reinterpret_cast<PyCFunction>(HolographicSpace_add_CameraRemoved), METH_O, nullptr },
        { "remove_camera_removed", reinterpret_cast<PyCFunction>(HolographicSpace_remove_CameraRemoved), METH_O, nullptr },
        { "add_user_presence_changed", reinterpret_cast<PyCFunction>(HolographicSpace_add_UserPresenceChanged), METH_O, nullptr },
        { "remove_user_presence_changed", reinterpret_cast<PyCFunction>(HolographicSpace_remove_UserPresenceChanged), METH_O, nullptr },
        { "_assign_array_", _assign_array_HolographicSpace, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicSpace), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicSpace[] = {
        { "primary_adapter_id", reinterpret_cast<getter>(HolographicSpace_get_PrimaryAdapterId), nullptr, nullptr, nullptr },
        { "user_presence", reinterpret_cast<getter>(HolographicSpace_get_UserPresence), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_HolographicSpace[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicSpace) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicSpace) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicSpace) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicSpace) },
        { }};

    static PyType_Spec type_spec_HolographicSpace = {
        "winrt._winrt_windows_graphics_holographic.HolographicSpace",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicSpace),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicSpace};

    static PyGetSetDef getset_HolographicSpace_Static[] = {
        { "is_available", reinterpret_cast<getter>(HolographicSpace_get_IsAvailable), nullptr, nullptr, nullptr },
        { "is_supported", reinterpret_cast<getter>(HolographicSpace_get_IsSupported), nullptr, nullptr, nullptr },
        { "is_configured", reinterpret_cast<getter>(HolographicSpace_get_IsConfigured), nullptr, nullptr, nullptr },
        { }};

    static PyMethodDef methods_HolographicSpace_Static[] = {
        { "create_for_core_window", reinterpret_cast<PyCFunction>(HolographicSpace_CreateForCoreWindow), METH_VARARGS, nullptr },
        { "add_is_available_changed", reinterpret_cast<PyCFunction>(HolographicSpace_add_IsAvailableChanged), METH_O, nullptr },
        { "remove_is_available_changed", reinterpret_cast<PyCFunction>(HolographicSpace_remove_IsAvailableChanged), METH_O, nullptr },
        { }};

    static PyType_Slot type_slots_HolographicSpace_Static[] = 
    {
        { Py_tp_base, reinterpret_cast<void*>(&PyType_Type) },
        { Py_tp_getset, reinterpret_cast<void*>(getset_HolographicSpace_Static) },
        { Py_tp_methods, reinterpret_cast<void*>(methods_HolographicSpace_Static) },
        { }
    };

    static PyType_Spec type_spec_HolographicSpace_Static = {
        "winrt._winrt_windows_graphics_holographic.HolographicSpace_Static",
        static_cast<int>(PyType_Type.tp_basicsize),
        static_cast<int>(PyType_Type.tp_itemsize),
        Py_TPFLAGS_DEFAULT,
        type_slots_HolographicSpace_Static};

    // ----- HolographicSpaceCameraAddedEventArgs class --------------------

    static PyObject* _new_HolographicSpaceCameraAddedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_HolographicSpaceCameraAddedEventArgs(py::wrapper::Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicSpaceCameraAddedEventArgs_GetDeferral(py::wrapper::Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicSpaceCameraAddedEventArgs", L"GetDeferral", 0);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(0);
                    return nullptr;
                }

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.GetDeferral();
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicSpaceCameraAddedEventArgs_get_Camera(py::wrapper::Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicSpaceCameraAddedEventArgs", L"Camera");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Camera();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HolographicSpaceCameraAddedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicSpaceCameraAddedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicSpaceCameraAddedEventArgs[] = {
        { "get_deferral", reinterpret_cast<PyCFunction>(HolographicSpaceCameraAddedEventArgs_GetDeferral), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_HolographicSpaceCameraAddedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicSpaceCameraAddedEventArgs), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicSpaceCameraAddedEventArgs[] = {
        { "camera", reinterpret_cast<getter>(HolographicSpaceCameraAddedEventArgs_get_Camera), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_HolographicSpaceCameraAddedEventArgs[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicSpaceCameraAddedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicSpaceCameraAddedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicSpaceCameraAddedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicSpaceCameraAddedEventArgs) },
        { }};

    static PyType_Spec type_spec_HolographicSpaceCameraAddedEventArgs = {
        "winrt._winrt_windows_graphics_holographic.HolographicSpaceCameraAddedEventArgs",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicSpaceCameraAddedEventArgs};

    // ----- HolographicSpaceCameraRemovedEventArgs class --------------------

    static PyObject* _new_HolographicSpaceCameraRemovedEventArgs(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs>::type_name);
        return nullptr;
    }

    static void _dealloc_HolographicSpaceCameraRemovedEventArgs(py::wrapper::Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicSpaceCameraRemovedEventArgs_get_Camera(py::wrapper::Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicSpaceCameraRemovedEventArgs", L"Camera");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Camera();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HolographicSpaceCameraRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicSpaceCameraRemovedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicSpaceCameraRemovedEventArgs[] = {
        { "_assign_array_", _assign_array_HolographicSpaceCameraRemovedEventArgs, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicSpaceCameraRemovedEventArgs), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicSpaceCameraRemovedEventArgs[] = {
        { "camera", reinterpret_cast<getter>(HolographicSpaceCameraRemovedEventArgs_get_Camera), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_HolographicSpaceCameraRemovedEventArgs[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicSpaceCameraRemovedEventArgs) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicSpaceCameraRemovedEventArgs) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicSpaceCameraRemovedEventArgs) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicSpaceCameraRemovedEventArgs) },
        { }};

    static PyType_Spec type_spec_HolographicSpaceCameraRemovedEventArgs = {
        "winrt._winrt_windows_graphics_holographic.HolographicSpaceCameraRemovedEventArgs",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicSpaceCameraRemovedEventArgs};

    // ----- HolographicViewConfiguration class --------------------

    static PyObject* _new_HolographicViewConfiguration(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Holographic::HolographicViewConfiguration>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Holographic::HolographicViewConfiguration>::type_name);
        return nullptr;
    }

    static void _dealloc_HolographicViewConfiguration(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicViewConfiguration_RequestRenderTargetSize(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                static std::optional<bool> is_overload_present{};

                if (!is_overload_present.has_value())
                {
                    is_overload_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Holographic.HolographicViewConfiguration", L"RequestRenderTargetSize", 1);
                }

                if (!is_overload_present.value())
                {
                    py::set_arg_count_version_error(1);
                    return nullptr;
                }

                auto param0 = py::convert_to<winrt::Windows::Foundation::Size>(args, 0);

                return py::convert([&]()
                {
                    auto _gil = release_gil();
                    return self->obj.RequestRenderTargetSize(param0);
                }());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicViewConfiguration_get_PixelFormat(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicViewConfiguration", L"PixelFormat");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.PixelFormat();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicViewConfiguration_put_PixelFormat(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicViewConfiguration", L"PixelFormat");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>(arg);

            {
                auto _gil = release_gil();
                self->obj.PixelFormat(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HolographicViewConfiguration_get_IsEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicViewConfiguration", L"IsEnabled");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.IsEnabled();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HolographicViewConfiguration_put_IsEnabled(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!arg)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicViewConfiguration", L"IsEnabled");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return -1;
            }

            auto param0 = py::convert_to<bool>(arg);

            {
                auto _gil = release_gil();
                self->obj.IsEnabled(param0);
            }

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HolographicViewConfiguration_get_Display(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicViewConfiguration", L"Display");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Display();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicViewConfiguration_get_IsStereo(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicViewConfiguration", L"IsStereo");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.IsStereo();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicViewConfiguration_get_Kind(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicViewConfiguration", L"Kind");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.Kind();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicViewConfiguration_get_NativeRenderTargetSize(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicViewConfiguration", L"NativeRenderTargetSize");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.NativeRenderTargetSize();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicViewConfiguration_get_RefreshRate(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicViewConfiguration", L"RefreshRate");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.RefreshRate();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicViewConfiguration_get_RenderTargetSize(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicViewConfiguration", L"RenderTargetSize");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.RenderTargetSize();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicViewConfiguration_get_SupportedPixelFormats(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicViewConfiguration", L"SupportedPixelFormats");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SupportedPixelFormats();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicViewConfiguration_get_SupportedDepthReprojectionMethods(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration* self, void* /*unused*/) noexcept
    {
        try
        {
            static std::optional<bool> is_property_present{};

            if (!is_property_present.has_value())
            {
                is_property_present = winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Holographic.HolographicViewConfiguration", L"SupportedDepthReprojectionMethods");
            }

            if (!is_property_present.value())
            {
                PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
                return nullptr;
            }

            return py::convert([&]()
            {
                auto _gil = release_gil();
                return self->obj.SupportedDepthReprojectionMethods();
            }());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_HolographicViewConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicViewConfiguration>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_HolographicViewConfiguration(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Holographic::HolographicViewConfiguration>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicViewConfiguration[] = {
        { "request_render_target_size", reinterpret_cast<PyCFunction>(HolographicViewConfiguration_RequestRenderTargetSize), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_HolographicViewConfiguration, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicViewConfiguration), METH_O | METH_STATIC, nullptr },
        { }};

    static PyGetSetDef _getset_HolographicViewConfiguration[] = {
        { "pixel_format", reinterpret_cast<getter>(HolographicViewConfiguration_get_PixelFormat), reinterpret_cast<setter>(HolographicViewConfiguration_put_PixelFormat), nullptr, nullptr },
        { "is_enabled", reinterpret_cast<getter>(HolographicViewConfiguration_get_IsEnabled), reinterpret_cast<setter>(HolographicViewConfiguration_put_IsEnabled), nullptr, nullptr },
        { "display", reinterpret_cast<getter>(HolographicViewConfiguration_get_Display), nullptr, nullptr, nullptr },
        { "is_stereo", reinterpret_cast<getter>(HolographicViewConfiguration_get_IsStereo), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(HolographicViewConfiguration_get_Kind), nullptr, nullptr, nullptr },
        { "native_render_target_size", reinterpret_cast<getter>(HolographicViewConfiguration_get_NativeRenderTargetSize), nullptr, nullptr, nullptr },
        { "refresh_rate", reinterpret_cast<getter>(HolographicViewConfiguration_get_RefreshRate), nullptr, nullptr, nullptr },
        { "render_target_size", reinterpret_cast<getter>(HolographicViewConfiguration_get_RenderTargetSize), nullptr, nullptr, nullptr },
        { "supported_pixel_formats", reinterpret_cast<getter>(HolographicViewConfiguration_get_SupportedPixelFormats), nullptr, nullptr, nullptr },
        { "supported_depth_reprojection_methods", reinterpret_cast<getter>(HolographicViewConfiguration_get_SupportedDepthReprojectionMethods), nullptr, nullptr, nullptr },
        { }};

    static PyType_Slot _type_slots_HolographicViewConfiguration[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicViewConfiguration) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicViewConfiguration) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicViewConfiguration) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicViewConfiguration) },
        { }};

    static PyType_Spec type_spec_HolographicViewConfiguration = {
        "winrt._winrt_windows_graphics_holographic.HolographicViewConfiguration",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicViewConfiguration),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicViewConfiguration};

    // ----- HolographicAdapterId struct --------------------

    PyObject* _new_HolographicAdapterId(PyTypeObject* subclass, PyObject* args, PyObject* kwds) noexcept
    {
        pyobj_handle self_obj{(subclass->tp_alloc(subclass, 0))};
        if (!self_obj)
        {
            return nullptr;
        }

        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Graphics::Holographic::HolographicAdapterId>*>(self_obj.get());
        std::construct_at(&self->obj);

        auto tuple_size = PyTuple_Size(args);
        if ((tuple_size == 0) && (!kwds))
        {
            return self_obj.detach();
        }

        uint32_t _LowPart{};
        int32_t _HighPart{};

        static const char* kwlist[] = {"low_part", "high_part", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "|Ii", const_cast<char**>(kwlist), &_LowPart, &_HighPart))
        {
            return nullptr;
        }

        try
        {
            self->obj.LowPart = _LowPart;
            self->obj.HighPart = _HighPart;

            return self_obj.detach();
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_HolographicAdapterId(py::wrapper::Windows::Graphics::Holographic::HolographicAdapterId* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_HolographicAdapterId(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicAdapterId>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_HolographicAdapterId[] = {
        { "_assign_array_", _assign_array_HolographicAdapterId, METH_O | METH_STATIC, nullptr },
        { }};

    static PyObject* HolographicAdapterId_get_LowPart(py::wrapper::Windows::Graphics::Holographic::HolographicAdapterId* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LowPart);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicAdapterId_get_HighPart(py::wrapper::Windows::Graphics::Holographic::HolographicAdapterId* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HighPart);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyGetSetDef _getset_HolographicAdapterId[] = {
        { "low_part", reinterpret_cast<getter>(HolographicAdapterId_get_LowPart), nullptr, nullptr, nullptr },
        { "high_part", reinterpret_cast<getter>(HolographicAdapterId_get_HighPart), nullptr, nullptr, nullptr },
        { }};

    static PyObject* _richcompare_HolographicAdapterId(py::wrapper::Windows::Graphics::Holographic::HolographicAdapterId* self, PyObject* other, int op) noexcept
    {
        try
        {
            auto _other = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicAdapterId>(other);

            if (op == Py_EQ)
            {
                if (self->obj == _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            if (op == Py_NE)
            {
                if (self->obj != _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            Py_RETURN_NOTIMPLEMENTED;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _repr_HolographicAdapterId(PyObject* self) noexcept
    {
        py::pyobj_handle LowPart{PyObject_GetAttrString(self, "low_part")};
        if (!LowPart)
        {
            return nullptr;
        }

        py::pyobj_handle HighPart{PyObject_GetAttrString(self, "high_part")};
        if (!HighPart)
        {
            return nullptr;
        }

        return PyUnicode_FromFormat("HolographicAdapterId(low_part=%R, high_part=%R)", LowPart.get(), HighPart.get());
    }

    static PyType_Slot _type_slots_HolographicAdapterId[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicAdapterId) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicAdapterId) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicAdapterId) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicAdapterId) },
        { Py_tp_richcompare, reinterpret_cast<void*>(_richcompare_HolographicAdapterId) },
        { Py_tp_repr, reinterpret_cast<void*>(_repr_HolographicAdapterId) },
        { }};

    static PyType_Spec type_spec_HolographicAdapterId = {
        "winrt._winrt_windows_graphics_holographic.HolographicAdapterId",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicAdapterId),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicAdapterId};

    // ----- HolographicFrameId struct --------------------

    PyObject* _new_HolographicFrameId(PyTypeObject* subclass, PyObject* args, PyObject* kwds) noexcept
    {
        pyobj_handle self_obj{(subclass->tp_alloc(subclass, 0))};
        if (!self_obj)
        {
            return nullptr;
        }

        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Graphics::Holographic::HolographicFrameId>*>(self_obj.get());
        std::construct_at(&self->obj);

        auto tuple_size = PyTuple_Size(args);
        if ((tuple_size == 0) && (!kwds))
        {
            return self_obj.detach();
        }

        uint64_t _Value{};

        static const char* kwlist[] = {"value", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "|K", const_cast<char**>(kwlist), &_Value))
        {
            return nullptr;
        }

        try
        {
            self->obj.Value = _Value;

            return self_obj.detach();
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_HolographicFrameId(py::wrapper::Windows::Graphics::Holographic::HolographicFrameId* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_HolographicFrameId(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicFrameId>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_HolographicFrameId[] = {
        { "_assign_array_", _assign_array_HolographicFrameId, METH_O | METH_STATIC, nullptr },
        { }};

    static PyObject* HolographicFrameId_get_Value(py::wrapper::Windows::Graphics::Holographic::HolographicFrameId* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyGetSetDef _getset_HolographicFrameId[] = {
        { "value", reinterpret_cast<getter>(HolographicFrameId_get_Value), nullptr, nullptr, nullptr },
        { }};

    static PyObject* _richcompare_HolographicFrameId(py::wrapper::Windows::Graphics::Holographic::HolographicFrameId* self, PyObject* other, int op) noexcept
    {
        try
        {
            auto _other = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicFrameId>(other);

            if (op == Py_EQ)
            {
                if (self->obj == _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            if (op == Py_NE)
            {
                if (self->obj != _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            Py_RETURN_NOTIMPLEMENTED;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _repr_HolographicFrameId(PyObject* self) noexcept
    {
        py::pyobj_handle Value{PyObject_GetAttrString(self, "value")};
        if (!Value)
        {
            return nullptr;
        }

        return PyUnicode_FromFormat("HolographicFrameId(value=%R)", Value.get());
    }

    static PyType_Slot _type_slots_HolographicFrameId[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicFrameId) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicFrameId) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicFrameId) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicFrameId) },
        { Py_tp_richcompare, reinterpret_cast<void*>(_richcompare_HolographicFrameId) },
        { Py_tp_repr, reinterpret_cast<void*>(_repr_HolographicFrameId) },
        { }};

    static PyType_Spec type_spec_HolographicFrameId = {
        "winrt._winrt_windows_graphics_holographic.HolographicFrameId",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicFrameId),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicFrameId};

    // ----- HolographicStereoTransform struct --------------------

    PyObject* _new_HolographicStereoTransform(PyTypeObject* subclass, PyObject* args, PyObject* kwds) noexcept
    {
        pyobj_handle self_obj{(subclass->tp_alloc(subclass, 0))};
        if (!self_obj)
        {
            return nullptr;
        }

        auto self = reinterpret_cast<winrt_struct_wrapper<winrt::Windows::Graphics::Holographic::HolographicStereoTransform>*>(self_obj.get());
        std::construct_at(&self->obj);

        auto tuple_size = PyTuple_Size(args);
        if ((tuple_size == 0) && (!kwds))
        {
            return self_obj.detach();
        }

        PyObject* _Left{};
        PyObject* _Right{};

        static const char* kwlist[] = {"left", "right", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "|OO", const_cast<char**>(kwlist), &_Left, &_Right))
        {
            return nullptr;
        }

        try
        {
            self->obj.Left = _Left ? py::convert_to<winrt::Windows::Foundation::Numerics::float4x4>(_Left) : winrt::Windows::Foundation::Numerics::float4x4{};
            self->obj.Right = _Right ? py::convert_to<winrt::Windows::Foundation::Numerics::float4x4>(_Right) : winrt::Windows::Foundation::Numerics::float4x4{};

            return self_obj.detach();
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_HolographicStereoTransform(py::wrapper::Windows::Graphics::Holographic::HolographicStereoTransform* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _assign_array_HolographicStereoTransform(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Holographic::HolographicStereoTransform>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyMethodDef _methods_HolographicStereoTransform[] = {
        { "_assign_array_", _assign_array_HolographicStereoTransform, METH_O | METH_STATIC, nullptr },
        { }};

    static PyObject* HolographicStereoTransform_get_Left(py::wrapper::Windows::Graphics::Holographic::HolographicStereoTransform* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Left);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* HolographicStereoTransform_get_Right(py::wrapper::Windows::Graphics::Holographic::HolographicStereoTransform* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Right);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyGetSetDef _getset_HolographicStereoTransform[] = {
        { "left", reinterpret_cast<getter>(HolographicStereoTransform_get_Left), nullptr, nullptr, nullptr },
        { "right", reinterpret_cast<getter>(HolographicStereoTransform_get_Right), nullptr, nullptr, nullptr },
        { }};

    static PyObject* _richcompare_HolographicStereoTransform(py::wrapper::Windows::Graphics::Holographic::HolographicStereoTransform* self, PyObject* other, int op) noexcept
    {
        try
        {
            auto _other = py::convert_to<winrt::Windows::Graphics::Holographic::HolographicStereoTransform>(other);

            if (op == Py_EQ)
            {
                if (self->obj == _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            if (op == Py_NE)
            {
                if (self->obj != _other)
                {
                    Py_RETURN_TRUE;
                }

                Py_RETURN_FALSE;
            }

            Py_RETURN_NOTIMPLEMENTED;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _repr_HolographicStereoTransform(PyObject* self) noexcept
    {
        py::pyobj_handle Left{PyObject_GetAttrString(self, "left")};
        if (!Left)
        {
            return nullptr;
        }

        py::pyobj_handle Right{PyObject_GetAttrString(self, "right")};
        if (!Right)
        {
            return nullptr;
        }

        return PyUnicode_FromFormat("HolographicStereoTransform(left=%R, right=%R)", Left.get(), Right.get());
    }

    static PyType_Slot _type_slots_HolographicStereoTransform[] = {
        { Py_tp_new, reinterpret_cast<void*>(_new_HolographicStereoTransform) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_HolographicStereoTransform) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_HolographicStereoTransform) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_HolographicStereoTransform) },
        { Py_tp_richcompare, reinterpret_cast<void*>(_richcompare_HolographicStereoTransform) },
        { Py_tp_repr, reinterpret_cast<void*>(_repr_HolographicStereoTransform) },
        { }};

    static PyType_Spec type_spec_HolographicStereoTransform = {
        "winrt._winrt_windows_graphics_holographic.HolographicStereoTransform",
        sizeof(py::wrapper::Windows::Graphics::Holographic::HolographicStereoTransform),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicStereoTransform};

    // ----- Windows.Graphics.Holographic Initialization --------------------

    PyDoc_STRVAR(module_doc, "Windows.Graphics.Holographic");

    static PyModuleDef module_def = {
        PyModuleDef_HEAD_INIT,
        "_winrt_windows_graphics_holographic",
        module_doc,
        0,
        nullptr,
        nullptr,
        nullptr,
        nullptr,
        nullptr};
} // py::cpp::Windows::Graphics::Holographic

PyMODINIT_FUNC PyInit__winrt_windows_graphics_holographic(void) noexcept
{
    using namespace py::cpp::Windows::Graphics::Holographic;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto inspectable_meta_type = py::get_inspectable_meta_type();
    if (!inspectable_meta_type)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    py::pytype_handle HolographicCamera_type{py::register_python_type(module.get(), &type_spec_HolographicCamera, object_bases.get(), inspectable_meta_type)};
    if (!HolographicCamera_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicCameraPose_type{py::register_python_type(module.get(), &type_spec_HolographicCameraPose, object_bases.get(), inspectable_meta_type)};
    if (!HolographicCameraPose_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicCameraRenderingParameters_type{py::register_python_type(module.get(), &type_spec_HolographicCameraRenderingParameters, object_bases.get(), inspectable_meta_type)};
    if (!HolographicCameraRenderingParameters_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicCameraViewportParameters_type{py::register_python_type(module.get(), &type_spec_HolographicCameraViewportParameters, object_bases.get(), inspectable_meta_type)};
    if (!HolographicCameraViewportParameters_type)
    {
        return nullptr;
    }

    py::pyobj_handle HolographicDisplay_Static_bases{PyTuple_Pack(1, reinterpret_cast<PyObject*>(inspectable_meta_type))};
    if (!HolographicDisplay_Static_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_HolographicDisplay_Static{PyType_FromSpecWithBases(&type_spec_HolographicDisplay_Static, HolographicDisplay_Static_bases.get())};
    if (!type_HolographicDisplay_Static)
    {
        return nullptr;
    }

    py::pytype_handle HolographicDisplay_type{py::register_python_type(module.get(), &type_spec_HolographicDisplay, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_HolographicDisplay_Static.get()))};
    if (!HolographicDisplay_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicFrame_type{py::register_python_type(module.get(), &type_spec_HolographicFrame, object_bases.get(), inspectable_meta_type)};
    if (!HolographicFrame_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicFramePrediction_type{py::register_python_type(module.get(), &type_spec_HolographicFramePrediction, object_bases.get(), inspectable_meta_type)};
    if (!HolographicFramePrediction_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicFramePresentationMonitor_type{py::register_python_type(module.get(), &type_spec_HolographicFramePresentationMonitor, object_bases.get(), inspectable_meta_type)};
    if (!HolographicFramePresentationMonitor_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicFramePresentationReport_type{py::register_python_type(module.get(), &type_spec_HolographicFramePresentationReport, object_bases.get(), inspectable_meta_type)};
    if (!HolographicFramePresentationReport_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicFrameRenderingReport_type{py::register_python_type(module.get(), &type_spec_HolographicFrameRenderingReport, object_bases.get(), inspectable_meta_type)};
    if (!HolographicFrameRenderingReport_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicFrameScanoutMonitor_type{py::register_python_type(module.get(), &type_spec_HolographicFrameScanoutMonitor, object_bases.get(), inspectable_meta_type)};
    if (!HolographicFrameScanoutMonitor_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicFrameScanoutReport_type{py::register_python_type(module.get(), &type_spec_HolographicFrameScanoutReport, object_bases.get(), inspectable_meta_type)};
    if (!HolographicFrameScanoutReport_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicQuadLayer_type{py::register_python_type(module.get(), &type_spec_HolographicQuadLayer, object_bases.get(), inspectable_meta_type)};
    if (!HolographicQuadLayer_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicQuadLayerUpdateParameters_type{py::register_python_type(module.get(), &type_spec_HolographicQuadLayerUpdateParameters, object_bases.get(), inspectable_meta_type)};
    if (!HolographicQuadLayerUpdateParameters_type)
    {
        return nullptr;
    }

    py::pyobj_handle HolographicSpace_Static_bases{PyTuple_Pack(1, reinterpret_cast<PyObject*>(inspectable_meta_type))};
    if (!HolographicSpace_Static_bases)
    {
        return nullptr;
    }

    py::pyobj_handle type_HolographicSpace_Static{PyType_FromSpecWithBases(&type_spec_HolographicSpace_Static, HolographicSpace_Static_bases.get())};
    if (!type_HolographicSpace_Static)
    {
        return nullptr;
    }

    py::pytype_handle HolographicSpace_type{py::register_python_type(module.get(), &type_spec_HolographicSpace, object_bases.get(), reinterpret_cast<PyTypeObject*>(type_HolographicSpace_Static.get()))};
    if (!HolographicSpace_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicSpaceCameraAddedEventArgs_type{py::register_python_type(module.get(), &type_spec_HolographicSpaceCameraAddedEventArgs, object_bases.get(), inspectable_meta_type)};
    if (!HolographicSpaceCameraAddedEventArgs_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicSpaceCameraRemovedEventArgs_type{py::register_python_type(module.get(), &type_spec_HolographicSpaceCameraRemovedEventArgs, object_bases.get(), inspectable_meta_type)};
    if (!HolographicSpaceCameraRemovedEventArgs_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicViewConfiguration_type{py::register_python_type(module.get(), &type_spec_HolographicViewConfiguration, object_bases.get(), inspectable_meta_type)};
    if (!HolographicViewConfiguration_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicAdapterId_type{py::register_python_type(module.get(), &type_spec_HolographicAdapterId, nullptr, nullptr)};
    if (!HolographicAdapterId_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicFrameId_type{py::register_python_type(module.get(), &type_spec_HolographicFrameId, nullptr, nullptr)};
    if (!HolographicFrameId_type)
    {
        return nullptr;
    }

    py::pytype_handle HolographicStereoTransform_type{py::register_python_type(module.get(), &type_spec_HolographicStereoTransform, nullptr, nullptr)};
    if (!HolographicStereoTransform_type)
    {
        return nullptr;
    }


    return module.detach();
}
