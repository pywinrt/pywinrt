# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.numerics
import winrt.windows.perception
import winrt.windows.perception.spatial
import winrt.windows.ui.input
import winrt.windows.ui.input.spatial

from winrt.windows.perception.people import HandJointKind, JointPoseAccuracy

Self = typing.TypeVar('Self')

@typing.final
class HandMeshVertex:
    position: winrt.windows.foundation.numerics.Vector3
    normal: winrt.windows.foundation.numerics.Vector3
    def __init__(self, position: winrt.windows.foundation.numerics.Vector3, normal: winrt.windows.foundation.numerics.Vector3) -> None: ...

@typing.final
class JointPose:
    orientation: winrt.windows.foundation.numerics.Quaternion
    position: winrt.windows.foundation.numerics.Vector3
    radius: winrt.system.Single
    accuracy: JointPoseAccuracy
    def __init__(self, orientation: winrt.windows.foundation.numerics.Quaternion, position: winrt.windows.foundation.numerics.Vector3, radius: winrt.system.Single, accuracy: JointPoseAccuracy) -> None: ...

@typing.final
class EyesPose_Static(type):
    def is_supported(cls) -> bool: ...
    def request_access_async(cls) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.ui.input.GazeInputAccessStatus]: ...

@typing.final
class EyesPose(winrt.system.Object, metaclass=EyesPose_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> EyesPose: ...
    @_property
    def gaze(self) -> typing.Optional[typing.Optional[winrt.windows.perception.spatial.SpatialRay]]: ...
    @_property
    def is_calibration_valid(self) -> bool: ...
    @_property
    def update_timestamp(self) -> typing.Optional[winrt.windows.perception.PerceptionTimestamp]: ...

@typing.final
class HandMeshObserver(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HandMeshObserver: ...
    def get_triangle_indices(self, indices: winrt.system.Array[winrt.system.UInt16], /) -> None: ...
    def get_vertex_state_for_pose(self, hand_pose: typing.Optional[HandPose], /) -> typing.Optional[HandMeshVertexState]: ...
    @_property
    def model_id(self) -> winrt.system.Int32: ...
    @_property
    def neutral_pose(self) -> typing.Optional[HandPose]: ...
    @_property
    def neutral_pose_version(self) -> winrt.system.Int32: ...
    @_property
    def source(self) -> typing.Optional[winrt.windows.ui.input.spatial.SpatialInteractionSource]: ...
    @_property
    def triangle_index_count(self) -> winrt.system.UInt32: ...
    @_property
    def vertex_count(self) -> winrt.system.UInt32: ...

@typing.final
class HandMeshVertexState(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HandMeshVertexState: ...
    def get_vertices(self, vertices: winrt.system.Array[HandMeshVertex], /) -> None: ...
    @_property
    def coordinate_system(self) -> typing.Optional[winrt.windows.perception.spatial.SpatialCoordinateSystem]: ...
    @_property
    def update_timestamp(self) -> typing.Optional[winrt.windows.perception.PerceptionTimestamp]: ...

@typing.final
class HandPose(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HandPose: ...
    def get_relative_joint(self, joint: HandJointKind, reference_joint: HandJointKind, /) -> JointPose: ...
    def get_relative_joints(self, joints: winrt.system.Array[HandJointKind], reference_joints: winrt.system.Array[HandJointKind], joint_poses: winrt.system.Array[JointPose], /) -> None: ...
    def try_get_joint(self, coordinate_system: typing.Optional[winrt.windows.perception.spatial.SpatialCoordinateSystem], joint: HandJointKind, /) -> typing.Tuple[bool, JointPose]: ...
    def try_get_joints(self, coordinate_system: typing.Optional[winrt.windows.perception.spatial.SpatialCoordinateSystem], joints: winrt.system.Array[HandJointKind], joint_poses: winrt.system.Array[JointPose], /) -> bool: ...

@typing.final
class HeadPose(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HeadPose: ...
    @_property
    def forward_direction(self) -> winrt.windows.foundation.numerics.Vector3: ...
    @_property
    def position(self) -> winrt.windows.foundation.numerics.Vector3: ...
    @_property
    def up_direction(self) -> winrt.windows.foundation.numerics.Vector3: ...

