// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Graphics.Printing.PrintTicket.h"


namespace py::cpp::Windows::Graphics::Printing::PrintTicket
{
    // ----- PrintTicketCapabilities class --------------------

    static PyObject* _new_PrintTicketCapabilities(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities>::type_name);
        return nullptr;
    }

    static void _dealloc_PrintTicketCapabilities(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintTicketCapabilities_GetFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"GetFeature", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.GetFeature(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_GetParameterDefinition(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"GetParameterDefinition", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.GetParameterDefinition(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_DocumentBindingFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"DocumentBindingFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DocumentBindingFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_DocumentCollateFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"DocumentCollateFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DocumentCollateFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_DocumentDuplexFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"DocumentDuplexFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DocumentDuplexFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_DocumentHolePunchFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"DocumentHolePunchFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DocumentHolePunchFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_DocumentInputBinFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"DocumentInputBinFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DocumentInputBinFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_DocumentNUpFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"DocumentNUpFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DocumentNUpFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_DocumentStapleFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"DocumentStapleFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DocumentStapleFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_JobPasscodeFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"JobPasscodeFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.JobPasscodeFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_Name(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"Name"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_PageBorderlessFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"PageBorderlessFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageBorderlessFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_PageMediaSizeFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"PageMediaSizeFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageMediaSizeFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_PageMediaTypeFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"PageMediaTypeFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageMediaTypeFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_PageOrientationFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"PageOrientationFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageOrientationFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_PageOutputColorFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"PageOutputColorFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageOutputColorFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_PageOutputQualityFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"PageOutputQualityFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageOutputQualityFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_PageResolutionFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"PageResolutionFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageResolutionFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_XmlNamespace(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"XmlNamespace"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.XmlNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketCapabilities_get_XmlNode(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketCapabilities", L"XmlNode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.XmlNode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintTicketCapabilities(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintTicketCapabilities(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTicketCapabilities[] = {
        { "get_feature", reinterpret_cast<PyCFunction>(PrintTicketCapabilities_GetFeature), METH_VARARGS, nullptr },
        { "get_parameter_definition", reinterpret_cast<PyCFunction>(PrintTicketCapabilities_GetParameterDefinition), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_PrintTicketCapabilities, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintTicketCapabilities), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintTicketCapabilities[] = {
        { "document_binding_feature", reinterpret_cast<getter>(PrintTicketCapabilities_get_DocumentBindingFeature), nullptr, nullptr, nullptr },
        { "document_collate_feature", reinterpret_cast<getter>(PrintTicketCapabilities_get_DocumentCollateFeature), nullptr, nullptr, nullptr },
        { "document_duplex_feature", reinterpret_cast<getter>(PrintTicketCapabilities_get_DocumentDuplexFeature), nullptr, nullptr, nullptr },
        { "document_hole_punch_feature", reinterpret_cast<getter>(PrintTicketCapabilities_get_DocumentHolePunchFeature), nullptr, nullptr, nullptr },
        { "document_input_bin_feature", reinterpret_cast<getter>(PrintTicketCapabilities_get_DocumentInputBinFeature), nullptr, nullptr, nullptr },
        { "document_n_up_feature", reinterpret_cast<getter>(PrintTicketCapabilities_get_DocumentNUpFeature), nullptr, nullptr, nullptr },
        { "document_staple_feature", reinterpret_cast<getter>(PrintTicketCapabilities_get_DocumentStapleFeature), nullptr, nullptr, nullptr },
        { "job_passcode_feature", reinterpret_cast<getter>(PrintTicketCapabilities_get_JobPasscodeFeature), nullptr, nullptr, nullptr },
        { "name", reinterpret_cast<getter>(PrintTicketCapabilities_get_Name), nullptr, nullptr, nullptr },
        { "page_borderless_feature", reinterpret_cast<getter>(PrintTicketCapabilities_get_PageBorderlessFeature), nullptr, nullptr, nullptr },
        { "page_media_size_feature", reinterpret_cast<getter>(PrintTicketCapabilities_get_PageMediaSizeFeature), nullptr, nullptr, nullptr },
        { "page_media_type_feature", reinterpret_cast<getter>(PrintTicketCapabilities_get_PageMediaTypeFeature), nullptr, nullptr, nullptr },
        { "page_orientation_feature", reinterpret_cast<getter>(PrintTicketCapabilities_get_PageOrientationFeature), nullptr, nullptr, nullptr },
        { "page_output_color_feature", reinterpret_cast<getter>(PrintTicketCapabilities_get_PageOutputColorFeature), nullptr, nullptr, nullptr },
        { "page_output_quality_feature", reinterpret_cast<getter>(PrintTicketCapabilities_get_PageOutputQualityFeature), nullptr, nullptr, nullptr },
        { "page_resolution_feature", reinterpret_cast<getter>(PrintTicketCapabilities_get_PageResolutionFeature), nullptr, nullptr, nullptr },
        { "xml_namespace", reinterpret_cast<getter>(PrintTicketCapabilities_get_XmlNamespace), nullptr, nullptr, nullptr },
        { "xml_node", reinterpret_cast<getter>(PrintTicketCapabilities_get_XmlNode), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintTicketCapabilities[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintTicketCapabilities) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintTicketCapabilities) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintTicketCapabilities) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintTicketCapabilities) },
        { },
    };

    static PyType_Spec type_spec_PrintTicketCapabilities =
    {
        "winrt._winrt_windows_graphics_printing_printticket.PrintTicketCapabilities",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTicketCapabilities
    };

    // ----- PrintTicketFeature class --------------------

    static PyObject* _new_PrintTicketFeature(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketFeature>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketFeature>::type_name);
        return nullptr;
    }

    static void _dealloc_PrintTicketFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketFeature* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintTicketFeature_GetOption(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketFeature* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketFeature", L"GetOption", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.GetOption(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTicketFeature_GetSelectedOption(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketFeature* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketFeature", L"GetSelectedOption", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetSelectedOption());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTicketFeature_SetSelectedOption(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketFeature* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketFeature", L"SetSelectedOption", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketOption>(args, 0);

                self->obj.SetSelectedOption(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTicketFeature_get_DisplayName(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketFeature* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketFeature", L"DisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketFeature_get_Name(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketFeature* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketFeature", L"Name"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketFeature_get_Options(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketFeature* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketFeature", L"Options"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Options());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketFeature_get_SelectionType(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketFeature* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketFeature", L"SelectionType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SelectionType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketFeature_get_XmlNamespace(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketFeature* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketFeature", L"XmlNamespace"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.XmlNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketFeature_get_XmlNode(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketFeature* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketFeature", L"XmlNode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.XmlNode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintTicketFeature(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketFeature>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintTicketFeature(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketFeature>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTicketFeature[] = {
        { "get_option", reinterpret_cast<PyCFunction>(PrintTicketFeature_GetOption), METH_VARARGS, nullptr },
        { "get_selected_option", reinterpret_cast<PyCFunction>(PrintTicketFeature_GetSelectedOption), METH_VARARGS, nullptr },
        { "set_selected_option", reinterpret_cast<PyCFunction>(PrintTicketFeature_SetSelectedOption), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_PrintTicketFeature, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintTicketFeature), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintTicketFeature[] = {
        { "display_name", reinterpret_cast<getter>(PrintTicketFeature_get_DisplayName), nullptr, nullptr, nullptr },
        { "name", reinterpret_cast<getter>(PrintTicketFeature_get_Name), nullptr, nullptr, nullptr },
        { "options", reinterpret_cast<getter>(PrintTicketFeature_get_Options), nullptr, nullptr, nullptr },
        { "selection_type", reinterpret_cast<getter>(PrintTicketFeature_get_SelectionType), nullptr, nullptr, nullptr },
        { "xml_namespace", reinterpret_cast<getter>(PrintTicketFeature_get_XmlNamespace), nullptr, nullptr, nullptr },
        { "xml_node", reinterpret_cast<getter>(PrintTicketFeature_get_XmlNode), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintTicketFeature[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintTicketFeature) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintTicketFeature) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintTicketFeature) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintTicketFeature) },
        { },
    };

    static PyType_Spec type_spec_PrintTicketFeature =
    {
        "winrt._winrt_windows_graphics_printing_printticket.PrintTicketFeature",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketFeature),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTicketFeature
    };

    // ----- PrintTicketOption class --------------------

    static PyObject* _new_PrintTicketOption(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketOption>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketOption>::type_name);
        return nullptr;
    }

    static void _dealloc_PrintTicketOption(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketOption* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintTicketOption_GetPropertyNode(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketOption* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketOption", L"GetPropertyNode", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.GetPropertyNode(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTicketOption_GetPropertyValue(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketOption* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketOption", L"GetPropertyValue", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.GetPropertyValue(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTicketOption_GetScoredPropertyNode(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketOption* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketOption", L"GetScoredPropertyNode", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.GetScoredPropertyNode(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTicketOption_GetScoredPropertyValue(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketOption* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketOption", L"GetScoredPropertyValue", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.GetScoredPropertyValue(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTicketOption_get_DisplayName(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketOption* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketOption", L"DisplayName"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketOption_get_Name(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketOption* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketOption", L"Name"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketOption_get_XmlNamespace(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketOption* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketOption", L"XmlNamespace"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.XmlNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketOption_get_XmlNode(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketOption* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketOption", L"XmlNode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.XmlNode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintTicketOption(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketOption>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintTicketOption(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketOption>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTicketOption[] = {
        { "get_property_node", reinterpret_cast<PyCFunction>(PrintTicketOption_GetPropertyNode), METH_VARARGS, nullptr },
        { "get_property_value", reinterpret_cast<PyCFunction>(PrintTicketOption_GetPropertyValue), METH_VARARGS, nullptr },
        { "get_scored_property_node", reinterpret_cast<PyCFunction>(PrintTicketOption_GetScoredPropertyNode), METH_VARARGS, nullptr },
        { "get_scored_property_value", reinterpret_cast<PyCFunction>(PrintTicketOption_GetScoredPropertyValue), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_PrintTicketOption, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintTicketOption), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintTicketOption[] = {
        { "display_name", reinterpret_cast<getter>(PrintTicketOption_get_DisplayName), nullptr, nullptr, nullptr },
        { "name", reinterpret_cast<getter>(PrintTicketOption_get_Name), nullptr, nullptr, nullptr },
        { "xml_namespace", reinterpret_cast<getter>(PrintTicketOption_get_XmlNamespace), nullptr, nullptr, nullptr },
        { "xml_node", reinterpret_cast<getter>(PrintTicketOption_get_XmlNode), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintTicketOption[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintTicketOption) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintTicketOption) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintTicketOption) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintTicketOption) },
        { },
    };

    static PyType_Spec type_spec_PrintTicketOption =
    {
        "winrt._winrt_windows_graphics_printing_printticket.PrintTicketOption",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketOption),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTicketOption
    };

    // ----- PrintTicketParameterDefinition class --------------------

    static PyObject* _new_PrintTicketParameterDefinition(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterDefinition>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterDefinition>::type_name);
        return nullptr;
    }

    static void _dealloc_PrintTicketParameterDefinition(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterDefinition* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintTicketParameterDefinition_get_DataType(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterDefinition* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketParameterDefinition", L"DataType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DataType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketParameterDefinition_get_Name(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterDefinition* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketParameterDefinition", L"Name"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketParameterDefinition_get_RangeMax(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterDefinition* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketParameterDefinition", L"RangeMax"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RangeMax());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketParameterDefinition_get_RangeMin(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterDefinition* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketParameterDefinition", L"RangeMin"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.RangeMin());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketParameterDefinition_get_UnitType(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterDefinition* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketParameterDefinition", L"UnitType"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.UnitType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketParameterDefinition_get_XmlNamespace(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterDefinition* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketParameterDefinition", L"XmlNamespace"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.XmlNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketParameterDefinition_get_XmlNode(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterDefinition* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketParameterDefinition", L"XmlNode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.XmlNode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintTicketParameterDefinition(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterDefinition>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintTicketParameterDefinition(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterDefinition>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTicketParameterDefinition[] = {
        { "_assign_array_", _assign_array_PrintTicketParameterDefinition, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintTicketParameterDefinition), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintTicketParameterDefinition[] = {
        { "data_type", reinterpret_cast<getter>(PrintTicketParameterDefinition_get_DataType), nullptr, nullptr, nullptr },
        { "name", reinterpret_cast<getter>(PrintTicketParameterDefinition_get_Name), nullptr, nullptr, nullptr },
        { "range_max", reinterpret_cast<getter>(PrintTicketParameterDefinition_get_RangeMax), nullptr, nullptr, nullptr },
        { "range_min", reinterpret_cast<getter>(PrintTicketParameterDefinition_get_RangeMin), nullptr, nullptr, nullptr },
        { "unit_type", reinterpret_cast<getter>(PrintTicketParameterDefinition_get_UnitType), nullptr, nullptr, nullptr },
        { "xml_namespace", reinterpret_cast<getter>(PrintTicketParameterDefinition_get_XmlNamespace), nullptr, nullptr, nullptr },
        { "xml_node", reinterpret_cast<getter>(PrintTicketParameterDefinition_get_XmlNode), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintTicketParameterDefinition[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintTicketParameterDefinition) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintTicketParameterDefinition) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintTicketParameterDefinition) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintTicketParameterDefinition) },
        { },
    };

    static PyType_Spec type_spec_PrintTicketParameterDefinition =
    {
        "winrt._winrt_windows_graphics_printing_printticket.PrintTicketParameterDefinition",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterDefinition),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTicketParameterDefinition
    };

    // ----- PrintTicketParameterInitializer class --------------------

    static PyObject* _new_PrintTicketParameterInitializer(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterInitializer>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterInitializer>::type_name);
        return nullptr;
    }

    static void _dealloc_PrintTicketParameterInitializer(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterInitializer* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintTicketParameterInitializer_get_Value(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterInitializer* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketParameterInitializer", L"Value"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Value());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PrintTicketParameterInitializer_put_Value(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterInitializer* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketParameterInitializer", L"Value"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return -1;
        }

        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketValue>(arg);

            self->obj.Value(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PrintTicketParameterInitializer_get_Name(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterInitializer* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketParameterInitializer", L"Name"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketParameterInitializer_get_XmlNamespace(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterInitializer* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketParameterInitializer", L"XmlNamespace"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.XmlNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PrintTicketParameterInitializer_get_XmlNode(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterInitializer* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketParameterInitializer", L"XmlNode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.XmlNode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintTicketParameterInitializer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterInitializer>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintTicketParameterInitializer(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterInitializer>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTicketParameterInitializer[] = {
        { "_assign_array_", _assign_array_PrintTicketParameterInitializer, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintTicketParameterInitializer), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintTicketParameterInitializer[] = {
        { "value", reinterpret_cast<getter>(PrintTicketParameterInitializer_get_Value), reinterpret_cast<setter>(PrintTicketParameterInitializer_put_Value), nullptr, nullptr },
        { "name", reinterpret_cast<getter>(PrintTicketParameterInitializer_get_Name), nullptr, nullptr, nullptr },
        { "xml_namespace", reinterpret_cast<getter>(PrintTicketParameterInitializer_get_XmlNamespace), nullptr, nullptr, nullptr },
        { "xml_node", reinterpret_cast<getter>(PrintTicketParameterInitializer_get_XmlNode), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintTicketParameterInitializer[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintTicketParameterInitializer) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintTicketParameterInitializer) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintTicketParameterInitializer) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintTicketParameterInitializer) },
        { },
    };

    static PyType_Spec type_spec_PrintTicketParameterInitializer =
    {
        "winrt._winrt_windows_graphics_printing_printticket.PrintTicketParameterInitializer",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketParameterInitializer),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTicketParameterInitializer
    };

    // ----- PrintTicketValue class --------------------

    static PyObject* _new_PrintTicketValue(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketValue>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketValue>::type_name);
        return nullptr;
    }

    static void _dealloc_PrintTicketValue(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketValue* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PrintTicketValue_GetValueAsInteger(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketValue* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketValue", L"GetValueAsInteger", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetValueAsInteger());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTicketValue_GetValueAsString(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketValue* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketValue", L"GetValueAsString", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetValueAsString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PrintTicketValue_get_Type(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketValue* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.PrintTicketValue", L"Type"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Type());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_PrintTicketValue(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketValue>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_PrintTicketValue(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTicket::PrintTicketValue>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PrintTicketValue[] = {
        { "get_value_as_integer", reinterpret_cast<PyCFunction>(PrintTicketValue_GetValueAsInteger), METH_VARARGS, nullptr },
        { "get_value_as_string", reinterpret_cast<PyCFunction>(PrintTicketValue_GetValueAsString), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_PrintTicketValue, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PrintTicketValue), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PrintTicketValue[] = {
        { "type", reinterpret_cast<getter>(PrintTicketValue_get_Type), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PrintTicketValue[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_PrintTicketValue) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_PrintTicketValue) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_PrintTicketValue) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_PrintTicketValue) },
        { },
    };

    static PyType_Spec type_spec_PrintTicketValue =
    {
        "winrt._winrt_windows_graphics_printing_printticket.PrintTicketValue",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTicket::PrintTicketValue),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PrintTicketValue
    };

    // ----- WorkflowPrintTicket class --------------------

    static PyObject* _new_WorkflowPrintTicket(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket>::type_name);
        return nullptr;
    }

    static void _dealloc_WorkflowPrintTicket(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WorkflowPrintTicket_GetCapabilities(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"GetCapabilities", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.GetCapabilities());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_GetFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"GetFeature", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.GetFeature(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_GetParameterInitializer(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"GetParameterInitializer", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.GetParameterInitializer(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_MergeAndValidateTicket(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"MergeAndValidateTicket", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket>(args, 0);

                return py::convert(self->obj.MergeAndValidateTicket(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_NotifyXmlChangedAsync(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"NotifyXmlChangedAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.NotifyXmlChangedAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_SetParameterInitializerAsInteger(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"SetParameterInitializerAsInteger", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<int32_t>(args, 2);

                return py::convert(self->obj.SetParameterInitializerAsInteger(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_SetParameterInitializerAsString(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"SetParameterInitializerAsString", 3))
            {
                py::set_arg_count_version_error(3);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(self->obj.SetParameterInitializerAsString(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_ValidateAsync(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"ValidateAsync", 0))
            {
                py::set_arg_count_version_error(0);
                return nullptr;
            }

            try
            {
                return py::convert(self->obj.ValidateAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_DocumentBindingFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"DocumentBindingFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DocumentBindingFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_DocumentCollateFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"DocumentCollateFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DocumentCollateFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_DocumentDuplexFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"DocumentDuplexFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DocumentDuplexFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_DocumentHolePunchFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"DocumentHolePunchFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DocumentHolePunchFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_DocumentInputBinFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"DocumentInputBinFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DocumentInputBinFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_DocumentNUpFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"DocumentNUpFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DocumentNUpFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_DocumentStapleFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"DocumentStapleFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.DocumentStapleFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_JobPasscodeFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"JobPasscodeFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.JobPasscodeFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_Name(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"Name"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Name());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_PageBorderlessFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"PageBorderlessFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageBorderlessFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_PageMediaSizeFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"PageMediaSizeFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageMediaSizeFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_PageMediaTypeFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"PageMediaTypeFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageMediaTypeFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_PageOrientationFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"PageOrientationFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageOrientationFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_PageOutputColorFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"PageOutputColorFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageOutputColorFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_PageOutputQualityFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"PageOutputQualityFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageOutputQualityFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_PageResolutionFeature(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"PageResolutionFeature"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PageResolutionFeature());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_XmlNamespace(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"XmlNamespace"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.XmlNamespace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicket_get_XmlNode(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicket", L"XmlNode"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.XmlNode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WorkflowPrintTicket(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WorkflowPrintTicket(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WorkflowPrintTicket[] = {
        { "get_capabilities", reinterpret_cast<PyCFunction>(WorkflowPrintTicket_GetCapabilities), METH_VARARGS, nullptr },
        { "get_feature", reinterpret_cast<PyCFunction>(WorkflowPrintTicket_GetFeature), METH_VARARGS, nullptr },
        { "get_parameter_initializer", reinterpret_cast<PyCFunction>(WorkflowPrintTicket_GetParameterInitializer), METH_VARARGS, nullptr },
        { "merge_and_validate_ticket", reinterpret_cast<PyCFunction>(WorkflowPrintTicket_MergeAndValidateTicket), METH_VARARGS, nullptr },
        { "notify_xml_changed_async", reinterpret_cast<PyCFunction>(WorkflowPrintTicket_NotifyXmlChangedAsync), METH_VARARGS, nullptr },
        { "set_parameter_initializer_as_integer", reinterpret_cast<PyCFunction>(WorkflowPrintTicket_SetParameterInitializerAsInteger), METH_VARARGS, nullptr },
        { "set_parameter_initializer_as_string", reinterpret_cast<PyCFunction>(WorkflowPrintTicket_SetParameterInitializerAsString), METH_VARARGS, nullptr },
        { "validate_async", reinterpret_cast<PyCFunction>(WorkflowPrintTicket_ValidateAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_WorkflowPrintTicket, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WorkflowPrintTicket), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WorkflowPrintTicket[] = {
        { "document_binding_feature", reinterpret_cast<getter>(WorkflowPrintTicket_get_DocumentBindingFeature), nullptr, nullptr, nullptr },
        { "document_collate_feature", reinterpret_cast<getter>(WorkflowPrintTicket_get_DocumentCollateFeature), nullptr, nullptr, nullptr },
        { "document_duplex_feature", reinterpret_cast<getter>(WorkflowPrintTicket_get_DocumentDuplexFeature), nullptr, nullptr, nullptr },
        { "document_hole_punch_feature", reinterpret_cast<getter>(WorkflowPrintTicket_get_DocumentHolePunchFeature), nullptr, nullptr, nullptr },
        { "document_input_bin_feature", reinterpret_cast<getter>(WorkflowPrintTicket_get_DocumentInputBinFeature), nullptr, nullptr, nullptr },
        { "document_n_up_feature", reinterpret_cast<getter>(WorkflowPrintTicket_get_DocumentNUpFeature), nullptr, nullptr, nullptr },
        { "document_staple_feature", reinterpret_cast<getter>(WorkflowPrintTicket_get_DocumentStapleFeature), nullptr, nullptr, nullptr },
        { "job_passcode_feature", reinterpret_cast<getter>(WorkflowPrintTicket_get_JobPasscodeFeature), nullptr, nullptr, nullptr },
        { "name", reinterpret_cast<getter>(WorkflowPrintTicket_get_Name), nullptr, nullptr, nullptr },
        { "page_borderless_feature", reinterpret_cast<getter>(WorkflowPrintTicket_get_PageBorderlessFeature), nullptr, nullptr, nullptr },
        { "page_media_size_feature", reinterpret_cast<getter>(WorkflowPrintTicket_get_PageMediaSizeFeature), nullptr, nullptr, nullptr },
        { "page_media_type_feature", reinterpret_cast<getter>(WorkflowPrintTicket_get_PageMediaTypeFeature), nullptr, nullptr, nullptr },
        { "page_orientation_feature", reinterpret_cast<getter>(WorkflowPrintTicket_get_PageOrientationFeature), nullptr, nullptr, nullptr },
        { "page_output_color_feature", reinterpret_cast<getter>(WorkflowPrintTicket_get_PageOutputColorFeature), nullptr, nullptr, nullptr },
        { "page_output_quality_feature", reinterpret_cast<getter>(WorkflowPrintTicket_get_PageOutputQualityFeature), nullptr, nullptr, nullptr },
        { "page_resolution_feature", reinterpret_cast<getter>(WorkflowPrintTicket_get_PageResolutionFeature), nullptr, nullptr, nullptr },
        { "xml_namespace", reinterpret_cast<getter>(WorkflowPrintTicket_get_XmlNamespace), nullptr, nullptr, nullptr },
        { "xml_node", reinterpret_cast<getter>(WorkflowPrintTicket_get_XmlNode), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WorkflowPrintTicket[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WorkflowPrintTicket) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WorkflowPrintTicket) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WorkflowPrintTicket) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WorkflowPrintTicket) },
        { },
    };

    static PyType_Spec type_spec_WorkflowPrintTicket =
    {
        "winrt._winrt_windows_graphics_printing_printticket.WorkflowPrintTicket",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WorkflowPrintTicket
    };

    // ----- WorkflowPrintTicketValidationResult class --------------------

    static PyObject* _new_WorkflowPrintTicketValidationResult(PyTypeObject* /*unused*/, PyObject* /*unused*/, PyObject* /*unused*/) noexcept
    {
        static_assert(py::py_type<winrt::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicketValidationResult>::type_name);
        py::set_invalid_activation_error(py::py_type<winrt::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicketValidationResult>::type_name);
        return nullptr;
    }

    static void _dealloc_WorkflowPrintTicketValidationResult(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicketValidationResult* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* WorkflowPrintTicketValidationResult_get_ExtendedError(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicketValidationResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicketValidationResult", L"ExtendedError"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.ExtendedError());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WorkflowPrintTicketValidationResult_get_Validated(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicketValidationResult* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Graphics.Printing.PrintTicket.WorkflowPrintTicketValidationResult", L"Validated"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.Validated());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _assign_array_WorkflowPrintTicketValidationResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicketValidationResult>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_WorkflowPrintTicketValidationResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicketValidationResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WorkflowPrintTicketValidationResult[] = {
        { "_assign_array_", _assign_array_WorkflowPrintTicketValidationResult, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WorkflowPrintTicketValidationResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WorkflowPrintTicketValidationResult[] = {
        { "extended_error", reinterpret_cast<getter>(WorkflowPrintTicketValidationResult_get_ExtendedError), nullptr, nullptr, nullptr },
        { "validated", reinterpret_cast<getter>(WorkflowPrintTicketValidationResult_get_Validated), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WorkflowPrintTicketValidationResult[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_WorkflowPrintTicketValidationResult) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_WorkflowPrintTicketValidationResult) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_WorkflowPrintTicketValidationResult) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_WorkflowPrintTicketValidationResult) },
        { },
    };

    static PyType_Spec type_spec_WorkflowPrintTicketValidationResult =
    {
        "winrt._winrt_windows_graphics_printing_printticket.WorkflowPrintTicketValidationResult",
        sizeof(py::wrapper::Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicketValidationResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WorkflowPrintTicketValidationResult
    };

    // ----- Windows.Graphics.Printing.PrintTicket Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Graphics::Printing::PrintTicket");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_graphics_printing_printticket",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Graphics::Printing::PrintTicket

PyMODINIT_FUNC PyInit__winrt_windows_graphics_printing_printticket(void) noexcept
{
    using namespace py::cpp::Windows::Graphics::Printing::PrintTicket;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintTicketCapabilities, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintTicketFeature, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintTicketOption, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintTicketParameterDefinition, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintTicketParameterInitializer, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_PrintTicketValue, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_WorkflowPrintTicket, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_WorkflowPrintTicketValidationResult, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
