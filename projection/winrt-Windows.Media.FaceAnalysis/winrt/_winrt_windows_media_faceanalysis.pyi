# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.graphics.imaging
import winrt.windows.media

Self = typing.TypeVar('Self')

@typing.final
class DetectedFace(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> DetectedFace: ...
    @_property
    def face_box(self) -> winrt.windows.graphics.imaging.BitmapBounds: ...

@typing.final
class FaceDetector_Static(type):
    def create_async(cls) -> winrt.windows.foundation.IAsyncOperation[FaceDetector]: ...
    def get_supported_bitmap_pixel_formats(cls) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.graphics.imaging.BitmapPixelFormat]]: ...
    def is_bitmap_pixel_format_supported(cls, bitmap_pixel_format: winrt.windows.graphics.imaging.BitmapPixelFormat, /) -> bool: ...
    @_property
    def is_supported(cls) -> bool: ...

@typing.final
class FaceDetector(winrt.system.Object, metaclass=FaceDetector_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FaceDetector: ...
    @typing.overload
    def detect_faces_async(self, image: typing.Optional[winrt.windows.graphics.imaging.SoftwareBitmap], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[DetectedFace]]: ...
    @typing.overload
    def detect_faces_async(self, image: typing.Optional[winrt.windows.graphics.imaging.SoftwareBitmap], search_area: winrt.windows.graphics.imaging.BitmapBounds, /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[DetectedFace]]: ...
    @_property
    def min_detectable_face_size(self) -> winrt.windows.graphics.imaging.BitmapSize: ...
    @min_detectable_face_size.setter
    def min_detectable_face_size(self, value: winrt.windows.graphics.imaging.BitmapSize) -> None: ...
    @_property
    def max_detectable_face_size(self) -> winrt.windows.graphics.imaging.BitmapSize: ...
    @max_detectable_face_size.setter
    def max_detectable_face_size(self, value: winrt.windows.graphics.imaging.BitmapSize) -> None: ...

@typing.final
class FaceTracker_Static(type):
    def create_async(cls) -> winrt.windows.foundation.IAsyncOperation[FaceTracker]: ...
    def get_supported_bitmap_pixel_formats(cls) -> typing.Optional[winrt.windows.foundation.collections.IVectorView[winrt.windows.graphics.imaging.BitmapPixelFormat]]: ...
    def is_bitmap_pixel_format_supported(cls, bitmap_pixel_format: winrt.windows.graphics.imaging.BitmapPixelFormat, /) -> bool: ...
    @_property
    def is_supported(cls) -> bool: ...

@typing.final
class FaceTracker(winrt.system.Object, metaclass=FaceTracker_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> FaceTracker: ...
    def process_next_frame_async(self, video_frame: typing.Optional[winrt.windows.media.VideoFrame], /) -> winrt.windows.foundation.IAsyncOperation[winrt.windows.foundation.collections.IVector[DetectedFace]]: ...
    @_property
    def min_detectable_face_size(self) -> winrt.windows.graphics.imaging.BitmapSize: ...
    @min_detectable_face_size.setter
    def min_detectable_face_size(self, value: winrt.windows.graphics.imaging.BitmapSize) -> None: ...
    @_property
    def max_detectable_face_size(self) -> winrt.windows.graphics.imaging.BitmapSize: ...
    @max_detectable_face_size.setter
    def max_detectable_face_size(self, value: winrt.windows.graphics.imaging.BitmapSize) -> None: ...

