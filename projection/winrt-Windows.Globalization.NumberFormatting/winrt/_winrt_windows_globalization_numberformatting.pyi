# WARNING: Please don't edit this file. It was generated by Python/WinRT v0.0.0

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation as windows_foundation
import winrt.windows.foundation.collections as windows_foundation_collections

from winrt.windows.globalization.numberformatting import CurrencyFormatterMode, RoundingAlgorithm

Self = typing.TypeVar('Self')

@typing.final
class CurrencyFormatter(winrt.system.Object, ImplementsISignedZeroOption, ImplementsINumberRounderOption, ImplementsISignificantDigitsOption, ImplementsINumberParser, ImplementsINumberFormatter2, ImplementsINumberFormatter, ImplementsINumberFormatterOptions):
    @typing.overload
    def __new__(cls: typing.Type[Self], currency_code: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self], currency_code: str, languages: typing.Iterable[str], geographic_region: str) -> Self: ...
    def apply_rounding_for_currency(self, rounding_algorithm: RoundingAlgorithm, /) -> None: ...
    def format_double(self, value: winrt.system.Double, /) -> str: ...
    def format_int(self, value: winrt.system.Int64, /) -> str: ...
    def format_uint(self, value: winrt.system.UInt64, /) -> str: ...
    def parse_double(self, text: str, /) -> typing.Optional[winrt.system.Double]: ...
    def parse_int(self, text: str, /) -> typing.Optional[winrt.system.Int64]: ...
    def parse_uint(self, text: str, /) -> typing.Optional[winrt.system.UInt64]: ...
    @_property
    def currency(self) -> str: ...
    @currency.setter
    def currency(self, value: str) -> None: ...
    @_property
    def mode(self) -> CurrencyFormatterMode: ...
    @mode.setter
    def mode(self, value: CurrencyFormatterMode) -> None: ...
    @_property
    def numeral_system(self) -> str: ...
    @numeral_system.setter
    def numeral_system(self, value: str) -> None: ...
    @_property
    def is_grouped(self) -> bool: ...
    @is_grouped.setter
    def is_grouped(self, value: bool) -> None: ...
    @_property
    def is_decimal_point_always_displayed(self) -> bool: ...
    @is_decimal_point_always_displayed.setter
    def is_decimal_point_always_displayed(self, value: bool) -> None: ...
    @_property
    def integer_digits(self) -> winrt.system.Int32: ...
    @integer_digits.setter
    def integer_digits(self, value: winrt.system.Int32) -> None: ...
    @_property
    def fraction_digits(self) -> winrt.system.Int32: ...
    @fraction_digits.setter
    def fraction_digits(self, value: winrt.system.Int32) -> None: ...
    @_property
    def geographic_region(self) -> str: ...
    @_property
    def resolved_geographic_region(self) -> str: ...
    @_property
    def resolved_language(self) -> str: ...
    @_property
    def languages(self) -> typing.Sequence[str]: ...
    @_property
    def number_rounder(self) -> INumberRounder: ...
    @number_rounder.setter
    def number_rounder(self, value: ImplementsINumberRounder) -> None: ...
    @_property
    def is_zero_signed(self) -> bool: ...
    @is_zero_signed.setter
    def is_zero_signed(self, value: bool) -> None: ...
    @_property
    def significant_digits(self) -> winrt.system.Int32: ...
    @significant_digits.setter
    def significant_digits(self, value: winrt.system.Int32) -> None: ...

@typing.final
class DecimalFormatter(winrt.system.Object, ImplementsISignedZeroOption, ImplementsINumberRounderOption, ImplementsISignificantDigitsOption, ImplementsINumberParser, ImplementsINumberFormatter2, ImplementsINumberFormatter, ImplementsINumberFormatterOptions):
    @typing.overload
    def __new__(cls: typing.Type[Self], languages: typing.Iterable[str], geographic_region: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    def format_double(self, value: winrt.system.Double, /) -> str: ...
    def format_int(self, value: winrt.system.Int64, /) -> str: ...
    def format_uint(self, value: winrt.system.UInt64, /) -> str: ...
    def parse_double(self, text: str, /) -> typing.Optional[winrt.system.Double]: ...
    def parse_int(self, text: str, /) -> typing.Optional[winrt.system.Int64]: ...
    def parse_uint(self, text: str, /) -> typing.Optional[winrt.system.UInt64]: ...
    @_property
    def is_decimal_point_always_displayed(self) -> bool: ...
    @is_decimal_point_always_displayed.setter
    def is_decimal_point_always_displayed(self, value: bool) -> None: ...
    @_property
    def integer_digits(self) -> winrt.system.Int32: ...
    @integer_digits.setter
    def integer_digits(self, value: winrt.system.Int32) -> None: ...
    @_property
    def is_grouped(self) -> bool: ...
    @is_grouped.setter
    def is_grouped(self, value: bool) -> None: ...
    @_property
    def numeral_system(self) -> str: ...
    @numeral_system.setter
    def numeral_system(self, value: str) -> None: ...
    @_property
    def fraction_digits(self) -> winrt.system.Int32: ...
    @fraction_digits.setter
    def fraction_digits(self, value: winrt.system.Int32) -> None: ...
    @_property
    def geographic_region(self) -> str: ...
    @_property
    def languages(self) -> typing.Sequence[str]: ...
    @_property
    def resolved_geographic_region(self) -> str: ...
    @_property
    def resolved_language(self) -> str: ...
    @_property
    def number_rounder(self) -> INumberRounder: ...
    @number_rounder.setter
    def number_rounder(self, value: ImplementsINumberRounder) -> None: ...
    @_property
    def is_zero_signed(self) -> bool: ...
    @is_zero_signed.setter
    def is_zero_signed(self, value: bool) -> None: ...
    @_property
    def significant_digits(self) -> winrt.system.Int32: ...
    @significant_digits.setter
    def significant_digits(self, value: winrt.system.Int32) -> None: ...

@typing.final
class IncrementNumberRounder(winrt.system.Object, ImplementsINumberRounder):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    def round_double(self, value: winrt.system.Double, /) -> winrt.system.Double: ...
    def round_int32(self, value: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def round_int64(self, value: winrt.system.Int64, /) -> winrt.system.Int64: ...
    def round_single(self, value: winrt.system.Single, /) -> winrt.system.Single: ...
    def round_uint32(self, value: winrt.system.UInt32, /) -> winrt.system.UInt32: ...
    def round_uint64(self, value: winrt.system.UInt64, /) -> winrt.system.UInt64: ...
    @_property
    def rounding_algorithm(self) -> RoundingAlgorithm: ...
    @rounding_algorithm.setter
    def rounding_algorithm(self, value: RoundingAlgorithm) -> None: ...
    @_property
    def increment(self) -> winrt.system.Double: ...
    @increment.setter
    def increment(self, value: winrt.system.Double) -> None: ...

@typing.final
class NumeralSystemTranslator(winrt.system.Object):
    @typing.overload
    def __new__(cls: typing.Type[Self], languages: typing.Iterable[str]) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    def translate_numerals(self, value: str, /) -> str: ...
    @_property
    def numeral_system(self) -> str: ...
    @numeral_system.setter
    def numeral_system(self, value: str) -> None: ...
    @_property
    def languages(self) -> typing.Sequence[str]: ...
    @_property
    def resolved_language(self) -> str: ...

@typing.final
class PercentFormatter(winrt.system.Object, ImplementsISignedZeroOption, ImplementsINumberRounderOption, ImplementsISignificantDigitsOption, ImplementsINumberParser, ImplementsINumberFormatter2, ImplementsINumberFormatter, ImplementsINumberFormatterOptions):
    @typing.overload
    def __new__(cls: typing.Type[Self], languages: typing.Iterable[str], geographic_region: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    def format_double(self, value: winrt.system.Double, /) -> str: ...
    def format_int(self, value: winrt.system.Int64, /) -> str: ...
    def format_uint(self, value: winrt.system.UInt64, /) -> str: ...
    def parse_double(self, text: str, /) -> typing.Optional[winrt.system.Double]: ...
    def parse_int(self, text: str, /) -> typing.Optional[winrt.system.Int64]: ...
    def parse_uint(self, text: str, /) -> typing.Optional[winrt.system.UInt64]: ...
    @_property
    def is_decimal_point_always_displayed(self) -> bool: ...
    @is_decimal_point_always_displayed.setter
    def is_decimal_point_always_displayed(self, value: bool) -> None: ...
    @_property
    def integer_digits(self) -> winrt.system.Int32: ...
    @integer_digits.setter
    def integer_digits(self, value: winrt.system.Int32) -> None: ...
    @_property
    def is_grouped(self) -> bool: ...
    @is_grouped.setter
    def is_grouped(self, value: bool) -> None: ...
    @_property
    def numeral_system(self) -> str: ...
    @numeral_system.setter
    def numeral_system(self, value: str) -> None: ...
    @_property
    def fraction_digits(self) -> winrt.system.Int32: ...
    @fraction_digits.setter
    def fraction_digits(self, value: winrt.system.Int32) -> None: ...
    @_property
    def geographic_region(self) -> str: ...
    @_property
    def languages(self) -> typing.Sequence[str]: ...
    @_property
    def resolved_geographic_region(self) -> str: ...
    @_property
    def resolved_language(self) -> str: ...
    @_property
    def number_rounder(self) -> INumberRounder: ...
    @number_rounder.setter
    def number_rounder(self, value: ImplementsINumberRounder) -> None: ...
    @_property
    def is_zero_signed(self) -> bool: ...
    @is_zero_signed.setter
    def is_zero_signed(self, value: bool) -> None: ...
    @_property
    def significant_digits(self) -> winrt.system.Int32: ...
    @significant_digits.setter
    def significant_digits(self, value: winrt.system.Int32) -> None: ...

@typing.final
class PermilleFormatter(winrt.system.Object, ImplementsISignedZeroOption, ImplementsINumberRounderOption, ImplementsISignificantDigitsOption, ImplementsINumberParser, ImplementsINumberFormatter2, ImplementsINumberFormatter, ImplementsINumberFormatterOptions):
    @typing.overload
    def __new__(cls: typing.Type[Self], languages: typing.Iterable[str], geographic_region: str) -> Self: ...
    @typing.overload
    def __new__(cls: typing.Type[Self]) -> Self: ...
    def format_double(self, value: winrt.system.Double, /) -> str: ...
    def format_int(self, value: winrt.system.Int64, /) -> str: ...
    def format_uint(self, value: winrt.system.UInt64, /) -> str: ...
    def parse_double(self, text: str, /) -> typing.Optional[winrt.system.Double]: ...
    def parse_int(self, text: str, /) -> typing.Optional[winrt.system.Int64]: ...
    def parse_uint(self, text: str, /) -> typing.Optional[winrt.system.UInt64]: ...
    @_property
    def is_decimal_point_always_displayed(self) -> bool: ...
    @is_decimal_point_always_displayed.setter
    def is_decimal_point_always_displayed(self, value: bool) -> None: ...
    @_property
    def integer_digits(self) -> winrt.system.Int32: ...
    @integer_digits.setter
    def integer_digits(self, value: winrt.system.Int32) -> None: ...
    @_property
    def is_grouped(self) -> bool: ...
    @is_grouped.setter
    def is_grouped(self, value: bool) -> None: ...
    @_property
    def numeral_system(self) -> str: ...
    @numeral_system.setter
    def numeral_system(self, value: str) -> None: ...
    @_property
    def fraction_digits(self) -> winrt.system.Int32: ...
    @fraction_digits.setter
    def fraction_digits(self, value: winrt.system.Int32) -> None: ...
    @_property
    def geographic_region(self) -> str: ...
    @_property
    def languages(self) -> typing.Sequence[str]: ...
    @_property
    def resolved_geographic_region(self) -> str: ...
    @_property
    def resolved_language(self) -> str: ...
    @_property
    def number_rounder(self) -> INumberRounder: ...
    @number_rounder.setter
    def number_rounder(self, value: ImplementsINumberRounder) -> None: ...
    @_property
    def is_zero_signed(self) -> bool: ...
    @is_zero_signed.setter
    def is_zero_signed(self, value: bool) -> None: ...
    @_property
    def significant_digits(self) -> winrt.system.Int32: ...
    @significant_digits.setter
    def significant_digits(self, value: winrt.system.Int32) -> None: ...

@typing.final
class SignificantDigitsNumberRounder(winrt.system.Object, ImplementsINumberRounder):
    def __new__(cls: typing.Type[Self]) -> Self: ...
    def round_double(self, value: winrt.system.Double, /) -> winrt.system.Double: ...
    def round_int32(self, value: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def round_int64(self, value: winrt.system.Int64, /) -> winrt.system.Int64: ...
    def round_single(self, value: winrt.system.Single, /) -> winrt.system.Single: ...
    def round_uint32(self, value: winrt.system.UInt32, /) -> winrt.system.UInt32: ...
    def round_uint64(self, value: winrt.system.UInt64, /) -> winrt.system.UInt64: ...
    @_property
    def significant_digits(self) -> winrt.system.UInt32: ...
    @significant_digits.setter
    def significant_digits(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def rounding_algorithm(self) -> RoundingAlgorithm: ...
    @rounding_algorithm.setter
    def rounding_algorithm(self, value: RoundingAlgorithm) -> None: ...

class ImplementsINumberFormatter():
    pass

@typing.final
class INumberFormatter(winrt.system.Object, ImplementsINumberFormatter):
    def format_double(self, value: winrt.system.Double, /) -> str: ...
    def format_int(self, value: winrt.system.Int64, /) -> str: ...
    def format_uint(self, value: winrt.system.UInt64, /) -> str: ...

class ImplementsINumberFormatter2():
    pass

@typing.final
class INumberFormatter2(winrt.system.Object, ImplementsINumberFormatter2):
    def format_double(self, value: winrt.system.Double, /) -> str: ...
    def format_int(self, value: winrt.system.Int64, /) -> str: ...
    def format_uint(self, value: winrt.system.UInt64, /) -> str: ...

class ImplementsINumberFormatterOptions():
    pass

@typing.final
class INumberFormatterOptions(winrt.system.Object, ImplementsINumberFormatterOptions):
    @_property
    def fraction_digits(self) -> winrt.system.Int32: ...
    @fraction_digits.setter
    def fraction_digits(self, value: winrt.system.Int32) -> None: ...
    @_property
    def geographic_region(self) -> str: ...
    @_property
    def integer_digits(self) -> winrt.system.Int32: ...
    @integer_digits.setter
    def integer_digits(self, value: winrt.system.Int32) -> None: ...
    @_property
    def is_decimal_point_always_displayed(self) -> bool: ...
    @is_decimal_point_always_displayed.setter
    def is_decimal_point_always_displayed(self, value: bool) -> None: ...
    @_property
    def is_grouped(self) -> bool: ...
    @is_grouped.setter
    def is_grouped(self, value: bool) -> None: ...
    @_property
    def languages(self) -> typing.Sequence[str]: ...
    @_property
    def numeral_system(self) -> str: ...
    @numeral_system.setter
    def numeral_system(self, value: str) -> None: ...
    @_property
    def resolved_geographic_region(self) -> str: ...
    @_property
    def resolved_language(self) -> str: ...

class ImplementsINumberParser():
    pass

@typing.final
class INumberParser(winrt.system.Object, ImplementsINumberParser):
    def parse_double(self, text: str, /) -> typing.Optional[winrt.system.Double]: ...
    def parse_int(self, text: str, /) -> typing.Optional[winrt.system.Int64]: ...
    def parse_uint(self, text: str, /) -> typing.Optional[winrt.system.UInt64]: ...

class ImplementsINumberRounder():
    pass

@typing.final
class INumberRounder(winrt.system.Object, ImplementsINumberRounder):
    def round_double(self, value: winrt.system.Double, /) -> winrt.system.Double: ...
    def round_int32(self, value: winrt.system.Int32, /) -> winrt.system.Int32: ...
    def round_int64(self, value: winrt.system.Int64, /) -> winrt.system.Int64: ...
    def round_single(self, value: winrt.system.Single, /) -> winrt.system.Single: ...
    def round_uint32(self, value: winrt.system.UInt32, /) -> winrt.system.UInt32: ...
    def round_uint64(self, value: winrt.system.UInt64, /) -> winrt.system.UInt64: ...

class ImplementsINumberRounderOption():
    pass

@typing.final
class INumberRounderOption(winrt.system.Object, ImplementsINumberRounderOption):
    @_property
    def number_rounder(self) -> INumberRounder: ...
    @number_rounder.setter
    def number_rounder(self, value: ImplementsINumberRounder) -> None: ...

class ImplementsISignedZeroOption():
    pass

@typing.final
class ISignedZeroOption(winrt.system.Object, ImplementsISignedZeroOption):
    @_property
    def is_zero_signed(self) -> bool: ...
    @is_zero_signed.setter
    def is_zero_signed(self, value: bool) -> None: ...

class ImplementsISignificantDigitsOption():
    pass

@typing.final
class ISignificantDigitsOption(winrt.system.Object, ImplementsISignificantDigitsOption):
    @_property
    def significant_digits(self) -> winrt.system.Int32: ...
    @significant_digits.setter
    def significant_digits(self, value: winrt.system.Int32) -> None: ...

