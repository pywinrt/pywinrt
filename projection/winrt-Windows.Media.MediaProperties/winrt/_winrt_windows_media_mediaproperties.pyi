# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.foundation.collections
import winrt.windows.media.core
import winrt.windows.storage
import winrt.windows.storage.streams

from winrt.windows.media.mediaproperties import AudioEncodingQuality, MediaMirroringOptions, MediaPixelFormat, MediaRotation, MediaThumbnailFormat, SphericalVideoFrameFormat, StereoscopicVideoPackingMode, VideoEncodingQuality

Self = typing.TypeVar('Self')

@typing.final
class AudioEncodingProperties_Static(type):
    def create_aac(cls, sample_rate: winrt.system.UInt32, channel_count: winrt.system.UInt32, bitrate: winrt.system.UInt32, /) -> typing.Optional[AudioEncodingProperties]: ...
    def create_aac_adts(cls, sample_rate: winrt.system.UInt32, channel_count: winrt.system.UInt32, bitrate: winrt.system.UInt32, /) -> typing.Optional[AudioEncodingProperties]: ...
    def create_alac(cls, sample_rate: winrt.system.UInt32, channel_count: winrt.system.UInt32, bits_per_sample: winrt.system.UInt32, /) -> typing.Optional[AudioEncodingProperties]: ...
    def create_flac(cls, sample_rate: winrt.system.UInt32, channel_count: winrt.system.UInt32, bits_per_sample: winrt.system.UInt32, /) -> typing.Optional[AudioEncodingProperties]: ...
    def create_mp3(cls, sample_rate: winrt.system.UInt32, channel_count: winrt.system.UInt32, bitrate: winrt.system.UInt32, /) -> typing.Optional[AudioEncodingProperties]: ...
    def create_pcm(cls, sample_rate: winrt.system.UInt32, channel_count: winrt.system.UInt32, bits_per_sample: winrt.system.UInt32, /) -> typing.Optional[AudioEncodingProperties]: ...
    def create_wma(cls, sample_rate: winrt.system.UInt32, channel_count: winrt.system.UInt32, bitrate: winrt.system.UInt32, /) -> typing.Optional[AudioEncodingProperties]: ...

@typing.final
class AudioEncodingProperties(winrt.system.Object, metaclass=AudioEncodingProperties_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> AudioEncodingProperties: ...
    def __new__(cls: typing.Type[AudioEncodingProperties]) -> AudioEncodingProperties:...
    def copy(self) -> typing.Optional[AudioEncodingProperties]: ...
    def get_format_user_data(self) -> winrt.system.Array[winrt.system.UInt8]: ...
    def set_format_user_data(self, value: winrt.system.Array[winrt.system.UInt8], /) -> None: ...
    @_property
    def sample_rate(self) -> winrt.system.UInt32: ...
    @sample_rate.setter
    def sample_rate(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def channel_count(self) -> winrt.system.UInt32: ...
    @channel_count.setter
    def channel_count(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def bits_per_sample(self) -> winrt.system.UInt32: ...
    @bits_per_sample.setter
    def bits_per_sample(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def bitrate(self) -> winrt.system.UInt32: ...
    @bitrate.setter
    def bitrate(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def is_spatial(self) -> bool: ...
    @_property
    def subtype(self) -> str: ...
    @subtype.setter
    def subtype(self, value: str) -> None: ...
    @_property
    def properties(self) -> typing.Optional[MediaPropertySet]: ...
    @_property
    def type(self) -> str: ...

@typing.final
class Av1ProfileIds_Static(type):
    @_property
    def high_chroma_subsampling444_bit_depth10(cls) -> winrt.system.Int32: ...
    @_property
    def high_chroma_subsampling444_bit_depth8(cls) -> winrt.system.Int32: ...
    @_property
    def main_chroma_subsampling400_bit_depth10(cls) -> winrt.system.Int32: ...
    @_property
    def main_chroma_subsampling400_bit_depth8(cls) -> winrt.system.Int32: ...
    @_property
    def main_chroma_subsampling420_bit_depth10(cls) -> winrt.system.Int32: ...
    @_property
    def main_chroma_subsampling420_bit_depth8(cls) -> winrt.system.Int32: ...
    @_property
    def professional_chroma_subsampling400_bit_depth12(cls) -> winrt.system.Int32: ...
    @_property
    def professional_chroma_subsampling420_bit_depth12(cls) -> winrt.system.Int32: ...
    @_property
    def professional_chroma_subsampling422_bit_depth10(cls) -> winrt.system.Int32: ...
    @_property
    def professional_chroma_subsampling422_bit_depth12(cls) -> winrt.system.Int32: ...
    @_property
    def professional_chroma_subsampling422_bit_depth8(cls) -> winrt.system.Int32: ...
    @_property
    def professional_chroma_subsampling444_bit_depth12(cls) -> winrt.system.Int32: ...

@typing.final
class Av1ProfileIds(winrt.system.Object, metaclass=Av1ProfileIds_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Av1ProfileIds: ...

@typing.final
class ContainerEncodingProperties(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ContainerEncodingProperties: ...
    def __new__(cls: typing.Type[ContainerEncodingProperties]) -> ContainerEncodingProperties:...
    def copy(self) -> typing.Optional[ContainerEncodingProperties]: ...
    @_property
    def subtype(self) -> str: ...
    @subtype.setter
    def subtype(self, value: str) -> None: ...
    @_property
    def properties(self) -> typing.Optional[MediaPropertySet]: ...
    @_property
    def type(self) -> str: ...

@typing.final
class H264ProfileIds_Static(type):
    @_property
    def baseline(cls) -> winrt.system.Int32: ...
    @_property
    def constrained_baseline(cls) -> winrt.system.Int32: ...
    @_property
    def extended(cls) -> winrt.system.Int32: ...
    @_property
    def high(cls) -> winrt.system.Int32: ...
    @_property
    def high10(cls) -> winrt.system.Int32: ...
    @_property
    def high422(cls) -> winrt.system.Int32: ...
    @_property
    def high444(cls) -> winrt.system.Int32: ...
    @_property
    def main(cls) -> winrt.system.Int32: ...
    @_property
    def multiview_high(cls) -> winrt.system.Int32: ...
    @_property
    def stereo_high(cls) -> winrt.system.Int32: ...

@typing.final
class H264ProfileIds(winrt.system.Object, metaclass=H264ProfileIds_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> H264ProfileIds: ...

@typing.final
class HevcProfileIds_Static(type):
    @_property
    def main_chroma_subsampling420_bit_depth10(cls) -> winrt.system.Int32: ...
    @_property
    def main_chroma_subsampling420_bit_depth12(cls) -> winrt.system.Int32: ...
    @_property
    def main_chroma_subsampling420_bit_depth8(cls) -> winrt.system.Int32: ...
    @_property
    def main_chroma_subsampling422_bit_depth10(cls) -> winrt.system.Int32: ...
    @_property
    def main_chroma_subsampling422_bit_depth12(cls) -> winrt.system.Int32: ...
    @_property
    def main_chroma_subsampling444_bit_depth10(cls) -> winrt.system.Int32: ...
    @_property
    def main_chroma_subsampling444_bit_depth12(cls) -> winrt.system.Int32: ...
    @_property
    def main_chroma_subsampling444_bit_depth8(cls) -> winrt.system.Int32: ...
    @_property
    def main_intra_chroma_subsampling420_bit_depth10(cls) -> winrt.system.Int32: ...
    @_property
    def main_intra_chroma_subsampling420_bit_depth12(cls) -> winrt.system.Int32: ...
    @_property
    def main_intra_chroma_subsampling420_bit_depth8(cls) -> winrt.system.Int32: ...
    @_property
    def main_intra_chroma_subsampling422_bit_depth10(cls) -> winrt.system.Int32: ...
    @_property
    def main_intra_chroma_subsampling422_bit_depth12(cls) -> winrt.system.Int32: ...
    @_property
    def main_intra_chroma_subsampling444_bit_depth10(cls) -> winrt.system.Int32: ...
    @_property
    def main_intra_chroma_subsampling444_bit_depth12(cls) -> winrt.system.Int32: ...
    @_property
    def main_intra_chroma_subsampling444_bit_depth16(cls) -> winrt.system.Int32: ...
    @_property
    def main_intra_chroma_subsampling444_bit_depth8(cls) -> winrt.system.Int32: ...
    @_property
    def main_still_chroma_subsampling420_bit_depth8(cls) -> winrt.system.Int32: ...
    @_property
    def main_still_chroma_subsampling444_bit_depth16(cls) -> winrt.system.Int32: ...
    @_property
    def main_still_chroma_subsampling444_bit_depth8(cls) -> winrt.system.Int32: ...
    @_property
    def monochrome_bit_depth12(cls) -> winrt.system.Int32: ...
    @_property
    def monochrome_bit_depth16(cls) -> winrt.system.Int32: ...

@typing.final
class HevcProfileIds(winrt.system.Object, metaclass=HevcProfileIds_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> HevcProfileIds: ...

@typing.final
class ImageEncodingProperties_Static(type):
    def create_bmp(cls) -> typing.Optional[ImageEncodingProperties]: ...
    def create_heif(cls) -> typing.Optional[ImageEncodingProperties]: ...
    def create_jpeg(cls) -> typing.Optional[ImageEncodingProperties]: ...
    def create_jpeg_x_r(cls) -> typing.Optional[ImageEncodingProperties]: ...
    def create_png(cls) -> typing.Optional[ImageEncodingProperties]: ...
    def create_uncompressed(cls, format: MediaPixelFormat, /) -> typing.Optional[ImageEncodingProperties]: ...

@typing.final
class ImageEncodingProperties(winrt.system.Object, metaclass=ImageEncodingProperties_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> ImageEncodingProperties: ...
    def __new__(cls: typing.Type[ImageEncodingProperties]) -> ImageEncodingProperties:...
    def copy(self) -> typing.Optional[ImageEncodingProperties]: ...
    @_property
    def width(self) -> winrt.system.UInt32: ...
    @width.setter
    def width(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def height(self) -> winrt.system.UInt32: ...
    @height.setter
    def height(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def subtype(self) -> str: ...
    @subtype.setter
    def subtype(self, value: str) -> None: ...
    @_property
    def properties(self) -> typing.Optional[MediaPropertySet]: ...
    @_property
    def type(self) -> str: ...

@typing.final
class MediaEncodingProfile_Static(type):
    def create_alac(cls, quality: AudioEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    def create_av1(cls, quality: VideoEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    def create_avi(cls, quality: VideoEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    def create_flac(cls, quality: AudioEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    def create_from_file_async(cls, file: typing.Optional[winrt.windows.storage.IStorageFile], /) -> winrt.windows.foundation.IAsyncOperation[MediaEncodingProfile]: ...
    def create_from_stream_async(cls, stream: typing.Optional[winrt.windows.storage.streams.IRandomAccessStream], /) -> winrt.windows.foundation.IAsyncOperation[MediaEncodingProfile]: ...
    def create_hevc(cls, quality: VideoEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    def create_m4a(cls, quality: AudioEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    def create_mp3(cls, quality: AudioEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    def create_mp4(cls, quality: VideoEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    def create_vp9(cls, quality: VideoEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    def create_wav(cls, quality: AudioEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    def create_wma(cls, quality: AudioEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...
    def create_wmv(cls, quality: VideoEncodingQuality, /) -> typing.Optional[MediaEncodingProfile]: ...

@typing.final
class MediaEncodingProfile(winrt.system.Object, metaclass=MediaEncodingProfile_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaEncodingProfile: ...
    def __new__(cls: typing.Type[MediaEncodingProfile]) -> MediaEncodingProfile:...
    def get_audio_tracks(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.media.core.AudioStreamDescriptor]]: ...
    def get_timed_metadata_tracks(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.media.core.TimedMetadataStreamDescriptor]]: ...
    def get_video_tracks(self) -> typing.Optional[winrt.windows.foundation.collections.IVector[winrt.windows.media.core.VideoStreamDescriptor]]: ...
    def set_audio_tracks(self, value: typing.Iterable[winrt.windows.media.core.AudioStreamDescriptor], /) -> None: ...
    def set_timed_metadata_tracks(self, value: typing.Iterable[winrt.windows.media.core.TimedMetadataStreamDescriptor], /) -> None: ...
    def set_video_tracks(self, value: typing.Iterable[winrt.windows.media.core.VideoStreamDescriptor], /) -> None: ...
    @_property
    def video(self) -> typing.Optional[VideoEncodingProperties]: ...
    @video.setter
    def video(self, value: typing.Optional[VideoEncodingProperties]) -> None: ...
    @_property
    def container(self) -> typing.Optional[ContainerEncodingProperties]: ...
    @container.setter
    def container(self, value: typing.Optional[ContainerEncodingProperties]) -> None: ...
    @_property
    def audio(self) -> typing.Optional[AudioEncodingProperties]: ...
    @audio.setter
    def audio(self, value: typing.Optional[AudioEncodingProperties]) -> None: ...

@typing.final
class MediaEncodingSubtypes_Static(type):
    @_property
    def argb32(cls) -> str: ...
    @_property
    def aac(cls) -> str: ...
    @_property
    def aac_adts(cls) -> str: ...
    @_property
    def ac3(cls) -> str: ...
    @_property
    def amr_nb(cls) -> str: ...
    @_property
    def amr_wb(cls) -> str: ...
    @_property
    def mpeg(cls) -> str: ...
    @_property
    def asf(cls) -> str: ...
    @_property
    def avi(cls) -> str: ...
    @_property
    def bgra8(cls) -> str: ...
    @_property
    def bmp(cls) -> str: ...
    @_property
    def eac3(cls) -> str: ...
    @_property
    def float(cls) -> str: ...
    @_property
    def gif(cls) -> str: ...
    @_property
    def h263(cls) -> str: ...
    @_property
    def h264(cls) -> str: ...
    @_property
    def h264_es(cls) -> str: ...
    @_property
    def hevc(cls) -> str: ...
    @_property
    def hevc_es(cls) -> str: ...
    @_property
    def iyuv(cls) -> str: ...
    @_property
    def jpeg(cls) -> str: ...
    @_property
    def jpeg_xr(cls) -> str: ...
    @_property
    def mjpg(cls) -> str: ...
    @_property
    def mp3(cls) -> str: ...
    @_property
    def mpeg1(cls) -> str: ...
    @_property
    def mpeg2(cls) -> str: ...
    @_property
    def mpeg4(cls) -> str: ...
    @_property
    def nv12(cls) -> str: ...
    @_property
    def pcm(cls) -> str: ...
    @_property
    def png(cls) -> str: ...
    @_property
    def rgb24(cls) -> str: ...
    @_property
    def rgb32(cls) -> str: ...
    @_property
    def tiff(cls) -> str: ...
    @_property
    def wave(cls) -> str: ...
    @_property
    def wma8(cls) -> str: ...
    @_property
    def wma9(cls) -> str: ...
    @_property
    def wmv3(cls) -> str: ...
    @_property
    def wvc1(cls) -> str: ...
    @_property
    def yuy2(cls) -> str: ...
    @_property
    def yv12(cls) -> str: ...
    @_property
    def d16(cls) -> str: ...
    @_property
    def l16(cls) -> str: ...
    @_property
    def l8(cls) -> str: ...
    @_property
    def vp9(cls) -> str: ...
    @_property
    def alac(cls) -> str: ...
    @_property
    def flac(cls) -> str: ...
    @_property
    def p010(cls) -> str: ...
    @_property
    def heif(cls) -> str: ...
    @_property
    def pgs(cls) -> str: ...
    @_property
    def srt(cls) -> str: ...
    @_property
    def ssa(cls) -> str: ...
    @_property
    def vob_sub(cls) -> str: ...
    @_property
    def av1(cls) -> str: ...

@typing.final
class MediaEncodingSubtypes(winrt.system.Object, metaclass=MediaEncodingSubtypes_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaEncodingSubtypes: ...

@typing.final
class MediaPropertySet(winrt.system.Object, winrt._winrt.MutableMapping[_uuid.UUID, winrt.system.Object]):
    def __len__(self) -> int: ...
    def __iter__(self) -> typing.Iterator[_uuid.UUID]: ...
    def __contains__(self, key: object) -> bool:...
    def __setitem__(self, key: _uuid.UUID, value: winrt.system.Object) -> None: ...
    def __getitem__(self, key: _uuid.UUID) -> winrt.system.Object: ...
    def __delitem__(self, key: _uuid.UUID) -> None: ...
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaPropertySet: ...
    def __new__(cls: typing.Type[MediaPropertySet]) -> MediaPropertySet:...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winrt.windows.foundation.collections.IIterator[winrt.windows.foundation.collections.IKeyValuePair[_uuid.UUID, winrt.system.Object]]]: ...
    def get_view(self) -> typing.Optional[winrt.windows.foundation.collections.IMapView[_uuid.UUID, winrt.system.Object]]: ...
    def has_key(self, key: _uuid.UUID, /) -> bool: ...
    def insert(self, key: _uuid.UUID, value: typing.Optional[winrt.system.Object], /) -> bool: ...
    def lookup(self, key: _uuid.UUID, /) -> typing.Optional[winrt.system.Object]: ...
    def remove(self, key: _uuid.UUID, /) -> None: ...
    @_property
    def size(self) -> winrt.system.UInt32: ...

@typing.final
class MediaRatio(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> MediaRatio: ...
    @_property
    def numerator(self) -> winrt.system.UInt32: ...
    @numerator.setter
    def numerator(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def denominator(self) -> winrt.system.UInt32: ...
    @denominator.setter
    def denominator(self, value: winrt.system.UInt32) -> None: ...

@typing.final
class Mpeg2ProfileIds_Static(type):
    @_property
    def high(cls) -> winrt.system.Int32: ...
    @_property
    def main(cls) -> winrt.system.Int32: ...
    @_property
    def signal_noise_ratio_scalable(cls) -> winrt.system.Int32: ...
    @_property
    def simple(cls) -> winrt.system.Int32: ...
    @_property
    def spatially_scalable(cls) -> winrt.system.Int32: ...

@typing.final
class Mpeg2ProfileIds(winrt.system.Object, metaclass=Mpeg2ProfileIds_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Mpeg2ProfileIds: ...

@typing.final
class TimedMetadataEncodingProperties_Static(type):
    def create_pgs(cls) -> typing.Optional[TimedMetadataEncodingProperties]: ...
    def create_srt(cls) -> typing.Optional[TimedMetadataEncodingProperties]: ...
    def create_ssa(cls, format_user_data: winrt.system.Array[winrt.system.UInt8], /) -> typing.Optional[TimedMetadataEncodingProperties]: ...
    def create_vob_sub(cls, format_user_data: winrt.system.Array[winrt.system.UInt8], /) -> typing.Optional[TimedMetadataEncodingProperties]: ...

@typing.final
class TimedMetadataEncodingProperties(winrt.system.Object, metaclass=TimedMetadataEncodingProperties_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> TimedMetadataEncodingProperties: ...
    def __new__(cls: typing.Type[TimedMetadataEncodingProperties]) -> TimedMetadataEncodingProperties:...
    def copy(self) -> typing.Optional[TimedMetadataEncodingProperties]: ...
    def get_format_user_data(self) -> winrt.system.Array[winrt.system.UInt8]: ...
    def set_format_user_data(self, value: winrt.system.Array[winrt.system.UInt8], /) -> None: ...
    @_property
    def subtype(self) -> str: ...
    @subtype.setter
    def subtype(self, value: str) -> None: ...
    @_property
    def properties(self) -> typing.Optional[MediaPropertySet]: ...
    @_property
    def type(self) -> str: ...

@typing.final
class VideoEncodingProperties_Static(type):
    def create_av1(cls) -> typing.Optional[VideoEncodingProperties]: ...
    def create_h264(cls) -> typing.Optional[VideoEncodingProperties]: ...
    def create_hevc(cls) -> typing.Optional[VideoEncodingProperties]: ...
    def create_mpeg2(cls) -> typing.Optional[VideoEncodingProperties]: ...
    def create_uncompressed(cls, subtype: str, width: winrt.system.UInt32, height: winrt.system.UInt32, /) -> typing.Optional[VideoEncodingProperties]: ...
    def create_vp9(cls) -> typing.Optional[VideoEncodingProperties]: ...

@typing.final
class VideoEncodingProperties(winrt.system.Object, metaclass=VideoEncodingProperties_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> VideoEncodingProperties: ...
    def __new__(cls: typing.Type[VideoEncodingProperties]) -> VideoEncodingProperties:...
    def copy(self) -> typing.Optional[VideoEncodingProperties]: ...
    def get_format_user_data(self) -> winrt.system.Array[winrt.system.UInt8]: ...
    def set_format_user_data(self, value: winrt.system.Array[winrt.system.UInt8], /) -> None: ...
    @_property
    def subtype(self) -> str: ...
    @subtype.setter
    def subtype(self, value: str) -> None: ...
    @_property
    def type(self) -> str: ...
    @_property
    def properties(self) -> typing.Optional[MediaPropertySet]: ...
    @_property
    def width(self) -> winrt.system.UInt32: ...
    @width.setter
    def width(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def height(self) -> winrt.system.UInt32: ...
    @height.setter
    def height(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def bitrate(self) -> winrt.system.UInt32: ...
    @bitrate.setter
    def bitrate(self, value: winrt.system.UInt32) -> None: ...
    @_property
    def pixel_aspect_ratio(self) -> typing.Optional[MediaRatio]: ...
    @_property
    def frame_rate(self) -> typing.Optional[MediaRatio]: ...
    @_property
    def profile_id(self) -> winrt.system.Int32: ...
    @profile_id.setter
    def profile_id(self, value: winrt.system.Int32) -> None: ...
    @_property
    def stereoscopic_video_packing_mode(self) -> StereoscopicVideoPackingMode: ...
    @_property
    def spherical_video_frame_format(self) -> SphericalVideoFrameFormat: ...

@typing.final
class Vp9ProfileIds_Static(type):
    @_property
    def profile0_chroma_subsampling420_bit_depth8(cls) -> winrt.system.Int32: ...
    @_property
    def profile2_chroma_subsampling420_bit_depth10(cls) -> winrt.system.Int32: ...
    @_property
    def profile2_chroma_subsampling420_bit_depth12(cls) -> winrt.system.Int32: ...

@typing.final
class Vp9ProfileIds(winrt.system.Object, metaclass=Vp9ProfileIds_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> Vp9ProfileIds: ...

@typing.final
class IMediaEncodingProperties(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> IMediaEncodingProperties: ...
    @_property
    def properties(self) -> typing.Optional[MediaPropertySet]: ...
    @_property
    def subtype(self) -> str: ...
    @subtype.setter
    def subtype(self, value: str) -> None: ...
    @_property
    def type(self) -> str: ...

