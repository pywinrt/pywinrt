// WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

#include "py.Windows.Security.Cryptography.DataProtection.h"


namespace py::cpp::Windows::Security::Cryptography::DataProtection
{
    // ----- DataProtectionProvider class --------------------

    static PyObject* _new_DataProtectionProvider(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        auto arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Security::Cryptography::DataProtection::DataProtectionProvider instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Security::Cryptography::DataProtection::DataProtectionProvider instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_DataProtectionProvider(py::wrapper::Windows::Security::Cryptography::DataProtection::DataProtectionProvider* self) noexcept
    {
        auto tp = Py_TYPE(self);
        std::destroy_at(&self->obj);
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DataProtectionProvider_ProtectAsync(py::wrapper::Windows::Security::Cryptography::DataProtection::DataProtectionProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.DataProtection.DataProtectionProvider", L"ProtectAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                return py::convert(self->obj.ProtectAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DataProtectionProvider_ProtectStreamAsync(py::wrapper::Windows::Security::Cryptography::DataProtection::DataProtectionProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.DataProtection.DataProtectionProvider", L"ProtectStreamAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IInputStream>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IOutputStream>(args, 1);

                return py::convert(self->obj.ProtectStreamAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DataProtectionProvider_UnprotectAsync(py::wrapper::Windows::Security::Cryptography::DataProtection::DataProtectionProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.DataProtection.DataProtectionProvider", L"UnprotectAsync", 1))
            {
                py::set_arg_count_version_error(1);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(args, 0);

                return py::convert(self->obj.UnprotectAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DataProtectionProvider_UnprotectStreamAsync(py::wrapper::Windows::Security::Cryptography::DataProtection::DataProtectionProvider* self, PyObject* args) noexcept
    {
        auto arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.Security.Cryptography.DataProtection.DataProtectionProvider", L"UnprotectStreamAsync", 2))
            {
                py::set_arg_count_version_error(2);
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IInputStream>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Storage::Streams::IOutputStream>(args, 1);

                return py::convert(self->obj.UnprotectStreamAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _assign_array_DataProtectionProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        auto array = std::make_unique<py::ComArray<winrt::Windows::Security::Cryptography::DataProtection::DataProtectionProvider>>();
        if (!py::cpp::_winrt::Array_Assign(arg, std::move(array)))
        {
            return nullptr;
        }
        Py_RETURN_NONE;
    }

    static PyObject* _from_DataProtectionProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Cryptography::DataProtection::DataProtectionProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DataProtectionProvider[] = {
        { "protect_async", reinterpret_cast<PyCFunction>(DataProtectionProvider_ProtectAsync), METH_VARARGS, nullptr },
        { "protect_stream_async", reinterpret_cast<PyCFunction>(DataProtectionProvider_ProtectStreamAsync), METH_VARARGS, nullptr },
        { "unprotect_async", reinterpret_cast<PyCFunction>(DataProtectionProvider_UnprotectAsync), METH_VARARGS, nullptr },
        { "unprotect_stream_async", reinterpret_cast<PyCFunction>(DataProtectionProvider_UnprotectStreamAsync), METH_VARARGS, nullptr },
        { "_assign_array_", _assign_array_DataProtectionProvider, METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DataProtectionProvider), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DataProtectionProvider[] = {
        { }
    };

    static PyType_Slot _type_slots_DataProtectionProvider[] = 
    {
        { Py_tp_new, reinterpret_cast<void*>(_new_DataProtectionProvider) },
        { Py_tp_dealloc, reinterpret_cast<void*>(_dealloc_DataProtectionProvider) },
        { Py_tp_methods, reinterpret_cast<void*>(_methods_DataProtectionProvider) },
        { Py_tp_getset, reinterpret_cast<void*>(_getset_DataProtectionProvider) },
        { },
    };

    static PyType_Spec type_spec_DataProtectionProvider =
    {
        "winrt._winrt_windows_security_cryptography_dataprotection.DataProtectionProvider",
        sizeof(py::wrapper::Windows::Security::Cryptography::DataProtection::DataProtectionProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DataProtectionProvider
    };

    // ----- Windows.Security.Cryptography.DataProtection Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Security::Cryptography::DataProtection");


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winrt_windows_security_cryptography_dataprotection",
           module_doc,
           0,
           nullptr,
           nullptr,
           nullptr,
           nullptr,
           nullptr};

} // py::cpp::Windows::Security::Cryptography::DataProtection

PyMODINIT_FUNC PyInit__winrt_windows_security_cryptography_dataprotection(void) noexcept
{
    using namespace py::cpp::Windows::Security::Cryptography::DataProtection;

    if (py::import_winrt_runtime() == -1)
    {
        return nullptr;
    }

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_object_type();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle object_bases{PyTuple_Pack(1, object_type)};

    if (!object_bases)
    {
        return nullptr;
    }

    if (py::register_python_type(module.get(), &type_spec_DataProtectionProvider, object_bases.get(), nullptr) == -1)
    {
        return nullptr;
    }


    return module.detach();
}
