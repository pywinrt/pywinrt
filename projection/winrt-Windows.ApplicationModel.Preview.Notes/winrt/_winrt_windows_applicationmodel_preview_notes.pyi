# WARNING: Please don't edit this file. It was generated by Python/WinRT v2.0.0-beta.2

import datetime
import sys
import types
import typing
import uuid as _uuid
from builtins import property as _property

import winrt._winrt
import winrt.system
import winrt.windows.foundation
import winrt.windows.graphics.imaging
import winrt.windows.storage.streams

Self = typing.TypeVar('Self')

@typing.final
class NotePlacementChangedPreviewEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NotePlacementChangedPreviewEventArgs: ...
    @_property
    def view_id(self) -> winrt.system.Int32: ...

@typing.final
class NoteVisibilityChangedPreviewEventArgs(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NoteVisibilityChangedPreviewEventArgs: ...
    @_property
    def is_visible(self) -> bool: ...
    @_property
    def view_id(self) -> winrt.system.Int32: ...

@typing.final
class NotesWindowManagerPreview_Static(type):
    def get_for_current_app(cls) -> typing.Optional[NotesWindowManagerPreview]: ...

@typing.final
class NotesWindowManagerPreview(winrt.system.Object, metaclass=NotesWindowManagerPreview_Static):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NotesWindowManagerPreview: ...
    def get_note_placement(self, note_view_id: winrt.system.Int32, /) -> typing.Optional[winrt.windows.storage.streams.IBuffer]: ...
    def hide_note(self, note_view_id: winrt.system.Int32, /) -> None: ...
    def set_focus_to_next_view(self) -> None: ...
    def set_focus_to_previous_view(self) -> None: ...
    def set_notes_thumbnail_async(self, thumbnail: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> winrt.windows.foundation.IAsyncAction: ...
    def set_thumbnail_image_for_task_switcher_async(self, bitmap: typing.Optional[winrt.windows.graphics.imaging.SoftwareBitmap], /) -> winrt.windows.foundation.IAsyncAction: ...
    def show_note(self, note_view_id: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def show_note_relative_to(self, note_view_id: winrt.system.Int32, anchor_note_view_id: winrt.system.Int32, /) -> None: ...
    @typing.overload
    def show_note_relative_to(self, note_view_id: winrt.system.Int32, anchor_note_view_id: winrt.system.Int32, options: typing.Optional[NotesWindowManagerPreviewShowNoteOptions], /) -> None: ...
    @typing.overload
    def show_note_with_placement(self, note_view_id: winrt.system.Int32, data: typing.Optional[winrt.windows.storage.streams.IBuffer], /) -> None: ...
    @typing.overload
    def show_note_with_placement(self, note_view_id: winrt.system.Int32, data: typing.Optional[winrt.windows.storage.streams.IBuffer], options: typing.Optional[NotesWindowManagerPreviewShowNoteOptions], /) -> None: ...
    def try_set_note_size(self, note_view_id: winrt.system.Int32, size: winrt.windows.foundation.Size, /) -> bool: ...
    def add_note_placement_changed(self, handler: winrt.windows.foundation.TypedEventHandler[NotesWindowManagerPreview, NotePlacementChangedPreviewEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_note_placement_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_note_visibility_changed(self, handler: winrt.windows.foundation.TypedEventHandler[NotesWindowManagerPreview, NoteVisibilityChangedPreviewEventArgs], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_note_visibility_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    def add_system_lock_state_changed(self, handler: winrt.windows.foundation.TypedEventHandler[NotesWindowManagerPreview, winrt.system.Object], /) -> winrt.windows.foundation.EventRegistrationToken: ...
    def remove_system_lock_state_changed(self, token: winrt.windows.foundation.EventRegistrationToken, /) -> None: ...
    @_property
    def is_screen_locked(self) -> bool: ...

@typing.final
class NotesWindowManagerPreviewShowNoteOptions(winrt.system.Object):
    @staticmethod
    def _from(obj: winrt.system.Object, /) -> NotesWindowManagerPreviewShowNoteOptions: ...
    def __new__(cls: typing.Type[NotesWindowManagerPreviewShowNoteOptions]) -> NotesWindowManagerPreviewShowNoteOptions:...
    @_property
    def show_with_focus(self) -> bool: ...
    @show_with_focus.setter
    def show_with_focus(self, value: bool) -> None: ...

